
003_UDPClient_RAW_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003104  080113bc  080113bc  000213bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144c0  080144c0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080144c0  080144c0  000244c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144c8  080144c8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144c8  080144c8  000244c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144cc  080144cc  000244cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080144d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b7c  20000078  08014548  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bf4  08014548  00038bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023118  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000555a  00000000  00000000  000531c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00058720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00059fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003272d  00000000  00000000  0005b790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1b6  00000000  00000000  0008debd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109fae  00000000  00000000  000b8073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c2021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007060  00000000  00000000  001c2074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080113a4 	.word	0x080113a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080113a4 	.word	0x080113a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fc98 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f836 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f924 	bl	800080c <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c4:	f000 f89e 	bl	8000704 <MX_TIM1_Init>
  MX_LWIP_Init();
 80005c8:	f004 fb9c 	bl	8004d04 <MX_LWIP_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f8ee 	bl	80007ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x64>)
 80005d2:	f003 fadb 	bl	8003b8c <HAL_TIM_Base_Start_IT>
  udpClient_connect();
 80005d6:	f000 fbaf 	bl	8000d38 <udpClient_connect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0x68>)
 80005dc:	f004 ff82 	bl	80054e4 <ethernetif_input>

	sys_check_timeouts();
 80005e0:	f00c f954 	bl	800c88c <sys_check_timeouts>

	// UDP Client needs to have a linksetup if cable is disconnected at power on
	// if user disconnects cable after power it works fine
	// but it doesnt work if cable is disconnected at power on
	// This function is used to set the link and indicate link down, it glows red LED when is link down
	ethernetif_set_link(&gnetif);
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x68>)
 80005e6:	f004 ffd3 	bl	8005590 <ethernetif_set_link>


	if (HAL_GetTick() - LEDBlinkTimer >= 1000)
 80005ea:	f000 fcd9 	bl	8000fa0 <HAL_GetTick>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x6c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fa:	d3ee      	bcc.n	80005da <main+0x26>
	{
	  printf("Hello from UART\r\n");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0x70>)
 80005fe:	f00f fc81 	bl	800ff04 <puts>
	  LEDBlinkTimer = HAL_GetTick();
 8000602:	f000 fccd 	bl	8000fa0 <HAL_GetTick>
 8000606:	4603      	mov	r3, r0
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <main+0x6c>)
 800060a:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800060c:	2101      	movs	r1, #1
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0x74>)
 8000610:	f002 f93f 	bl	8002892 <HAL_GPIO_TogglePin>
	ethernetif_input(&gnetif);
 8000614:	e7e1      	b.n	80005da <main+0x26>
 8000616:	bf00      	nop
 8000618:	20000094 	.word	0x20000094
 800061c:	200001dc 	.word	0x200001dc
 8000620:	20000164 	.word	0x20000164
 8000624:	080113bc 	.word	0x080113bc
 8000628:	40020400 	.word	0x40020400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00f fbbe 	bl	800fdbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <SystemClock_Config+0xd4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000698:	23d8      	movs	r3, #216	; 0xd8
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f95d 	bl	8002968 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f96c 	bl	8000990 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b8:	f002 f906 	bl	80028c8 <HAL_PWREx_EnableOverDrive>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c2:	f000 f965 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2107      	movs	r1, #7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fbe3 	bl	8002eb0 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f0:	f000 f94e 	bl	8000990 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <MX_TIM1_Init+0xa4>)
 8000726:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM1_Init+0xa0>)
 800072a:	f245 425f 	movw	r2, #21599	; 0x545f
 800072e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000738:	f242 720f 	movw	r2, #9999	; 0x270f
 800073c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_TIM1_Init+0xa0>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000750:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_TIM1_Init+0xa0>)
 8000752:	f003 f9c3 	bl	8003adc <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f918 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM1_Init+0xa0>)
 800076e:	f003 fba5 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000778:	f000 f90a 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_TIM1_Init+0xa0>)
 800078e:	f003 fdc1 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000798:	f000 f8fa 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000094 	.word	0x20000094
 80007a8:	40010000 	.word	0x40010000

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART3_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007f0:	f003 fe3c 	bl	800446c <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f8c9 	bl	8000990 <Error_Handler>



  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000e0 	.word	0x200000e0
 8000808:	40004800 	.word	0x40004800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b56      	ldr	r3, [pc, #344]	; (800097c <MX_GPIO_Init+0x170>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a55      	ldr	r2, [pc, #340]	; (800097c <MX_GPIO_Init+0x170>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <MX_GPIO_Init+0x170>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b50      	ldr	r3, [pc, #320]	; (800097c <MX_GPIO_Init+0x170>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a4f      	ldr	r2, [pc, #316]	; (800097c <MX_GPIO_Init+0x170>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b4d      	ldr	r3, [pc, #308]	; (800097c <MX_GPIO_Init+0x170>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b4a      	ldr	r3, [pc, #296]	; (800097c <MX_GPIO_Init+0x170>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a49      	ldr	r2, [pc, #292]	; (800097c <MX_GPIO_Init+0x170>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <MX_GPIO_Init+0x170>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <MX_GPIO_Init+0x170>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a43      	ldr	r2, [pc, #268]	; (800097c <MX_GPIO_Init+0x170>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_GPIO_Init+0x170>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x170>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3d      	ldr	r2, [pc, #244]	; (800097c <MX_GPIO_Init+0x170>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x170>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x170>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a37      	ldr	r2, [pc, #220]	; (800097c <MX_GPIO_Init+0x170>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x170>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b8:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_GPIO_Init+0x174>)
 80008ba:	f001 ffd1 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4830      	ldr	r0, [pc, #192]	; (8000984 <MX_GPIO_Init+0x178>)
 80008c4:	f001 ffcc 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <MX_GPIO_Init+0x17c>)
 80008e0:	f001 fe12 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0x174>)
 80008fe:	f001 fe03 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_GPIO_Init+0x178>)
 800091a:	f001 fdf5 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <MX_GPIO_Init+0x178>)
 8000932:	f001 fde9 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000936:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000948:	230a      	movs	r3, #10
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <MX_GPIO_Init+0x180>)
 8000954:	f001 fdd8 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_GPIO_Init+0x180>)
 800096e:	f001 fdcb 	bl	8002508 <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x44>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_TIM_Base_MspInit+0x44>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d113      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_TIM_Base_MspInit+0x48>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <HAL_TIM_Base_MspInit+0x48>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_TIM_Base_MspInit+0x48>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2019      	movs	r0, #25
 8000a14:	f000 fbcf 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a18:	2019      	movs	r0, #25
 8000a1a:	f000 fbe8 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0aa      	sub	sp, #168	; 0xa8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2284      	movs	r2, #132	; 0x84
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00f f9b3 	bl	800fdbc <memset>
  if(huart->Instance==USART3)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_UART_MspInit+0xb4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13c      	bne.n	8000ada <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fc44 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff ff89 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000ad6:	f001 fd17 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	37a8      	adds	r7, #168	; 0xa8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004800 	.word	0x40004800
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3c:	f000 fa1c 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b4a:	f003 f897 	bl	8003c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000094 	.word	0x20000094

08000b58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <ETH_IRQHandler+0x10>)
 8000b5e:	f000 ff3b 	bl	80019d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200032c8 	.word	0x200032c8

08000b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_kill>:

int _kill(int pid, int sig)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_kill+0x20>)
 8000b88:	2216      	movs	r2, #22
 8000b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20008be4 	.word	0x20008be4

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe5 	bl	8000b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
	}

return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
		//ITM_SendChar(*ptr++);
	}
	return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d205      	bcs.n	8000ccc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x6c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20050000 	.word	0x20050000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000168 	.word	0x20000168
 8000cf8:	20008bf8 	.word	0x20008bf8
 8000cfc:	20008be4 	.word	0x20008be4

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_TIM_PeriodElapsedCallback>:

extern TIM_HandleTypeDef htim1;
extern struct netif gnetif;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	udpClient_send();
 8000d2c:	f000 f83a 	bl	8000da4 <udpClient_send>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000d3e:	f00c fc5b 	bl	800d5f8 <udp_new>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <udpClient_connect+0x5c>)
 8000d46:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 29, 123);
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <udpClient_connect+0x60>)
 8000d4a:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 7);
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <udpClient_connect+0x5c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f107 0108 	add.w	r1, r7, #8
 8000d54:	2207      	movs	r2, #7
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00c faac 	bl	800d2b4 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 29, 100);
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <udpClient_connect+0x64>)
 8000d5e:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 8);
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <udpClient_connect+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	1d39      	adds	r1, r7, #4
 8000d66:	2208      	movs	r2, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00c fb91 	bl	800d490 <udp_connect>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <udpClient_connect+0x54>
	{
		/* 2. Send message to server */
		udpClient_send ();
 8000d7a:	f000 f813 	bl	8000da4 <udpClient_send>

		/* 3. Set a receive callback for the upcb */

		udp_recv(upcb, udp_receive_callback, NULL);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <udpClient_connect+0x5c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <udpClient_connect+0x68>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c fc16 	bl	800d5b8 <udp_recv>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000016c 	.word	0x2000016c
 8000d98:	7b1da8c0 	.word	0x7b1da8c0
 8000d9c:	641da8c0 	.word	0x641da8c0
 8000da0:	08000e09 	.word	0x08000e09

08000da4 <udpClient_send>:

static void udpClient_send(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09c      	sub	sp, #112	; 0x70
 8000da8:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "sending UDP client message %d\n", counter);
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <udpClient_send+0x58>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4913      	ldr	r1, [pc, #76]	; (8000e00 <udpClient_send+0x5c>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00f f8ec 	bl	800ff90 <siprintf>
 8000db8:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2036      	movs	r0, #54	; 0x36
 8000dc6:	f005 fcd7 	bl	8006778 <pbuf_alloc>
 8000dca:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8000dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00f      	beq.n	8000df2 <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8000dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000ddc:	f006 fa1c 	bl	8007218 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <udpClient_send+0x60>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00c f808 	bl	800cdfc <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8000dec:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000dee:	f005 ffa7 	bl	8006d40 <pbuf_free>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3770      	adds	r7, #112	; 0x70
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001d4 	.word	0x200001d4
 8000e00:	080113d0 	.word	0x080113d0
 8000e04:	2000016c 	.word	0x2000016c

08000e08 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6859      	ldr	r1, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	895b      	ldrh	r3, [r3, #10]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <udp_receive_callback+0x38>)
 8000e22:	f00f f8d5 	bl	800ffd0 <strncpy>

	/*increment message count */
	counter++;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <udp_receive_callback+0x3c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <udp_receive_callback+0x3c>)
 8000e2e:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f005 ff85 	bl	8006d40 <pbuf_free>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000170 	.word	0x20000170
 8000e44:	200001d4 	.word	0x200001d4

08000e48 <ethernetif_notify_conn_changed>:

void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(netif_is_link_up(&gnetif))
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <ethernetif_notify_conn_changed+0x48>)
 8000e52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d009      	beq.n	8000e76 <ethernetif_notify_conn_changed+0x2e>
	{
		netif_set_up(&gnetif);
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <ethernetif_notify_conn_changed+0x48>)
 8000e64:	f005 faea 	bl	800643c <netif_set_up>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <ethernetif_notify_conn_changed+0x4c>)
 8000e70:	f001 fcf6 	bl	8002860 <HAL_GPIO_WritePin>
	else
	{
		netif_set_down(&gnetif);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 8000e74:	e008      	b.n	8000e88 <ethernetif_notify_conn_changed+0x40>
		netif_set_down(&gnetif);
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <ethernetif_notify_conn_changed+0x48>)
 8000e78:	f005 fb4c 	bl	8006514 <netif_set_down>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <ethernetif_notify_conn_changed+0x4c>)
 8000e84:	f001 fcec 	bl	8002860 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001dc 	.word	0x200001dc
 8000e94:	40020400 	.word	0x40020400

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9e:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ff1d 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f00e ff1d 	bl	800fd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb73 	bl	80005b4 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000edc:	080144d0 	.word	0x080144d0
  ldr r2, =_sbss
 8000ee0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ee4:	20008bf4 	.word	0x20008bf4

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f94f 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fd48 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f967 	bl	800120a <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f92f 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200001d8 	.word	0x200001d8

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001d8 	.word	0x200001d8

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	4313      	orrs	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0000 	.word	0x05fa0000

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	; (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff3e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff31 	bl	8001064 <__NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffa2 	bl	800115c <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001234:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_ETH_Init+0x294>)
 8001236:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e180      	b.n	800154c <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f003 fe82 	bl	8004f68 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <HAL_ETH_Init+0x298>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	4a94      	ldr	r2, [pc, #592]	; (80014bc <HAL_ETH_Init+0x298>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6453      	str	r3, [r2, #68]	; 0x44
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_ETH_Init+0x298>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800127c:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <HAL_ETH_Init+0x29c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a8f      	ldr	r2, [pc, #572]	; (80014c0 <HAL_ETH_Init+0x29c>)
 8001282:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001286:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001288:	4b8d      	ldr	r3, [pc, #564]	; (80014c0 <HAL_ETH_Init+0x29c>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	498b      	ldr	r1, [pc, #556]	; (80014c0 <HAL_ETH_Init+0x29c>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ac:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012ae:	f7ff fe77 	bl	8000fa0 <HAL_GetTick>
 80012b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012b4:	e011      	b.n	80012da <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012b6:	f7ff fe73 	bl	8000fa0 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012c4:	d909      	bls.n	80012da <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e138      	b.n	800154c <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e4      	bne.n	80012b6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f023 031c 	bic.w	r3, r3, #28
 80012fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80012fc:	f001 ffca 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 8001300:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4a6f      	ldr	r2, [pc, #444]	; (80014c4 <HAL_ETH_Init+0x2a0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d908      	bls.n	800131c <HAL_ETH_Init+0xf8>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4a6e      	ldr	r2, [pc, #440]	; (80014c8 <HAL_ETH_Init+0x2a4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d804      	bhi.n	800131c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e027      	b.n	800136c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_ETH_Init+0x2a4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d908      	bls.n	8001336 <HAL_ETH_Init+0x112>
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4a64      	ldr	r2, [pc, #400]	; (80014b8 <HAL_ETH_Init+0x294>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d204      	bcs.n	8001336 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f043 030c 	orr.w	r3, r3, #12
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	e01a      	b.n	800136c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <HAL_ETH_Init+0x294>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d303      	bcc.n	8001346 <HAL_ETH_Init+0x122>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4a62      	ldr	r2, [pc, #392]	; (80014cc <HAL_ETH_Init+0x2a8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d911      	bls.n	800136a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4a60      	ldr	r2, [pc, #384]	; (80014cc <HAL_ETH_Init+0x2a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d908      	bls.n	8001360 <HAL_ETH_Init+0x13c>
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <HAL_ETH_Init+0x2ac>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d804      	bhi.n	8001360 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e005      	b.n	800136c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	e000      	b.n	800136c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800136a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001378:	2100      	movs	r1, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fc16 	bl	8001bac <HAL_ETH_WritePHYRegister>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800138a:	6939      	ldr	r1, [r7, #16]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fdcb 	bl	8001f28 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0d6      	b.n	800154c <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800139e:	20ff      	movs	r0, #255	; 0xff
 80013a0:	f7ff fe0a 	bl	8000fb8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a4 	beq.w	80014f6 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013ae:	f7ff fdf7 	bl	8000fa0 <HAL_GetTick>
 80013b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	461a      	mov	r2, r3
 80013ba:	2101      	movs	r1, #1
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fb8d 	bl	8001adc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013c2:	f7ff fded 	bl	8000fa0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d90f      	bls.n	80013f4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fda4 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0ab      	b.n	800154c <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0da      	beq.n	80013b4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80013fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001402:	2100      	movs	r1, #0
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fbd1 	bl	8001bac <HAL_ETH_WritePHYRegister>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fd86 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001424:	2301      	movs	r3, #1
 8001426:	e091      	b.n	800154c <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fdba 	bl	8000fa0 <HAL_GetTick>
 800142c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	461a      	mov	r2, r3
 8001434:	2101      	movs	r1, #1
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fb50 	bl	8001adc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800143c:	f7ff fdb0 	bl	8000fa0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d90f      	bls.n	800146e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fd67 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e06e      	b.n	800154c <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0da      	beq.n	800142e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	461a      	mov	r2, r3
 800147e:	2110      	movs	r1, #16
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fb2b 	bl	8001adc <HAL_ETH_ReadPHYRegister>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fd48 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014a0:	2301      	movs	r3, #1
 80014a2:	e053      	b.n	800154c <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d012      	beq.n	80014d4 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	e010      	b.n	80014da <HAL_ETH_Init+0x2b6>
 80014b8:	03938700 	.word	0x03938700
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	01312cff 	.word	0x01312cff
 80014c8:	02160ebf 	.word	0x02160ebf
 80014cc:	05f5e0ff 	.word	0x05f5e0ff
 80014d0:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	e026      	b.n	800153a <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e021      	b.n	800153a <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001506:	4313      	orrs	r3, r2
 8001508:	b29b      	uxth	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	2100      	movs	r1, #0
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fb4c 	bl	8001bac <HAL_ETH_WritePHYRegister>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fd01 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00c      	b.n	800154c <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001532:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001536:	f7ff fd3f 	bl	8000fb8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fcf3 	bl	8001f28 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ETH_DMATxDescListInit+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e051      	b.n	8001618 <HAL_ETH_DMATxDescListInit+0xc4>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e030      	b.n	80015f2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	015b      	lsls	r3, r3, #5
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015a0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d105      	bne.n	80015ca <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d208      	bcs.n	80015e6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4413      	add	r3, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	e002      	b.n	80015ec <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3ca      	bcc.n	8001590 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001604:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ETH_DMARxDescListInit+0x20>
 8001640:	2302      	movs	r3, #2
 8001642:	e055      	b.n	80016f0 <HAL_ETH_DMARxDescListInit+0xcc>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e034      	b.n	80016ca <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	4413      	add	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001678:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	461a      	mov	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d208      	bcs.n	80016be <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	e002      	b.n	80016c4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3c6      	bcc.n	8001660 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016dc:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ETH_TransmitFrame+0x24>
 800171c:	2302      	movs	r3, #2
 800171e:	e0cc      	b.n	80018ba <HAL_ETH_TransmitFrame+0x1be>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001746:	2301      	movs	r3, #1
 8001748:	e0b7      	b.n	80018ba <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	da09      	bge.n	8001768 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2212      	movs	r2, #18
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0a8      	b.n	80018ba <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800176e:	4293      	cmp	r3, r2
 8001770:	d915      	bls.n	800179e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001782:	fba3 1302 	umull	r1, r3, r3, r2
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e001      	b.n	80017a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d11c      	bne.n	80017e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e0:	e04b      	b.n	800187a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e044      	b.n	8001872 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800180c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001816:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3b01      	subs	r3, #1
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	429a      	cmp	r2, r3
 8001820:	d116      	bne.n	8001850 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001830:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_ETH_TransmitFrame+0x1d0>)
 8001836:	fb03 f202 	mul.w	r2, r3, r2
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	4413      	add	r3, r2
 800183e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001842:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800184e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800185e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3301      	adds	r3, #1
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3b6      	bcc.n	80017e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001894:	461a      	mov	r2, r3
 8001896:	2304      	movs	r3, #4
 8001898:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	461a      	mov	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	ac02b00b 	.word	0xac02b00b
 80018cc:	fffffa0c 	.word	0xfffffa0c

080018d0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ETH_GetReceivedFrame+0x1a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e070      	b.n	80019cc <HAL_ETH_GetReceivedFrame+0xfc>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db5a      	blt.n	80019ba <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d030      	beq.n	8001974 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001920:	2b01      	cmp	r3, #1
 8001922:	d103      	bne.n	800192c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001940:	3b04      	subs	r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e02b      	b.n	80019cc <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
 80019a2:	e00a      	b.n	80019ba <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d112      	bne.n	8001a18 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f85e 	bl	8001ab4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	461a      	mov	r2, r3
 8001a02:	2340      	movs	r3, #64	; 0x40
 8001a04:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a16:	e01a      	b.n	8001a4e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d111      	bne.n	8001a4e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f838 	bl	8001aa0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	461a      	mov	r2, r3
 8001a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a70:	d112      	bne.n	8001a98 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f828 	bl	8001ac8 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a80:	461a      	mov	r2, r3
 8001a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a86:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b82      	cmp	r3, #130	; 0x82
 8001afc:	d101      	bne.n	8001b02 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	e050      	b.n	8001ba4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2282      	movs	r2, #130	; 0x82
 8001b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 031c 	and.w	r3, r3, #28
 8001b18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8a1b      	ldrh	r3, [r3, #16]
 8001b1e:	02db      	lsls	r3, r3, #11
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4e:	f7ff fa27 	bl	8000fa0 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b54:	e015      	b.n	8001b82 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b56:	f7ff fa23 	bl	8000fa0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d309      	bcc.n	8001b7a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e014      	b.n	8001ba4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e4      	bne.n	8001b56 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b42      	cmp	r3, #66	; 0x42
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e04e      	b.n	8001c70 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2242      	movs	r2, #66	; 0x42
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 031c 	and.w	r3, r3, #28
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8a1b      	ldrh	r3, [r3, #16]
 8001bee:	02db      	lsls	r3, r3, #11
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	019b      	lsls	r3, r3, #6
 8001bfc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c28:	f7ff f9ba 	bl	8000fa0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c2e:	e015      	b.n	8001c5c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c30:	f7ff f9b6 	bl	8000fa0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d309      	bcc.n	8001c54 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e00d      	b.n	8001c70 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1e4      	bne.n	8001c30 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_ETH_Start+0x16>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e01f      	b.n	8001cce <HAL_ETH_Start+0x56>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fb40 	bl	8002324 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fb77 	bl	8002398 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fc06 	bl	80024bc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fbab 	bl	800240c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fbd4 	bl	8002464 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ETH_Stop+0x16>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e01f      	b.n	8001d2c <HAL_ETH_Stop+0x56>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fb9b 	bl	8002438 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fbc4 	bl	8002490 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fb62 	bl	80023d2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fbd4 	bl	80024bc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb22 	bl	800235e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ETH_ConfigMAC+0x1c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0e4      	b.n	8001f1a <HAL_ETH_ConfigMAC+0x1e6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b1 	beq.w	8001eca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001da4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001daa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001db0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001db6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001dbc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001dc2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f8ec 	bl	8000fb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001df0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001df6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001dfc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e02:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e08:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e0e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e1a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e1c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff f8c6 	bl	8000fb8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e46:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e64:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e6a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e70:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e76:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e7c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff f88f 	bl	8000fb8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff f87c 	bl	8000fb8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	61da      	str	r2, [r3, #28]
 8001ec8:	e01e      	b.n	8001f08 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ed8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff f85c 	bl	8000fb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	ff20810f 	.word	0xff20810f

08001f28 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b0      	sub	sp, #192	; 0xc0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f44:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
 8001f74:	e001      	b.n	8001f7a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f84:	2300      	movs	r3, #0
 8001f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002000:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <ETH_MACDMAConfig+0x380>)
 8002002:	4013      	ands	r3, r2
 8002004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002008:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800200c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002010:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002014:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800201a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800201e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002022:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002028:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800202a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800202c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800202e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002030:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002034:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002038:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800203c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205c:	2001      	movs	r0, #1
 800205e:	f7fe ffab 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800206c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800206e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002070:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002074:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800207a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800207c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002080:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002086:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800208c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002090:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002098:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800209a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe ff86 	bl	8000fb8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020dc:	4013      	ands	r3, r2
 80020de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002104:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002106:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe ff47 	bl	8000fb8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002132:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002134:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002138:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe ff32 	bl	8000fb8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002182:	2304      	movs	r3, #4
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <ETH_MACDMAConfig+0x384>)
 80021be:	4013      	ands	r3, r2
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021c4:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021c6:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021c8:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021ca:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021cc:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021ce:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021d0:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021d2:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021d4:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021d6:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021d8:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021da:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021dc:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021e0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021e4:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	461a      	mov	r2, r3
 80021fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021fe:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe fed2 	bl	8000fb8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	461a      	mov	r2, r3
 800221e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002222:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002228:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800222c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002230:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002234:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002238:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800223a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800223c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800223e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002248:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800224c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe feab 	bl	8000fb8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226a:	461a      	mov	r2, r3
 800226c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002270:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10b      	bne.n	8002292 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002282:	69d9      	ldr	r1, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <ETH_MACDMAConfig+0x388>)
 800228a:	430b      	orrs	r3, r1
 800228c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002290:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	461a      	mov	r2, r3
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f80a 	bl	80022b4 <ETH_MACAddressConfig>
}
 80022a0:	bf00      	nop
 80022a2:	37c0      	adds	r7, #192	; 0xc0
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	ff20810f 	.word	0xff20810f
 80022ac:	f8de3f23 	.word	0xf8de3f23
 80022b0:	00010040 	.word	0x00010040

080022b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3305      	adds	r3, #5
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	3204      	adds	r2, #4
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <ETH_MACAddressConfig+0x68>)
 80022d6:	4413      	add	r3, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3303      	adds	r3, #3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3302      	adds	r3, #2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <ETH_MACAddressConfig+0x6c>)
 8002306:	4413      	add	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40028040 	.word	0x40028040
 8002320:	40028044 	.word	0x40028044

08002324 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0208 	orr.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fe35 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002382:	2001      	movs	r0, #1
 8002384:	f7fe fe18 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0204 	orr.w	r2, r2, #4
 80023b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fdfb 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0204 	bic.w	r2, r2, #4
 80023ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7fe fdde 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800242a:	6193      	str	r3, [r2, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002456:	6193      	str	r3, [r2, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002482:	6193      	str	r3, [r2, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	f023 0302 	bic.w	r3, r3, #2
 80024aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ae:	6193      	str	r3, [r2, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024de:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7fe fd63 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024fc:	6193      	str	r3, [r2, #24]
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e175      	b.n	8002814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8164 	bne.w	800280e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x56>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80be 	beq.w	800280e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_GPIO_Init+0x324>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_GPIO_Init+0x324>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_GPIO_Init+0x324>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026aa:	4a61      	ldr	r2, [pc, #388]	; (8002830 <HAL_GPIO_Init+0x328>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_GPIO_Init+0x32c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d037      	beq.n	8002746 <HAL_GPIO_Init+0x23e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_GPIO_Init+0x330>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d031      	beq.n	8002742 <HAL_GPIO_Init+0x23a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_GPIO_Init+0x334>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02b      	beq.n	800273e <HAL_GPIO_Init+0x236>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a55      	ldr	r2, [pc, #340]	; (8002840 <HAL_GPIO_Init+0x338>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x232>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_GPIO_Init+0x33c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x22e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a53      	ldr	r2, [pc, #332]	; (8002848 <HAL_GPIO_Init+0x340>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x22a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_GPIO_Init+0x344>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_GPIO_Init+0x348>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_GPIO_Init+0x34c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x350>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x21a>
 800271e:	2309      	movs	r3, #9
 8002720:	e012      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002722:	230a      	movs	r3, #10
 8002724:	e010      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002726:	2308      	movs	r3, #8
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272a:	2307      	movs	r3, #7
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	; (8002830 <HAL_GPIO_Init+0x328>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_GPIO_Init+0x354>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_GPIO_Init+0x354>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_GPIO_Init+0x354>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_GPIO_Init+0x354>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_GPIO_Init+0x354>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_GPIO_Init+0x354>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae86 	bls.w	8002528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40022000 	.word	0x40022000
 8002858:	40022400 	.word	0x40022400
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	041a      	lsls	r2, r3, #16
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	400b      	ands	r3, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_PWREx_EnableOverDrive+0x98>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_PWREx_EnableOverDrive+0x98>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_PWREx_EnableOverDrive+0x98>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f6:	f7fe fb53 	bl	8000fa0 <HAL_GetTick>
 80028fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028fc:	e009      	b.n	8002912 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028fe:	f7fe fb4f 	bl	8000fa0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290c:	d901      	bls.n	8002912 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e022      	b.n	8002958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291e:	d1ee      	bne.n	80028fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7fe fb38 	bl	8000fa0 <HAL_GetTick>
 8002930:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002932:	e009      	b.n	8002948 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002934:	f7fe fb34 	bl	8000fa0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002942:	d901      	bls.n	8002948 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e007      	b.n	8002958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002954:	d1ee      	bne.n	8002934 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000

08002968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e291      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8087 	beq.w	8002a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	4b96      	ldr	r3, [pc, #600]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b04      	cmp	r3, #4
 8002996:	d00c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002998:	4b93      	ldr	r3, [pc, #588]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d112      	bne.n	80029ca <HAL_RCC_OscConfig+0x62>
 80029a4:	4b90      	ldr	r3, [pc, #576]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d06c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x130>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d168      	bne.n	8002a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e26b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x7a>
 80029d4:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a83      	ldr	r2, [pc, #524]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e02e      	b.n	8002a40 <HAL_RCC_OscConfig+0xd8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x9c>
 80029ea:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7e      	ldr	r2, [pc, #504]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 80029fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xd8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0xc0>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xd8>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b6c      	ldr	r3, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6b      	ldr	r2, [pc, #428]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe faaa 	bl	8000fa0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe faa6 	bl	8000fa0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e21f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe8>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fa96 	bl	8000fa0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa92 	bl	8000fa0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e20b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x110>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d069      	beq.n	8002b7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x190>
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x17a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1df      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	493d      	ldr	r1, [pc, #244]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e040      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fa48 	bl	8000fa0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe fa44 	bl	8000fa0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1bd      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4929      	ldr	r1, [pc, #164]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]
 8002b46:	e018      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fa24 	bl	8000fa0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fa20 	bl	8000fa0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e199      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d038      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d019      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fa01 	bl	8000fa0 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe f9fd 	bl	8000fa0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e176      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x23a>
 8002bc0:	e01a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe f9e7 	bl	8000fa0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe f9e3 	bl	8000fa0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d903      	bls.n	8002bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e15c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
 8002be8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	4b91      	ldr	r3, [pc, #580]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a4 	beq.w	8002d4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b8b      	ldr	r3, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x4d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fe f9ab 	bl	8000fa0 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe f9a7 	bl	8000fa0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	; 0x64
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e120      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c60:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x31a>
 8002c74:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a6e      	ldr	r2, [pc, #440]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	e02d      	b.n	8002cde <HAL_RCC_OscConfig+0x376>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x33c>
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a66      	ldr	r2, [pc, #408]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca2:	e01c      	b.n	8002cde <HAL_RCC_OscConfig+0x376>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x35e>
 8002cac:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x376>
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a5a      	ldr	r2, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d015      	beq.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f95b 	bl	8000fa0 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe f957 	bl	8000fa0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0ce      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCC_OscConfig+0x386>
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe f945 	bl	8000fa0 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe f941 	bl	8000fa0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4b3c      	ldr	r3, [pc, #240]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80a4 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d06b      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d149      	bne.n	8002e00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f912 	bl	8000fa0 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe f90e 	bl	8000fa0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e087      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	019b      	lsls	r3, r3, #6
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f8e2 	bl	8000fa0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f8de 	bl	8000fa0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e057      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x478>
 8002dfe:	e04f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f8c8 	bl	8000fa0 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe f8c4 	bl	8000fa0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e03d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4ac>
 8002e32:	e035      	b.n	8002ea0 <HAL_RCC_OscConfig+0x538>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x544>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d028      	beq.n	8002e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d121      	bne.n	8002e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d11a      	bne.n	8002e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d111      	bne.n	8002e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d0      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4965      	ldr	r1, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e073      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4936      	ldr	r1, [pc, #216]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fd fffc 	bl	8000fa0 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fd fff8 	bl	8000fa0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e053      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d210      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 020f 	bic.w	r2, r3, #15
 8002fea:	4922      	ldr	r1, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1cc>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1d0>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1d4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd ff58 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00
 8003078:	40023800 	.word	0x40023800
 800307c:	08014258 	.word	0x08014258
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b094      	sub	sp, #80	; 0x50
 800308e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	2300      	movs	r3, #0
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x40>
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	f200 80e1 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ba:	e0db      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c0:	e0db      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c6:	e0d8      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	2200      	movs	r2, #0
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	6139      	str	r1, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4651      	mov	r1, sl
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	4651      	mov	r1, sl
 800313c:	ebb2 0801 	subs.w	r8, r2, r1
 8003140:	4659      	mov	r1, fp
 8003142:	eb63 0901 	sbc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	462b      	mov	r3, r5
 8003168:	eb49 0303 	adc.w	r3, r9, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317a:	4629      	mov	r1, r5
 800317c:	024b      	lsls	r3, r1, #9
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003184:	4621      	mov	r1, r4
 8003186:	024a      	lsls	r2, r1, #9
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318e:	2200      	movs	r2, #0
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
 8003192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003198:	f7fd f88a 	bl	80002b0 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4613      	mov	r3, r2
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	e058      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	4611      	mov	r1, r2
 80031b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d2:	0150      	lsls	r0, r2, #5
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4641      	mov	r1, r8
 80031da:	ebb2 0a01 	subs.w	sl, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f8:	ebb2 040a 	subs.w	r4, r2, sl
 80031fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	00eb      	lsls	r3, r5, #3
 800320a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320e:	00e2      	lsls	r2, r4, #3
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4643      	mov	r3, r8
 8003216:	18e3      	adds	r3, r4, r3
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	464b      	mov	r3, r9
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324c:	f7fd f830 	bl	80002b0 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetSysClockFreq+0x204>)
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800327c:	4618      	mov	r0, r3
 800327e:	3750      	adds	r7, #80	; 0x50
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08014268 	.word	0x08014268

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08014268 	.word	0x08014268

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003324:	4b69      	ldr	r3, [pc, #420]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a68      	ldr	r2, [pc, #416]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	4964      	ldr	r1, [pc, #400]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d017      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003356:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	4959      	ldr	r1, [pc, #356]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003392:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	494a      	ldr	r1, [pc, #296]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 808b 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	4a39      	ldr	r2, [pc, #228]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6413      	str	r3, [r2, #64]	; 0x40
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003404:	f7fd fdcc 	bl	8000fa0 <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fd fdc8 	bl	8000fa0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e357      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342a:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d035      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	429a      	cmp	r2, r3
 8003446:	d02e      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003450:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d114      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fd90 	bl	8000fa0 <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	e00a      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fd fd8c 	bl	8000fa0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e319      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0ee      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b2:	d111      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	4901      	ldr	r1, [pc, #4]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	0ffffcff 	.word	0x0ffffcff
 80034d8:	4baa      	ldr	r3, [pc, #680]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4aa9      	ldr	r2, [pc, #676]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034e2:	6093      	str	r3, [r2, #8]
 80034e4:	4ba7      	ldr	r3, [pc, #668]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	49a4      	ldr	r1, [pc, #656]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003502:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	4a9e      	ldr	r2, [pc, #632]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003512:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003514:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4999      	ldr	r1, [pc, #612]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003530:	4b94      	ldr	r3, [pc, #592]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353e:	4991      	ldr	r1, [pc, #580]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003552:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	4988      	ldr	r1, [pc, #544]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003574:	4b83      	ldr	r3, [pc, #524]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003582:	4980      	ldr	r1, [pc, #512]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003596:	4b7b      	ldr	r3, [pc, #492]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4977      	ldr	r1, [pc, #476]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b8:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	496f      	ldr	r1, [pc, #444]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	f023 020c 	bic.w	r2, r3, #12
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	4966      	ldr	r1, [pc, #408]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035fc:	4b61      	ldr	r3, [pc, #388]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	495e      	ldr	r1, [pc, #376]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800361e:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	4955      	ldr	r1, [pc, #340]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	494d      	ldr	r1, [pc, #308]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	4944      	ldr	r1, [pc, #272]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003684:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	493c      	ldr	r1, [pc, #240]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	4933      	ldr	r1, [pc, #204]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d6:	492b      	ldr	r1, [pc, #172]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f8:	4922      	ldr	r1, [pc, #136]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	4912      	ldr	r1, [pc, #72]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375c:	4909      	ldr	r1, [pc, #36]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d006      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80d9 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a01      	ldr	r2, [pc, #4]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003782:	e001      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003784:	40023800 	.word	0x40023800
 8003788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd fc09 	bl	8000fa0 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003792:	f7fd fc05 	bl	8000fa0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e194      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a4:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d021      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037c4:	4b64      	ldr	r3, [pc, #400]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037d2:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d8:	0e1b      	lsrs	r3, r3, #24
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	019a      	lsls	r2, r3, #6
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	071b      	lsls	r3, r3, #28
 80037f8:	4957      	ldr	r1, [pc, #348]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02e      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382a:	d129      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800382c:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003840:	0f1b      	lsrs	r3, r3, #28
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	019a      	lsls	r2, r3, #6
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	071b      	lsls	r3, r3, #28
 8003860:	493d      	ldr	r1, [pc, #244]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386e:	f023 021f 	bic.w	r2, r3, #31
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	3b01      	subs	r3, #1
 8003878:	4937      	ldr	r1, [pc, #220]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01d      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800388c:	4b32      	ldr	r3, [pc, #200]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	0e1b      	lsrs	r3, r3, #24
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800389a:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a0:	0f1b      	lsrs	r3, r3, #28
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	019a      	lsls	r2, r3, #6
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	071b      	lsls	r3, r3, #28
 80038c0:	4925      	ldr	r1, [pc, #148]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d011      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	019a      	lsls	r2, r3, #6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	071b      	lsls	r3, r3, #28
 80038f0:	4919      	ldr	r1, [pc, #100]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fb4c 	bl	8000fa0 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800390c:	f7fd fb48 	bl	8000fa0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0d7      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 80cd 	bne.w	8003acc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393e:	f7fd fb2f 	bl	8000fa0 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003946:	f7fd fb2b 	bl	8000fa0 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b64      	cmp	r3, #100	; 0x64
 8003952:	d903      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0ba      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003958:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003968:	d0ed      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003986:	2b00      	cmp	r3, #0
 8003988:	d02e      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d12a      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003992:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039a0:	4b4d      	ldr	r3, [pc, #308]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	0f1b      	lsrs	r3, r3, #28
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	019a      	lsls	r2, r3, #6
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	4944      	ldr	r1, [pc, #272]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039ce:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	493d      	ldr	r1, [pc, #244]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fc:	d11d      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	0e1b      	lsrs	r3, r3, #24
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	0f1b      	lsrs	r3, r3, #28
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	019a      	lsls	r2, r3, #6
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	071b      	lsls	r3, r3, #28
 8003a32:	4929      	ldr	r1, [pc, #164]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d028      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	019a      	lsls	r2, r3, #6
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	071b      	lsls	r3, r3, #28
 8003a7a:	4917      	ldr	r1, [pc, #92]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4911      	ldr	r1, [pc, #68]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fa7c 	bl	8000fa0 <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aac:	f7fd fa78 	bl	8000fa0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e007      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d1ef      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800

08003adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e049      	b.n	8003b82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc ff6e 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f000 fac0 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d001      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e054      	b.n	8003c4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d022      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d01d      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_TIM_Base_Start_IT+0xe0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_TIM_Base_Start_IT+0xe4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d115      	bne.n	8003c38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_TIM_Base_Start_IT+0xec>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d015      	beq.n	8003c4a <HAL_TIM_Base_Start_IT+0xbe>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d011      	beq.n	8003c4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40010400 	.word	0x40010400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40001800 	.word	0x40001800
 8003c78:	00010007 	.word	0x00010007

08003c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0202 	mvn.w	r2, #2
 8003ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9d0 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9c2 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9d3 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0204 	mvn.w	r2, #4
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9a6 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f998 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9a9 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0208 	mvn.w	r2, #8
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2204      	movs	r2, #4
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f97c 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f96e 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f97f 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0210 	mvn.w	r2, #16
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2208      	movs	r2, #8
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f952 	bl	8004064 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f944 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f955 	bl	8004078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0201 	mvn.w	r2, #1
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc ff92 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb0c 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	d10e      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 faff 	bl	8004458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d10e      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f903 	bl	800408c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0220 	mvn.w	r2, #32
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fabf 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0b4      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x186>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_TIM_ConfigClockSource+0x190>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	d03e      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0xd4>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f16:	f200 8087 	bhi.w	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	f000 8086 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x172>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	d87f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b70      	cmp	r3, #112	; 0x70
 8003f2a:	d01a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xa6>
 8003f2c:	2b70      	cmp	r3, #112	; 0x70
 8003f2e:	d87b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b60      	cmp	r3, #96	; 0x60
 8003f32:	d050      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f34:	2b60      	cmp	r3, #96	; 0x60
 8003f36:	d877      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b50      	cmp	r3, #80	; 0x50
 8003f3a:	d03c      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f3c:	2b50      	cmp	r3, #80	; 0x50
 8003f3e:	d873      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d058      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f44:	2b40      	cmp	r3, #64	; 0x40
 8003f46:	d86f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b30      	cmp	r3, #48	; 0x30
 8003f4a:	d064      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b30      	cmp	r3, #48	; 0x30
 8003f4e:	d86b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d060      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d867      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d05a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	e062      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f000 f9af 	bl	80042d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
      break;
 8003f8e:	e04f      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f000 f998 	bl	80042d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fb2:	609a      	str	r2, [r3, #8]
      break;
 8003fb4:	e03c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 f90c 	bl	80041e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2150      	movs	r1, #80	; 0x50
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f965 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e02c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 f92b 	bl	800423e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2160      	movs	r1, #96	; 0x60
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f955 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e01c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	461a      	mov	r2, r3
 8004004:	f000 f8ec 	bl	80041e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2140      	movs	r1, #64	; 0x40
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f945 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004014:	e00c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 f93c 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004026:	e003      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e000      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800402e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	fffeff88 	.word	0xfffeff88

08004050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <TIM_Base_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3d      	ldr	r2, [pc, #244]	; (80041b8 <TIM_Base_SetConfig+0x118>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <TIM_Base_SetConfig+0x11c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a3b      	ldr	r2, [pc, #236]	; (80041c0 <TIM_Base_SetConfig+0x120>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <TIM_Base_SetConfig+0x124>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <TIM_Base_SetConfig+0x114>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d027      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2c      	ldr	r2, [pc, #176]	; (80041b8 <TIM_Base_SetConfig+0x118>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d023      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2b      	ldr	r2, [pc, #172]	; (80041bc <TIM_Base_SetConfig+0x11c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <TIM_Base_SetConfig+0x120>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0x124>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d017      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <TIM_Base_SetConfig+0x128>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <TIM_Base_SetConfig+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <TIM_Base_SetConfig+0x130>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <TIM_Base_SetConfig+0x134>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <TIM_Base_SetConfig+0x138>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a23      	ldr	r2, [pc, #140]	; (80041dc <TIM_Base_SetConfig+0x13c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <TIM_Base_SetConfig+0x114>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0xf8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <TIM_Base_SetConfig+0x124>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40010400 	.word	0x40010400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800
 80041d4:	40001800 	.word	0x40001800
 80041d8:	40001c00 	.word	0x40001c00
 80041dc:	40002000 	.word	0x40002000

080041e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0210 	bic.w	r2, r3, #16
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800427a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f043 0307 	orr.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e06d      	b.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2f      	ldr	r2, [pc, #188]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004366:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d01d      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10c      	bne.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40010000 	.word	0x40010000
 8004418:	40010400 	.word	0x40010400
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40001800 	.word	0x40001800

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e040      	b.n	8004500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc face 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f82c 	bl	8004508 <UART_SetConfig>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa84 	bl	80049d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fb0b 	bl	8004b14 <UART_CheckIdleState>
 80044fe:	4603      	mov	r3, r0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4ba6      	ldr	r3, [pc, #664]	; (80047cc <UART_SetConfig+0x2c4>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6979      	ldr	r1, [r7, #20]
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a94      	ldr	r2, [pc, #592]	; (80047d0 <UART_SetConfig+0x2c8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d120      	bne.n	80045c6 <UART_SetConfig+0xbe>
 8004584:	4b93      	ldr	r3, [pc, #588]	; (80047d4 <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d816      	bhi.n	80045c0 <UART_SetConfig+0xb8>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0x90>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b5 	.word	0x080045b5
 80045a0:	080045af 	.word	0x080045af
 80045a4:	080045bb 	.word	0x080045bb
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e150      	b.n	8004850 <UART_SetConfig+0x348>
 80045ae:	2302      	movs	r3, #2
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e14d      	b.n	8004850 <UART_SetConfig+0x348>
 80045b4:	2304      	movs	r3, #4
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e14a      	b.n	8004850 <UART_SetConfig+0x348>
 80045ba:	2308      	movs	r3, #8
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e147      	b.n	8004850 <UART_SetConfig+0x348>
 80045c0:	2310      	movs	r3, #16
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e144      	b.n	8004850 <UART_SetConfig+0x348>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a83      	ldr	r2, [pc, #524]	; (80047d8 <UART_SetConfig+0x2d0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d132      	bne.n	8004636 <UART_SetConfig+0x12e>
 80045d0:	4b80      	ldr	r3, [pc, #512]	; (80047d4 <UART_SetConfig+0x2cc>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d828      	bhi.n	8004630 <UART_SetConfig+0x128>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0xdc>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004631 	.word	0x08004631
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004631 	.word	0x08004631
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004631 	.word	0x08004631
 8004604:	0800461f 	.word	0x0800461f
 8004608:	08004631 	.word	0x08004631
 800460c:	08004631 	.word	0x08004631
 8004610:	08004631 	.word	0x08004631
 8004614:	0800462b 	.word	0x0800462b
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e118      	b.n	8004850 <UART_SetConfig+0x348>
 800461e:	2302      	movs	r3, #2
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e115      	b.n	8004850 <UART_SetConfig+0x348>
 8004624:	2304      	movs	r3, #4
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e112      	b.n	8004850 <UART_SetConfig+0x348>
 800462a:	2308      	movs	r3, #8
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e10f      	b.n	8004850 <UART_SetConfig+0x348>
 8004630:	2310      	movs	r3, #16
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e10c      	b.n	8004850 <UART_SetConfig+0x348>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a68      	ldr	r2, [pc, #416]	; (80047dc <UART_SetConfig+0x2d4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d120      	bne.n	8004682 <UART_SetConfig+0x17a>
 8004640:	4b64      	ldr	r3, [pc, #400]	; (80047d4 <UART_SetConfig+0x2cc>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800464a:	2b30      	cmp	r3, #48	; 0x30
 800464c:	d013      	beq.n	8004676 <UART_SetConfig+0x16e>
 800464e:	2b30      	cmp	r3, #48	; 0x30
 8004650:	d814      	bhi.n	800467c <UART_SetConfig+0x174>
 8004652:	2b20      	cmp	r3, #32
 8004654:	d009      	beq.n	800466a <UART_SetConfig+0x162>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d810      	bhi.n	800467c <UART_SetConfig+0x174>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x15c>
 800465e:	2b10      	cmp	r3, #16
 8004660:	d006      	beq.n	8004670 <UART_SetConfig+0x168>
 8004662:	e00b      	b.n	800467c <UART_SetConfig+0x174>
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0f2      	b.n	8004850 <UART_SetConfig+0x348>
 800466a:	2302      	movs	r3, #2
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e0ef      	b.n	8004850 <UART_SetConfig+0x348>
 8004670:	2304      	movs	r3, #4
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0ec      	b.n	8004850 <UART_SetConfig+0x348>
 8004676:	2308      	movs	r3, #8
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e0e9      	b.n	8004850 <UART_SetConfig+0x348>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e0e6      	b.n	8004850 <UART_SetConfig+0x348>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a56      	ldr	r2, [pc, #344]	; (80047e0 <UART_SetConfig+0x2d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d120      	bne.n	80046ce <UART_SetConfig+0x1c6>
 800468c:	4b51      	ldr	r3, [pc, #324]	; (80047d4 <UART_SetConfig+0x2cc>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004696:	2bc0      	cmp	r3, #192	; 0xc0
 8004698:	d013      	beq.n	80046c2 <UART_SetConfig+0x1ba>
 800469a:	2bc0      	cmp	r3, #192	; 0xc0
 800469c:	d814      	bhi.n	80046c8 <UART_SetConfig+0x1c0>
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d009      	beq.n	80046b6 <UART_SetConfig+0x1ae>
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d810      	bhi.n	80046c8 <UART_SetConfig+0x1c0>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <UART_SetConfig+0x1a8>
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d006      	beq.n	80046bc <UART_SetConfig+0x1b4>
 80046ae:	e00b      	b.n	80046c8 <UART_SetConfig+0x1c0>
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0cc      	b.n	8004850 <UART_SetConfig+0x348>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0c9      	b.n	8004850 <UART_SetConfig+0x348>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0c6      	b.n	8004850 <UART_SetConfig+0x348>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e0c3      	b.n	8004850 <UART_SetConfig+0x348>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0c0      	b.n	8004850 <UART_SetConfig+0x348>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a44      	ldr	r2, [pc, #272]	; (80047e4 <UART_SetConfig+0x2dc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d125      	bne.n	8004724 <UART_SetConfig+0x21c>
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <UART_SetConfig+0x2cc>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e6:	d017      	beq.n	8004718 <UART_SetConfig+0x210>
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ec:	d817      	bhi.n	800471e <UART_SetConfig+0x216>
 80046ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f2:	d00b      	beq.n	800470c <UART_SetConfig+0x204>
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d811      	bhi.n	800471e <UART_SetConfig+0x216>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <UART_SetConfig+0x1fe>
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d006      	beq.n	8004712 <UART_SetConfig+0x20a>
 8004704:	e00b      	b.n	800471e <UART_SetConfig+0x216>
 8004706:	2300      	movs	r3, #0
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e0a1      	b.n	8004850 <UART_SetConfig+0x348>
 800470c:	2302      	movs	r3, #2
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e09e      	b.n	8004850 <UART_SetConfig+0x348>
 8004712:	2304      	movs	r3, #4
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e09b      	b.n	8004850 <UART_SetConfig+0x348>
 8004718:	2308      	movs	r3, #8
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e098      	b.n	8004850 <UART_SetConfig+0x348>
 800471e:	2310      	movs	r3, #16
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e095      	b.n	8004850 <UART_SetConfig+0x348>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <UART_SetConfig+0x2e0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d125      	bne.n	800477a <UART_SetConfig+0x272>
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <UART_SetConfig+0x2cc>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473c:	d017      	beq.n	800476e <UART_SetConfig+0x266>
 800473e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004742:	d817      	bhi.n	8004774 <UART_SetConfig+0x26c>
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004748:	d00b      	beq.n	8004762 <UART_SetConfig+0x25a>
 800474a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474e:	d811      	bhi.n	8004774 <UART_SetConfig+0x26c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <UART_SetConfig+0x254>
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d006      	beq.n	8004768 <UART_SetConfig+0x260>
 800475a:	e00b      	b.n	8004774 <UART_SetConfig+0x26c>
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e076      	b.n	8004850 <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e073      	b.n	8004850 <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e070      	b.n	8004850 <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e06d      	b.n	8004850 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e06a      	b.n	8004850 <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <UART_SetConfig+0x2e4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d138      	bne.n	80047f6 <UART_SetConfig+0x2ee>
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800478e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004792:	d017      	beq.n	80047c4 <UART_SetConfig+0x2bc>
 8004794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004798:	d82a      	bhi.n	80047f0 <UART_SetConfig+0x2e8>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	d00b      	beq.n	80047b8 <UART_SetConfig+0x2b0>
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a4:	d824      	bhi.n	80047f0 <UART_SetConfig+0x2e8>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <UART_SetConfig+0x2aa>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d006      	beq.n	80047be <UART_SetConfig+0x2b6>
 80047b0:	e01e      	b.n	80047f0 <UART_SetConfig+0x2e8>
 80047b2:	2300      	movs	r3, #0
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e04b      	b.n	8004850 <UART_SetConfig+0x348>
 80047b8:	2302      	movs	r3, #2
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e048      	b.n	8004850 <UART_SetConfig+0x348>
 80047be:	2304      	movs	r3, #4
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e045      	b.n	8004850 <UART_SetConfig+0x348>
 80047c4:	2308      	movs	r3, #8
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e042      	b.n	8004850 <UART_SetConfig+0x348>
 80047ca:	bf00      	nop
 80047cc:	efff69f3 	.word	0xefff69f3
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40004400 	.word	0x40004400
 80047dc:	40004800 	.word	0x40004800
 80047e0:	40004c00 	.word	0x40004c00
 80047e4:	40005000 	.word	0x40005000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	40007800 	.word	0x40007800
 80047f0:	2310      	movs	r3, #16
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e02c      	b.n	8004850 <UART_SetConfig+0x348>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a72      	ldr	r2, [pc, #456]	; (80049c4 <UART_SetConfig+0x4bc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d125      	bne.n	800484c <UART_SetConfig+0x344>
 8004800:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <UART_SetConfig+0x4c0>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800480a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800480e:	d017      	beq.n	8004840 <UART_SetConfig+0x338>
 8004810:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004814:	d817      	bhi.n	8004846 <UART_SetConfig+0x33e>
 8004816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481a:	d00b      	beq.n	8004834 <UART_SetConfig+0x32c>
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	d811      	bhi.n	8004846 <UART_SetConfig+0x33e>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <UART_SetConfig+0x326>
 8004826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482a:	d006      	beq.n	800483a <UART_SetConfig+0x332>
 800482c:	e00b      	b.n	8004846 <UART_SetConfig+0x33e>
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e00d      	b.n	8004850 <UART_SetConfig+0x348>
 8004834:	2302      	movs	r3, #2
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e00a      	b.n	8004850 <UART_SetConfig+0x348>
 800483a:	2304      	movs	r3, #4
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e007      	b.n	8004850 <UART_SetConfig+0x348>
 8004840:	2308      	movs	r3, #8
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e004      	b.n	8004850 <UART_SetConfig+0x348>
 8004846:	2310      	movs	r3, #16
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e001      	b.n	8004850 <UART_SetConfig+0x348>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	d15b      	bne.n	8004912 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d828      	bhi.n	80048b2 <UART_SetConfig+0x3aa>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x360>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fd0e 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e013      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe fd1e 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <UART_SetConfig+0x4c4>)
 800489e:	61bb      	str	r3, [r7, #24]
        break;
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe fbf1 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80048a6:	61b8      	str	r0, [r7, #24]
        break;
 80048a8:	e008      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d074      	beq.n	80049ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d916      	bls.n	800490c <UART_SetConfig+0x404>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d212      	bcs.n	800490c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f023 030f 	bic.w	r3, r3, #15
 80048ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	89fb      	ldrh	r3, [r7, #14]
 80048fe:	4313      	orrs	r3, r2
 8004900:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	89fa      	ldrh	r2, [r7, #14]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e04f      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77bb      	strb	r3, [r7, #30]
 8004910:	e04c      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004912:	7ffb      	ldrb	r3, [r7, #31]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x462>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0x418>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe fcb2 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e013      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fcc2 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004950:	61b8      	str	r0, [r7, #24]
        break;
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <UART_SetConfig+0x4c4>)
 8004956:	61bb      	str	r3, [r7, #24]
        break;
 8004958:	e00c      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe fb95 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800495e:	61b8      	str	r0, [r7, #24]
        break;
 8004960:	e008      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61bb      	str	r3, [r7, #24]
        break;
 8004968:	e004      	b.n	8004974 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	77bb      	strb	r3, [r7, #30]
        break;
 8004972:	bf00      	nop
    }

    if (pclk != 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d018      	beq.n	80049ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	085a      	lsrs	r2, r3, #1
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d909      	bls.n	80049a8 <UART_SetConfig+0x4a0>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499a:	d205      	bcs.n	80049a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e001      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40007c00 	.word	0x40007c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d10a      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b24:	f7fc fa3c 	bl	8000fa0 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d10e      	bne.n	8004b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f817 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00d      	b.n	8004b72 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b09c      	sub	sp, #112	; 0x70
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	e0a5      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	f000 80a1 	beq.w	8004cd8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fc fa03 	bl	8000fa0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <UART_WaitOnFlagUntilTimeout+0x32>
 8004ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d13e      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e6      	bne.n	8004bac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3308      	adds	r3, #8
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e067      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d04f      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d147      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
 8004c72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	613b      	str	r3, [r7, #16]
   return(result);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca4:	623a      	str	r2, [r7, #32]
 8004ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e010      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f43f af4a 	beq.w	8004b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3770      	adds	r7, #112	; 0x70
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d0a:	4b8d      	ldr	r3, [pc, #564]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d0c:	22c0      	movs	r2, #192	; 0xc0
 8004d0e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d10:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d12:	22a8      	movs	r2, #168	; 0xa8
 8004d14:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 29;
 8004d16:	4b8a      	ldr	r3, [pc, #552]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d18:	221d      	movs	r2, #29
 8004d1a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004d1c:	4b88      	ldr	r3, [pc, #544]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d1e:	227b      	movs	r2, #123	; 0x7b
 8004d20:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d22:	4b88      	ldr	r3, [pc, #544]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d28:	4b86      	ldr	r3, [pc, #536]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d2e:	4b85      	ldr	r3, [pc, #532]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d34:	4b83      	ldr	r3, [pc, #524]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d3a:	4b83      	ldr	r3, [pc, #524]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004d3c:	22c0      	movs	r2, #192	; 0xc0
 8004d3e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004d40:	4b81      	ldr	r3, [pc, #516]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004d42:	22a8      	movs	r2, #168	; 0xa8
 8004d44:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 29;
 8004d46:	4b80      	ldr	r3, [pc, #512]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004d48:	221d      	movs	r2, #29
 8004d4a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d4c:	4b7e      	ldr	r3, [pc, #504]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004d52:	f000 fd0b 	bl	800576c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d56:	4b7a      	ldr	r3, [pc, #488]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	061a      	lsls	r2, r3, #24
 8004d5c:	4b78      	ldr	r3, [pc, #480]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	431a      	orrs	r2, r3
 8004d64:	4b76      	ldr	r3, [pc, #472]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d66:	789b      	ldrb	r3, [r3, #2]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	4a74      	ldr	r2, [pc, #464]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d6e:	78d2      	ldrb	r2, [r2, #3]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	061a      	lsls	r2, r3, #24
 8004d74:	4b72      	ldr	r3, [pc, #456]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	0619      	lsls	r1, r3, #24
 8004d7a:	4b71      	ldr	r3, [pc, #452]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	4319      	orrs	r1, r3
 8004d82:	4b6f      	ldr	r3, [pc, #444]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d84:	789b      	ldrb	r3, [r3, #2]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	496d      	ldr	r1, [pc, #436]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d8c:	78c9      	ldrb	r1, [r1, #3]
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d96:	431a      	orrs	r2, r3
 8004d98:	4b69      	ldr	r3, [pc, #420]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	0619      	lsls	r1, r3, #24
 8004d9e:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	4319      	orrs	r1, r3
 8004da6:	4b66      	ldr	r3, [pc, #408]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4964      	ldr	r1, [pc, #400]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004db0:	78c9      	ldrb	r1, [r1, #3]
 8004db2:	430b      	orrs	r3, r1
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	4b60      	ldr	r3, [pc, #384]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	0619      	lsls	r1, r3, #24
 8004dc2:	4b5f      	ldr	r3, [pc, #380]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	4319      	orrs	r1, r3
 8004dca:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004dcc:	789b      	ldrb	r3, [r3, #2]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	495b      	ldr	r1, [pc, #364]	; (8004f40 <MX_LWIP_Init+0x23c>)
 8004dd4:	78c9      	ldrb	r1, [r1, #3]
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	0e1b      	lsrs	r3, r3, #24
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	4a5b      	ldr	r2, [pc, #364]	; (8004f4c <MX_LWIP_Init+0x248>)
 8004dde:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004de0:	4b58      	ldr	r3, [pc, #352]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	061a      	lsls	r2, r3, #24
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	431a      	orrs	r2, r3
 8004dee:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004df0:	789b      	ldrb	r3, [r3, #2]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	4313      	orrs	r3, r2
 8004df6:	4a53      	ldr	r2, [pc, #332]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004df8:	78d2      	ldrb	r2, [r2, #3]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	061a      	lsls	r2, r3, #24
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	0619      	lsls	r1, r3, #24
 8004e04:	4b4f      	ldr	r3, [pc, #316]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4319      	orrs	r1, r3
 8004e0c:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	494b      	ldr	r1, [pc, #300]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e16:	78c9      	ldrb	r1, [r1, #3]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e20:	431a      	orrs	r2, r3
 8004e22:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	0619      	lsls	r1, r3, #24
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	4319      	orrs	r1, r3
 8004e30:	4b44      	ldr	r3, [pc, #272]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e32:	789b      	ldrb	r3, [r3, #2]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	430b      	orrs	r3, r1
 8004e38:	4942      	ldr	r1, [pc, #264]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e3a:	78c9      	ldrb	r1, [r1, #3]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e44:	431a      	orrs	r2, r3
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	0619      	lsls	r1, r3, #24
 8004e4c:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	4319      	orrs	r1, r3
 8004e54:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	4939      	ldr	r1, [pc, #228]	; (8004f44 <MX_LWIP_Init+0x240>)
 8004e5e:	78c9      	ldrb	r1, [r1, #3]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	0e1b      	lsrs	r3, r3, #24
 8004e64:	4313      	orrs	r3, r2
 8004e66:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <MX_LWIP_Init+0x24c>)
 8004e68:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	061a      	lsls	r2, r3, #24
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	431a      	orrs	r2, r3
 8004e78:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	4a31      	ldr	r2, [pc, #196]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e82:	78d2      	ldrb	r2, [r2, #3]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	061a      	lsls	r2, r3, #24
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	0619      	lsls	r1, r3, #24
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	4319      	orrs	r1, r3
 8004e96:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	492a      	ldr	r1, [pc, #168]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ea0:	78c9      	ldrb	r1, [r1, #3]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	0619      	lsls	r1, r3, #24
 8004eb2:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ebc:	789b      	ldrb	r3, [r3, #2]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	4921      	ldr	r1, [pc, #132]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ec4:	78c9      	ldrb	r1, [r1, #3]
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	0619      	lsls	r1, r3, #24
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	4319      	orrs	r1, r3
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ee0:	789b      	ldrb	r3, [r3, #2]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	4918      	ldr	r1, [pc, #96]	; (8004f48 <MX_LWIP_Init+0x244>)
 8004ee8:	78c9      	ldrb	r1, [r1, #3]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <MX_LWIP_Init+0x250>)
 8004ef2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004ef4:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <MX_LWIP_Init+0x254>)
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <MX_LWIP_Init+0x258>)
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2300      	movs	r3, #0
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <MX_LWIP_Init+0x250>)
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <MX_LWIP_Init+0x24c>)
 8004f04:	4911      	ldr	r1, [pc, #68]	; (8004f4c <MX_LWIP_Init+0x248>)
 8004f06:	4816      	ldr	r0, [pc, #88]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f08:	f001 f8d6 	bl	80060b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f0c:	4814      	ldr	r0, [pc, #80]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f0e:	f001 fa85 	bl	800641c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004f12:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004f24:	480e      	ldr	r0, [pc, #56]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f26:	f001 fa89 	bl	800643c <netif_set_up>
 8004f2a:	e002      	b.n	8004f32 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f2e:	f001 faf1 	bl	8006514 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004f32:	490c      	ldr	r1, [pc, #48]	; (8004f64 <MX_LWIP_Init+0x260>)
 8004f34:	480a      	ldr	r0, [pc, #40]	; (8004f60 <MX_LWIP_Init+0x25c>)
 8004f36:	f001 fb83 	bl	8006640 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2000021c 	.word	0x2000021c
 8004f44:	20000220 	.word	0x20000220
 8004f48:	20000224 	.word	0x20000224
 8004f4c:	20000210 	.word	0x20000210
 8004f50:	20000214 	.word	0x20000214
 8004f54:	20000218 	.word	0x20000218
 8004f58:	0800fb59 	.word	0x0800fb59
 8004f5c:	08005525 	.word	0x08005525
 8004f60:	200001dc 	.word	0x200001dc
 8004f64:	08005619 	.word	0x08005619

08004f68 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08e      	sub	sp, #56	; 0x38
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a52      	ldr	r2, [pc, #328]	; (80050d0 <HAL_ETH_MspInit+0x168>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f040 809e 	bne.w	80050c8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f8c:	4b51      	ldr	r3, [pc, #324]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	4a50      	ldr	r2, [pc, #320]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f96:	6313      	str	r3, [r2, #48]	; 0x30
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	4a4a      	ldr	r2, [pc, #296]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004faa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fae:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb0:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4a44      	ldr	r2, [pc, #272]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc8:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe0:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4a38      	ldr	r2, [pc, #224]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005004:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	6313      	str	r3, [r2, #48]	; 0x30
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800501c:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 8005022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005026:	6313      	str	r3, [r2, #48]	; 0x30
 8005028:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_ETH_MspInit+0x16c>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005034:	2332      	movs	r3, #50	; 0x32
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005038:	2302      	movs	r3, #2
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005040:	2303      	movs	r3, #3
 8005042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005044:	230b      	movs	r3, #11
 8005046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504c:	4619      	mov	r1, r3
 800504e:	4822      	ldr	r0, [pc, #136]	; (80050d8 <HAL_ETH_MspInit+0x170>)
 8005050:	f7fd fa5a 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005054:	2386      	movs	r3, #134	; 0x86
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005058:	2302      	movs	r3, #2
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005060:	2303      	movs	r3, #3
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005064:	230b      	movs	r3, #11
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800506c:	4619      	mov	r1, r3
 800506e:	481b      	ldr	r0, [pc, #108]	; (80050dc <HAL_ETH_MspInit+0x174>)
 8005070:	f7fd fa4a 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2302      	movs	r3, #2
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005082:	2303      	movs	r3, #3
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005086:	230b      	movs	r3, #11
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800508a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800508e:	4619      	mov	r1, r3
 8005090:	4813      	ldr	r0, [pc, #76]	; (80050e0 <HAL_ETH_MspInit+0x178>)
 8005092:	f7fd fa39 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005096:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509c:	2302      	movs	r3, #2
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a4:	2303      	movs	r3, #3
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050a8:	230b      	movs	r3, #11
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b0:	4619      	mov	r1, r3
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <HAL_ETH_MspInit+0x17c>)
 80050b4:	f7fd fa28 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	203d      	movs	r0, #61	; 0x3d
 80050be:	f7fc f87a 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050c2:	203d      	movs	r0, #61	; 0x3d
 80050c4:	f7fc f893 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050c8:	bf00      	nop
 80050ca:	3738      	adds	r7, #56	; 0x38
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40028000 	.word	0x40028000
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40020800 	.word	0x40020800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40021800 	.word	0x40021800

080050e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80050f4:	4b4d      	ldr	r3, [pc, #308]	; (800522c <low_level_init+0x144>)
 80050f6:	4a4e      	ldr	r2, [pc, #312]	; (8005230 <low_level_init+0x148>)
 80050f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80050fa:	4b4c      	ldr	r3, [pc, #304]	; (800522c <low_level_init+0x144>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005100:	4b4a      	ldr	r3, [pc, #296]	; (800522c <low_level_init+0x144>)
 8005102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005106:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005108:	4b48      	ldr	r3, [pc, #288]	; (800522c <low_level_init+0x144>)
 800510a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800510e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005110:	4b46      	ldr	r3, [pc, #280]	; (800522c <low_level_init+0x144>)
 8005112:	2200      	movs	r2, #0
 8005114:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005116:	2300      	movs	r3, #0
 8005118:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800511e:	23e1      	movs	r3, #225	; 0xe1
 8005120:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005122:	2300      	movs	r3, #0
 8005124:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005126:	2300      	movs	r3, #0
 8005128:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800512a:	2300      	movs	r3, #0
 800512c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800512e:	4a3f      	ldr	r2, [pc, #252]	; (800522c <low_level_init+0x144>)
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005136:	4b3d      	ldr	r3, [pc, #244]	; (800522c <low_level_init+0x144>)
 8005138:	2200      	movs	r2, #0
 800513a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800513c:	4b3b      	ldr	r3, [pc, #236]	; (800522c <low_level_init+0x144>)
 800513e:	2200      	movs	r2, #0
 8005140:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005142:	4b3a      	ldr	r3, [pc, #232]	; (800522c <low_level_init+0x144>)
 8005144:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005148:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800514a:	4838      	ldr	r0, [pc, #224]	; (800522c <low_level_init+0x144>)
 800514c:	f7fc f86a 	bl	8001224 <HAL_ETH_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	b2da      	uxtb	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800516c:	2304      	movs	r3, #4
 800516e:	4a31      	ldr	r2, [pc, #196]	; (8005234 <low_level_init+0x14c>)
 8005170:	4931      	ldr	r1, [pc, #196]	; (8005238 <low_level_init+0x150>)
 8005172:	482e      	ldr	r0, [pc, #184]	; (800522c <low_level_init+0x144>)
 8005174:	f7fc f9ee 	bl	8001554 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005178:	2304      	movs	r3, #4
 800517a:	4a30      	ldr	r2, [pc, #192]	; (800523c <low_level_init+0x154>)
 800517c:	4930      	ldr	r1, [pc, #192]	; (8005240 <low_level_init+0x158>)
 800517e:	482b      	ldr	r0, [pc, #172]	; (800522c <low_level_init+0x144>)
 8005180:	f7fc fa50 	bl	8001624 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2206      	movs	r2, #6
 8005188:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800518c:	4b27      	ldr	r3, [pc, #156]	; (800522c <low_level_init+0x144>)
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <low_level_init+0x144>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	785a      	ldrb	r2, [r3, #1]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051a4:	4b21      	ldr	r3, [pc, #132]	; (800522c <low_level_init+0x144>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	789a      	ldrb	r2, [r3, #2]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <low_level_init+0x144>)
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	78da      	ldrb	r2, [r3, #3]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <low_level_init+0x144>)
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	791a      	ldrb	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051c8:	4b18      	ldr	r3, [pc, #96]	; (800522c <low_level_init+0x144>)
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	795a      	ldrb	r2, [r3, #5]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051da:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051e2:	f043 030a 	orr.w	r3, r3, #10
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80051ee:	480f      	ldr	r0, [pc, #60]	; (800522c <low_level_init+0x144>)
 80051f0:	f7fc fd42 	bl	8001c78 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80051f4:	f107 0310 	add.w	r3, r7, #16
 80051f8:	461a      	mov	r2, r3
 80051fa:	211d      	movs	r1, #29
 80051fc:	480b      	ldr	r0, [pc, #44]	; (800522c <low_level_init+0x144>)
 80051fe:	f7fc fc6d 	bl	8001adc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f043 030b 	orr.w	r3, r3, #11
 8005208:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	461a      	mov	r2, r3
 800520e:	211d      	movs	r1, #29
 8005210:	4806      	ldr	r0, [pc, #24]	; (800522c <low_level_init+0x144>)
 8005212:	f7fc fccb 	bl	8001bac <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	461a      	mov	r2, r3
 800521c:	211d      	movs	r1, #29
 800521e:	4803      	ldr	r0, [pc, #12]	; (800522c <low_level_init+0x144>)
 8005220:	f7fc fc5c 	bl	8001adc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	200032c8 	.word	0x200032c8
 8005230:	40028000 	.word	0x40028000
 8005234:	20001af8 	.word	0x20001af8
 8005238:	200002a8 	.word	0x200002a8
 800523c:	20000328 	.word	0x20000328
 8005240:	20000228 	.word	0x20000228

08005244 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800524e:	4b4b      	ldr	r3, [pc, #300]	; (800537c <low_level_output+0x138>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005266:	4b45      	ldr	r3, [pc, #276]	; (800537c <low_level_output+0x138>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	e05a      	b.n	800532c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da03      	bge.n	8005286 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800527e:	23f8      	movs	r3, #248	; 0xf8
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005284:	e05c      	b.n	8005340 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	895b      	ldrh	r3, [r3, #10]
 800528a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005290:	e02f      	b.n	80052f2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	18d0      	adds	r0, r2, r3
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	18d1      	adds	r1, r2, r3
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	f00a fd5f 	bl	800fd6c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	da03      	bge.n	80052c4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80052bc:	23f8      	movs	r3, #248	; 0xf8
 80052be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80052c2:	e03d      	b.n	8005340 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80052d4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80052e0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80052ec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d8c8      	bhi.n	8005292 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	18d0      	adds	r0, r2, r3
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4619      	mov	r1, r3
 8005312:	f00a fd2b 	bl	800fd6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	623b      	str	r3, [r7, #32]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1a1      	bne.n	8005276 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	4811      	ldr	r0, [pc, #68]	; (800537c <low_level_output+0x138>)
 8005336:	f7fc f9e1 	bl	80016fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <low_level_output+0x138>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <low_level_output+0x138>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535a:	461a      	mov	r2, r3
 800535c:	2320      	movs	r3, #32
 800535e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <low_level_output+0x138>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800536e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	; 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200032c8 	.word	0x200032c8

08005380 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80053a4:	484e      	ldr	r0, [pc, #312]	; (80054e0 <low_level_input+0x160>)
 80053a6:	f7fc fa93 	bl	80018d0 <HAL_ETH_GetReceivedFrame>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <low_level_input+0x34>

    return NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e091      	b.n	80054d8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80053b4:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <low_level_input+0x160>)
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80053ba:	4b49      	ldr	r3, [pc, #292]	; (80054e0 <low_level_input+0x160>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80053cc:	4619      	mov	r1, r3
 80053ce:	2000      	movs	r0, #0
 80053d0:	f001 f9d2 	bl	8006778 <pbuf_alloc>
 80053d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d04b      	beq.n	8005474 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80053dc:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <low_level_input+0x160>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ea:	e040      	b.n	800546e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80053f6:	e021      	b.n	800543c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	18d0      	adds	r0, r2, r3
 8005400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	18d1      	adds	r1, r2, r3
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	461a      	mov	r2, r3
 8005410:	f00a fcac 	bl	800fd6c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800542a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005436:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005446:	4293      	cmp	r3, r2
 8005448:	d8d6      	bhi.n	80053f8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	18d0      	adds	r0, r2, r3
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4619      	mov	r1, r3
 800545c:	f00a fc86 	bl	800fd6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1bb      	bne.n	80053ec <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <low_level_input+0x160>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e00b      	b.n	8005498 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <low_level_input+0x160>)
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3ee      	bcc.n	8005480 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <low_level_input+0x160>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80054a8:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <low_level_input+0x160>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <low_level_input+0x160>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c2:	461a      	mov	r2, r3
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <low_level_input+0x160>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	6093      	str	r3, [r2, #8]
  }
  return p;
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3730      	adds	r7, #48	; 0x30
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200032c8 	.word	0x200032c8

080054e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff47 	bl	8005380 <low_level_input>
 80054f2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005508:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fc15 	bl	8006d40 <pbuf_free>
    p = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e000      	b.n	800551e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800551c:	bf00      	nop
  }
}
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <ethernetif_init+0x1c>
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <ethernetif_init+0x48>)
 8005534:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005538:	490d      	ldr	r1, [pc, #52]	; (8005570 <ethernetif_init+0x4c>)
 800553a:	480e      	ldr	r0, [pc, #56]	; (8005574 <ethernetif_init+0x50>)
 800553c:	f00a fc46 	bl	800fdcc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2273      	movs	r2, #115	; 0x73
 8005544:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2274      	movs	r2, #116	; 0x74
 800554c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <ethernetif_init+0x54>)
 8005554:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a08      	ldr	r2, [pc, #32]	; (800557c <ethernetif_init+0x58>)
 800555a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fdc3 	bl	80050e8 <low_level_init>

  return ERR_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	080113f0 	.word	0x080113f0
 8005570:	0801140c 	.word	0x0801140c
 8005574:	0801141c 	.word	0x0801141c
 8005578:	0800e005 	.word	0x0800e005
 800557c:	08005245 	.word	0x08005245

08005580 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005584:	f7fb fd0c 	bl	8000fa0 <HAL_GetTick>
 8005588:	4603      	mov	r3, r0
}
 800558a:	4618      	mov	r0, r3
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 800559c:	f7fb fd00 	bl	8000fa0 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <ethernetif_set_link+0x80>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2bc7      	cmp	r3, #199	; 0xc7
 80055aa:	d92c      	bls.n	8005606 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 80055ac:	f7fb fcf8 	bl	8000fa0 <HAL_GetTick>
 80055b0:	4603      	mov	r3, r0
 80055b2:	4a17      	ldr	r2, [pc, #92]	; (8005610 <ethernetif_set_link+0x80>)
 80055b4:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	461a      	mov	r2, r3
 80055bc:	2101      	movs	r1, #1
 80055be:	4815      	ldr	r0, [pc, #84]	; (8005614 <ethernetif_set_link+0x84>)
 80055c0:	f7fc fa8c 	bl	8001adc <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <ethernetif_set_link+0x58>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 ffc9 	bl	8006578 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 80055e6:	e00e      	b.n	8005606 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <ethernetif_set_link+0x76>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 ffed 	bl	80065e0 <netif_set_link_down>
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20003310 	.word	0x20003310
 8005614:	200032c8 	.word	0x200032c8

08005618 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800562e:	089b      	lsrs	r3, r3, #2
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d05d      	beq.n	80056f6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800563a:	4b34      	ldr	r3, [pc, #208]	; (800570c <ethernetif_update_config+0xf4>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03f      	beq.n	80056c2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005646:	2100      	movs	r1, #0
 8005648:	4830      	ldr	r0, [pc, #192]	; (800570c <ethernetif_update_config+0xf4>)
 800564a:	f7fc faaf 	bl	8001bac <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800564e:	f7fb fca7 	bl	8000fa0 <HAL_GetTick>
 8005652:	4603      	mov	r3, r0
 8005654:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	461a      	mov	r2, r3
 800565c:	2101      	movs	r1, #1
 800565e:	482b      	ldr	r0, [pc, #172]	; (800570c <ethernetif_update_config+0xf4>)
 8005660:	f7fc fa3c 	bl	8001adc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005664:	f7fb fc9c 	bl	8000fa0 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005672:	d828      	bhi.n	80056c6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0eb      	beq.n	8005656 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800567e:	f107 0308 	add.w	r3, r7, #8
 8005682:	461a      	mov	r2, r3
 8005684:	2110      	movs	r1, #16
 8005686:	4821      	ldr	r0, [pc, #132]	; (800570c <ethernetif_update_config+0xf4>)
 8005688:	f7fc fa28 	bl	8001adc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <ethernetif_update_config+0xf4>)
 8005698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	e002      	b.n	80056a6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <ethernetif_update_config+0xf4>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80056b0:	4b16      	ldr	r3, [pc, #88]	; (800570c <ethernetif_update_config+0xf4>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	e016      	b.n	80056e6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80056b8:	4b14      	ldr	r3, [pc, #80]	; (800570c <ethernetif_update_config+0xf4>)
 80056ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	e011      	b.n	80056e6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <ethernetif_update_config+0xb0>
          goto error;
 80056c6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <ethernetif_update_config+0xf4>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	08db      	lsrs	r3, r3, #3
 80056ce:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <ethernetif_update_config+0xf4>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80056d8:	4313      	orrs	r3, r2
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	2100      	movs	r1, #0
 80056e0:	480a      	ldr	r0, [pc, #40]	; (800570c <ethernetif_update_config+0xf4>)
 80056e2:	f7fc fa63 	bl	8001bac <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80056e6:	2100      	movs	r1, #0
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <ethernetif_update_config+0xf4>)
 80056ea:	f7fc fb23 	bl	8001d34 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80056ee:	4807      	ldr	r0, [pc, #28]	; (800570c <ethernetif_update_config+0xf4>)
 80056f0:	f7fc fac2 	bl	8001c78 <HAL_ETH_Start>
 80056f4:	e002      	b.n	80056fc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80056f6:	4805      	ldr	r0, [pc, #20]	; (800570c <ethernetif_update_config+0xf4>)
 80056f8:	f7fc faed 	bl	8001cd6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fb fba3 	bl	8000e48 <ethernetif_notify_conn_changed>
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200032c8 	.word	0x200032c8

08005710 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	b21a      	sxth	r2, r3
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	b29b      	uxth	r3, r3
 8005726:	b21b      	sxth	r3, r3
 8005728:	4313      	orrs	r3, r2
 800572a:	b21b      	sxth	r3, r3
 800572c:	b29b      	uxth	r3, r3
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	061a      	lsls	r2, r3, #24
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	4313      	orrs	r3, r2
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005776:	f000 f8d5 	bl	8005924 <mem_init>
  memp_init();
 800577a:	f000 fbdb 	bl	8005f34 <memp_init>
  pbuf_init();
  netif_init();
 800577e:	f000 fc93 	bl	80060a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005782:	f007 f8c5 	bl	800c910 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005786:	f001 fe0b 	bl	80073a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800578a:	f007 f837 	bl	800c7fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <ptr_to_mem+0x20>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	4413      	add	r3, r2
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20005b40 	.word	0x20005b40

080057bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <mem_to_ptr+0x20>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	b29b      	uxth	r3, r3
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20005b40 	.word	0x20005b40

080057e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80057e8:	4b45      	ldr	r3, [pc, #276]	; (8005900 <plug_holes+0x120>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d206      	bcs.n	8005800 <plug_holes+0x20>
 80057f2:	4b44      	ldr	r3, [pc, #272]	; (8005904 <plug_holes+0x124>)
 80057f4:	f240 12df 	movw	r2, #479	; 0x1df
 80057f8:	4943      	ldr	r1, [pc, #268]	; (8005908 <plug_holes+0x128>)
 80057fa:	4844      	ldr	r0, [pc, #272]	; (800590c <plug_holes+0x12c>)
 80057fc:	f00a fae6 	bl	800fdcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005800:	4b43      	ldr	r3, [pc, #268]	; (8005910 <plug_holes+0x130>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	429a      	cmp	r2, r3
 8005808:	d306      	bcc.n	8005818 <plug_holes+0x38>
 800580a:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <plug_holes+0x124>)
 800580c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005810:	4940      	ldr	r1, [pc, #256]	; (8005914 <plug_holes+0x134>)
 8005812:	483e      	ldr	r0, [pc, #248]	; (800590c <plug_holes+0x12c>)
 8005814:	f00a fada 	bl	800fdcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	791b      	ldrb	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <plug_holes+0x4e>
 8005820:	4b38      	ldr	r3, [pc, #224]	; (8005904 <plug_holes+0x124>)
 8005822:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005826:	493c      	ldr	r1, [pc, #240]	; (8005918 <plug_holes+0x138>)
 8005828:	4838      	ldr	r0, [pc, #224]	; (800590c <plug_holes+0x12c>)
 800582a:	f00a facf 	bl	800fdcc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005836:	d906      	bls.n	8005846 <plug_holes+0x66>
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <plug_holes+0x124>)
 800583a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800583e:	4937      	ldr	r1, [pc, #220]	; (800591c <plug_holes+0x13c>)
 8005840:	4832      	ldr	r0, [pc, #200]	; (800590c <plug_holes+0x12c>)
 8005842:	f00a fac3 	bl	800fdcc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff ffa4 	bl	8005798 <ptr_to_mem>
 8005850:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	429a      	cmp	r2, r3
 8005858:	d024      	beq.n	80058a4 <plug_holes+0xc4>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	791b      	ldrb	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d120      	bne.n	80058a4 <plug_holes+0xc4>
 8005862:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <plug_holes+0x130>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d01b      	beq.n	80058a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800586c:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <plug_holes+0x140>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	429a      	cmp	r2, r3
 8005874:	d102      	bne.n	800587c <plug_holes+0x9c>
      lfree = mem;
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <plug_holes+0x140>)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800588c:	d00a      	beq.n	80058a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff80 	bl	8005798 <ptr_to_mem>
 8005898:	4604      	mov	r4, r0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ff8e 	bl	80057bc <mem_to_ptr>
 80058a0:	4603      	mov	r3, r0
 80058a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	885b      	ldrh	r3, [r3, #2]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff ff75 	bl	8005798 <ptr_to_mem>
 80058ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d01f      	beq.n	80058f8 <plug_holes+0x118>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11b      	bne.n	80058f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <plug_holes+0x140>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d102      	bne.n	80058d0 <plug_holes+0xf0>
      lfree = pmem;
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <plug_holes+0x140>)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80058e0:	d00a      	beq.n	80058f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff56 	bl	8005798 <ptr_to_mem>
 80058ec:	4604      	mov	r4, r0
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7ff ff64 	bl	80057bc <mem_to_ptr>
 80058f4:	4603      	mov	r3, r0
 80058f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd90      	pop	{r4, r7, pc}
 8005900:	20005b40 	.word	0x20005b40
 8005904:	08011444 	.word	0x08011444
 8005908:	08011474 	.word	0x08011474
 800590c:	0801148c 	.word	0x0801148c
 8005910:	20005b44 	.word	0x20005b44
 8005914:	080114b4 	.word	0x080114b4
 8005918:	080114d0 	.word	0x080114d0
 800591c:	080114ec 	.word	0x080114ec
 8005920:	20005b48 	.word	0x20005b48

08005924 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <mem_init+0x68>)
 800592c:	3303      	adds	r3, #3
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	461a      	mov	r2, r3
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <mem_init+0x6c>)
 8005936:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005938:	4b15      	ldr	r3, [pc, #84]	; (8005990 <mem_init+0x6c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005944:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005952:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005956:	f7ff ff1f 	bl	8005798 <ptr_to_mem>
 800595a:	4603      	mov	r3, r0
 800595c:	4a0d      	ldr	r2, [pc, #52]	; (8005994 <mem_init+0x70>)
 800595e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <mem_init+0x70>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <mem_init+0x70>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005970:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <mem_init+0x70>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800597a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <mem_init+0x6c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a05      	ldr	r2, [pc, #20]	; (8005998 <mem_init+0x74>)
 8005982:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000332c 	.word	0x2000332c
 8005990:	20005b40 	.word	0x20005b40
 8005994:	20005b44 	.word	0x20005b44
 8005998:	20005b48 	.word	0x20005b48

0800599c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ff09 	bl	80057bc <mem_to_ptr>
 80059aa:	4603      	mov	r3, r0
 80059ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fef0 	bl	8005798 <ptr_to_mem>
 80059b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	885b      	ldrh	r3, [r3, #2]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff feea 	bl	8005798 <ptr_to_mem>
 80059c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80059ce:	d818      	bhi.n	8005a02 <mem_link_valid+0x66>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	885b      	ldrh	r3, [r3, #2]
 80059d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80059d8:	d813      	bhi.n	8005a02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80059de:	8afa      	ldrh	r2, [r7, #22]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d004      	beq.n	80059ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	8afa      	ldrh	r2, [r7, #22]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d109      	bne.n	8005a02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059ee:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <mem_link_valid+0x74>)
 80059f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d006      	beq.n	8005a06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	885b      	ldrh	r3, [r3, #2]
 80059fc:	8afa      	ldrh	r2, [r7, #22]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d001      	beq.n	8005a06 <mem_link_valid+0x6a>
    return 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e000      	b.n	8005a08 <mem_link_valid+0x6c>
  }
  return 1;
 8005a06:	2301      	movs	r3, #1
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20005b44 	.word	0x20005b44

08005a14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04c      	beq.n	8005abc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <mem_free+0xb0>)
 8005a2e:	f240 2273 	movw	r2, #627	; 0x273
 8005a32:	4925      	ldr	r1, [pc, #148]	; (8005ac8 <mem_free+0xb4>)
 8005a34:	4825      	ldr	r0, [pc, #148]	; (8005acc <mem_free+0xb8>)
 8005a36:	f00a f9c9 	bl	800fdcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a3a:	e040      	b.n	8005abe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3b08      	subs	r3, #8
 8005a40:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <mem_free+0xbc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d306      	bcc.n	8005a5a <mem_free+0x46>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 020c 	add.w	r2, r3, #12
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <mem_free+0xc0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d907      	bls.n	8005a6a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <mem_free+0xb0>)
 8005a5c:	f240 227f 	movw	r2, #639	; 0x27f
 8005a60:	491d      	ldr	r1, [pc, #116]	; (8005ad8 <mem_free+0xc4>)
 8005a62:	481a      	ldr	r0, [pc, #104]	; (8005acc <mem_free+0xb8>)
 8005a64:	f00a f9b2 	bl	800fdcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a68:	e029      	b.n	8005abe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005a72:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <mem_free+0xb0>)
 8005a74:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005a78:	4918      	ldr	r1, [pc, #96]	; (8005adc <mem_free+0xc8>)
 8005a7a:	4814      	ldr	r0, [pc, #80]	; (8005acc <mem_free+0xb8>)
 8005a7c:	f00a f9a6 	bl	800fdcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a80:	e01d      	b.n	8005abe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff8a 	bl	800599c <mem_link_valid>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d107      	bne.n	8005a9e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <mem_free+0xb0>)
 8005a90:	f240 2295 	movw	r2, #661	; 0x295
 8005a94:	4912      	ldr	r1, [pc, #72]	; (8005ae0 <mem_free+0xcc>)
 8005a96:	480d      	ldr	r0, [pc, #52]	; (8005acc <mem_free+0xb8>)
 8005a98:	f00a f998 	bl	800fdcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a9c:	e00f      	b.n	8005abe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <mem_free+0xd0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d202      	bcs.n	8005ab4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005aae:	4a0d      	ldr	r2, [pc, #52]	; (8005ae4 <mem_free+0xd0>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fe93 	bl	80057e0 <plug_holes>
 8005aba:	e000      	b.n	8005abe <mem_free+0xaa>
    return;
 8005abc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	08011444 	.word	0x08011444
 8005ac8:	08011518 	.word	0x08011518
 8005acc:	0801148c 	.word	0x0801148c
 8005ad0:	20005b40 	.word	0x20005b40
 8005ad4:	20005b44 	.word	0x20005b44
 8005ad8:	0801153c 	.word	0x0801153c
 8005adc:	08011558 	.word	0x08011558
 8005ae0:	08011580 	.word	0x08011580
 8005ae4:	20005b48 	.word	0x20005b48

08005ae8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005af4:	887b      	ldrh	r3, [r7, #2]
 8005af6:	3303      	adds	r3, #3
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005b00:	8bfb      	ldrh	r3, [r7, #30]
 8005b02:	2b0b      	cmp	r3, #11
 8005b04:	d801      	bhi.n	8005b0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005b06:	230c      	movs	r3, #12
 8005b08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b10:	d803      	bhi.n	8005b1a <mem_trim+0x32>
 8005b12:	8bfa      	ldrh	r2, [r7, #30]
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d201      	bcs.n	8005b1e <mem_trim+0x36>
    return NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e0cc      	b.n	8005cb8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005b1e:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <mem_trim+0x1d8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d304      	bcc.n	8005b32 <mem_trim+0x4a>
 8005b28:	4b66      	ldr	r3, [pc, #408]	; (8005cc4 <mem_trim+0x1dc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d306      	bcc.n	8005b40 <mem_trim+0x58>
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <mem_trim+0x1e0>)
 8005b34:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005b38:	4964      	ldr	r1, [pc, #400]	; (8005ccc <mem_trim+0x1e4>)
 8005b3a:	4865      	ldr	r0, [pc, #404]	; (8005cd0 <mem_trim+0x1e8>)
 8005b3c:	f00a f946 	bl	800fdcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005b40:	4b5f      	ldr	r3, [pc, #380]	; (8005cc0 <mem_trim+0x1d8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d304      	bcc.n	8005b54 <mem_trim+0x6c>
 8005b4a:	4b5e      	ldr	r3, [pc, #376]	; (8005cc4 <mem_trim+0x1dc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d301      	bcc.n	8005b58 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	e0af      	b.n	8005cb8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3b08      	subs	r3, #8
 8005b5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b5e:	69b8      	ldr	r0, [r7, #24]
 8005b60:	f7ff fe2c 	bl	80057bc <mem_to_ptr>
 8005b64:	4603      	mov	r3, r0
 8005b66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	8afb      	ldrh	r3, [r7, #22]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b08      	subs	r3, #8
 8005b74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005b76:	8bfa      	ldrh	r2, [r7, #30]
 8005b78:	8abb      	ldrh	r3, [r7, #20]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d906      	bls.n	8005b8c <mem_trim+0xa4>
 8005b7e:	4b52      	ldr	r3, [pc, #328]	; (8005cc8 <mem_trim+0x1e0>)
 8005b80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005b84:	4953      	ldr	r1, [pc, #332]	; (8005cd4 <mem_trim+0x1ec>)
 8005b86:	4852      	ldr	r0, [pc, #328]	; (8005cd0 <mem_trim+0x1e8>)
 8005b88:	f00a f920 	bl	800fdcc <iprintf>
  if (newsize > size) {
 8005b8c:	8bfa      	ldrh	r2, [r7, #30]
 8005b8e:	8abb      	ldrh	r3, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d901      	bls.n	8005b98 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e08f      	b.n	8005cb8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005b98:	8bfa      	ldrh	r2, [r7, #30]
 8005b9a:	8abb      	ldrh	r3, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d101      	bne.n	8005ba4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	e089      	b.n	8005cb8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fdf5 	bl	8005798 <ptr_to_mem>
 8005bae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d13f      	bne.n	8005c38 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005bc0:	d106      	bne.n	8005bd0 <mem_trim+0xe8>
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <mem_trim+0x1e0>)
 8005bc4:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005bc8:	4943      	ldr	r1, [pc, #268]	; (8005cd8 <mem_trim+0x1f0>)
 8005bca:	4841      	ldr	r0, [pc, #260]	; (8005cd0 <mem_trim+0x1e8>)
 8005bcc:	f00a f8fe 	bl	800fdcc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005bd6:	8afa      	ldrh	r2, [r7, #22]
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3308      	adds	r3, #8
 8005be0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005be2:	4b3e      	ldr	r3, [pc, #248]	; (8005cdc <mem_trim+0x1f4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d106      	bne.n	8005bfa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fdd2 	bl	8005798 <ptr_to_mem>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4a39      	ldr	r2, [pc, #228]	; (8005cdc <mem_trim+0x1f4>)
 8005bf8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005bfa:	89fb      	ldrh	r3, [r7, #14]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fdcb 	bl	8005798 <ptr_to_mem>
 8005c02:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2200      	movs	r2, #0
 8005c08:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	89ba      	ldrh	r2, [r7, #12]
 8005c0e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	8afa      	ldrh	r2, [r7, #22]
 8005c14:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	89fa      	ldrh	r2, [r7, #14]
 8005c1a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c24:	d047      	beq.n	8005cb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fdb4 	bl	8005798 <ptr_to_mem>
 8005c30:	4602      	mov	r2, r0
 8005c32:	89fb      	ldrh	r3, [r7, #14]
 8005c34:	8053      	strh	r3, [r2, #2]
 8005c36:	e03e      	b.n	8005cb6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c38:	8bfb      	ldrh	r3, [r7, #30]
 8005c3a:	f103 0214 	add.w	r2, r3, #20
 8005c3e:	8abb      	ldrh	r3, [r7, #20]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d838      	bhi.n	8005cb6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c44:	8afa      	ldrh	r2, [r7, #22]
 8005c46:	8bfb      	ldrh	r3, [r7, #30]
 8005c48:	4413      	add	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c58:	d106      	bne.n	8005c68 <mem_trim+0x180>
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <mem_trim+0x1e0>)
 8005c5c:	f240 3216 	movw	r2, #790	; 0x316
 8005c60:	491d      	ldr	r1, [pc, #116]	; (8005cd8 <mem_trim+0x1f0>)
 8005c62:	481b      	ldr	r0, [pc, #108]	; (8005cd0 <mem_trim+0x1e8>)
 8005c64:	f00a f8b2 	bl	800fdcc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fd94 	bl	8005798 <ptr_to_mem>
 8005c70:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <mem_trim+0x1f4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d202      	bcs.n	8005c82 <mem_trim+0x19a>
      lfree = mem2;
 8005c7c:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <mem_trim+0x1f4>)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2200      	movs	r2, #0
 8005c86:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	8afa      	ldrh	r2, [r7, #22]
 8005c94:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	89fa      	ldrh	r2, [r7, #14]
 8005c9a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ca4:	d007      	beq.n	8005cb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fd74 	bl	8005798 <ptr_to_mem>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	89fb      	ldrh	r3, [r7, #14]
 8005cb4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005cb6:	687b      	ldr	r3, [r7, #4]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20005b40 	.word	0x20005b40
 8005cc4:	20005b44 	.word	0x20005b44
 8005cc8:	08011444 	.word	0x08011444
 8005ccc:	080115b4 	.word	0x080115b4
 8005cd0:	0801148c 	.word	0x0801148c
 8005cd4:	080115cc 	.word	0x080115cc
 8005cd8:	080115ec 	.word	0x080115ec
 8005cdc:	20005b48 	.word	0x20005b48

08005ce0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <mem_malloc+0x14>
    return NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e0d9      	b.n	8005ea8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	3303      	adds	r3, #3
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005d00:	8bbb      	ldrh	r3, [r7, #28]
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d801      	bhi.n	8005d0a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005d06:	230c      	movs	r3, #12
 8005d08:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005d0a:	8bbb      	ldrh	r3, [r7, #28]
 8005d0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d10:	d803      	bhi.n	8005d1a <mem_malloc+0x3a>
 8005d12:	8bba      	ldrh	r2, [r7, #28]
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d201      	bcs.n	8005d1e <mem_malloc+0x3e>
    return NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e0c4      	b.n	8005ea8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d1e:	4b64      	ldr	r3, [pc, #400]	; (8005eb0 <mem_malloc+0x1d0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fd4a 	bl	80057bc <mem_to_ptr>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	83fb      	strh	r3, [r7, #30]
 8005d2c:	e0b4      	b.n	8005e98 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005d2e:	8bfb      	ldrh	r3, [r7, #30]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fd31 	bl	8005798 <ptr_to_mem>
 8005d36:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	791b      	ldrb	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 80a4 	bne.w	8005e8a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	8bfb      	ldrh	r3, [r7, #30]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f1a3 0208 	sub.w	r2, r3, #8
 8005d50:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005d52:	429a      	cmp	r2, r3
 8005d54:	f0c0 8099 	bcc.w	8005e8a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	8bfb      	ldrh	r3, [r7, #30]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f1a3 0208 	sub.w	r2, r3, #8
 8005d66:	8bbb      	ldrh	r3, [r7, #28]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d333      	bcc.n	8005dd6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005d6e:	8bfa      	ldrh	r2, [r7, #30]
 8005d70:	8bbb      	ldrh	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3308      	adds	r3, #8
 8005d78:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005d7a:	8a7b      	ldrh	r3, [r7, #18]
 8005d7c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d80:	d106      	bne.n	8005d90 <mem_malloc+0xb0>
 8005d82:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <mem_malloc+0x1d4>)
 8005d84:	f240 3287 	movw	r2, #903	; 0x387
 8005d88:	494b      	ldr	r1, [pc, #300]	; (8005eb8 <mem_malloc+0x1d8>)
 8005d8a:	484c      	ldr	r0, [pc, #304]	; (8005ebc <mem_malloc+0x1dc>)
 8005d8c:	f00a f81e 	bl	800fdcc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005d90:	8a7b      	ldrh	r3, [r7, #18]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fd00 	bl	8005798 <ptr_to_mem>
 8005d98:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8bfa      	ldrh	r2, [r7, #30]
 8005dac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	8a7a      	ldrh	r2, [r7, #18]
 8005db2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2201      	movs	r2, #1
 8005db8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005dc2:	d00b      	beq.n	8005ddc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fce5 	bl	8005798 <ptr_to_mem>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	8a7b      	ldrh	r3, [r7, #18]
 8005dd2:	8053      	strh	r3, [r2, #2]
 8005dd4:	e002      	b.n	8005ddc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005ddc:	4b34      	ldr	r3, [pc, #208]	; (8005eb0 <mem_malloc+0x1d0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d127      	bne.n	8005e36 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <mem_malloc+0x1d0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005dec:	e005      	b.n	8005dfa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fcd0 	bl	8005798 <ptr_to_mem>
 8005df8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	791b      	ldrb	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <mem_malloc+0x12c>
 8005e02:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <mem_malloc+0x1e0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d1f0      	bne.n	8005dee <mem_malloc+0x10e>
          }
          lfree = cur;
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <mem_malloc+0x1d0>)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005e12:	4b27      	ldr	r3, [pc, #156]	; (8005eb0 <mem_malloc+0x1d0>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <mem_malloc+0x1e0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d00b      	beq.n	8005e36 <mem_malloc+0x156>
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <mem_malloc+0x1d0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	791b      	ldrb	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <mem_malloc+0x156>
 8005e28:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <mem_malloc+0x1d4>)
 8005e2a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005e2e:	4925      	ldr	r1, [pc, #148]	; (8005ec4 <mem_malloc+0x1e4>)
 8005e30:	4822      	ldr	r0, [pc, #136]	; (8005ebc <mem_malloc+0x1dc>)
 8005e32:	f009 ffcb 	bl	800fdcc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005e36:	8bba      	ldrh	r2, [r7, #28]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <mem_malloc+0x1e0>)
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d906      	bls.n	8005e54 <mem_malloc+0x174>
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <mem_malloc+0x1d4>)
 8005e48:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005e4c:	491e      	ldr	r1, [pc, #120]	; (8005ec8 <mem_malloc+0x1e8>)
 8005e4e:	481b      	ldr	r0, [pc, #108]	; (8005ebc <mem_malloc+0x1dc>)
 8005e50:	f009 ffbc 	bl	800fdcc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <mem_malloc+0x18c>
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <mem_malloc+0x1d4>)
 8005e60:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005e64:	4919      	ldr	r1, [pc, #100]	; (8005ecc <mem_malloc+0x1ec>)
 8005e66:	4815      	ldr	r0, [pc, #84]	; (8005ebc <mem_malloc+0x1dc>)
 8005e68:	f009 ffb0 	bl	800fdcc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <mem_malloc+0x1a4>
 8005e76:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <mem_malloc+0x1d4>)
 8005e78:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005e7c:	4914      	ldr	r1, [pc, #80]	; (8005ed0 <mem_malloc+0x1f0>)
 8005e7e:	480f      	ldr	r0, [pc, #60]	; (8005ebc <mem_malloc+0x1dc>)
 8005e80:	f009 ffa4 	bl	800fdcc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3308      	adds	r3, #8
 8005e88:	e00e      	b.n	8005ea8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005e8a:	8bfb      	ldrh	r3, [r7, #30]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fc83 	bl	8005798 <ptr_to_mem>
 8005e92:	4603      	mov	r3, r0
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e98:	8bfa      	ldrh	r2, [r7, #30]
 8005e9a:	8bbb      	ldrh	r3, [r7, #28]
 8005e9c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f4ff af44 	bcc.w	8005d2e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20005b48 	.word	0x20005b48
 8005eb4:	08011444 	.word	0x08011444
 8005eb8:	080115ec 	.word	0x080115ec
 8005ebc:	0801148c 	.word	0x0801148c
 8005ec0:	20005b44 	.word	0x20005b44
 8005ec4:	08011600 	.word	0x08011600
 8005ec8:	0801161c 	.word	0x0801161c
 8005ecc:	0801164c 	.word	0x0801164c
 8005ed0:	0801167c 	.word	0x0801167c

08005ed4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e011      	b.n	8005f1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	889b      	ldrh	r3, [r3, #4]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4293      	cmp	r3, r2
 8005f24:	dbe7      	blt.n	8005ef6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	e009      	b.n	8005f54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <memp_init+0x30>)
 8005f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ffc3 	bl	8005ed4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	3301      	adds	r3, #1
 8005f52:	80fb      	strh	r3, [r7, #6]
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d9f2      	bls.n	8005f40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08014300 	.word	0x08014300

08005f68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d012      	beq.n	8005fa4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <do_memp_malloc_pool+0x38>
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <do_memp_malloc_pool+0x48>)
 8005f94:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005f98:	4906      	ldr	r1, [pc, #24]	; (8005fb4 <do_memp_malloc_pool+0x4c>)
 8005f9a:	4807      	ldr	r0, [pc, #28]	; (8005fb8 <do_memp_malloc_pool+0x50>)
 8005f9c:	f009 ff16 	bl	800fdcc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	e000      	b.n	8005fa6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	08011708 	.word	0x08011708
 8005fb4:	08011738 	.word	0x08011738
 8005fb8:	0801175c 	.word	0x0801175c

08005fbc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d908      	bls.n	8005fde <memp_malloc+0x22>
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <memp_malloc+0x3c>)
 8005fce:	f240 1257 	movw	r2, #343	; 0x157
 8005fd2:	490a      	ldr	r1, [pc, #40]	; (8005ffc <memp_malloc+0x40>)
 8005fd4:	480a      	ldr	r0, [pc, #40]	; (8006000 <memp_malloc+0x44>)
 8005fd6:	f009 fef9 	bl	800fdcc <iprintf>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e008      	b.n	8005ff0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	4a08      	ldr	r2, [pc, #32]	; (8006004 <memp_malloc+0x48>)
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff ffbe 	bl	8005f68 <do_memp_malloc_pool>
 8005fec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	08011708 	.word	0x08011708
 8005ffc:	08011798 	.word	0x08011798
 8006000:	0801175c 	.word	0x0801175c
 8006004:	08014300 	.word	0x08014300

08006008 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <do_memp_free_pool+0x22>
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <do_memp_free_pool+0x40>)
 800601e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006022:	490a      	ldr	r1, [pc, #40]	; (800604c <do_memp_free_pool+0x44>)
 8006024:	480a      	ldr	r0, [pc, #40]	; (8006050 <do_memp_free_pool+0x48>)
 8006026:	f009 fed1 	bl	800fdcc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	08011708 	.word	0x08011708
 800604c:	080117b8 	.word	0x080117b8
 8006050:	0801175c 	.word	0x0801175c

08006054 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b08      	cmp	r3, #8
 8006064:	d907      	bls.n	8006076 <memp_free+0x22>
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <memp_free+0x44>)
 8006068:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800606c:	490b      	ldr	r1, [pc, #44]	; (800609c <memp_free+0x48>)
 800606e:	480c      	ldr	r0, [pc, #48]	; (80060a0 <memp_free+0x4c>)
 8006070:	f009 feac 	bl	800fdcc <iprintf>
 8006074:	e00c      	b.n	8006090 <memp_free+0x3c>

  if (mem == NULL) {
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <memp_free+0x50>)
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff ffbe 	bl	8006008 <do_memp_free_pool>
 800608c:	e000      	b.n	8006090 <memp_free+0x3c>
    return;
 800608e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	08011708 	.word	0x08011708
 800609c:	080117d8 	.word	0x080117d8
 80060a0:	0801175c 	.word	0x0801175c
 80060a4:	08014300 	.word	0x08014300

080060a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d108      	bne.n	80060de <netif_add+0x26>
 80060cc:	4b57      	ldr	r3, [pc, #348]	; (800622c <netif_add+0x174>)
 80060ce:	f240 1227 	movw	r2, #295	; 0x127
 80060d2:	4957      	ldr	r1, [pc, #348]	; (8006230 <netif_add+0x178>)
 80060d4:	4857      	ldr	r0, [pc, #348]	; (8006234 <netif_add+0x17c>)
 80060d6:	f009 fe79 	bl	800fdcc <iprintf>
 80060da:	2300      	movs	r3, #0
 80060dc:	e0a2      	b.n	8006224 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <netif_add+0x3e>
 80060e4:	4b51      	ldr	r3, [pc, #324]	; (800622c <netif_add+0x174>)
 80060e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80060ea:	4953      	ldr	r1, [pc, #332]	; (8006238 <netif_add+0x180>)
 80060ec:	4851      	ldr	r0, [pc, #324]	; (8006234 <netif_add+0x17c>)
 80060ee:	f009 fe6d 	bl	800fdcc <iprintf>
 80060f2:	2300      	movs	r3, #0
 80060f4:	e096      	b.n	8006224 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80060fc:	4b4f      	ldr	r3, [pc, #316]	; (800623c <netif_add+0x184>)
 80060fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006106:	4b4d      	ldr	r3, [pc, #308]	; (800623c <netif_add+0x184>)
 8006108:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006110:	4b4a      	ldr	r3, [pc, #296]	; (800623c <netif_add+0x184>)
 8006112:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a45      	ldr	r2, [pc, #276]	; (8006240 <netif_add+0x188>)
 800612a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006146:	4b3f      	ldr	r3, [pc, #252]	; (8006244 <netif_add+0x18c>)
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006154:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f913 	bl	8006388 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	4798      	blx	r3
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <netif_add+0xba>
    return NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	e058      	b.n	8006224 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006178:	2bff      	cmp	r3, #255	; 0xff
 800617a:	d103      	bne.n	8006184 <netif_add+0xcc>
        netif->num = 0;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <netif_add+0x190>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e02b      	b.n	80061e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d106      	bne.n	80061a6 <netif_add+0xee>
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <netif_add+0x174>)
 800619a:	f240 128b 	movw	r2, #395	; 0x18b
 800619e:	492b      	ldr	r1, [pc, #172]	; (800624c <netif_add+0x194>)
 80061a0:	4824      	ldr	r0, [pc, #144]	; (8006234 <netif_add+0x17c>)
 80061a2:	f009 fe13 	bl	800fdcc <iprintf>
        num_netifs++;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2bff      	cmp	r3, #255	; 0xff
 80061b0:	dd06      	ble.n	80061c0 <netif_add+0x108>
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <netif_add+0x174>)
 80061b4:	f240 128d 	movw	r2, #397	; 0x18d
 80061b8:	4925      	ldr	r1, [pc, #148]	; (8006250 <netif_add+0x198>)
 80061ba:	481e      	ldr	r0, [pc, #120]	; (8006234 <netif_add+0x17c>)
 80061bc:	f009 fe06 	bl	800fdcc <iprintf>
        if (netif2->num == netif->num) {
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d108      	bne.n	80061e2 <netif_add+0x12a>
          netif->num++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061d6:	3301      	adds	r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80061e0:	e005      	b.n	80061ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1d0      	bne.n	8006190 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1be      	bne.n	8006172 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061fa:	2bfe      	cmp	r3, #254	; 0xfe
 80061fc:	d103      	bne.n	8006206 <netif_add+0x14e>
    netif_num = 0;
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <netif_add+0x18c>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	e006      	b.n	8006214 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800620c:	3301      	adds	r3, #1
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <netif_add+0x18c>)
 8006212:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <netif_add+0x190>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800621c:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <netif_add+0x190>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	080117f4 	.word	0x080117f4
 8006230:	08011888 	.word	0x08011888
 8006234:	08011844 	.word	0x08011844
 8006238:	080118a4 	.word	0x080118a4
 800623c:	08014364 	.word	0x08014364
 8006240:	08006663 	.word	0x08006663
 8006244:	20008a80 	.word	0x20008a80
 8006248:	20008a78 	.word	0x20008a78
 800624c:	080118c8 	.word	0x080118c8
 8006250:	080118dc 	.word	0x080118dc

08006254 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f002 fbe5 	bl	8008a30 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f007 f9dd 	bl	800d628 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <netif_do_set_ipaddr+0x20>
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <netif_do_set_ipaddr+0x88>)
 800628c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006290:	491c      	ldr	r1, [pc, #112]	; (8006304 <netif_do_set_ipaddr+0x8c>)
 8006292:	481d      	ldr	r0, [pc, #116]	; (8006308 <netif_do_set_ipaddr+0x90>)
 8006294:	f009 fd9a 	bl	800fdcc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <netif_do_set_ipaddr+0x34>
 800629e:	4b18      	ldr	r3, [pc, #96]	; (8006300 <netif_do_set_ipaddr+0x88>)
 80062a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80062a4:	4917      	ldr	r1, [pc, #92]	; (8006304 <netif_do_set_ipaddr+0x8c>)
 80062a6:	4818      	ldr	r0, [pc, #96]	; (8006308 <netif_do_set_ipaddr+0x90>)
 80062a8:	f009 fd90 	bl	800fdcc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3304      	adds	r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d01c      	beq.n	80062f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3304      	adds	r3, #4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80062ca:	f107 0314 	add.w	r3, r7, #20
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff ffbf 	bl	8006254 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <netif_do_set_ipaddr+0x6a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	e000      	b.n	80062e4 <netif_do_set_ipaddr+0x6c>
 80062e2:	2300      	movs	r3, #0
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80062e8:	2101      	movs	r1, #1
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f8d2 	bl	8006494 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	080117f4 	.word	0x080117f4
 8006304:	0801190c 	.word	0x0801190c
 8006308:	08011844 	.word	0x08011844

0800630c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3308      	adds	r3, #8
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d00a      	beq.n	800633c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <netif_do_set_netmask+0x26>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	e000      	b.n	8006334 <netif_do_set_netmask+0x28>
 8006332:	2300      	movs	r3, #0
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	330c      	adds	r3, #12
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d00a      	beq.n	800637a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <netif_do_set_gw+0x26>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	e000      	b.n	8006372 <netif_do_set_gw+0x28>
 8006370:	2300      	movs	r3, #0
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80063a4:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <netif_set_addr+0x90>)
 80063a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <netif_set_addr+0x90>)
 80063b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <netif_set_addr+0x90>)
 80063ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <netif_set_addr+0x42>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <netif_set_addr+0x46>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <netif_set_addr+0x48>
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80063d8:	f107 0310 	add.w	r3, r7, #16
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff ff49 	bl	8006278 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff ff8e 	bl	800630c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff ffa8 	bl	800634a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006400:	f107 0310 	add.w	r3, r7, #16
 8006404:	461a      	mov	r2, r3
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff ff35 	bl	8006278 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800640e:	bf00      	nop
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	08014364 	.word	0x08014364

0800641c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006424:	4a04      	ldr	r2, [pc, #16]	; (8006438 <netif_set_default+0x1c>)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20008a7c 	.word	0x20008a7c

0800643c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d107      	bne.n	800645a <netif_set_up+0x1e>
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <netif_set_up+0x4c>)
 800644c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006450:	490e      	ldr	r1, [pc, #56]	; (800648c <netif_set_up+0x50>)
 8006452:	480f      	ldr	r0, [pc, #60]	; (8006490 <netif_set_up+0x54>)
 8006454:	f009 fcba 	bl	800fdcc <iprintf>
 8006458:	e013      	b.n	8006482 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10c      	bne.n	8006482 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800647a:	2103      	movs	r1, #3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f809 	bl	8006494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	080117f4 	.word	0x080117f4
 800648c:	0801197c 	.word	0x0801197c
 8006490:	08011844 	.word	0x08011844

08006494 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <netif_issue_reports+0x20>
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <netif_issue_reports+0x74>)
 80064a8:	f240 326d 	movw	r2, #877	; 0x36d
 80064ac:	4917      	ldr	r1, [pc, #92]	; (800650c <netif_issue_reports+0x78>)
 80064ae:	4818      	ldr	r0, [pc, #96]	; (8006510 <netif_issue_reports+0x7c>)
 80064b0:	f009 fc8c 	bl	800fdcc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01e      	beq.n	8006500 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00e      	beq.n	8006502 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f008 f871 	bl	800e5e0 <etharp_request>
 80064fe:	e000      	b.n	8006502 <netif_issue_reports+0x6e>
    return;
 8006500:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	080117f4 	.word	0x080117f4
 800650c:	08011998 	.word	0x08011998
 8006510:	08011844 	.word	0x08011844

08006514 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <netif_set_down+0x1e>
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <netif_set_down+0x58>)
 8006524:	f240 329b 	movw	r2, #923	; 0x39b
 8006528:	4911      	ldr	r1, [pc, #68]	; (8006570 <netif_set_down+0x5c>)
 800652a:	4812      	ldr	r0, [pc, #72]	; (8006574 <netif_set_down+0x60>)
 800652c:	f009 fc4e 	bl	800fdcc <iprintf>
 8006530:	e019      	b.n	8006566 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f007 fbfb 	bl	800dd5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	080117f4 	.word	0x080117f4
 8006570:	080119bc 	.word	0x080119bc
 8006574:	08011844 	.word	0x08011844

08006578 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <netif_set_link_up+0x1e>
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <netif_set_link_up+0x5c>)
 8006588:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800658c:	4912      	ldr	r1, [pc, #72]	; (80065d8 <netif_set_link_up+0x60>)
 800658e:	4813      	ldr	r0, [pc, #76]	; (80065dc <netif_set_link_up+0x64>)
 8006590:	f009 fc1c 	bl	800fdcc <iprintf>
 8006594:	e01b      	b.n	80065ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d114      	bne.n	80065ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80065b6:	2103      	movs	r1, #3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff ff6b 	bl	8006494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <netif_set_link_up+0x56>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	080117f4 	.word	0x080117f4
 80065d8:	080119dc 	.word	0x080119dc
 80065dc:	08011844 	.word	0x08011844

080065e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <netif_set_link_down+0x1e>
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <netif_set_link_down+0x54>)
 80065f0:	f240 4206 	movw	r2, #1030	; 0x406
 80065f4:	4910      	ldr	r1, [pc, #64]	; (8006638 <netif_set_link_down+0x58>)
 80065f6:	4811      	ldr	r0, [pc, #68]	; (800663c <netif_set_link_down+0x5c>)
 80065f8:	f009 fbe8 	bl	800fdcc <iprintf>
 80065fc:	e017      	b.n	800662e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006612:	f023 0304 	bic.w	r3, r3, #4
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <netif_set_link_down+0x4e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	080117f4 	.word	0x080117f4
 8006638:	08011a00 	.word	0x08011a00
 800663c:	08011844 	.word	0x08011844

08006640 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	61da      	str	r2, [r3, #28]
  }
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800666e:	f06f 030b 	mvn.w	r3, #11
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006690:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <netif_get_by_index+0x48>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e00c      	b.n	80066b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800669e:	3301      	adds	r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d101      	bne.n	80066ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	e006      	b.n	80066ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ef      	bne.n	8006698 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20008a78 	.word	0x20008a78

080066cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <pbuf_free_ooseq+0x38>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <pbuf_free_ooseq+0x3c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	e00a      	b.n	80066f6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f002 f9df 	bl	8008aac <tcp_free_ooseq>
      return;
 80066ee:	e005      	b.n	80066fc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f1      	bne.n	80066e0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20008a81 	.word	0x20008a81
 8006708:	20008a90 	.word	0x20008a90

0800670c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <pbuf_pool_is_empty+0x14>)
 8006712:	2201      	movs	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006716:	bf00      	nop
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20008a81 	.word	0x20008a81

08006724 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	460b      	mov	r3, r1
 8006734:	80fb      	strh	r3, [r7, #6]
 8006736:	4613      	mov	r3, r2
 8006738:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88ba      	ldrh	r2, [r7, #4]
 8006750:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006752:	8b3b      	ldrh	r3, [r7, #24]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	7f3a      	ldrb	r2, [r7, #28]
 800675e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	73da      	strb	r2, [r3, #15]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	; 0x30
 800677c:	af02      	add	r7, sp, #8
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
 8006782:	460b      	mov	r3, r1
 8006784:	80bb      	strh	r3, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006794:	d07f      	beq.n	8006896 <pbuf_alloc+0x11e>
 8006796:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800679a:	f300 80c8 	bgt.w	800692e <pbuf_alloc+0x1b6>
 800679e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80067a2:	d010      	beq.n	80067c6 <pbuf_alloc+0x4e>
 80067a4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80067a8:	f300 80c1 	bgt.w	800692e <pbuf_alloc+0x1b6>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d002      	beq.n	80067b6 <pbuf_alloc+0x3e>
 80067b0:	2b41      	cmp	r3, #65	; 0x41
 80067b2:	f040 80bc 	bne.w	800692e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	88bb      	ldrh	r3, [r7, #4]
 80067ba:	4619      	mov	r1, r3
 80067bc:	2000      	movs	r0, #0
 80067be:	f000 f8d1 	bl	8006964 <pbuf_alloc_reference>
 80067c2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80067c4:	e0bd      	b.n	8006942 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80067ce:	88bb      	ldrh	r3, [r7, #4]
 80067d0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80067d2:	2008      	movs	r0, #8
 80067d4:	f7ff fbf2 	bl	8005fbc <memp_malloc>
 80067d8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d109      	bne.n	80067f4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80067e0:	f7ff ff94 	bl	800670c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80067ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ec:	f000 faa8 	bl	8006d40 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e0a7      	b.n	8006944 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80067f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067f6:	3303      	adds	r3, #3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006804:	b29b      	uxth	r3, r3
 8006806:	8b7a      	ldrh	r2, [r7, #26]
 8006808:	4293      	cmp	r3, r2
 800680a:	bf28      	it	cs
 800680c:	4613      	movcs	r3, r2
 800680e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006812:	3310      	adds	r3, #16
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	3303      	adds	r3, #3
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	4618      	mov	r0, r3
 8006820:	89f9      	ldrh	r1, [r7, #14]
 8006822:	8b7a      	ldrh	r2, [r7, #26]
 8006824:	2300      	movs	r3, #0
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	887b      	ldrh	r3, [r7, #2]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	460b      	mov	r3, r1
 800682e:	4601      	mov	r1, r0
 8006830:	6938      	ldr	r0, [r7, #16]
 8006832:	f7ff ff77 	bl	8006724 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d006      	beq.n	8006850 <pbuf_alloc+0xd8>
 8006842:	4b42      	ldr	r3, [pc, #264]	; (800694c <pbuf_alloc+0x1d4>)
 8006844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006848:	4941      	ldr	r1, [pc, #260]	; (8006950 <pbuf_alloc+0x1d8>)
 800684a:	4842      	ldr	r0, [pc, #264]	; (8006954 <pbuf_alloc+0x1dc>)
 800684c:	f009 fabe 	bl	800fdcc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006852:	3303      	adds	r3, #3
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800685c:	d106      	bne.n	800686c <pbuf_alloc+0xf4>
 800685e:	4b3b      	ldr	r3, [pc, #236]	; (800694c <pbuf_alloc+0x1d4>)
 8006860:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006864:	493c      	ldr	r1, [pc, #240]	; (8006958 <pbuf_alloc+0x1e0>)
 8006866:	483b      	ldr	r0, [pc, #236]	; (8006954 <pbuf_alloc+0x1dc>)
 8006868:	f009 fab0 	bl	800fdcc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	e002      	b.n	800687e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006882:	8b7a      	ldrh	r2, [r7, #26]
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800688e:	8b7b      	ldrh	r3, [r7, #26]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d19e      	bne.n	80067d2 <pbuf_alloc+0x5a>
      break;
 8006894:	e055      	b.n	8006942 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006898:	3303      	adds	r3, #3
 800689a:	b29b      	uxth	r3, r3
 800689c:	f023 0303 	bic.w	r3, r3, #3
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	88bb      	ldrh	r3, [r7, #4]
 80068a4:	3303      	adds	r3, #3
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80068b2:	8b3b      	ldrh	r3, [r7, #24]
 80068b4:	3310      	adds	r3, #16
 80068b6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80068b8:	8b3a      	ldrh	r2, [r7, #24]
 80068ba:	88bb      	ldrh	r3, [r7, #4]
 80068bc:	3303      	adds	r3, #3
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d306      	bcc.n	80068d4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80068c6:	8afa      	ldrh	r2, [r7, #22]
 80068c8:	88bb      	ldrh	r3, [r7, #4]
 80068ca:	3303      	adds	r3, #3
 80068cc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d201      	bcs.n	80068d8 <pbuf_alloc+0x160>
        return NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e035      	b.n	8006944 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80068d8:	8afb      	ldrh	r3, [r7, #22]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fa00 	bl	8005ce0 <mem_malloc>
 80068e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <pbuf_alloc+0x174>
        return NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e02b      	b.n	8006944 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80068ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ee:	3310      	adds	r3, #16
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	4413      	add	r3, r2
 80068f4:	3303      	adds	r3, #3
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	4618      	mov	r0, r3
 80068fc:	88b9      	ldrh	r1, [r7, #4]
 80068fe:	88ba      	ldrh	r2, [r7, #4]
 8006900:	2300      	movs	r3, #0
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	887b      	ldrh	r3, [r7, #2]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	460b      	mov	r3, r1
 800690a:	4601      	mov	r1, r0
 800690c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800690e:	f7ff ff09 	bl	8006724 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d010      	beq.n	8006940 <pbuf_alloc+0x1c8>
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <pbuf_alloc+0x1d4>)
 8006920:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006924:	490d      	ldr	r1, [pc, #52]	; (800695c <pbuf_alloc+0x1e4>)
 8006926:	480b      	ldr	r0, [pc, #44]	; (8006954 <pbuf_alloc+0x1dc>)
 8006928:	f009 fa50 	bl	800fdcc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800692c:	e008      	b.n	8006940 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <pbuf_alloc+0x1d4>)
 8006930:	f240 1227 	movw	r2, #295	; 0x127
 8006934:	490a      	ldr	r1, [pc, #40]	; (8006960 <pbuf_alloc+0x1e8>)
 8006936:	4807      	ldr	r0, [pc, #28]	; (8006954 <pbuf_alloc+0x1dc>)
 8006938:	f009 fa48 	bl	800fdcc <iprintf>
      return NULL;
 800693c:	2300      	movs	r3, #0
 800693e:	e001      	b.n	8006944 <pbuf_alloc+0x1cc>
      break;
 8006940:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006944:	4618      	mov	r0, r3
 8006946:	3728      	adds	r7, #40	; 0x28
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08011a24 	.word	0x08011a24
 8006950:	08011a54 	.word	0x08011a54
 8006954:	08011a84 	.word	0x08011a84
 8006958:	08011aac 	.word	0x08011aac
 800695c:	08011ae0 	.word	0x08011ae0
 8006960:	08011b0c 	.word	0x08011b0c

08006964 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
 8006970:	4613      	mov	r3, r2
 8006972:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006974:	883b      	ldrh	r3, [r7, #0]
 8006976:	2b41      	cmp	r3, #65	; 0x41
 8006978:	d009      	beq.n	800698e <pbuf_alloc_reference+0x2a>
 800697a:	883b      	ldrh	r3, [r7, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d006      	beq.n	800698e <pbuf_alloc_reference+0x2a>
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <pbuf_alloc_reference+0x5c>)
 8006982:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006986:	490f      	ldr	r1, [pc, #60]	; (80069c4 <pbuf_alloc_reference+0x60>)
 8006988:	480f      	ldr	r0, [pc, #60]	; (80069c8 <pbuf_alloc_reference+0x64>)
 800698a:	f009 fa1f 	bl	800fdcc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800698e:	2007      	movs	r0, #7
 8006990:	f7ff fb14 	bl	8005fbc <memp_malloc>
 8006994:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	e00b      	b.n	80069b8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80069a0:	8879      	ldrh	r1, [r7, #2]
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	2300      	movs	r3, #0
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	883b      	ldrh	r3, [r7, #0]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	460b      	mov	r3, r1
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff feb7 	bl	8006724 <pbuf_init_alloced_pbuf>
  return p;
 80069b6:	68fb      	ldr	r3, [r7, #12]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	08011a24 	.word	0x08011a24
 80069c4:	08011b28 	.word	0x08011b28
 80069c8:	08011a84 	.word	0x08011a84

080069cc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	460b      	mov	r3, r1
 80069da:	81bb      	strh	r3, [r7, #12]
 80069dc:	4613      	mov	r3, r2
 80069de:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80069e4:	8a7b      	ldrh	r3, [r7, #18]
 80069e6:	3303      	adds	r3, #3
 80069e8:	f023 0203 	bic.w	r2, r3, #3
 80069ec:	89bb      	ldrh	r3, [r7, #12]
 80069ee:	441a      	add	r2, r3
 80069f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d901      	bls.n	80069fa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e018      	b.n	8006a2c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a00:	8a7b      	ldrh	r3, [r7, #18]
 8006a02:	3303      	adds	r3, #3
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e001      	b.n	8006a14 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	89b9      	ldrh	r1, [r7, #12]
 8006a18:	89ba      	ldrh	r2, [r7, #12]
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	897b      	ldrh	r3, [r7, #10]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	460b      	mov	r3, r1
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	f7ff fe7d 	bl	8006724 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006a2a:	687b      	ldr	r3, [r7, #4]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <pbuf_realloc+0x20>
 8006a46:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <pbuf_realloc+0xfc>)
 8006a48:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006a4c:	4939      	ldr	r1, [pc, #228]	; (8006b34 <pbuf_realloc+0x100>)
 8006a4e:	483a      	ldr	r0, [pc, #232]	; (8006b38 <pbuf_realloc+0x104>)
 8006a50:	f009 f9bc 	bl	800fdcc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	891b      	ldrh	r3, [r3, #8]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d263      	bcs.n	8006b26 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	891a      	ldrh	r2, [r3, #8]
 8006a62:	887b      	ldrh	r3, [r7, #2]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	817b      	strh	r3, [r7, #10]
  q = p;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006a70:	e018      	b.n	8006aa4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	895b      	ldrh	r3, [r3, #10]
 8006a76:	897a      	ldrh	r2, [r7, #10]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	891a      	ldrh	r2, [r3, #8]
 8006a80:	893b      	ldrh	r3, [r7, #8]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <pbuf_realloc+0x70>
 8006a96:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <pbuf_realloc+0xfc>)
 8006a98:	f240 12af 	movw	r2, #431	; 0x1af
 8006a9c:	4927      	ldr	r1, [pc, #156]	; (8006b3c <pbuf_realloc+0x108>)
 8006a9e:	4826      	ldr	r0, [pc, #152]	; (8006b38 <pbuf_realloc+0x104>)
 8006aa0:	f009 f994 	bl	800fdcc <iprintf>
  while (rem_len > q->len) {
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	897a      	ldrh	r2, [r7, #10]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d8e1      	bhi.n	8006a72 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	7b1b      	ldrb	r3, [r3, #12]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d121      	bne.n	8006afe <pbuf_realloc+0xca>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	895b      	ldrh	r3, [r3, #10]
 8006abe:	897a      	ldrh	r2, [r7, #10]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d01c      	beq.n	8006afe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7b5b      	ldrb	r3, [r3, #13]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d116      	bne.n	8006afe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	897b      	ldrh	r3, [r7, #10]
 8006adc:	4413      	add	r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff f800 	bl	8005ae8 <mem_trim>
 8006ae8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <pbuf_realloc+0xca>
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <pbuf_realloc+0xfc>)
 8006af2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006af6:	4912      	ldr	r1, [pc, #72]	; (8006b40 <pbuf_realloc+0x10c>)
 8006af8:	480f      	ldr	r0, [pc, #60]	; (8006b38 <pbuf_realloc+0x104>)
 8006afa:	f009 f967 	bl	800fdcc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	897a      	ldrh	r2, [r7, #10]
 8006b02:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	895a      	ldrh	r2, [r3, #10]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 f911 	bl	8006d40 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e000      	b.n	8006b28 <pbuf_realloc+0xf4>
    return;
 8006b26:	bf00      	nop

}
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	08011a24 	.word	0x08011a24
 8006b34:	08011b3c 	.word	0x08011b3c
 8006b38:	08011a84 	.word	0x08011a84
 8006b3c:	08011b54 	.word	0x08011b54
 8006b40:	08011b6c 	.word	0x08011b6c

08006b44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <pbuf_add_header_impl+0x22>
 8006b58:	4b2b      	ldr	r3, [pc, #172]	; (8006c08 <pbuf_add_header_impl+0xc4>)
 8006b5a:	f240 12df 	movw	r2, #479	; 0x1df
 8006b5e:	492b      	ldr	r1, [pc, #172]	; (8006c0c <pbuf_add_header_impl+0xc8>)
 8006b60:	482b      	ldr	r0, [pc, #172]	; (8006c10 <pbuf_add_header_impl+0xcc>)
 8006b62:	f009 f933 	bl	800fdcc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <pbuf_add_header_impl+0x30>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d301      	bcc.n	8006b78 <pbuf_add_header_impl+0x34>
    return 1;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e043      	b.n	8006c00 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <pbuf_add_header_impl+0x3e>
    return 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e03e      	b.n	8006c00 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	891a      	ldrh	r2, [r3, #8]
 8006b8a:	8a7b      	ldrh	r3, [r7, #18]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8a7a      	ldrh	r2, [r7, #18]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d901      	bls.n	8006b9a <pbuf_add_header_impl+0x56>
    return 1;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e032      	b.n	8006c00 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	7b1b      	ldrb	r3, [r3, #12]
 8006b9e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006ba0:	8a3b      	ldrh	r3, [r7, #16]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	425b      	negs	r3, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3310      	adds	r3, #16
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d20d      	bcs.n	8006bdc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e01d      	b.n	8006c00 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	425b      	negs	r3, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e001      	b.n	8006bdc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e011      	b.n	8006c00 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	895a      	ldrh	r2, [r3, #10]
 8006be6:	8a7b      	ldrh	r3, [r7, #18]
 8006be8:	4413      	add	r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	891a      	ldrh	r2, [r3, #8]
 8006bf4:	8a7b      	ldrh	r3, [r7, #18]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	811a      	strh	r2, [r3, #8]


  return 0;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08011a24 	.word	0x08011a24
 8006c0c:	08011b88 	.word	0x08011b88
 8006c10:	08011a84 	.word	0x08011a84

08006c14 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff ff8e 	bl	8006b44 <pbuf_add_header_impl>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <pbuf_remove_header+0x1e>
 8006c44:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <pbuf_remove_header+0x94>)
 8006c46:	f240 224b 	movw	r2, #587	; 0x24b
 8006c4a:	4920      	ldr	r1, [pc, #128]	; (8006ccc <pbuf_remove_header+0x98>)
 8006c4c:	4820      	ldr	r0, [pc, #128]	; (8006cd0 <pbuf_remove_header+0x9c>)
 8006c4e:	f009 f8bd 	bl	800fdcc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <pbuf_remove_header+0x2c>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5e:	d301      	bcc.n	8006c64 <pbuf_remove_header+0x30>
    return 1;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02c      	b.n	8006cbe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <pbuf_remove_header+0x3a>
    return 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e027      	b.n	8006cbe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	895b      	ldrh	r3, [r3, #10]
 8006c76:	89fa      	ldrh	r2, [r7, #14]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d908      	bls.n	8006c8e <pbuf_remove_header+0x5a>
 8006c7c:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <pbuf_remove_header+0x94>)
 8006c7e:	f240 2255 	movw	r2, #597	; 0x255
 8006c82:	4914      	ldr	r1, [pc, #80]	; (8006cd4 <pbuf_remove_header+0xa0>)
 8006c84:	4812      	ldr	r0, [pc, #72]	; (8006cd0 <pbuf_remove_header+0x9c>)
 8006c86:	f009 f8a1 	bl	800fdcc <iprintf>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e017      	b.n	8006cbe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	895a      	ldrh	r2, [r3, #10]
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	891a      	ldrh	r2, [r3, #8]
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	08011a24 	.word	0x08011a24
 8006ccc:	08011b88 	.word	0x08011b88
 8006cd0:	08011a84 	.word	0x08011a84
 8006cd4:	08011b94 	.word	0x08011b94

08006cd8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ce8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da08      	bge.n	8006d02 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff ff9b 	bl	8006c34 <pbuf_remove_header>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	e007      	b.n	8006d12 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006d02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d06:	787a      	ldrb	r2, [r7, #1]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff ff1a 	bl	8006b44 <pbuf_add_header_impl>
 8006d10:	4603      	mov	r3, r0
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006d26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff ffd2 	bl	8006cd8 <pbuf_header_impl>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <pbuf_free+0x22>
 8006d54:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <pbuf_free+0xf8>)
 8006d56:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006d5a:	4938      	ldr	r1, [pc, #224]	; (8006e3c <pbuf_free+0xfc>)
 8006d5c:	4838      	ldr	r0, [pc, #224]	; (8006e40 <pbuf_free+0x100>)
 8006d5e:	f009 f835 	bl	800fdcc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e063      	b.n	8006e2e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006d6a:	e05c      	b.n	8006e26 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7b9b      	ldrb	r3, [r3, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <pbuf_free+0x42>
 8006d74:	4b30      	ldr	r3, [pc, #192]	; (8006e38 <pbuf_free+0xf8>)
 8006d76:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006d7a:	4932      	ldr	r1, [pc, #200]	; (8006e44 <pbuf_free+0x104>)
 8006d7c:	4830      	ldr	r0, [pc, #192]	; (8006e40 <pbuf_free+0x100>)
 8006d7e:	f009 f825 	bl	800fdcc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7b9b      	ldrb	r3, [r3, #14]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	739a      	strb	r2, [r3, #14]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	7b9b      	ldrb	r3, [r3, #14]
 8006d92:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006d94:	7dbb      	ldrb	r3, [r7, #22]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d143      	bne.n	8006e22 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7b5b      	ldrb	r3, [r3, #13]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <pbuf_free+0x90>
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <pbuf_free+0xf8>)
 8006dc4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006dc8:	491f      	ldr	r1, [pc, #124]	; (8006e48 <pbuf_free+0x108>)
 8006dca:	481d      	ldr	r0, [pc, #116]	; (8006e40 <pbuf_free+0x100>)
 8006dcc:	f008 fffe 	bl	800fdcc <iprintf>
        pc->custom_free_function(p);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
 8006dd8:	e01d      	b.n	8006e16 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d104      	bne.n	8006dea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	2008      	movs	r0, #8
 8006de4:	f7ff f936 	bl	8006054 <memp_free>
 8006de8:	e015      	b.n	8006e16 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d104      	bne.n	8006dfa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	2007      	movs	r0, #7
 8006df4:	f7ff f92e 	bl	8006054 <memp_free>
 8006df8:	e00d      	b.n	8006e16 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <pbuf_free+0xc8>
          mem_free(p);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe fe07 	bl	8005a14 <mem_free>
 8006e06:	e006      	b.n	8006e16 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <pbuf_free+0xf8>)
 8006e0a:	f240 320f 	movw	r2, #783	; 0x30f
 8006e0e:	490f      	ldr	r1, [pc, #60]	; (8006e4c <pbuf_free+0x10c>)
 8006e10:	480b      	ldr	r0, [pc, #44]	; (8006e40 <pbuf_free+0x100>)
 8006e12:	f008 ffdb 	bl	800fdcc <iprintf>
        }
      }
      count++;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	e001      	b.n	8006e26 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d19f      	bne.n	8006d6c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	08011a24 	.word	0x08011a24
 8006e3c:	08011b88 	.word	0x08011b88
 8006e40:	08011a84 	.word	0x08011a84
 8006e44:	08011bb4 	.word	0x08011bb4
 8006e48:	08011bcc 	.word	0x08011bcc
 8006e4c:	08011bf0 	.word	0x08011bf0

08006e50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006e5c:	e005      	b.n	8006e6a <pbuf_clen+0x1a>
    ++len;
 8006e5e:	89fb      	ldrh	r3, [r7, #14]
 8006e60:	3301      	adds	r3, #1
 8006e62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f6      	bne.n	8006e5e <pbuf_clen+0xe>
  }
  return len;
 8006e70:	89fb      	ldrh	r3, [r7, #14]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7b9b      	ldrb	r3, [r3, #14]
 8006e92:	3301      	adds	r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7b9b      	ldrb	r3, [r3, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <pbuf_ref+0x30>
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <pbuf_ref+0x38>)
 8006ea4:	f240 3242 	movw	r2, #834	; 0x342
 8006ea8:	4904      	ldr	r1, [pc, #16]	; (8006ebc <pbuf_ref+0x3c>)
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <pbuf_ref+0x40>)
 8006eac:	f008 ff8e 	bl	800fdcc <iprintf>
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	08011a24 	.word	0x08011a24
 8006ebc:	08011c04 	.word	0x08011c04
 8006ec0:	08011a84 	.word	0x08011a84

08006ec4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <pbuf_cat+0x16>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d107      	bne.n	8006eea <pbuf_cat+0x26>
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <pbuf_cat+0x98>)
 8006edc:	f240 3259 	movw	r2, #857	; 0x359
 8006ee0:	491f      	ldr	r1, [pc, #124]	; (8006f60 <pbuf_cat+0x9c>)
 8006ee2:	4820      	ldr	r0, [pc, #128]	; (8006f64 <pbuf_cat+0xa0>)
 8006ee4:	f008 ff72 	bl	800fdcc <iprintf>
 8006ee8:	e034      	b.n	8006f54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e00a      	b.n	8006f06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	891a      	ldrh	r2, [r3, #8]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	891b      	ldrh	r3, [r3, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	891a      	ldrh	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	895b      	ldrh	r3, [r3, #10]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d006      	beq.n	8006f28 <pbuf_cat+0x64>
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <pbuf_cat+0x98>)
 8006f1c:	f240 3262 	movw	r2, #866	; 0x362
 8006f20:	4911      	ldr	r1, [pc, #68]	; (8006f68 <pbuf_cat+0xa4>)
 8006f22:	4810      	ldr	r0, [pc, #64]	; (8006f64 <pbuf_cat+0xa0>)
 8006f24:	f008 ff52 	bl	800fdcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <pbuf_cat+0x7a>
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <pbuf_cat+0x98>)
 8006f32:	f240 3263 	movw	r2, #867	; 0x363
 8006f36:	490d      	ldr	r1, [pc, #52]	; (8006f6c <pbuf_cat+0xa8>)
 8006f38:	480a      	ldr	r0, [pc, #40]	; (8006f64 <pbuf_cat+0xa0>)
 8006f3a:	f008 ff47 	bl	800fdcc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	891a      	ldrh	r2, [r3, #8]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	891b      	ldrh	r3, [r3, #8]
 8006f46:	4413      	add	r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08011a24 	.word	0x08011a24
 8006f60:	08011c18 	.word	0x08011c18
 8006f64:	08011a84 	.word	0x08011a84
 8006f68:	08011c50 	.word	0x08011c50
 8006f6c:	08011c80 	.word	0x08011c80

08006f70 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ffa1 	bl	8006ec4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006f82:	6838      	ldr	r0, [r7, #0]
 8006f84:	f7ff ff7c 	bl	8006e80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <pbuf_copy+0x2a>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <pbuf_copy+0x2a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	891a      	ldrh	r2, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	891b      	ldrh	r3, [r3, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d209      	bcs.n	8006fce <pbuf_copy+0x3e>
 8006fba:	4b57      	ldr	r3, [pc, #348]	; (8007118 <pbuf_copy+0x188>)
 8006fbc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006fc0:	4956      	ldr	r1, [pc, #344]	; (800711c <pbuf_copy+0x18c>)
 8006fc2:	4857      	ldr	r0, [pc, #348]	; (8007120 <pbuf_copy+0x190>)
 8006fc4:	f008 ff02 	bl	800fdcc <iprintf>
 8006fc8:	f06f 030f 	mvn.w	r3, #15
 8006fcc:	e09f      	b.n	800710e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	895b      	ldrh	r3, [r3, #10]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	895b      	ldrh	r3, [r3, #10]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1acb      	subs	r3, r1, r3
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d306      	bcc.n	8006ff4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	895b      	ldrh	r3, [r3, #10]
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e005      	b.n	8007000 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	18d0      	adds	r0, r2, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4619      	mov	r1, r3
 8007014:	f008 feaa 	bl	800fd6c <memcpy>
    offset_to += len;
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	895b      	ldrh	r3, [r3, #10]
 800702c:	461a      	mov	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4293      	cmp	r3, r2
 8007032:	d906      	bls.n	8007042 <pbuf_copy+0xb2>
 8007034:	4b38      	ldr	r3, [pc, #224]	; (8007118 <pbuf_copy+0x188>)
 8007036:	f240 32d9 	movw	r2, #985	; 0x3d9
 800703a:	493a      	ldr	r1, [pc, #232]	; (8007124 <pbuf_copy+0x194>)
 800703c:	4838      	ldr	r0, [pc, #224]	; (8007120 <pbuf_copy+0x190>)
 800703e:	f008 fec5 	bl	800fdcc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	895b      	ldrh	r3, [r3, #10]
 8007046:	461a      	mov	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4293      	cmp	r3, r2
 800704c:	d906      	bls.n	800705c <pbuf_copy+0xcc>
 800704e:	4b32      	ldr	r3, [pc, #200]	; (8007118 <pbuf_copy+0x188>)
 8007050:	f240 32da 	movw	r2, #986	; 0x3da
 8007054:	4934      	ldr	r1, [pc, #208]	; (8007128 <pbuf_copy+0x198>)
 8007056:	4832      	ldr	r0, [pc, #200]	; (8007120 <pbuf_copy+0x190>)
 8007058:	f008 feb8 	bl	800fdcc <iprintf>
    if (offset_from >= p_from->len) {
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	895b      	ldrh	r3, [r3, #10]
 8007060:	461a      	mov	r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4293      	cmp	r3, r2
 8007066:	d304      	bcc.n	8007072 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	895b      	ldrh	r3, [r3, #10]
 8007076:	461a      	mov	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4293      	cmp	r3, r2
 800707c:	d114      	bne.n	80070a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10c      	bne.n	80070a8 <pbuf_copy+0x118>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <pbuf_copy+0x118>
 8007094:	4b20      	ldr	r3, [pc, #128]	; (8007118 <pbuf_copy+0x188>)
 8007096:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800709a:	4924      	ldr	r1, [pc, #144]	; (800712c <pbuf_copy+0x19c>)
 800709c:	4820      	ldr	r0, [pc, #128]	; (8007120 <pbuf_copy+0x190>)
 800709e:	f008 fe95 	bl	800fdcc <iprintf>
 80070a2:	f06f 030f 	mvn.w	r3, #15
 80070a6:	e032      	b.n	800710e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d013      	beq.n	80070d6 <pbuf_copy+0x146>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	895a      	ldrh	r2, [r3, #10]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	891b      	ldrh	r3, [r3, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d10d      	bne.n	80070d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <pbuf_copy+0x146>
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <pbuf_copy+0x188>)
 80070c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80070c8:	4919      	ldr	r1, [pc, #100]	; (8007130 <pbuf_copy+0x1a0>)
 80070ca:	4815      	ldr	r0, [pc, #84]	; (8007120 <pbuf_copy+0x190>)
 80070cc:	f008 fe7e 	bl	800fdcc <iprintf>
 80070d0:	f06f 0305 	mvn.w	r3, #5
 80070d4:	e01b      	b.n	800710e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d013      	beq.n	8007104 <pbuf_copy+0x174>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	895a      	ldrh	r2, [r3, #10]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	891b      	ldrh	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d10d      	bne.n	8007104 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <pbuf_copy+0x174>
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <pbuf_copy+0x188>)
 80070f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80070f6:	490e      	ldr	r1, [pc, #56]	; (8007130 <pbuf_copy+0x1a0>)
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <pbuf_copy+0x190>)
 80070fa:	f008 fe67 	bl	800fdcc <iprintf>
 80070fe:	f06f 0305 	mvn.w	r3, #5
 8007102:	e004      	b.n	800710e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f47f af61 	bne.w	8006fce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	08011a24 	.word	0x08011a24
 800711c:	08011ccc 	.word	0x08011ccc
 8007120:	08011a84 	.word	0x08011a84
 8007124:	08011cfc 	.word	0x08011cfc
 8007128:	08011d14 	.word	0x08011d14
 800712c:	08011d30 	.word	0x08011d30
 8007130:	08011d40 	.word	0x08011d40

08007134 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4611      	mov	r1, r2
 8007140:	461a      	mov	r2, r3
 8007142:	460b      	mov	r3, r1
 8007144:	80fb      	strh	r3, [r7, #6]
 8007146:	4613      	mov	r3, r2
 8007148:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d108      	bne.n	800716a <pbuf_copy_partial+0x36>
 8007158:	4b2b      	ldr	r3, [pc, #172]	; (8007208 <pbuf_copy_partial+0xd4>)
 800715a:	f240 420a 	movw	r2, #1034	; 0x40a
 800715e:	492b      	ldr	r1, [pc, #172]	; (800720c <pbuf_copy_partial+0xd8>)
 8007160:	482b      	ldr	r0, [pc, #172]	; (8007210 <pbuf_copy_partial+0xdc>)
 8007162:	f008 fe33 	bl	800fdcc <iprintf>
 8007166:	2300      	movs	r3, #0
 8007168:	e04a      	b.n	8007200 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <pbuf_copy_partial+0x4e>
 8007170:	4b25      	ldr	r3, [pc, #148]	; (8007208 <pbuf_copy_partial+0xd4>)
 8007172:	f240 420b 	movw	r2, #1035	; 0x40b
 8007176:	4927      	ldr	r1, [pc, #156]	; (8007214 <pbuf_copy_partial+0xe0>)
 8007178:	4825      	ldr	r0, [pc, #148]	; (8007210 <pbuf_copy_partial+0xdc>)
 800717a:	f008 fe27 	bl	800fdcc <iprintf>
 800717e:	2300      	movs	r3, #0
 8007180:	e03e      	b.n	8007200 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	e034      	b.n	80071f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007188:	88bb      	ldrh	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <pbuf_copy_partial+0x70>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	895b      	ldrh	r3, [r3, #10]
 8007192:	88ba      	ldrh	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d305      	bcc.n	80071a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	895b      	ldrh	r3, [r3, #10]
 800719c:	88ba      	ldrh	r2, [r7, #4]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	80bb      	strh	r3, [r7, #4]
 80071a2:	e023      	b.n	80071ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	895a      	ldrh	r2, [r3, #10]
 80071a8:	88bb      	ldrh	r3, [r7, #4]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80071ae:	8b3a      	ldrh	r2, [r7, #24]
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d901      	bls.n	80071ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80071ba:	8b7b      	ldrh	r3, [r7, #26]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	18d0      	adds	r0, r2, r3
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	88bb      	ldrh	r3, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	8b3a      	ldrh	r2, [r7, #24]
 80071ca:	4619      	mov	r1, r3
 80071cc:	f008 fdce 	bl	800fd6c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80071d0:	8afa      	ldrh	r2, [r7, #22]
 80071d2:	8b3b      	ldrh	r3, [r7, #24]
 80071d4:	4413      	add	r3, r2
 80071d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80071d8:	8b7a      	ldrh	r2, [r7, #26]
 80071da:	8b3b      	ldrh	r3, [r7, #24]
 80071dc:	4413      	add	r3, r2
 80071de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	8b3b      	ldrh	r3, [r7, #24]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <pbuf_copy_partial+0xca>
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1c4      	bne.n	8007188 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80071fe:	8afb      	ldrh	r3, [r7, #22]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	08011a24 	.word	0x08011a24
 800720c:	08011d6c 	.word	0x08011d6c
 8007210:	08011a84 	.word	0x08011a84
 8007214:	08011d8c 	.word	0x08011d8c

08007218 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <pbuf_take+0x30>
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <pbuf_take+0x108>)
 8007236:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800723a:	493a      	ldr	r1, [pc, #232]	; (8007324 <pbuf_take+0x10c>)
 800723c:	483a      	ldr	r0, [pc, #232]	; (8007328 <pbuf_take+0x110>)
 800723e:	f008 fdc5 	bl	800fdcc <iprintf>
 8007242:	f06f 030f 	mvn.w	r3, #15
 8007246:	e067      	b.n	8007318 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <pbuf_take+0x4a>
 800724e:	4b34      	ldr	r3, [pc, #208]	; (8007320 <pbuf_take+0x108>)
 8007250:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007254:	4935      	ldr	r1, [pc, #212]	; (800732c <pbuf_take+0x114>)
 8007256:	4834      	ldr	r0, [pc, #208]	; (8007328 <pbuf_take+0x110>)
 8007258:	f008 fdb8 	bl	800fdcc <iprintf>
 800725c:	f06f 030f 	mvn.w	r3, #15
 8007260:	e05a      	b.n	8007318 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	891b      	ldrh	r3, [r3, #8]
 8007266:	88fa      	ldrh	r2, [r7, #6]
 8007268:	429a      	cmp	r2, r3
 800726a:	d909      	bls.n	8007280 <pbuf_take+0x68>
 800726c:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <pbuf_take+0x108>)
 800726e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007272:	492f      	ldr	r1, [pc, #188]	; (8007330 <pbuf_take+0x118>)
 8007274:	482c      	ldr	r0, [pc, #176]	; (8007328 <pbuf_take+0x110>)
 8007276:	f008 fda9 	bl	800fdcc <iprintf>
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	e04b      	b.n	8007318 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <pbuf_take+0x7e>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <pbuf_take+0x7e>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	88fa      	ldrh	r2, [r7, #6]
 8007292:	429a      	cmp	r2, r3
 8007294:	d902      	bls.n	800729c <pbuf_take+0x84>
    return ERR_ARG;
 8007296:	f06f 030f 	mvn.w	r3, #15
 800729a:	e03d      	b.n	8007318 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e028      	b.n	80072f4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <pbuf_take+0x9e>
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <pbuf_take+0x108>)
 80072aa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80072ae:	4921      	ldr	r1, [pc, #132]	; (8007334 <pbuf_take+0x11c>)
 80072b0:	481d      	ldr	r0, [pc, #116]	; (8007328 <pbuf_take+0x110>)
 80072b2:	f008 fd8b 	bl	800fdcc <iprintf>
    buf_copy_len = total_copy_len;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	895b      	ldrh	r3, [r3, #10]
 80072be:	461a      	mov	r2, r3
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d902      	bls.n	80072cc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	895b      	ldrh	r3, [r3, #10]
 80072ca:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	6858      	ldr	r0, [r3, #4]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4413      	add	r3, r2
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	4619      	mov	r1, r3
 80072da:	f008 fd47 	bl	800fd6c <memcpy>
    total_copy_len -= buf_copy_len;
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	4413      	add	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1d3      	bne.n	80072a2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <pbuf_take+0xf0>
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d006      	beq.n	8007316 <pbuf_take+0xfe>
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <pbuf_take+0x108>)
 800730a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800730e:	490a      	ldr	r1, [pc, #40]	; (8007338 <pbuf_take+0x120>)
 8007310:	4805      	ldr	r0, [pc, #20]	; (8007328 <pbuf_take+0x110>)
 8007312:	f008 fd5b 	bl	800fdcc <iprintf>
  return ERR_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08011a24 	.word	0x08011a24
 8007324:	08011dfc 	.word	0x08011dfc
 8007328:	08011a84 	.word	0x08011a84
 800732c:	08011e14 	.word	0x08011e14
 8007330:	08011e30 	.word	0x08011e30
 8007334:	08011e50 	.word	0x08011e50
 8007338:	08011e68 	.word	0x08011e68

0800733c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	603a      	str	r2, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
 8007348:	460b      	mov	r3, r1
 800734a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	8919      	ldrh	r1, [r3, #8]
 8007350:	88ba      	ldrh	r2, [r7, #4]
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fa0f 	bl	8006778 <pbuf_alloc>
 800735a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <pbuf_clone+0x2a>
    return NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	e011      	b.n	800738a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff fe11 	bl	8006f90 <pbuf_copy>
 800736e:	4603      	mov	r3, r0
 8007370:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007372:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d006      	beq.n	8007388 <pbuf_clone+0x4c>
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <pbuf_clone+0x58>)
 800737c:	f240 5224 	movw	r2, #1316	; 0x524
 8007380:	4905      	ldr	r1, [pc, #20]	; (8007398 <pbuf_clone+0x5c>)
 8007382:	4806      	ldr	r0, [pc, #24]	; (800739c <pbuf_clone+0x60>)
 8007384:	f008 fd22 	bl	800fdcc <iprintf>
  return q;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08011a24 	.word	0x08011a24
 8007398:	08011e98 	.word	0x08011e98
 800739c:	08011a84 	.word	0x08011a84

080073a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80073a4:	f008 fdb6 	bl	800ff14 <rand>
 80073a8:	4603      	mov	r3, r0
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	4b01      	ldr	r3, [pc, #4]	; (80073c0 <tcp_init+0x20>)
 80073ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80073bc:	bf00      	nop
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2000000a 	.word	0x2000000a

080073c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7d1b      	ldrb	r3, [r3, #20]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d105      	bne.n	80073e0 <tcp_free+0x1c>
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <tcp_free+0x2c>)
 80073d6:	22d4      	movs	r2, #212	; 0xd4
 80073d8:	4906      	ldr	r1, [pc, #24]	; (80073f4 <tcp_free+0x30>)
 80073da:	4807      	ldr	r0, [pc, #28]	; (80073f8 <tcp_free+0x34>)
 80073dc:	f008 fcf6 	bl	800fdcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	2001      	movs	r0, #1
 80073e4:	f7fe fe36 	bl	8006054 <memp_free>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	08011f24 	.word	0x08011f24
 80073f4:	08011f54 	.word	0x08011f54
 80073f8:	08011f68 	.word	0x08011f68

080073fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	7d1b      	ldrb	r3, [r3, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d105      	bne.n	8007418 <tcp_free_listen+0x1c>
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <tcp_free_listen+0x2c>)
 800740e:	22df      	movs	r2, #223	; 0xdf
 8007410:	4906      	ldr	r1, [pc, #24]	; (800742c <tcp_free_listen+0x30>)
 8007412:	4807      	ldr	r0, [pc, #28]	; (8007430 <tcp_free_listen+0x34>)
 8007414:	f008 fcda 	bl	800fdcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	2002      	movs	r0, #2
 800741c:	f7fe fe1a 	bl	8006054 <memp_free>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	08011f24 	.word	0x08011f24
 800742c:	08011f90 	.word	0x08011f90
 8007430:	08011f68 	.word	0x08011f68

08007434 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007438:	f000 fea2 	bl	8008180 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <tcp_tmr+0x28>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <tcp_tmr+0x28>)
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <tcp_tmr+0x28>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007454:	f000 fb54 	bl	8007b00 <tcp_slowtmr>
  }
}
 8007458:	bf00      	nop
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20008a99 	.word	0x20008a99

08007460 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <tcp_remove_listener+0x1c>
 8007470:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <tcp_remove_listener+0x48>)
 8007472:	22ff      	movs	r2, #255	; 0xff
 8007474:	490d      	ldr	r1, [pc, #52]	; (80074ac <tcp_remove_listener+0x4c>)
 8007476:	480e      	ldr	r0, [pc, #56]	; (80074b0 <tcp_remove_listener+0x50>)
 8007478:	f008 fca8 	bl	800fdcc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e00a      	b.n	8007498 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d102      	bne.n	8007492 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f1      	bne.n	8007482 <tcp_remove_listener+0x22>
    }
  }
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	08011f24 	.word	0x08011f24
 80074ac:	08011fac 	.word	0x08011fac
 80074b0:	08011f68 	.word	0x08011f68

080074b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <tcp_listen_closed+0x1c>
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <tcp_listen_closed+0x60>)
 80074c4:	f240 1211 	movw	r2, #273	; 0x111
 80074c8:	4913      	ldr	r1, [pc, #76]	; (8007518 <tcp_listen_closed+0x64>)
 80074ca:	4814      	ldr	r0, [pc, #80]	; (800751c <tcp_listen_closed+0x68>)
 80074cc:	f008 fc7e 	bl	800fdcc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7d1b      	ldrb	r3, [r3, #20]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d006      	beq.n	80074e6 <tcp_listen_closed+0x32>
 80074d8:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <tcp_listen_closed+0x60>)
 80074da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80074de:	4910      	ldr	r1, [pc, #64]	; (8007520 <tcp_listen_closed+0x6c>)
 80074e0:	480e      	ldr	r0, [pc, #56]	; (800751c <tcp_listen_closed+0x68>)
 80074e2:	f008 fc73 	bl	800fdcc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80074e6:	2301      	movs	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e00b      	b.n	8007504 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80074ec:	4a0d      	ldr	r2, [pc, #52]	; (8007524 <tcp_listen_closed+0x70>)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ffb1 	bl	8007460 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b03      	cmp	r3, #3
 8007508:	d9f0      	bls.n	80074ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	08011f24 	.word	0x08011f24
 8007518:	08011fd4 	.word	0x08011fd4
 800751c:	08011f68 	.word	0x08011f68
 8007520:	08011fe0 	.word	0x08011fe0
 8007524:	0801433c 	.word	0x0801433c

08007528 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007528:	b5b0      	push	{r4, r5, r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af04      	add	r7, sp, #16
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <tcp_close_shutdown+0x20>
 800753a:	4b63      	ldr	r3, [pc, #396]	; (80076c8 <tcp_close_shutdown+0x1a0>)
 800753c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007540:	4962      	ldr	r1, [pc, #392]	; (80076cc <tcp_close_shutdown+0x1a4>)
 8007542:	4863      	ldr	r0, [pc, #396]	; (80076d0 <tcp_close_shutdown+0x1a8>)
 8007544:	f008 fc42 	bl	800fdcc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d066      	beq.n	800761c <tcp_close_shutdown+0xf4>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7d1b      	ldrb	r3, [r3, #20]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d003      	beq.n	800755e <tcp_close_shutdown+0x36>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7d1b      	ldrb	r3, [r3, #20]
 800755a:	2b07      	cmp	r3, #7
 800755c:	d15e      	bne.n	800761c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <tcp_close_shutdown+0x48>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800756e:	d055      	beq.n	800761c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8b5b      	ldrh	r3, [r3, #26]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <tcp_close_shutdown+0x62>
 800757c:	4b52      	ldr	r3, [pc, #328]	; (80076c8 <tcp_close_shutdown+0x1a0>)
 800757e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007582:	4954      	ldr	r1, [pc, #336]	; (80076d4 <tcp_close_shutdown+0x1ac>)
 8007584:	4852      	ldr	r0, [pc, #328]	; (80076d0 <tcp_close_shutdown+0x1a8>)
 8007586:	f008 fc21 	bl	800fdcc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007592:	687d      	ldr	r5, [r7, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	8ad2      	ldrh	r2, [r2, #22]
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	8b09      	ldrh	r1, [r1, #24]
 80075a0:	9102      	str	r1, [sp, #8]
 80075a2:	9201      	str	r2, [sp, #4]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462b      	mov	r3, r5
 80075a8:	4622      	mov	r2, r4
 80075aa:	4601      	mov	r1, r0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f004 fea3 	bl	800c2f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 f8c6 	bl	8008744 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80075b8:	4b47      	ldr	r3, [pc, #284]	; (80076d8 <tcp_close_shutdown+0x1b0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d105      	bne.n	80075ce <tcp_close_shutdown+0xa6>
 80075c2:	4b45      	ldr	r3, [pc, #276]	; (80076d8 <tcp_close_shutdown+0x1b0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a43      	ldr	r2, [pc, #268]	; (80076d8 <tcp_close_shutdown+0x1b0>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e013      	b.n	80075f6 <tcp_close_shutdown+0xce>
 80075ce:	4b42      	ldr	r3, [pc, #264]	; (80076d8 <tcp_close_shutdown+0x1b0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e00c      	b.n	80075f0 <tcp_close_shutdown+0xc8>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d104      	bne.n	80075ea <tcp_close_shutdown+0xc2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	60da      	str	r2, [r3, #12]
 80075e8:	e005      	b.n	80075f6 <tcp_close_shutdown+0xce>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1ef      	bne.n	80075d6 <tcp_close_shutdown+0xae>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	4b37      	ldr	r3, [pc, #220]	; (80076dc <tcp_close_shutdown+0x1b4>)
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007602:	4b37      	ldr	r3, [pc, #220]	; (80076e0 <tcp_close_shutdown+0x1b8>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d102      	bne.n	8007612 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800760c:	f003 fd5e 	bl	800b0cc <tcp_trigger_input_pcb_close>
 8007610:	e002      	b.n	8007618 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fed6 	bl	80073c4 <tcp_free>
      }
      return ERR_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e050      	b.n	80076be <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7d1b      	ldrb	r3, [r3, #20]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d03b      	beq.n	800769c <tcp_close_shutdown+0x174>
 8007624:	2b02      	cmp	r3, #2
 8007626:	dc44      	bgt.n	80076b2 <tcp_close_shutdown+0x18a>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <tcp_close_shutdown+0x10a>
 800762c:	2b01      	cmp	r3, #1
 800762e:	d02a      	beq.n	8007686 <tcp_close_shutdown+0x15e>
 8007630:	e03f      	b.n	80076b2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8adb      	ldrh	r3, [r3, #22]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d021      	beq.n	800767e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800763a:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <tcp_close_shutdown+0x1bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d105      	bne.n	8007650 <tcp_close_shutdown+0x128>
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <tcp_close_shutdown+0x1bc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <tcp_close_shutdown+0x1bc>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e013      	b.n	8007678 <tcp_close_shutdown+0x150>
 8007650:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <tcp_close_shutdown+0x1bc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	e00c      	b.n	8007672 <tcp_close_shutdown+0x14a>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	d104      	bne.n	800766c <tcp_close_shutdown+0x144>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	60da      	str	r2, [r3, #12]
 800766a:	e005      	b.n	8007678 <tcp_close_shutdown+0x150>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1ef      	bne.n	8007658 <tcp_close_shutdown+0x130>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fea0 	bl	80073c4 <tcp_free>
      break;
 8007684:	e01a      	b.n	80076bc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff ff14 	bl	80074b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4816      	ldr	r0, [pc, #88]	; (80076e8 <tcp_close_shutdown+0x1c0>)
 8007690:	f001 f8a8 	bl	80087e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff feb1 	bl	80073fc <tcp_free_listen>
      break;
 800769a:	e00f      	b.n	80076bc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	480e      	ldr	r0, [pc, #56]	; (80076d8 <tcp_close_shutdown+0x1b0>)
 80076a0:	f001 f8a0 	bl	80087e4 <tcp_pcb_remove>
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <tcp_close_shutdown+0x1b4>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fe8a 	bl	80073c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80076b0:	e004      	b.n	80076bc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f81a 	bl	80076ec <tcp_close_shutdown_fin>
 80076b8:	4603      	mov	r3, r0
 80076ba:	e000      	b.n	80076be <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bdb0      	pop	{r4, r5, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	08011f24 	.word	0x08011f24
 80076cc:	08011ff8 	.word	0x08011ff8
 80076d0:	08011f68 	.word	0x08011f68
 80076d4:	08012018 	.word	0x08012018
 80076d8:	20008a90 	.word	0x20008a90
 80076dc:	20008a98 	.word	0x20008a98
 80076e0:	20008ad4 	.word	0x20008ad4
 80076e4:	20008a88 	.word	0x20008a88
 80076e8:	20008a8c 	.word	0x20008a8c

080076ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <tcp_close_shutdown_fin+0x1c>
 80076fa:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <tcp_close_shutdown_fin+0xc8>)
 80076fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007700:	492d      	ldr	r1, [pc, #180]	; (80077b8 <tcp_close_shutdown_fin+0xcc>)
 8007702:	482e      	ldr	r0, [pc, #184]	; (80077bc <tcp_close_shutdown_fin+0xd0>)
 8007704:	f008 fb62 	bl	800fdcc <iprintf>

  switch (pcb->state) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7d1b      	ldrb	r3, [r3, #20]
 800770c:	2b07      	cmp	r3, #7
 800770e:	d020      	beq.n	8007752 <tcp_close_shutdown_fin+0x66>
 8007710:	2b07      	cmp	r3, #7
 8007712:	dc2b      	bgt.n	800776c <tcp_close_shutdown_fin+0x80>
 8007714:	2b03      	cmp	r3, #3
 8007716:	d002      	beq.n	800771e <tcp_close_shutdown_fin+0x32>
 8007718:	2b04      	cmp	r3, #4
 800771a:	d00d      	beq.n	8007738 <tcp_close_shutdown_fin+0x4c>
 800771c:	e026      	b.n	800776c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f003 feec 	bl	800b4fc <tcp_send_fin>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d11f      	bne.n	8007770 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2205      	movs	r2, #5
 8007734:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007736:	e01b      	b.n	8007770 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f003 fedf 	bl	800b4fc <tcp_send_fin>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d114      	bne.n	8007774 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007750:	e010      	b.n	8007774 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f003 fed2 	bl	800b4fc <tcp_send_fin>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800775c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2209      	movs	r2, #9
 8007768:	751a      	strb	r2, [r3, #20]
      }
      break;
 800776a:	e005      	b.n	8007778 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	e01c      	b.n	80077aa <tcp_close_shutdown_fin+0xbe>
      break;
 8007770:	bf00      	nop
 8007772:	e002      	b.n	800777a <tcp_close_shutdown_fin+0x8e>
      break;
 8007774:	bf00      	nop
 8007776:	e000      	b.n	800777a <tcp_close_shutdown_fin+0x8e>
      break;
 8007778:	bf00      	nop
  }

  if (err == ERR_OK) {
 800777a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f003 fff8 	bl	800b778 <tcp_output>
 8007788:	e00d      	b.n	80077a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800778a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d108      	bne.n	80077a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8b5b      	ldrh	r3, [r3, #26]
 8007798:	f043 0308 	orr.w	r3, r3, #8
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e001      	b.n	80077aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80077a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	08011f24 	.word	0x08011f24
 80077b8:	08011fd4 	.word	0x08011fd4
 80077bc:	08011f68 	.word	0x08011f68

080077c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <tcp_close+0x22>
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <tcp_close+0x4c>)
 80077d0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80077d4:	490e      	ldr	r1, [pc, #56]	; (8007810 <tcp_close+0x50>)
 80077d6:	480f      	ldr	r0, [pc, #60]	; (8007814 <tcp_close+0x54>)
 80077d8:	f008 faf8 	bl	800fdcc <iprintf>
 80077dc:	f06f 030f 	mvn.w	r3, #15
 80077e0:	e00f      	b.n	8007802 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7d1b      	ldrb	r3, [r3, #20]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d006      	beq.n	80077f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8b5b      	ldrh	r3, [r3, #26]
 80077ee:	f043 0310 	orr.w	r3, r3, #16
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fe94 	bl	8007528 <tcp_close_shutdown>
 8007800:	4603      	mov	r3, r0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	08011f24 	.word	0x08011f24
 8007810:	08012034 	.word	0x08012034
 8007814:	08011f68 	.word	0x08011f68

08007818 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af04      	add	r7, sp, #16
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <tcp_abandon+0x20>
 8007828:	4b52      	ldr	r3, [pc, #328]	; (8007974 <tcp_abandon+0x15c>)
 800782a:	f240 223d 	movw	r2, #573	; 0x23d
 800782e:	4952      	ldr	r1, [pc, #328]	; (8007978 <tcp_abandon+0x160>)
 8007830:	4852      	ldr	r0, [pc, #328]	; (800797c <tcp_abandon+0x164>)
 8007832:	f008 facb 	bl	800fdcc <iprintf>
 8007836:	e099      	b.n	800796c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7d1b      	ldrb	r3, [r3, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d106      	bne.n	800784e <tcp_abandon+0x36>
 8007840:	4b4c      	ldr	r3, [pc, #304]	; (8007974 <tcp_abandon+0x15c>)
 8007842:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007846:	494e      	ldr	r1, [pc, #312]	; (8007980 <tcp_abandon+0x168>)
 8007848:	484c      	ldr	r0, [pc, #304]	; (800797c <tcp_abandon+0x164>)
 800784a:	f008 fabf 	bl	800fdcc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7d1b      	ldrb	r3, [r3, #20]
 8007852:	2b0a      	cmp	r3, #10
 8007854:	d107      	bne.n	8007866 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	484a      	ldr	r0, [pc, #296]	; (8007984 <tcp_abandon+0x16c>)
 800785a:	f000 ffc3 	bl	80087e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fdb0 	bl	80073c4 <tcp_free>
 8007864:	e082      	b.n	800796c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007872:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7d1b      	ldrb	r3, [r3, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d126      	bne.n	80078de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8adb      	ldrh	r3, [r3, #22]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d02e      	beq.n	80078f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007898:	4b3b      	ldr	r3, [pc, #236]	; (8007988 <tcp_abandon+0x170>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d105      	bne.n	80078ae <tcp_abandon+0x96>
 80078a2:	4b39      	ldr	r3, [pc, #228]	; (8007988 <tcp_abandon+0x170>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4a37      	ldr	r2, [pc, #220]	; (8007988 <tcp_abandon+0x170>)
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e013      	b.n	80078d6 <tcp_abandon+0xbe>
 80078ae:	4b36      	ldr	r3, [pc, #216]	; (8007988 <tcp_abandon+0x170>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	e00c      	b.n	80078d0 <tcp_abandon+0xb8>
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d104      	bne.n	80078ca <tcp_abandon+0xb2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	60da      	str	r2, [r3, #12]
 80078c8:	e005      	b.n	80078d6 <tcp_abandon+0xbe>
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1ef      	bne.n	80078b6 <tcp_abandon+0x9e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	60da      	str	r2, [r3, #12]
 80078dc:	e00b      	b.n	80078f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8adb      	ldrh	r3, [r3, #22]
 80078e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4828      	ldr	r0, [pc, #160]	; (800798c <tcp_abandon+0x174>)
 80078ec:	f000 ff7a 	bl	80087e4 <tcp_pcb_remove>
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <tcp_abandon+0x178>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fd1c 	bl	8008340 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fd13 	bl	8008340 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fd0a 	bl	8008340 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	8b12      	ldrh	r2, [r2, #24]
 800793c:	9202      	str	r2, [sp, #8]
 800793e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007940:	9201      	str	r2, [sp, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	460b      	mov	r3, r1
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f004 fcd4 	bl	800c2f8 <tcp_rst>
    }
    last_state = pcb->state;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7d1b      	ldrb	r3, [r3, #20]
 8007954:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fd34 	bl	80073c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <tcp_abandon+0x154>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f06f 010c 	mvn.w	r1, #12
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	4798      	blx	r3
  }
}
 800796c:	3728      	adds	r7, #40	; 0x28
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	08011f24 	.word	0x08011f24
 8007978:	08012068 	.word	0x08012068
 800797c:	08011f68 	.word	0x08011f68
 8007980:	08012084 	.word	0x08012084
 8007984:	20008a94 	.word	0x20008a94
 8007988:	20008a88 	.word	0x20008a88
 800798c:	20008a90 	.word	0x20008a90
 8007990:	20008a98 	.word	0x20008a98

08007994 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800799c:	2101      	movs	r1, #1
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff ff3a 	bl	8007818 <tcp_abandon>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <tcp_update_rcv_ann_wnd+0x1c>
 80079ba:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <tcp_update_rcv_ann_wnd+0xa4>)
 80079bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80079c0:	4924      	ldr	r1, [pc, #144]	; (8007a54 <tcp_update_rcv_ann_wnd+0xa8>)
 80079c2:	4825      	ldr	r0, [pc, #148]	; (8007a58 <tcp_update_rcv_ann_wnd+0xac>)
 80079c4:	f008 fa02 	bl	800fdcc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80079dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80079e0:	bf28      	it	cs
 80079e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80079e6:	b292      	uxth	r2, r2
 80079e8:	4413      	add	r3, r2
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	db08      	blt.n	8007a04 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	e020      	b.n	8007a46 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd03      	ble.n	8007a1a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a18:	e014      	b.n	8007a44 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2c:	d306      	bcc.n	8007a3c <tcp_update_rcv_ann_wnd+0x90>
 8007a2e:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <tcp_update_rcv_ann_wnd+0xa4>)
 8007a30:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007a34:	4909      	ldr	r1, [pc, #36]	; (8007a5c <tcp_update_rcv_ann_wnd+0xb0>)
 8007a36:	4808      	ldr	r0, [pc, #32]	; (8007a58 <tcp_update_rcv_ann_wnd+0xac>)
 8007a38:	f008 f9c8 	bl	800fdcc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007a44:	2300      	movs	r3, #0
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	08011f24 	.word	0x08011f24
 8007a54:	08012180 	.word	0x08012180
 8007a58:	08011f68 	.word	0x08011f68
 8007a5c:	080121a4 	.word	0x080121a4

08007a60 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <tcp_recved+0x22>
 8007a72:	4b1f      	ldr	r3, [pc, #124]	; (8007af0 <tcp_recved+0x90>)
 8007a74:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007a78:	491e      	ldr	r1, [pc, #120]	; (8007af4 <tcp_recved+0x94>)
 8007a7a:	481f      	ldr	r0, [pc, #124]	; (8007af8 <tcp_recved+0x98>)
 8007a7c:	f008 f9a6 	bl	800fdcc <iprintf>
 8007a80:	e032      	b.n	8007ae8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7d1b      	ldrb	r3, [r3, #20]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d106      	bne.n	8007a98 <tcp_recved+0x38>
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <tcp_recved+0x90>)
 8007a8c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007a90:	491a      	ldr	r1, [pc, #104]	; (8007afc <tcp_recved+0x9c>)
 8007a92:	4819      	ldr	r0, [pc, #100]	; (8007af8 <tcp_recved+0x98>)
 8007a94:	f008 f99a 	bl	800fdcc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a9c:	887b      	ldrh	r3, [r7, #2]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007aa2:	89fb      	ldrh	r3, [r7, #14]
 8007aa4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007aa8:	d804      	bhi.n	8007ab4 <tcp_recved+0x54>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aae:	89fa      	ldrh	r2, [r7, #14]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d204      	bcs.n	8007abe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
 8007abc:	e002      	b.n	8007ac4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	89fa      	ldrh	r2, [r7, #14]
 8007ac2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff ff71 	bl	80079ac <tcp_update_rcv_ann_wnd>
 8007aca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007ad2:	d309      	bcc.n	8007ae8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8b5b      	ldrh	r3, [r3, #26]
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f003 fe48 	bl	800b778 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08011f24 	.word	0x08011f24
 8007af4:	080121c0 	.word	0x080121c0
 8007af8:	08011f68 	.word	0x08011f68
 8007afc:	080121d8 	.word	0x080121d8

08007b00 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007b00:	b5b0      	push	{r4, r5, r7, lr}
 8007b02:	b090      	sub	sp, #64	; 0x40
 8007b04:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007b0c:	4b94      	ldr	r3, [pc, #592]	; (8007d60 <tcp_slowtmr+0x260>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	4a93      	ldr	r2, [pc, #588]	; (8007d60 <tcp_slowtmr+0x260>)
 8007b14:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007b16:	4b93      	ldr	r3, [pc, #588]	; (8007d64 <tcp_slowtmr+0x264>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b91      	ldr	r3, [pc, #580]	; (8007d64 <tcp_slowtmr+0x264>)
 8007b20:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007b26:	4b90      	ldr	r3, [pc, #576]	; (8007d68 <tcp_slowtmr+0x268>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007b2c:	e29d      	b.n	800806a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	7d1b      	ldrb	r3, [r3, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <tcp_slowtmr+0x44>
 8007b36:	4b8d      	ldr	r3, [pc, #564]	; (8007d6c <tcp_slowtmr+0x26c>)
 8007b38:	f240 42be 	movw	r2, #1214	; 0x4be
 8007b3c:	498c      	ldr	r1, [pc, #560]	; (8007d70 <tcp_slowtmr+0x270>)
 8007b3e:	488d      	ldr	r0, [pc, #564]	; (8007d74 <tcp_slowtmr+0x274>)
 8007b40:	f008 f944 	bl	800fdcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	7d1b      	ldrb	r3, [r3, #20]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d106      	bne.n	8007b5a <tcp_slowtmr+0x5a>
 8007b4c:	4b87      	ldr	r3, [pc, #540]	; (8007d6c <tcp_slowtmr+0x26c>)
 8007b4e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007b52:	4989      	ldr	r1, [pc, #548]	; (8007d78 <tcp_slowtmr+0x278>)
 8007b54:	4887      	ldr	r0, [pc, #540]	; (8007d74 <tcp_slowtmr+0x274>)
 8007b56:	f008 f939 	bl	800fdcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	7d1b      	ldrb	r3, [r3, #20]
 8007b5e:	2b0a      	cmp	r3, #10
 8007b60:	d106      	bne.n	8007b70 <tcp_slowtmr+0x70>
 8007b62:	4b82      	ldr	r3, [pc, #520]	; (8007d6c <tcp_slowtmr+0x26c>)
 8007b64:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007b68:	4984      	ldr	r1, [pc, #528]	; (8007d7c <tcp_slowtmr+0x27c>)
 8007b6a:	4882      	ldr	r0, [pc, #520]	; (8007d74 <tcp_slowtmr+0x274>)
 8007b6c:	f008 f92e 	bl	800fdcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	7f9a      	ldrb	r2, [r3, #30]
 8007b74:	4b7b      	ldr	r3, [pc, #492]	; (8007d64 <tcp_slowtmr+0x264>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d105      	bne.n	8007b88 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007b86:	e270      	b.n	800806a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007b88:	4b76      	ldr	r3, [pc, #472]	; (8007d64 <tcp_slowtmr+0x264>)
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d10a      	bne.n	8007bba <tcp_slowtmr+0xba>
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d905      	bls.n	8007bba <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8007bb8:	e11e      	b.n	8007df8 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bc0:	2b0b      	cmp	r3, #11
 8007bc2:	d905      	bls.n	8007bd0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc8:	3301      	adds	r3, #1
 8007bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bce:	e113      	b.n	8007df8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d075      	beq.n	8007cc6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <tcp_slowtmr+0xf0>
 8007be2:	4b62      	ldr	r3, [pc, #392]	; (8007d6c <tcp_slowtmr+0x26c>)
 8007be4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007be8:	4965      	ldr	r1, [pc, #404]	; (8007d80 <tcp_slowtmr+0x280>)
 8007bea:	4862      	ldr	r0, [pc, #392]	; (8007d74 <tcp_slowtmr+0x274>)
 8007bec:	f008 f8ee 	bl	800fdcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <tcp_slowtmr+0x106>
 8007bf8:	4b5c      	ldr	r3, [pc, #368]	; (8007d6c <tcp_slowtmr+0x26c>)
 8007bfa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007bfe:	4961      	ldr	r1, [pc, #388]	; (8007d84 <tcp_slowtmr+0x284>)
 8007c00:	485c      	ldr	r0, [pc, #368]	; (8007d74 <tcp_slowtmr+0x274>)
 8007c02:	f008 f8e3 	bl	800fdcc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007c0c:	2b0b      	cmp	r3, #11
 8007c0e:	d905      	bls.n	8007c1c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	3301      	adds	r3, #1
 8007c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c1a:	e0ed      	b.n	8007df8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c22:	3b01      	subs	r3, #1
 8007c24:	4a58      	ldr	r2, [pc, #352]	; (8007d88 <tcp_slowtmr+0x288>)
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c30:	7c7a      	ldrb	r2, [r7, #17]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d907      	bls.n	8007c46 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c4c:	7c7a      	ldrb	r2, [r7, #17]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	f200 80d2 	bhi.w	8007df8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007c54:	2301      	movs	r3, #1
 8007c56:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d108      	bne.n	8007c74 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c64:	f004 fc3c 	bl	800c4e0 <tcp_zero_window_probe>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007c6e:	2300      	movs	r3, #0
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e011      	b.n	8007c98 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7e:	f003 faf1 	bl	800b264 <tcp_split_unsent_seg>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c8a:	f003 fd75 	bl	800b778 <tcp_output>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80ac 	beq.w	8007df8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	f200 80a2 	bhi.w	8007df8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cba:	3301      	adds	r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007cc4:	e098      	b.n	8007df8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	db0f      	blt.n	8007cf0 <tcp_slowtmr+0x1f0>
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007cd6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d008      	beq.n	8007cf0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	b21a      	sxth	r2, r3
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	db7b      	blt.n	8007df8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d02:	f004 f82d 	bl	800bd60 <tcp_rexmit_rto_prepare>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <tcp_slowtmr+0x21c>
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d171      	bne.n	8007df8 <tcp_slowtmr+0x2f8>
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d06d      	beq.n	8007df8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	7d1b      	ldrb	r3, [r3, #20]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d03a      	beq.n	8007d9a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d2a:	2b0c      	cmp	r3, #12
 8007d2c:	bf28      	it	cs
 8007d2e:	230c      	movcs	r3, #12
 8007d30:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007d38:	10db      	asrs	r3, r3, #3
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007d44:	4413      	add	r3, r2
 8007d46:	7efa      	ldrb	r2, [r7, #27]
 8007d48:	4910      	ldr	r1, [pc, #64]	; (8007d8c <tcp_slowtmr+0x28c>)
 8007d4a:	5c8a      	ldrb	r2, [r1, r2]
 8007d4c:	4093      	lsls	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d56:	4293      	cmp	r3, r2
 8007d58:	dc1a      	bgt.n	8007d90 <tcp_slowtmr+0x290>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	b21a      	sxth	r2, r3
 8007d5e:	e019      	b.n	8007d94 <tcp_slowtmr+0x294>
 8007d60:	20008a84 	.word	0x20008a84
 8007d64:	20008a9a 	.word	0x20008a9a
 8007d68:	20008a90 	.word	0x20008a90
 8007d6c:	08011f24 	.word	0x08011f24
 8007d70:	08012268 	.word	0x08012268
 8007d74:	08011f68 	.word	0x08011f68
 8007d78:	08012294 	.word	0x08012294
 8007d7c:	080122c0 	.word	0x080122c0
 8007d80:	080122f0 	.word	0x080122f0
 8007d84:	08012324 	.word	0x08012324
 8007d88:	08014334 	.word	0x08014334
 8007d8c:	08014324 	.word	0x08014324
 8007d90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dac:	4293      	cmp	r3, r2
 8007dae:	bf28      	it	cs
 8007db0:	4613      	movcs	r3, r2
 8007db2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007db4:	8a7b      	ldrh	r3, [r7, #18]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d206      	bcs.n	8007de0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df4:	f004 f82e 	bl	800be54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	7d1b      	ldrb	r3, [r3, #20]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d111      	bne.n	8007e24 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	8b5b      	ldrh	r3, [r3, #26]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e0c:	4b9c      	ldr	r3, [pc, #624]	; (8008080 <tcp_slowtmr+0x580>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b28      	cmp	r3, #40	; 0x28
 8007e18:	d904      	bls.n	8007e24 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e1e:	3301      	adds	r3, #1
 8007e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	7a5b      	ldrb	r3, [r3, #9]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d04a      	beq.n	8007ec6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d003      	beq.n	8007e40 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007e3c:	2b07      	cmp	r3, #7
 8007e3e:	d142      	bne.n	8007ec6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e40:	4b8f      	ldr	r3, [pc, #572]	; (8008080 <tcp_slowtmr+0x580>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007e50:	4b8c      	ldr	r3, [pc, #560]	; (8008084 <tcp_slowtmr+0x584>)
 8007e52:	440b      	add	r3, r1
 8007e54:	498c      	ldr	r1, [pc, #560]	; (8008088 <tcp_slowtmr+0x588>)
 8007e56:	fba1 1303 	umull	r1, r3, r1, r3
 8007e5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d90a      	bls.n	8007e76 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e64:	3301      	adds	r3, #1
 8007e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e74:	e027      	b.n	8007ec6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e76:	4b82      	ldr	r3, [pc, #520]	; (8008080 <tcp_slowtmr+0x580>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	4b7f      	ldr	r3, [pc, #508]	; (800808c <tcp_slowtmr+0x58c>)
 8007e90:	fb00 f303 	mul.w	r3, r0, r3
 8007e94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007e96:	497c      	ldr	r1, [pc, #496]	; (8008088 <tcp_slowtmr+0x588>)
 8007e98:	fba1 1303 	umull	r1, r3, r1, r3
 8007e9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d911      	bls.n	8007ec6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ea4:	f004 fadc 	bl	800c460 <tcp_keepalive>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007eae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d107      	bne.n	8007ec6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d011      	beq.n	8007ef2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007ece:	4b6c      	ldr	r3, [pc, #432]	; (8008080 <tcp_slowtmr+0x580>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007ede:	4619      	mov	r1, r3
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	440b      	add	r3, r1
 8007ee6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eee:	f000 fddd 	bl	8008aac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	7d1b      	ldrb	r3, [r3, #20]
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d10b      	bne.n	8007f12 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007efa:	4b61      	ldr	r3, [pc, #388]	; (8008080 <tcp_slowtmr+0x580>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b28      	cmp	r3, #40	; 0x28
 8007f06:	d904      	bls.n	8007f12 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	7d1b      	ldrb	r3, [r3, #20]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d10b      	bne.n	8007f32 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007f1a:	4b59      	ldr	r3, [pc, #356]	; (8008080 <tcp_slowtmr+0x580>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2bf0      	cmp	r3, #240	; 0xf0
 8007f26:	d904      	bls.n	8007f32 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d060      	beq.n	8007ffc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f44:	f000 fbfe 	bl	8008744 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d010      	beq.n	8007f70 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007f4e:	4b50      	ldr	r3, [pc, #320]	; (8008090 <tcp_slowtmr+0x590>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d106      	bne.n	8007f66 <tcp_slowtmr+0x466>
 8007f58:	4b4e      	ldr	r3, [pc, #312]	; (8008094 <tcp_slowtmr+0x594>)
 8007f5a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007f5e:	494e      	ldr	r1, [pc, #312]	; (8008098 <tcp_slowtmr+0x598>)
 8007f60:	484e      	ldr	r0, [pc, #312]	; (800809c <tcp_slowtmr+0x59c>)
 8007f62:	f007 ff33 	bl	800fdcc <iprintf>
        prev->next = pcb->next;
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	e00f      	b.n	8007f90 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007f70:	4b47      	ldr	r3, [pc, #284]	; (8008090 <tcp_slowtmr+0x590>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d006      	beq.n	8007f88 <tcp_slowtmr+0x488>
 8007f7a:	4b46      	ldr	r3, [pc, #280]	; (8008094 <tcp_slowtmr+0x594>)
 8007f7c:	f240 5271 	movw	r2, #1393	; 0x571
 8007f80:	4947      	ldr	r1, [pc, #284]	; (80080a0 <tcp_slowtmr+0x5a0>)
 8007f82:	4846      	ldr	r0, [pc, #280]	; (800809c <tcp_slowtmr+0x59c>)
 8007f84:	f007 ff22 	bl	800fdcc <iprintf>
        tcp_active_pcbs = pcb->next;
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4a40      	ldr	r2, [pc, #256]	; (8008090 <tcp_slowtmr+0x590>)
 8007f8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d013      	beq.n	8007fc0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007fa0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa8:	8ad2      	ldrh	r2, [r2, #22]
 8007faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fac:	8b09      	ldrh	r1, [r1, #24]
 8007fae:	9102      	str	r1, [sp, #8]
 8007fb0:	9201      	str	r2, [sp, #4]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	4601      	mov	r1, r0
 8007fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fbc:	f004 f99c 	bl	800c2f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	7d1b      	ldrb	r3, [r3, #20]
 8007fca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007fd6:	6838      	ldr	r0, [r7, #0]
 8007fd8:	f7ff f9f4 	bl	80073c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007fdc:	4b31      	ldr	r3, [pc, #196]	; (80080a4 <tcp_slowtmr+0x5a4>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <tcp_slowtmr+0x4f2>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f06f 010c 	mvn.w	r1, #12
 8007fee:	68b8      	ldr	r0, [r7, #8]
 8007ff0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007ff2:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <tcp_slowtmr+0x5a4>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d037      	beq.n	800806a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007ffa:	e592      	b.n	8007b22 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	7f1b      	ldrb	r3, [r3, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	7f1a      	ldrb	r2, [r3, #28]
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	7f5b      	ldrb	r3, [r3, #29]
 800801a:	429a      	cmp	r2, r3
 800801c:	d325      	bcc.n	800806a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008024:	4b1f      	ldr	r3, [pc, #124]	; (80080a4 <tcp_slowtmr+0x5a4>)
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <tcp_slowtmr+0x54c>
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800803c:	6912      	ldr	r2, [r2, #16]
 800803e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	4603      	mov	r3, r0
 8008046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800804a:	e002      	b.n	8008052 <tcp_slowtmr+0x552>
 800804c:	2300      	movs	r3, #0
 800804e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <tcp_slowtmr+0x5a4>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d000      	beq.n	800805c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800805a:	e562      	b.n	8007b22 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800805c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008066:	f003 fb87 	bl	800b778 <tcp_output>
  while (pcb != NULL) {
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f47f ad5e 	bne.w	8007b2e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <tcp_slowtmr+0x5a8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800807c:	e069      	b.n	8008152 <tcp_slowtmr+0x652>
 800807e:	bf00      	nop
 8008080:	20008a84 	.word	0x20008a84
 8008084:	000a4cb8 	.word	0x000a4cb8
 8008088:	10624dd3 	.word	0x10624dd3
 800808c:	000124f8 	.word	0x000124f8
 8008090:	20008a90 	.word	0x20008a90
 8008094:	08011f24 	.word	0x08011f24
 8008098:	0801235c 	.word	0x0801235c
 800809c:	08011f68 	.word	0x08011f68
 80080a0:	08012388 	.word	0x08012388
 80080a4:	20008a98 	.word	0x20008a98
 80080a8:	20008a94 	.word	0x20008a94
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	7d1b      	ldrb	r3, [r3, #20]
 80080b0:	2b0a      	cmp	r3, #10
 80080b2:	d006      	beq.n	80080c2 <tcp_slowtmr+0x5c2>
 80080b4:	4b2b      	ldr	r3, [pc, #172]	; (8008164 <tcp_slowtmr+0x664>)
 80080b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80080ba:	492b      	ldr	r1, [pc, #172]	; (8008168 <tcp_slowtmr+0x668>)
 80080bc:	482b      	ldr	r0, [pc, #172]	; (800816c <tcp_slowtmr+0x66c>)
 80080be:	f007 fe85 	bl	800fdcc <iprintf>
    pcb_remove = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80080c8:	4b29      	ldr	r3, [pc, #164]	; (8008170 <tcp_slowtmr+0x670>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2bf0      	cmp	r3, #240	; 0xf0
 80080d4:	d904      	bls.n	80080e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80080d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080da:	3301      	adds	r3, #1
 80080dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80080e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02f      	beq.n	8008148 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80080e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080ea:	f000 fb2b 	bl	8008744 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d010      	beq.n	8008116 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80080f4:	4b1f      	ldr	r3, [pc, #124]	; (8008174 <tcp_slowtmr+0x674>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d106      	bne.n	800810c <tcp_slowtmr+0x60c>
 80080fe:	4b19      	ldr	r3, [pc, #100]	; (8008164 <tcp_slowtmr+0x664>)
 8008100:	f240 52af 	movw	r2, #1455	; 0x5af
 8008104:	491c      	ldr	r1, [pc, #112]	; (8008178 <tcp_slowtmr+0x678>)
 8008106:	4819      	ldr	r0, [pc, #100]	; (800816c <tcp_slowtmr+0x66c>)
 8008108:	f007 fe60 	bl	800fdcc <iprintf>
        prev->next = pcb->next;
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	60da      	str	r2, [r3, #12]
 8008114:	e00f      	b.n	8008136 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008116:	4b17      	ldr	r3, [pc, #92]	; (8008174 <tcp_slowtmr+0x674>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800811c:	429a      	cmp	r2, r3
 800811e:	d006      	beq.n	800812e <tcp_slowtmr+0x62e>
 8008120:	4b10      	ldr	r3, [pc, #64]	; (8008164 <tcp_slowtmr+0x664>)
 8008122:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008126:	4915      	ldr	r1, [pc, #84]	; (800817c <tcp_slowtmr+0x67c>)
 8008128:	4810      	ldr	r0, [pc, #64]	; (800816c <tcp_slowtmr+0x66c>)
 800812a:	f007 fe4f 	bl	800fdcc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	4a10      	ldr	r2, [pc, #64]	; (8008174 <tcp_slowtmr+0x674>)
 8008134:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008140:	69f8      	ldr	r0, [r7, #28]
 8008142:	f7ff f93f 	bl	80073c4 <tcp_free>
 8008146:	e004      	b.n	8008152 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1a9      	bne.n	80080ac <tcp_slowtmr+0x5ac>
    }
  }
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	3730      	adds	r7, #48	; 0x30
 800815e:	46bd      	mov	sp, r7
 8008160:	bdb0      	pop	{r4, r5, r7, pc}
 8008162:	bf00      	nop
 8008164:	08011f24 	.word	0x08011f24
 8008168:	080123b4 	.word	0x080123b4
 800816c:	08011f68 	.word	0x08011f68
 8008170:	20008a84 	.word	0x20008a84
 8008174:	20008a94 	.word	0x20008a94
 8008178:	080123e4 	.word	0x080123e4
 800817c:	0801240c 	.word	0x0801240c

08008180 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008186:	4b2d      	ldr	r3, [pc, #180]	; (800823c <tcp_fasttmr+0xbc>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	3301      	adds	r3, #1
 800818c:	b2da      	uxtb	r2, r3
 800818e:	4b2b      	ldr	r3, [pc, #172]	; (800823c <tcp_fasttmr+0xbc>)
 8008190:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008192:	4b2b      	ldr	r3, [pc, #172]	; (8008240 <tcp_fasttmr+0xc0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008198:	e048      	b.n	800822c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7f9a      	ldrb	r2, [r3, #30]
 800819e:	4b27      	ldr	r3, [pc, #156]	; (800823c <tcp_fasttmr+0xbc>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d03f      	beq.n	8008226 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80081a6:	4b25      	ldr	r3, [pc, #148]	; (800823c <tcp_fasttmr+0xbc>)
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8b5b      	ldrh	r3, [r3, #26]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d010      	beq.n	80081dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	8b5b      	ldrh	r3, [r3, #26]
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f003 fad5 	bl	800b778 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8b5b      	ldrh	r3, [r3, #26]
 80081d2:	f023 0303 	bic.w	r3, r3, #3
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8b5b      	ldrh	r3, [r3, #26]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8b5b      	ldrh	r3, [r3, #26]
 80081ec:	f023 0308 	bic.w	r3, r3, #8
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff fa78 	bl	80076ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <tcp_fasttmr+0xc4>)
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f819 	bl	8008248 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <tcp_fasttmr+0xc4>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d000      	beq.n	8008220 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800821e:	e7b8      	b.n	8008192 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	607b      	str	r3, [r7, #4]
 8008224:	e002      	b.n	800822c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1b3      	bne.n	800819a <tcp_fasttmr+0x1a>
    }
  }
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20008a9a 	.word	0x20008a9a
 8008240:	20008a90 	.word	0x20008a90
 8008244:	20008a98 	.word	0x20008a98

08008248 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <tcp_process_refused_data+0x22>
 8008256:	4b37      	ldr	r3, [pc, #220]	; (8008334 <tcp_process_refused_data+0xec>)
 8008258:	f240 6209 	movw	r2, #1545	; 0x609
 800825c:	4936      	ldr	r1, [pc, #216]	; (8008338 <tcp_process_refused_data+0xf0>)
 800825e:	4837      	ldr	r0, [pc, #220]	; (800833c <tcp_process_refused_data+0xf4>)
 8008260:	f007 fdb4 	bl	800fdcc <iprintf>
 8008264:	f06f 030f 	mvn.w	r3, #15
 8008268:	e060      	b.n	800832c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800826e:	7b5b      	ldrb	r3, [r3, #13]
 8008270:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008276:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <tcp_process_refused_data+0x58>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6918      	ldr	r0, [r3, #16]
 8008292:	2300      	movs	r3, #0
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	47a0      	blx	r4
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
 800829e:	e007      	b.n	80082b0 <tcp_process_refused_data+0x68>
 80082a0:	2300      	movs	r3, #0
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	2000      	movs	r0, #0
 80082a8:	f000 f8a4 	bl	80083f4 <tcp_recv_null>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80082b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d12a      	bne.n	800830e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d033      	beq.n	800832a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082ca:	d005      	beq.n	80082d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d0:	3301      	adds	r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <tcp_process_refused_data+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6918      	ldr	r0, [r3, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	2200      	movs	r2, #0
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	47a0      	blx	r4
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e001      	b.n	80082fe <tcp_process_refused_data+0xb6>
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80082fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008302:	f113 0f0d 	cmn.w	r3, #13
 8008306:	d110      	bne.n	800832a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008308:	f06f 030c 	mvn.w	r3, #12
 800830c:	e00e      	b.n	800832c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800830e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008312:	f113 0f0d 	cmn.w	r3, #13
 8008316:	d102      	bne.n	800831e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008318:	f06f 030c 	mvn.w	r3, #12
 800831c:	e006      	b.n	800832c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008324:	f06f 0304 	mvn.w	r3, #4
 8008328:	e000      	b.n	800832c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	bd90      	pop	{r4, r7, pc}
 8008334:	08011f24 	.word	0x08011f24
 8008338:	08012434 	.word	0x08012434
 800833c:	08011f68 	.word	0x08011f68

08008340 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008348:	e007      	b.n	800835a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f80a 	bl	800836a <tcp_seg_free>
    seg = next;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f4      	bne.n	800834a <tcp_segs_free+0xa>
  }
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fcdb 	bl	8006d40 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	2003      	movs	r0, #3
 800838e:	f7fd fe61 	bl	8006054 <memp_free>
  }
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <tcp_seg_copy+0x1c>
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <tcp_seg_copy+0x4c>)
 80083ac:	f240 6282 	movw	r2, #1666	; 0x682
 80083b0:	490e      	ldr	r1, [pc, #56]	; (80083ec <tcp_seg_copy+0x50>)
 80083b2:	480f      	ldr	r0, [pc, #60]	; (80083f0 <tcp_seg_copy+0x54>)
 80083b4:	f007 fd0a 	bl	800fdcc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80083b8:	2003      	movs	r0, #3
 80083ba:	f7fd fdff 	bl	8005fbc <memp_malloc>
 80083be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <tcp_seg_copy+0x2e>
    return NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e00a      	b.n	80083e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80083ca:	2214      	movs	r2, #20
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f007 fccc 	bl	800fd6c <memcpy>
  pbuf_ref(cseg->p);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fd51 	bl	8006e80 <pbuf_ref>
  return cseg;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	08011f24 	.word	0x08011f24
 80083ec:	08012478 	.word	0x08012478
 80083f0:	08011f68 	.word	0x08011f68

080083f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <tcp_recv_null+0x28>
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <tcp_recv_null+0x60>)
 800840a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800840e:	4912      	ldr	r1, [pc, #72]	; (8008458 <tcp_recv_null+0x64>)
 8008410:	4812      	ldr	r0, [pc, #72]	; (800845c <tcp_recv_null+0x68>)
 8008412:	f007 fcdb 	bl	800fdcc <iprintf>
 8008416:	f06f 030f 	mvn.w	r3, #15
 800841a:	e016      	b.n	800844a <tcp_recv_null+0x56>

  if (p != NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	891b      	ldrh	r3, [r3, #8]
 8008426:	4619      	mov	r1, r3
 8008428:	68b8      	ldr	r0, [r7, #8]
 800842a:	f7ff fb19 	bl	8007a60 <tcp_recved>
    pbuf_free(p);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7fe fc86 	bl	8006d40 <pbuf_free>
 8008434:	e008      	b.n	8008448 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800843e:	68b8      	ldr	r0, [r7, #8]
 8008440:	f7ff f9be 	bl	80077c0 <tcp_close>
 8008444:	4603      	mov	r3, r0
 8008446:	e000      	b.n	800844a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	08011f24 	.word	0x08011f24
 8008458:	08012494 	.word	0x08012494
 800845c:	08011f68 	.word	0x08011f68

08008460 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800846a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	db01      	blt.n	8008476 <tcp_kill_prio+0x16>
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	e000      	b.n	8008478 <tcp_kill_prio+0x18>
 8008476:	237f      	movs	r3, #127	; 0x7f
 8008478:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d034      	beq.n	80084ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3b01      	subs	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800848e:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <tcp_kill_prio+0x94>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e01f      	b.n	80084d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	7d5b      	ldrb	r3, [r3, #21]
 800849a:	7afa      	ldrb	r2, [r7, #11]
 800849c:	429a      	cmp	r2, r3
 800849e:	d80c      	bhi.n	80084ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80084a4:	7afa      	ldrb	r2, [r7, #11]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d112      	bne.n	80084d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <tcp_kill_prio+0x98>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d80a      	bhi.n	80084d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <tcp_kill_prio+0x98>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	7d5b      	ldrb	r3, [r3, #21]
 80084ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1dc      	bne.n	8008496 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d004      	beq.n	80084ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f7ff fa56 	bl	8007994 <tcp_abort>
 80084e8:	e000      	b.n	80084ec <tcp_kill_prio+0x8c>
    return;
 80084ea:	bf00      	nop
  }
}
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20008a90 	.word	0x20008a90
 80084f8:	20008a84 	.word	0x20008a84

080084fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	2b08      	cmp	r3, #8
 800850a:	d009      	beq.n	8008520 <tcp_kill_state+0x24>
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b09      	cmp	r3, #9
 8008510:	d006      	beq.n	8008520 <tcp_kill_state+0x24>
 8008512:	4b1a      	ldr	r3, [pc, #104]	; (800857c <tcp_kill_state+0x80>)
 8008514:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008518:	4919      	ldr	r1, [pc, #100]	; (8008580 <tcp_kill_state+0x84>)
 800851a:	481a      	ldr	r0, [pc, #104]	; (8008584 <tcp_kill_state+0x88>)
 800851c:	f007 fc56 	bl	800fdcc <iprintf>

  inactivity = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008524:	2300      	movs	r3, #0
 8008526:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008528:	4b17      	ldr	r3, [pc, #92]	; (8008588 <tcp_kill_state+0x8c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e017      	b.n	8008560 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	7d1b      	ldrb	r3, [r3, #20]
 8008534:	79fa      	ldrb	r2, [r7, #7]
 8008536:	429a      	cmp	r2, r3
 8008538:	d10f      	bne.n	800855a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800853a:	4b14      	ldr	r3, [pc, #80]	; (800858c <tcp_kill_state+0x90>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	429a      	cmp	r2, r3
 8008548:	d807      	bhi.n	800855a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <tcp_kill_state+0x90>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800856c:	2100      	movs	r1, #0
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f7ff f952 	bl	8007818 <tcp_abandon>
  }
}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	08011f24 	.word	0x08011f24
 8008580:	080124b0 	.word	0x080124b0
 8008584:	08011f68 	.word	0x08011f68
 8008588:	20008a90 	.word	0x20008a90
 800858c:	20008a84 	.word	0x20008a84

08008590 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800859e:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <tcp_kill_timewait+0x58>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e012      	b.n	80085cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <tcp_kill_timewait+0x5c>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d807      	bhi.n	80085c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80085b6:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <tcp_kill_timewait+0x5c>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e9      	bne.n	80085a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80085d8:	68b8      	ldr	r0, [r7, #8]
 80085da:	f7ff f9db 	bl	8007994 <tcp_abort>
  }
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20008a94 	.word	0x20008a94
 80085ec:	20008a84 	.word	0x20008a84

080085f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80085f6:	4b10      	ldr	r3, [pc, #64]	; (8008638 <tcp_handle_closepend+0x48>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80085fc:	e014      	b.n	8008628 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8b5b      	ldrh	r3, [r3, #26]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8b5b      	ldrh	r3, [r3, #26]
 8008614:	f023 0308 	bic.w	r3, r3, #8
 8008618:	b29a      	uxth	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff f864 	bl	80076ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e7      	bne.n	80085fe <tcp_handle_closepend+0xe>
  }
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20008a90 	.word	0x20008a90

0800863c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008646:	2001      	movs	r0, #1
 8008648:	f7fd fcb8 	bl	8005fbc <memp_malloc>
 800864c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d126      	bne.n	80086a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008654:	f7ff ffcc 	bl	80085f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008658:	f7ff ff9a 	bl	8008590 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800865c:	2001      	movs	r0, #1
 800865e:	f7fd fcad 	bl	8005fbc <memp_malloc>
 8008662:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d11b      	bne.n	80086a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800866a:	2009      	movs	r0, #9
 800866c:	f7ff ff46 	bl	80084fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008670:	2001      	movs	r0, #1
 8008672:	f7fd fca3 	bl	8005fbc <memp_malloc>
 8008676:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d111      	bne.n	80086a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800867e:	2008      	movs	r0, #8
 8008680:	f7ff ff3c 	bl	80084fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008684:	2001      	movs	r0, #1
 8008686:	f7fd fc99 	bl	8005fbc <memp_malloc>
 800868a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d107      	bne.n	80086a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fee3 	bl	8008460 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800869a:	2001      	movs	r0, #1
 800869c:	f7fd fc8e 	bl	8005fbc <memp_malloc>
 80086a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d03f      	beq.n	8008728 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80086a8:	229c      	movs	r2, #156	; 0x9c
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f007 fb85 	bl	800fdbc <memset>
    pcb->prio = prio;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	79fa      	ldrb	r2, [r7, #7]
 80086b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80086be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80086c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80086de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2206      	movs	r2, #6
 80086e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2206      	movs	r2, #6
 80086ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <tcp_alloc+0xf8>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <tcp_alloc+0xfc>)
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008714:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a08      	ldr	r2, [pc, #32]	; (800873c <tcp_alloc+0x100>)
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a07      	ldr	r2, [pc, #28]	; (8008740 <tcp_alloc+0x104>)
 8008724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20008a84 	.word	0x20008a84
 8008738:	20008a9a 	.word	0x20008a9a
 800873c:	080083f5 	.word	0x080083f5
 8008740:	006ddd00 	.word	0x006ddd00

08008744 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <tcp_pcb_purge+0x1e>
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <tcp_pcb_purge+0x94>)
 8008754:	f640 0251 	movw	r2, #2129	; 0x851
 8008758:	4920      	ldr	r1, [pc, #128]	; (80087dc <tcp_pcb_purge+0x98>)
 800875a:	4821      	ldr	r0, [pc, #132]	; (80087e0 <tcp_pcb_purge+0x9c>)
 800875c:	f007 fb36 	bl	800fdcc <iprintf>
 8008760:	e037      	b.n	80087d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7d1b      	ldrb	r3, [r3, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d033      	beq.n	80087d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800876e:	2b0a      	cmp	r3, #10
 8008770:	d02f      	beq.n	80087d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008776:	2b01      	cmp	r3, #1
 8008778:	d02b      	beq.n	80087d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fada 	bl	8006d40 <pbuf_free>
      pcb->refused_data = NULL;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f986 	bl	8008aac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fdc7 	bl	8008340 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fdc2 	bl	8008340 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	08011f24 	.word	0x08011f24
 80087dc:	08012570 	.word	0x08012570
 80087e0:	08011f68 	.word	0x08011f68

080087e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <tcp_pcb_remove+0x1e>
 80087f4:	4b3e      	ldr	r3, [pc, #248]	; (80088f0 <tcp_pcb_remove+0x10c>)
 80087f6:	f640 0283 	movw	r2, #2179	; 0x883
 80087fa:	493e      	ldr	r1, [pc, #248]	; (80088f4 <tcp_pcb_remove+0x110>)
 80087fc:	483e      	ldr	r0, [pc, #248]	; (80088f8 <tcp_pcb_remove+0x114>)
 80087fe:	f007 fae5 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <tcp_pcb_remove+0x32>
 8008808:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <tcp_pcb_remove+0x10c>)
 800880a:	f640 0284 	movw	r2, #2180	; 0x884
 800880e:	493b      	ldr	r1, [pc, #236]	; (80088fc <tcp_pcb_remove+0x118>)
 8008810:	4839      	ldr	r0, [pc, #228]	; (80088f8 <tcp_pcb_remove+0x114>)
 8008812:	f007 fadb 	bl	800fdcc <iprintf>

  TCP_RMV(pcblist, pcb);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d105      	bne.n	800882c <tcp_pcb_remove+0x48>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e013      	b.n	8008854 <tcp_pcb_remove+0x70>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e00c      	b.n	800884e <tcp_pcb_remove+0x6a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d104      	bne.n	8008848 <tcp_pcb_remove+0x64>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	e005      	b.n	8008854 <tcp_pcb_remove+0x70>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1ef      	bne.n	8008834 <tcp_pcb_remove+0x50>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800885a:	6838      	ldr	r0, [r7, #0]
 800885c:	f7ff ff72 	bl	8008744 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	7d1b      	ldrb	r3, [r3, #20]
 8008864:	2b0a      	cmp	r3, #10
 8008866:	d013      	beq.n	8008890 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800886c:	2b01      	cmp	r3, #1
 800886e:	d00f      	beq.n	8008890 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	8b5b      	ldrh	r3, [r3, #26]
 8008874:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	8b5b      	ldrh	r3, [r3, #26]
 8008880:	f043 0302 	orr.w	r3, r3, #2
 8008884:	b29a      	uxth	r2, r3
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800888a:	6838      	ldr	r0, [r7, #0]
 800888c:	f002 ff74 	bl	800b778 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	7d1b      	ldrb	r3, [r3, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d020      	beq.n	80088da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <tcp_pcb_remove+0xca>
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <tcp_pcb_remove+0x10c>)
 80088a2:	f640 0293 	movw	r2, #2195	; 0x893
 80088a6:	4916      	ldr	r1, [pc, #88]	; (8008900 <tcp_pcb_remove+0x11c>)
 80088a8:	4813      	ldr	r0, [pc, #76]	; (80088f8 <tcp_pcb_remove+0x114>)
 80088aa:	f007 fa8f 	bl	800fdcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <tcp_pcb_remove+0xe0>
 80088b6:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <tcp_pcb_remove+0x10c>)
 80088b8:	f640 0294 	movw	r2, #2196	; 0x894
 80088bc:	4911      	ldr	r1, [pc, #68]	; (8008904 <tcp_pcb_remove+0x120>)
 80088be:	480e      	ldr	r0, [pc, #56]	; (80088f8 <tcp_pcb_remove+0x114>)
 80088c0:	f007 fa84 	bl	800fdcc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <tcp_pcb_remove+0xf6>
 80088cc:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <tcp_pcb_remove+0x10c>)
 80088ce:	f640 0296 	movw	r2, #2198	; 0x896
 80088d2:	490d      	ldr	r1, [pc, #52]	; (8008908 <tcp_pcb_remove+0x124>)
 80088d4:	4808      	ldr	r0, [pc, #32]	; (80088f8 <tcp_pcb_remove+0x114>)
 80088d6:	f007 fa79 	bl	800fdcc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2200      	movs	r2, #0
 80088e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	08011f24 	.word	0x08011f24
 80088f4:	0801258c 	.word	0x0801258c
 80088f8:	08011f68 	.word	0x08011f68
 80088fc:	080125a8 	.word	0x080125a8
 8008900:	080125c8 	.word	0x080125c8
 8008904:	080125e0 	.word	0x080125e0
 8008908:	080125fc 	.word	0x080125fc

0800890c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <tcp_next_iss+0x1c>
 800891a:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <tcp_next_iss+0x38>)
 800891c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008920:	4909      	ldr	r1, [pc, #36]	; (8008948 <tcp_next_iss+0x3c>)
 8008922:	480a      	ldr	r0, [pc, #40]	; (800894c <tcp_next_iss+0x40>)
 8008924:	f007 fa52 	bl	800fdcc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008928:	4b09      	ldr	r3, [pc, #36]	; (8008950 <tcp_next_iss+0x44>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <tcp_next_iss+0x48>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4413      	add	r3, r2
 8008932:	4a07      	ldr	r2, [pc, #28]	; (8008950 <tcp_next_iss+0x44>)
 8008934:	6013      	str	r3, [r2, #0]
  return iss;
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <tcp_next_iss+0x44>)
 8008938:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	08011f24 	.word	0x08011f24
 8008948:	08012614 	.word	0x08012614
 800894c:	08011f68 	.word	0x08011f68
 8008950:	2000000c 	.word	0x2000000c
 8008954:	20008a84 	.word	0x20008a84

08008958 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <tcp_eff_send_mss_netif+0x22>
 800896c:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <tcp_eff_send_mss_netif+0x68>)
 800896e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008972:	4914      	ldr	r1, [pc, #80]	; (80089c4 <tcp_eff_send_mss_netif+0x6c>)
 8008974:	4814      	ldr	r0, [pc, #80]	; (80089c8 <tcp_eff_send_mss_netif+0x70>)
 8008976:	f007 fa29 	bl	800fdcc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008980:	89fb      	ldrh	r3, [r7, #14]
 8008982:	e019      	b.n	80089b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008988:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800898a:	8afb      	ldrh	r3, [r7, #22]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d012      	beq.n	80089b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008990:	2328      	movs	r3, #40	; 0x28
 8008992:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008994:	8afa      	ldrh	r2, [r7, #22]
 8008996:	8abb      	ldrh	r3, [r7, #20]
 8008998:	429a      	cmp	r2, r3
 800899a:	d904      	bls.n	80089a6 <tcp_eff_send_mss_netif+0x4e>
 800899c:	8afa      	ldrh	r2, [r7, #22]
 800899e:	8abb      	ldrh	r3, [r7, #20]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	e000      	b.n	80089a8 <tcp_eff_send_mss_netif+0x50>
 80089a6:	2300      	movs	r3, #0
 80089a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80089aa:	8a7a      	ldrh	r2, [r7, #18]
 80089ac:	89fb      	ldrh	r3, [r7, #14]
 80089ae:	4293      	cmp	r3, r2
 80089b0:	bf28      	it	cs
 80089b2:	4613      	movcs	r3, r2
 80089b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80089b6:	89fb      	ldrh	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	08011f24 	.word	0x08011f24
 80089c4:	08012630 	.word	0x08012630
 80089c8:	08011f68 	.word	0x08011f68

080089cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d119      	bne.n	8008a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80089e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80089e6:	4910      	ldr	r1, [pc, #64]	; (8008a28 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80089e8:	4810      	ldr	r0, [pc, #64]	; (8008a2c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80089ea:	f007 f9ef 	bl	800fdcc <iprintf>

  while (pcb != NULL) {
 80089ee:	e011      	b.n	8008a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d108      	bne.n	8008a0e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7fe ffc6 	bl	8007994 <tcp_abort>
      pcb = next;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e002      	b.n	8008a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1ea      	bne.n	80089f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	08011f24 	.word	0x08011f24
 8008a28:	08012658 	.word	0x08012658
 8008a2c:	08011f68 	.word	0x08011f68

08008a30 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d02a      	beq.n	8008a96 <tcp_netif_ip_addr_changed+0x66>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d026      	beq.n	8008a96 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008a48:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <tcp_netif_ip_addr_changed+0x70>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff ffbc 	bl	80089cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008a54:	4b13      	ldr	r3, [pc, #76]	; (8008aa4 <tcp_netif_ip_addr_changed+0x74>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff ffb6 	bl	80089cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d017      	beq.n	8008a96 <tcp_netif_ip_addr_changed+0x66>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d013      	beq.n	8008a96 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <tcp_netif_ip_addr_changed+0x78>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e00c      	b.n	8008a90 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d103      	bne.n	8008a8a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1ef      	bne.n	8008a76 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20008a90 	.word	0x20008a90
 8008aa4:	20008a88 	.word	0x20008a88
 8008aa8:	20008a8c 	.word	0x20008a8c

08008aac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d007      	beq.n	8008acc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7ff fc3d 	bl	8008340 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b08d      	sub	sp, #52	; 0x34
 8008ad8:	af04      	add	r7, sp, #16
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <tcp_input+0x1c>
 8008ae4:	4b9b      	ldr	r3, [pc, #620]	; (8008d54 <tcp_input+0x280>)
 8008ae6:	2283      	movs	r2, #131	; 0x83
 8008ae8:	499b      	ldr	r1, [pc, #620]	; (8008d58 <tcp_input+0x284>)
 8008aea:	489c      	ldr	r0, [pc, #624]	; (8008d5c <tcp_input+0x288>)
 8008aec:	f007 f96e 	bl	800fdcc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4a9a      	ldr	r2, [pc, #616]	; (8008d60 <tcp_input+0x28c>)
 8008af6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	895b      	ldrh	r3, [r3, #10]
 8008afc:	2b13      	cmp	r3, #19
 8008afe:	f240 83d1 	bls.w	80092a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b02:	4b98      	ldr	r3, [pc, #608]	; (8008d64 <tcp_input+0x290>)
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4a97      	ldr	r2, [pc, #604]	; (8008d64 <tcp_input+0x290>)
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f006 f9a3 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 83c7 	bne.w	80092a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008b1a:	4b92      	ldr	r3, [pc, #584]	; (8008d64 <tcp_input+0x290>)
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b22:	2be0      	cmp	r3, #224	; 0xe0
 8008b24:	f000 83c0 	beq.w	80092a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008b28:	4b8d      	ldr	r3, [pc, #564]	; (8008d60 <tcp_input+0x28c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	899b      	ldrh	r3, [r3, #12]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fc fded 	bl	8005710 <lwip_htons>
 8008b36:	4603      	mov	r3, r0
 8008b38:	0b1b      	lsrs	r3, r3, #12
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008b42:	7cbb      	ldrb	r3, [r7, #18]
 8008b44:	2b13      	cmp	r3, #19
 8008b46:	f240 83b1 	bls.w	80092ac <tcp_input+0x7d8>
 8008b4a:	7cbb      	ldrb	r3, [r7, #18]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	891b      	ldrh	r3, [r3, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	f200 83aa 	bhi.w	80092ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008b58:	7cbb      	ldrb	r3, [r7, #18]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b14      	subs	r3, #20
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	4b81      	ldr	r3, [pc, #516]	; (8008d68 <tcp_input+0x294>)
 8008b62:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008b64:	4b81      	ldr	r3, [pc, #516]	; (8008d6c <tcp_input+0x298>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	895a      	ldrh	r2, [r3, #10]
 8008b6e:	7cbb      	ldrb	r3, [r7, #18]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d309      	bcc.n	8008b8a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008b76:	4b7c      	ldr	r3, [pc, #496]	; (8008d68 <tcp_input+0x294>)
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	4b7d      	ldr	r3, [pc, #500]	; (8008d70 <tcp_input+0x29c>)
 8008b7c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008b7e:	7cbb      	ldrb	r3, [r7, #18]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fe f856 	bl	8006c34 <pbuf_remove_header>
 8008b88:	e04e      	b.n	8008c28 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <tcp_input+0xca>
 8008b92:	4b70      	ldr	r3, [pc, #448]	; (8008d54 <tcp_input+0x280>)
 8008b94:	22c2      	movs	r2, #194	; 0xc2
 8008b96:	4977      	ldr	r1, [pc, #476]	; (8008d74 <tcp_input+0x2a0>)
 8008b98:	4870      	ldr	r0, [pc, #448]	; (8008d5c <tcp_input+0x288>)
 8008b9a:	f007 f917 	bl	800fdcc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008b9e:	2114      	movs	r1, #20
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7fe f847 	bl	8006c34 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	895a      	ldrh	r2, [r3, #10]
 8008baa:	4b71      	ldr	r3, [pc, #452]	; (8008d70 <tcp_input+0x29c>)
 8008bac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008bae:	4b6e      	ldr	r3, [pc, #440]	; (8008d68 <tcp_input+0x294>)
 8008bb0:	881a      	ldrh	r2, [r3, #0]
 8008bb2:	4b6f      	ldr	r3, [pc, #444]	; (8008d70 <tcp_input+0x29c>)
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008bba:	4b6d      	ldr	r3, [pc, #436]	; (8008d70 <tcp_input+0x29c>)
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7fe f837 	bl	8006c34 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	895b      	ldrh	r3, [r3, #10]
 8008bcc:	8a3a      	ldrh	r2, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	f200 836e 	bhi.w	80092b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	4a64      	ldr	r2, [pc, #400]	; (8008d6c <tcp_input+0x298>)
 8008bdc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	8a3a      	ldrh	r2, [r7, #16]
 8008be4:	4611      	mov	r1, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe f824 	bl	8006c34 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	891a      	ldrh	r2, [r3, #8]
 8008bf0:	8a3b      	ldrh	r3, [r7, #16]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	895b      	ldrh	r3, [r3, #10]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <tcp_input+0x13a>
 8008c02:	4b54      	ldr	r3, [pc, #336]	; (8008d54 <tcp_input+0x280>)
 8008c04:	22df      	movs	r2, #223	; 0xdf
 8008c06:	495c      	ldr	r1, [pc, #368]	; (8008d78 <tcp_input+0x2a4>)
 8008c08:	4854      	ldr	r0, [pc, #336]	; (8008d5c <tcp_input+0x288>)
 8008c0a:	f007 f8df 	bl	800fdcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	891a      	ldrh	r2, [r3, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	891b      	ldrh	r3, [r3, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d005      	beq.n	8008c28 <tcp_input+0x154>
 8008c1c:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <tcp_input+0x280>)
 8008c1e:	22e0      	movs	r2, #224	; 0xe0
 8008c20:	4956      	ldr	r1, [pc, #344]	; (8008d7c <tcp_input+0x2a8>)
 8008c22:	484e      	ldr	r0, [pc, #312]	; (8008d5c <tcp_input+0x288>)
 8008c24:	f007 f8d2 	bl	800fdcc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008c28:	4b4d      	ldr	r3, [pc, #308]	; (8008d60 <tcp_input+0x28c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4a4b      	ldr	r2, [pc, #300]	; (8008d60 <tcp_input+0x28c>)
 8008c32:	6814      	ldr	r4, [r2, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fc fd6b 	bl	8005710 <lwip_htons>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008c3e:	4b48      	ldr	r3, [pc, #288]	; (8008d60 <tcp_input+0x28c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	885b      	ldrh	r3, [r3, #2]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	4a46      	ldr	r2, [pc, #280]	; (8008d60 <tcp_input+0x28c>)
 8008c48:	6814      	ldr	r4, [r2, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fc fd60 	bl	8005710 <lwip_htons>
 8008c50:	4603      	mov	r3, r0
 8008c52:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008c54:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <tcp_input+0x28c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4a41      	ldr	r2, [pc, #260]	; (8008d60 <tcp_input+0x28c>)
 8008c5c:	6814      	ldr	r4, [r2, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fc fd6b 	bl	800573a <lwip_htonl>
 8008c64:	4603      	mov	r3, r0
 8008c66:	6063      	str	r3, [r4, #4]
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	4a45      	ldr	r2, [pc, #276]	; (8008d80 <tcp_input+0x2ac>)
 8008c6c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008c6e:	4b3c      	ldr	r3, [pc, #240]	; (8008d60 <tcp_input+0x28c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	4a3a      	ldr	r2, [pc, #232]	; (8008d60 <tcp_input+0x28c>)
 8008c76:	6814      	ldr	r4, [r2, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fc fd5e 	bl	800573a <lwip_htonl>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	4a3f      	ldr	r2, [pc, #252]	; (8008d84 <tcp_input+0x2b0>)
 8008c86:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008c88:	4b35      	ldr	r3, [pc, #212]	; (8008d60 <tcp_input+0x28c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	89db      	ldrh	r3, [r3, #14]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4a33      	ldr	r2, [pc, #204]	; (8008d60 <tcp_input+0x28c>)
 8008c92:	6814      	ldr	r4, [r2, #0]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fc fd3b 	bl	8005710 <lwip_htons>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008c9e:	4b30      	ldr	r3, [pc, #192]	; (8008d60 <tcp_input+0x28c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	899b      	ldrh	r3, [r3, #12]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fc fd32 	bl	8005710 <lwip_htons>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <tcp_input+0x2b4>)
 8008cb8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	891a      	ldrh	r2, [r3, #8]
 8008cbe:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <tcp_input+0x2b8>)
 8008cc0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008cc2:	4b31      	ldr	r3, [pc, #196]	; (8008d88 <tcp_input+0x2b4>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00c      	beq.n	8008ce8 <tcp_input+0x214>
    tcplen++;
 8008cce:	4b2f      	ldr	r3, [pc, #188]	; (8008d8c <tcp_input+0x2b8>)
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <tcp_input+0x2b8>)
 8008cd8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	891a      	ldrh	r2, [r3, #8]
 8008cde:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <tcp_input+0x2b8>)
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	f200 82e6 	bhi.w	80092b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cec:	4b28      	ldr	r3, [pc, #160]	; (8008d90 <tcp_input+0x2bc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	e09d      	b.n	8008e30 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d105      	bne.n	8008d08 <tcp_input+0x234>
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <tcp_input+0x280>)
 8008cfe:	22fb      	movs	r2, #251	; 0xfb
 8008d00:	4924      	ldr	r1, [pc, #144]	; (8008d94 <tcp_input+0x2c0>)
 8008d02:	4816      	ldr	r0, [pc, #88]	; (8008d5c <tcp_input+0x288>)
 8008d04:	f007 f862 	bl	800fdcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	7d1b      	ldrb	r3, [r3, #20]
 8008d0c:	2b0a      	cmp	r3, #10
 8008d0e:	d105      	bne.n	8008d1c <tcp_input+0x248>
 8008d10:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <tcp_input+0x280>)
 8008d12:	22fc      	movs	r2, #252	; 0xfc
 8008d14:	4920      	ldr	r1, [pc, #128]	; (8008d98 <tcp_input+0x2c4>)
 8008d16:	4811      	ldr	r0, [pc, #68]	; (8008d5c <tcp_input+0x288>)
 8008d18:	f007 f858 	bl	800fdcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d105      	bne.n	8008d30 <tcp_input+0x25c>
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <tcp_input+0x280>)
 8008d26:	22fd      	movs	r2, #253	; 0xfd
 8008d28:	491c      	ldr	r1, [pc, #112]	; (8008d9c <tcp_input+0x2c8>)
 8008d2a:	480c      	ldr	r0, [pc, #48]	; (8008d5c <tcp_input+0x288>)
 8008d2c:	f007 f84e 	bl	800fdcc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	7a1b      	ldrb	r3, [r3, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d033      	beq.n	8008da0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	7a1a      	ldrb	r2, [r3, #8]
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <tcp_input+0x290>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d44:	3301      	adds	r3, #1
 8008d46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d029      	beq.n	8008da0 <tcp_input+0x2cc>
      prev = pcb;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	61fb      	str	r3, [r7, #28]
      continue;
 8008d50:	e06b      	b.n	8008e2a <tcp_input+0x356>
 8008d52:	bf00      	nop
 8008d54:	0801268c 	.word	0x0801268c
 8008d58:	080126c0 	.word	0x080126c0
 8008d5c:	080126d8 	.word	0x080126d8
 8008d60:	20008ab0 	.word	0x20008ab0
 8008d64:	20003314 	.word	0x20003314
 8008d68:	20008ab4 	.word	0x20008ab4
 8008d6c:	20008ab8 	.word	0x20008ab8
 8008d70:	20008ab6 	.word	0x20008ab6
 8008d74:	08012700 	.word	0x08012700
 8008d78:	08012710 	.word	0x08012710
 8008d7c:	0801271c 	.word	0x0801271c
 8008d80:	20008ac0 	.word	0x20008ac0
 8008d84:	20008ac4 	.word	0x20008ac4
 8008d88:	20008acc 	.word	0x20008acc
 8008d8c:	20008aca 	.word	0x20008aca
 8008d90:	20008a90 	.word	0x20008a90
 8008d94:	0801273c 	.word	0x0801273c
 8008d98:	08012764 	.word	0x08012764
 8008d9c:	08012790 	.word	0x08012790
    }

    if (pcb->remote_port == tcphdr->src &&
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	8b1a      	ldrh	r2, [r3, #24]
 8008da4:	4b72      	ldr	r3, [pc, #456]	; (8008f70 <tcp_input+0x49c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d13a      	bne.n	8008e26 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	8ada      	ldrh	r2, [r3, #22]
 8008db4:	4b6e      	ldr	r3, [pc, #440]	; (8008f70 <tcp_input+0x49c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d132      	bne.n	8008e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	4b6b      	ldr	r3, [pc, #428]	; (8008f74 <tcp_input+0x4a0>)
 8008dc6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d12c      	bne.n	8008e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b68      	ldr	r3, [pc, #416]	; (8008f74 <tcp_input+0x4a0>)
 8008dd2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d126      	bne.n	8008e26 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d106      	bne.n	8008df0 <tcp_input+0x31c>
 8008de2:	4b65      	ldr	r3, [pc, #404]	; (8008f78 <tcp_input+0x4a4>)
 8008de4:	f240 120d 	movw	r2, #269	; 0x10d
 8008de8:	4964      	ldr	r1, [pc, #400]	; (8008f7c <tcp_input+0x4a8>)
 8008dea:	4865      	ldr	r0, [pc, #404]	; (8008f80 <tcp_input+0x4ac>)
 8008dec:	f006 ffee 	bl	800fdcc <iprintf>
      if (prev != NULL) {
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <tcp_input+0x338>
        prev->next = pcb->next;
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008dfe:	4b61      	ldr	r3, [pc, #388]	; (8008f84 <tcp_input+0x4b0>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008e06:	4a5f      	ldr	r2, [pc, #380]	; (8008f84 <tcp_input+0x4b0>)
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d111      	bne.n	8008e3a <tcp_input+0x366>
 8008e16:	4b58      	ldr	r3, [pc, #352]	; (8008f78 <tcp_input+0x4a4>)
 8008e18:	f240 1215 	movw	r2, #277	; 0x115
 8008e1c:	495a      	ldr	r1, [pc, #360]	; (8008f88 <tcp_input+0x4b4>)
 8008e1e:	4858      	ldr	r0, [pc, #352]	; (8008f80 <tcp_input+0x4ac>)
 8008e20:	f006 ffd4 	bl	800fdcc <iprintf>
      break;
 8008e24:	e009      	b.n	8008e3a <tcp_input+0x366>
    }
    prev = pcb;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f47f af5e 	bne.w	8008cf4 <tcp_input+0x220>
 8008e38:	e000      	b.n	8008e3c <tcp_input+0x368>
      break;
 8008e3a:	bf00      	nop
  }

  if (pcb == NULL) {
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f040 80aa 	bne.w	8008f98 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e44:	4b51      	ldr	r3, [pc, #324]	; (8008f8c <tcp_input+0x4b8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e03f      	b.n	8008ecc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	7d1b      	ldrb	r3, [r3, #20]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d006      	beq.n	8008e62 <tcp_input+0x38e>
 8008e54:	4b48      	ldr	r3, [pc, #288]	; (8008f78 <tcp_input+0x4a4>)
 8008e56:	f240 121f 	movw	r2, #287	; 0x11f
 8008e5a:	494d      	ldr	r1, [pc, #308]	; (8008f90 <tcp_input+0x4bc>)
 8008e5c:	4848      	ldr	r0, [pc, #288]	; (8008f80 <tcp_input+0x4ac>)
 8008e5e:	f006 ffb5 	bl	800fdcc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	7a1b      	ldrb	r3, [r3, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	7a1a      	ldrb	r2, [r3, #8]
 8008e6e:	4b41      	ldr	r3, [pc, #260]	; (8008f74 <tcp_input+0x4a0>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e76:	3301      	adds	r3, #1
 8008e78:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d122      	bne.n	8008ec4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	8b1a      	ldrh	r2, [r3, #24]
 8008e82:	4b3b      	ldr	r3, [pc, #236]	; (8008f70 <tcp_input+0x49c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d11b      	bne.n	8008ec6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	8ada      	ldrh	r2, [r3, #22]
 8008e92:	4b37      	ldr	r3, [pc, #220]	; (8008f70 <tcp_input+0x49c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	885b      	ldrh	r3, [r3, #2]
 8008e98:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d113      	bne.n	8008ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <tcp_input+0x4a0>)
 8008ea4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d10d      	bne.n	8008ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <tcp_input+0x4a0>)
 8008eb0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d107      	bne.n	8008ec6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f000 fb56 	bl	8009568 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fd ff3f 	bl	8006d40 <pbuf_free>
        return;
 8008ec2:	e1fd      	b.n	80092c0 <tcp_input+0x7ec>
        continue;
 8008ec4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1bc      	bne.n	8008e4c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ed6:	4b2f      	ldr	r3, [pc, #188]	; (8008f94 <tcp_input+0x4c0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	e02a      	b.n	8008f34 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	7a1b      	ldrb	r3, [r3, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00c      	beq.n	8008f00 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	7a1a      	ldrb	r2, [r3, #8]
 8008eea:	4b22      	ldr	r3, [pc, #136]	; (8008f74 <tcp_input+0x4a0>)
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d002      	beq.n	8008f00 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	61fb      	str	r3, [r7, #28]
        continue;
 8008efe:	e016      	b.n	8008f2e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	8ada      	ldrh	r2, [r3, #22]
 8008f04:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <tcp_input+0x49c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d10c      	bne.n	8008f2a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <tcp_input+0x4a0>)
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d00f      	beq.n	8008f3c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <tcp_input+0x46a>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1d1      	bne.n	8008ede <tcp_input+0x40a>
 8008f3a:	e000      	b.n	8008f3e <tcp_input+0x46a>
            break;
 8008f3c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d029      	beq.n	8008f98 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008f52:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <tcp_input+0x4c0>)
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008f5a:	4a0e      	ldr	r2, [pc, #56]	; (8008f94 <tcp_input+0x4c0>)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008f60:	6978      	ldr	r0, [r7, #20]
 8008f62:	f000 fa03 	bl	800936c <tcp_listen_input>
      }
      pbuf_free(p);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fd feea 	bl	8006d40 <pbuf_free>
      return;
 8008f6c:	e1a8      	b.n	80092c0 <tcp_input+0x7ec>
 8008f6e:	bf00      	nop
 8008f70:	20008ab0 	.word	0x20008ab0
 8008f74:	20003314 	.word	0x20003314
 8008f78:	0801268c 	.word	0x0801268c
 8008f7c:	080127b8 	.word	0x080127b8
 8008f80:	080126d8 	.word	0x080126d8
 8008f84:	20008a90 	.word	0x20008a90
 8008f88:	080127e4 	.word	0x080127e4
 8008f8c:	20008a94 	.word	0x20008a94
 8008f90:	08012810 	.word	0x08012810
 8008f94:	20008a8c 	.word	0x20008a8c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8158 	beq.w	8009250 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008fa0:	4b95      	ldr	r3, [pc, #596]	; (80091f8 <tcp_input+0x724>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	891a      	ldrh	r2, [r3, #8]
 8008faa:	4b93      	ldr	r3, [pc, #588]	; (80091f8 <tcp_input+0x724>)
 8008fac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008fae:	4a92      	ldr	r2, [pc, #584]	; (80091f8 <tcp_input+0x724>)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008fb4:	4b91      	ldr	r3, [pc, #580]	; (80091fc <tcp_input+0x728>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a8f      	ldr	r2, [pc, #572]	; (80091f8 <tcp_input+0x724>)
 8008fba:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008fbc:	4b90      	ldr	r3, [pc, #576]	; (8009200 <tcp_input+0x72c>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008fc2:	4b90      	ldr	r3, [pc, #576]	; (8009204 <tcp_input+0x730>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008fc8:	4b8f      	ldr	r3, [pc, #572]	; (8009208 <tcp_input+0x734>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008fce:	4b8f      	ldr	r3, [pc, #572]	; (800920c <tcp_input+0x738>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d006      	beq.n	8008fe8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7b5b      	ldrb	r3, [r3, #13]
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ff0:	69b8      	ldr	r0, [r7, #24]
 8008ff2:	f7ff f929 	bl	8008248 <tcp_process_refused_data>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f113 0f0d 	cmn.w	r3, #13
 8008ffc:	d007      	beq.n	800900e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009006:	4b82      	ldr	r3, [pc, #520]	; (8009210 <tcp_input+0x73c>)
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	2b00      	cmp	r3, #0
 8009014:	f040 80e3 	bne.w	80091de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009018:	69b8      	ldr	r0, [r7, #24]
 800901a:	f003 f9bf 	bl	800c39c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800901e:	e0de      	b.n	80091de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009020:	4a7c      	ldr	r2, [pc, #496]	; (8009214 <tcp_input+0x740>)
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009026:	69b8      	ldr	r0, [r7, #24]
 8009028:	f000 fb18 	bl	800965c <tcp_process>
 800902c:	4603      	mov	r3, r0
 800902e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009034:	f113 0f0d 	cmn.w	r3, #13
 8009038:	f000 80d3 	beq.w	80091e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800903c:	4b71      	ldr	r3, [pc, #452]	; (8009204 <tcp_input+0x730>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0308 	and.w	r3, r3, #8
 8009044:	2b00      	cmp	r3, #0
 8009046:	d015      	beq.n	8009074 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <tcp_input+0x590>
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	6912      	ldr	r2, [r2, #16]
 800905c:	f06f 010d 	mvn.w	r1, #13
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009064:	69b9      	ldr	r1, [r7, #24]
 8009066:	486c      	ldr	r0, [pc, #432]	; (8009218 <tcp_input+0x744>)
 8009068:	f7ff fbbc 	bl	80087e4 <tcp_pcb_remove>
        tcp_free(pcb);
 800906c:	69b8      	ldr	r0, [r7, #24]
 800906e:	f7fe f9a9 	bl	80073c4 <tcp_free>
 8009072:	e0da      	b.n	800922a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009078:	4b63      	ldr	r3, [pc, #396]	; (8009208 <tcp_input+0x734>)
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01d      	beq.n	80090bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009080:	4b61      	ldr	r3, [pc, #388]	; (8009208 <tcp_input+0x734>)
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <tcp_input+0x5d2>
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	6910      	ldr	r0, [r2, #16]
 800909a:	89fa      	ldrh	r2, [r7, #14]
 800909c:	69b9      	ldr	r1, [r7, #24]
 800909e:	4798      	blx	r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	74fb      	strb	r3, [r7, #19]
 80090a4:	e001      	b.n	80090aa <tcp_input+0x5d6>
 80090a6:	2300      	movs	r3, #0
 80090a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80090aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090ae:	f113 0f0d 	cmn.w	r3, #13
 80090b2:	f000 8098 	beq.w	80091e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80090b6:	4b54      	ldr	r3, [pc, #336]	; (8009208 <tcp_input+0x734>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80090bc:	69b8      	ldr	r0, [r7, #24]
 80090be:	f000 f915 	bl	80092ec <tcp_input_delayed_close>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 8090 	bne.w	80091ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80090ca:	4b4d      	ldr	r3, [pc, #308]	; (8009200 <tcp_input+0x72c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d041      	beq.n	8009156 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d006      	beq.n	80090e8 <tcp_input+0x614>
 80090da:	4b50      	ldr	r3, [pc, #320]	; (800921c <tcp_input+0x748>)
 80090dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80090e0:	494f      	ldr	r1, [pc, #316]	; (8009220 <tcp_input+0x74c>)
 80090e2:	4850      	ldr	r0, [pc, #320]	; (8009224 <tcp_input+0x750>)
 80090e4:	f006 fe72 	bl	800fdcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	8b5b      	ldrh	r3, [r3, #26]
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d008      	beq.n	8009106 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80090f4:	4b42      	ldr	r3, [pc, #264]	; (8009200 <tcp_input+0x72c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd fe21 	bl	8006d40 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80090fe:	69b8      	ldr	r0, [r7, #24]
 8009100:	f7fe fc48 	bl	8007994 <tcp_abort>
            goto aborted;
 8009104:	e091      	b.n	800922a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00c      	beq.n	800912a <tcp_input+0x656>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	4b39      	ldr	r3, [pc, #228]	; (8009200 <tcp_input+0x72c>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	2300      	movs	r3, #0
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	47a0      	blx	r4
 8009124:	4603      	mov	r3, r0
 8009126:	74fb      	strb	r3, [r7, #19]
 8009128:	e008      	b.n	800913c <tcp_input+0x668>
 800912a:	4b35      	ldr	r3, [pc, #212]	; (8009200 <tcp_input+0x72c>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	2300      	movs	r3, #0
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	2000      	movs	r0, #0
 8009134:	f7ff f95e 	bl	80083f4 <tcp_recv_null>
 8009138:	4603      	mov	r3, r0
 800913a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800913c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009140:	f113 0f0d 	cmn.w	r3, #13
 8009144:	d053      	beq.n	80091ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800914e:	4b2c      	ldr	r3, [pc, #176]	; (8009200 <tcp_input+0x72c>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009156:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <tcp_input+0x730>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d030      	beq.n	80091c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800916e:	7b5a      	ldrb	r2, [r3, #13]
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009174:	f042 0220 	orr.w	r2, r2, #32
 8009178:	b2d2      	uxtb	r2, r2
 800917a:	735a      	strb	r2, [r3, #13]
 800917c:	e022      	b.n	80091c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009182:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009186:	d005      	beq.n	8009194 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918c:	3301      	adds	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <tcp_input+0x6e2>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	6918      	ldr	r0, [r3, #16]
 80091a8:	2300      	movs	r3, #0
 80091aa:	2200      	movs	r2, #0
 80091ac:	69b9      	ldr	r1, [r7, #24]
 80091ae:	47a0      	blx	r4
 80091b0:	4603      	mov	r3, r0
 80091b2:	74fb      	strb	r3, [r7, #19]
 80091b4:	e001      	b.n	80091ba <tcp_input+0x6e6>
 80091b6:	2300      	movs	r3, #0
 80091b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80091ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091be:	f113 0f0d 	cmn.w	r3, #13
 80091c2:	d016      	beq.n	80091f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <tcp_input+0x740>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f000 f88e 	bl	80092ec <tcp_input_delayed_close>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d128      	bne.n	8009228 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f002 face 	bl	800b778 <tcp_output>
 80091dc:	e025      	b.n	800922a <tcp_input+0x756>
        goto aborted;
 80091de:	bf00      	nop
 80091e0:	e023      	b.n	800922a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80091e2:	bf00      	nop
 80091e4:	e021      	b.n	800922a <tcp_input+0x756>
              goto aborted;
 80091e6:	bf00      	nop
 80091e8:	e01f      	b.n	800922a <tcp_input+0x756>
          goto aborted;
 80091ea:	bf00      	nop
 80091ec:	e01d      	b.n	800922a <tcp_input+0x756>
            goto aborted;
 80091ee:	bf00      	nop
 80091f0:	e01b      	b.n	800922a <tcp_input+0x756>
              goto aborted;
 80091f2:	bf00      	nop
 80091f4:	e019      	b.n	800922a <tcp_input+0x756>
 80091f6:	bf00      	nop
 80091f8:	20008a9c 	.word	0x20008a9c
 80091fc:	20008ab0 	.word	0x20008ab0
 8009200:	20008ad0 	.word	0x20008ad0
 8009204:	20008acd 	.word	0x20008acd
 8009208:	20008ac8 	.word	0x20008ac8
 800920c:	20008acc 	.word	0x20008acc
 8009210:	20008aca 	.word	0x20008aca
 8009214:	20008ad4 	.word	0x20008ad4
 8009218:	20008a90 	.word	0x20008a90
 800921c:	0801268c 	.word	0x0801268c
 8009220:	08012840 	.word	0x08012840
 8009224:	080126d8 	.word	0x080126d8
          goto aborted;
 8009228:	bf00      	nop
    tcp_input_pcb = NULL;
 800922a:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <tcp_input+0x7f4>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009230:	4b26      	ldr	r3, [pc, #152]	; (80092cc <tcp_input+0x7f8>)
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009236:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <tcp_input+0x7fc>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d03f      	beq.n	80092be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800923e:	4b24      	ldr	r3, [pc, #144]	; (80092d0 <tcp_input+0x7fc>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd fd7c 	bl	8006d40 <pbuf_free>
      inseg.p = NULL;
 8009248:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <tcp_input+0x7fc>)
 800924a:	2200      	movs	r2, #0
 800924c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800924e:	e036      	b.n	80092be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <tcp_input+0x800>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	899b      	ldrh	r3, [r3, #12]
 8009256:	b29b      	uxth	r3, r3
 8009258:	4618      	mov	r0, r3
 800925a:	f7fc fa59 	bl	8005710 <lwip_htons>
 800925e:	4603      	mov	r3, r0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d118      	bne.n	800929c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800926a:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <tcp_input+0x804>)
 800926c:	6819      	ldr	r1, [r3, #0]
 800926e:	4b1b      	ldr	r3, [pc, #108]	; (80092dc <tcp_input+0x808>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <tcp_input+0x80c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <tcp_input+0x800>)
 800927c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800927e:	885b      	ldrh	r3, [r3, #2]
 8009280:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009282:	4a14      	ldr	r2, [pc, #80]	; (80092d4 <tcp_input+0x800>)
 8009284:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009286:	8812      	ldrh	r2, [r2, #0]
 8009288:	b292      	uxth	r2, r2
 800928a:	9202      	str	r2, [sp, #8]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <tcp_input+0x810>)
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <tcp_input+0x814>)
 8009294:	4602      	mov	r2, r0
 8009296:	2000      	movs	r0, #0
 8009298:	f003 f82e 	bl	800c2f8 <tcp_rst>
    pbuf_free(p);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7fd fd4f 	bl	8006d40 <pbuf_free>
  return;
 80092a2:	e00c      	b.n	80092be <tcp_input+0x7ea>
    goto dropped;
 80092a4:	bf00      	nop
 80092a6:	e006      	b.n	80092b6 <tcp_input+0x7e2>
    goto dropped;
 80092a8:	bf00      	nop
 80092aa:	e004      	b.n	80092b6 <tcp_input+0x7e2>
    goto dropped;
 80092ac:	bf00      	nop
 80092ae:	e002      	b.n	80092b6 <tcp_input+0x7e2>
      goto dropped;
 80092b0:	bf00      	nop
 80092b2:	e000      	b.n	80092b6 <tcp_input+0x7e2>
      goto dropped;
 80092b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fd fd42 	bl	8006d40 <pbuf_free>
 80092bc:	e000      	b.n	80092c0 <tcp_input+0x7ec>
  return;
 80092be:	bf00      	nop
}
 80092c0:	3724      	adds	r7, #36	; 0x24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd90      	pop	{r4, r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20008ad4 	.word	0x20008ad4
 80092cc:	20008ad0 	.word	0x20008ad0
 80092d0:	20008a9c 	.word	0x20008a9c
 80092d4:	20008ab0 	.word	0x20008ab0
 80092d8:	20008ac4 	.word	0x20008ac4
 80092dc:	20008aca 	.word	0x20008aca
 80092e0:	20008ac0 	.word	0x20008ac0
 80092e4:	20003324 	.word	0x20003324
 80092e8:	20003328 	.word	0x20003328

080092ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <tcp_input_delayed_close+0x1c>
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <tcp_input_delayed_close+0x6c>)
 80092fc:	f240 225a 	movw	r2, #602	; 0x25a
 8009300:	4916      	ldr	r1, [pc, #88]	; (800935c <tcp_input_delayed_close+0x70>)
 8009302:	4817      	ldr	r0, [pc, #92]	; (8009360 <tcp_input_delayed_close+0x74>)
 8009304:	f006 fd62 	bl	800fdcc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009308:	4b16      	ldr	r3, [pc, #88]	; (8009364 <tcp_input_delayed_close+0x78>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01c      	beq.n	800934e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8b5b      	ldrh	r3, [r3, #26]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10d      	bne.n	800933c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009326:	2b00      	cmp	r3, #0
 8009328:	d008      	beq.n	800933c <tcp_input_delayed_close+0x50>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6912      	ldr	r2, [r2, #16]
 8009334:	f06f 010e 	mvn.w	r1, #14
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	480a      	ldr	r0, [pc, #40]	; (8009368 <tcp_input_delayed_close+0x7c>)
 8009340:	f7ff fa50 	bl	80087e4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fe f83d 	bl	80073c4 <tcp_free>
    return 1;
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	0801268c 	.word	0x0801268c
 800935c:	0801285c 	.word	0x0801285c
 8009360:	080126d8 	.word	0x080126d8
 8009364:	20008acd 	.word	0x20008acd
 8009368:	20008a90 	.word	0x20008a90

0800936c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800936c:	b590      	push	{r4, r7, lr}
 800936e:	b08b      	sub	sp, #44	; 0x2c
 8009370:	af04      	add	r7, sp, #16
 8009372:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009374:	4b6f      	ldr	r3, [pc, #444]	; (8009534 <tcp_listen_input+0x1c8>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 80d2 	bne.w	8009526 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d106      	bne.n	8009396 <tcp_listen_input+0x2a>
 8009388:	4b6b      	ldr	r3, [pc, #428]	; (8009538 <tcp_listen_input+0x1cc>)
 800938a:	f240 2281 	movw	r2, #641	; 0x281
 800938e:	496b      	ldr	r1, [pc, #428]	; (800953c <tcp_listen_input+0x1d0>)
 8009390:	486b      	ldr	r0, [pc, #428]	; (8009540 <tcp_listen_input+0x1d4>)
 8009392:	f006 fd1b 	bl	800fdcc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009396:	4b67      	ldr	r3, [pc, #412]	; (8009534 <tcp_listen_input+0x1c8>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0310 	and.w	r3, r3, #16
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d019      	beq.n	80093d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093a2:	4b68      	ldr	r3, [pc, #416]	; (8009544 <tcp_listen_input+0x1d8>)
 80093a4:	6819      	ldr	r1, [r3, #0]
 80093a6:	4b68      	ldr	r3, [pc, #416]	; (8009548 <tcp_listen_input+0x1dc>)
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	4b67      	ldr	r3, [pc, #412]	; (800954c <tcp_listen_input+0x1e0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b2:	4b67      	ldr	r3, [pc, #412]	; (8009550 <tcp_listen_input+0x1e4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b6:	885b      	ldrh	r3, [r3, #2]
 80093b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093ba:	4a65      	ldr	r2, [pc, #404]	; (8009550 <tcp_listen_input+0x1e4>)
 80093bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093be:	8812      	ldrh	r2, [r2, #0]
 80093c0:	b292      	uxth	r2, r2
 80093c2:	9202      	str	r2, [sp, #8]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	4b63      	ldr	r3, [pc, #396]	; (8009554 <tcp_listen_input+0x1e8>)
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4b63      	ldr	r3, [pc, #396]	; (8009558 <tcp_listen_input+0x1ec>)
 80093cc:	4602      	mov	r2, r0
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f002 ff92 	bl	800c2f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80093d4:	e0a9      	b.n	800952a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80093d6:	4b57      	ldr	r3, [pc, #348]	; (8009534 <tcp_listen_input+0x1c8>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a3 	beq.w	800952a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7d5b      	ldrb	r3, [r3, #21]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff f927 	bl	800863c <tcp_alloc>
 80093ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d111      	bne.n	800941a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <tcp_listen_input+0xa8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6910      	ldr	r0, [r2, #16]
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	2100      	movs	r1, #0
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]
      return;
 8009412:	e08b      	b.n	800952c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009414:	23f0      	movs	r3, #240	; 0xf0
 8009416:	73bb      	strb	r3, [r7, #14]
      return;
 8009418:	e088      	b.n	800952c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800941a:	4b50      	ldr	r3, [pc, #320]	; (800955c <tcp_listen_input+0x1f0>)
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009422:	4b4e      	ldr	r3, [pc, #312]	; (800955c <tcp_listen_input+0x1f0>)
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	8ada      	ldrh	r2, [r3, #22]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009432:	4b47      	ldr	r3, [pc, #284]	; (8009550 <tcp_listen_input+0x1e4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29a      	uxth	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2203      	movs	r2, #3
 8009442:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009444:	4b41      	ldr	r3, [pc, #260]	; (800954c <tcp_listen_input+0x1e0>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	f7ff fa58 	bl	800890c <tcp_next_iss>
 800945c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009476:	4b35      	ldr	r3, [pc, #212]	; (800954c <tcp_listen_input+0x1e0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	1e5a      	subs	r2, r3, #1
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691a      	ldr	r2, [r3, #16]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	7a5b      	ldrb	r3, [r3, #9]
 8009492:	f003 030c 	and.w	r3, r3, #12
 8009496:	b2da      	uxtb	r2, r3
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7a1a      	ldrb	r2, [r3, #8]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80094a4:	4b2e      	ldr	r3, [pc, #184]	; (8009560 <tcp_listen_input+0x1f4>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	60da      	str	r2, [r3, #12]
 80094ac:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <tcp_listen_input+0x1f4>)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	f003 f8e3 	bl	800c67c <tcp_timer_needed>
 80094b6:	4b2b      	ldr	r3, [pc, #172]	; (8009564 <tcp_listen_input+0x1f8>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80094bc:	6978      	ldr	r0, [r7, #20]
 80094be:	f001 fd8f 	bl	800afe0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80094c2:	4b23      	ldr	r3, [pc, #140]	; (8009550 <tcp_listen_input+0x1e4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	89db      	ldrh	r3, [r3, #14]
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4618      	mov	r0, r3
 80094e6:	f005 fa21 	bl	800e92c <ip4_route>
 80094ea:	4601      	mov	r1, r0
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3304      	adds	r3, #4
 80094f0:	461a      	mov	r2, r3
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff fa30 	bl	8008958 <tcp_eff_send_mss_netif>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461a      	mov	r2, r3
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009500:	2112      	movs	r1, #18
 8009502:	6978      	ldr	r0, [r7, #20]
 8009504:	f002 f84a 	bl	800b59c <tcp_enqueue_flags>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800950c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009514:	2100      	movs	r1, #0
 8009516:	6978      	ldr	r0, [r7, #20]
 8009518:	f7fe f97e 	bl	8007818 <tcp_abandon>
      return;
 800951c:	e006      	b.n	800952c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800951e:	6978      	ldr	r0, [r7, #20]
 8009520:	f002 f92a 	bl	800b778 <tcp_output>
  return;
 8009524:	e001      	b.n	800952a <tcp_listen_input+0x1be>
    return;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <tcp_listen_input+0x1c0>
  return;
 800952a:	bf00      	nop
}
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}
 8009532:	bf00      	nop
 8009534:	20008acc 	.word	0x20008acc
 8009538:	0801268c 	.word	0x0801268c
 800953c:	08012884 	.word	0x08012884
 8009540:	080126d8 	.word	0x080126d8
 8009544:	20008ac4 	.word	0x20008ac4
 8009548:	20008aca 	.word	0x20008aca
 800954c:	20008ac0 	.word	0x20008ac0
 8009550:	20008ab0 	.word	0x20008ab0
 8009554:	20003324 	.word	0x20003324
 8009558:	20003328 	.word	0x20003328
 800955c:	20003314 	.word	0x20003314
 8009560:	20008a90 	.word	0x20008a90
 8009564:	20008a98 	.word	0x20008a98

08009568 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af04      	add	r7, sp, #16
 800956e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009570:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <tcp_timewait_input+0xc8>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d153      	bne.n	8009624 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <tcp_timewait_input+0x28>
 8009582:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <tcp_timewait_input+0xcc>)
 8009584:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009588:	492b      	ldr	r1, [pc, #172]	; (8009638 <tcp_timewait_input+0xd0>)
 800958a:	482c      	ldr	r0, [pc, #176]	; (800963c <tcp_timewait_input+0xd4>)
 800958c:	f006 fc1e 	bl	800fdcc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009590:	4b27      	ldr	r3, [pc, #156]	; (8009630 <tcp_timewait_input+0xc8>)
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02a      	beq.n	80095f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800959c:	4b28      	ldr	r3, [pc, #160]	; (8009640 <tcp_timewait_input+0xd8>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	db2d      	blt.n	8009606 <tcp_timewait_input+0x9e>
 80095aa:	4b25      	ldr	r3, [pc, #148]	; (8009640 <tcp_timewait_input+0xd8>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095b6:	440b      	add	r3, r1
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dc23      	bgt.n	8009606 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095be:	4b21      	ldr	r3, [pc, #132]	; (8009644 <tcp_timewait_input+0xdc>)
 80095c0:	6819      	ldr	r1, [r3, #0]
 80095c2:	4b21      	ldr	r3, [pc, #132]	; (8009648 <tcp_timewait_input+0xe0>)
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <tcp_timewait_input+0xd8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095ce:	4b1f      	ldr	r3, [pc, #124]	; (800964c <tcp_timewait_input+0xe4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095d6:	4a1d      	ldr	r2, [pc, #116]	; (800964c <tcp_timewait_input+0xe4>)
 80095d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	b292      	uxth	r2, r2
 80095de:	9202      	str	r2, [sp, #8]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <tcp_timewait_input+0xe8>)
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <tcp_timewait_input+0xec>)
 80095e8:	4602      	mov	r2, r0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f002 fe84 	bl	800c2f8 <tcp_rst>
      return;
 80095f0:	e01b      	b.n	800962a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <tcp_timewait_input+0xc8>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80095fe:	4b16      	ldr	r3, [pc, #88]	; (8009658 <tcp_timewait_input+0xf0>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <tcp_timewait_input+0xe0>)
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00c      	beq.n	8009628 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	8b5b      	ldrh	r3, [r3, #26]
 8009612:	f043 0302 	orr.w	r3, r3, #2
 8009616:	b29a      	uxth	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 f8ab 	bl	800b778 <tcp_output>
  }
  return;
 8009622:	e001      	b.n	8009628 <tcp_timewait_input+0xc0>
    return;
 8009624:	bf00      	nop
 8009626:	e000      	b.n	800962a <tcp_timewait_input+0xc2>
  return;
 8009628:	bf00      	nop
}
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20008acc 	.word	0x20008acc
 8009634:	0801268c 	.word	0x0801268c
 8009638:	080128a4 	.word	0x080128a4
 800963c:	080126d8 	.word	0x080126d8
 8009640:	20008ac0 	.word	0x20008ac0
 8009644:	20008ac4 	.word	0x20008ac4
 8009648:	20008aca 	.word	0x20008aca
 800964c:	20008ab0 	.word	0x20008ab0
 8009650:	20003324 	.word	0x20003324
 8009654:	20003328 	.word	0x20003328
 8009658:	20008a84 	.word	0x20008a84

0800965c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b08d      	sub	sp, #52	; 0x34
 8009660:	af04      	add	r7, sp, #16
 8009662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d106      	bne.n	8009680 <tcp_process+0x24>
 8009672:	4b9d      	ldr	r3, [pc, #628]	; (80098e8 <tcp_process+0x28c>)
 8009674:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009678:	499c      	ldr	r1, [pc, #624]	; (80098ec <tcp_process+0x290>)
 800967a:	489d      	ldr	r0, [pc, #628]	; (80098f0 <tcp_process+0x294>)
 800967c:	f006 fba6 	bl	800fdcc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009680:	4b9c      	ldr	r3, [pc, #624]	; (80098f4 <tcp_process+0x298>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	d04e      	beq.n	800972a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7d1b      	ldrb	r3, [r3, #20]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d108      	bne.n	80096a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009698:	4b97      	ldr	r3, [pc, #604]	; (80098f8 <tcp_process+0x29c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d123      	bne.n	80096e8 <tcp_process+0x8c>
        acceptable = 1;
 80096a0:	2301      	movs	r3, #1
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e020      	b.n	80096e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096aa:	4b94      	ldr	r3, [pc, #592]	; (80098fc <tcp_process+0x2a0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d102      	bne.n	80096b8 <tcp_process+0x5c>
        acceptable = 1;
 80096b2:	2301      	movs	r3, #1
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e017      	b.n	80096e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80096b8:	4b90      	ldr	r3, [pc, #576]	; (80098fc <tcp_process+0x2a0>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	db10      	blt.n	80096e8 <tcp_process+0x8c>
 80096c6:	4b8d      	ldr	r3, [pc, #564]	; (80098fc <tcp_process+0x2a0>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80096d2:	440b      	add	r3, r1
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dc06      	bgt.n	80096e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	8b5b      	ldrh	r3, [r3, #26]
 80096de:	f043 0302 	orr.w	r3, r3, #2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80096e8:	7ffb      	ldrb	r3, [r7, #31]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01b      	beq.n	8009726 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7d1b      	ldrb	r3, [r3, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <tcp_process+0xa8>
 80096f6:	4b7c      	ldr	r3, [pc, #496]	; (80098e8 <tcp_process+0x28c>)
 80096f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80096fc:	4980      	ldr	r1, [pc, #512]	; (8009900 <tcp_process+0x2a4>)
 80096fe:	487c      	ldr	r0, [pc, #496]	; (80098f0 <tcp_process+0x294>)
 8009700:	f006 fb64 	bl	800fdcc <iprintf>
      recv_flags |= TF_RESET;
 8009704:	4b7f      	ldr	r3, [pc, #508]	; (8009904 <tcp_process+0x2a8>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	f043 0308 	orr.w	r3, r3, #8
 800970c:	b2da      	uxtb	r2, r3
 800970e:	4b7d      	ldr	r3, [pc, #500]	; (8009904 <tcp_process+0x2a8>)
 8009710:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	8b5b      	ldrh	r3, [r3, #26]
 8009716:	f023 0301 	bic.w	r3, r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009720:	f06f 030d 	mvn.w	r3, #13
 8009724:	e37a      	b.n	8009e1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	e378      	b.n	8009e1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800972a:	4b72      	ldr	r3, [pc, #456]	; (80098f4 <tcp_process+0x298>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d010      	beq.n	8009758 <tcp_process+0xfc>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d00c      	beq.n	8009758 <tcp_process+0xfc>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7d1b      	ldrb	r3, [r3, #20]
 8009742:	2b03      	cmp	r3, #3
 8009744:	d008      	beq.n	8009758 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8b5b      	ldrh	r3, [r3, #26]
 800974a:	f043 0302 	orr.w	r3, r3, #2
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e361      	b.n	8009e1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	8b5b      	ldrh	r3, [r3, #26]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009764:	4b68      	ldr	r3, [pc, #416]	; (8009908 <tcp_process+0x2ac>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fc2f 	bl	800afe0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7d1b      	ldrb	r3, [r3, #20]
 8009786:	3b02      	subs	r3, #2
 8009788:	2b07      	cmp	r3, #7
 800978a:	f200 8337 	bhi.w	8009dfc <tcp_process+0x7a0>
 800978e:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <tcp_process+0x138>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	080097b5 	.word	0x080097b5
 8009798:	080099e5 	.word	0x080099e5
 800979c:	08009b5d 	.word	0x08009b5d
 80097a0:	08009b87 	.word	0x08009b87
 80097a4:	08009cab 	.word	0x08009cab
 80097a8:	08009b5d 	.word	0x08009b5d
 80097ac:	08009d37 	.word	0x08009d37
 80097b0:	08009dc7 	.word	0x08009dc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80097b4:	4b4f      	ldr	r3, [pc, #316]	; (80098f4 <tcp_process+0x298>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 80e4 	beq.w	800998a <tcp_process+0x32e>
 80097c2:	4b4c      	ldr	r3, [pc, #304]	; (80098f4 <tcp_process+0x298>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80dd 	beq.w	800998a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	4b48      	ldr	r3, [pc, #288]	; (80098f8 <tcp_process+0x29c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	f040 80d5 	bne.w	800998a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80097e0:	4b46      	ldr	r3, [pc, #280]	; (80098fc <tcp_process+0x2a0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80097f2:	4b41      	ldr	r3, [pc, #260]	; (80098f8 <tcp_process+0x29c>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80097fa:	4b44      	ldr	r3, [pc, #272]	; (800990c <tcp_process+0x2b0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	89db      	ldrh	r3, [r3, #14]
 8009800:	b29a      	uxth	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009814:	4b39      	ldr	r3, [pc, #228]	; (80098fc <tcp_process+0x2a0>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	1e5a      	subs	r2, r3, #1
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2204      	movs	r2, #4
 8009822:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3304      	adds	r3, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f005 f87d 	bl	800e92c <ip4_route>
 8009832:	4601      	mov	r1, r0
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	461a      	mov	r2, r3
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff f88c 	bl	8008958 <tcp_eff_send_mss_netif>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800984c:	009a      	lsls	r2, r3, #2
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	f241 111c 	movw	r1, #4380	; 0x111c
 8009858:	428b      	cmp	r3, r1
 800985a:	bf38      	it	cc
 800985c:	460b      	movcc	r3, r1
 800985e:	429a      	cmp	r2, r3
 8009860:	d204      	bcs.n	800986c <tcp_process+0x210>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	b29b      	uxth	r3, r3
 800986a:	e00d      	b.n	8009888 <tcp_process+0x22c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	f241 121c 	movw	r2, #4380	; 0x111c
 8009876:	4293      	cmp	r3, r2
 8009878:	d904      	bls.n	8009884 <tcp_process+0x228>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	b29b      	uxth	r3, r3
 8009882:	e001      	b.n	8009888 <tcp_process+0x22c>
 8009884:	f241 131c 	movw	r3, #4380	; 0x111c
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009894:	2b00      	cmp	r3, #0
 8009896:	d106      	bne.n	80098a6 <tcp_process+0x24a>
 8009898:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <tcp_process+0x28c>)
 800989a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800989e:	491c      	ldr	r1, [pc, #112]	; (8009910 <tcp_process+0x2b4>)
 80098a0:	4813      	ldr	r0, [pc, #76]	; (80098f0 <tcp_process+0x294>)
 80098a2:	f006 fa93 	bl	800fdcc <iprintf>
        --pcb->snd_queuelen;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ba:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d12a      	bne.n	8009918 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c6:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <tcp_process+0x280>
 80098ce:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <tcp_process+0x28c>)
 80098d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80098d4:	490f      	ldr	r1, [pc, #60]	; (8009914 <tcp_process+0x2b8>)
 80098d6:	4806      	ldr	r0, [pc, #24]	; (80098f0 <tcp_process+0x294>)
 80098d8:	f006 fa78 	bl	800fdcc <iprintf>
          pcb->unsent = rseg->next;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80098e4:	e01c      	b.n	8009920 <tcp_process+0x2c4>
 80098e6:	bf00      	nop
 80098e8:	0801268c 	.word	0x0801268c
 80098ec:	080128c4 	.word	0x080128c4
 80098f0:	080126d8 	.word	0x080126d8
 80098f4:	20008acc 	.word	0x20008acc
 80098f8:	20008ac4 	.word	0x20008ac4
 80098fc:	20008ac0 	.word	0x20008ac0
 8009900:	080128e0 	.word	0x080128e0
 8009904:	20008acd 	.word	0x20008acd
 8009908:	20008a84 	.word	0x20008a84
 800990c:	20008ab0 	.word	0x20008ab0
 8009910:	08012900 	.word	0x08012900
 8009914:	08012918 	.word	0x08012918
        } else {
          pcb->unacked = rseg->next;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009920:	6978      	ldr	r0, [r7, #20]
 8009922:	f7fe fd22 	bl	800836a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992a:	2b00      	cmp	r3, #0
 800992c:	d104      	bne.n	8009938 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009934:	861a      	strh	r2, [r3, #48]	; 0x30
 8009936:	e006      	b.n	8009946 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <tcp_process+0x30a>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6910      	ldr	r0, [r2, #16]
 800995a:	2200      	movs	r2, #0
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4798      	blx	r3
 8009960:	4603      	mov	r3, r0
 8009962:	77bb      	strb	r3, [r7, #30]
 8009964:	e001      	b.n	800996a <tcp_process+0x30e>
 8009966:	2300      	movs	r3, #0
 8009968:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800996a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800996e:	f113 0f0d 	cmn.w	r3, #13
 8009972:	d102      	bne.n	800997a <tcp_process+0x31e>
          return ERR_ABRT;
 8009974:	f06f 030c 	mvn.w	r3, #12
 8009978:	e250      	b.n	8009e1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	8b5b      	ldrh	r3, [r3, #26]
 800997e:	f043 0302 	orr.w	r3, r3, #2
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009988:	e23a      	b.n	8009e00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800998a:	4b98      	ldr	r3, [pc, #608]	; (8009bec <tcp_process+0x590>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8234 	beq.w	8009e00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009998:	4b95      	ldr	r3, [pc, #596]	; (8009bf0 <tcp_process+0x594>)
 800999a:	6819      	ldr	r1, [r3, #0]
 800999c:	4b95      	ldr	r3, [pc, #596]	; (8009bf4 <tcp_process+0x598>)
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b95      	ldr	r3, [pc, #596]	; (8009bf8 <tcp_process+0x59c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099a8:	4b94      	ldr	r3, [pc, #592]	; (8009bfc <tcp_process+0x5a0>)
 80099aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099b0:	4a92      	ldr	r2, [pc, #584]	; (8009bfc <tcp_process+0x5a0>)
 80099b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099b4:	8812      	ldrh	r2, [r2, #0]
 80099b6:	b292      	uxth	r2, r2
 80099b8:	9202      	str	r2, [sp, #8]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	4b90      	ldr	r3, [pc, #576]	; (8009c00 <tcp_process+0x5a4>)
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4b90      	ldr	r3, [pc, #576]	; (8009c04 <tcp_process+0x5a8>)
 80099c2:	4602      	mov	r2, r0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f002 fc97 	bl	800c2f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	f200 8215 	bhi.w	8009e00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f002 fa61 	bl	800bea4 <tcp_rexmit_rto>
      break;
 80099e2:	e20d      	b.n	8009e00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80099e4:	4b81      	ldr	r3, [pc, #516]	; (8009bec <tcp_process+0x590>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 80a1 	beq.w	8009b34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099f2:	4b7f      	ldr	r3, [pc, #508]	; (8009bf0 <tcp_process+0x594>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db7e      	blt.n	8009b00 <tcp_process+0x4a4>
 8009a02:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <tcp_process+0x594>)
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dc77      	bgt.n	8009b00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2204      	movs	r2, #4
 8009a14:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009a1e:	23fa      	movs	r3, #250	; 0xfa
 8009a20:	77bb      	strb	r3, [r7, #30]
 8009a22:	e01d      	b.n	8009a60 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <tcp_process+0x3e0>
 8009a2e:	4b76      	ldr	r3, [pc, #472]	; (8009c08 <tcp_process+0x5ac>)
 8009a30:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009a34:	4975      	ldr	r1, [pc, #468]	; (8009c0c <tcp_process+0x5b0>)
 8009a36:	4876      	ldr	r0, [pc, #472]	; (8009c10 <tcp_process+0x5b4>)
 8009a38:	f006 f9c8 	bl	800fdcc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <tcp_process+0x400>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6910      	ldr	r0, [r2, #16]
 8009a50:	2200      	movs	r2, #0
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	4798      	blx	r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	77bb      	strb	r3, [r7, #30]
 8009a5a:	e001      	b.n	8009a60 <tcp_process+0x404>
 8009a5c:	23f0      	movs	r3, #240	; 0xf0
 8009a5e:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8009a60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009a68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009a6c:	f113 0f0d 	cmn.w	r3, #13
 8009a70:	d002      	beq.n	8009a78 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7fd ff8e 	bl	8007994 <tcp_abort>
            }
            return ERR_ABRT;
 8009a78:	f06f 030c 	mvn.w	r3, #12
 8009a7c:	e1ce      	b.n	8009e1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fae0 	bl	800a044 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009a84:	4b63      	ldr	r3, [pc, #396]	; (8009c14 <tcp_process+0x5b8>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <tcp_process+0x43c>
            recv_acked--;
 8009a8c:	4b61      	ldr	r3, [pc, #388]	; (8009c14 <tcp_process+0x5b8>)
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	4b5f      	ldr	r3, [pc, #380]	; (8009c14 <tcp_process+0x5b8>)
 8009a96:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a9c:	009a      	lsls	r2, r3, #2
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	f241 111c 	movw	r1, #4380	; 0x111c
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	bf38      	it	cc
 8009aac:	460b      	movcc	r3, r1
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d204      	bcs.n	8009abc <tcp_process+0x460>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	e00d      	b.n	8009ad8 <tcp_process+0x47c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	f241 121c 	movw	r2, #4380	; 0x111c
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d904      	bls.n	8009ad4 <tcp_process+0x478>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	e001      	b.n	8009ad8 <tcp_process+0x47c>
 8009ad4:	f241 131c 	movw	r3, #4380	; 0x111c
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009ade:	4b4e      	ldr	r3, [pc, #312]	; (8009c18 <tcp_process+0x5bc>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d037      	beq.n	8009b5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	8b5b      	ldrh	r3, [r3, #26]
 8009aee:	f043 0302 	orr.w	r3, r3, #2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2207      	movs	r2, #7
 8009afc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009afe:	e02c      	b.n	8009b5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b00:	4b3b      	ldr	r3, [pc, #236]	; (8009bf0 <tcp_process+0x594>)
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	4b3b      	ldr	r3, [pc, #236]	; (8009bf4 <tcp_process+0x598>)
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b3b      	ldr	r3, [pc, #236]	; (8009bf8 <tcp_process+0x59c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b10:	4b3a      	ldr	r3, [pc, #232]	; (8009bfc <tcp_process+0x5a0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b14:	885b      	ldrh	r3, [r3, #2]
 8009b16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b18:	4a38      	ldr	r2, [pc, #224]	; (8009bfc <tcp_process+0x5a0>)
 8009b1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b1c:	8812      	ldrh	r2, [r2, #0]
 8009b1e:	b292      	uxth	r2, r2
 8009b20:	9202      	str	r2, [sp, #8]
 8009b22:	9301      	str	r3, [sp, #4]
 8009b24:	4b36      	ldr	r3, [pc, #216]	; (8009c00 <tcp_process+0x5a4>)
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <tcp_process+0x5a8>)
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f002 fbe3 	bl	800c2f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009b32:	e167      	b.n	8009e04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009b34:	4b2d      	ldr	r3, [pc, #180]	; (8009bec <tcp_process+0x590>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 8161 	beq.w	8009e04 <tcp_process+0x7a8>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	1e5a      	subs	r2, r3, #1
 8009b48:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <tcp_process+0x59c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	f040 8159 	bne.w	8009e04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f002 f9c8 	bl	800bee8 <tcp_rexmit>
      break;
 8009b58:	e154      	b.n	8009e04 <tcp_process+0x7a8>
 8009b5a:	e153      	b.n	8009e04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa71 	bl	800a044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009b62:	4b2d      	ldr	r3, [pc, #180]	; (8009c18 <tcp_process+0x5bc>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 814c 	beq.w	8009e08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	8b5b      	ldrh	r3, [r3, #26]
 8009b74:	f043 0302 	orr.w	r3, r3, #2
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2207      	movs	r2, #7
 8009b82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b84:	e140      	b.n	8009e08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa5c 	bl	800a044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009b8c:	4b22      	ldr	r3, [pc, #136]	; (8009c18 <tcp_process+0x5bc>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d071      	beq.n	8009c7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b98:	4b14      	ldr	r3, [pc, #80]	; (8009bec <tcp_process+0x590>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 0310 	and.w	r3, r3, #16
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d060      	beq.n	8009c66 <tcp_process+0x60a>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ba8:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <tcp_process+0x594>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d15a      	bne.n	8009c66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d156      	bne.n	8009c66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	8b5b      	ldrh	r3, [r3, #26]
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe fdbc 	bl	8008744 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009bcc:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <tcp_process+0x5c0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d105      	bne.n	8009be2 <tcp_process+0x586>
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <tcp_process+0x5c0>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	4a0f      	ldr	r2, [pc, #60]	; (8009c1c <tcp_process+0x5c0>)
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	e02e      	b.n	8009c40 <tcp_process+0x5e4>
 8009be2:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <tcp_process+0x5c0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	613b      	str	r3, [r7, #16]
 8009be8:	e027      	b.n	8009c3a <tcp_process+0x5de>
 8009bea:	bf00      	nop
 8009bec:	20008acc 	.word	0x20008acc
 8009bf0:	20008ac4 	.word	0x20008ac4
 8009bf4:	20008aca 	.word	0x20008aca
 8009bf8:	20008ac0 	.word	0x20008ac0
 8009bfc:	20008ab0 	.word	0x20008ab0
 8009c00:	20003324 	.word	0x20003324
 8009c04:	20003328 	.word	0x20003328
 8009c08:	0801268c 	.word	0x0801268c
 8009c0c:	0801292c 	.word	0x0801292c
 8009c10:	080126d8 	.word	0x080126d8
 8009c14:	20008ac8 	.word	0x20008ac8
 8009c18:	20008acd 	.word	0x20008acd
 8009c1c:	20008a90 	.word	0x20008a90
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d104      	bne.n	8009c34 <tcp_process+0x5d8>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	e005      	b.n	8009c40 <tcp_process+0x5e4>
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1ef      	bne.n	8009c20 <tcp_process+0x5c4>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	4b77      	ldr	r3, [pc, #476]	; (8009e24 <tcp_process+0x7c8>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	220a      	movs	r2, #10
 8009c50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009c52:	4b75      	ldr	r3, [pc, #468]	; (8009e28 <tcp_process+0x7cc>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	4a73      	ldr	r2, [pc, #460]	; (8009e28 <tcp_process+0x7cc>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	f002 fd0c 	bl	800c67c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009c64:	e0d2      	b.n	8009e0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8b5b      	ldrh	r3, [r3, #26]
 8009c6a:	f043 0302 	orr.w	r3, r3, #2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2208      	movs	r2, #8
 8009c78:	751a      	strb	r2, [r3, #20]
      break;
 8009c7a:	e0c7      	b.n	8009e0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c7c:	4b6b      	ldr	r3, [pc, #428]	; (8009e2c <tcp_process+0x7d0>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 80c1 	beq.w	8009e0c <tcp_process+0x7b0>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c8e:	4b68      	ldr	r3, [pc, #416]	; (8009e30 <tcp_process+0x7d4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	f040 80ba 	bne.w	8009e0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 80b5 	bne.w	8009e0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2206      	movs	r2, #6
 8009ca6:	751a      	strb	r2, [r3, #20]
      break;
 8009ca8:	e0b0      	b.n	8009e0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9ca 	bl	800a044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009cb0:	4b60      	ldr	r3, [pc, #384]	; (8009e34 <tcp_process+0x7d8>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a9 	beq.w	8009e10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	8b5b      	ldrh	r3, [r3, #26]
 8009cc2:	f043 0302 	orr.w	r3, r3, #2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7fe fd39 	bl	8008744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009cd2:	4b59      	ldr	r3, [pc, #356]	; (8009e38 <tcp_process+0x7dc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d105      	bne.n	8009ce8 <tcp_process+0x68c>
 8009cdc:	4b56      	ldr	r3, [pc, #344]	; (8009e38 <tcp_process+0x7dc>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a55      	ldr	r2, [pc, #340]	; (8009e38 <tcp_process+0x7dc>)
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e013      	b.n	8009d10 <tcp_process+0x6b4>
 8009ce8:	4b53      	ldr	r3, [pc, #332]	; (8009e38 <tcp_process+0x7dc>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	e00c      	b.n	8009d0a <tcp_process+0x6ae>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d104      	bne.n	8009d04 <tcp_process+0x6a8>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68da      	ldr	r2, [r3, #12]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	60da      	str	r2, [r3, #12]
 8009d02:	e005      	b.n	8009d10 <tcp_process+0x6b4>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1ef      	bne.n	8009cf0 <tcp_process+0x694>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	4b43      	ldr	r3, [pc, #268]	; (8009e24 <tcp_process+0x7c8>)
 8009d18:	2201      	movs	r2, #1
 8009d1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	220a      	movs	r2, #10
 8009d20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009d22:	4b41      	ldr	r3, [pc, #260]	; (8009e28 <tcp_process+0x7cc>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60da      	str	r2, [r3, #12]
 8009d2a:	4a3f      	ldr	r2, [pc, #252]	; (8009e28 <tcp_process+0x7cc>)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	f002 fca4 	bl	800c67c <tcp_timer_needed>
      }
      break;
 8009d34:	e06c      	b.n	8009e10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f984 	bl	800a044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d3c:	4b3b      	ldr	r3, [pc, #236]	; (8009e2c <tcp_process+0x7d0>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d065      	beq.n	8009e14 <tcp_process+0x7b8>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d4c:	4b38      	ldr	r3, [pc, #224]	; (8009e30 <tcp_process+0x7d4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d15f      	bne.n	8009e14 <tcp_process+0x7b8>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d15b      	bne.n	8009e14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe fcf1 	bl	8008744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d62:	4b35      	ldr	r3, [pc, #212]	; (8009e38 <tcp_process+0x7dc>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d105      	bne.n	8009d78 <tcp_process+0x71c>
 8009d6c:	4b32      	ldr	r3, [pc, #200]	; (8009e38 <tcp_process+0x7dc>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	4a31      	ldr	r2, [pc, #196]	; (8009e38 <tcp_process+0x7dc>)
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	e013      	b.n	8009da0 <tcp_process+0x744>
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <tcp_process+0x7dc>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	e00c      	b.n	8009d9a <tcp_process+0x73e>
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d104      	bne.n	8009d94 <tcp_process+0x738>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	60da      	str	r2, [r3, #12]
 8009d92:	e005      	b.n	8009da0 <tcp_process+0x744>
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1ef      	bne.n	8009d80 <tcp_process+0x724>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	4b1f      	ldr	r3, [pc, #124]	; (8009e24 <tcp_process+0x7c8>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	220a      	movs	r2, #10
 8009db0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009db2:	4b1d      	ldr	r3, [pc, #116]	; (8009e28 <tcp_process+0x7cc>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <tcp_process+0x7cc>)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	f002 fc5c 	bl	800c67c <tcp_timer_needed>
      }
      break;
 8009dc4:	e026      	b.n	8009e14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f93c 	bl	800a044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009dcc:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <tcp_process+0x7d0>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01f      	beq.n	8009e18 <tcp_process+0x7bc>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ddc:	4b14      	ldr	r3, [pc, #80]	; (8009e30 <tcp_process+0x7d4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d119      	bne.n	8009e18 <tcp_process+0x7bc>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d115      	bne.n	8009e18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009dec:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <tcp_process+0x7d8>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f043 0310 	orr.w	r3, r3, #16
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <tcp_process+0x7d8>)
 8009df8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009dfa:	e00d      	b.n	8009e18 <tcp_process+0x7bc>
    default:
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e00c      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e00:	bf00      	nop
 8009e02:	e00a      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e04:	bf00      	nop
 8009e06:	e008      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e08:	bf00      	nop
 8009e0a:	e006      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e0c:	bf00      	nop
 8009e0e:	e004      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e10:	bf00      	nop
 8009e12:	e002      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e14:	bf00      	nop
 8009e16:	e000      	b.n	8009e1a <tcp_process+0x7be>
      break;
 8009e18:	bf00      	nop
  }
  return ERR_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3724      	adds	r7, #36	; 0x24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd90      	pop	{r4, r7, pc}
 8009e24:	20008a98 	.word	0x20008a98
 8009e28:	20008a94 	.word	0x20008a94
 8009e2c:	20008acc 	.word	0x20008acc
 8009e30:	20008ac4 	.word	0x20008ac4
 8009e34:	20008acd 	.word	0x20008acd
 8009e38:	20008a90 	.word	0x20008a90

08009e3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <tcp_oos_insert_segment+0x1e>
 8009e4c:	4b3b      	ldr	r3, [pc, #236]	; (8009f3c <tcp_oos_insert_segment+0x100>)
 8009e4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009e52:	493b      	ldr	r1, [pc, #236]	; (8009f40 <tcp_oos_insert_segment+0x104>)
 8009e54:	483b      	ldr	r0, [pc, #236]	; (8009f44 <tcp_oos_insert_segment+0x108>)
 8009e56:	f005 ffb9 	bl	800fdcc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	899b      	ldrh	r3, [r3, #12]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fb fc54 	bl	8005710 <lwip_htons>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d028      	beq.n	8009ec6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009e74:	6838      	ldr	r0, [r7, #0]
 8009e76:	f7fe fa63 	bl	8008340 <tcp_segs_free>
    next = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	603b      	str	r3, [r7, #0]
 8009e7e:	e056      	b.n	8009f2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	899b      	ldrh	r3, [r3, #12]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fb fc41 	bl	8005710 <lwip_htons>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00d      	beq.n	8009eb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	899b      	ldrh	r3, [r3, #12]
 8009ea0:	b29c      	uxth	r4, r3
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	f7fb fc34 	bl	8005710 <lwip_htons>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	4322      	orrs	r2, r4
 8009eb2:	b292      	uxth	r2, r2
 8009eb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7fe fa52 	bl	800836a <tcp_seg_free>
    while (next &&
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00e      	beq.n	8009eea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	891b      	ldrh	r3, [r3, #8]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <tcp_oos_insert_segment+0x10c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	441a      	add	r2, r3
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	8909      	ldrh	r1, [r1, #8]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	daca      	bge.n	8009e80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01e      	beq.n	8009f2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	891b      	ldrh	r3, [r3, #8]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <tcp_oos_insert_segment+0x10c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	441a      	add	r2, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd12      	ble.n	8009f2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <tcp_oos_insert_segment+0x10c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	891b      	ldrh	r3, [r3, #8]
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fc fd83 	bl	8006a34 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd90      	pop	{r4, r7, pc}
 8009f3c:	0801268c 	.word	0x0801268c
 8009f40:	0801294c 	.word	0x0801294c
 8009f44:	080126d8 	.word	0x080126d8
 8009f48:	20008ac0 	.word	0x20008ac0

08009f4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009f5a:	e03e      	b.n	8009fda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fc ff70 	bl	8006e50 <pbuf_clen>
 8009f70:	4603      	mov	r3, r0
 8009f72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f7a:	8a7a      	ldrh	r2, [r7, #18]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d906      	bls.n	8009f8e <tcp_free_acked_segments+0x42>
 8009f80:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <tcp_free_acked_segments+0xe0>)
 8009f82:	f240 4257 	movw	r2, #1111	; 0x457
 8009f86:	492a      	ldr	r1, [pc, #168]	; (800a030 <tcp_free_acked_segments+0xe4>)
 8009f88:	482a      	ldr	r0, [pc, #168]	; (800a034 <tcp_free_acked_segments+0xe8>)
 8009f8a:	f005 ff1f 	bl	800fdcc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009f94:	8a7b      	ldrh	r3, [r7, #18]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	891a      	ldrh	r2, [r3, #8]
 8009fa4:	4b24      	ldr	r3, [pc, #144]	; (800a038 <tcp_free_acked_segments+0xec>)
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	4b22      	ldr	r3, [pc, #136]	; (800a038 <tcp_free_acked_segments+0xec>)
 8009fae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009fb0:	6978      	ldr	r0, [r7, #20]
 8009fb2:	f7fe f9da 	bl	800836a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00c      	beq.n	8009fda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d109      	bne.n	8009fda <tcp_free_acked_segments+0x8e>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d106      	bne.n	8009fda <tcp_free_acked_segments+0x8e>
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <tcp_free_acked_segments+0xe0>)
 8009fce:	f240 4261 	movw	r2, #1121	; 0x461
 8009fd2:	491a      	ldr	r1, [pc, #104]	; (800a03c <tcp_free_acked_segments+0xf0>)
 8009fd4:	4817      	ldr	r0, [pc, #92]	; (800a034 <tcp_free_acked_segments+0xe8>)
 8009fd6:	f005 fef9 	bl	800fdcc <iprintf>
  while (seg_list != NULL &&
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d020      	beq.n	800a022 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fb fba7 	bl	800573a <lwip_htonl>
 8009fec:	4604      	mov	r4, r0
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	461d      	mov	r5, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	899b      	ldrh	r3, [r3, #12]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fb fb87 	bl	8005710 <lwip_htons>
 800a002:	4603      	mov	r3, r0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <tcp_free_acked_segments+0xc6>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <tcp_free_acked_segments+0xc8>
 800a012:	2300      	movs	r3, #0
 800a014:	442b      	add	r3, r5
 800a016:	18e2      	adds	r2, r4, r3
 800a018:	4b09      	ldr	r3, [pc, #36]	; (800a040 <tcp_free_acked_segments+0xf4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd9c      	ble.n	8009f5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a022:	68bb      	ldr	r3, [r7, #8]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bdb0      	pop	{r4, r5, r7, pc}
 800a02c:	0801268c 	.word	0x0801268c
 800a030:	08012974 	.word	0x08012974
 800a034:	080126d8 	.word	0x080126d8
 800a038:	20008ac8 	.word	0x20008ac8
 800a03c:	0801299c 	.word	0x0801299c
 800a040:	20008ac4 	.word	0x20008ac4

0800a044 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a044:	b5b0      	push	{r4, r5, r7, lr}
 800a046:	b094      	sub	sp, #80	; 0x50
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <tcp_receive+0x20>
 800a056:	4b91      	ldr	r3, [pc, #580]	; (800a29c <tcp_receive+0x258>)
 800a058:	f240 427b 	movw	r2, #1147	; 0x47b
 800a05c:	4990      	ldr	r1, [pc, #576]	; (800a2a0 <tcp_receive+0x25c>)
 800a05e:	4891      	ldr	r0, [pc, #580]	; (800a2a4 <tcp_receive+0x260>)
 800a060:	f005 feb4 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7d1b      	ldrb	r3, [r3, #20]
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d806      	bhi.n	800a07a <tcp_receive+0x36>
 800a06c:	4b8b      	ldr	r3, [pc, #556]	; (800a29c <tcp_receive+0x258>)
 800a06e:	f240 427c 	movw	r2, #1148	; 0x47c
 800a072:	498d      	ldr	r1, [pc, #564]	; (800a2a8 <tcp_receive+0x264>)
 800a074:	488b      	ldr	r0, [pc, #556]	; (800a2a4 <tcp_receive+0x260>)
 800a076:	f005 fea9 	bl	800fdcc <iprintf>

  if (flags & TCP_ACK) {
 800a07a:	4b8c      	ldr	r3, [pc, #560]	; (800a2ac <tcp_receive+0x268>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	f003 0310 	and.w	r3, r3, #16
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 8264 	beq.w	800a550 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a08e:	461a      	mov	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a094:	4413      	add	r3, r2
 800a096:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a09c:	4b84      	ldr	r3, [pc, #528]	; (800a2b0 <tcp_receive+0x26c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db1b      	blt.n	800a0de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0aa:	4b81      	ldr	r3, [pc, #516]	; (800a2b0 <tcp_receive+0x26c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d106      	bne.n	800a0c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0b6:	4b7f      	ldr	r3, [pc, #508]	; (800a2b4 <tcp_receive+0x270>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	db0e      	blt.n	800a0de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0c4:	4b7b      	ldr	r3, [pc, #492]	; (800a2b4 <tcp_receive+0x270>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d125      	bne.n	800a118 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a0cc:	4b7a      	ldr	r3, [pc, #488]	; (800a2b8 <tcp_receive+0x274>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	89db      	ldrh	r3, [r3, #14]
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d91c      	bls.n	800a118 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a0de:	4b76      	ldr	r3, [pc, #472]	; (800a2b8 <tcp_receive+0x274>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	89db      	ldrh	r3, [r3, #14]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d205      	bcs.n	800a108 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a108:	4b69      	ldr	r3, [pc, #420]	; (800a2b0 <tcp_receive+0x26c>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a110:	4b68      	ldr	r3, [pc, #416]	; (800a2b4 <tcp_receive+0x270>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a118:	4b66      	ldr	r3, [pc, #408]	; (800a2b4 <tcp_receive+0x270>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	dc58      	bgt.n	800a1d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a126:	4b65      	ldr	r3, [pc, #404]	; (800a2bc <tcp_receive+0x278>)
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d14b      	bne.n	800a1c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a138:	4413      	add	r3, r2
 800a13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d142      	bne.n	800a1c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a146:	2b00      	cmp	r3, #0
 800a148:	db3d      	blt.n	800a1c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a14e:	4b59      	ldr	r3, [pc, #356]	; (800a2b4 <tcp_receive+0x270>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d137      	bne.n	800a1c6 <tcp_receive+0x182>
              found_dupack = 1;
 800a156:	2301      	movs	r3, #1
 800a158:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a160:	2bff      	cmp	r3, #255	; 0xff
 800a162:	d007      	beq.n	800a174 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a16a:	3301      	adds	r3, #1
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d91b      	bls.n	800a1b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a188:	4413      	add	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a192:	429a      	cmp	r2, r3
 800a194:	d30a      	bcc.n	800a1ac <tcp_receive+0x168>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1aa:	e004      	b.n	800a1b6 <tcp_receive+0x172>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d902      	bls.n	800a1c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 fefd 	bl	800bfc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f040 8161 	bne.w	800a490 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1d6:	e15b      	b.n	800a490 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a1d8:	4b36      	ldr	r3, [pc, #216]	; (800a2b4 <tcp_receive+0x270>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f2c0 814e 	blt.w	800a486 <tcp_receive+0x442>
 800a1ea:	4b32      	ldr	r3, [pc, #200]	; (800a2b4 <tcp_receive+0x270>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f300 8146 	bgt.w	800a486 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8b5b      	ldrh	r3, [r3, #26]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	2b00      	cmp	r3, #0
 800a204:	d010      	beq.n	800a228 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8b5b      	ldrh	r3, [r3, #26]
 800a20a:	f023 0304 	bic.w	r3, r3, #4
 800a20e:	b29a      	uxth	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a236:	10db      	asrs	r3, r3, #3
 800a238:	b21b      	sxth	r3, r3
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a242:	b29b      	uxth	r3, r3
 800a244:	4413      	add	r3, r2
 800a246:	b29b      	uxth	r3, r3
 800a248:	b21a      	sxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a250:	4b18      	ldr	r3, [pc, #96]	; (800a2b4 <tcp_receive+0x270>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a268:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <tcp_receive+0x270>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	7d1b      	ldrb	r3, [r3, #20]
 800a274:	2b03      	cmp	r3, #3
 800a276:	f240 8097 	bls.w	800a3a8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a286:	429a      	cmp	r2, r3
 800a288:	d245      	bcs.n	800a316 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	8b5b      	ldrh	r3, [r3, #26]
 800a28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a292:	2b00      	cmp	r3, #0
 800a294:	d014      	beq.n	800a2c0 <tcp_receive+0x27c>
 800a296:	2301      	movs	r3, #1
 800a298:	e013      	b.n	800a2c2 <tcp_receive+0x27e>
 800a29a:	bf00      	nop
 800a29c:	0801268c 	.word	0x0801268c
 800a2a0:	080129bc 	.word	0x080129bc
 800a2a4:	080126d8 	.word	0x080126d8
 800a2a8:	080129d8 	.word	0x080129d8
 800a2ac:	20008acc 	.word	0x20008acc
 800a2b0:	20008ac0 	.word	0x20008ac0
 800a2b4:	20008ac4 	.word	0x20008ac4
 800a2b8:	20008ab0 	.word	0x20008ab0
 800a2bc:	20008aca 	.word	0x20008aca
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a2c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2d0:	fb12 f303 	smulbb	r3, r2, r3
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bf28      	it	cs
 800a2dc:	4613      	movcs	r3, r2
 800a2de:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d309      	bcc.n	800a30a <tcp_receive+0x2c6>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2fe:	4413      	add	r3, r2
 800a300:	b29a      	uxth	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a308:	e04e      	b.n	800a3a8 <tcp_receive+0x364>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a310:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a314:	e048      	b.n	800a3a8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a31c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a31e:	4413      	add	r3, r2
 800a320:	b29a      	uxth	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a328:	429a      	cmp	r2, r3
 800a32a:	d309      	bcc.n	800a340 <tcp_receive+0x2fc>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a334:	4413      	add	r3, r2
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a33e:	e004      	b.n	800a34a <tcp_receive+0x306>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a356:	429a      	cmp	r2, r3
 800a358:	d326      	bcc.n	800a3a8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a37a:	4413      	add	r3, r2
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a384:	429a      	cmp	r2, r3
 800a386:	d30a      	bcc.n	800a39e <tcp_receive+0x35a>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a392:	4413      	add	r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a39c:	e004      	b.n	800a3a8 <tcp_receive+0x364>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3b0:	4a98      	ldr	r2, [pc, #608]	; (800a614 <tcp_receive+0x5d0>)
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fdca 	bl	8009f4c <tcp_free_acked_segments>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c6:	4a94      	ldr	r2, [pc, #592]	; (800a618 <tcp_receive+0x5d4>)
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff fdbf 	bl	8009f4c <tcp_free_acked_segments>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3e2:	861a      	strh	r2, [r3, #48]	; 0x30
 800a3e4:	e002      	b.n	800a3ec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d103      	bne.n	800a402 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a408:	4b84      	ldr	r3, [pc, #528]	; (800a61c <tcp_receive+0x5d8>)
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	4413      	add	r3, r2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8b5b      	ldrh	r3, [r3, #26]
 800a41a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d035      	beq.n	800a48e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a426:	2b00      	cmp	r3, #0
 800a428:	d118      	bne.n	800a45c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00c      	beq.n	800a44c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fb f97b 	bl	800573a <lwip_htonl>
 800a444:	4603      	mov	r3, r0
 800a446:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dc20      	bgt.n	800a48e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	8b5b      	ldrh	r3, [r3, #26]
 800a450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a45a:	e018      	b.n	800a48e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fb f966 	bl	800573a <lwip_htonl>
 800a46e:	4603      	mov	r3, r0
 800a470:	1ae3      	subs	r3, r4, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	dc0b      	bgt.n	800a48e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	8b5b      	ldrh	r3, [r3, #26]
 800a47a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a484:	e003      	b.n	800a48e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 ff88 	bl	800c39c <tcp_send_empty_ack>
 800a48c:	e000      	b.n	800a490 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a48e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d05b      	beq.n	800a550 <tcp_receive+0x50c>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49c:	4b60      	ldr	r3, [pc, #384]	; (800a620 <tcp_receive+0x5dc>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da54      	bge.n	800a550 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a4a6:	4b5f      	ldr	r3, [pc, #380]	; (800a624 <tcp_receive+0x5e0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a4ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4c4:	10db      	asrs	r3, r3, #3
 800a4c6:	b21b      	sxth	r3, r3
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4de:	4413      	add	r3, r2
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	b21a      	sxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a4e8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da05      	bge.n	800a4fc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a4f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4f4:	425b      	negs	r3, r3
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a4fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a506:	109b      	asrs	r3, r3, #2
 800a508:	b21b      	sxth	r3, r3
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a520:	4413      	add	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	b21a      	sxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a530:	10db      	asrs	r3, r3, #3
 800a532:	b21b      	sxth	r3, r3
 800a534:	b29a      	uxth	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4413      	add	r3, r2
 800a540:	b29b      	uxth	r3, r3
 800a542:	b21a      	sxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a550:	4b35      	ldr	r3, [pc, #212]	; (800a628 <tcp_receive+0x5e4>)
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 84e2 	beq.w	800af1e <tcp_receive+0xeda>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7d1b      	ldrb	r3, [r3, #20]
 800a55e:	2b06      	cmp	r3, #6
 800a560:	f200 84dd 	bhi.w	800af1e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a568:	4b30      	ldr	r3, [pc, #192]	; (800a62c <tcp_receive+0x5e8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	f2c0 808f 	blt.w	800a694 <tcp_receive+0x650>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a57a:	4b2b      	ldr	r3, [pc, #172]	; (800a628 <tcp_receive+0x5e4>)
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	4619      	mov	r1, r3
 800a580:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <tcp_receive+0x5e8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	440b      	add	r3, r1
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	3301      	adds	r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f300 8082 	bgt.w	800a694 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a590:	4b27      	ldr	r3, [pc, #156]	; (800a630 <tcp_receive+0x5ec>)
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59a:	4b24      	ldr	r3, [pc, #144]	; (800a62c <tcp_receive+0x5e8>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a5a2:	4b23      	ldr	r3, [pc, #140]	; (800a630 <tcp_receive+0x5ec>)
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <tcp_receive+0x574>
 800a5aa:	4b22      	ldr	r3, [pc, #136]	; (800a634 <tcp_receive+0x5f0>)
 800a5ac:	f240 5294 	movw	r2, #1428	; 0x594
 800a5b0:	4921      	ldr	r1, [pc, #132]	; (800a638 <tcp_receive+0x5f4>)
 800a5b2:	4822      	ldr	r0, [pc, #136]	; (800a63c <tcp_receive+0x5f8>)
 800a5b4:	f005 fc0a 	bl	800fdcc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d906      	bls.n	800a5d0 <tcp_receive+0x58c>
 800a5c2:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <tcp_receive+0x5f0>)
 800a5c4:	f240 5295 	movw	r2, #1429	; 0x595
 800a5c8:	491d      	ldr	r1, [pc, #116]	; (800a640 <tcp_receive+0x5fc>)
 800a5ca:	481c      	ldr	r0, [pc, #112]	; (800a63c <tcp_receive+0x5f8>)
 800a5cc:	f005 fbfe 	bl	800fdcc <iprintf>
      off = (u16_t)off32;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <tcp_receive+0x5ec>)
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	891b      	ldrh	r3, [r3, #8]
 800a5dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d906      	bls.n	800a5f2 <tcp_receive+0x5ae>
 800a5e4:	4b13      	ldr	r3, [pc, #76]	; (800a634 <tcp_receive+0x5f0>)
 800a5e6:	f240 5297 	movw	r2, #1431	; 0x597
 800a5ea:	4916      	ldr	r1, [pc, #88]	; (800a644 <tcp_receive+0x600>)
 800a5ec:	4813      	ldr	r0, [pc, #76]	; (800a63c <tcp_receive+0x5f8>)
 800a5ee:	f005 fbed 	bl	800fdcc <iprintf>
      inseg.len -= off;
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <tcp_receive+0x5ec>)
 800a5f4:	891a      	ldrh	r2, [r3, #8]
 800a5f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <tcp_receive+0x5ec>)
 800a600:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <tcp_receive+0x5ec>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	891a      	ldrh	r2, [r3, #8]
 800a608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a610:	e02a      	b.n	800a668 <tcp_receive+0x624>
 800a612:	bf00      	nop
 800a614:	080129f4 	.word	0x080129f4
 800a618:	080129fc 	.word	0x080129fc
 800a61c:	20008ac8 	.word	0x20008ac8
 800a620:	20008ac4 	.word	0x20008ac4
 800a624:	20008a84 	.word	0x20008a84
 800a628:	20008aca 	.word	0x20008aca
 800a62c:	20008ac0 	.word	0x20008ac0
 800a630:	20008a9c 	.word	0x20008a9c
 800a634:	0801268c 	.word	0x0801268c
 800a638:	08012a04 	.word	0x08012a04
 800a63c:	080126d8 	.word	0x080126d8
 800a640:	08012a14 	.word	0x08012a14
 800a644:	08012a24 	.word	0x08012a24
        off -= p->len;
 800a648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64a:	895b      	ldrh	r3, [r3, #10]
 800a64c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a658:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a65a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65e:	2200      	movs	r2, #0
 800a660:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66a:	895b      	ldrh	r3, [r3, #10]
 800a66c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a670:	429a      	cmp	r2, r3
 800a672:	d8e9      	bhi.n	800a648 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a678:	4619      	mov	r1, r3
 800a67a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a67c:	f7fc fada 	bl	8006c34 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	4a91      	ldr	r2, [pc, #580]	; (800a8cc <tcp_receive+0x888>)
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	4b91      	ldr	r3, [pc, #580]	; (800a8d0 <tcp_receive+0x88c>)
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	4a8f      	ldr	r2, [pc, #572]	; (800a8cc <tcp_receive+0x888>)
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a692:	e00d      	b.n	800a6b0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a694:	4b8d      	ldr	r3, [pc, #564]	; (800a8cc <tcp_receive+0x888>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da06      	bge.n	800a6b0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	8b5b      	ldrh	r3, [r3, #26]
 800a6a6:	f043 0302 	orr.w	r3, r3, #2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6b0:	4b86      	ldr	r3, [pc, #536]	; (800a8cc <tcp_receive+0x888>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f2c0 842a 	blt.w	800af14 <tcp_receive+0xed0>
 800a6c0:	4b82      	ldr	r3, [pc, #520]	; (800a8cc <tcp_receive+0x888>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6cc:	440b      	add	r3, r1
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f300 841e 	bgt.w	800af14 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6dc:	4b7b      	ldr	r3, [pc, #492]	; (800a8cc <tcp_receive+0x888>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	f040 829a 	bne.w	800ac1a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a6e6:	4b7a      	ldr	r3, [pc, #488]	; (800a8d0 <tcp_receive+0x88c>)
 800a6e8:	891c      	ldrh	r4, [r3, #8]
 800a6ea:	4b79      	ldr	r3, [pc, #484]	; (800a8d0 <tcp_receive+0x88c>)
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	899b      	ldrh	r3, [r3, #12]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fb f80c 	bl	8005710 <lwip_htons>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <tcp_receive+0x6c4>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <tcp_receive+0x6c6>
 800a708:	2300      	movs	r3, #0
 800a70a:	4423      	add	r3, r4
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	4b71      	ldr	r3, [pc, #452]	; (800a8d4 <tcp_receive+0x890>)
 800a710:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a716:	4b6f      	ldr	r3, [pc, #444]	; (800a8d4 <tcp_receive+0x890>)
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d275      	bcs.n	800a80a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a71e:	4b6c      	ldr	r3, [pc, #432]	; (800a8d0 <tcp_receive+0x88c>)
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	899b      	ldrh	r3, [r3, #12]
 800a724:	b29b      	uxth	r3, r3
 800a726:	4618      	mov	r0, r3
 800a728:	f7fa fff2 	bl	8005710 <lwip_htons>
 800a72c:	4603      	mov	r3, r0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01f      	beq.n	800a778 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a738:	4b65      	ldr	r3, [pc, #404]	; (800a8d0 <tcp_receive+0x88c>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	899b      	ldrh	r3, [r3, #12]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	b21b      	sxth	r3, r3
 800a742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a746:	b21c      	sxth	r4, r3
 800a748:	4b61      	ldr	r3, [pc, #388]	; (800a8d0 <tcp_receive+0x88c>)
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	899b      	ldrh	r3, [r3, #12]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4618      	mov	r0, r3
 800a752:	f7fa ffdd 	bl	8005710 <lwip_htons>
 800a756:	4603      	mov	r3, r0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a760:	b29b      	uxth	r3, r3
 800a762:	4618      	mov	r0, r3
 800a764:	f7fa ffd4 	bl	8005710 <lwip_htons>
 800a768:	4603      	mov	r3, r0
 800a76a:	b21b      	sxth	r3, r3
 800a76c:	4323      	orrs	r3, r4
 800a76e:	b21a      	sxth	r2, r3
 800a770:	4b57      	ldr	r3, [pc, #348]	; (800a8d0 <tcp_receive+0x88c>)
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	b292      	uxth	r2, r2
 800a776:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a77c:	4b54      	ldr	r3, [pc, #336]	; (800a8d0 <tcp_receive+0x88c>)
 800a77e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a780:	4b53      	ldr	r3, [pc, #332]	; (800a8d0 <tcp_receive+0x88c>)
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	899b      	ldrh	r3, [r3, #12]
 800a786:	b29b      	uxth	r3, r3
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fa ffc1 	bl	8005710 <lwip_htons>
 800a78e:	4603      	mov	r3, r0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <tcp_receive+0x762>
            inseg.len -= 1;
 800a79a:	4b4d      	ldr	r3, [pc, #308]	; (800a8d0 <tcp_receive+0x88c>)
 800a79c:	891b      	ldrh	r3, [r3, #8]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	4b4b      	ldr	r3, [pc, #300]	; (800a8d0 <tcp_receive+0x88c>)
 800a7a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a7a6:	4b4a      	ldr	r3, [pc, #296]	; (800a8d0 <tcp_receive+0x88c>)
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	4a49      	ldr	r2, [pc, #292]	; (800a8d0 <tcp_receive+0x88c>)
 800a7ac:	8912      	ldrh	r2, [r2, #8]
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fc f93f 	bl	8006a34 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a7b6:	4b46      	ldr	r3, [pc, #280]	; (800a8d0 <tcp_receive+0x88c>)
 800a7b8:	891c      	ldrh	r4, [r3, #8]
 800a7ba:	4b45      	ldr	r3, [pc, #276]	; (800a8d0 <tcp_receive+0x88c>)
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	899b      	ldrh	r3, [r3, #12]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fa ffa4 	bl	8005710 <lwip_htons>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <tcp_receive+0x794>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <tcp_receive+0x796>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4423      	add	r3, r4
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	4b3d      	ldr	r3, [pc, #244]	; (800a8d4 <tcp_receive+0x890>)
 800a7e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a7e2:	4b3c      	ldr	r3, [pc, #240]	; (800a8d4 <tcp_receive+0x890>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4b38      	ldr	r3, [pc, #224]	; (800a8cc <tcp_receive+0x888>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7f6:	440b      	add	r3, r1
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d006      	beq.n	800a80a <tcp_receive+0x7c6>
 800a7fc:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <tcp_receive+0x894>)
 800a7fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a802:	4936      	ldr	r1, [pc, #216]	; (800a8dc <tcp_receive+0x898>)
 800a804:	4836      	ldr	r0, [pc, #216]	; (800a8e0 <tcp_receive+0x89c>)
 800a806:	f005 fae1 	bl	800fdcc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80e7 	beq.w	800a9e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a814:	4b2e      	ldr	r3, [pc, #184]	; (800a8d0 <tcp_receive+0x88c>)
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	899b      	ldrh	r3, [r3, #12]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fa ff77 	bl	8005710 <lwip_htons>
 800a822:	4603      	mov	r3, r0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d010      	beq.n	800a850 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a82e:	e00a      	b.n	800a846 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a834:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7fd fd92 	bl	800836a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f0      	bne.n	800a830 <tcp_receive+0x7ec>
 800a84e:	e0c8      	b.n	800a9e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a856:	e052      	b.n	800a8fe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	899b      	ldrh	r3, [r3, #12]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4618      	mov	r0, r3
 800a862:	f7fa ff55 	bl	8005710 <lwip_htons>
 800a866:	4603      	mov	r3, r0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	f003 0301 	and.w	r3, r3, #1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d03d      	beq.n	800a8ee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a872:	4b17      	ldr	r3, [pc, #92]	; (800a8d0 <tcp_receive+0x88c>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	899b      	ldrh	r3, [r3, #12]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fa ff48 	bl	8005710 <lwip_htons>
 800a880:	4603      	mov	r3, r0
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d130      	bne.n	800a8ee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <tcp_receive+0x88c>)
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	899b      	ldrh	r3, [r3, #12]
 800a892:	b29c      	uxth	r4, r3
 800a894:	2001      	movs	r0, #1
 800a896:	f7fa ff3b 	bl	8005710 <lwip_htons>
 800a89a:	4603      	mov	r3, r0
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <tcp_receive+0x88c>)
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	4322      	orrs	r2, r4
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a8a8:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <tcp_receive+0x88c>)
 800a8aa:	891c      	ldrh	r4, [r3, #8]
 800a8ac:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <tcp_receive+0x88c>)
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	899b      	ldrh	r3, [r3, #12]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fa ff2b 	bl	8005710 <lwip_htons>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00e      	beq.n	800a8e4 <tcp_receive+0x8a0>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e00d      	b.n	800a8e6 <tcp_receive+0x8a2>
 800a8ca:	bf00      	nop
 800a8cc:	20008ac0 	.word	0x20008ac0
 800a8d0:	20008a9c 	.word	0x20008a9c
 800a8d4:	20008aca 	.word	0x20008aca
 800a8d8:	0801268c 	.word	0x0801268c
 800a8dc:	08012a34 	.word	0x08012a34
 800a8e0:	080126d8 	.word	0x080126d8
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4423      	add	r3, r4
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	4b98      	ldr	r3, [pc, #608]	; (800ab4c <tcp_receive+0xb08>)
 800a8ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a8f8:	6938      	ldr	r0, [r7, #16]
 800a8fa:	f7fd fd36 	bl	800836a <tcp_seg_free>
            while (next &&
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a904:	4b91      	ldr	r3, [pc, #580]	; (800ab4c <tcp_receive+0xb08>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	4b91      	ldr	r3, [pc, #580]	; (800ab50 <tcp_receive+0xb0c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	441a      	add	r2, r3
 800a910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a918:	8909      	ldrh	r1, [r1, #8]
 800a91a:	440b      	add	r3, r1
 800a91c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da9a      	bge.n	800a858 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d059      	beq.n	800a9dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a928:	4b88      	ldr	r3, [pc, #544]	; (800ab4c <tcp_receive+0xb08>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	4b88      	ldr	r3, [pc, #544]	; (800ab50 <tcp_receive+0xb0c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	441a      	add	r2, r3
 800a934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dd4d      	ble.n	800a9dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	b29a      	uxth	r2, r3
 800a948:	4b81      	ldr	r3, [pc, #516]	; (800ab50 <tcp_receive+0xb0c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	b29a      	uxth	r2, r3
 800a952:	4b80      	ldr	r3, [pc, #512]	; (800ab54 <tcp_receive+0xb10>)
 800a954:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a956:	4b7f      	ldr	r3, [pc, #508]	; (800ab54 <tcp_receive+0xb10>)
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	899b      	ldrh	r3, [r3, #12]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fa fed6 	bl	8005710 <lwip_htons>
 800a964:	4603      	mov	r3, r0
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d005      	beq.n	800a97c <tcp_receive+0x938>
                inseg.len -= 1;
 800a970:	4b78      	ldr	r3, [pc, #480]	; (800ab54 <tcp_receive+0xb10>)
 800a972:	891b      	ldrh	r3, [r3, #8]
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	4b76      	ldr	r3, [pc, #472]	; (800ab54 <tcp_receive+0xb10>)
 800a97a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a97c:	4b75      	ldr	r3, [pc, #468]	; (800ab54 <tcp_receive+0xb10>)
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4a74      	ldr	r2, [pc, #464]	; (800ab54 <tcp_receive+0xb10>)
 800a982:	8912      	ldrh	r2, [r2, #8]
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc f854 	bl	8006a34 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a98c:	4b71      	ldr	r3, [pc, #452]	; (800ab54 <tcp_receive+0xb10>)
 800a98e:	891c      	ldrh	r4, [r3, #8]
 800a990:	4b70      	ldr	r3, [pc, #448]	; (800ab54 <tcp_receive+0xb10>)
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	899b      	ldrh	r3, [r3, #12]
 800a996:	b29b      	uxth	r3, r3
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fa feb9 	bl	8005710 <lwip_htons>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <tcp_receive+0x96a>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <tcp_receive+0x96c>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4423      	add	r3, r4
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	4b65      	ldr	r3, [pc, #404]	; (800ab4c <tcp_receive+0xb08>)
 800a9b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a9b8:	4b64      	ldr	r3, [pc, #400]	; (800ab4c <tcp_receive+0xb08>)
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4b64      	ldr	r3, [pc, #400]	; (800ab50 <tcp_receive+0xb0c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	441a      	add	r2, r3
 800a9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d006      	beq.n	800a9dc <tcp_receive+0x998>
 800a9ce:	4b62      	ldr	r3, [pc, #392]	; (800ab58 <tcp_receive+0xb14>)
 800a9d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a9d4:	4961      	ldr	r1, [pc, #388]	; (800ab5c <tcp_receive+0xb18>)
 800a9d6:	4862      	ldr	r0, [pc, #392]	; (800ab60 <tcp_receive+0xb1c>)
 800a9d8:	f005 f9f8 	bl	800fdcc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a9e2:	4b5a      	ldr	r3, [pc, #360]	; (800ab4c <tcp_receive+0xb08>)
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4b59      	ldr	r3, [pc, #356]	; (800ab50 <tcp_receive+0xb0c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	441a      	add	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9f6:	4b55      	ldr	r3, [pc, #340]	; (800ab4c <tcp_receive+0xb08>)
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d206      	bcs.n	800aa0c <tcp_receive+0x9c8>
 800a9fe:	4b56      	ldr	r3, [pc, #344]	; (800ab58 <tcp_receive+0xb14>)
 800aa00:	f240 6207 	movw	r2, #1543	; 0x607
 800aa04:	4957      	ldr	r1, [pc, #348]	; (800ab64 <tcp_receive+0xb20>)
 800aa06:	4856      	ldr	r0, [pc, #344]	; (800ab60 <tcp_receive+0xb1c>)
 800aa08:	f005 f9e0 	bl	800fdcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa10:	4b4e      	ldr	r3, [pc, #312]	; (800ab4c <tcp_receive+0xb08>)
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7fc ffc5 	bl	80079ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aa22:	4b4c      	ldr	r3, [pc, #304]	; (800ab54 <tcp_receive+0xb10>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	891b      	ldrh	r3, [r3, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aa2c:	4b49      	ldr	r3, [pc, #292]	; (800ab54 <tcp_receive+0xb10>)
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4a4d      	ldr	r2, [pc, #308]	; (800ab68 <tcp_receive+0xb24>)
 800aa32:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aa34:	4b47      	ldr	r3, [pc, #284]	; (800ab54 <tcp_receive+0xb10>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa3a:	4b46      	ldr	r3, [pc, #280]	; (800ab54 <tcp_receive+0xb10>)
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	899b      	ldrh	r3, [r3, #12]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fa fe64 	bl	8005710 <lwip_htons>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80b8 	beq.w	800abc6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aa56:	4b45      	ldr	r3, [pc, #276]	; (800ab6c <tcp_receive+0xb28>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f043 0320 	orr.w	r3, r3, #32
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	4b42      	ldr	r3, [pc, #264]	; (800ab6c <tcp_receive+0xb28>)
 800aa62:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aa64:	e0af      	b.n	800abc6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa6a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	4a36      	ldr	r2, [pc, #216]	; (800ab50 <tcp_receive+0xb0c>)
 800aa76:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	891b      	ldrh	r3, [r3, #8]
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	899b      	ldrh	r3, [r3, #12]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fa fe42 	bl	8005710 <lwip_htons>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <tcp_receive+0xa58>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e000      	b.n	800aa9e <tcp_receive+0xa5a>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	191a      	adds	r2, r3, r4
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	441a      	add	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaae:	461c      	mov	r4, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	891b      	ldrh	r3, [r3, #8]
 800aab4:	461d      	mov	r5, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	899b      	ldrh	r3, [r3, #12]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fa fe26 	bl	8005710 <lwip_htons>
 800aac4:	4603      	mov	r3, r0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <tcp_receive+0xa90>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <tcp_receive+0xa92>
 800aad4:	2300      	movs	r3, #0
 800aad6:	442b      	add	r3, r5
 800aad8:	429c      	cmp	r4, r3
 800aada:	d206      	bcs.n	800aaea <tcp_receive+0xaa6>
 800aadc:	4b1e      	ldr	r3, [pc, #120]	; (800ab58 <tcp_receive+0xb14>)
 800aade:	f240 622b 	movw	r2, #1579	; 0x62b
 800aae2:	4923      	ldr	r1, [pc, #140]	; (800ab70 <tcp_receive+0xb2c>)
 800aae4:	481e      	ldr	r0, [pc, #120]	; (800ab60 <tcp_receive+0xb1c>)
 800aae6:	f005 f971 	bl	800fdcc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	891b      	ldrh	r3, [r3, #8]
 800aaee:	461c      	mov	r4, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	899b      	ldrh	r3, [r3, #12]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fa fe09 	bl	8005710 <lwip_htons>
 800aafe:	4603      	mov	r3, r0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <tcp_receive+0xaca>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <tcp_receive+0xacc>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	1919      	adds	r1, r3, r4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab16:	b28b      	uxth	r3, r1
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7fc ff43 	bl	80079ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	891b      	ldrh	r3, [r3, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d028      	beq.n	800ab82 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ab30:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <tcp_receive+0xb24>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01d      	beq.n	800ab74 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ab38:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <tcp_receive+0xb24>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f7fc f9be 	bl	8006ec4 <pbuf_cat>
 800ab48:	e018      	b.n	800ab7c <tcp_receive+0xb38>
 800ab4a:	bf00      	nop
 800ab4c:	20008aca 	.word	0x20008aca
 800ab50:	20008ac0 	.word	0x20008ac0
 800ab54:	20008a9c 	.word	0x20008a9c
 800ab58:	0801268c 	.word	0x0801268c
 800ab5c:	08012a6c 	.word	0x08012a6c
 800ab60:	080126d8 	.word	0x080126d8
 800ab64:	08012aa8 	.word	0x08012aa8
 800ab68:	20008ad0 	.word	0x20008ad0
 800ab6c:	20008acd 	.word	0x20008acd
 800ab70:	08012ac8 	.word	0x08012ac8
            } else {
              recv_data = cseg->p;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	4a70      	ldr	r2, [pc, #448]	; (800ad3c <tcp_receive+0xcf8>)
 800ab7a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	899b      	ldrh	r3, [r3, #12]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fa fdc0 	bl	8005710 <lwip_htons>
 800ab90:	4603      	mov	r3, r0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00d      	beq.n	800abb8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ab9c:	4b68      	ldr	r3, [pc, #416]	; (800ad40 <tcp_receive+0xcfc>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	f043 0320 	orr.w	r3, r3, #32
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	4b66      	ldr	r3, [pc, #408]	; (800ad40 <tcp_receive+0xcfc>)
 800aba8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	7d1b      	ldrb	r3, [r3, #20]
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d102      	bne.n	800abb8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2207      	movs	r2, #7
 800abb6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	f7fd fbd2 	bl	800836a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d008      	beq.n	800abe0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800abda:	429a      	cmp	r2, r3
 800abdc:	f43f af43 	beq.w	800aa66 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	8b5b      	ldrh	r3, [r3, #26]
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <tcp_receive+0xbc6>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	8b5b      	ldrh	r3, [r3, #26]
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	835a      	strh	r2, [r3, #26]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	8b5b      	ldrh	r3, [r3, #26]
 800abfe:	f043 0302 	orr.w	r3, r3, #2
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac08:	e188      	b.n	800af1c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8b5b      	ldrh	r3, [r3, #26]
 800ac0e:	f043 0301 	orr.w	r3, r3, #1
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac18:	e180      	b.n	800af1c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ac22:	4848      	ldr	r0, [pc, #288]	; (800ad44 <tcp_receive+0xd00>)
 800ac24:	f7fd fbba 	bl	800839c <tcp_seg_copy>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	675a      	str	r2, [r3, #116]	; 0x74
 800ac2e:	e16d      	b.n	800af0c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3a:	e157      	b.n	800aeec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	4b41      	ldr	r3, [pc, #260]	; (800ad48 <tcp_receive+0xd04>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d11d      	bne.n	800ac86 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ac4a:	4b3e      	ldr	r3, [pc, #248]	; (800ad44 <tcp_receive+0xd00>)
 800ac4c:	891a      	ldrh	r2, [r3, #8]
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	891b      	ldrh	r3, [r3, #8]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	f240 814f 	bls.w	800aef6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac58:	483a      	ldr	r0, [pc, #232]	; (800ad44 <tcp_receive+0xd00>)
 800ac5a:	f7fd fb9f 	bl	800839c <tcp_seg_copy>
 800ac5e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 8149 	beq.w	800aefa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ac6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e002      	b.n	800ac7c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ac7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac7e:	6978      	ldr	r0, [r7, #20]
 800ac80:	f7ff f8dc 	bl	8009e3c <tcp_oos_insert_segment>
                }
                break;
 800ac84:	e139      	b.n	800aefa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ac86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d117      	bne.n	800acbc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ac8c:	4b2e      	ldr	r3, [pc, #184]	; (800ad48 <tcp_receive+0xd04>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da57      	bge.n	800ad4c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac9c:	4829      	ldr	r0, [pc, #164]	; (800ad44 <tcp_receive+0xd00>)
 800ac9e:	f7fd fb7d 	bl	800839c <tcp_seg_copy>
 800aca2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 8129 	beq.w	800aefe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	69ba      	ldr	r2, [r7, #24]
 800acb0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800acb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acb4:	69b8      	ldr	r0, [r7, #24]
 800acb6:	f7ff f8c1 	bl	8009e3c <tcp_oos_insert_segment>
                  }
                  break;
 800acba:	e120      	b.n	800aefe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800acbc:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <tcp_receive+0xd04>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	db3e      	blt.n	800ad4c <tcp_receive+0xd08>
 800acce:	4b1e      	ldr	r3, [pc, #120]	; (800ad48 <tcp_receive+0xd04>)
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	3301      	adds	r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dc35      	bgt.n	800ad4c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ace0:	4818      	ldr	r0, [pc, #96]	; (800ad44 <tcp_receive+0xd00>)
 800ace2:	f7fd fb5b 	bl	800839c <tcp_seg_copy>
 800ace6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 8109 	beq.w	800af02 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800acf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf8:	8912      	ldrh	r2, [r2, #8]
 800acfa:	441a      	add	r2, r3
 800acfc:	4b12      	ldr	r3, [pc, #72]	; (800ad48 <tcp_receive+0xd04>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dd12      	ble.n	800ad2c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ad06:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <tcp_receive+0xd04>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	891b      	ldrh	r3, [r3, #8]
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f7fb fe84 	bl	8006a34 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ad2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ad32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad34:	69f8      	ldr	r0, [r7, #28]
 800ad36:	f7ff f881 	bl	8009e3c <tcp_oos_insert_segment>
                  }
                  break;
 800ad3a:	e0e2      	b.n	800af02 <tcp_receive+0xebe>
 800ad3c:	20008ad0 	.word	0x20008ad0
 800ad40:	20008acd 	.word	0x20008acd
 800ad44:	20008a9c 	.word	0x20008a9c
 800ad48:	20008ac0 	.word	0x20008ac0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 80c6 	bne.w	800aee6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ad5a:	4b80      	ldr	r3, [pc, #512]	; (800af5c <tcp_receive+0xf18>)
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f340 80bd 	ble.w	800aee6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	899b      	ldrh	r3, [r3, #12]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fa fccb 	bl	8005710 <lwip_htons>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f040 80bf 	bne.w	800af06 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ad88:	4875      	ldr	r0, [pc, #468]	; (800af60 <tcp_receive+0xf1c>)
 800ad8a:	f7fd fb07 	bl	800839c <tcp_seg_copy>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80b6 	beq.w	800af0a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ada6:	8912      	ldrh	r2, [r2, #8]
 800ada8:	441a      	add	r2, r3
 800adaa:	4b6c      	ldr	r3, [pc, #432]	; (800af5c <tcp_receive+0xf18>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dd12      	ble.n	800adda <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800adb4:	4b69      	ldr	r3, [pc, #420]	; (800af5c <tcp_receive+0xf18>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b29a      	uxth	r2, r3
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	891b      	ldrh	r3, [r3, #8]
 800add2:	4619      	mov	r1, r3
 800add4:	4610      	mov	r0, r2
 800add6:	f7fb fe2d 	bl	8006a34 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <tcp_receive+0xf20>)
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	4b5e      	ldr	r3, [pc, #376]	; (800af5c <tcp_receive+0xf18>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	441a      	add	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adee:	440b      	add	r3, r1
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f340 8089 	ble.w	800af0a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	899b      	ldrh	r3, [r3, #12]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fa fc84 	bl	8005710 <lwip_htons>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d022      	beq.n	800ae5a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	899b      	ldrh	r3, [r3, #12]
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	b21b      	sxth	r3, r3
 800ae20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae24:	b21c      	sxth	r4, r3
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	899b      	ldrh	r3, [r3, #12]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fa fc6d 	bl	8005710 <lwip_htons>
 800ae36:	4603      	mov	r3, r0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fa fc64 	bl	8005710 <lwip_htons>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	b21b      	sxth	r3, r3
 800ae4c:	4323      	orrs	r3, r4
 800ae4e:	b21a      	sxth	r2, r3
 800ae50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	b292      	uxth	r2, r2
 800ae58:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae64:	4413      	add	r3, r2
 800ae66:	b299      	uxth	r1, r3
 800ae68:	4b3c      	ldr	r3, [pc, #240]	; (800af5c <tcp_receive+0xf18>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1a8a      	subs	r2, r1, r2
 800ae74:	b292      	uxth	r2, r2
 800ae76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ae78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	891b      	ldrh	r3, [r3, #8]
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fb fdd4 	bl	8006a34 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	891c      	ldrh	r4, [r3, #8]
 800ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	899b      	ldrh	r3, [r3, #12]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fa fc37 	bl	8005710 <lwip_htons>
 800aea2:	4603      	mov	r3, r0
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <tcp_receive+0xe6e>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <tcp_receive+0xe70>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4423      	add	r3, r4
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <tcp_receive+0xf20>)
 800aeba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aebc:	4b29      	ldr	r3, [pc, #164]	; (800af64 <tcp_receive+0xf20>)
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	4b26      	ldr	r3, [pc, #152]	; (800af5c <tcp_receive+0xf18>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	441a      	add	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aed0:	440b      	add	r3, r1
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d019      	beq.n	800af0a <tcp_receive+0xec6>
 800aed6:	4b24      	ldr	r3, [pc, #144]	; (800af68 <tcp_receive+0xf24>)
 800aed8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800aedc:	4923      	ldr	r1, [pc, #140]	; (800af6c <tcp_receive+0xf28>)
 800aede:	4824      	ldr	r0, [pc, #144]	; (800af70 <tcp_receive+0xf2c>)
 800aee0:	f004 ff74 	bl	800fdcc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aee4:	e011      	b.n	800af0a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f47f aea4 	bne.w	800ac3c <tcp_receive+0xbf8>
 800aef4:	e00a      	b.n	800af0c <tcp_receive+0xec8>
                break;
 800aef6:	bf00      	nop
 800aef8:	e008      	b.n	800af0c <tcp_receive+0xec8>
                break;
 800aefa:	bf00      	nop
 800aefc:	e006      	b.n	800af0c <tcp_receive+0xec8>
                  break;
 800aefe:	bf00      	nop
 800af00:	e004      	b.n	800af0c <tcp_receive+0xec8>
                  break;
 800af02:	bf00      	nop
 800af04:	e002      	b.n	800af0c <tcp_receive+0xec8>
                  break;
 800af06:	bf00      	nop
 800af08:	e000      	b.n	800af0c <tcp_receive+0xec8>
                break;
 800af0a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f001 fa45 	bl	800c39c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800af12:	e003      	b.n	800af1c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 fa41 	bl	800c39c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af1a:	e01a      	b.n	800af52 <tcp_receive+0xf0e>
 800af1c:	e019      	b.n	800af52 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <tcp_receive+0xf18>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	db0a      	blt.n	800af42 <tcp_receive+0xefe>
 800af2c:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <tcp_receive+0xf18>)
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af38:	440b      	add	r3, r1
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	3301      	adds	r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dd07      	ble.n	800af52 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	8b5b      	ldrh	r3, [r3, #26]
 800af46:	f043 0302 	orr.w	r3, r3, #2
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800af50:	e7ff      	b.n	800af52 <tcp_receive+0xf0e>
 800af52:	bf00      	nop
 800af54:	3750      	adds	r7, #80	; 0x50
 800af56:	46bd      	mov	sp, r7
 800af58:	bdb0      	pop	{r4, r5, r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20008ac0 	.word	0x20008ac0
 800af60:	20008a9c 	.word	0x20008a9c
 800af64:	20008aca 	.word	0x20008aca
 800af68:	0801268c 	.word	0x0801268c
 800af6c:	08012a34 	.word	0x08012a34
 800af70:	080126d8 	.word	0x080126d8

0800af74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800af7a:	4b15      	ldr	r3, [pc, #84]	; (800afd0 <tcp_get_next_optbyte+0x5c>)
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	b291      	uxth	r1, r2
 800af82:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <tcp_get_next_optbyte+0x5c>)
 800af84:	8011      	strh	r1, [r2, #0]
 800af86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <tcp_get_next_optbyte+0x60>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <tcp_get_next_optbyte+0x26>
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <tcp_get_next_optbyte+0x64>)
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	88fa      	ldrh	r2, [r7, #6]
 800af96:	429a      	cmp	r2, r3
 800af98:	d208      	bcs.n	800afac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800af9a:	4b10      	ldr	r3, [pc, #64]	; (800afdc <tcp_get_next_optbyte+0x68>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3314      	adds	r3, #20
 800afa0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	4413      	add	r3, r2
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	e00b      	b.n	800afc4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <tcp_get_next_optbyte+0x64>)
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800afba:	4b06      	ldr	r3, [pc, #24]	; (800afd4 <tcp_get_next_optbyte+0x60>)
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	797b      	ldrb	r3, [r7, #5]
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20008abc 	.word	0x20008abc
 800afd4:	20008ab8 	.word	0x20008ab8
 800afd8:	20008ab6 	.word	0x20008ab6
 800afdc:	20008ab0 	.word	0x20008ab0

0800afe0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d106      	bne.n	800affc <tcp_parseopt+0x1c>
 800afee:	4b32      	ldr	r3, [pc, #200]	; (800b0b8 <tcp_parseopt+0xd8>)
 800aff0:	f240 727d 	movw	r2, #1917	; 0x77d
 800aff4:	4931      	ldr	r1, [pc, #196]	; (800b0bc <tcp_parseopt+0xdc>)
 800aff6:	4832      	ldr	r0, [pc, #200]	; (800b0c0 <tcp_parseopt+0xe0>)
 800aff8:	f004 fee8 	bl	800fdcc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800affc:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <tcp_parseopt+0xe4>)
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d055      	beq.n	800b0b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b004:	4b30      	ldr	r3, [pc, #192]	; (800b0c8 <tcp_parseopt+0xe8>)
 800b006:	2200      	movs	r2, #0
 800b008:	801a      	strh	r2, [r3, #0]
 800b00a:	e045      	b.n	800b098 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b00c:	f7ff ffb2 	bl	800af74 <tcp_get_next_optbyte>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d006      	beq.n	800b028 <tcp_parseopt+0x48>
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	dc2b      	bgt.n	800b076 <tcp_parseopt+0x96>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d041      	beq.n	800b0a6 <tcp_parseopt+0xc6>
 800b022:	2b01      	cmp	r3, #1
 800b024:	d127      	bne.n	800b076 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b026:	e037      	b.n	800b098 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b028:	f7ff ffa4 	bl	800af74 <tcp_get_next_optbyte>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d13b      	bne.n	800b0aa <tcp_parseopt+0xca>
 800b032:	4b25      	ldr	r3, [pc, #148]	; (800b0c8 <tcp_parseopt+0xe8>)
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	4a22      	ldr	r2, [pc, #136]	; (800b0c4 <tcp_parseopt+0xe4>)
 800b03a:	8812      	ldrh	r2, [r2, #0]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	da34      	bge.n	800b0aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b040:	f7ff ff98 	bl	800af74 <tcp_get_next_optbyte>
 800b044:	4603      	mov	r3, r0
 800b046:	b29b      	uxth	r3, r3
 800b048:	021b      	lsls	r3, r3, #8
 800b04a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b04c:	f7ff ff92 	bl	800af74 <tcp_get_next_optbyte>
 800b050:	4603      	mov	r3, r0
 800b052:	b29a      	uxth	r2, r3
 800b054:	89bb      	ldrh	r3, [r7, #12]
 800b056:	4313      	orrs	r3, r2
 800b058:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b05a:	89bb      	ldrh	r3, [r7, #12]
 800b05c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b060:	d804      	bhi.n	800b06c <tcp_parseopt+0x8c>
 800b062:	89bb      	ldrh	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <tcp_parseopt+0x8c>
 800b068:	89ba      	ldrh	r2, [r7, #12]
 800b06a:	e001      	b.n	800b070 <tcp_parseopt+0x90>
 800b06c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b074:	e010      	b.n	800b098 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b076:	f7ff ff7d 	bl	800af74 <tcp_get_next_optbyte>
 800b07a:	4603      	mov	r3, r0
 800b07c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b07e:	7afb      	ldrb	r3, [r7, #11]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d914      	bls.n	800b0ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	b29a      	uxth	r2, r3
 800b088:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <tcp_parseopt+0xe8>)
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	4413      	add	r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	3b02      	subs	r3, #2
 800b092:	b29a      	uxth	r2, r3
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <tcp_parseopt+0xe8>)
 800b096:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <tcp_parseopt+0xe8>)
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <tcp_parseopt+0xe4>)
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d3b3      	bcc.n	800b00c <tcp_parseopt+0x2c>
 800b0a4:	e004      	b.n	800b0b0 <tcp_parseopt+0xd0>
          return;
 800b0a6:	bf00      	nop
 800b0a8:	e002      	b.n	800b0b0 <tcp_parseopt+0xd0>
            return;
 800b0aa:	bf00      	nop
 800b0ac:	e000      	b.n	800b0b0 <tcp_parseopt+0xd0>
            return;
 800b0ae:	bf00      	nop
      }
    }
  }
}
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0801268c 	.word	0x0801268c
 800b0bc:	08012af0 	.word	0x08012af0
 800b0c0:	080126d8 	.word	0x080126d8
 800b0c4:	20008ab4 	.word	0x20008ab4
 800b0c8:	20008abc 	.word	0x20008abc

0800b0cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <tcp_trigger_input_pcb_close+0x1c>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f043 0310 	orr.w	r3, r3, #16
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <tcp_trigger_input_pcb_close+0x1c>)
 800b0dc:	701a      	strb	r2, [r3, #0]
}
 800b0de:	bf00      	nop
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	20008acd 	.word	0x20008acd

0800b0ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <tcp_route+0x28>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	7a1b      	ldrb	r3, [r3, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	7a1b      	ldrb	r3, [r3, #8]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fb fab8 	bl	8006680 <netif_get_by_index>
 800b110:	4603      	mov	r3, r0
 800b112:	e003      	b.n	800b11c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f003 fc09 	bl	800e92c <ip4_route>
 800b11a:	4603      	mov	r3, r0
  }
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b124:	b590      	push	{r4, r7, lr}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <tcp_create_segment+0x22>
 800b13a:	4b45      	ldr	r3, [pc, #276]	; (800b250 <tcp_create_segment+0x12c>)
 800b13c:	22a3      	movs	r2, #163	; 0xa3
 800b13e:	4945      	ldr	r1, [pc, #276]	; (800b254 <tcp_create_segment+0x130>)
 800b140:	4845      	ldr	r0, [pc, #276]	; (800b258 <tcp_create_segment+0x134>)
 800b142:	f004 fe43 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <tcp_create_segment+0x34>
 800b14c:	4b40      	ldr	r3, [pc, #256]	; (800b250 <tcp_create_segment+0x12c>)
 800b14e:	22a4      	movs	r2, #164	; 0xa4
 800b150:	4942      	ldr	r1, [pc, #264]	; (800b25c <tcp_create_segment+0x138>)
 800b152:	4841      	ldr	r0, [pc, #260]	; (800b258 <tcp_create_segment+0x134>)
 800b154:	f004 fe3a 	bl	800fdcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b158:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b166:	2003      	movs	r0, #3
 800b168:	f7fa ff28 	bl	8005fbc <memp_malloc>
 800b16c:	6138      	str	r0, [r7, #16]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b174:	68b8      	ldr	r0, [r7, #8]
 800b176:	f7fb fde3 	bl	8006d40 <pbuf_free>
    return NULL;
 800b17a:	2300      	movs	r3, #0
 800b17c:	e064      	b.n	800b248 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b184:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	891a      	ldrh	r2, [r3, #8]
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d205      	bcs.n	800b1aa <tcp_create_segment+0x86>
 800b19e:	4b2c      	ldr	r3, [pc, #176]	; (800b250 <tcp_create_segment+0x12c>)
 800b1a0:	22b0      	movs	r2, #176	; 0xb0
 800b1a2:	492f      	ldr	r1, [pc, #188]	; (800b260 <tcp_create_segment+0x13c>)
 800b1a4:	482c      	ldr	r0, [pc, #176]	; (800b258 <tcp_create_segment+0x134>)
 800b1a6:	f004 fe11 	bl	800fdcc <iprintf>
  seg->len = p->tot_len - optlen;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	891a      	ldrh	r2, [r3, #8]
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b1c0:	2114      	movs	r1, #20
 800b1c2:	68b8      	ldr	r0, [r7, #8]
 800b1c4:	f7fb fd26 	bl	8006c14 <pbuf_add_header>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b1ce:	6938      	ldr	r0, [r7, #16]
 800b1d0:	f7fd f8cb 	bl	800836a <tcp_seg_free>
    return NULL;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e037      	b.n	800b248 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8ada      	ldrh	r2, [r3, #22]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	691c      	ldr	r4, [r3, #16]
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	f7fa fa90 	bl	8005710 <lwip_htons>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8b1a      	ldrh	r2, [r3, #24]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	691c      	ldr	r4, [r3, #16]
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fa fa87 	bl	8005710 <lwip_htons>
 800b202:	4603      	mov	r3, r0
 800b204:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	691c      	ldr	r4, [r3, #16]
 800b20a:	6838      	ldr	r0, [r7, #0]
 800b20c:	f7fa fa95 	bl	800573a <lwip_htonl>
 800b210:	4603      	mov	r3, r0
 800b212:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	089b      	lsrs	r3, r3, #2
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	3305      	adds	r3, #5
 800b21e:	b29b      	uxth	r3, r3
 800b220:	031b      	lsls	r3, r3, #12
 800b222:	b29a      	uxth	r2, r3
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	b29b      	uxth	r3, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	691c      	ldr	r4, [r3, #16]
 800b230:	4610      	mov	r0, r2
 800b232:	f7fa fa6d 	bl	8005710 <lwip_htons>
 800b236:	4603      	mov	r3, r0
 800b238:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	2200      	movs	r2, #0
 800b240:	749a      	strb	r2, [r3, #18]
 800b242:	2200      	movs	r2, #0
 800b244:	74da      	strb	r2, [r3, #19]
  return seg;
 800b246:	693b      	ldr	r3, [r7, #16]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	371c      	adds	r7, #28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}
 800b250:	08012b0c 	.word	0x08012b0c
 800b254:	08012b40 	.word	0x08012b40
 800b258:	08012b60 	.word	0x08012b60
 800b25c:	08012b88 	.word	0x08012b88
 800b260:	08012bac 	.word	0x08012bac

0800b264 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b08b      	sub	sp, #44	; 0x2c
 800b268:	af02      	add	r7, sp, #8
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <tcp_split_unsent_seg+0x2c>
 800b282:	4b97      	ldr	r3, [pc, #604]	; (800b4e0 <tcp_split_unsent_seg+0x27c>)
 800b284:	f240 324b 	movw	r2, #843	; 0x34b
 800b288:	4996      	ldr	r1, [pc, #600]	; (800b4e4 <tcp_split_unsent_seg+0x280>)
 800b28a:	4897      	ldr	r0, [pc, #604]	; (800b4e8 <tcp_split_unsent_seg+0x284>)
 800b28c:	f004 fd9e 	bl	800fdcc <iprintf>

  useg = pcb->unsent;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b294:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b29c:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a0:	e119      	b.n	800b4d6 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800b2a2:	887b      	ldrh	r3, [r7, #2]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d109      	bne.n	800b2bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b2a8:	4b8d      	ldr	r3, [pc, #564]	; (800b4e0 <tcp_split_unsent_seg+0x27c>)
 800b2aa:	f240 3253 	movw	r2, #851	; 0x353
 800b2ae:	498f      	ldr	r1, [pc, #572]	; (800b4ec <tcp_split_unsent_seg+0x288>)
 800b2b0:	488d      	ldr	r0, [pc, #564]	; (800b4e8 <tcp_split_unsent_seg+0x284>)
 800b2b2:	f004 fd8b 	bl	800fdcc <iprintf>
    return ERR_VAL;
 800b2b6:	f06f 0305 	mvn.w	r3, #5
 800b2ba:	e10c      	b.n	800b4d6 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	891b      	ldrh	r3, [r3, #8]
 800b2c0:	887a      	ldrh	r2, [r7, #2]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d301      	bcc.n	800b2ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e105      	b.n	800b4d6 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ce:	887a      	ldrh	r2, [r7, #2]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d906      	bls.n	800b2e2 <tcp_split_unsent_seg+0x7e>
 800b2d4:	4b82      	ldr	r3, [pc, #520]	; (800b4e0 <tcp_split_unsent_seg+0x27c>)
 800b2d6:	f240 325b 	movw	r2, #859	; 0x35b
 800b2da:	4985      	ldr	r1, [pc, #532]	; (800b4f0 <tcp_split_unsent_seg+0x28c>)
 800b2dc:	4882      	ldr	r0, [pc, #520]	; (800b4e8 <tcp_split_unsent_seg+0x284>)
 800b2de:	f004 fd75 	bl	800fdcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	891b      	ldrh	r3, [r3, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d106      	bne.n	800b2f8 <tcp_split_unsent_seg+0x94>
 800b2ea:	4b7d      	ldr	r3, [pc, #500]	; (800b4e0 <tcp_split_unsent_seg+0x27c>)
 800b2ec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b2f0:	4980      	ldr	r1, [pc, #512]	; (800b4f4 <tcp_split_unsent_seg+0x290>)
 800b2f2:	487d      	ldr	r0, [pc, #500]	; (800b4e8 <tcp_split_unsent_seg+0x284>)
 800b2f4:	f004 fd6a 	bl	800fdcc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	7b1b      	ldrb	r3, [r3, #12]
 800b2fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	891a      	ldrh	r2, [r3, #8]
 800b30e:	887b      	ldrh	r3, [r7, #2]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	b29a      	uxth	r2, r3
 800b318:	89bb      	ldrh	r3, [r7, #12]
 800b31a:	4413      	add	r3, r2
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b322:	4619      	mov	r1, r3
 800b324:	2036      	movs	r0, #54	; 0x36
 800b326:	f7fb fa27 	bl	8006778 <pbuf_alloc>
 800b32a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 80ba 	beq.w	800b4a8 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	891a      	ldrh	r2, [r3, #8]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	891b      	ldrh	r3, [r3, #8]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	b29a      	uxth	r2, r3
 800b342:	887b      	ldrh	r3, [r7, #2]
 800b344:	4413      	add	r3, r2
 800b346:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6858      	ldr	r0, [r3, #4]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	18d1      	adds	r1, r2, r3
 800b354:	897b      	ldrh	r3, [r7, #10]
 800b356:	89ba      	ldrh	r2, [r7, #12]
 800b358:	f7fb feec 	bl	8007134 <pbuf_copy_partial>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461a      	mov	r2, r3
 800b360:	89bb      	ldrh	r3, [r7, #12]
 800b362:	4293      	cmp	r3, r2
 800b364:	f040 80a2 	bne.w	800b4ac <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	899b      	ldrh	r3, [r3, #12]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	4618      	mov	r0, r3
 800b372:	f7fa f9cd 	bl	8005710 <lwip_htons>
 800b376:	4603      	mov	r3, r0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b37e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b380:	2300      	movs	r3, #0
 800b382:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800b384:	7ffb      	ldrb	r3, [r7, #31]
 800b386:	f003 0308 	and.w	r3, r3, #8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d007      	beq.n	800b39e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b38e:	7ffb      	ldrb	r3, [r7, #31]
 800b390:	f023 0308 	bic.w	r3, r3, #8
 800b394:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800b396:	7fbb      	ldrb	r3, [r7, #30]
 800b398:	f043 0308 	orr.w	r3, r3, #8
 800b39c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800b39e:	7ffb      	ldrb	r3, [r7, #31]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b3a8:	7ffb      	ldrb	r3, [r7, #31]
 800b3aa:	f023 0301 	bic.w	r3, r3, #1
 800b3ae:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800b3b0:	7fbb      	ldrb	r3, [r7, #30]
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fa f9bb 	bl	800573a <lwip_htonl>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	887b      	ldrh	r3, [r7, #2]
 800b3c8:	18d1      	adds	r1, r2, r3
 800b3ca:	7fba      	ldrb	r2, [r7, #30]
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	6939      	ldr	r1, [r7, #16]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff fea5 	bl	800b124 <tcp_create_segment>
 800b3da:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d066      	beq.n	800b4b0 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fb fd32 	bl	8006e50 <pbuf_clen>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3f6:	1a9b      	subs	r3, r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	6858      	ldr	r0, [r3, #4]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	891a      	ldrh	r2, [r3, #8]
 800b40a:	89bb      	ldrh	r3, [r7, #12]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4619      	mov	r1, r3
 800b412:	f7fb fb0f 	bl	8006a34 <pbuf_realloc>
  useg->len -= remainder;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	891a      	ldrh	r2, [r3, #8]
 800b41a:	89bb      	ldrh	r3, [r7, #12]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	b29a      	uxth	r2, r3
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	899b      	ldrh	r3, [r3, #12]
 800b42a:	b29c      	uxth	r4, r3
 800b42c:	7ffb      	ldrb	r3, [r7, #31]
 800b42e:	b29b      	uxth	r3, r3
 800b430:	4618      	mov	r0, r3
 800b432:	f7fa f96d 	bl	8005710 <lwip_htons>
 800b436:	4603      	mov	r3, r0
 800b438:	461a      	mov	r2, r3
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	4322      	orrs	r2, r4
 800b440:	b292      	uxth	r2, r2
 800b442:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2200      	movs	r2, #0
 800b448:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fb fcfe 	bl	8006e50 <pbuf_clen>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b45e:	4413      	add	r3, r2
 800b460:	b29a      	uxth	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fb fcef 	bl	8006e50 <pbuf_clen>
 800b472:	4603      	mov	r3, r0
 800b474:	461a      	mov	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b47c:	4413      	add	r3, r2
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e016      	b.n	800b4d6 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800b4a8:	bf00      	nop
 800b4aa:	e002      	b.n	800b4b2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b4ac:	bf00      	nop
 800b4ae:	e000      	b.n	800b4b2 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b4b0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d006      	beq.n	800b4c6 <tcp_split_unsent_seg+0x262>
 800b4b8:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <tcp_split_unsent_seg+0x27c>)
 800b4ba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b4be:	490e      	ldr	r1, [pc, #56]	; (800b4f8 <tcp_split_unsent_seg+0x294>)
 800b4c0:	4809      	ldr	r0, [pc, #36]	; (800b4e8 <tcp_split_unsent_seg+0x284>)
 800b4c2:	f004 fc83 	bl	800fdcc <iprintf>
  if (p != NULL) {
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800b4cc:	6938      	ldr	r0, [r7, #16]
 800b4ce:	f7fb fc37 	bl	8006d40 <pbuf_free>
  }

  return ERR_MEM;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3724      	adds	r7, #36	; 0x24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd90      	pop	{r4, r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08012b0c 	.word	0x08012b0c
 800b4e4:	08012efc 	.word	0x08012efc
 800b4e8:	08012b60 	.word	0x08012b60
 800b4ec:	08012f20 	.word	0x08012f20
 800b4f0:	08012f44 	.word	0x08012f44
 800b4f4:	08012f54 	.word	0x08012f54
 800b4f8:	08012f64 	.word	0x08012f64

0800b4fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b4fc:	b590      	push	{r4, r7, lr}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <tcp_send_fin+0x1c>
 800b50a:	4b21      	ldr	r3, [pc, #132]	; (800b590 <tcp_send_fin+0x94>)
 800b50c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b510:	4920      	ldr	r1, [pc, #128]	; (800b594 <tcp_send_fin+0x98>)
 800b512:	4821      	ldr	r0, [pc, #132]	; (800b598 <tcp_send_fin+0x9c>)
 800b514:	f004 fc5a 	bl	800fdcc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d02e      	beq.n	800b57e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	e002      	b.n	800b52e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1f8      	bne.n	800b528 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	899b      	ldrh	r3, [r3, #12]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fa f8e6 	bl	8005710 <lwip_htons>
 800b544:	4603      	mov	r3, r0
 800b546:	b2db      	uxtb	r3, r3
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d116      	bne.n	800b57e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	899b      	ldrh	r3, [r3, #12]
 800b556:	b29c      	uxth	r4, r3
 800b558:	2001      	movs	r0, #1
 800b55a:	f7fa f8d9 	bl	8005710 <lwip_htons>
 800b55e:	4603      	mov	r3, r0
 800b560:	461a      	mov	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	4322      	orrs	r2, r4
 800b568:	b292      	uxth	r2, r2
 800b56a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8b5b      	ldrh	r3, [r3, #26]
 800b570:	f043 0320 	orr.w	r3, r3, #32
 800b574:	b29a      	uxth	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e004      	b.n	800b588 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b57e:	2101      	movs	r1, #1
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f80b 	bl	800b59c <tcp_enqueue_flags>
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd90      	pop	{r4, r7, pc}
 800b590:	08012b0c 	.word	0x08012b0c
 800b594:	08012f70 	.word	0x08012f70
 800b598:	08012b60 	.word	0x08012b60

0800b59c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <tcp_enqueue_flags+0x2c>
 800b5ba:	4b67      	ldr	r3, [pc, #412]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b5bc:	f240 4211 	movw	r2, #1041	; 0x411
 800b5c0:	4966      	ldr	r1, [pc, #408]	; (800b75c <tcp_enqueue_flags+0x1c0>)
 800b5c2:	4867      	ldr	r0, [pc, #412]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b5c4:	f004 fc02 	bl	800fdcc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <tcp_enqueue_flags+0x40>
 800b5ce:	4b62      	ldr	r3, [pc, #392]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b5d0:	f240 4213 	movw	r2, #1043	; 0x413
 800b5d4:	4963      	ldr	r1, [pc, #396]	; (800b764 <tcp_enqueue_flags+0x1c8>)
 800b5d6:	4862      	ldr	r0, [pc, #392]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b5d8:	f004 fbf8 	bl	800fdcc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b5dc:	78fb      	ldrb	r3, [r7, #3]
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b5f6:	7dbb      	ldrb	r3, [r7, #22]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5fe:	4619      	mov	r1, r3
 800b600:	2036      	movs	r0, #54	; 0x36
 800b602:	f7fb f8b9 	bl	8006778 <pbuf_alloc>
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d109      	bne.n	800b622 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	8b5b      	ldrh	r3, [r3, #26]
 800b612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b616:	b29a      	uxth	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	e095      	b.n	800b74e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	895a      	ldrh	r2, [r3, #10]
 800b626:	7dbb      	ldrb	r3, [r7, #22]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d206      	bcs.n	800b63c <tcp_enqueue_flags+0xa0>
 800b62e:	4b4a      	ldr	r3, [pc, #296]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b630:	f240 4239 	movw	r2, #1081	; 0x439
 800b634:	494c      	ldr	r1, [pc, #304]	; (800b768 <tcp_enqueue_flags+0x1cc>)
 800b636:	484a      	ldr	r0, [pc, #296]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b638:	f004 fbc8 	bl	800fdcc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b640:	78fa      	ldrb	r2, [r7, #3]
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	460b      	mov	r3, r1
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff fd6a 	bl	800b124 <tcp_create_segment>
 800b650:	60b8      	str	r0, [r7, #8]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d109      	bne.n	800b66c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8b5b      	ldrh	r3, [r3, #26]
 800b65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b660:	b29a      	uxth	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b666:	f04f 33ff 	mov.w	r3, #4294967295
 800b66a:	e070      	b.n	800b74e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0303 	and.w	r3, r3, #3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <tcp_enqueue_flags+0xea>
 800b678:	4b37      	ldr	r3, [pc, #220]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b67a:	f240 4242 	movw	r2, #1090	; 0x442
 800b67e:	493b      	ldr	r1, [pc, #236]	; (800b76c <tcp_enqueue_flags+0x1d0>)
 800b680:	4837      	ldr	r0, [pc, #220]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b682:	f004 fba3 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	891b      	ldrh	r3, [r3, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d006      	beq.n	800b69c <tcp_enqueue_flags+0x100>
 800b68e:	4b32      	ldr	r3, [pc, #200]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b690:	f240 4243 	movw	r2, #1091	; 0x443
 800b694:	4936      	ldr	r1, [pc, #216]	; (800b770 <tcp_enqueue_flags+0x1d4>)
 800b696:	4832      	ldr	r0, [pc, #200]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b698:	f004 fb98 	bl	800fdcc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6aa:	e00d      	b.n	800b6c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b0:	613b      	str	r3, [r7, #16]
 800b6b2:	e002      	b.n	800b6ba <tcp_enqueue_flags+0x11e>
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1f8      	bne.n	800b6b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <tcp_enqueue_flags+0x148>
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d006      	beq.n	800b706 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	8b5b      	ldrh	r3, [r3, #26]
 800b6fc:	f043 0320 	orr.w	r3, r3, #32
 800b700:	b29a      	uxth	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fb fba0 	bl	8006e50 <pbuf_clen>
 800b710:	4603      	mov	r3, r0
 800b712:	461a      	mov	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b71a:	4413      	add	r3, r2
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00e      	beq.n	800b74c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <tcp_enqueue_flags+0x1b0>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <tcp_enqueue_flags+0x1b0>
 800b73e:	4b06      	ldr	r3, [pc, #24]	; (800b758 <tcp_enqueue_flags+0x1bc>)
 800b740:	f240 4265 	movw	r2, #1125	; 0x465
 800b744:	490b      	ldr	r1, [pc, #44]	; (800b774 <tcp_enqueue_flags+0x1d8>)
 800b746:	4806      	ldr	r0, [pc, #24]	; (800b760 <tcp_enqueue_flags+0x1c4>)
 800b748:	f004 fb40 	bl	800fdcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	08012b0c 	.word	0x08012b0c
 800b75c:	08012f8c 	.word	0x08012f8c
 800b760:	08012b60 	.word	0x08012b60
 800b764:	08012fe4 	.word	0x08012fe4
 800b768:	08013004 	.word	0x08013004
 800b76c:	08013040 	.word	0x08013040
 800b770:	08013058 	.word	0x08013058
 800b774:	08013084 	.word	0x08013084

0800b778 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b778:	b5b0      	push	{r4, r5, r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <tcp_output+0x1c>
 800b786:	4b8a      	ldr	r3, [pc, #552]	; (800b9b0 <tcp_output+0x238>)
 800b788:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b78c:	4989      	ldr	r1, [pc, #548]	; (800b9b4 <tcp_output+0x23c>)
 800b78e:	488a      	ldr	r0, [pc, #552]	; (800b9b8 <tcp_output+0x240>)
 800b790:	f004 fb1c 	bl	800fdcc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	7d1b      	ldrb	r3, [r3, #20]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d106      	bne.n	800b7aa <tcp_output+0x32>
 800b79c:	4b84      	ldr	r3, [pc, #528]	; (800b9b0 <tcp_output+0x238>)
 800b79e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b7a2:	4986      	ldr	r1, [pc, #536]	; (800b9bc <tcp_output+0x244>)
 800b7a4:	4884      	ldr	r0, [pc, #528]	; (800b9b8 <tcp_output+0x240>)
 800b7a6:	f004 fb11 	bl	800fdcc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b7aa:	4b85      	ldr	r3, [pc, #532]	; (800b9c0 <tcp_output+0x248>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d101      	bne.n	800b7b8 <tcp_output+0x40>
    return ERR_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e1d1      	b.n	800bb5c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	bf28      	it	cs
 800b7c8:	4613      	movcs	r3, r2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10b      	bne.n	800b7f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8b5b      	ldrh	r3, [r3, #26]
 800b7de:	f003 0302 	and.w	r3, r3, #2
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 81ad 	beq.w	800bb42 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fdd7 	bl	800c39c <tcp_send_empty_ack>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	e1b4      	b.n	800bb5c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fc76 	bl	800b0ec <tcp_route>
 800b800:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <tcp_output+0x96>
    return ERR_RTE;
 800b808:	f06f 0303 	mvn.w	r3, #3
 800b80c:	e1a6      	b.n	800bb5c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d003      	beq.n	800b81c <tcp_output+0xa4>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d111      	bne.n	800b840 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <tcp_output+0xb0>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3304      	adds	r3, #4
 800b826:	e000      	b.n	800b82a <tcp_output+0xb2>
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <tcp_output+0xc0>
      return ERR_RTE;
 800b832:	f06f 0303 	mvn.w	r3, #3
 800b836:	e191      	b.n	800bb5c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	4618      	mov	r0, r3
 800b848:	f7f9 ff77 	bl	800573a <lwip_htonl>
 800b84c:	4602      	mov	r2, r0
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b856:	8912      	ldrh	r2, [r2, #8]
 800b858:	4413      	add	r3, r2
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d227      	bcs.n	800b8b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b866:	461a      	mov	r2, r3
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d114      	bne.n	800b898 <tcp_output+0x120>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b872:	2b00      	cmp	r3, #0
 800b874:	d110      	bne.n	800b898 <tcp_output+0x120>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10b      	bne.n	800b898 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8b5b      	ldrh	r3, [r3, #26]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 8150 	beq.w	800bb46 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fd78 	bl	800c39c <tcp_send_empty_ack>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	e155      	b.n	800bb5c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 811f 	beq.w	800bb04 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800b8c6:	e002      	b.n	800b8ce <tcp_output+0x156>
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	623b      	str	r3, [r7, #32]
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1f8      	bne.n	800b8c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b8d6:	e115      	b.n	800bb04 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	899b      	ldrh	r3, [r3, #12]
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f9 ff15 	bl	8005710 <lwip_htons>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d006      	beq.n	800b900 <tcp_output+0x188>
 800b8f2:	4b2f      	ldr	r3, [pc, #188]	; (800b9b0 <tcp_output+0x238>)
 800b8f4:	f240 5236 	movw	r2, #1334	; 0x536
 800b8f8:	4932      	ldr	r1, [pc, #200]	; (800b9c4 <tcp_output+0x24c>)
 800b8fa:	482f      	ldr	r0, [pc, #188]	; (800b9b8 <tcp_output+0x240>)
 800b8fc:	f004 fa66 	bl	800fdcc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b904:	2b00      	cmp	r3, #0
 800b906:	d01f      	beq.n	800b948 <tcp_output+0x1d0>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8b5b      	ldrh	r3, [r3, #26]
 800b90c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b910:	2b00      	cmp	r3, #0
 800b912:	d119      	bne.n	800b948 <tcp_output+0x1d0>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <tcp_output+0x1bc>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d110      	bne.n	800b948 <tcp_output+0x1d0>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b92a:	891a      	ldrh	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b930:	429a      	cmp	r2, r3
 800b932:	d209      	bcs.n	800b948 <tcp_output+0x1d0>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <tcp_output+0x1d0>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b944:	2b08      	cmp	r3, #8
 800b946:	d901      	bls.n	800b94c <tcp_output+0x1d4>
 800b948:	2301      	movs	r3, #1
 800b94a:	e000      	b.n	800b94e <tcp_output+0x1d6>
 800b94c:	2300      	movs	r3, #0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	8b5b      	ldrh	r3, [r3, #26]
 800b956:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 80e7 	beq.w	800bb2e <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	7d1b      	ldrb	r3, [r3, #20]
 800b964:	2b02      	cmp	r3, #2
 800b966:	d00d      	beq.n	800b984 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	899b      	ldrh	r3, [r3, #12]
 800b96e:	b29c      	uxth	r4, r3
 800b970:	2010      	movs	r0, #16
 800b972:	f7f9 fecd 	bl	8005710 <lwip_htons>
 800b976:	4603      	mov	r3, r0
 800b978:	461a      	mov	r2, r3
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	4322      	orrs	r2, r4
 800b980:	b292      	uxth	r2, r2
 800b982:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b98a:	f000 f90b 	bl	800bba4 <tcp_output_segment>
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d016      	beq.n	800b9c8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	8b5b      	ldrh	r3, [r3, #26]
 800b99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	835a      	strh	r2, [r3, #26]
      return err;
 800b9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ac:	e0d6      	b.n	800bb5c <tcp_output+0x3e4>
 800b9ae:	bf00      	nop
 800b9b0:	08012b0c 	.word	0x08012b0c
 800b9b4:	080130ac 	.word	0x080130ac
 800b9b8:	08012b60 	.word	0x08012b60
 800b9bc:	080130c4 	.word	0x080130c4
 800b9c0:	20008ad4 	.word	0x20008ad4
 800b9c4:	080130ec 	.word	0x080130ec
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	7d1b      	ldrb	r3, [r3, #20]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d006      	beq.n	800b9ec <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	8b5b      	ldrh	r3, [r3, #26]
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f9 fea1 	bl	800573a <lwip_htonl>
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	891b      	ldrh	r3, [r3, #8]
 800b9fe:	461d      	mov	r5, r3
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f9 fe81 	bl	8005710 <lwip_htons>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <tcp_output+0x2a6>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <tcp_output+0x2a8>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	442b      	add	r3, r5
 800ba22:	4423      	add	r3, r4
 800ba24:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da02      	bge.n	800ba38 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	891b      	ldrh	r3, [r3, #8]
 800ba3c:	461c      	mov	r4, r3
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	899b      	ldrh	r3, [r3, #12]
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f9 fe62 	bl	8005710 <lwip_htons>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	f003 0303 	and.w	r3, r3, #3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <tcp_output+0x2e4>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <tcp_output+0x2e6>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4423      	add	r3, r4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d049      	beq.n	800baf8 <tcp_output+0x380>
      seg->next = NULL;
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d105      	bne.n	800ba7e <tcp_output+0x306>
        pcb->unacked = seg;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba76:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	623b      	str	r3, [r7, #32]
 800ba7c:	e03f      	b.n	800bafe <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 fe58 	bl	800573a <lwip_htonl>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f9 fe51 	bl	800573a <lwip_htonl>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	1ae3      	subs	r3, r4, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	da24      	bge.n	800baea <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3370      	adds	r3, #112	; 0x70
 800baa4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800baa6:	e002      	b.n	800baae <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d011      	beq.n	800bada <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f9 fe3b 	bl	800573a <lwip_htonl>
 800bac4:	4604      	mov	r4, r0
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f9 fe34 	bl	800573a <lwip_htonl>
 800bad2:	4603      	mov	r3, r0
 800bad4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	dbe6      	blt.n	800baa8 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e009      	b.n	800bafe <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baee:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	623b      	str	r3, [r7, #32]
 800baf6:	e002      	b.n	800bafe <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800baf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bafa:	f7fc fc36 	bl	800836a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb02:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d012      	beq.n	800bb30 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7f9 fe12 	bl	800573a <lwip_htonl>
 800bb16:	4602      	mov	r2, r0
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb20:	8912      	ldrh	r2, [r2, #8]
 800bb22:	4413      	add	r3, r2
  while (seg != NULL &&
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	f4bf aed6 	bcs.w	800b8d8 <tcp_output+0x160>
 800bb2c:	e000      	b.n	800bb30 <tcp_output+0x3b8>
      break;
 800bb2e:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d108      	bne.n	800bb4a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bb40:	e004      	b.n	800bb4c <tcp_output+0x3d4>
    goto output_done;
 800bb42:	bf00      	nop
 800bb44:	e002      	b.n	800bb4c <tcp_output+0x3d4>
    goto output_done;
 800bb46:	bf00      	nop
 800bb48:	e000      	b.n	800bb4c <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bb4a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	8b5b      	ldrh	r3, [r3, #26]
 800bb50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3728      	adds	r7, #40	; 0x28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bdb0      	pop	{r4, r5, r7, pc}

0800bb64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <tcp_output_segment_busy+0x1c>
 800bb72:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <tcp_output_segment_busy+0x34>)
 800bb74:	f240 529a 	movw	r2, #1434	; 0x59a
 800bb78:	4908      	ldr	r1, [pc, #32]	; (800bb9c <tcp_output_segment_busy+0x38>)
 800bb7a:	4809      	ldr	r0, [pc, #36]	; (800bba0 <tcp_output_segment_busy+0x3c>)
 800bb7c:	f004 f926 	bl	800fdcc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	7b9b      	ldrb	r3, [r3, #14]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d001      	beq.n	800bb8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	08012b0c 	.word	0x08012b0c
 800bb9c:	08013104 	.word	0x08013104
 800bba0:	08012b60 	.word	0x08012b60

0800bba4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bba4:	b5b0      	push	{r4, r5, r7, lr}
 800bba6:	b08c      	sub	sp, #48	; 0x30
 800bba8:	af04      	add	r7, sp, #16
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <tcp_output_segment+0x20>
 800bbb6:	4b63      	ldr	r3, [pc, #396]	; (800bd44 <tcp_output_segment+0x1a0>)
 800bbb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bbbc:	4962      	ldr	r1, [pc, #392]	; (800bd48 <tcp_output_segment+0x1a4>)
 800bbbe:	4863      	ldr	r0, [pc, #396]	; (800bd4c <tcp_output_segment+0x1a8>)
 800bbc0:	f004 f904 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <tcp_output_segment+0x34>
 800bbca:	4b5e      	ldr	r3, [pc, #376]	; (800bd44 <tcp_output_segment+0x1a0>)
 800bbcc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bbd0:	495f      	ldr	r1, [pc, #380]	; (800bd50 <tcp_output_segment+0x1ac>)
 800bbd2:	485e      	ldr	r0, [pc, #376]	; (800bd4c <tcp_output_segment+0x1a8>)
 800bbd4:	f004 f8fa 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <tcp_output_segment+0x48>
 800bbde:	4b59      	ldr	r3, [pc, #356]	; (800bd44 <tcp_output_segment+0x1a0>)
 800bbe0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bbe4:	495b      	ldr	r1, [pc, #364]	; (800bd54 <tcp_output_segment+0x1b0>)
 800bbe6:	4859      	ldr	r0, [pc, #356]	; (800bd4c <tcp_output_segment+0x1a8>)
 800bbe8:	f004 f8f0 	bl	800fdcc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff ffb9 	bl	800bb64 <tcp_output_segment_busy>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e09f      	b.n	800bd3c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	691c      	ldr	r4, [r3, #16]
 800bc04:	4610      	mov	r0, r2
 800bc06:	f7f9 fd98 	bl	800573a <lwip_htonl>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	691c      	ldr	r4, [r3, #16]
 800bc16:	4610      	mov	r0, r2
 800bc18:	f7f9 fd7a 	bl	8005710 <lwip_htons>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bc28:	441a      	add	r2, r3
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	3314      	adds	r3, #20
 800bc34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7b1b      	ldrb	r3, [r3, #12]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d015      	beq.n	800bc6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	3304      	adds	r3, #4
 800bc46:	461a      	mov	r2, r3
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bc4e:	f7fc fe83 	bl	8008958 <tcp_eff_send_mss_netif>
 800bc52:	4603      	mov	r3, r0
 800bc54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bc56:	8b7b      	ldrh	r3, [r7, #26]
 800bc58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f9 fd6c 	bl	800573a <lwip_htonl>
 800bc62:	4602      	mov	r2, r0
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	da02      	bge.n	800bc7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10c      	bne.n	800bca0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bc86:	4b34      	ldr	r3, [pc, #208]	; (800bd58 <tcp_output_segment+0x1b4>)
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f9 fd50 	bl	800573a <lwip_htonl>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	691a      	ldr	r2, [r3, #16]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	8959      	ldrh	r1, [r3, #10]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	8b3a      	ldrh	r2, [r7, #24]
 800bcba:	1a8a      	subs	r2, r1, r2
 800bcbc:	b292      	uxth	r2, r2
 800bcbe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	8919      	ldrh	r1, [r3, #8]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	8b3a      	ldrh	r2, [r7, #24]
 800bccc:	1a8a      	subs	r2, r1, r2
 800bcce:	b292      	uxth	r2, r2
 800bcd0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	6912      	ldr	r2, [r2, #16]
 800bcda:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2200      	movs	r2, #0
 800bce2:	741a      	strb	r2, [r3, #16]
 800bce4:	2200      	movs	r2, #0
 800bce6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	f103 0214 	add.w	r2, r3, #20
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	7b1b      	ldrb	r3, [r3, #12]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	4413      	add	r3, r2
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d006      	beq.n	800bd10 <tcp_output_segment+0x16c>
 800bd02:	4b10      	ldr	r3, [pc, #64]	; (800bd44 <tcp_output_segment+0x1a0>)
 800bd04:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd08:	4914      	ldr	r1, [pc, #80]	; (800bd5c <tcp_output_segment+0x1b8>)
 800bd0a:	4810      	ldr	r0, [pc, #64]	; (800bd4c <tcp_output_segment+0x1a8>)
 800bd0c:	f004 f85e 	bl	800fdcc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6858      	ldr	r0, [r3, #4]
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	1d1c      	adds	r4, r3, #4
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	7add      	ldrb	r5, [r3, #11]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	7a9b      	ldrb	r3, [r3, #10]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	9202      	str	r2, [sp, #8]
 800bd26:	2206      	movs	r2, #6
 800bd28:	9201      	str	r2, [sp, #4]
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	4622      	mov	r2, r4
 800bd30:	f002 ffba 	bl	800eca8 <ip4_output_if>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bd38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bdb0      	pop	{r4, r5, r7, pc}
 800bd44:	08012b0c 	.word	0x08012b0c
 800bd48:	0801312c 	.word	0x0801312c
 800bd4c:	08012b60 	.word	0x08012b60
 800bd50:	0801314c 	.word	0x0801314c
 800bd54:	0801316c 	.word	0x0801316c
 800bd58:	20008a84 	.word	0x20008a84
 800bd5c:	08013190 	.word	0x08013190

0800bd60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bd60:	b5b0      	push	{r4, r5, r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <tcp_rexmit_rto_prepare+0x1c>
 800bd6e:	4b36      	ldr	r3, [pc, #216]	; (800be48 <tcp_rexmit_rto_prepare+0xe8>)
 800bd70:	f240 6263 	movw	r2, #1635	; 0x663
 800bd74:	4935      	ldr	r1, [pc, #212]	; (800be4c <tcp_rexmit_rto_prepare+0xec>)
 800bd76:	4836      	ldr	r0, [pc, #216]	; (800be50 <tcp_rexmit_rto_prepare+0xf0>)
 800bd78:	f004 f828 	bl	800fdcc <iprintf>

  if (pcb->unacked == NULL) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bd84:	f06f 0305 	mvn.w	r3, #5
 800bd88:	e059      	b.n	800be3e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	e00b      	b.n	800bdaa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fee6 	bl	800bb64 <tcp_output_segment_busy>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bd9e:	f06f 0305 	mvn.w	r3, #5
 800bda2:	e04c      	b.n	800be3e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1ef      	bne.n	800bd92 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff fed6 	bl	800bb64 <tcp_output_segment_busy>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bdbe:	f06f 0305 	mvn.w	r3, #5
 800bdc2:	e03c      	b.n	800be3e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d104      	bne.n	800bdde <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	895a      	ldrh	r2, [r3, #10]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8b5b      	ldrh	r3, [r3, #26]
 800bdf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	f7f9 fc9a 	bl	800573a <lwip_htonl>
 800be06:	4604      	mov	r4, r0
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	891b      	ldrh	r3, [r3, #8]
 800be0c:	461d      	mov	r5, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	899b      	ldrh	r3, [r3, #12]
 800be14:	b29b      	uxth	r3, r3
 800be16:	4618      	mov	r0, r3
 800be18:	f7f9 fc7a 	bl	8005710 <lwip_htons>
 800be1c:	4603      	mov	r3, r0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <tcp_rexmit_rto_prepare+0xcc>
 800be28:	2301      	movs	r3, #1
 800be2a:	e000      	b.n	800be2e <tcp_rexmit_rto_prepare+0xce>
 800be2c:	2300      	movs	r3, #0
 800be2e:	442b      	add	r3, r5
 800be30:	18e2      	adds	r2, r4, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bdb0      	pop	{r4, r5, r7, pc}
 800be46:	bf00      	nop
 800be48:	08012b0c 	.word	0x08012b0c
 800be4c:	080131a4 	.word	0x080131a4
 800be50:	08012b60 	.word	0x08012b60

0800be54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <tcp_rexmit_rto_commit+0x1c>
 800be62:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <tcp_rexmit_rto_commit+0x44>)
 800be64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800be68:	490c      	ldr	r1, [pc, #48]	; (800be9c <tcp_rexmit_rto_commit+0x48>)
 800be6a:	480d      	ldr	r0, [pc, #52]	; (800bea0 <tcp_rexmit_rto_commit+0x4c>)
 800be6c:	f003 ffae 	bl	800fdcc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be76:	2bff      	cmp	r3, #255	; 0xff
 800be78:	d007      	beq.n	800be8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be80:	3301      	adds	r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff fc74 	bl	800b778 <tcp_output>
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	08012b0c 	.word	0x08012b0c
 800be9c:	080131c8 	.word	0x080131c8
 800bea0:	08012b60 	.word	0x08012b60

0800bea4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <tcp_rexmit_rto+0x1c>
 800beb2:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <tcp_rexmit_rto+0x38>)
 800beb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800beb8:	4909      	ldr	r1, [pc, #36]	; (800bee0 <tcp_rexmit_rto+0x3c>)
 800beba:	480a      	ldr	r0, [pc, #40]	; (800bee4 <tcp_rexmit_rto+0x40>)
 800bebc:	f003 ff86 	bl	800fdcc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ff4d 	bl	800bd60 <tcp_rexmit_rto_prepare>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ffc1 	bl	800be54 <tcp_rexmit_rto_commit>
  }
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	08012b0c 	.word	0x08012b0c
 800bee0:	080131ec 	.word	0x080131ec
 800bee4:	08012b60 	.word	0x08012b60

0800bee8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bee8:	b590      	push	{r4, r7, lr}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <tcp_rexmit+0x1c>
 800bef6:	4b2f      	ldr	r3, [pc, #188]	; (800bfb4 <tcp_rexmit+0xcc>)
 800bef8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800befc:	492e      	ldr	r1, [pc, #184]	; (800bfb8 <tcp_rexmit+0xd0>)
 800befe:	482f      	ldr	r0, [pc, #188]	; (800bfbc <tcp_rexmit+0xd4>)
 800bf00:	f003 ff64 	bl	800fdcc <iprintf>

  if (pcb->unacked == NULL) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf0c:	f06f 0305 	mvn.w	r3, #5
 800bf10:	e04c      	b.n	800bfac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	f7ff fe23 	bl	800bb64 <tcp_output_segment_busy>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bf24:	f06f 0305 	mvn.w	r3, #5
 800bf28:	e040      	b.n	800bfac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	336c      	adds	r3, #108	; 0x6c
 800bf36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf38:	e002      	b.n	800bf40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d011      	beq.n	800bf6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f9 fbf2 	bl	800573a <lwip_htonl>
 800bf56:	4604      	mov	r4, r0
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7f9 fbeb 	bl	800573a <lwip_htonl>
 800bf64:	4603      	mov	r3, r0
 800bf66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dbe6      	blt.n	800bf3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d103      	bne.n	800bf8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf90:	2bff      	cmp	r3, #255	; 0xff
 800bf92:	d007      	beq.n	800bfa4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd90      	pop	{r4, r7, pc}
 800bfb4:	08012b0c 	.word	0x08012b0c
 800bfb8:	08013208 	.word	0x08013208
 800bfbc:	08012b60 	.word	0x08012b60

0800bfc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d106      	bne.n	800bfdc <tcp_rexmit_fast+0x1c>
 800bfce:	4b2a      	ldr	r3, [pc, #168]	; (800c078 <tcp_rexmit_fast+0xb8>)
 800bfd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bfd4:	4929      	ldr	r1, [pc, #164]	; (800c07c <tcp_rexmit_fast+0xbc>)
 800bfd6:	482a      	ldr	r0, [pc, #168]	; (800c080 <tcp_rexmit_fast+0xc0>)
 800bfd8:	f003 fef8 	bl	800fdcc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d045      	beq.n	800c070 <tcp_rexmit_fast+0xb0>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8b5b      	ldrh	r3, [r3, #26]
 800bfe8:	f003 0304 	and.w	r3, r3, #4
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d13f      	bne.n	800c070 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff ff79 	bl	800bee8 <tcp_rexmit>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d139      	bne.n	800c070 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c008:	4293      	cmp	r3, r2
 800c00a:	bf28      	it	cs
 800c00c:	4613      	movcs	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	da00      	bge.n	800c016 <tcp_rexmit_fast+0x56>
 800c014:	3301      	adds	r3, #1
 800c016:	105b      	asrs	r3, r3, #1
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c026:	461a      	mov	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	429a      	cmp	r2, r3
 800c030:	d206      	bcs.n	800c040 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	b29a      	uxth	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c04a:	4619      	mov	r1, r3
 800c04c:	0049      	lsls	r1, r1, #1
 800c04e:	440b      	add	r3, r1
 800c050:	b29b      	uxth	r3, r3
 800c052:	4413      	add	r3, r2
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	8b5b      	ldrh	r3, [r3, #26]
 800c060:	f043 0304 	orr.w	r3, r3, #4
 800c064:	b29a      	uxth	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	08012b0c 	.word	0x08012b0c
 800c07c:	08013220 	.word	0x08013220
 800c080:	08012b60 	.word	0x08012b60

0800c084 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	607b      	str	r3, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	817b      	strh	r3, [r7, #10]
 800c092:	4613      	mov	r3, r2
 800c094:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c096:	897a      	ldrh	r2, [r7, #10]
 800c098:	893b      	ldrh	r3, [r7, #8]
 800c09a:	4413      	add	r3, r2
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	3314      	adds	r3, #20
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	2022      	movs	r0, #34	; 0x22
 800c0aa:	f7fa fb65 	bl	8006778 <pbuf_alloc>
 800c0ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d04d      	beq.n	800c152 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c0b6:	897b      	ldrh	r3, [r7, #10]
 800c0b8:	3313      	adds	r3, #19
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	8952      	ldrh	r2, [r2, #10]
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	db06      	blt.n	800c0d0 <tcp_output_alloc_header_common+0x4c>
 800c0c2:	4b26      	ldr	r3, [pc, #152]	; (800c15c <tcp_output_alloc_header_common+0xd8>)
 800c0c4:	f240 7223 	movw	r2, #1827	; 0x723
 800c0c8:	4925      	ldr	r1, [pc, #148]	; (800c160 <tcp_output_alloc_header_common+0xdc>)
 800c0ca:	4826      	ldr	r0, [pc, #152]	; (800c164 <tcp_output_alloc_header_common+0xe0>)
 800c0cc:	f003 fe7e 	bl	800fdcc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c0d6:	8c3b      	ldrh	r3, [r7, #32]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f9 fb19 	bl	8005710 <lwip_htons>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7f9 fb11 	bl	8005710 <lwip_htons>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7f9 fb1c 	bl	800573a <lwip_htonl>
 800c102:	4602      	mov	r2, r0
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c108:	897b      	ldrh	r3, [r7, #10]
 800c10a:	089b      	lsrs	r3, r3, #2
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	3305      	adds	r3, #5
 800c110:	b29b      	uxth	r3, r3
 800c112:	031b      	lsls	r3, r3, #12
 800c114:	b29a      	uxth	r2, r3
 800c116:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	4313      	orrs	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	4618      	mov	r0, r3
 800c122:	f7f9 faf5 	bl	8005710 <lwip_htons>
 800c126:	4603      	mov	r3, r0
 800c128:	461a      	mov	r2, r3
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c12e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c130:	4618      	mov	r0, r3
 800c132:	f7f9 faed 	bl	8005710 <lwip_htons>
 800c136:	4603      	mov	r3, r0
 800c138:	461a      	mov	r2, r3
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2200      	movs	r2, #0
 800c142:	741a      	strb	r2, [r3, #16]
 800c144:	2200      	movs	r2, #0
 800c146:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2200      	movs	r2, #0
 800c14c:	749a      	strb	r2, [r3, #18]
 800c14e:	2200      	movs	r2, #0
 800c150:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c152:	697b      	ldr	r3, [r7, #20]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	08012b0c 	.word	0x08012b0c
 800c160:	08013240 	.word	0x08013240
 800c164:	08012b60 	.word	0x08012b60

0800c168 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c168:	b5b0      	push	{r4, r5, r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af04      	add	r7, sp, #16
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	607b      	str	r3, [r7, #4]
 800c172:	460b      	mov	r3, r1
 800c174:	817b      	strh	r3, [r7, #10]
 800c176:	4613      	mov	r3, r2
 800c178:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <tcp_output_alloc_header+0x26>
 800c180:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <tcp_output_alloc_header+0x70>)
 800c182:	f240 7242 	movw	r2, #1858	; 0x742
 800c186:	4915      	ldr	r1, [pc, #84]	; (800c1dc <tcp_output_alloc_header+0x74>)
 800c188:	4815      	ldr	r0, [pc, #84]	; (800c1e0 <tcp_output_alloc_header+0x78>)
 800c18a:	f003 fe1f 	bl	800fdcc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8adb      	ldrh	r3, [r3, #22]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	8b12      	ldrh	r2, [r2, #24]
 800c19a:	68f9      	ldr	r1, [r7, #12]
 800c19c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c19e:	893d      	ldrh	r5, [r7, #8]
 800c1a0:	897c      	ldrh	r4, [r7, #10]
 800c1a2:	9103      	str	r1, [sp, #12]
 800c1a4:	2110      	movs	r1, #16
 800c1a6:	9102      	str	r1, [sp, #8]
 800c1a8:	9201      	str	r2, [sp, #4]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f7ff ff67 	bl	800c084 <tcp_output_alloc_header_common>
 800c1b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d006      	beq.n	800c1cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c1c6:	441a      	add	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c1cc:	697b      	ldr	r3, [r7, #20]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	08012b0c 	.word	0x08012b0c
 800c1dc:	08013270 	.word	0x08013270
 800c1e0:	08012b60 	.word	0x08012b60

0800c1e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	71fb      	strb	r3, [r7, #7]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <tcp_output_fill_options+0x2e>
 800c204:	4b13      	ldr	r3, [pc, #76]	; (800c254 <tcp_output_fill_options+0x70>)
 800c206:	f240 7256 	movw	r2, #1878	; 0x756
 800c20a:	4913      	ldr	r1, [pc, #76]	; (800c258 <tcp_output_fill_options+0x74>)
 800c20c:	4813      	ldr	r0, [pc, #76]	; (800c25c <tcp_output_fill_options+0x78>)
 800c20e:	f003 fddd 	bl	800fdcc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	3314      	adds	r3, #20
 800c21c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	f103 0214 	add.w	r2, r3, #20
 800c224:	8bfb      	ldrh	r3, [r7, #30]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4619      	mov	r1, r3
 800c22a:	79fb      	ldrb	r3, [r7, #7]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	f003 0304 	and.w	r3, r3, #4
 800c232:	440b      	add	r3, r1
 800c234:	4413      	add	r3, r2
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d006      	beq.n	800c24a <tcp_output_fill_options+0x66>
 800c23c:	4b05      	ldr	r3, [pc, #20]	; (800c254 <tcp_output_fill_options+0x70>)
 800c23e:	f240 7275 	movw	r2, #1909	; 0x775
 800c242:	4907      	ldr	r1, [pc, #28]	; (800c260 <tcp_output_fill_options+0x7c>)
 800c244:	4805      	ldr	r0, [pc, #20]	; (800c25c <tcp_output_fill_options+0x78>)
 800c246:	f003 fdc1 	bl	800fdcc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c24a:	bf00      	nop
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	08012b0c 	.word	0x08012b0c
 800c258:	08013298 	.word	0x08013298
 800c25c:	08012b60 	.word	0x08012b60
 800c260:	08013190 	.word	0x08013190

0800c264 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08a      	sub	sp, #40	; 0x28
 800c268:	af04      	add	r7, sp, #16
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <tcp_output_control_segment+0x22>
 800c278:	4b1c      	ldr	r3, [pc, #112]	; (800c2ec <tcp_output_control_segment+0x88>)
 800c27a:	f240 7287 	movw	r2, #1927	; 0x787
 800c27e:	491c      	ldr	r1, [pc, #112]	; (800c2f0 <tcp_output_control_segment+0x8c>)
 800c280:	481c      	ldr	r0, [pc, #112]	; (800c2f4 <tcp_output_control_segment+0x90>)
 800c282:	f003 fda3 	bl	800fdcc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	6879      	ldr	r1, [r7, #4]
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f7fe ff2e 	bl	800b0ec <tcp_route>
 800c290:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c298:	23fc      	movs	r3, #252	; 0xfc
 800c29a:	75fb      	strb	r3, [r7, #23]
 800c29c:	e01c      	b.n	800c2d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d006      	beq.n	800c2b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	7adb      	ldrb	r3, [r3, #11]
 800c2a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	7a9b      	ldrb	r3, [r3, #10]
 800c2ae:	757b      	strb	r3, [r7, #21]
 800c2b0:	e003      	b.n	800c2ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c2b2:	23ff      	movs	r3, #255	; 0xff
 800c2b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2ba:	7dba      	ldrb	r2, [r7, #22]
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	9302      	str	r3, [sp, #8]
 800c2c0:	2306      	movs	r3, #6
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	7d7b      	ldrb	r3, [r7, #21]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f002 fcea 	bl	800eca8 <ip4_output_if>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c2d8:	68b8      	ldr	r0, [r7, #8]
 800c2da:	f7fa fd31 	bl	8006d40 <pbuf_free>
  return err;
 800c2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	08012b0c 	.word	0x08012b0c
 800c2f0:	080132c0 	.word	0x080132c0
 800c2f4:	08012b60 	.word	0x08012b60

0800c2f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c2f8:	b590      	push	{r4, r7, lr}
 800c2fa:	b08b      	sub	sp, #44	; 0x2c
 800c2fc:	af04      	add	r7, sp, #16
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <tcp_rst+0x22>
 800c30c:	4b1f      	ldr	r3, [pc, #124]	; (800c38c <tcp_rst+0x94>)
 800c30e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c312:	491f      	ldr	r1, [pc, #124]	; (800c390 <tcp_rst+0x98>)
 800c314:	481f      	ldr	r0, [pc, #124]	; (800c394 <tcp_rst+0x9c>)
 800c316:	f003 fd59 	bl	800fdcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d106      	bne.n	800c32e <tcp_rst+0x36>
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <tcp_rst+0x94>)
 800c322:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c326:	491c      	ldr	r1, [pc, #112]	; (800c398 <tcp_rst+0xa0>)
 800c328:	481a      	ldr	r0, [pc, #104]	; (800c394 <tcp_rst+0x9c>)
 800c32a:	f003 fd4f 	bl	800fdcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c32e:	2300      	movs	r3, #0
 800c330:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c332:	f246 0308 	movw	r3, #24584	; 0x6008
 800c336:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	b29c      	uxth	r4, r3
 800c33c:	68b8      	ldr	r0, [r7, #8]
 800c33e:	f7f9 f9fc 	bl	800573a <lwip_htonl>
 800c342:	4602      	mov	r2, r0
 800c344:	8abb      	ldrh	r3, [r7, #20]
 800c346:	9303      	str	r3, [sp, #12]
 800c348:	2314      	movs	r3, #20
 800c34a:	9302      	str	r3, [sp, #8]
 800c34c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	4613      	mov	r3, r2
 800c356:	2200      	movs	r2, #0
 800c358:	4621      	mov	r1, r4
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff fe92 	bl	800c084 <tcp_output_alloc_header_common>
 800c360:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00c      	beq.n	800c382 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	2200      	movs	r2, #0
 800c36c:	6939      	ldr	r1, [r7, #16]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7ff ff38 	bl	800c1e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	6939      	ldr	r1, [r7, #16]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff ff72 	bl	800c264 <tcp_output_control_segment>
 800c380:	e000      	b.n	800c384 <tcp_rst+0x8c>
    return;
 800c382:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	bd90      	pop	{r4, r7, pc}
 800c38a:	bf00      	nop
 800c38c:	08012b0c 	.word	0x08012b0c
 800c390:	080132ec 	.word	0x080132ec
 800c394:	08012b60 	.word	0x08012b60
 800c398:	08013308 	.word	0x08013308

0800c39c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <tcp_send_empty_ack+0x24>
 800c3b2:	4b28      	ldr	r3, [pc, #160]	; (800c454 <tcp_send_empty_ack+0xb8>)
 800c3b4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c3b8:	4927      	ldr	r1, [pc, #156]	; (800c458 <tcp_send_empty_ack+0xbc>)
 800c3ba:	4828      	ldr	r0, [pc, #160]	; (800c45c <tcp_send_empty_ack+0xc0>)
 800c3bc:	f003 fd06 	bl	800fdcc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 0304 	and.w	r3, r3, #4
 800c3ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c3cc:	7d7b      	ldrb	r3, [r7, #21]
 800c3ce:	b29c      	uxth	r4, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f9 f9b0 	bl	800573a <lwip_htonl>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4621      	mov	r1, r4
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff fec1 	bl	800c168 <tcp_output_alloc_header>
 800c3e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d109      	bne.n	800c402 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8b5b      	ldrh	r3, [r3, #26]
 800c3f2:	f043 0303 	orr.w	r3, r3, #3
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c3fc:	f06f 0301 	mvn.w	r3, #1
 800c400:	e023      	b.n	800c44a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c402:	7dbb      	ldrb	r3, [r7, #22]
 800c404:	7dfa      	ldrb	r2, [r7, #23]
 800c406:	6939      	ldr	r1, [r7, #16]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff feeb 	bl	800c1e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	3304      	adds	r3, #4
 800c414:	6939      	ldr	r1, [r7, #16]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff ff24 	bl	800c264 <tcp_output_control_segment>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d007      	beq.n	800c438 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8b5b      	ldrh	r3, [r3, #26]
 800c42c:	f043 0303 	orr.w	r3, r3, #3
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	835a      	strh	r2, [r3, #26]
 800c436:	e006      	b.n	800c446 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	8b5b      	ldrh	r3, [r3, #26]
 800c43c:	f023 0303 	bic.w	r3, r3, #3
 800c440:	b29a      	uxth	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd90      	pop	{r4, r7, pc}
 800c452:	bf00      	nop
 800c454:	08012b0c 	.word	0x08012b0c
 800c458:	08013324 	.word	0x08013324
 800c45c:	08012b60 	.word	0x08012b60

0800c460 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c468:	2300      	movs	r3, #0
 800c46a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <tcp_keepalive+0x20>
 800c472:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <tcp_keepalive+0x74>)
 800c474:	f640 0224 	movw	r2, #2084	; 0x824
 800c478:	4917      	ldr	r1, [pc, #92]	; (800c4d8 <tcp_keepalive+0x78>)
 800c47a:	4818      	ldr	r0, [pc, #96]	; (800c4dc <tcp_keepalive+0x7c>)
 800c47c:	f003 fca6 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c480:	7abb      	ldrb	r3, [r7, #10]
 800c482:	b29c      	uxth	r4, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c488:	3b01      	subs	r3, #1
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f9 f955 	bl	800573a <lwip_htonl>
 800c490:	4603      	mov	r3, r0
 800c492:	2200      	movs	r2, #0
 800c494:	4621      	mov	r1, r4
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff fe66 	bl	800c168 <tcp_output_alloc_header>
 800c49c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d102      	bne.n	800c4aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a8:	e010      	b.n	800c4cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4aa:	7abb      	ldrb	r3, [r7, #10]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	68f9      	ldr	r1, [r7, #12]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff fe97 	bl	800c1e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	68f9      	ldr	r1, [r7, #12]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff fed0 	bl	800c264 <tcp_output_control_segment>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c4c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd90      	pop	{r4, r7, pc}
 800c4d4:	08012b0c 	.word	0x08012b0c
 800c4d8:	08013344 	.word	0x08013344
 800c4dc:	08012b60 	.word	0x08012b60

0800c4e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	b08b      	sub	sp, #44	; 0x2c
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_zero_window_probe+0x20>
 800c4f2:	4b4d      	ldr	r3, [pc, #308]	; (800c628 <tcp_zero_window_probe+0x148>)
 800c4f4:	f640 024f 	movw	r2, #2127	; 0x84f
 800c4f8:	494c      	ldr	r1, [pc, #304]	; (800c62c <tcp_zero_window_probe+0x14c>)
 800c4fa:	484d      	ldr	r0, [pc, #308]	; (800c630 <tcp_zero_window_probe+0x150>)
 800c4fc:	f003 fc66 	bl	800fdcc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c504:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	e087      	b.n	800c620 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c516:	2bff      	cmp	r3, #255	; 0xff
 800c518:	d007      	beq.n	800c52a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c520:	3301      	adds	r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	899b      	ldrh	r3, [r3, #12]
 800c530:	b29b      	uxth	r3, r3
 800c532:	4618      	mov	r0, r3
 800c534:	f7f9 f8ec 	bl	8005710 <lwip_htons>
 800c538:	4603      	mov	r3, r0
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <tcp_zero_window_probe+0x70>
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	891b      	ldrh	r3, [r3, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <tcp_zero_window_probe+0x70>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <tcp_zero_window_probe+0x72>
 800c550:	2300      	movs	r3, #0
 800c552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bf0c      	ite	eq
 800c55e:	2301      	moveq	r3, #1
 800c560:	2300      	movne	r3, #0
 800c562:	b2db      	uxtb	r3, r3
 800c564:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c566:	7cfb      	ldrb	r3, [r7, #19]
 800c568:	b299      	uxth	r1, r3
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	8c3a      	ldrh	r2, [r7, #32]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff fdf8 	bl	800c168 <tcp_output_alloc_header>
 800c578:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c580:	f04f 33ff 	mov.w	r3, #4294967295
 800c584:	e04c      	b.n	800c620 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800c58c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	899b      	ldrh	r3, [r3, #12]
 800c598:	b29b      	uxth	r3, r3
 800c59a:	b21b      	sxth	r3, r3
 800c59c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5a0:	b21c      	sxth	r4, r3
 800c5a2:	2011      	movs	r0, #17
 800c5a4:	f7f9 f8b4 	bl	8005710 <lwip_htons>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	4323      	orrs	r3, r4
 800c5ae:	b21b      	sxth	r3, r3
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	819a      	strh	r2, [r3, #12]
 800c5b6:	e010      	b.n	800c5da <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	3314      	adds	r3, #20
 800c5be:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	6858      	ldr	r0, [r3, #4]
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	891a      	ldrh	r2, [r3, #8]
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	891b      	ldrh	r3, [r3, #8]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	6979      	ldr	r1, [r7, #20]
 800c5d6:	f7fa fdad 	bl	8007134 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f9 f8aa 	bl	800573a <lwip_htonl>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	da02      	bge.n	800c5fe <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5fe:	7cfb      	ldrb	r3, [r7, #19]
 800c600:	2200      	movs	r2, #0
 800c602:	69f9      	ldr	r1, [r7, #28]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff fded 	bl	800c1e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3304      	adds	r3, #4
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff fe26 	bl	800c264 <tcp_output_control_segment>
 800c618:	4603      	mov	r3, r0
 800c61a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c61c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c620:	4618      	mov	r0, r3
 800c622:	372c      	adds	r7, #44	; 0x2c
 800c624:	46bd      	mov	sp, r7
 800c626:	bd90      	pop	{r4, r7, pc}
 800c628:	08012b0c 	.word	0x08012b0c
 800c62c:	08013360 	.word	0x08013360
 800c630:	08012b60 	.word	0x08012b60

0800c634 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c63c:	f7fa fefa 	bl	8007434 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <tcpip_tcp_timer+0x38>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d103      	bne.n	800c650 <tcpip_tcp_timer+0x1c>
 800c648:	4b09      	ldr	r3, [pc, #36]	; (800c670 <tcpip_tcp_timer+0x3c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c650:	2200      	movs	r2, #0
 800c652:	4908      	ldr	r1, [pc, #32]	; (800c674 <tcpip_tcp_timer+0x40>)
 800c654:	20fa      	movs	r0, #250	; 0xfa
 800c656:	f000 f8f3 	bl	800c840 <sys_timeout>
 800c65a:	e003      	b.n	800c664 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <tcpip_tcp_timer+0x44>)
 800c65e:	2200      	movs	r2, #0
 800c660:	601a      	str	r2, [r3, #0]
  }
}
 800c662:	bf00      	nop
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20008a90 	.word	0x20008a90
 800c670:	20008a94 	.word	0x20008a94
 800c674:	0800c635 	.word	0x0800c635
 800c678:	20008ae0 	.word	0x20008ae0

0800c67c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c680:	4b0a      	ldr	r3, [pc, #40]	; (800c6ac <tcp_timer_needed+0x30>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10f      	bne.n	800c6a8 <tcp_timer_needed+0x2c>
 800c688:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <tcp_timer_needed+0x34>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d103      	bne.n	800c698 <tcp_timer_needed+0x1c>
 800c690:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <tcp_timer_needed+0x38>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d007      	beq.n	800c6a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <tcp_timer_needed+0x30>)
 800c69a:	2201      	movs	r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4905      	ldr	r1, [pc, #20]	; (800c6b8 <tcp_timer_needed+0x3c>)
 800c6a2:	20fa      	movs	r0, #250	; 0xfa
 800c6a4:	f000 f8cc 	bl	800c840 <sys_timeout>
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	20008ae0 	.word	0x20008ae0
 800c6b0:	20008a90 	.word	0x20008a90
 800c6b4:	20008a94 	.word	0x20008a94
 800c6b8:	0800c635 	.word	0x0800c635

0800c6bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c6c8:	2006      	movs	r0, #6
 800c6ca:	f7f9 fc77 	bl	8005fbc <memp_malloc>
 800c6ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d151      	bne.n	800c780 <sys_timeout_abs+0xc4>
 800c6dc:	4b2a      	ldr	r3, [pc, #168]	; (800c788 <sys_timeout_abs+0xcc>)
 800c6de:	22be      	movs	r2, #190	; 0xbe
 800c6e0:	492a      	ldr	r1, [pc, #168]	; (800c78c <sys_timeout_abs+0xd0>)
 800c6e2:	482b      	ldr	r0, [pc, #172]	; (800c790 <sys_timeout_abs+0xd4>)
 800c6e4:	f003 fb72 	bl	800fdcc <iprintf>
    return;
 800c6e8:	e04a      	b.n	800c780 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c702:	4b24      	ldr	r3, [pc, #144]	; (800c794 <sys_timeout_abs+0xd8>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c70a:	4a22      	ldr	r2, [pc, #136]	; (800c794 <sys_timeout_abs+0xd8>)
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	6013      	str	r3, [r2, #0]
    return;
 800c710:	e037      	b.n	800c782 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	4b1f      	ldr	r3, [pc, #124]	; (800c794 <sys_timeout_abs+0xd8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	0fdb      	lsrs	r3, r3, #31
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d007      	beq.n	800c73a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <sys_timeout_abs+0xd8>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c732:	4a18      	ldr	r2, [pc, #96]	; (800c794 <sys_timeout_abs+0xd8>)
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	e023      	b.n	800c782 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c73a:	4b16      	ldr	r3, [pc, #88]	; (800c794 <sys_timeout_abs+0xd8>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e01a      	b.n	800c778 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00b      	beq.n	800c762 <sys_timeout_abs+0xa6>
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	0fdb      	lsrs	r3, r3, #31
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	601a      	str	r2, [r3, #0]
        break;
 800c770:	e007      	b.n	800c782 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e1      	bne.n	800c742 <sys_timeout_abs+0x86>
 800c77e:	e000      	b.n	800c782 <sys_timeout_abs+0xc6>
    return;
 800c780:	bf00      	nop
      }
    }
  }
}
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	08013384 	.word	0x08013384
 800c78c:	080133b8 	.word	0x080133b8
 800c790:	080133f8 	.word	0x080133f8
 800c794:	20008ad8 	.word	0x20008ad8

0800c798 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	4798      	blx	r3

  now = sys_now();
 800c7aa:	f7f8 fee9 	bl	8005580 <sys_now>
 800c7ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <lwip_cyclic_timer+0x5c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	0fdb      	lsrs	r3, r3, #31
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	4907      	ldr	r1, [pc, #28]	; (800c7f8 <lwip_cyclic_timer+0x60>)
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff ff6e 	bl	800c6bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c7e0:	e004      	b.n	800c7ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	4904      	ldr	r1, [pc, #16]	; (800c7f8 <lwip_cyclic_timer+0x60>)
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7ff ff68 	bl	800c6bc <sys_timeout_abs>
}
 800c7ec:	bf00      	nop
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20008adc 	.word	0x20008adc
 800c7f8:	0800c799 	.word	0x0800c799

0800c7fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c802:	2301      	movs	r3, #1
 800c804:	607b      	str	r3, [r7, #4]
 800c806:	e00e      	b.n	800c826 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c808:	4a0b      	ldr	r2, [pc, #44]	; (800c838 <sys_timeouts_init+0x3c>)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	4a08      	ldr	r2, [pc, #32]	; (800c838 <sys_timeouts_init+0x3c>)
 800c816:	4413      	add	r3, r2
 800c818:	461a      	mov	r2, r3
 800c81a:	4908      	ldr	r1, [pc, #32]	; (800c83c <sys_timeouts_init+0x40>)
 800c81c:	f000 f810 	bl	800c840 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3301      	adds	r3, #1
 800c824:	607b      	str	r3, [r7, #4]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d9ed      	bls.n	800c808 <sys_timeouts_init+0xc>
  }
}
 800c82c:	bf00      	nop
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	0801434c 	.word	0x0801434c
 800c83c:	0800c799 	.word	0x0800c799

0800c840 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c852:	d306      	bcc.n	800c862 <sys_timeout+0x22>
 800c854:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <sys_timeout+0x40>)
 800c856:	f240 1229 	movw	r2, #297	; 0x129
 800c85a:	490a      	ldr	r1, [pc, #40]	; (800c884 <sys_timeout+0x44>)
 800c85c:	480a      	ldr	r0, [pc, #40]	; (800c888 <sys_timeout+0x48>)
 800c85e:	f003 fab5 	bl	800fdcc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c862:	f7f8 fe8d 	bl	8005580 <sys_now>
 800c866:	4602      	mov	r2, r0
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	4413      	add	r3, r2
 800c86c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	6978      	ldr	r0, [r7, #20]
 800c874:	f7ff ff22 	bl	800c6bc <sys_timeout_abs>
#endif
}
 800c878:	bf00      	nop
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08013384 	.word	0x08013384
 800c884:	08013420 	.word	0x08013420
 800c888:	080133f8 	.word	0x080133f8

0800c88c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c892:	f7f8 fe75 	bl	8005580 <sys_now>
 800c896:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c898:	4b1a      	ldr	r3, [pc, #104]	; (800c904 <sys_check_timeouts+0x78>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <sys_check_timeouts+0x1a>
 800c8a2:	f7f9 ff13 	bl	80066cc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c8a6:	4b18      	ldr	r3, [pc, #96]	; (800c908 <sys_check_timeouts+0x7c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d022      	beq.n	800c8f8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	0fdb      	lsrs	r3, r3, #31
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d11a      	bne.n	800c8fc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a0f      	ldr	r2, [pc, #60]	; (800c908 <sys_check_timeouts+0x7c>)
 800c8cc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	4a0b      	ldr	r2, [pc, #44]	; (800c90c <sys_check_timeouts+0x80>)
 800c8e0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c8e2:	68b9      	ldr	r1, [r7, #8]
 800c8e4:	2006      	movs	r0, #6
 800c8e6:	f7f9 fbb5 	bl	8006054 <memp_free>
    if (handler != NULL) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d0d3      	beq.n	800c898 <sys_check_timeouts+0xc>
      handler(arg);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6838      	ldr	r0, [r7, #0]
 800c8f4:	4798      	blx	r3
  do {
 800c8f6:	e7cf      	b.n	800c898 <sys_check_timeouts+0xc>
      return;
 800c8f8:	bf00      	nop
 800c8fa:	e000      	b.n	800c8fe <sys_check_timeouts+0x72>
      return;
 800c8fc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	20008a81 	.word	0x20008a81
 800c908:	20008ad8 	.word	0x20008ad8
 800c90c:	20008adc 	.word	0x20008adc

0800c910 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c914:	f003 fafe 	bl	800ff14 <rand>
 800c918:	4603      	mov	r3, r0
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c920:	b29b      	uxth	r3, r3
 800c922:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c926:	b29a      	uxth	r2, r3
 800c928:	4b01      	ldr	r3, [pc, #4]	; (800c930 <udp_init+0x20>)
 800c92a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c92c:	bf00      	nop
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20000010 	.word	0x20000010

0800c934 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c93e:	4b17      	ldr	r3, [pc, #92]	; (800c99c <udp_new_port+0x68>)
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	b291      	uxth	r1, r2
 800c946:	4a15      	ldr	r2, [pc, #84]	; (800c99c <udp_new_port+0x68>)
 800c948:	8011      	strh	r1, [r2, #0]
 800c94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c94e:	4293      	cmp	r3, r2
 800c950:	d103      	bne.n	800c95a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <udp_new_port+0x68>)
 800c954:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c958:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c95a:	4b11      	ldr	r3, [pc, #68]	; (800c9a0 <udp_new_port+0x6c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	603b      	str	r3, [r7, #0]
 800c960:	e011      	b.n	800c986 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	8a5a      	ldrh	r2, [r3, #18]
 800c966:	4b0d      	ldr	r3, [pc, #52]	; (800c99c <udp_new_port+0x68>)
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d108      	bne.n	800c980 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c96e:	88fb      	ldrh	r3, [r7, #6]
 800c970:	3301      	adds	r3, #1
 800c972:	80fb      	strh	r3, [r7, #6]
 800c974:	88fb      	ldrh	r3, [r7, #6]
 800c976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c97a:	d3e0      	bcc.n	800c93e <udp_new_port+0xa>
        return 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e007      	b.n	800c990 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	603b      	str	r3, [r7, #0]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1ea      	bne.n	800c962 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c98c:	4b03      	ldr	r3, [pc, #12]	; (800c99c <udp_new_port+0x68>)
 800c98e:	881b      	ldrh	r3, [r3, #0]
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	20000010 	.word	0x20000010
 800c9a0:	20008ae4 	.word	0x20008ae4

0800c9a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d105      	bne.n	800c9c4 <udp_input_local_match+0x20>
 800c9b8:	4b27      	ldr	r3, [pc, #156]	; (800ca58 <udp_input_local_match+0xb4>)
 800c9ba:	2287      	movs	r2, #135	; 0x87
 800c9bc:	4927      	ldr	r1, [pc, #156]	; (800ca5c <udp_input_local_match+0xb8>)
 800c9be:	4828      	ldr	r0, [pc, #160]	; (800ca60 <udp_input_local_match+0xbc>)
 800c9c0:	f003 fa04 	bl	800fdcc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <udp_input_local_match+0x32>
 800c9ca:	4b23      	ldr	r3, [pc, #140]	; (800ca58 <udp_input_local_match+0xb4>)
 800c9cc:	2288      	movs	r2, #136	; 0x88
 800c9ce:	4925      	ldr	r1, [pc, #148]	; (800ca64 <udp_input_local_match+0xc0>)
 800c9d0:	4823      	ldr	r0, [pc, #140]	; (800ca60 <udp_input_local_match+0xbc>)
 800c9d2:	f003 f9fb 	bl	800fdcc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	7a1b      	ldrb	r3, [r3, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00b      	beq.n	800c9f6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	7a1a      	ldrb	r2, [r3, #8]
 800c9e2:	4b21      	ldr	r3, [pc, #132]	; (800ca68 <udp_input_local_match+0xc4>)
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d001      	beq.n	800c9f6 <udp_input_local_match+0x52>
    return 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e02b      	b.n	800ca4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d018      	beq.n	800ca2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d013      	beq.n	800ca2a <udp_input_local_match+0x86>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00f      	beq.n	800ca2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca0a:	4b17      	ldr	r3, [pc, #92]	; (800ca68 <udp_input_local_match+0xc4>)
 800ca0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca12:	d00a      	beq.n	800ca2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <udp_input_local_match+0xc4>)
 800ca1a:	695b      	ldr	r3, [r3, #20]
 800ca1c:	405a      	eors	r2, r3
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	3308      	adds	r3, #8
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d110      	bne.n	800ca4c <udp_input_local_match+0xa8>
          return 1;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e00f      	b.n	800ca4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d009      	beq.n	800ca48 <udp_input_local_match+0xa4>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d005      	beq.n	800ca48 <udp_input_local_match+0xa4>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <udp_input_local_match+0xc4>)
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d101      	bne.n	800ca4c <udp_input_local_match+0xa8>
        return 1;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e000      	b.n	800ca4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	0801346c 	.word	0x0801346c
 800ca5c:	0801349c 	.word	0x0801349c
 800ca60:	080134c0 	.word	0x080134c0
 800ca64:	080134e8 	.word	0x080134e8
 800ca68:	20003314 	.word	0x20003314

0800ca6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b08d      	sub	sp, #52	; 0x34
 800ca70:	af02      	add	r7, sp, #8
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d105      	bne.n	800ca8c <udp_input+0x20>
 800ca80:	4b95      	ldr	r3, [pc, #596]	; (800ccd8 <udp_input+0x26c>)
 800ca82:	22cf      	movs	r2, #207	; 0xcf
 800ca84:	4995      	ldr	r1, [pc, #596]	; (800ccdc <udp_input+0x270>)
 800ca86:	4896      	ldr	r0, [pc, #600]	; (800cce0 <udp_input+0x274>)
 800ca88:	f003 f9a0 	bl	800fdcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <udp_input+0x32>
 800ca92:	4b91      	ldr	r3, [pc, #580]	; (800ccd8 <udp_input+0x26c>)
 800ca94:	22d0      	movs	r2, #208	; 0xd0
 800ca96:	4993      	ldr	r1, [pc, #588]	; (800cce4 <udp_input+0x278>)
 800ca98:	4891      	ldr	r0, [pc, #580]	; (800cce0 <udp_input+0x274>)
 800ca9a:	f003 f997 	bl	800fdcc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	895b      	ldrh	r3, [r3, #10]
 800caa2:	2b07      	cmp	r3, #7
 800caa4:	d809      	bhi.n	800caba <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	891b      	ldrh	r3, [r3, #8]
 800caaa:	4619      	mov	r1, r3
 800caac:	488e      	ldr	r0, [pc, #568]	; (800cce8 <udp_input+0x27c>)
 800caae:	f003 f98d 	bl	800fdcc <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7fa f944 	bl	8006d40 <pbuf_free>
    goto end;
 800cab8:	e18d      	b.n	800cdd6 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cac0:	4b8a      	ldr	r3, [pc, #552]	; (800ccec <udp_input+0x280>)
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	4a89      	ldr	r2, [pc, #548]	; (800ccec <udp_input+0x280>)
 800cac6:	6812      	ldr	r2, [r2, #0]
 800cac8:	4611      	mov	r1, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f002 f9c4 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800cad0:	4603      	mov	r3, r0
 800cad2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	891b      	ldrh	r3, [r3, #8]
 800cad8:	4619      	mov	r1, r3
 800cada:	4885      	ldr	r0, [pc, #532]	; (800ccf0 <udp_input+0x284>)
 800cadc:	f003 f976 	bl	800fdcc <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7f8 fe12 	bl	8005710 <lwip_htons>
 800caec:	4603      	mov	r3, r0
 800caee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	885b      	ldrh	r3, [r3, #2]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f8 fe0a 	bl	8005710 <lwip_htons>
 800cafc:	4603      	mov	r3, r0
 800cafe:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800cb00:	6978      	ldr	r0, [r7, #20]
 800cb02:	f000 fdc1 	bl	800d688 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 800cb06:	487b      	ldr	r0, [pc, #492]	; (800ccf4 <udp_input+0x288>)
 800cb08:	f003 f960 	bl	800fdcc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 800cb0c:	4b77      	ldr	r3, [pc, #476]	; (800ccec <udp_input+0x280>)
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	4619      	mov	r1, r3
 800cb14:	4b75      	ldr	r3, [pc, #468]	; (800ccec <udp_input+0x280>)
 800cb16:	695b      	ldr	r3, [r3, #20]
 800cb18:	0a1b      	lsrs	r3, r3, #8
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4b73      	ldr	r3, [pc, #460]	; (800ccec <udp_input+0x280>)
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	0c1b      	lsrs	r3, r3, #16
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	4618      	mov	r0, r3
 800cb28:	4b70      	ldr	r3, [pc, #448]	; (800ccec <udp_input+0x280>)
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	0e1b      	lsrs	r3, r3, #24
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	4603      	mov	r3, r0
 800cb34:	4870      	ldr	r0, [pc, #448]	; (800ccf8 <udp_input+0x28c>)
 800cb36:	f003 f949 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	885b      	ldrh	r3, [r3, #2]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f8 fde5 	bl	8005710 <lwip_htons>
 800cb46:	4603      	mov	r3, r0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	486c      	ldr	r0, [pc, #432]	; (800ccfc <udp_input+0x290>)
 800cb4c:	f003 f93e 	bl	800fdcc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 800cb50:	4b66      	ldr	r3, [pc, #408]	; (800ccec <udp_input+0x280>)
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	4619      	mov	r1, r3
 800cb58:	4b64      	ldr	r3, [pc, #400]	; (800ccec <udp_input+0x280>)
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	0a1b      	lsrs	r3, r3, #8
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	461a      	mov	r2, r3
 800cb62:	4b62      	ldr	r3, [pc, #392]	; (800ccec <udp_input+0x280>)
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	0c1b      	lsrs	r3, r3, #16
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	4b5f      	ldr	r3, [pc, #380]	; (800ccec <udp_input+0x280>)
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	0e1b      	lsrs	r3, r3, #24
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	4603      	mov	r3, r0
 800cb78:	485f      	ldr	r0, [pc, #380]	; (800ccf8 <udp_input+0x28c>)
 800cb7a:	f003 f927 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f8 fdc3 	bl	8005710 <lwip_htons>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	485c      	ldr	r0, [pc, #368]	; (800cd00 <udp_input+0x294>)
 800cb90:	f003 f91c 	bl	800fdcc <iprintf>

  pcb = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cba0:	4b58      	ldr	r3, [pc, #352]	; (800cd04 <udp_input+0x298>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
 800cba6:	e091      	b.n	800cccc <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 800cba8:	4857      	ldr	r0, [pc, #348]	; (800cd08 <udp_input+0x29c>)
 800cbaa:	f003 f90f 	bl	800fdcc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	0a1b      	lsrs	r3, r3, #8
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	4618      	mov	r0, r3
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	0e1b      	lsrs	r3, r3, #24
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	4848      	ldr	r0, [pc, #288]	; (800ccf8 <udp_input+0x28c>)
 800cbd8:	f003 f8f8 	bl	800fdcc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	8a5b      	ldrh	r3, [r3, #18]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4846      	ldr	r0, [pc, #280]	; (800ccfc <udp_input+0x290>)
 800cbe4:	f003 f8f2 	bl	800fdcc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	0a1b      	lsrs	r3, r3, #8
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	0c1b      	lsrs	r3, r3, #16
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	4618      	mov	r0, r3
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	0e1b      	lsrs	r3, r3, #24
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	4603      	mov	r3, r0
 800cc10:	4839      	ldr	r0, [pc, #228]	; (800ccf8 <udp_input+0x28c>)
 800cc12:	f003 f8db 	bl	800fdcc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	8a9b      	ldrh	r3, [r3, #20]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	4838      	ldr	r0, [pc, #224]	; (800cd00 <udp_input+0x294>)
 800cc1e:	f003 f8d5 	bl	800fdcc <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	8a5b      	ldrh	r3, [r3, #18]
 800cc26:	89fa      	ldrh	r2, [r7, #14]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d14a      	bne.n	800ccc2 <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cc2c:	7cfb      	ldrb	r3, [r7, #19]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc34:	f7ff feb6 	bl	800c9a4 <udp_input_local_match>
 800cc38:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d041      	beq.n	800ccc2 <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	7c1b      	ldrb	r3, [r3, #16]
 800cc42:	f003 0304 	and.w	r3, r3, #4
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d11d      	bne.n	800cc86 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	e017      	b.n	800cc86 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cc56:	7cfb      	ldrb	r3, [r7, #19]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d014      	beq.n	800cc86 <udp_input+0x21a>
 800cc5c:	4b23      	ldr	r3, [pc, #140]	; (800ccec <udp_input+0x280>)
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc64:	d10f      	bne.n	800cc86 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d008      	beq.n	800cc86 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d101      	bne.n	800cc86 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	8a9b      	ldrh	r3, [r3, #20]
 800cc8a:	8a3a      	ldrh	r2, [r7, #16]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d118      	bne.n	800ccc2 <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d005      	beq.n	800cca4 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	4b13      	ldr	r3, [pc, #76]	; (800ccec <udp_input+0x280>)
 800cc9e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d10e      	bne.n	800ccc2 <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d030      	beq.n	800cd0c <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	68da      	ldr	r2, [r3, #12]
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ccb2:	4b14      	ldr	r3, [pc, #80]	; (800cd04 <udp_input+0x298>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ccba:	4a12      	ldr	r2, [pc, #72]	; (800cd04 <udp_input+0x298>)
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ccc0:	e024      	b.n	800cd0c <udp_input+0x2a0>
      }
    }

    prev = pcb;
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f47f af6a 	bne.w	800cba8 <udp_input+0x13c>
 800ccd4:	e01b      	b.n	800cd0e <udp_input+0x2a2>
 800ccd6:	bf00      	nop
 800ccd8:	0801346c 	.word	0x0801346c
 800ccdc:	08013510 	.word	0x08013510
 800cce0:	080134c0 	.word	0x080134c0
 800cce4:	08013528 	.word	0x08013528
 800cce8:	08013544 	.word	0x08013544
 800ccec:	20003314 	.word	0x20003314
 800ccf0:	0801357c 	.word	0x0801357c
 800ccf4:	080135a8 	.word	0x080135a8
 800ccf8:	080135b0 	.word	0x080135b0
 800ccfc:	080135c0 	.word	0x080135c0
 800cd00:	080135d0 	.word	0x080135d0
 800cd04:	20008ae4 	.word	0x20008ae4
 800cd08:	080135d8 	.word	0x080135d8
        break;
 800cd0c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <udp_input+0x2ac>
    pcb = uncon_pcb;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <udp_input+0x2b8>
    for_us = 1;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	76fb      	strb	r3, [r7, #27]
 800cd22:	e00a      	b.n	800cd3a <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3304      	adds	r3, #4
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b2d      	ldr	r3, [pc, #180]	; (800cde0 <udp_input+0x374>)
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	bf0c      	ite	eq
 800cd32:	2301      	moveq	r3, #1
 800cd34:	2300      	movne	r3, #0
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cd3a:	7efb      	ldrb	r3, [r7, #27]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d047      	beq.n	800cdd0 <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 800cd40:	4828      	ldr	r0, [pc, #160]	; (800cde4 <udp_input+0x378>)
 800cd42:	f003 f8df 	bl	800ff04 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cd46:	2108      	movs	r1, #8
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7f9 ff73 	bl	8006c34 <pbuf_remove_header>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00a      	beq.n	800cd6a <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cd54:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <udp_input+0x37c>)
 800cd56:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cd5a:	4924      	ldr	r1, [pc, #144]	; (800cdec <udp_input+0x380>)
 800cd5c:	4824      	ldr	r0, [pc, #144]	; (800cdf0 <udp_input+0x384>)
 800cd5e:	f003 f835 	bl	800fdcc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7f9 ffec 	bl	8006d40 <pbuf_free>
      goto end;
 800cd68:	e035      	b.n	800cdd6 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d012      	beq.n	800cd96 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	699c      	ldr	r4, [r3, #24]
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	69d8      	ldr	r0, [r3, #28]
 800cd80:	8a3b      	ldrh	r3, [r7, #16]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4b1b      	ldr	r3, [pc, #108]	; (800cdf4 <udp_input+0x388>)
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cd8c:	e024      	b.n	800cdd8 <udp_input+0x36c>
        pbuf_free(p);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7f9 ffd6 	bl	8006d40 <pbuf_free>
        goto end;
 800cd94:	e01f      	b.n	800cdd6 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 800cd96:	4818      	ldr	r0, [pc, #96]	; (800cdf8 <udp_input+0x38c>)
 800cd98:	f003 f8b4 	bl	800ff04 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cd9c:	7cfb      	ldrb	r3, [r7, #19]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d112      	bne.n	800cdc8 <udp_input+0x35c>
 800cda2:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <udp_input+0x374>)
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdaa:	2be0      	cmp	r3, #224	; 0xe0
 800cdac:	d00c      	beq.n	800cdc8 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cdae:	4b0c      	ldr	r3, [pc, #48]	; (800cde0 <udp_input+0x374>)
 800cdb0:	899b      	ldrh	r3, [r3, #12]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	b21b      	sxth	r3, r3
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7f9 ffad 	bl	8006d1a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cdc0:	2103      	movs	r1, #3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f001 fd28 	bl	800e818 <icmp_dest_unreach>
      pbuf_free(p);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7f9 ffb9 	bl	8006d40 <pbuf_free>
  return;
 800cdce:	e003      	b.n	800cdd8 <udp_input+0x36c>
    pbuf_free(p);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7f9 ffb5 	bl	8006d40 <pbuf_free>
  return;
 800cdd6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cdd8:	372c      	adds	r7, #44	; 0x2c
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd90      	pop	{r4, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20003314 	.word	0x20003314
 800cde4:	080135e0 	.word	0x080135e0
 800cde8:	0801346c 	.word	0x0801346c
 800cdec:	08013600 	.word	0x08013600
 800cdf0:	080134c0 	.word	0x080134c0
 800cdf4:	20003324 	.word	0x20003324
 800cdf8:	0801361c 	.word	0x0801361c

0800cdfc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d109      	bne.n	800ce20 <udp_send+0x24>
 800ce0c:	4b11      	ldr	r3, [pc, #68]	; (800ce54 <udp_send+0x58>)
 800ce0e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ce12:	4911      	ldr	r1, [pc, #68]	; (800ce58 <udp_send+0x5c>)
 800ce14:	4811      	ldr	r0, [pc, #68]	; (800ce5c <udp_send+0x60>)
 800ce16:	f002 ffd9 	bl	800fdcc <iprintf>
 800ce1a:	f06f 030f 	mvn.w	r3, #15
 800ce1e:	e015      	b.n	800ce4c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d109      	bne.n	800ce3a <udp_send+0x3e>
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <udp_send+0x58>)
 800ce28:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ce2c:	490c      	ldr	r1, [pc, #48]	; (800ce60 <udp_send+0x64>)
 800ce2e:	480b      	ldr	r0, [pc, #44]	; (800ce5c <udp_send+0x60>)
 800ce30:	f002 ffcc 	bl	800fdcc <iprintf>
 800ce34:	f06f 030f 	mvn.w	r3, #15
 800ce38:	e008      	b.n	800ce4c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	1d1a      	adds	r2, r3, #4
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8a9b      	ldrh	r3, [r3, #20]
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f80d 	bl	800ce64 <udp_sendto>
 800ce4a:	4603      	mov	r3, r0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	0801346c 	.word	0x0801346c
 800ce58:	08013634 	.word	0x08013634
 800ce5c:	080134c0 	.word	0x080134c0
 800ce60:	0801364c 	.word	0x0801364c

0800ce64 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
 800ce70:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d109      	bne.n	800ce8c <udp_sendto+0x28>
 800ce78:	4b3b      	ldr	r3, [pc, #236]	; (800cf68 <udp_sendto+0x104>)
 800ce7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce7e:	493b      	ldr	r1, [pc, #236]	; (800cf6c <udp_sendto+0x108>)
 800ce80:	483b      	ldr	r0, [pc, #236]	; (800cf70 <udp_sendto+0x10c>)
 800ce82:	f002 ffa3 	bl	800fdcc <iprintf>
 800ce86:	f06f 030f 	mvn.w	r3, #15
 800ce8a:	e068      	b.n	800cf5e <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <udp_sendto+0x42>
 800ce92:	4b35      	ldr	r3, [pc, #212]	; (800cf68 <udp_sendto+0x104>)
 800ce94:	f240 2219 	movw	r2, #537	; 0x219
 800ce98:	4936      	ldr	r1, [pc, #216]	; (800cf74 <udp_sendto+0x110>)
 800ce9a:	4835      	ldr	r0, [pc, #212]	; (800cf70 <udp_sendto+0x10c>)
 800ce9c:	f002 ff96 	bl	800fdcc <iprintf>
 800cea0:	f06f 030f 	mvn.w	r3, #15
 800cea4:	e05b      	b.n	800cf5e <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d109      	bne.n	800cec0 <udp_sendto+0x5c>
 800ceac:	4b2e      	ldr	r3, [pc, #184]	; (800cf68 <udp_sendto+0x104>)
 800ceae:	f240 221a 	movw	r2, #538	; 0x21a
 800ceb2:	4931      	ldr	r1, [pc, #196]	; (800cf78 <udp_sendto+0x114>)
 800ceb4:	482e      	ldr	r0, [pc, #184]	; (800cf70 <udp_sendto+0x10c>)
 800ceb6:	f002 ff89 	bl	800fdcc <iprintf>
 800ceba:	f06f 030f 	mvn.w	r3, #15
 800cebe:	e04e      	b.n	800cf5e <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 800cec0:	482e      	ldr	r0, [pc, #184]	; (800cf7c <udp_sendto+0x118>)
 800cec2:	f003 f81f 	bl	800ff04 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	7a1b      	ldrb	r3, [r3, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f9 fbd4 	bl	8006680 <netif_get_by_index>
 800ced8:	6178      	str	r0, [r7, #20]
 800ceda:	e003      	b.n	800cee4 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f001 fd25 	bl	800e92c <ip4_route>
 800cee2:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d12f      	bne.n	800cf4a <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 800ceea:	4825      	ldr	r0, [pc, #148]	; (800cf80 <udp_sendto+0x11c>)
 800ceec:	f002 ff6e 	bl	800fdcc <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <udp_sendto+0x9a>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	4619      	mov	r1, r3
 800cefc:	e000      	b.n	800cf00 <udp_sendto+0x9c>
 800cefe:	2100      	movs	r1, #0
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d004      	beq.n	800cf10 <udp_sendto+0xac>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	e000      	b.n	800cf12 <udp_sendto+0xae>
 800cf10:	2200      	movs	r2, #0
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <udp_sendto+0xbe>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	e000      	b.n	800cf24 <udp_sendto+0xc0>
 800cf22:	2000      	movs	r0, #0
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <udp_sendto+0xce>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3303      	adds	r3, #3
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	e000      	b.n	800cf34 <udp_sendto+0xd0>
 800cf32:	2300      	movs	r3, #0
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4603      	mov	r3, r0
 800cf38:	4812      	ldr	r0, [pc, #72]	; (800cf84 <udp_sendto+0x120>)
 800cf3a:	f002 ff47 	bl	800fdcc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 800cf3e:	200a      	movs	r0, #10
 800cf40:	f002 ff5c 	bl	800fdfc <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800cf44:	f06f 0303 	mvn.w	r3, #3
 800cf48:	e009      	b.n	800cf5e <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cf4a:	887a      	ldrh	r2, [r7, #2]
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	4613      	mov	r3, r2
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68b9      	ldr	r1, [r7, #8]
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 f816 	bl	800cf88 <udp_sendto_if>
 800cf5c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	0801346c 	.word	0x0801346c
 800cf6c:	08013664 	.word	0x08013664
 800cf70:	080134c0 	.word	0x080134c0
 800cf74:	0801367c 	.word	0x0801367c
 800cf78:	08013698 	.word	0x08013698
 800cf7c:	080136b4 	.word	0x080136b4
 800cf80:	080136c0 	.word	0x080136c0
 800cf84:	080135b0 	.word	0x080135b0

0800cf88 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b088      	sub	sp, #32
 800cf8c:	af02      	add	r7, sp, #8
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d109      	bne.n	800cfb0 <udp_sendto_if+0x28>
 800cf9c:	4b2e      	ldr	r3, [pc, #184]	; (800d058 <udp_sendto_if+0xd0>)
 800cf9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfa2:	492e      	ldr	r1, [pc, #184]	; (800d05c <udp_sendto_if+0xd4>)
 800cfa4:	482e      	ldr	r0, [pc, #184]	; (800d060 <udp_sendto_if+0xd8>)
 800cfa6:	f002 ff11 	bl	800fdcc <iprintf>
 800cfaa:	f06f 030f 	mvn.w	r3, #15
 800cfae:	e04f      	b.n	800d050 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <udp_sendto_if+0x42>
 800cfb6:	4b28      	ldr	r3, [pc, #160]	; (800d058 <udp_sendto_if+0xd0>)
 800cfb8:	f240 2281 	movw	r2, #641	; 0x281
 800cfbc:	4929      	ldr	r1, [pc, #164]	; (800d064 <udp_sendto_if+0xdc>)
 800cfbe:	4828      	ldr	r0, [pc, #160]	; (800d060 <udp_sendto_if+0xd8>)
 800cfc0:	f002 ff04 	bl	800fdcc <iprintf>
 800cfc4:	f06f 030f 	mvn.w	r3, #15
 800cfc8:	e042      	b.n	800d050 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <udp_sendto_if+0x5c>
 800cfd0:	4b21      	ldr	r3, [pc, #132]	; (800d058 <udp_sendto_if+0xd0>)
 800cfd2:	f240 2282 	movw	r2, #642	; 0x282
 800cfd6:	4924      	ldr	r1, [pc, #144]	; (800d068 <udp_sendto_if+0xe0>)
 800cfd8:	4821      	ldr	r0, [pc, #132]	; (800d060 <udp_sendto_if+0xd8>)
 800cfda:	f002 fef7 	bl	800fdcc <iprintf>
 800cfde:	f06f 030f 	mvn.w	r3, #15
 800cfe2:	e035      	b.n	800d050 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d109      	bne.n	800cffe <udp_sendto_if+0x76>
 800cfea:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <udp_sendto_if+0xd0>)
 800cfec:	f240 2283 	movw	r2, #643	; 0x283
 800cff0:	491e      	ldr	r1, [pc, #120]	; (800d06c <udp_sendto_if+0xe4>)
 800cff2:	481b      	ldr	r0, [pc, #108]	; (800d060 <udp_sendto_if+0xd8>)
 800cff4:	f002 feea 	bl	800fdcc <iprintf>
 800cff8:	f06f 030f 	mvn.w	r3, #15
 800cffc:	e028      	b.n	800d050 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d009      	beq.n	800d018 <udp_sendto_if+0x90>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d014:	2be0      	cmp	r3, #224	; 0xe0
 800d016:	d103      	bne.n	800d020 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	3304      	adds	r3, #4
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e00b      	b.n	800d038 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	3304      	adds	r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d002      	beq.n	800d034 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d02e:	f06f 0303 	mvn.w	r3, #3
 800d032:	e00d      	b.n	800d050 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d038:	887a      	ldrh	r2, [r7, #2]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	4613      	mov	r3, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 f811 	bl	800d070 <udp_sendto_if_src>
 800d04e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d050:	4618      	mov	r0, r3
 800d052:	3718      	adds	r7, #24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	0801346c 	.word	0x0801346c
 800d05c:	080136d8 	.word	0x080136d8
 800d060:	080134c0 	.word	0x080134c0
 800d064:	080136f4 	.word	0x080136f4
 800d068:	08013710 	.word	0x08013710
 800d06c:	08013730 	.word	0x08013730

0800d070 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08c      	sub	sp, #48	; 0x30
 800d074:	af04      	add	r7, sp, #16
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d109      	bne.n	800d098 <udp_sendto_if_src+0x28>
 800d084:	4b7a      	ldr	r3, [pc, #488]	; (800d270 <udp_sendto_if_src+0x200>)
 800d086:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d08a:	497a      	ldr	r1, [pc, #488]	; (800d274 <udp_sendto_if_src+0x204>)
 800d08c:	487a      	ldr	r0, [pc, #488]	; (800d278 <udp_sendto_if_src+0x208>)
 800d08e:	f002 fe9d 	bl	800fdcc <iprintf>
 800d092:	f06f 030f 	mvn.w	r3, #15
 800d096:	e0e6      	b.n	800d266 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <udp_sendto_if_src+0x42>
 800d09e:	4b74      	ldr	r3, [pc, #464]	; (800d270 <udp_sendto_if_src+0x200>)
 800d0a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d0a4:	4975      	ldr	r1, [pc, #468]	; (800d27c <udp_sendto_if_src+0x20c>)
 800d0a6:	4874      	ldr	r0, [pc, #464]	; (800d278 <udp_sendto_if_src+0x208>)
 800d0a8:	f002 fe90 	bl	800fdcc <iprintf>
 800d0ac:	f06f 030f 	mvn.w	r3, #15
 800d0b0:	e0d9      	b.n	800d266 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d109      	bne.n	800d0cc <udp_sendto_if_src+0x5c>
 800d0b8:	4b6d      	ldr	r3, [pc, #436]	; (800d270 <udp_sendto_if_src+0x200>)
 800d0ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d0be:	4970      	ldr	r1, [pc, #448]	; (800d280 <udp_sendto_if_src+0x210>)
 800d0c0:	486d      	ldr	r0, [pc, #436]	; (800d278 <udp_sendto_if_src+0x208>)
 800d0c2:	f002 fe83 	bl	800fdcc <iprintf>
 800d0c6:	f06f 030f 	mvn.w	r3, #15
 800d0ca:	e0cc      	b.n	800d266 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d109      	bne.n	800d0e6 <udp_sendto_if_src+0x76>
 800d0d2:	4b67      	ldr	r3, [pc, #412]	; (800d270 <udp_sendto_if_src+0x200>)
 800d0d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d0d8:	496a      	ldr	r1, [pc, #424]	; (800d284 <udp_sendto_if_src+0x214>)
 800d0da:	4867      	ldr	r0, [pc, #412]	; (800d278 <udp_sendto_if_src+0x208>)
 800d0dc:	f002 fe76 	bl	800fdcc <iprintf>
 800d0e0:	f06f 030f 	mvn.w	r3, #15
 800d0e4:	e0bf      	b.n	800d266 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d109      	bne.n	800d100 <udp_sendto_if_src+0x90>
 800d0ec:	4b60      	ldr	r3, [pc, #384]	; (800d270 <udp_sendto_if_src+0x200>)
 800d0ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d0f2:	4965      	ldr	r1, [pc, #404]	; (800d288 <udp_sendto_if_src+0x218>)
 800d0f4:	4860      	ldr	r0, [pc, #384]	; (800d278 <udp_sendto_if_src+0x208>)
 800d0f6:	f002 fe69 	bl	800fdcc <iprintf>
 800d0fa:	f06f 030f 	mvn.w	r3, #15
 800d0fe:	e0b2      	b.n	800d266 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	8a5b      	ldrh	r3, [r3, #18]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d115      	bne.n	800d134 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 800d108:	4860      	ldr	r0, [pc, #384]	; (800d28c <udp_sendto_if_src+0x21c>)
 800d10a:	f002 fefb 	bl	800ff04 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	8a5b      	ldrh	r3, [r3, #18]
 800d114:	461a      	mov	r2, r3
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 f8cc 	bl	800d2b4 <udp_bind>
 800d11c:	4603      	mov	r3, r0
 800d11e:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d120:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d005      	beq.n	800d134 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 800d128:	4859      	ldr	r0, [pc, #356]	; (800d290 <udp_sendto_if_src+0x220>)
 800d12a:	f002 feeb 	bl	800ff04 <puts>
      return err;
 800d12e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d132:	e098      	b.n	800d266 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	891b      	ldrh	r3, [r3, #8]
 800d138:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d902      	bls.n	800d146 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 800d140:	f04f 33ff 	mov.w	r3, #4294967295
 800d144:	e08f      	b.n	800d266 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d146:	2108      	movs	r1, #8
 800d148:	68b8      	ldr	r0, [r7, #8]
 800d14a:	f7f9 fd63 	bl	8006c14 <pbuf_add_header>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d01d      	beq.n	800d190 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d154:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d158:	2108      	movs	r1, #8
 800d15a:	2022      	movs	r0, #34	; 0x22
 800d15c:	f7f9 fb0c 	bl	8006778 <pbuf_alloc>
 800d160:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d105      	bne.n	800d174 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 800d168:	484a      	ldr	r0, [pc, #296]	; (800d294 <udp_sendto_if_src+0x224>)
 800d16a:	f002 fecb 	bl	800ff04 <puts>
      return ERR_MEM;
 800d16e:	f04f 33ff 	mov.w	r3, #4294967295
 800d172:	e078      	b.n	800d266 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	891b      	ldrh	r3, [r3, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d003      	beq.n	800d184 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d17c:	68b9      	ldr	r1, [r7, #8]
 800d17e:	69f8      	ldr	r0, [r7, #28]
 800d180:	f7f9 fef6 	bl	8006f70 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	69f9      	ldr	r1, [r7, #28]
 800d188:	4843      	ldr	r0, [pc, #268]	; (800d298 <udp_sendto_if_src+0x228>)
 800d18a:	f002 fe1f 	bl	800fdcc <iprintf>
 800d18e:	e005      	b.n	800d19c <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	4841      	ldr	r0, [pc, #260]	; (800d29c <udp_sendto_if_src+0x22c>)
 800d198:	f002 fe18 	bl	800fdcc <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	895b      	ldrh	r3, [r3, #10]
 800d1a0:	2b07      	cmp	r3, #7
 800d1a2:	d806      	bhi.n	800d1b2 <udp_sendto_if_src+0x142>
 800d1a4:	4b32      	ldr	r3, [pc, #200]	; (800d270 <udp_sendto_if_src+0x200>)
 800d1a6:	f240 320d 	movw	r2, #781	; 0x30d
 800d1aa:	493d      	ldr	r1, [pc, #244]	; (800d2a0 <udp_sendto_if_src+0x230>)
 800d1ac:	4832      	ldr	r0, [pc, #200]	; (800d278 <udp_sendto_if_src+0x208>)
 800d1ae:	f002 fe0d 	bl	800fdcc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	8a5b      	ldrh	r3, [r3, #18]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f8 faa7 	bl	8005710 <lwip_htons>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d1ca:	887b      	ldrh	r3, [r7, #2]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7f8 fa9f 	bl	8005710 <lwip_htons>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	719a      	strb	r2, [r3, #6]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	891b      	ldrh	r3, [r3, #8]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	482e      	ldr	r0, [pc, #184]	; (800d2a4 <udp_sendto_if_src+0x234>)
 800d1ec:	f002 fdee 	bl	800fdcc <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	891b      	ldrh	r3, [r3, #8]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	482c      	ldr	r0, [pc, #176]	; (800d2a8 <udp_sendto_if_src+0x238>)
 800d1f8:	f002 fde8 	bl	800fdcc <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	891b      	ldrh	r3, [r3, #8]
 800d200:	4618      	mov	r0, r3
 800d202:	f7f8 fa85 	bl	8005710 <lwip_htons>
 800d206:	4603      	mov	r3, r0
 800d208:	461a      	mov	r2, r3
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d20e:	2311      	movs	r3, #17
 800d210:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	7adb      	ldrb	r3, [r3, #11]
 800d216:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	88db      	ldrh	r3, [r3, #6]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4619      	mov	r1, r3
 800d220:	4822      	ldr	r0, [pc, #136]	; (800d2ac <udp_sendto_if_src+0x23c>)
 800d222:	f002 fdd3 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 800d226:	7cfb      	ldrb	r3, [r7, #19]
 800d228:	4619      	mov	r1, r3
 800d22a:	4821      	ldr	r0, [pc, #132]	; (800d2b0 <udp_sendto_if_src+0x240>)
 800d22c:	f002 fdce 	bl	800fdcc <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	7a9b      	ldrb	r3, [r3, #10]
 800d234:	7cb9      	ldrb	r1, [r7, #18]
 800d236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d238:	9202      	str	r2, [sp, #8]
 800d23a:	7cfa      	ldrb	r2, [r7, #19]
 800d23c:	9201      	str	r2, [sp, #4]
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	460b      	mov	r3, r1
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d246:	69f8      	ldr	r0, [r7, #28]
 800d248:	f001 fd58 	bl	800ecfc <ip4_output_if_src>
 800d24c:	4603      	mov	r3, r0
 800d24e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d004      	beq.n	800d262 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 800d258:	69f8      	ldr	r0, [r7, #28]
 800d25a:	f7f9 fd71 	bl	8006d40 <pbuf_free>
    q = NULL;
 800d25e:	2300      	movs	r3, #0
 800d260:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d262:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3720      	adds	r7, #32
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	0801346c 	.word	0x0801346c
 800d274:	08013750 	.word	0x08013750
 800d278:	080134c0 	.word	0x080134c0
 800d27c:	08013770 	.word	0x08013770
 800d280:	08013790 	.word	0x08013790
 800d284:	080137b4 	.word	0x080137b4
 800d288:	080137d8 	.word	0x080137d8
 800d28c:	080137fc 	.word	0x080137fc
 800d290:	0801382c 	.word	0x0801382c
 800d294:	08013850 	.word	0x08013850
 800d298:	08013874 	.word	0x08013874
 800d29c:	080138ac 	.word	0x080138ac
 800d2a0:	080138d8 	.word	0x080138d8
 800d2a4:	08013908 	.word	0x08013908
 800d2a8:	08013934 	.word	0x08013934
 800d2ac:	08013958 	.word	0x08013958
 800d2b0:	08013978 	.word	0x08013978

0800d2b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af02      	add	r7, sp, #8
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d2c8:	4b65      	ldr	r3, [pc, #404]	; (800d460 <udp_bind+0x1ac>)
 800d2ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <udp_bind+0x32>
 800d2d2:	4b64      	ldr	r3, [pc, #400]	; (800d464 <udp_bind+0x1b0>)
 800d2d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d2d8:	4963      	ldr	r1, [pc, #396]	; (800d468 <udp_bind+0x1b4>)
 800d2da:	4864      	ldr	r0, [pc, #400]	; (800d46c <udp_bind+0x1b8>)
 800d2dc:	f002 fd76 	bl	800fdcc <iprintf>
 800d2e0:	f06f 030f 	mvn.w	r3, #15
 800d2e4:	e0b7      	b.n	800d456 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 800d2e6:	4862      	ldr	r0, [pc, #392]	; (800d470 <udp_bind+0x1bc>)
 800d2e8:	f002 fd70 	bl	800fdcc <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d003      	beq.n	800d2fa <udp_bind+0x46>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	e000      	b.n	800d2fc <udp_bind+0x48>
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d004      	beq.n	800d30c <udp_bind+0x58>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	3301      	adds	r3, #1
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	461a      	mov	r2, r3
 800d30a:	e000      	b.n	800d30e <udp_bind+0x5a>
 800d30c:	2200      	movs	r2, #0
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d004      	beq.n	800d31e <udp_bind+0x6a>
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	3302      	adds	r3, #2
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	4618      	mov	r0, r3
 800d31c:	e000      	b.n	800d320 <udp_bind+0x6c>
 800d31e:	2000      	movs	r0, #0
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <udp_bind+0x7a>
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	3303      	adds	r3, #3
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	e000      	b.n	800d330 <udp_bind+0x7c>
 800d32e:	2300      	movs	r3, #0
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	4603      	mov	r3, r0
 800d334:	484f      	ldr	r0, [pc, #316]	; (800d474 <udp_bind+0x1c0>)
 800d336:	f002 fd49 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	4619      	mov	r1, r3
 800d33e:	484e      	ldr	r0, [pc, #312]	; (800d478 <udp_bind+0x1c4>)
 800d340:	f002 fd44 	bl	800fdcc <iprintf>

  rebind = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d348:	4b4c      	ldr	r3, [pc, #304]	; (800d47c <udp_bind+0x1c8>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	617b      	str	r3, [r7, #20]
 800d34e:	e009      	b.n	800d364 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	429a      	cmp	r2, r3
 800d356:	d102      	bne.n	800d35e <udp_bind+0xaa>
      rebind = 1;
 800d358:	2301      	movs	r3, #1
 800d35a:	74fb      	strb	r3, [r7, #19]
      break;
 800d35c:	e005      	b.n	800d36a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f2      	bne.n	800d350 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d36a:	88fb      	ldrh	r3, [r7, #6]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10c      	bne.n	800d38a <udp_bind+0xd6>
    port = udp_new_port();
 800d370:	f7ff fae0 	bl	800c934 <udp_new_port>
 800d374:	4603      	mov	r3, r0
 800d376:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d378:	88fb      	ldrh	r3, [r7, #6]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d134      	bne.n	800d3e8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 800d37e:	4840      	ldr	r0, [pc, #256]	; (800d480 <udp_bind+0x1cc>)
 800d380:	f002 fdc0 	bl	800ff04 <puts>
      return ERR_USE;
 800d384:	f06f 0307 	mvn.w	r3, #7
 800d388:	e065      	b.n	800d456 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d38a:	4b3c      	ldr	r3, [pc, #240]	; (800d47c <udp_bind+0x1c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	617b      	str	r3, [r7, #20]
 800d390:	e027      	b.n	800d3e2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	429a      	cmp	r2, r3
 800d398:	d020      	beq.n	800d3dc <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	8a5b      	ldrh	r3, [r3, #18]
 800d39e:	88fa      	ldrh	r2, [r7, #6]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d11b      	bne.n	800d3dc <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d00d      	beq.n	800d3cc <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00a      	beq.n	800d3cc <udp_bind+0x118>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d006      	beq.n	800d3cc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800d3be:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d003      	beq.n	800d3cc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d107      	bne.n	800d3dc <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 800d3cc:	88fb      	ldrh	r3, [r7, #6]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	482c      	ldr	r0, [pc, #176]	; (800d484 <udp_bind+0x1d0>)
 800d3d2:	f002 fcfb 	bl	800fdcc <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d3d6:	f06f 0307 	mvn.w	r3, #7
 800d3da:	e03c      	b.n	800d456 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1d4      	bne.n	800d392 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <udp_bind+0x140>
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	e000      	b.n	800d3f6 <udp_bind+0x142>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	88fa      	ldrh	r2, [r7, #6]
 800d3fe:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d400:	7cfb      	ldrb	r3, [r7, #19]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d406:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <udp_bind+0x1c8>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d40e:	4a1b      	ldr	r2, [pc, #108]	; (800d47c <udp_bind+0x1c8>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 800d414:	481c      	ldr	r0, [pc, #112]	; (800d488 <udp_bind+0x1d4>)
 800d416:	f002 fcd9 	bl	800fdcc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	4619      	mov	r1, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	0a1b      	lsrs	r3, r3, #8
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	461a      	mov	r2, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	0c1b      	lsrs	r3, r3, #16
 800d432:	b2db      	uxtb	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	0e1b      	lsrs	r3, r3, #24
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	4603      	mov	r3, r0
 800d442:	480c      	ldr	r0, [pc, #48]	; (800d474 <udp_bind+0x1c0>)
 800d444:	f002 fcc2 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	8a5b      	ldrh	r3, [r3, #18]
 800d44c:	4619      	mov	r1, r3
 800d44e:	480f      	ldr	r0, [pc, #60]	; (800d48c <udp_bind+0x1d8>)
 800d450:	f002 fcbc 	bl	800fdcc <iprintf>
  return ERR_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	08014364 	.word	0x08014364
 800d464:	0801346c 	.word	0x0801346c
 800d468:	080139a0 	.word	0x080139a0
 800d46c:	080134c0 	.word	0x080134c0
 800d470:	080139b8 	.word	0x080139b8
 800d474:	080135b0 	.word	0x080135b0
 800d478:	080139cc 	.word	0x080139cc
 800d47c:	20008ae4 	.word	0x20008ae4
 800d480:	080139dc 	.word	0x080139dc
 800d484:	080139fc 	.word	0x080139fc
 800d488:	08013a34 	.word	0x08013a34
 800d48c:	08013a48 	.word	0x08013a48

0800d490 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af02      	add	r7, sp, #8
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	4613      	mov	r3, r2
 800d49c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d109      	bne.n	800d4b8 <udp_connect+0x28>
 800d4a4:	4b3c      	ldr	r3, [pc, #240]	; (800d598 <udp_connect+0x108>)
 800d4a6:	f240 4235 	movw	r2, #1077	; 0x435
 800d4aa:	493c      	ldr	r1, [pc, #240]	; (800d59c <udp_connect+0x10c>)
 800d4ac:	483c      	ldr	r0, [pc, #240]	; (800d5a0 <udp_connect+0x110>)
 800d4ae:	f002 fc8d 	bl	800fdcc <iprintf>
 800d4b2:	f06f 030f 	mvn.w	r3, #15
 800d4b6:	e06b      	b.n	800d590 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d109      	bne.n	800d4d2 <udp_connect+0x42>
 800d4be:	4b36      	ldr	r3, [pc, #216]	; (800d598 <udp_connect+0x108>)
 800d4c0:	f240 4236 	movw	r2, #1078	; 0x436
 800d4c4:	4937      	ldr	r1, [pc, #220]	; (800d5a4 <udp_connect+0x114>)
 800d4c6:	4836      	ldr	r0, [pc, #216]	; (800d5a0 <udp_connect+0x110>)
 800d4c8:	f002 fc80 	bl	800fdcc <iprintf>
 800d4cc:	f06f 030f 	mvn.w	r3, #15
 800d4d0:	e05e      	b.n	800d590 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	8a5b      	ldrh	r3, [r3, #18]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10f      	bne.n	800d4fa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d4da:	68f9      	ldr	r1, [r7, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8a5b      	ldrh	r3, [r3, #18]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f7ff fee6 	bl	800d2b4 <udp_bind>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d4ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <udp_connect+0x6a>
      return err;
 800d4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f8:	e04a      	b.n	800d590 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <udp_connect+0x76>
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	e000      	b.n	800d508 <udp_connect+0x78>
 800d506:	2300      	movs	r3, #0
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	88fa      	ldrh	r2, [r7, #6]
 800d510:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	7c1b      	ldrb	r3, [r3, #16]
 800d516:	f043 0304 	orr.w	r3, r3, #4
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 800d520:	4821      	ldr	r0, [pc, #132]	; (800d5a8 <udp_connect+0x118>)
 800d522:	f002 fc53 	bl	800fdcc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	4619      	mov	r1, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	0a1b      	lsrs	r3, r3, #8
 800d534:	b2db      	uxtb	r3, r3
 800d536:	461a      	mov	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	0c1b      	lsrs	r3, r3, #16
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	4618      	mov	r0, r3
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	0e1b      	lsrs	r3, r3, #24
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	4603      	mov	r3, r0
 800d54e:	4817      	ldr	r0, [pc, #92]	; (800d5ac <udp_connect+0x11c>)
 800d550:	f002 fc3c 	bl	800fdcc <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	8a9b      	ldrh	r3, [r3, #20]
 800d558:	4619      	mov	r1, r3
 800d55a:	4815      	ldr	r0, [pc, #84]	; (800d5b0 <udp_connect+0x120>)
 800d55c:	f002 fc36 	bl	800fdcc <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d560:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <udp_connect+0x124>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	617b      	str	r3, [r7, #20]
 800d566:	e008      	b.n	800d57a <udp_connect+0xea>
    if (pcb == ipcb) {
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d101      	bne.n	800d574 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	e00d      	b.n	800d590 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1f3      	bne.n	800d568 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d580:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <udp_connect+0x124>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d588:	4a0a      	ldr	r2, [pc, #40]	; (800d5b4 <udp_connect+0x124>)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	0801346c 	.word	0x0801346c
 800d59c:	08013a58 	.word	0x08013a58
 800d5a0:	080134c0 	.word	0x080134c0
 800d5a4:	08013a74 	.word	0x08013a74
 800d5a8:	08013a90 	.word	0x08013a90
 800d5ac:	080135b0 	.word	0x080135b0
 800d5b0:	08013a48 	.word	0x08013a48
 800d5b4:	20008ae4 	.word	0x20008ae4

0800d5b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d107      	bne.n	800d5da <udp_recv+0x22>
 800d5ca:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <udp_recv+0x34>)
 800d5cc:	f240 428a 	movw	r2, #1162	; 0x48a
 800d5d0:	4907      	ldr	r1, [pc, #28]	; (800d5f0 <udp_recv+0x38>)
 800d5d2:	4808      	ldr	r0, [pc, #32]	; (800d5f4 <udp_recv+0x3c>)
 800d5d4:	f002 fbfa 	bl	800fdcc <iprintf>
 800d5d8:	e005      	b.n	800d5e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	61da      	str	r2, [r3, #28]
}
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	0801346c 	.word	0x0801346c
 800d5f0:	08013ac8 	.word	0x08013ac8
 800d5f4:	080134c0 	.word	0x080134c0

0800d5f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d5fe:	2000      	movs	r0, #0
 800d600:	f7f8 fcdc 	bl	8005fbc <memp_malloc>
 800d604:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d60c:	2220      	movs	r2, #32
 800d60e:	2100      	movs	r1, #0
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f002 fbd3 	bl	800fdbc <memset>
    pcb->ttl = UDP_TTL;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	22ff      	movs	r2, #255	; 0xff
 800d61a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d61c:	687b      	ldr	r3, [r7, #4]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
	...

0800d628 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d01e      	beq.n	800d676 <udp_netif_ip_addr_changed+0x4e>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d01a      	beq.n	800d676 <udp_netif_ip_addr_changed+0x4e>
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d017      	beq.n	800d676 <udp_netif_ip_addr_changed+0x4e>
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d013      	beq.n	800d676 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <udp_netif_ip_addr_changed+0x5c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e00c      	b.n	800d670 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d103      	bne.n	800d66a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1ef      	bne.n	800d656 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d676:	bf00      	nop
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	20008ae4 	.word	0x20008ae4

0800d688 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 800d690:	481b      	ldr	r0, [pc, #108]	; (800d700 <udp_debug_print+0x78>)
 800d692:	f002 fc37 	bl	800ff04 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d696:	481b      	ldr	r0, [pc, #108]	; (800d704 <udp_debug_print+0x7c>)
 800d698:	f002 fc34 	bl	800ff04 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	881b      	ldrh	r3, [r3, #0]
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7f8 f834 	bl	8005710 <lwip_htons>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	461c      	mov	r4, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	885b      	ldrh	r3, [r3, #2]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f8 f82c 	bl	8005710 <lwip_htons>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4812      	ldr	r0, [pc, #72]	; (800d708 <udp_debug_print+0x80>)
 800d6c0:	f002 fb84 	bl	800fdcc <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d6c4:	480f      	ldr	r0, [pc, #60]	; (800d704 <udp_debug_print+0x7c>)
 800d6c6:	f002 fc1d 	bl	800ff04 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	889b      	ldrh	r3, [r3, #4]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7f8 f81d 	bl	8005710 <lwip_htons>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	461c      	mov	r4, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	88db      	ldrh	r3, [r3, #6]
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f8 f815 	bl	8005710 <lwip_htons>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4807      	ldr	r0, [pc, #28]	; (800d70c <udp_debug_print+0x84>)
 800d6ee:	f002 fb6d 	bl	800fdcc <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 800d6f2:	4804      	ldr	r0, [pc, #16]	; (800d704 <udp_debug_print+0x7c>)
 800d6f4:	f002 fc06 	bl	800ff04 <puts>
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd90      	pop	{r4, r7, pc}
 800d700:	08013af8 	.word	0x08013af8
 800d704:	08013b04 	.word	0x08013b04
 800d708:	08013b28 	.word	0x08013b28
 800d70c:	08013b60 	.word	0x08013b60

0800d710 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d718:	492b      	ldr	r1, [pc, #172]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	4613      	mov	r3, r2
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	4413      	add	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	440b      	add	r3, r1
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d013      	beq.n	800d754 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d72c:	4926      	ldr	r1, [pc, #152]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	4613      	mov	r3, r2
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	4413      	add	r3, r2
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	440b      	add	r3, r1
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f9 faff 	bl	8006d40 <pbuf_free>
    arp_table[i].q = NULL;
 800d742:	4921      	ldr	r1, [pc, #132]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	4613      	mov	r3, r2
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	4413      	add	r3, r2
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	440b      	add	r3, r1
 800d750:	2200      	movs	r2, #0
 800d752:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d754:	491c      	ldr	r1, [pc, #112]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	4613      	mov	r3, r2
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	4413      	add	r3, r2
 800d75e:	00db      	lsls	r3, r3, #3
 800d760:	440b      	add	r3, r1
 800d762:	3314      	adds	r3, #20
 800d764:	2200      	movs	r2, #0
 800d766:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800d768:	4917      	ldr	r1, [pc, #92]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	4613      	mov	r3, r2
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	4413      	add	r3, r2
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	440b      	add	r3, r1
 800d776:	3312      	adds	r3, #18
 800d778:	2200      	movs	r2, #0
 800d77a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800d77c:	4912      	ldr	r1, [pc, #72]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	4413      	add	r3, r2
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	440b      	add	r3, r1
 800d78a:	3308      	adds	r3, #8
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800d790:	490d      	ldr	r1, [pc, #52]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	440b      	add	r3, r1
 800d79e:	3304      	adds	r3, #4
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800d7a4:	4908      	ldr	r1, [pc, #32]	; (800d7c8 <etharp_free_entry+0xb8>)
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3308      	adds	r3, #8
 800d7b4:	4a05      	ldr	r2, [pc, #20]	; (800d7cc <etharp_free_entry+0xbc>)
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	6810      	ldr	r0, [r2, #0]
 800d7ba:	6018      	str	r0, [r3, #0]
 800d7bc:	8892      	ldrh	r2, [r2, #4]
 800d7be:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20008ae8 	.word	0x20008ae8
 800d7cc:	08014370 	.word	0x08014370

0800d7d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	607b      	str	r3, [r7, #4]
 800d7da:	e096      	b.n	800d90a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d7dc:	494f      	ldr	r1, [pc, #316]	; (800d91c <etharp_tmr+0x14c>)
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	3314      	adds	r3, #20
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 8086 	beq.w	800d904 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d7f8:	4948      	ldr	r1, [pc, #288]	; (800d91c <etharp_tmr+0x14c>)
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	4413      	add	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	440b      	add	r3, r1
 800d806:	3312      	adds	r3, #18
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	b298      	uxth	r0, r3
 800d80e:	4943      	ldr	r1, [pc, #268]	; (800d91c <etharp_tmr+0x14c>)
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4613      	mov	r3, r2
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	4413      	add	r3, r2
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	440b      	add	r3, r1
 800d81c:	3312      	adds	r3, #18
 800d81e:	4602      	mov	r2, r0
 800d820:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d822:	493e      	ldr	r1, [pc, #248]	; (800d91c <etharp_tmr+0x14c>)
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	440b      	add	r3, r1
 800d830:	3312      	adds	r3, #18
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d838:	d215      	bcs.n	800d866 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d83a:	4938      	ldr	r1, [pc, #224]	; (800d91c <etharp_tmr+0x14c>)
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	4413      	add	r3, r2
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	440b      	add	r3, r1
 800d848:	3314      	adds	r3, #20
 800d84a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d10e      	bne.n	800d86e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d850:	4932      	ldr	r1, [pc, #200]	; (800d91c <etharp_tmr+0x14c>)
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	4613      	mov	r3, r2
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	4413      	add	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	440b      	add	r3, r1
 800d85e:	3312      	adds	r3, #18
 800d860:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d862:	2b04      	cmp	r3, #4
 800d864:	d903      	bls.n	800d86e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ff52 	bl	800d710 <etharp_free_entry>
 800d86c:	e04a      	b.n	800d904 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d86e:	492b      	ldr	r1, [pc, #172]	; (800d91c <etharp_tmr+0x14c>)
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	4613      	mov	r3, r2
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4413      	add	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	440b      	add	r3, r1
 800d87c:	3314      	adds	r3, #20
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b03      	cmp	r3, #3
 800d882:	d10a      	bne.n	800d89a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d884:	4925      	ldr	r1, [pc, #148]	; (800d91c <etharp_tmr+0x14c>)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	3314      	adds	r3, #20
 800d894:	2204      	movs	r2, #4
 800d896:	701a      	strb	r2, [r3, #0]
 800d898:	e034      	b.n	800d904 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d89a:	4920      	ldr	r1, [pc, #128]	; (800d91c <etharp_tmr+0x14c>)
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	440b      	add	r3, r1
 800d8a8:	3314      	adds	r3, #20
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b04      	cmp	r3, #4
 800d8ae:	d10a      	bne.n	800d8c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d8b0:	491a      	ldr	r1, [pc, #104]	; (800d91c <etharp_tmr+0x14c>)
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	4413      	add	r3, r2
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	440b      	add	r3, r1
 800d8be:	3314      	adds	r3, #20
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	e01e      	b.n	800d904 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8c6:	4915      	ldr	r1, [pc, #84]	; (800d91c <etharp_tmr+0x14c>)
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	4413      	add	r3, r2
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	440b      	add	r3, r1
 800d8d4:	3314      	adds	r3, #20
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d113      	bne.n	800d904 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d8dc:	490f      	ldr	r1, [pc, #60]	; (800d91c <etharp_tmr+0x14c>)
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	005b      	lsls	r3, r3, #1
 800d8e4:	4413      	add	r3, r2
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	440b      	add	r3, r1
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	6818      	ldr	r0, [r3, #0]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	4a08      	ldr	r2, [pc, #32]	; (800d91c <etharp_tmr+0x14c>)
 800d8fa:	4413      	add	r3, r2
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4619      	mov	r1, r3
 800d900:	f000 fe6e 	bl	800e5e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3301      	adds	r3, #1
 800d908:	607b      	str	r3, [r7, #4]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b09      	cmp	r3, #9
 800d90e:	f77f af65 	ble.w	800d7dc <etharp_tmr+0xc>
      }
    }
  }
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	20008ae8 	.word	0x20008ae8

0800d920 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	460b      	mov	r3, r1
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d92e:	230a      	movs	r3, #10
 800d930:	843b      	strh	r3, [r7, #32]
 800d932:	230a      	movs	r3, #10
 800d934:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800d936:	230a      	movs	r3, #10
 800d938:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d93e:	230a      	movs	r3, #10
 800d940:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	83bb      	strh	r3, [r7, #28]
 800d946:	2300      	movs	r3, #0
 800d948:	837b      	strh	r3, [r7, #26]
 800d94a:	2300      	movs	r3, #0
 800d94c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d94e:	2300      	movs	r3, #0
 800d950:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d952:	e0ae      	b.n	800dab2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d954:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d958:	49a6      	ldr	r1, [pc, #664]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800d95a:	4613      	mov	r3, r2
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	4413      	add	r3, r2
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	440b      	add	r3, r1
 800d964:	3314      	adds	r3, #20
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d96a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d96e:	2b0a      	cmp	r3, #10
 800d970:	d105      	bne.n	800d97e <etharp_find_entry+0x5e>
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d97a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d97c:	e095      	b.n	800daaa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 8092 	beq.w	800daaa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d009      	beq.n	800d9a0 <etharp_find_entry+0x80>
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d806      	bhi.n	800d9a0 <etharp_find_entry+0x80>
 800d992:	4b99      	ldr	r3, [pc, #612]	; (800dbf8 <etharp_find_entry+0x2d8>)
 800d994:	f240 1223 	movw	r2, #291	; 0x123
 800d998:	4998      	ldr	r1, [pc, #608]	; (800dbfc <etharp_find_entry+0x2dc>)
 800d99a:	4899      	ldr	r0, [pc, #612]	; (800dc00 <etharp_find_entry+0x2e0>)
 800d99c:	f002 fa16 	bl	800fdcc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d020      	beq.n	800d9e8 <etharp_find_entry+0xc8>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d9ae:	4891      	ldr	r0, [pc, #580]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	4413      	add	r3, r2
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	4403      	add	r3, r0
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4299      	cmp	r1, r3
 800d9c0:	d112      	bne.n	800d9e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00c      	beq.n	800d9e2 <etharp_find_entry+0xc2>
 800d9c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d9cc:	4989      	ldr	r1, [pc, #548]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4413      	add	r3, r2
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	440b      	add	r3, r1
 800d9d8:	3308      	adds	r3, #8
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d102      	bne.n	800d9e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d9e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d9e6:	e100      	b.n	800dbea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d9e8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d140      	bne.n	800da70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d9ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d9f2:	4980      	ldr	r1, [pc, #512]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	4413      	add	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	440b      	add	r3, r1
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d01a      	beq.n	800da3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800da04:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da08:	497a      	ldr	r1, [pc, #488]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da0a:	4613      	mov	r3, r2
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	4413      	add	r3, r2
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	440b      	add	r3, r1
 800da14:	3312      	adds	r3, #18
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	8bba      	ldrh	r2, [r7, #28]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d845      	bhi.n	800daaa <etharp_find_entry+0x18a>
            old_queue = i;
 800da1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800da22:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da26:	4973      	ldr	r1, [pc, #460]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da28:	4613      	mov	r3, r2
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	4413      	add	r3, r2
 800da2e:	00db      	lsls	r3, r3, #3
 800da30:	440b      	add	r3, r1
 800da32:	3312      	adds	r3, #18
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	83bb      	strh	r3, [r7, #28]
 800da38:	e037      	b.n	800daaa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800da3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da3e:	496d      	ldr	r1, [pc, #436]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da40:	4613      	mov	r3, r2
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	4413      	add	r3, r2
 800da46:	00db      	lsls	r3, r3, #3
 800da48:	440b      	add	r3, r1
 800da4a:	3312      	adds	r3, #18
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	8b7a      	ldrh	r2, [r7, #26]
 800da50:	429a      	cmp	r2, r3
 800da52:	d82a      	bhi.n	800daaa <etharp_find_entry+0x18a>
            old_pending = i;
 800da54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da56:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800da58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da5c:	4965      	ldr	r1, [pc, #404]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da5e:	4613      	mov	r3, r2
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	440b      	add	r3, r1
 800da68:	3312      	adds	r3, #18
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	837b      	strh	r3, [r7, #26]
 800da6e:	e01c      	b.n	800daaa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d919      	bls.n	800daaa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800da76:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da7a:	495e      	ldr	r1, [pc, #376]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da7c:	4613      	mov	r3, r2
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	4413      	add	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	440b      	add	r3, r1
 800da86:	3312      	adds	r3, #18
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	8b3a      	ldrh	r2, [r7, #24]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d80c      	bhi.n	800daaa <etharp_find_entry+0x18a>
            old_stable = i;
 800da90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da92:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 800da94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800da98:	4956      	ldr	r1, [pc, #344]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800da9a:	4613      	mov	r3, r2
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	4413      	add	r3, r2
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	440b      	add	r3, r1
 800daa4:	3312      	adds	r3, #18
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800daaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daac:	3301      	adds	r3, #1
 800daae:	b29b      	uxth	r3, r3
 800dab0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dab2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800dab6:	2b09      	cmp	r3, #9
 800dab8:	f77f af4c 	ble.w	800d954 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dabc:	7afb      	ldrb	r3, [r7, #11]
 800dabe:	f003 0302 	and.w	r3, r3, #2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d108      	bne.n	800dad8 <etharp_find_entry+0x1b8>
 800dac6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800daca:	2b0a      	cmp	r3, #10
 800dacc:	d107      	bne.n	800dade <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d102      	bne.n	800dade <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dad8:	f04f 33ff 	mov.w	r3, #4294967295
 800dadc:	e085      	b.n	800dbea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dade:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dae2:	2b09      	cmp	r3, #9
 800dae4:	dc02      	bgt.n	800daec <etharp_find_entry+0x1cc>
    i = empty;
 800dae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800daea:	e039      	b.n	800db60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800daec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800daf0:	2b09      	cmp	r3, #9
 800daf2:	dc14      	bgt.n	800db1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800daf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daf6:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800daf8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dafc:	493d      	ldr	r1, [pc, #244]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800dafe:	4613      	mov	r3, r2
 800db00:	005b      	lsls	r3, r3, #1
 800db02:	4413      	add	r3, r2
 800db04:	00db      	lsls	r3, r3, #3
 800db06:	440b      	add	r3, r1
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d018      	beq.n	800db40 <etharp_find_entry+0x220>
 800db0e:	4b3a      	ldr	r3, [pc, #232]	; (800dbf8 <etharp_find_entry+0x2d8>)
 800db10:	f240 126d 	movw	r2, #365	; 0x16d
 800db14:	493b      	ldr	r1, [pc, #236]	; (800dc04 <etharp_find_entry+0x2e4>)
 800db16:	483a      	ldr	r0, [pc, #232]	; (800dc00 <etharp_find_entry+0x2e0>)
 800db18:	f002 f958 	bl	800fdcc <iprintf>
 800db1c:	e010      	b.n	800db40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800db1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800db22:	2b09      	cmp	r3, #9
 800db24:	dc02      	bgt.n	800db2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800db26:	8c3b      	ldrh	r3, [r7, #32]
 800db28:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db2a:	e009      	b.n	800db40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800db2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db30:	2b09      	cmp	r3, #9
 800db32:	dc02      	bgt.n	800db3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800db34:	8bfb      	ldrh	r3, [r7, #30]
 800db36:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db38:	e002      	b.n	800db40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	e054      	b.n	800dbea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800db40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db44:	2b09      	cmp	r3, #9
 800db46:	dd06      	ble.n	800db56 <etharp_find_entry+0x236>
 800db48:	4b2b      	ldr	r3, [pc, #172]	; (800dbf8 <etharp_find_entry+0x2d8>)
 800db4a:	f240 127f 	movw	r2, #383	; 0x17f
 800db4e:	492e      	ldr	r1, [pc, #184]	; (800dc08 <etharp_find_entry+0x2e8>)
 800db50:	482b      	ldr	r0, [pc, #172]	; (800dc00 <etharp_find_entry+0x2e0>)
 800db52:	f002 f93b 	bl	800fdcc <iprintf>
    etharp_free_entry(i);
 800db56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fdd8 	bl	800d710 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800db60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db64:	2b09      	cmp	r3, #9
 800db66:	dd06      	ble.n	800db76 <etharp_find_entry+0x256>
 800db68:	4b23      	ldr	r3, [pc, #140]	; (800dbf8 <etharp_find_entry+0x2d8>)
 800db6a:	f240 1283 	movw	r2, #387	; 0x183
 800db6e:	4926      	ldr	r1, [pc, #152]	; (800dc08 <etharp_find_entry+0x2e8>)
 800db70:	4823      	ldr	r0, [pc, #140]	; (800dc00 <etharp_find_entry+0x2e0>)
 800db72:	f002 f92b 	bl	800fdcc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800db76:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800db7a:	491e      	ldr	r1, [pc, #120]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800db7c:	4613      	mov	r3, r2
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	4413      	add	r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	440b      	add	r3, r1
 800db86:	3314      	adds	r3, #20
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d006      	beq.n	800db9c <etharp_find_entry+0x27c>
 800db8e:	4b1a      	ldr	r3, [pc, #104]	; (800dbf8 <etharp_find_entry+0x2d8>)
 800db90:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800db94:	491d      	ldr	r1, [pc, #116]	; (800dc0c <etharp_find_entry+0x2ec>)
 800db96:	481a      	ldr	r0, [pc, #104]	; (800dc00 <etharp_find_entry+0x2e0>)
 800db98:	f002 f918 	bl	800fdcc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00b      	beq.n	800dbba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dba2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6819      	ldr	r1, [r3, #0]
 800dbaa:	4812      	ldr	r0, [pc, #72]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800dbac:	4613      	mov	r3, r2
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	4413      	add	r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	4403      	add	r3, r0
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dbba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dbbe:	490d      	ldr	r1, [pc, #52]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	440b      	add	r3, r1
 800dbca:	3312      	adds	r3, #18
 800dbcc:	2200      	movs	r2, #0
 800dbce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dbd0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800dbd4:	4907      	ldr	r1, [pc, #28]	; (800dbf4 <etharp_find_entry+0x2d4>)
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	440b      	add	r3, r1
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dbe6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3728      	adds	r7, #40	; 0x28
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20008ae8 	.word	0x20008ae8
 800dbf8:	08013b94 	.word	0x08013b94
 800dbfc:	08013bcc 	.word	0x08013bcc
 800dc00:	08013c0c 	.word	0x08013c0c
 800dc04:	08013c34 	.word	0x08013c34
 800dc08:	08013c4c 	.word	0x08013c4c
 800dc0c:	08013c60 	.word	0x08013c60

0800dc10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc24:	2b06      	cmp	r3, #6
 800dc26:	d006      	beq.n	800dc36 <etharp_update_arp_entry+0x26>
 800dc28:	4b48      	ldr	r3, [pc, #288]	; (800dd4c <etharp_update_arp_entry+0x13c>)
 800dc2a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800dc2e:	4948      	ldr	r1, [pc, #288]	; (800dd50 <etharp_update_arp_entry+0x140>)
 800dc30:	4848      	ldr	r0, [pc, #288]	; (800dd54 <etharp_update_arp_entry+0x144>)
 800dc32:	f002 f8cb 	bl	800fdcc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d012      	beq.n	800dc62 <etharp_update_arp_entry+0x52>
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00e      	beq.n	800dc62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68f9      	ldr	r1, [r7, #12]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f001 f904 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800dc50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d105      	bne.n	800dc62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc5e:	2be0      	cmp	r3, #224	; 0xe0
 800dc60:	d102      	bne.n	800dc68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dc62:	f06f 030f 	mvn.w	r3, #15
 800dc66:	e06c      	b.n	800dd42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	68b8      	ldr	r0, [r7, #8]
 800dc70:	f7ff fe56 	bl	800d920 <etharp_find_entry>
 800dc74:	4603      	mov	r3, r0
 800dc76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dc78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	da02      	bge.n	800dc86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dc80:	8afb      	ldrh	r3, [r7, #22]
 800dc82:	b25b      	sxtb	r3, r3
 800dc84:	e05d      	b.n	800dd42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dc86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc8a:	4933      	ldr	r1, [pc, #204]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	4413      	add	r3, r2
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	440b      	add	r3, r1
 800dc96:	3314      	adds	r3, #20
 800dc98:	2202      	movs	r2, #2
 800dc9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dc9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dca0:	492d      	ldr	r1, [pc, #180]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dca2:	4613      	mov	r3, r2
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	4413      	add	r3, r2
 800dca8:	00db      	lsls	r3, r3, #3
 800dcaa:	440b      	add	r3, r1
 800dcac:	3308      	adds	r3, #8
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dcb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	4413      	add	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	4a25      	ldr	r2, [pc, #148]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dcc2:	4413      	add	r3, r2
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	2206      	movs	r2, #6
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f002 f84e 	bl	800fd6c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dcd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcd4:	4920      	ldr	r1, [pc, #128]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	00db      	lsls	r3, r3, #3
 800dcde:	440b      	add	r3, r1
 800dce0:	3312      	adds	r3, #18
 800dce2:	2200      	movs	r2, #0
 800dce4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dce6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dcea:	491b      	ldr	r1, [pc, #108]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dcec:	4613      	mov	r3, r2
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	4413      	add	r3, r2
 800dcf2:	00db      	lsls	r3, r3, #3
 800dcf4:	440b      	add	r3, r1
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d021      	beq.n	800dd40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dcfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd00:	4915      	ldr	r1, [pc, #84]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dd02:	4613      	mov	r3, r2
 800dd04:	005b      	lsls	r3, r3, #1
 800dd06:	4413      	add	r3, r2
 800dd08:	00db      	lsls	r3, r3, #3
 800dd0a:	440b      	add	r3, r1
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dd10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dd14:	4910      	ldr	r1, [pc, #64]	; (800dd58 <etharp_update_arp_entry+0x148>)
 800dd16:	4613      	mov	r3, r2
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	4413      	add	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	440b      	add	r3, r1
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dd2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6939      	ldr	r1, [r7, #16]
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f001 ff9d 	bl	800fc74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dd3a:	6938      	ldr	r0, [r7, #16]
 800dd3c:	f7f9 f800 	bl	8006d40 <pbuf_free>
  }
  return ERR_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3718      	adds	r7, #24
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	08013b94 	.word	0x08013b94
 800dd50:	08013c8c 	.word	0x08013c8c
 800dd54:	08013c0c 	.word	0x08013c0c
 800dd58:	20008ae8 	.word	0x20008ae8

0800dd5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd64:	2300      	movs	r3, #0
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e01e      	b.n	800dda8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dd6a:	4913      	ldr	r1, [pc, #76]	; (800ddb8 <etharp_cleanup_netif+0x5c>)
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	005b      	lsls	r3, r3, #1
 800dd72:	4413      	add	r3, r2
 800dd74:	00db      	lsls	r3, r3, #3
 800dd76:	440b      	add	r3, r1
 800dd78:	3314      	adds	r3, #20
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dd7e:	7afb      	ldrb	r3, [r7, #11]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00e      	beq.n	800dda2 <etharp_cleanup_netif+0x46>
 800dd84:	490c      	ldr	r1, [pc, #48]	; (800ddb8 <etharp_cleanup_netif+0x5c>)
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	3308      	adds	r3, #8
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d102      	bne.n	800dda2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f7ff fcb7 	bl	800d710 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3301      	adds	r3, #1
 800dda6:	60fb      	str	r3, [r7, #12]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2b09      	cmp	r3, #9
 800ddac:	dddd      	ble.n	800dd6a <etharp_cleanup_netif+0xe>
    }
  }
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20008ae8 	.word	0x20008ae8

0800ddbc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ddbc:	b5b0      	push	{r4, r5, r7, lr}
 800ddbe:	b08a      	sub	sp, #40	; 0x28
 800ddc0:	af04      	add	r7, sp, #16
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d107      	bne.n	800dddc <etharp_input+0x20>
 800ddcc:	4b3d      	ldr	r3, [pc, #244]	; (800dec4 <etharp_input+0x108>)
 800ddce:	f240 228a 	movw	r2, #650	; 0x28a
 800ddd2:	493d      	ldr	r1, [pc, #244]	; (800dec8 <etharp_input+0x10c>)
 800ddd4:	483d      	ldr	r0, [pc, #244]	; (800decc <etharp_input+0x110>)
 800ddd6:	f001 fff9 	bl	800fdcc <iprintf>
 800ddda:	e06f      	b.n	800debc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddec:	d10c      	bne.n	800de08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ddf2:	2b06      	cmp	r3, #6
 800ddf4:	d108      	bne.n	800de08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d104      	bne.n	800de08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	885b      	ldrh	r3, [r3, #2]
 800de02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800de04:	2b08      	cmp	r3, #8
 800de06:	d003      	beq.n	800de10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7f8 ff99 	bl	8006d40 <pbuf_free>
    return;
 800de0e:	e055      	b.n	800debc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	330e      	adds	r3, #14
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	3318      	adds	r3, #24
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3304      	adds	r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d102      	bne.n	800de30 <etharp_input+0x74>
    for_us = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	74fb      	strb	r3, [r7, #19]
 800de2e:	e009      	b.n	800de44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	3304      	adds	r3, #4
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	429a      	cmp	r2, r3
 800de3a:	bf0c      	ite	eq
 800de3c:	2301      	moveq	r3, #1
 800de3e:	2300      	movne	r3, #0
 800de40:	b2db      	uxtb	r3, r3
 800de42:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f103 0208 	add.w	r2, r3, #8
 800de4a:	7cfb      	ldrb	r3, [r7, #19]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d001      	beq.n	800de54 <etharp_input+0x98>
 800de50:	2301      	movs	r3, #1
 800de52:	e000      	b.n	800de56 <etharp_input+0x9a>
 800de54:	2302      	movs	r3, #2
 800de56:	f107 010c 	add.w	r1, r7, #12
 800de5a:	6838      	ldr	r0, [r7, #0]
 800de5c:	f7ff fed8 	bl	800dc10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	88db      	ldrh	r3, [r3, #6]
 800de64:	b29b      	uxth	r3, r3
 800de66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de6a:	d003      	beq.n	800de74 <etharp_input+0xb8>
 800de6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de70:	d01e      	beq.n	800deb0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800de72:	e020      	b.n	800deb6 <etharp_input+0xfa>
      if (for_us) {
 800de74:	7cfb      	ldrb	r3, [r7, #19]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d01c      	beq.n	800deb4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800de94:	2102      	movs	r1, #2
 800de96:	9103      	str	r1, [sp, #12]
 800de98:	f107 010c 	add.w	r1, r7, #12
 800de9c:	9102      	str	r1, [sp, #8]
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	462b      	mov	r3, r5
 800dea4:	4622      	mov	r2, r4
 800dea6:	4601      	mov	r1, r0
 800dea8:	6838      	ldr	r0, [r7, #0]
 800deaa:	f000 faeb 	bl	800e484 <etharp_raw>
      break;
 800deae:	e001      	b.n	800deb4 <etharp_input+0xf8>
      break;
 800deb0:	bf00      	nop
 800deb2:	e000      	b.n	800deb6 <etharp_input+0xfa>
      break;
 800deb4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7f8 ff42 	bl	8006d40 <pbuf_free>
}
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bdb0      	pop	{r4, r5, r7, pc}
 800dec2:	bf00      	nop
 800dec4:	08013b94 	.word	0x08013b94
 800dec8:	08013ce4 	.word	0x08013ce4
 800decc:	08013c0c 	.word	0x08013c0c

0800ded0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	4613      	mov	r3, r2
 800dedc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dede:	79fa      	ldrb	r2, [r7, #7]
 800dee0:	4944      	ldr	r1, [pc, #272]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800dee2:	4613      	mov	r3, r2
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4413      	add	r3, r2
 800dee8:	00db      	lsls	r3, r3, #3
 800deea:	440b      	add	r3, r1
 800deec:	3314      	adds	r3, #20
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d806      	bhi.n	800df02 <etharp_output_to_arp_index+0x32>
 800def4:	4b40      	ldr	r3, [pc, #256]	; (800dff8 <etharp_output_to_arp_index+0x128>)
 800def6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800defa:	4940      	ldr	r1, [pc, #256]	; (800dffc <etharp_output_to_arp_index+0x12c>)
 800defc:	4840      	ldr	r0, [pc, #256]	; (800e000 <etharp_output_to_arp_index+0x130>)
 800defe:	f001 ff65 	bl	800fdcc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800df02:	79fa      	ldrb	r2, [r7, #7]
 800df04:	493b      	ldr	r1, [pc, #236]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df06:	4613      	mov	r3, r2
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	4413      	add	r3, r2
 800df0c:	00db      	lsls	r3, r3, #3
 800df0e:	440b      	add	r3, r1
 800df10:	3314      	adds	r3, #20
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d153      	bne.n	800dfc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800df18:	79fa      	ldrb	r2, [r7, #7]
 800df1a:	4936      	ldr	r1, [pc, #216]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df1c:	4613      	mov	r3, r2
 800df1e:	005b      	lsls	r3, r3, #1
 800df20:	4413      	add	r3, r2
 800df22:	00db      	lsls	r3, r3, #3
 800df24:	440b      	add	r3, r1
 800df26:	3312      	adds	r3, #18
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800df2e:	d919      	bls.n	800df64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800df30:	79fa      	ldrb	r2, [r7, #7]
 800df32:	4613      	mov	r3, r2
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	4413      	add	r3, r2
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	4a2e      	ldr	r2, [pc, #184]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df3c:	4413      	add	r3, r2
 800df3e:	3304      	adds	r3, #4
 800df40:	4619      	mov	r1, r3
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 fb4c 	bl	800e5e0 <etharp_request>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d138      	bne.n	800dfc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800df4e:	79fa      	ldrb	r2, [r7, #7]
 800df50:	4928      	ldr	r1, [pc, #160]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df52:	4613      	mov	r3, r2
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	4413      	add	r3, r2
 800df58:	00db      	lsls	r3, r3, #3
 800df5a:	440b      	add	r3, r1
 800df5c:	3314      	adds	r3, #20
 800df5e:	2203      	movs	r2, #3
 800df60:	701a      	strb	r2, [r3, #0]
 800df62:	e02d      	b.n	800dfc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800df64:	79fa      	ldrb	r2, [r7, #7]
 800df66:	4923      	ldr	r1, [pc, #140]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df68:	4613      	mov	r3, r2
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	4413      	add	r3, r2
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	440b      	add	r3, r1
 800df72:	3312      	adds	r3, #18
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800df7a:	d321      	bcc.n	800dfc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800df7c:	79fa      	ldrb	r2, [r7, #7]
 800df7e:	4613      	mov	r3, r2
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	4413      	add	r3, r2
 800df84:	00db      	lsls	r3, r3, #3
 800df86:	4a1b      	ldr	r2, [pc, #108]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df88:	4413      	add	r3, r2
 800df8a:	1d19      	adds	r1, r3, #4
 800df8c:	79fa      	ldrb	r2, [r7, #7]
 800df8e:	4613      	mov	r3, r2
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	4413      	add	r3, r2
 800df94:	00db      	lsls	r3, r3, #3
 800df96:	3308      	adds	r3, #8
 800df98:	4a16      	ldr	r2, [pc, #88]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800df9a:	4413      	add	r3, r2
 800df9c:	3304      	adds	r3, #4
 800df9e:	461a      	mov	r2, r3
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 fafb 	bl	800e59c <etharp_request_dst>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d109      	bne.n	800dfc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dfac:	79fa      	ldrb	r2, [r7, #7]
 800dfae:	4911      	ldr	r1, [pc, #68]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	3314      	adds	r3, #20
 800dfbc:	2203      	movs	r2, #3
 800dfbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dfc6:	79fa      	ldrb	r2, [r7, #7]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	4a08      	ldr	r2, [pc, #32]	; (800dff4 <etharp_output_to_arp_index+0x124>)
 800dfd4:	4413      	add	r3, r2
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfdc:	9200      	str	r2, [sp, #0]
 800dfde:	460a      	mov	r2, r1
 800dfe0:	68b9      	ldr	r1, [r7, #8]
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f001 fe46 	bl	800fc74 <ethernet_output>
 800dfe8:	4603      	mov	r3, r0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20008ae8 	.word	0x20008ae8
 800dff8:	08013b94 	.word	0x08013b94
 800dffc:	08013d04 	.word	0x08013d04
 800e000:	08013c0c 	.word	0x08013c0c

0800e004 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af02      	add	r7, sp, #8
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <etharp_output+0x24>
 800e01a:	4b73      	ldr	r3, [pc, #460]	; (800e1e8 <etharp_output+0x1e4>)
 800e01c:	f240 321e 	movw	r2, #798	; 0x31e
 800e020:	4972      	ldr	r1, [pc, #456]	; (800e1ec <etharp_output+0x1e8>)
 800e022:	4873      	ldr	r0, [pc, #460]	; (800e1f0 <etharp_output+0x1ec>)
 800e024:	f001 fed2 	bl	800fdcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <etharp_output+0x38>
 800e02e:	4b6e      	ldr	r3, [pc, #440]	; (800e1e8 <etharp_output+0x1e4>)
 800e030:	f240 321f 	movw	r2, #799	; 0x31f
 800e034:	496f      	ldr	r1, [pc, #444]	; (800e1f4 <etharp_output+0x1f0>)
 800e036:	486e      	ldr	r0, [pc, #440]	; (800e1f0 <etharp_output+0x1ec>)
 800e038:	f001 fec8 	bl	800fdcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d106      	bne.n	800e050 <etharp_output+0x4c>
 800e042:	4b69      	ldr	r3, [pc, #420]	; (800e1e8 <etharp_output+0x1e4>)
 800e044:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e048:	496b      	ldr	r1, [pc, #428]	; (800e1f8 <etharp_output+0x1f4>)
 800e04a:	4869      	ldr	r0, [pc, #420]	; (800e1f0 <etharp_output+0x1ec>)
 800e04c:	f001 febe 	bl	800fdcc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	68f9      	ldr	r1, [r7, #12]
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fefe 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e062:	4b66      	ldr	r3, [pc, #408]	; (800e1fc <etharp_output+0x1f8>)
 800e064:	61fb      	str	r3, [r7, #28]
 800e066:	e0af      	b.n	800e1c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e070:	2be0      	cmp	r3, #224	; 0xe0
 800e072:	d118      	bne.n	800e0a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e074:	2301      	movs	r3, #1
 800e076:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e078:	2300      	movs	r3, #0
 800e07a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e07c:	235e      	movs	r3, #94	; 0x5e
 800e07e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3301      	adds	r3, #1
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	3302      	adds	r3, #2
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3303      	adds	r3, #3
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e09e:	f107 0310 	add.w	r3, r7, #16
 800e0a2:	61fb      	str	r3, [r7, #28]
 800e0a4:	e090      	b.n	800e1c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	405a      	eors	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d012      	beq.n	800e0e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e0c4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d00b      	beq.n	800e0e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	330c      	adds	r3, #12
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	330c      	adds	r3, #12
 800e0da:	61bb      	str	r3, [r7, #24]
 800e0dc:	e002      	b.n	800e0e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e0de:	f06f 0303 	mvn.w	r3, #3
 800e0e2:	e07d      	b.n	800e1e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e0e4:	4b46      	ldr	r3, [pc, #280]	; (800e200 <etharp_output+0x1fc>)
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4a46      	ldr	r2, [pc, #280]	; (800e204 <etharp_output+0x200>)
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	440b      	add	r3, r1
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	4413      	add	r3, r2
 800e0f6:	3314      	adds	r3, #20
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d925      	bls.n	800e14a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e0fe:	4b40      	ldr	r3, [pc, #256]	; (800e200 <etharp_output+0x1fc>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	4619      	mov	r1, r3
 800e104:	4a3f      	ldr	r2, [pc, #252]	; (800e204 <etharp_output+0x200>)
 800e106:	460b      	mov	r3, r1
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	440b      	add	r3, r1
 800e10c:	00db      	lsls	r3, r3, #3
 800e10e:	4413      	add	r3, r2
 800e110:	3308      	adds	r3, #8
 800e112:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	429a      	cmp	r2, r3
 800e118:	d117      	bne.n	800e14a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	4b38      	ldr	r3, [pc, #224]	; (800e200 <etharp_output+0x1fc>)
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	4618      	mov	r0, r3
 800e124:	4937      	ldr	r1, [pc, #220]	; (800e204 <etharp_output+0x200>)
 800e126:	4603      	mov	r3, r0
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4403      	add	r3, r0
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	440b      	add	r3, r1
 800e130:	3304      	adds	r3, #4
 800e132:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e134:	429a      	cmp	r2, r3
 800e136:	d108      	bne.n	800e14a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e138:	4b31      	ldr	r3, [pc, #196]	; (800e200 <etharp_output+0x1fc>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	461a      	mov	r2, r3
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f7ff fec5 	bl	800ded0 <etharp_output_to_arp_index>
 800e146:	4603      	mov	r3, r0
 800e148:	e04a      	b.n	800e1e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]
 800e14e:	e031      	b.n	800e1b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e150:	7dfa      	ldrb	r2, [r7, #23]
 800e152:	492c      	ldr	r1, [pc, #176]	; (800e204 <etharp_output+0x200>)
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	440b      	add	r3, r1
 800e15e:	3314      	adds	r3, #20
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d923      	bls.n	800e1ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e166:	7dfa      	ldrb	r2, [r7, #23]
 800e168:	4926      	ldr	r1, [pc, #152]	; (800e204 <etharp_output+0x200>)
 800e16a:	4613      	mov	r3, r2
 800e16c:	005b      	lsls	r3, r3, #1
 800e16e:	4413      	add	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	440b      	add	r3, r1
 800e174:	3308      	adds	r3, #8
 800e176:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d117      	bne.n	800e1ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	6819      	ldr	r1, [r3, #0]
 800e182:	7dfa      	ldrb	r2, [r7, #23]
 800e184:	481f      	ldr	r0, [pc, #124]	; (800e204 <etharp_output+0x200>)
 800e186:	4613      	mov	r3, r2
 800e188:	005b      	lsls	r3, r3, #1
 800e18a:	4413      	add	r3, r2
 800e18c:	00db      	lsls	r3, r3, #3
 800e18e:	4403      	add	r3, r0
 800e190:	3304      	adds	r3, #4
 800e192:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e194:	4299      	cmp	r1, r3
 800e196:	d10a      	bne.n	800e1ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e198:	4a19      	ldr	r2, [pc, #100]	; (800e200 <etharp_output+0x1fc>)
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	68b9      	ldr	r1, [r7, #8]
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7ff fe93 	bl	800ded0 <etharp_output_to_arp_index>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	e018      	b.n	800e1e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	75fb      	strb	r3, [r7, #23]
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
 800e1b6:	2b09      	cmp	r3, #9
 800e1b8:	d9ca      	bls.n	800e150 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	69b9      	ldr	r1, [r7, #24]
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 f822 	bl	800e208 <etharp_query>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	e00b      	b.n	800e1e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e1ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f001 fd4b 	bl	800fc74 <ethernet_output>
 800e1de:	4603      	mov	r3, r0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3720      	adds	r7, #32
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	08013b94 	.word	0x08013b94
 800e1ec:	08013ce4 	.word	0x08013ce4
 800e1f0:	08013c0c 	.word	0x08013c0c
 800e1f4:	08013d34 	.word	0x08013d34
 800e1f8:	08013cd4 	.word	0x08013cd4
 800e1fc:	08014368 	.word	0x08014368
 800e200:	20008bd8 	.word	0x20008bd8
 800e204:	20008ae8 	.word	0x20008ae8

0800e208 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08c      	sub	sp, #48	; 0x30
 800e20c:	af02      	add	r7, sp, #8
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3326      	adds	r3, #38	; 0x26
 800e218:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e21a:	23ff      	movs	r3, #255	; 0xff
 800e21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	68f9      	ldr	r1, [r7, #12]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 fe14 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10c      	bne.n	800e250 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e23e:	2be0      	cmp	r3, #224	; 0xe0
 800e240:	d006      	beq.n	800e250 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e250:	f06f 030f 	mvn.w	r3, #15
 800e254:	e101      	b.n	800e45a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	2101      	movs	r1, #1
 800e25a:	68b8      	ldr	r0, [r7, #8]
 800e25c:	f7ff fb60 	bl	800d920 <etharp_find_entry>
 800e260:	4603      	mov	r3, r0
 800e262:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	da02      	bge.n	800e272 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e26c:	8a7b      	ldrh	r3, [r7, #18]
 800e26e:	b25b      	sxtb	r3, r3
 800e270:	e0f3      	b.n	800e45a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e272:	8a7b      	ldrh	r3, [r7, #18]
 800e274:	2b7e      	cmp	r3, #126	; 0x7e
 800e276:	d906      	bls.n	800e286 <etharp_query+0x7e>
 800e278:	4b7a      	ldr	r3, [pc, #488]	; (800e464 <etharp_query+0x25c>)
 800e27a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e27e:	497a      	ldr	r1, [pc, #488]	; (800e468 <etharp_query+0x260>)
 800e280:	487a      	ldr	r0, [pc, #488]	; (800e46c <etharp_query+0x264>)
 800e282:	f001 fda3 	bl	800fdcc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e286:	8a7b      	ldrh	r3, [r7, #18]
 800e288:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e28a:	7c7a      	ldrb	r2, [r7, #17]
 800e28c:	4978      	ldr	r1, [pc, #480]	; (800e470 <etharp_query+0x268>)
 800e28e:	4613      	mov	r3, r2
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	4413      	add	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	440b      	add	r3, r1
 800e298:	3314      	adds	r3, #20
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d115      	bne.n	800e2cc <etharp_query+0xc4>
    is_new_entry = 1;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e2a4:	7c7a      	ldrb	r2, [r7, #17]
 800e2a6:	4972      	ldr	r1, [pc, #456]	; (800e470 <etharp_query+0x268>)
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	4413      	add	r3, r2
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	440b      	add	r3, r1
 800e2b2:	3314      	adds	r3, #20
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e2b8:	7c7a      	ldrb	r2, [r7, #17]
 800e2ba:	496d      	ldr	r1, [pc, #436]	; (800e470 <etharp_query+0x268>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	440b      	add	r3, r1
 800e2c6:	3308      	adds	r3, #8
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e2cc:	7c7a      	ldrb	r2, [r7, #17]
 800e2ce:	4968      	ldr	r1, [pc, #416]	; (800e470 <etharp_query+0x268>)
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	440b      	add	r3, r1
 800e2da:	3314      	adds	r3, #20
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d011      	beq.n	800e306 <etharp_query+0xfe>
 800e2e2:	7c7a      	ldrb	r2, [r7, #17]
 800e2e4:	4962      	ldr	r1, [pc, #392]	; (800e470 <etharp_query+0x268>)
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	4413      	add	r3, r2
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	440b      	add	r3, r1
 800e2f0:	3314      	adds	r3, #20
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d806      	bhi.n	800e306 <etharp_query+0xfe>
 800e2f8:	4b5a      	ldr	r3, [pc, #360]	; (800e464 <etharp_query+0x25c>)
 800e2fa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e2fe:	495d      	ldr	r1, [pc, #372]	; (800e474 <etharp_query+0x26c>)
 800e300:	485a      	ldr	r0, [pc, #360]	; (800e46c <etharp_query+0x264>)
 800e302:	f001 fd63 	bl	800fdcc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d102      	bne.n	800e312 <etharp_query+0x10a>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10c      	bne.n	800e32c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 f963 	bl	800e5e0 <etharp_request>
 800e31a:	4603      	mov	r3, r0
 800e31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d102      	bne.n	800e32c <etharp_query+0x124>
      return result;
 800e326:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e32a:	e096      	b.n	800e45a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <etharp_query+0x138>
 800e332:	4b4c      	ldr	r3, [pc, #304]	; (800e464 <etharp_query+0x25c>)
 800e334:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e338:	494f      	ldr	r1, [pc, #316]	; (800e478 <etharp_query+0x270>)
 800e33a:	484c      	ldr	r0, [pc, #304]	; (800e46c <etharp_query+0x264>)
 800e33c:	f001 fd46 	bl	800fdcc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e340:	7c7a      	ldrb	r2, [r7, #17]
 800e342:	494b      	ldr	r1, [pc, #300]	; (800e470 <etharp_query+0x268>)
 800e344:	4613      	mov	r3, r2
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	4413      	add	r3, r2
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	440b      	add	r3, r1
 800e34e:	3314      	adds	r3, #20
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d917      	bls.n	800e386 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e356:	4a49      	ldr	r2, [pc, #292]	; (800e47c <etharp_query+0x274>)
 800e358:	7c7b      	ldrb	r3, [r7, #17]
 800e35a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e35c:	7c7a      	ldrb	r2, [r7, #17]
 800e35e:	4613      	mov	r3, r2
 800e360:	005b      	lsls	r3, r3, #1
 800e362:	4413      	add	r3, r2
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	3308      	adds	r3, #8
 800e368:	4a41      	ldr	r2, [pc, #260]	; (800e470 <etharp_query+0x268>)
 800e36a:	4413      	add	r3, r2
 800e36c:	3304      	adds	r3, #4
 800e36e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e372:	9200      	str	r2, [sp, #0]
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f001 fc7b 	bl	800fc74 <ethernet_output>
 800e37e:	4603      	mov	r3, r0
 800e380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e384:	e067      	b.n	800e456 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e386:	7c7a      	ldrb	r2, [r7, #17]
 800e388:	4939      	ldr	r1, [pc, #228]	; (800e470 <etharp_query+0x268>)
 800e38a:	4613      	mov	r3, r2
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	4413      	add	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	440b      	add	r3, r1
 800e394:	3314      	adds	r3, #20
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d15c      	bne.n	800e456 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e3a4:	e01c      	b.n	800e3e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	895a      	ldrh	r2, [r3, #10]
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	891b      	ldrh	r3, [r3, #8]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d10a      	bne.n	800e3c8 <etharp_query+0x1c0>
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d006      	beq.n	800e3c8 <etharp_query+0x1c0>
 800e3ba:	4b2a      	ldr	r3, [pc, #168]	; (800e464 <etharp_query+0x25c>)
 800e3bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e3c0:	492f      	ldr	r1, [pc, #188]	; (800e480 <etharp_query+0x278>)
 800e3c2:	482a      	ldr	r0, [pc, #168]	; (800e46c <etharp_query+0x264>)
 800e3c4:	f001 fd02 	bl	800fdcc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	7b1b      	ldrb	r3, [r3, #12]
 800e3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <etharp_query+0x1d2>
        copy_needed = 1;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	61bb      	str	r3, [r7, #24]
        break;
 800e3d8:	e005      	b.n	800e3e6 <etharp_query+0x1de>
      }
      p = p->next;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1df      	bne.n	800e3a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d007      	beq.n	800e3fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e3f2:	200e      	movs	r0, #14
 800e3f4:	f7f8 ffa2 	bl	800733c <pbuf_clone>
 800e3f8:	61f8      	str	r0, [r7, #28]
 800e3fa:	e004      	b.n	800e406 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e400:	69f8      	ldr	r0, [r7, #28]
 800e402:	f7f8 fd3d 	bl	8006e80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d021      	beq.n	800e450 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e40c:	7c7a      	ldrb	r2, [r7, #17]
 800e40e:	4918      	ldr	r1, [pc, #96]	; (800e470 <etharp_query+0x268>)
 800e410:	4613      	mov	r3, r2
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	4413      	add	r3, r2
 800e416:	00db      	lsls	r3, r3, #3
 800e418:	440b      	add	r3, r1
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00a      	beq.n	800e436 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e420:	7c7a      	ldrb	r2, [r7, #17]
 800e422:	4913      	ldr	r1, [pc, #76]	; (800e470 <etharp_query+0x268>)
 800e424:	4613      	mov	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	4413      	add	r3, r2
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	440b      	add	r3, r1
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4618      	mov	r0, r3
 800e432:	f7f8 fc85 	bl	8006d40 <pbuf_free>
      }
      arp_table[i].q = p;
 800e436:	7c7a      	ldrb	r2, [r7, #17]
 800e438:	490d      	ldr	r1, [pc, #52]	; (800e470 <etharp_query+0x268>)
 800e43a:	4613      	mov	r3, r2
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	4413      	add	r3, r2
 800e440:	00db      	lsls	r3, r3, #3
 800e442:	440b      	add	r3, r1
 800e444:	69fa      	ldr	r2, [r7, #28]
 800e446:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e448:	2300      	movs	r3, #0
 800e44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e44e:	e002      	b.n	800e456 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e450:	23ff      	movs	r3, #255	; 0xff
 800e452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3728      	adds	r7, #40	; 0x28
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	08013b94 	.word	0x08013b94
 800e468:	08013d40 	.word	0x08013d40
 800e46c:	08013c0c 	.word	0x08013c0c
 800e470:	20008ae8 	.word	0x20008ae8
 800e474:	08013d50 	.word	0x08013d50
 800e478:	08013d34 	.word	0x08013d34
 800e47c:	20008bd8 	.word	0x20008bd8
 800e480:	08013d78 	.word	0x08013d78

0800e484 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08a      	sub	sp, #40	; 0x28
 800e488:	af02      	add	r7, sp, #8
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d106      	bne.n	800e4aa <etharp_raw+0x26>
 800e49c:	4b3a      	ldr	r3, [pc, #232]	; (800e588 <etharp_raw+0x104>)
 800e49e:	f240 4257 	movw	r2, #1111	; 0x457
 800e4a2:	493a      	ldr	r1, [pc, #232]	; (800e58c <etharp_raw+0x108>)
 800e4a4:	483a      	ldr	r0, [pc, #232]	; (800e590 <etharp_raw+0x10c>)
 800e4a6:	f001 fc91 	bl	800fdcc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e4aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4ae:	211c      	movs	r1, #28
 800e4b0:	200e      	movs	r0, #14
 800e4b2:	f7f8 f961 	bl	8006778 <pbuf_alloc>
 800e4b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d102      	bne.n	800e4c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e4be:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c2:	e05d      	b.n	800e580 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	2b1b      	cmp	r3, #27
 800e4ca:	d806      	bhi.n	800e4da <etharp_raw+0x56>
 800e4cc:	4b2e      	ldr	r3, [pc, #184]	; (800e588 <etharp_raw+0x104>)
 800e4ce:	f240 4262 	movw	r2, #1122	; 0x462
 800e4d2:	4930      	ldr	r1, [pc, #192]	; (800e594 <etharp_raw+0x110>)
 800e4d4:	482e      	ldr	r0, [pc, #184]	; (800e590 <etharp_raw+0x10c>)
 800e4d6:	f001 fc79 	bl	800fdcc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e4e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7f7 f914 	bl	8005710 <lwip_htons>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4f6:	2b06      	cmp	r3, #6
 800e4f8:	d006      	beq.n	800e508 <etharp_raw+0x84>
 800e4fa:	4b23      	ldr	r3, [pc, #140]	; (800e588 <etharp_raw+0x104>)
 800e4fc:	f240 4269 	movw	r2, #1129	; 0x469
 800e500:	4925      	ldr	r1, [pc, #148]	; (800e598 <etharp_raw+0x114>)
 800e502:	4823      	ldr	r0, [pc, #140]	; (800e590 <etharp_raw+0x10c>)
 800e504:	f001 fc62 	bl	800fdcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	3308      	adds	r3, #8
 800e50c:	2206      	movs	r2, #6
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f001 fc2b 	bl	800fd6c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	3312      	adds	r3, #18
 800e51a:	2206      	movs	r2, #6
 800e51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e51e:	4618      	mov	r0, r3
 800e520:	f001 fc24 	bl	800fd6c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	330e      	adds	r3, #14
 800e528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e52a:	6812      	ldr	r2, [r2, #0]
 800e52c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	3318      	adds	r3, #24
 800e532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e534:	6812      	ldr	r2, [r2, #0]
 800e536:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	2200      	movs	r2, #0
 800e540:	f042 0201 	orr.w	r2, r2, #1
 800e544:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2200      	movs	r2, #0
 800e54a:	f042 0208 	orr.w	r2, r2, #8
 800e54e:	709a      	strb	r2, [r3, #2]
 800e550:	2200      	movs	r2, #0
 800e552:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	2206      	movs	r2, #6
 800e558:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2204      	movs	r2, #4
 800e55e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e560:	f640 0306 	movw	r3, #2054	; 0x806
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	69b9      	ldr	r1, [r7, #24]
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f001 fb81 	bl	800fc74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e572:	69b8      	ldr	r0, [r7, #24]
 800e574:	f7f8 fbe4 	bl	8006d40 <pbuf_free>
  p = NULL;
 800e578:	2300      	movs	r3, #0
 800e57a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e57c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	08013b94 	.word	0x08013b94
 800e58c:	08013ce4 	.word	0x08013ce4
 800e590:	08013c0c 	.word	0x08013c0c
 800e594:	08013d94 	.word	0x08013d94
 800e598:	08013dc8 	.word	0x08013dc8

0800e59c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	9202      	str	r2, [sp, #8]
 800e5c0:	4a06      	ldr	r2, [pc, #24]	; (800e5dc <etharp_request_dst+0x40>)
 800e5c2:	9201      	str	r2, [sp, #4]
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff ff5a 	bl	800e484 <etharp_raw>
 800e5d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	08014370 	.word	0x08014370

0800e5e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e5ea:	4a05      	ldr	r2, [pc, #20]	; (800e600 <etharp_request+0x20>)
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff ffd4 	bl	800e59c <etharp_request_dst>
 800e5f4:	4603      	mov	r3, r0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	08014368 	.word	0x08014368

0800e604 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08e      	sub	sp, #56	; 0x38
 800e608:	af04      	add	r7, sp, #16
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e60e:	4b7c      	ldr	r3, [pc, #496]	; (800e800 <icmp_input+0x1fc>)
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	f003 030f 	and.w	r3, r3, #15
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	b2db      	uxtb	r3, r3
 800e622:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e626:	2b13      	cmp	r3, #19
 800e628:	f240 80d2 	bls.w	800e7d0 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	895b      	ldrh	r3, [r3, #10]
 800e630:	2b03      	cmp	r3, #3
 800e632:	f240 80cf 	bls.w	800e7d4 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	785b      	ldrb	r3, [r3, #1]
 800e646:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e64a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 80b7 	beq.w	800e7c2 <icmp_input+0x1be>
 800e654:	2b08      	cmp	r3, #8
 800e656:	f040 80b7 	bne.w	800e7c8 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e65a:	4b6a      	ldr	r3, [pc, #424]	; (800e804 <icmp_input+0x200>)
 800e65c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e65e:	4b68      	ldr	r3, [pc, #416]	; (800e800 <icmp_input+0x1fc>)
 800e660:	695b      	ldr	r3, [r3, #20]
 800e662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e666:	2be0      	cmp	r3, #224	; 0xe0
 800e668:	f000 80bb 	beq.w	800e7e2 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e66c:	4b64      	ldr	r3, [pc, #400]	; (800e800 <icmp_input+0x1fc>)
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	4a63      	ldr	r2, [pc, #396]	; (800e800 <icmp_input+0x1fc>)
 800e672:	6812      	ldr	r2, [r2, #0]
 800e674:	4611      	mov	r1, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f000 fbee 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f040 80b1 	bne.w	800e7e6 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	891b      	ldrh	r3, [r3, #8]
 800e688:	2b07      	cmp	r3, #7
 800e68a:	f240 80a5 	bls.w	800e7d8 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e690:	330e      	adds	r3, #14
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7f8 fabd 	bl	8006c14 <pbuf_add_header>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d04b      	beq.n	800e738 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	891a      	ldrh	r2, [r3, #8]
 800e6a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6a6:	4413      	add	r3, r2
 800e6a8:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	891b      	ldrh	r3, [r3, #8]
 800e6ae:	8b7a      	ldrh	r2, [r7, #26]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	f0c0 809a 	bcc.w	800e7ea <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e6b6:	8b7b      	ldrh	r3, [r7, #26]
 800e6b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6bc:	4619      	mov	r1, r3
 800e6be:	200e      	movs	r0, #14
 800e6c0:	f7f8 f85a 	bl	8006778 <pbuf_alloc>
 800e6c4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 8090 	beq.w	800e7ee <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d203      	bcs.n	800e6e4 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e6dc:	6978      	ldr	r0, [r7, #20]
 800e6de:	f7f8 fb2f 	bl	8006d40 <pbuf_free>
          goto icmperr;
 800e6e2:	e085      	b.n	800e7f0 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e6ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f001 fb3d 	bl	800fd6c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e6f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6978      	ldr	r0, [r7, #20]
 800e6f8:	f7f8 fa9c 	bl	8006c34 <pbuf_remove_header>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d009      	beq.n	800e716 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e702:	4b41      	ldr	r3, [pc, #260]	; (800e808 <icmp_input+0x204>)
 800e704:	22b6      	movs	r2, #182	; 0xb6
 800e706:	4941      	ldr	r1, [pc, #260]	; (800e80c <icmp_input+0x208>)
 800e708:	4841      	ldr	r0, [pc, #260]	; (800e810 <icmp_input+0x20c>)
 800e70a:	f001 fb5f 	bl	800fdcc <iprintf>
          pbuf_free(r);
 800e70e:	6978      	ldr	r0, [r7, #20]
 800e710:	f7f8 fb16 	bl	8006d40 <pbuf_free>
          goto icmperr;
 800e714:	e06c      	b.n	800e7f0 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e716:	6879      	ldr	r1, [r7, #4]
 800e718:	6978      	ldr	r0, [r7, #20]
 800e71a:	f7f8 fc39 	bl	8006f90 <pbuf_copy>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d003      	beq.n	800e72c <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e724:	6978      	ldr	r0, [r7, #20]
 800e726:	f7f8 fb0b 	bl	8006d40 <pbuf_free>
          goto icmperr;
 800e72a:	e061      	b.n	800e7f0 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7f8 fb07 	bl	8006d40 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	e00f      	b.n	800e758 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e73a:	330e      	adds	r3, #14
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7f8 fa78 	bl	8006c34 <pbuf_remove_header>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d006      	beq.n	800e758 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e74a:	4b2f      	ldr	r3, [pc, #188]	; (800e808 <icmp_input+0x204>)
 800e74c:	22c7      	movs	r2, #199	; 0xc7
 800e74e:	4931      	ldr	r1, [pc, #196]	; (800e814 <icmp_input+0x210>)
 800e750:	482f      	ldr	r0, [pc, #188]	; (800e810 <icmp_input+0x20c>)
 800e752:	f001 fb3b 	bl	800fdcc <iprintf>
          goto icmperr;
 800e756:	e04b      	b.n	800e7f0 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e75e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7f8 fa56 	bl	8006c14 <pbuf_add_header>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d12b      	bne.n	800e7c6 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e77c:	4b20      	ldr	r3, [pc, #128]	; (800e800 <icmp_input+0x1fc>)
 800e77e:	691a      	ldr	r2, [r3, #16]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	2200      	movs	r2, #0
 800e788:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	2200      	movs	r2, #0
 800e78e:	709a      	strb	r2, [r3, #2]
 800e790:	2200      	movs	r2, #0
 800e792:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	22ff      	movs	r2, #255	; 0xff
 800e798:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	729a      	strb	r2, [r3, #10]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	9302      	str	r3, [sp, #8]
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	23ff      	movs	r3, #255	; 0xff
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	69f9      	ldr	r1, [r7, #28]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fa76 	bl	800eca8 <ip4_output_if>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e7c0:	e001      	b.n	800e7c6 <icmp_input+0x1c2>
      break;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <icmp_input+0x1c4>
      break;
 800e7c6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7f8 fab9 	bl	8006d40 <pbuf_free>
  return;
 800e7ce:	e013      	b.n	800e7f8 <icmp_input+0x1f4>
    goto lenerr;
 800e7d0:	bf00      	nop
 800e7d2:	e002      	b.n	800e7da <icmp_input+0x1d6>
    goto lenerr;
 800e7d4:	bf00      	nop
 800e7d6:	e000      	b.n	800e7da <icmp_input+0x1d6>
        goto lenerr;
 800e7d8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7f8 fab0 	bl	8006d40 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e7e0:	e00a      	b.n	800e7f8 <icmp_input+0x1f4>
        goto icmperr;
 800e7e2:	bf00      	nop
 800e7e4:	e004      	b.n	800e7f0 <icmp_input+0x1ec>
        goto icmperr;
 800e7e6:	bf00      	nop
 800e7e8:	e002      	b.n	800e7f0 <icmp_input+0x1ec>
          goto icmperr;
 800e7ea:	bf00      	nop
 800e7ec:	e000      	b.n	800e7f0 <icmp_input+0x1ec>
          goto icmperr;
 800e7ee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f7f8 faa5 	bl	8006d40 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e7f6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e7f8:	3728      	adds	r7, #40	; 0x28
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20003314 	.word	0x20003314
 800e804:	20003328 	.word	0x20003328
 800e808:	08013e0c 	.word	0x08013e0c
 800e80c:	08013e44 	.word	0x08013e44
 800e810:	08013e7c 	.word	0x08013e7c
 800e814:	08013ea4 	.word	0x08013ea4

0800e818 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	461a      	mov	r2, r3
 800e828:	2103      	movs	r1, #3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f814 	bl	800e858 <icmp_send_response>
}
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	460b      	mov	r3, r1
 800e842:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e844:	78fb      	ldrb	r3, [r7, #3]
 800e846:	461a      	mov	r2, r3
 800e848:	210b      	movs	r1, #11
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f804 	bl	800e858 <icmp_send_response>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b08c      	sub	sp, #48	; 0x30
 800e85c:	af04      	add	r7, sp, #16
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	460b      	mov	r3, r1
 800e862:	70fb      	strb	r3, [r7, #3]
 800e864:	4613      	mov	r3, r2
 800e866:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e868:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e86c:	2124      	movs	r1, #36	; 0x24
 800e86e:	2022      	movs	r0, #34	; 0x22
 800e870:	f7f7 ff82 	bl	8006778 <pbuf_alloc>
 800e874:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d04c      	beq.n	800e916 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	895b      	ldrh	r3, [r3, #10]
 800e880:	2b23      	cmp	r3, #35	; 0x23
 800e882:	d806      	bhi.n	800e892 <icmp_send_response+0x3a>
 800e884:	4b26      	ldr	r3, [pc, #152]	; (800e920 <icmp_send_response+0xc8>)
 800e886:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e88a:	4926      	ldr	r1, [pc, #152]	; (800e924 <icmp_send_response+0xcc>)
 800e88c:	4826      	ldr	r0, [pc, #152]	; (800e928 <icmp_send_response+0xd0>)
 800e88e:	f001 fa9d 	bl	800fdcc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	78fa      	ldrb	r2, [r7, #3]
 800e8a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	78ba      	ldrb	r2, [r7, #2]
 800e8a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	711a      	strb	r2, [r3, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	719a      	strb	r2, [r3, #6]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	f103 0008 	add.w	r0, r3, #8
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	221c      	movs	r2, #28
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	f001 fa4d 	bl	800fd6c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e8d8:	f107 030c 	add.w	r3, r7, #12
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f000 f825 	bl	800e92c <ip4_route>
 800e8e2:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d011      	beq.n	800e90e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	709a      	strb	r2, [r3, #2]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e8f4:	f107 020c 	add.w	r2, r7, #12
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	9302      	str	r3, [sp, #8]
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	9301      	str	r3, [sp, #4]
 800e900:	2300      	movs	r3, #0
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	23ff      	movs	r3, #255	; 0xff
 800e906:	2100      	movs	r1, #0
 800e908:	69b8      	ldr	r0, [r7, #24]
 800e90a:	f000 f9cd 	bl	800eca8 <ip4_output_if>
  }
  pbuf_free(q);
 800e90e:	69b8      	ldr	r0, [r7, #24]
 800e910:	f7f8 fa16 	bl	8006d40 <pbuf_free>
 800e914:	e000      	b.n	800e918 <icmp_send_response+0xc0>
    return;
 800e916:	bf00      	nop
}
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	08013e0c 	.word	0x08013e0c
 800e924:	08013ed8 	.word	0x08013ed8
 800e928:	08013e7c 	.word	0x08013e7c

0800e92c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e934:	4b33      	ldr	r3, [pc, #204]	; (800ea04 <ip4_route+0xd8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	60fb      	str	r3, [r7, #12]
 800e93a:	e036      	b.n	800e9aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d02b      	beq.n	800e9a4 <ip4_route+0x78>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e952:	089b      	lsrs	r3, r3, #2
 800e954:	f003 0301 	and.w	r3, r3, #1
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d022      	beq.n	800e9a4 <ip4_route+0x78>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	3304      	adds	r3, #4
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01d      	beq.n	800e9a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3304      	adds	r3, #4
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	405a      	eors	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	3308      	adds	r3, #8
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4013      	ands	r3, r2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	e038      	b.n	800e9f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e98a:	f003 0302 	and.w	r3, r3, #2
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d108      	bne.n	800e9a4 <ip4_route+0x78>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	330c      	adds	r3, #12
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d101      	bne.n	800e9a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	e028      	b.n	800e9f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1c5      	bne.n	800e93c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e9b0:	4b15      	ldr	r3, [pc, #84]	; (800ea08 <ip4_route+0xdc>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d01a      	beq.n	800e9ee <ip4_route+0xc2>
 800e9b8:	4b13      	ldr	r3, [pc, #76]	; (800ea08 <ip4_route+0xdc>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9c0:	f003 0301 	and.w	r3, r3, #1
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d012      	beq.n	800e9ee <ip4_route+0xc2>
 800e9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <ip4_route+0xdc>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00a      	beq.n	800e9ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <ip4_route+0xdc>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e9ec:	d101      	bne.n	800e9f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e001      	b.n	800e9f6 <ip4_route+0xca>
  }

  return netif_default;
 800e9f2:	4b05      	ldr	r3, [pc, #20]	; (800ea08 <ip4_route+0xdc>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	20008a78 	.word	0x20008a78
 800ea08:	20008a7c 	.word	0x20008a7c

0800ea0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d016      	beq.n	800ea52 <ip4_input_accept+0x46>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3304      	adds	r3, #4
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d011      	beq.n	800ea52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	; (800ea5c <ip4_input_accept+0x50>)
 800ea30:	695a      	ldr	r2, [r3, #20]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3304      	adds	r3, #4
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d008      	beq.n	800ea4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ea3c:	4b07      	ldr	r3, [pc, #28]	; (800ea5c <ip4_input_accept+0x50>)
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	6879      	ldr	r1, [r7, #4]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f000 fa08 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800ea48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e000      	b.n	800ea54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20003314 	.word	0x20003314

0800ea60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	091b      	lsrs	r3, r3, #4
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b04      	cmp	r3, #4
 800ea7a:	d004      	beq.n	800ea86 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7f8 f95f 	bl	8006d40 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	e107      	b.n	800ec96 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 030f 	and.w	r3, r3, #15
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f6 fe37 	bl	8005710 <lwip_htons>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	891b      	ldrh	r3, [r3, #8]
 800eaaa:	89ba      	ldrh	r2, [r7, #12]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d204      	bcs.n	800eaba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eab0:	89bb      	ldrh	r3, [r7, #12]
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7f7 ffbd 	bl	8006a34 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	89fa      	ldrh	r2, [r7, #14]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d807      	bhi.n	800ead4 <ip4_input+0x74>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	891b      	ldrh	r3, [r3, #8]
 800eac8:	89ba      	ldrh	r2, [r7, #12]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d802      	bhi.n	800ead4 <ip4_input+0x74>
 800eace:	89fb      	ldrh	r3, [r7, #14]
 800ead0:	2b13      	cmp	r3, #19
 800ead2:	d804      	bhi.n	800eade <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7f8 f933 	bl	8006d40 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	e0db      	b.n	800ec96 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	4a6f      	ldr	r2, [pc, #444]	; (800eca0 <ip4_input+0x240>)
 800eae4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	4a6d      	ldr	r2, [pc, #436]	; (800eca0 <ip4_input+0x240>)
 800eaec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eaee:	4b6c      	ldr	r3, [pc, #432]	; (800eca0 <ip4_input+0x240>)
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eaf6:	2be0      	cmp	r3, #224	; 0xe0
 800eaf8:	d112      	bne.n	800eb20 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d007      	beq.n	800eb1a <ip4_input+0xba>
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <ip4_input+0xba>
      netif = inp;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	617b      	str	r3, [r7, #20]
 800eb18:	e02a      	b.n	800eb70 <ip4_input+0x110>
    } else {
      netif = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	e027      	b.n	800eb70 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800eb20:	6838      	ldr	r0, [r7, #0]
 800eb22:	f7ff ff73 	bl	800ea0c <ip4_input_accept>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <ip4_input+0xd2>
      netif = inp;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	617b      	str	r3, [r7, #20]
 800eb30:	e01e      	b.n	800eb70 <ip4_input+0x110>
    } else {
      netif = NULL;
 800eb32:	2300      	movs	r3, #0
 800eb34:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eb36:	4b5a      	ldr	r3, [pc, #360]	; (800eca0 <ip4_input+0x240>)
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb3e:	d017      	beq.n	800eb70 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800eb40:	4b58      	ldr	r3, [pc, #352]	; (800eca4 <ip4_input+0x244>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	617b      	str	r3, [r7, #20]
 800eb46:	e00e      	b.n	800eb66 <ip4_input+0x106>
          if (netif == inp) {
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d006      	beq.n	800eb5e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	f7ff ff5b 	bl	800ea0c <ip4_input_accept>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d108      	bne.n	800eb6e <ip4_input+0x10e>
 800eb5c:	e000      	b.n	800eb60 <ip4_input+0x100>
            continue;
 800eb5e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	617b      	str	r3, [r7, #20]
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1ed      	bne.n	800eb48 <ip4_input+0xe8>
 800eb6c:	e000      	b.n	800eb70 <ip4_input+0x110>
            break;
 800eb6e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eb70:	4b4b      	ldr	r3, [pc, #300]	; (800eca0 <ip4_input+0x240>)
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f96e 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d105      	bne.n	800eb8e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eb82:	4b47      	ldr	r3, [pc, #284]	; (800eca0 <ip4_input+0x240>)
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eb8a:	2be0      	cmp	r3, #224	; 0xe0
 800eb8c:	d104      	bne.n	800eb98 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f8 f8d6 	bl	8006d40 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	e07e      	b.n	800ec96 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d104      	bne.n	800eba8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7f8 f8ce 	bl	8006d40 <pbuf_free>
    return ERR_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	e076      	b.n	800ec96 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	88db      	ldrh	r3, [r3, #6]
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00b      	beq.n	800ebd2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fc92 	bl	800f4e4 <ip4_reass>
 800ebc0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d101      	bne.n	800ebcc <ip4_input+0x16c>
      return ERR_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	e064      	b.n	800ec96 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ebd2:	4a33      	ldr	r2, [pc, #204]	; (800eca0 <ip4_input+0x240>)
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ebd8:	4a31      	ldr	r2, [pc, #196]	; (800eca0 <ip4_input+0x240>)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ebde:	4a30      	ldr	r2, [pc, #192]	; (800eca0 <ip4_input+0x240>)
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	f003 030f 	and.w	r3, r3, #15
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	4b2a      	ldr	r3, [pc, #168]	; (800eca0 <ip4_input+0x240>)
 800ebf6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ebf8:	89fb      	ldrh	r3, [r7, #14]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7f8 f819 	bl	8006c34 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	7a5b      	ldrb	r3, [r3, #9]
 800ec06:	2b11      	cmp	r3, #17
 800ec08:	d006      	beq.n	800ec18 <ip4_input+0x1b8>
 800ec0a:	2b11      	cmp	r3, #17
 800ec0c:	dc13      	bgt.n	800ec36 <ip4_input+0x1d6>
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d00c      	beq.n	800ec2c <ip4_input+0x1cc>
 800ec12:	2b06      	cmp	r3, #6
 800ec14:	d005      	beq.n	800ec22 <ip4_input+0x1c2>
 800ec16:	e00e      	b.n	800ec36 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7fd ff26 	bl	800ca6c <udp_input>
        break;
 800ec20:	e026      	b.n	800ec70 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7f9 ff55 	bl	8008ad4 <tcp_input>
        break;
 800ec2a:	e021      	b.n	800ec70 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7ff fce8 	bl	800e604 <icmp_input>
        break;
 800ec34:	e01c      	b.n	800ec70 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ec36:	4b1a      	ldr	r3, [pc, #104]	; (800eca0 <ip4_input+0x240>)
 800ec38:	695b      	ldr	r3, [r3, #20]
 800ec3a:	6979      	ldr	r1, [r7, #20]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 f90b 	bl	800ee58 <ip4_addr_isbroadcast_u32>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10f      	bne.n	800ec68 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec48:	4b15      	ldr	r3, [pc, #84]	; (800eca0 <ip4_input+0x240>)
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ec50:	2be0      	cmp	r3, #224	; 0xe0
 800ec52:	d009      	beq.n	800ec68 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ec54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7f8 f85d 	bl	8006d1a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ec60:	2102      	movs	r1, #2
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7ff fdd8 	bl	800e818 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7f8 f869 	bl	8006d40 <pbuf_free>
        break;
 800ec6e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ec70:	4b0b      	ldr	r3, [pc, #44]	; (800eca0 <ip4_input+0x240>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ec76:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <ip4_input+0x240>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ec7c:	4b08      	ldr	r3, [pc, #32]	; (800eca0 <ip4_input+0x240>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ec82:	4b07      	ldr	r3, [pc, #28]	; (800eca0 <ip4_input+0x240>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ec88:	4b05      	ldr	r3, [pc, #20]	; (800eca0 <ip4_input+0x240>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ec8e:	4b04      	ldr	r3, [pc, #16]	; (800eca0 <ip4_input+0x240>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	20003314 	.word	0x20003314
 800eca4:	20008a78 	.word	0x20008a78

0800eca8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08a      	sub	sp, #40	; 0x28
 800ecac:	af04      	add	r7, sp, #16
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d009      	beq.n	800ecd4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <ip4_output_if+0x26>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d102      	bne.n	800ecd4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ecd4:	78fa      	ldrb	r2, [r7, #3]
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	9302      	str	r3, [sp, #8]
 800ecda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4613      	mov	r3, r2
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	6979      	ldr	r1, [r7, #20]
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 f805 	bl	800ecfc <ip4_output_if_src>
 800ecf2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b088      	sub	sp, #32
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	7b9b      	ldrb	r3, [r3, #14]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d006      	beq.n	800ed20 <ip4_output_if_src+0x24>
 800ed12:	4b4b      	ldr	r3, [pc, #300]	; (800ee40 <ip4_output_if_src+0x144>)
 800ed14:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ed18:	494a      	ldr	r1, [pc, #296]	; (800ee44 <ip4_output_if_src+0x148>)
 800ed1a:	484b      	ldr	r0, [pc, #300]	; (800ee48 <ip4_output_if_src+0x14c>)
 800ed1c:	f001 f856 	bl	800fdcc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d060      	beq.n	800ede8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ed26:	2314      	movs	r3, #20
 800ed28:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ed2a:	2114      	movs	r1, #20
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f7f7 ff71 	bl	8006c14 <pbuf_add_header>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ed38:	f06f 0301 	mvn.w	r3, #1
 800ed3c:	e07c      	b.n	800ee38 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	895b      	ldrh	r3, [r3, #10]
 800ed48:	2b13      	cmp	r3, #19
 800ed4a:	d806      	bhi.n	800ed5a <ip4_output_if_src+0x5e>
 800ed4c:	4b3c      	ldr	r3, [pc, #240]	; (800ee40 <ip4_output_if_src+0x144>)
 800ed4e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ed52:	493e      	ldr	r1, [pc, #248]	; (800ee4c <ip4_output_if_src+0x150>)
 800ed54:	483c      	ldr	r0, [pc, #240]	; (800ee48 <ip4_output_if_src+0x14c>)
 800ed56:	f001 f839 	bl	800fdcc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	78fa      	ldrb	r2, [r7, #3]
 800ed5e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ed66:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ed70:	8b7b      	ldrh	r3, [r7, #26]
 800ed72:	089b      	lsrs	r3, r3, #2
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed7c:	b2da      	uxtb	r2, r3
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ed88:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	891b      	ldrh	r3, [r3, #8]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7f6 fcbe 	bl	8005710 <lwip_htons>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	719a      	strb	r2, [r3, #6]
 800eda2:	2200      	movs	r2, #0
 800eda4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eda6:	4b2a      	ldr	r3, [pc, #168]	; (800ee50 <ip4_output_if_src+0x154>)
 800eda8:	881b      	ldrh	r3, [r3, #0]
 800edaa:	4618      	mov	r0, r3
 800edac:	f7f6 fcb0 	bl	8005710 <lwip_htons>
 800edb0:	4603      	mov	r3, r0
 800edb2:	461a      	mov	r2, r3
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800edb8:	4b25      	ldr	r3, [pc, #148]	; (800ee50 <ip4_output_if_src+0x154>)
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	3301      	adds	r3, #1
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	4b23      	ldr	r3, [pc, #140]	; (800ee50 <ip4_output_if_src+0x154>)
 800edc2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d104      	bne.n	800edd4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800edca:	4b22      	ldr	r3, [pc, #136]	; (800ee54 <ip4_output_if_src+0x158>)
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	60da      	str	r2, [r3, #12]
 800edd2:	e003      	b.n	800eddc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2200      	movs	r2, #0
 800ede0:	729a      	strb	r2, [r3, #10]
 800ede2:	2200      	movs	r2, #0
 800ede4:	72da      	strb	r2, [r3, #11]
 800ede6:	e00f      	b.n	800ee08 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	895b      	ldrh	r3, [r3, #10]
 800edec:	2b13      	cmp	r3, #19
 800edee:	d802      	bhi.n	800edf6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800edf0:	f06f 0301 	mvn.w	r3, #1
 800edf4:	e020      	b.n	800ee38 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ee02:	f107 0314 	add.w	r3, r7, #20
 800ee06:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00c      	beq.n	800ee2a <ip4_output_if_src+0x12e>
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	891a      	ldrh	r2, [r3, #8]
 800ee14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d906      	bls.n	800ee2a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 fd53 	bl	800f8cc <ip4_frag>
 800ee26:	4603      	mov	r3, r0
 800ee28:	e006      	b.n	800ee38 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	68f9      	ldr	r1, [r7, #12]
 800ee32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee34:	4798      	blx	r3
 800ee36:	4603      	mov	r3, r0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	08013f04 	.word	0x08013f04
 800ee44:	08013f38 	.word	0x08013f38
 800ee48:	08013f44 	.word	0x08013f44
 800ee4c:	08013f6c 	.word	0x08013f6c
 800ee50:	20008bda 	.word	0x20008bda
 800ee54:	08014364 	.word	0x08014364

0800ee58 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6c:	d002      	beq.n	800ee74 <ip4_addr_isbroadcast_u32+0x1c>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e02a      	b.n	800eece <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee7e:	f003 0302 	and.w	r3, r3, #2
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e021      	b.n	800eece <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d101      	bne.n	800ee9a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	e019      	b.n	800eece <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	3304      	adds	r3, #4
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	405a      	eors	r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4013      	ands	r3, r2
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10d      	bne.n	800eecc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	43da      	mvns	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d101      	bne.n	800eecc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eec8:	2301      	movs	r3, #1
 800eeca:	e000      	b.n	800eece <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eecc:	2300      	movs	r3, #0
  }
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3714      	adds	r7, #20
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr
	...

0800eedc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <ip_reass_tmr+0x54>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800eeec:	e018      	b.n	800ef20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	7fdb      	ldrb	r3, [r3, #31]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <ip_reass_tmr+0x32>
      r->timer--;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	7fdb      	ldrb	r3, [r3, #31]
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	e008      	b.n	800ef20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 f80a 	bl	800ef34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e3      	bne.n	800eeee <ip_reass_tmr+0x12>
    }
  }
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20008bdc 	.word	0x20008bdc

0800ef34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d105      	bne.n	800ef56 <ip_reass_free_complete_datagram+0x22>
 800ef4a:	4b45      	ldr	r3, [pc, #276]	; (800f060 <ip_reass_free_complete_datagram+0x12c>)
 800ef4c:	22ab      	movs	r2, #171	; 0xab
 800ef4e:	4945      	ldr	r1, [pc, #276]	; (800f064 <ip_reass_free_complete_datagram+0x130>)
 800ef50:	4845      	ldr	r0, [pc, #276]	; (800f068 <ip_reass_free_complete_datagram+0x134>)
 800ef52:	f000 ff3b 	bl	800fdcc <iprintf>
  if (prev != NULL) {
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00a      	beq.n	800ef72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d005      	beq.n	800ef72 <ip_reass_free_complete_datagram+0x3e>
 800ef66:	4b3e      	ldr	r3, [pc, #248]	; (800f060 <ip_reass_free_complete_datagram+0x12c>)
 800ef68:	22ad      	movs	r2, #173	; 0xad
 800ef6a:	4940      	ldr	r1, [pc, #256]	; (800f06c <ip_reass_free_complete_datagram+0x138>)
 800ef6c:	483e      	ldr	r0, [pc, #248]	; (800f068 <ip_reass_free_complete_datagram+0x134>)
 800ef6e:	f000 ff2d 	bl	800fdcc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	889b      	ldrh	r3, [r3, #4]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d12a      	bne.n	800efda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	6858      	ldr	r0, [r3, #4]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	2214      	movs	r2, #20
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f000 fee5 	bl	800fd6c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800efa2:	2101      	movs	r1, #1
 800efa4:	69b8      	ldr	r0, [r7, #24]
 800efa6:	f7ff fc47 	bl	800e838 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800efaa:	69b8      	ldr	r0, [r7, #24]
 800efac:	f7f7 ff50 	bl	8006e50 <pbuf_clen>
 800efb0:	4603      	mov	r3, r0
 800efb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800efb4:	8bfa      	ldrh	r2, [r7, #30]
 800efb6:	8a7b      	ldrh	r3, [r7, #18]
 800efb8:	4413      	add	r3, r2
 800efba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efbe:	db05      	blt.n	800efcc <ip_reass_free_complete_datagram+0x98>
 800efc0:	4b27      	ldr	r3, [pc, #156]	; (800f060 <ip_reass_free_complete_datagram+0x12c>)
 800efc2:	22bc      	movs	r2, #188	; 0xbc
 800efc4:	492a      	ldr	r1, [pc, #168]	; (800f070 <ip_reass_free_complete_datagram+0x13c>)
 800efc6:	4828      	ldr	r0, [pc, #160]	; (800f068 <ip_reass_free_complete_datagram+0x134>)
 800efc8:	f000 ff00 	bl	800fdcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800efcc:	8bfa      	ldrh	r2, [r7, #30]
 800efce:	8a7b      	ldrh	r3, [r7, #18]
 800efd0:	4413      	add	r3, r2
 800efd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800efd4:	69b8      	ldr	r0, [r7, #24]
 800efd6:	f7f7 feb3 	bl	8006d40 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800efe0:	e01f      	b.n	800f022 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7f7 ff2c 	bl	8006e50 <pbuf_clen>
 800eff8:	4603      	mov	r3, r0
 800effa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800effc:	8bfa      	ldrh	r2, [r7, #30]
 800effe:	8a7b      	ldrh	r3, [r7, #18]
 800f000:	4413      	add	r3, r2
 800f002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f006:	db05      	blt.n	800f014 <ip_reass_free_complete_datagram+0xe0>
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <ip_reass_free_complete_datagram+0x12c>)
 800f00a:	22cc      	movs	r2, #204	; 0xcc
 800f00c:	4918      	ldr	r1, [pc, #96]	; (800f070 <ip_reass_free_complete_datagram+0x13c>)
 800f00e:	4816      	ldr	r0, [pc, #88]	; (800f068 <ip_reass_free_complete_datagram+0x134>)
 800f010:	f000 fedc 	bl	800fdcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f014:	8bfa      	ldrh	r2, [r7, #30]
 800f016:	8a7b      	ldrh	r3, [r7, #18]
 800f018:	4413      	add	r3, r2
 800f01a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	f7f7 fe8f 	bl	8006d40 <pbuf_free>
  while (p != NULL) {
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1dc      	bne.n	800efe2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f8c2 	bl	800f1b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f030:	4b10      	ldr	r3, [pc, #64]	; (800f074 <ip_reass_free_complete_datagram+0x140>)
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	8bfa      	ldrh	r2, [r7, #30]
 800f036:	429a      	cmp	r2, r3
 800f038:	d905      	bls.n	800f046 <ip_reass_free_complete_datagram+0x112>
 800f03a:	4b09      	ldr	r3, [pc, #36]	; (800f060 <ip_reass_free_complete_datagram+0x12c>)
 800f03c:	22d2      	movs	r2, #210	; 0xd2
 800f03e:	490e      	ldr	r1, [pc, #56]	; (800f078 <ip_reass_free_complete_datagram+0x144>)
 800f040:	4809      	ldr	r0, [pc, #36]	; (800f068 <ip_reass_free_complete_datagram+0x134>)
 800f042:	f000 fec3 	bl	800fdcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f046:	4b0b      	ldr	r3, [pc, #44]	; (800f074 <ip_reass_free_complete_datagram+0x140>)
 800f048:	881a      	ldrh	r2, [r3, #0]
 800f04a:	8bfb      	ldrh	r3, [r7, #30]
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	b29a      	uxth	r2, r3
 800f050:	4b08      	ldr	r3, [pc, #32]	; (800f074 <ip_reass_free_complete_datagram+0x140>)
 800f052:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f054:	8bfb      	ldrh	r3, [r7, #30]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3720      	adds	r7, #32
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	08013f9c 	.word	0x08013f9c
 800f064:	08013fd8 	.word	0x08013fd8
 800f068:	08013fe4 	.word	0x08013fe4
 800f06c:	0801400c 	.word	0x0801400c
 800f070:	08014020 	.word	0x08014020
 800f074:	20008be0 	.word	0x20008be0
 800f078:	08014040 	.word	0x08014040

0800f07c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08a      	sub	sp, #40	; 0x28
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f09a:	4b28      	ldr	r3, [pc, #160]	; (800f13c <ip_reass_remove_oldest_datagram+0xc0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f0a0:	e030      	b.n	800f104 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	695a      	ldr	r2, [r3, #20]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d10c      	bne.n	800f0c8 <ip_reass_remove_oldest_datagram+0x4c>
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	699a      	ldr	r2, [r3, #24]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d106      	bne.n	800f0c8 <ip_reass_remove_oldest_datagram+0x4c>
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	899a      	ldrh	r2, [r3, #12]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	889b      	ldrh	r3, [r3, #4]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d014      	beq.n	800f0f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d104      	bne.n	800f0de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	61bb      	str	r3, [r7, #24]
 800f0dc:	e009      	b.n	800f0f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e0:	7fda      	ldrb	r2, [r3, #31]
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	7fdb      	ldrb	r3, [r3, #31]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d803      	bhi.n	800f0f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1cb      	bne.n	800f0a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d008      	beq.n	800f122 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f110:	69b9      	ldr	r1, [r7, #24]
 800f112:	6a38      	ldr	r0, [r7, #32]
 800f114:	f7ff ff0e 	bl	800ef34 <ip_reass_free_complete_datagram>
 800f118:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4413      	add	r3, r2
 800f120:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	429a      	cmp	r2, r3
 800f128:	da02      	bge.n	800f130 <ip_reass_remove_oldest_datagram+0xb4>
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	dcac      	bgt.n	800f08a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f130:	697b      	ldr	r3, [r7, #20]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3728      	adds	r7, #40	; 0x28
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20008bdc 	.word	0x20008bdc

0800f140 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f14a:	2004      	movs	r0, #4
 800f14c:	f7f6 ff36 	bl	8005fbc <memp_malloc>
 800f150:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d110      	bne.n	800f17a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff ff8e 	bl	800f07c <ip_reass_remove_oldest_datagram>
 800f160:	4602      	mov	r2, r0
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	4293      	cmp	r3, r2
 800f166:	dc03      	bgt.n	800f170 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f168:	2004      	movs	r0, #4
 800f16a:	f7f6 ff27 	bl	8005fbc <memp_malloc>
 800f16e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f176:	2300      	movs	r3, #0
 800f178:	e016      	b.n	800f1a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f17a:	2220      	movs	r2, #32
 800f17c:	2100      	movs	r1, #0
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f000 fe1c 	bl	800fdbc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	220f      	movs	r2, #15
 800f188:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <ip_reass_enqueue_new_datagram+0x70>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f192:	4a07      	ldr	r2, [pc, #28]	; (800f1b0 <ip_reass_enqueue_new_datagram+0x70>)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	3308      	adds	r3, #8
 800f19c:	2214      	movs	r2, #20
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 fde3 	bl	800fd6c <memcpy>
  return ipr;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20008bdc 	.word	0x20008bdc

0800f1b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f1be:	4b10      	ldr	r3, [pc, #64]	; (800f200 <ip_reass_dequeue_datagram+0x4c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d104      	bne.n	800f1d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a0c      	ldr	r2, [pc, #48]	; (800f200 <ip_reass_dequeue_datagram+0x4c>)
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	e00d      	b.n	800f1ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d106      	bne.n	800f1e6 <ip_reass_dequeue_datagram+0x32>
 800f1d8:	4b0a      	ldr	r3, [pc, #40]	; (800f204 <ip_reass_dequeue_datagram+0x50>)
 800f1da:	f240 1245 	movw	r2, #325	; 0x145
 800f1de:	490a      	ldr	r1, [pc, #40]	; (800f208 <ip_reass_dequeue_datagram+0x54>)
 800f1e0:	480a      	ldr	r0, [pc, #40]	; (800f20c <ip_reass_dequeue_datagram+0x58>)
 800f1e2:	f000 fdf3 	bl	800fdcc <iprintf>
    prev->next = ipr->next;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	2004      	movs	r0, #4
 800f1f2:	f7f6 ff2f 	bl	8006054 <memp_free>
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	20008bdc 	.word	0x20008bdc
 800f204:	08013f9c 	.word	0x08013f9c
 800f208:	08014064 	.word	0x08014064
 800f20c:	08013fe4 	.word	0x08013fe4

0800f210 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b08c      	sub	sp, #48	; 0x30
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f21c:	2300      	movs	r3, #0
 800f21e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f220:	2301      	movs	r3, #1
 800f222:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	885b      	ldrh	r3, [r3, #2]
 800f22e:	b29b      	uxth	r3, r3
 800f230:	4618      	mov	r0, r3
 800f232:	f7f6 fa6d 	bl	8005710 <lwip_htons>
 800f236:	4603      	mov	r3, r0
 800f238:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	f003 030f 	and.w	r3, r3, #15
 800f242:	b2db      	uxtb	r3, r3
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f248:	7e7b      	ldrb	r3, [r7, #25]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	8b7a      	ldrh	r2, [r7, #26]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d202      	bcs.n	800f258 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f252:	f04f 33ff 	mov.w	r3, #4294967295
 800f256:	e135      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f258:	7e7b      	ldrb	r3, [r7, #25]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	8b7a      	ldrh	r2, [r7, #26]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	88db      	ldrh	r3, [r3, #6]
 800f266:	b29b      	uxth	r3, r3
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f6 fa51 	bl	8005710 <lwip_htons>
 800f26e:	4603      	mov	r3, r0
 800f270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f274:	b29b      	uxth	r3, r3
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
 800f286:	2200      	movs	r2, #0
 800f288:	705a      	strb	r2, [r3, #1]
 800f28a:	2200      	movs	r2, #0
 800f28c:	709a      	strb	r2, [r3, #2]
 800f28e:	2200      	movs	r2, #0
 800f290:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	8afa      	ldrh	r2, [r7, #22]
 800f296:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f298:	8afa      	ldrh	r2, [r7, #22]
 800f29a:	8b7b      	ldrh	r3, [r7, #26]
 800f29c:	4413      	add	r3, r2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	88db      	ldrh	r3, [r3, #6]
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	8afa      	ldrh	r2, [r7, #22]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d902      	bls.n	800f2b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	e106      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f2bc:	e068      	b.n	800f390 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	889b      	ldrh	r3, [r3, #4]
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	889b      	ldrh	r3, [r3, #4]
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d235      	bcs.n	800f340 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d020      	beq.n	800f322 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	889b      	ldrh	r3, [r3, #4]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e8:	88db      	ldrh	r3, [r3, #6]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d307      	bcc.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	88db      	ldrh	r3, [r3, #6]
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	889b      	ldrh	r3, [r3, #4]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d902      	bls.n	800f306 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f300:	f04f 33ff 	mov.w	r3, #4294967295
 800f304:	e0de      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30e:	88db      	ldrh	r3, [r3, #6]
 800f310:	b29a      	uxth	r2, r3
 800f312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f314:	889b      	ldrh	r3, [r3, #4]
 800f316:	b29b      	uxth	r3, r3
 800f318:	429a      	cmp	r2, r3
 800f31a:	d03d      	beq.n	800f398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f320:	e03a      	b.n	800f398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	88db      	ldrh	r3, [r3, #6]
 800f326:	b29a      	uxth	r2, r3
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	889b      	ldrh	r3, [r3, #4]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	429a      	cmp	r2, r3
 800f330:	d902      	bls.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f332:	f04f 33ff 	mov.w	r3, #4294967295
 800f336:	e0c5      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	605a      	str	r2, [r3, #4]
      break;
 800f33e:	e02b      	b.n	800f398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	889b      	ldrh	r3, [r3, #4]
 800f344:	b29a      	uxth	r2, r3
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	889b      	ldrh	r3, [r3, #4]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d102      	bne.n	800f356 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
 800f354:	e0b6      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	889b      	ldrh	r3, [r3, #4]
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	88db      	ldrh	r3, [r3, #6]
 800f360:	b29b      	uxth	r3, r3
 800f362:	429a      	cmp	r2, r3
 800f364:	d202      	bcs.n	800f36c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f366:	f04f 33ff 	mov.w	r3, #4294967295
 800f36a:	e0ab      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d009      	beq.n	800f386 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	88db      	ldrh	r3, [r3, #6]
 800f376:	b29a      	uxth	r2, r3
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	889b      	ldrh	r3, [r3, #4]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	429a      	cmp	r2, r3
 800f380:	d001      	beq.n	800f386 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	2b00      	cmp	r3, #0
 800f394:	d193      	bne.n	800f2be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f396:	e000      	b.n	800f39a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f398:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d12d      	bne.n	800f3fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d01c      	beq.n	800f3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	88db      	ldrh	r3, [r3, #6]
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ae:	889b      	ldrh	r3, [r3, #4]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d906      	bls.n	800f3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f3b6:	4b45      	ldr	r3, [pc, #276]	; (800f4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f3bc:	4944      	ldr	r1, [pc, #272]	; (800f4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f3be:	4845      	ldr	r0, [pc, #276]	; (800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3c0:	f000 fd04 	bl	800fdcc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	88db      	ldrh	r3, [r3, #6]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	889b      	ldrh	r3, [r3, #4]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d010      	beq.n	800f3fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	623b      	str	r3, [r7, #32]
 800f3de:	e00d      	b.n	800f3fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d006      	beq.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f3e8:	4b38      	ldr	r3, [pc, #224]	; (800f4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f3ee:	493a      	ldr	r1, [pc, #232]	; (800f4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f3f0:	4838      	ldr	r0, [pc, #224]	; (800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3f2:	f000 fceb 	bl	800fdcc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d105      	bne.n	800f40e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7f9b      	ldrb	r3, [r3, #30]
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d059      	beq.n	800f4c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d04f      	beq.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d006      	beq.n	800f42a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	889b      	ldrh	r3, [r3, #4]
 800f424:	b29b      	uxth	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	623b      	str	r3, [r7, #32]
 800f42e:	e041      	b.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f43a:	e012      	b.n	800f462 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	88db      	ldrh	r3, [r3, #6]
 800f446:	b29a      	uxth	r2, r3
 800f448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44a:	889b      	ldrh	r3, [r3, #4]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	429a      	cmp	r2, r3
 800f450:	d002      	beq.n	800f458 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	623b      	str	r3, [r7, #32]
            break;
 800f456:	e007      	b.n	800f468 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1e9      	bne.n	800f43c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d022      	beq.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f478:	f240 12df 	movw	r2, #479	; 0x1df
 800f47c:	4917      	ldr	r1, [pc, #92]	; (800f4dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f47e:	4815      	ldr	r0, [pc, #84]	; (800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f480:	f000 fca4 	bl	800fdcc <iprintf>
          LWIP_ASSERT("sanity check",
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d106      	bne.n	800f49e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f490:	4b0e      	ldr	r3, [pc, #56]	; (800f4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f492:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f496:	4911      	ldr	r1, [pc, #68]	; (800f4dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f498:	480e      	ldr	r0, [pc, #56]	; (800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f49a:	f000 fc97 	bl	800fdcc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d006      	beq.n	800f4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f4a6:	4b09      	ldr	r3, [pc, #36]	; (800f4cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f4ac:	490c      	ldr	r1, [pc, #48]	; (800f4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f4ae:	4809      	ldr	r0, [pc, #36]	; (800f4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4b0:	f000 fc8c 	bl	800fdcc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	bf14      	ite	ne
 800f4ba:	2301      	movne	r3, #1
 800f4bc:	2300      	moveq	r3, #0
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	e000      	b.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3730      	adds	r7, #48	; 0x30
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	08013f9c 	.word	0x08013f9c
 800f4d0:	08014080 	.word	0x08014080
 800f4d4:	08013fe4 	.word	0x08013fe4
 800f4d8:	080140a0 	.word	0x080140a0
 800f4dc:	080140d8 	.word	0x080140d8
 800f4e0:	080140e8 	.word	0x080140e8

0800f4e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b08e      	sub	sp, #56	; 0x38
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	f003 030f 	and.w	r3, r3, #15
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b14      	cmp	r3, #20
 800f502:	f040 8171 	bne.w	800f7e8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	88db      	ldrh	r3, [r3, #6]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f6 f8ff 	bl	8005710 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f518:	b29b      	uxth	r3, r3
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	885b      	ldrh	r3, [r3, #2]
 800f522:	b29b      	uxth	r3, r3
 800f524:	4618      	mov	r0, r3
 800f526:	f7f6 f8f3 	bl	8005710 <lwip_htons>
 800f52a:	4603      	mov	r3, r0
 800f52c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	f003 030f 	and.w	r3, r3, #15
 800f536:	b2db      	uxtb	r3, r3
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f53e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f542:	b29b      	uxth	r3, r3
 800f544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f546:	429a      	cmp	r2, r3
 800f548:	f0c0 8150 	bcc.w	800f7ec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f54c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f550:	b29b      	uxth	r3, r3
 800f552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7f7 fc79 	bl	8006e50 <pbuf_clen>
 800f55e:	4603      	mov	r3, r0
 800f560:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f562:	4b8c      	ldr	r3, [pc, #560]	; (800f794 <ip4_reass+0x2b0>)
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	8c3b      	ldrh	r3, [r7, #32]
 800f56a:	4413      	add	r3, r2
 800f56c:	2b0a      	cmp	r3, #10
 800f56e:	dd10      	ble.n	800f592 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f570:	8c3b      	ldrh	r3, [r7, #32]
 800f572:	4619      	mov	r1, r3
 800f574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f576:	f7ff fd81 	bl	800f07c <ip_reass_remove_oldest_datagram>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	f000 8137 	beq.w	800f7f0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f582:	4b84      	ldr	r3, [pc, #528]	; (800f794 <ip4_reass+0x2b0>)
 800f584:	881b      	ldrh	r3, [r3, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	8c3b      	ldrh	r3, [r7, #32]
 800f58a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f58c:	2b0a      	cmp	r3, #10
 800f58e:	f300 812f 	bgt.w	800f7f0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f592:	4b81      	ldr	r3, [pc, #516]	; (800f798 <ip4_reass+0x2b4>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	633b      	str	r3, [r7, #48]	; 0x30
 800f598:	e015      	b.n	800f5c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	695a      	ldr	r2, [r3, #20]
 800f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d10c      	bne.n	800f5c0 <ip4_reass+0xdc>
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d106      	bne.n	800f5c0 <ip4_reass+0xdc>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	899a      	ldrh	r2, [r3, #12]
 800f5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b8:	889b      	ldrh	r3, [r3, #4]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d006      	beq.n	800f5ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	633b      	str	r3, [r7, #48]	; 0x30
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1e6      	bne.n	800f59a <ip4_reass+0xb6>
 800f5cc:	e000      	b.n	800f5d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f5ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d109      	bne.n	800f5ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f5d6:	8c3b      	ldrh	r3, [r7, #32]
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5dc:	f7ff fdb0 	bl	800f140 <ip_reass_enqueue_new_datagram>
 800f5e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d11c      	bne.n	800f622 <ip4_reass+0x13e>
      goto nullreturn;
 800f5e8:	e105      	b.n	800f7f6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ec:	88db      	ldrh	r3, [r3, #6]
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7f6 f88d 	bl	8005710 <lwip_htons>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d110      	bne.n	800f622 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	89db      	ldrh	r3, [r3, #14]
 800f604:	4618      	mov	r0, r3
 800f606:	f7f6 f883 	bl	8005710 <lwip_htons>
 800f60a:	4603      	mov	r3, r0
 800f60c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f610:	2b00      	cmp	r3, #0
 800f612:	d006      	beq.n	800f622 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	3308      	adds	r3, #8
 800f618:	2214      	movs	r2, #20
 800f61a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fba5 	bl	800fd6c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	88db      	ldrh	r3, [r3, #6]
 800f626:	b29b      	uxth	r3, r3
 800f628:	f003 0320 	and.w	r3, r3, #32
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	bf0c      	ite	eq
 800f630:	2301      	moveq	r3, #1
 800f632:	2300      	movne	r3, #0
 800f634:	b2db      	uxtb	r3, r3
 800f636:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00e      	beq.n	800f65c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f63e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f642:	4413      	add	r3, r2
 800f644:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f646:	8b7a      	ldrh	r2, [r7, #26]
 800f648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f64a:	429a      	cmp	r2, r3
 800f64c:	f0c0 80a0 	bcc.w	800f790 <ip4_reass+0x2ac>
 800f650:	8b7b      	ldrh	r3, [r7, #26]
 800f652:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f656:	4293      	cmp	r3, r2
 800f658:	f200 809a 	bhi.w	800f790 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f65c:	69fa      	ldr	r2, [r7, #28]
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f662:	f7ff fdd5 	bl	800f210 <ip_reass_chain_frag_into_datagram_and_validate>
 800f666:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	f000 809b 	beq.w	800f7a8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f672:	4b48      	ldr	r3, [pc, #288]	; (800f794 <ip4_reass+0x2b0>)
 800f674:	881a      	ldrh	r2, [r3, #0]
 800f676:	8c3b      	ldrh	r3, [r7, #32]
 800f678:	4413      	add	r3, r2
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	4b45      	ldr	r3, [pc, #276]	; (800f794 <ip4_reass+0x2b0>)
 800f67e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00d      	beq.n	800f6a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f686:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f68a:	4413      	add	r3, r2
 800f68c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	8a7a      	ldrh	r2, [r7, #18]
 800f692:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	7f9b      	ldrb	r3, [r3, #30]
 800f698:	f043 0301 	orr.w	r3, r3, #1
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d171      	bne.n	800f78c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	8b9b      	ldrh	r3, [r3, #28]
 800f6ac:	3314      	adds	r3, #20
 800f6ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	3308      	adds	r3, #8
 800f6c6:	2214      	movs	r2, #20
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6cc:	f000 fb4e 	bl	800fd6c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f6d0:	8a3b      	ldrh	r3, [r7, #16]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7f6 f81c 	bl	8005710 <lwip_htons>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	719a      	strb	r2, [r3, #6]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	729a      	strb	r2, [r3, #10]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f6fa:	e00d      	b.n	800f718 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f702:	2114      	movs	r1, #20
 800f704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f706:	f7f7 fa95 	bl	8006c34 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7f7 fbd9 	bl	8006ec4 <pbuf_cat>
      r = iprh->next_pbuf;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800f718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1ee      	bne.n	800f6fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f71e:	4b1e      	ldr	r3, [pc, #120]	; (800f798 <ip4_reass+0x2b4>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f724:	429a      	cmp	r2, r3
 800f726:	d102      	bne.n	800f72e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f728:	2300      	movs	r3, #0
 800f72a:	637b      	str	r3, [r7, #52]	; 0x34
 800f72c:	e010      	b.n	800f750 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f72e:	4b1a      	ldr	r3, [pc, #104]	; (800f798 <ip4_reass+0x2b4>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	637b      	str	r3, [r7, #52]	; 0x34
 800f734:	e007      	b.n	800f746 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d006      	beq.n	800f74e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	637b      	str	r3, [r7, #52]	; 0x34
 800f746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1f4      	bne.n	800f736 <ip4_reass+0x252>
 800f74c:	e000      	b.n	800f750 <ip4_reass+0x26c>
          break;
 800f74e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f754:	f7ff fd2e 	bl	800f1b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7f7 fb79 	bl	8006e50 <pbuf_clen>
 800f75e:	4603      	mov	r3, r0
 800f760:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f762:	4b0c      	ldr	r3, [pc, #48]	; (800f794 <ip4_reass+0x2b0>)
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	8c3a      	ldrh	r2, [r7, #32]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d906      	bls.n	800f77a <ip4_reass+0x296>
 800f76c:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <ip4_reass+0x2b8>)
 800f76e:	f240 229b 	movw	r2, #667	; 0x29b
 800f772:	490b      	ldr	r1, [pc, #44]	; (800f7a0 <ip4_reass+0x2bc>)
 800f774:	480b      	ldr	r0, [pc, #44]	; (800f7a4 <ip4_reass+0x2c0>)
 800f776:	f000 fb29 	bl	800fdcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f77a:	4b06      	ldr	r3, [pc, #24]	; (800f794 <ip4_reass+0x2b0>)
 800f77c:	881a      	ldrh	r2, [r3, #0]
 800f77e:	8c3b      	ldrh	r3, [r7, #32]
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	b29a      	uxth	r2, r3
 800f784:	4b03      	ldr	r3, [pc, #12]	; (800f794 <ip4_reass+0x2b0>)
 800f786:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	e038      	b.n	800f7fe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	e036      	b.n	800f7fe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f790:	bf00      	nop
 800f792:	e00a      	b.n	800f7aa <ip4_reass+0x2c6>
 800f794:	20008be0 	.word	0x20008be0
 800f798:	20008bdc 	.word	0x20008bdc
 800f79c:	08013f9c 	.word	0x08013f9c
 800f7a0:	0801410c 	.word	0x0801410c
 800f7a4:	08013fe4 	.word	0x08013fe4
    goto nullreturn_ipr;
 800f7a8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d106      	bne.n	800f7be <ip4_reass+0x2da>
 800f7b0:	4b15      	ldr	r3, [pc, #84]	; (800f808 <ip4_reass+0x324>)
 800f7b2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f7b6:	4915      	ldr	r1, [pc, #84]	; (800f80c <ip4_reass+0x328>)
 800f7b8:	4815      	ldr	r0, [pc, #84]	; (800f810 <ip4_reass+0x32c>)
 800f7ba:	f000 fb07 	bl	800fdcc <iprintf>
  if (ipr->p == NULL) {
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d116      	bne.n	800f7f4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f7c6:	4b13      	ldr	r3, [pc, #76]	; (800f814 <ip4_reass+0x330>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d006      	beq.n	800f7de <ip4_reass+0x2fa>
 800f7d0:	4b0d      	ldr	r3, [pc, #52]	; (800f808 <ip4_reass+0x324>)
 800f7d2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f7d6:	4910      	ldr	r1, [pc, #64]	; (800f818 <ip4_reass+0x334>)
 800f7d8:	480d      	ldr	r0, [pc, #52]	; (800f810 <ip4_reass+0x32c>)
 800f7da:	f000 faf7 	bl	800fdcc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f7de:	2100      	movs	r1, #0
 800f7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7e2:	f7ff fce7 	bl	800f1b4 <ip_reass_dequeue_datagram>
 800f7e6:	e006      	b.n	800f7f6 <ip4_reass+0x312>
    goto nullreturn;
 800f7e8:	bf00      	nop
 800f7ea:	e004      	b.n	800f7f6 <ip4_reass+0x312>
    goto nullreturn;
 800f7ec:	bf00      	nop
 800f7ee:	e002      	b.n	800f7f6 <ip4_reass+0x312>
      goto nullreturn;
 800f7f0:	bf00      	nop
 800f7f2:	e000      	b.n	800f7f6 <ip4_reass+0x312>
  }

nullreturn:
 800f7f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7f7 faa2 	bl	8006d40 <pbuf_free>
  return NULL;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3738      	adds	r7, #56	; 0x38
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	08013f9c 	.word	0x08013f9c
 800f80c:	08014128 	.word	0x08014128
 800f810:	08013fe4 	.word	0x08013fe4
 800f814:	20008bdc 	.word	0x20008bdc
 800f818:	08014134 	.word	0x08014134

0800f81c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f820:	2005      	movs	r0, #5
 800f822:	f7f6 fbcb 	bl	8005fbc <memp_malloc>
 800f826:	4603      	mov	r3, r0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d106      	bne.n	800f848 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f83a:	4b07      	ldr	r3, [pc, #28]	; (800f858 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f83c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f840:	4906      	ldr	r1, [pc, #24]	; (800f85c <ip_frag_free_pbuf_custom_ref+0x30>)
 800f842:	4807      	ldr	r0, [pc, #28]	; (800f860 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f844:	f000 fac2 	bl	800fdcc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f848:	6879      	ldr	r1, [r7, #4]
 800f84a:	2005      	movs	r0, #5
 800f84c:	f7f6 fc02 	bl	8006054 <memp_free>
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	08013f9c 	.word	0x08013f9c
 800f85c:	08014154 	.word	0x08014154
 800f860:	08013fe4 	.word	0x08013fe4

0800f864 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <ipfrag_free_pbuf_custom+0x20>
 800f876:	4b11      	ldr	r3, [pc, #68]	; (800f8bc <ipfrag_free_pbuf_custom+0x58>)
 800f878:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f87c:	4910      	ldr	r1, [pc, #64]	; (800f8c0 <ipfrag_free_pbuf_custom+0x5c>)
 800f87e:	4811      	ldr	r0, [pc, #68]	; (800f8c4 <ipfrag_free_pbuf_custom+0x60>)
 800f880:	f000 faa4 	bl	800fdcc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d006      	beq.n	800f89a <ipfrag_free_pbuf_custom+0x36>
 800f88c:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <ipfrag_free_pbuf_custom+0x58>)
 800f88e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f892:	490d      	ldr	r1, [pc, #52]	; (800f8c8 <ipfrag_free_pbuf_custom+0x64>)
 800f894:	480b      	ldr	r0, [pc, #44]	; (800f8c4 <ipfrag_free_pbuf_custom+0x60>)
 800f896:	f000 fa99 	bl	800fdcc <iprintf>
  if (pcr->original != NULL) {
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d004      	beq.n	800f8ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	695b      	ldr	r3, [r3, #20]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7f7 fa4a 	bl	8006d40 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff ffbd 	bl	800f82c <ip_frag_free_pbuf_custom_ref>
}
 800f8b2:	bf00      	nop
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	08013f9c 	.word	0x08013f9c
 800f8c0:	08014160 	.word	0x08014160
 800f8c4:	08013fe4 	.word	0x08013fe4
 800f8c8:	0801416c 	.word	0x0801416c

0800f8cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b094      	sub	sp, #80	; 0x50
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f8e2:	3b14      	subs	r3, #20
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	da00      	bge.n	800f8ea <ip4_frag+0x1e>
 800f8e8:	3307      	adds	r3, #7
 800f8ea:	10db      	asrs	r3, r3, #3
 800f8ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f8ee:	2314      	movs	r3, #20
 800f8f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 030f 	and.w	r3, r3, #15
 800f904:	b2db      	uxtb	r3, r3
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b14      	cmp	r3, #20
 800f90c:	d002      	beq.n	800f914 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f90e:	f06f 0305 	mvn.w	r3, #5
 800f912:	e110      	b.n	800fb36 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	895b      	ldrh	r3, [r3, #10]
 800f918:	2b13      	cmp	r3, #19
 800f91a:	d809      	bhi.n	800f930 <ip4_frag+0x64>
 800f91c:	4b88      	ldr	r3, [pc, #544]	; (800fb40 <ip4_frag+0x274>)
 800f91e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f922:	4988      	ldr	r1, [pc, #544]	; (800fb44 <ip4_frag+0x278>)
 800f924:	4888      	ldr	r0, [pc, #544]	; (800fb48 <ip4_frag+0x27c>)
 800f926:	f000 fa51 	bl	800fdcc <iprintf>
 800f92a:	f06f 0305 	mvn.w	r3, #5
 800f92e:	e102      	b.n	800fb36 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	88db      	ldrh	r3, [r3, #6]
 800f934:	b29b      	uxth	r3, r3
 800f936:	4618      	mov	r0, r3
 800f938:	f7f5 feea 	bl	8005710 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f940:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f946:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f94a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f94c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f950:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	891b      	ldrh	r3, [r3, #8]
 800f956:	3b14      	subs	r3, #20
 800f958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f95c:	e0e1      	b.n	800fb22 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f95e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f960:	00db      	lsls	r3, r3, #3
 800f962:	b29b      	uxth	r3, r3
 800f964:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f968:	4293      	cmp	r3, r2
 800f96a:	bf28      	it	cs
 800f96c:	4613      	movcs	r3, r2
 800f96e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f970:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f974:	2114      	movs	r1, #20
 800f976:	200e      	movs	r0, #14
 800f978:	f7f6 fefe 	bl	8006778 <pbuf_alloc>
 800f97c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 80d5 	beq.w	800fb30 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f988:	895b      	ldrh	r3, [r3, #10]
 800f98a:	2b13      	cmp	r3, #19
 800f98c:	d806      	bhi.n	800f99c <ip4_frag+0xd0>
 800f98e:	4b6c      	ldr	r3, [pc, #432]	; (800fb40 <ip4_frag+0x274>)
 800f990:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f994:	496d      	ldr	r1, [pc, #436]	; (800fb4c <ip4_frag+0x280>)
 800f996:	486c      	ldr	r0, [pc, #432]	; (800fb48 <ip4_frag+0x27c>)
 800f998:	f000 fa18 	bl	800fdcc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	2214      	movs	r2, #20
 800f9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f000 f9e1 	bl	800fd6c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f9b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f9b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f9b6:	e064      	b.n	800fa82 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	895a      	ldrh	r2, [r3, #10]
 800f9bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9be:	1ad3      	subs	r3, r2, r3
 800f9c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	895b      	ldrh	r3, [r3, #10]
 800f9c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d906      	bls.n	800f9da <ip4_frag+0x10e>
 800f9cc:	4b5c      	ldr	r3, [pc, #368]	; (800fb40 <ip4_frag+0x274>)
 800f9ce:	f240 322d 	movw	r2, #813	; 0x32d
 800f9d2:	495f      	ldr	r1, [pc, #380]	; (800fb50 <ip4_frag+0x284>)
 800f9d4:	485c      	ldr	r0, [pc, #368]	; (800fb48 <ip4_frag+0x27c>)
 800f9d6:	f000 f9f9 	bl	800fdcc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f9da:	8bfa      	ldrh	r2, [r7, #30]
 800f9dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	bf28      	it	cs
 800f9e4:	4613      	movcs	r3, r2
 800f9e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f9ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d105      	bne.n	800f9fe <ip4_frag+0x132>
        poff = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	60fb      	str	r3, [r7, #12]
        continue;
 800f9fc:	e041      	b.n	800fa82 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f9fe:	f7ff ff0d 	bl	800f81c <ip_frag_alloc_pbuf_custom_ref>
 800fa02:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d103      	bne.n	800fa12 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fa0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa0c:	f7f7 f998 	bl	8006d40 <pbuf_free>
        goto memerr;
 800fa10:	e08f      	b.n	800fb32 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fa12:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fa18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fa20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fa24:	9201      	str	r2, [sp, #4]
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2241      	movs	r2, #65	; 0x41
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	f7f6 ffcd 	bl	80069cc <pbuf_alloced_custom>
 800fa32:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d106      	bne.n	800fa48 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fa3a:	69b8      	ldr	r0, [r7, #24]
 800fa3c:	f7ff fef6 	bl	800f82c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fa40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa42:	f7f7 f97d 	bl	8006d40 <pbuf_free>
        goto memerr;
 800fa46:	e074      	b.n	800fb32 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7f7 fa19 	bl	8006e80 <pbuf_ref>
      pcr->original = p;
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	4a3f      	ldr	r2, [pc, #252]	; (800fb54 <ip4_frag+0x288>)
 800fa58:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fa5a:	6979      	ldr	r1, [r7, #20]
 800fa5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa5e:	f7f7 fa31 	bl	8006ec4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fa62:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fa66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fa70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d004      	beq.n	800fa82 <ip4_frag+0x1b6>
        poff = 0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fa82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d196      	bne.n	800f9b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fa8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fa8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fa90:	4413      	add	r3, r2
 800fa92:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa98:	f1a3 0213 	sub.w	r2, r3, #19
 800fa9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800faa0:	429a      	cmp	r2, r3
 800faa2:	bfcc      	ite	gt
 800faa4:	2301      	movgt	r3, #1
 800faa6:	2300      	movle	r3, #0
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800faac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fab4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <ip4_frag+0x1f6>
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fac2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fac8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800faca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800facc:	4618      	mov	r0, r3
 800face:	f7f5 fe1f 	bl	8005710 <lwip_htons>
 800fad2:	4603      	mov	r3, r0
 800fad4:	461a      	mov	r2, r3
 800fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fada:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fadc:	3314      	adds	r3, #20
 800fade:	b29b      	uxth	r3, r3
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7f5 fe15 	bl	8005710 <lwip_htons>
 800fae6:	4603      	mov	r3, r0
 800fae8:	461a      	mov	r2, r3
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	2200      	movs	r2, #0
 800faf2:	729a      	strb	r2, [r3, #10]
 800faf4:	2200      	movs	r2, #0
 800faf6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	695b      	ldr	r3, [r3, #20]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb00:	68b8      	ldr	r0, [r7, #8]
 800fb02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fb04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb06:	f7f7 f91b 	bl	8006d40 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fb0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fb16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fb1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fb22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f47f af19 	bne.w	800f95e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	e002      	b.n	800fb36 <ip4_frag+0x26a>
      goto memerr;
 800fb30:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fb32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3748      	adds	r7, #72	; 0x48
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	08013f9c 	.word	0x08013f9c
 800fb44:	08014178 	.word	0x08014178
 800fb48:	08013fe4 	.word	0x08013fe4
 800fb4c:	08014194 	.word	0x08014194
 800fb50:	080141b4 	.word	0x080141b4
 800fb54:	0800f865 	.word	0x0800f865

0800fb58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b086      	sub	sp, #24
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fb62:	230e      	movs	r3, #14
 800fb64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	895b      	ldrh	r3, [r3, #10]
 800fb6a:	2b0e      	cmp	r3, #14
 800fb6c:	d96e      	bls.n	800fc4c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	7bdb      	ldrb	r3, [r3, #15]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	7b1a      	ldrb	r2, [r3, #12]
 800fb8e:	7b5b      	ldrb	r3, [r3, #13]
 800fb90:	021b      	lsls	r3, r3, #8
 800fb92:	4313      	orrs	r3, r2
 800fb94:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d023      	beq.n	800fbea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d10f      	bne.n	800fbca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	785b      	ldrb	r3, [r3, #1]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d11b      	bne.n	800fbea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fbb6:	2b5e      	cmp	r3, #94	; 0x5e
 800fbb8:	d117      	bne.n	800fbea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	7b5b      	ldrb	r3, [r3, #13]
 800fbbe:	f043 0310 	orr.w	r3, r3, #16
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	735a      	strb	r2, [r3, #13]
 800fbc8:	e00f      	b.n	800fbea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	2206      	movs	r2, #6
 800fbce:	4928      	ldr	r1, [pc, #160]	; (800fc70 <ethernet_input+0x118>)
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 f8bb 	bl	800fd4c <memcmp>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d106      	bne.n	800fbea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7b5b      	ldrb	r3, [r3, #13]
 800fbe0:	f043 0308 	orr.w	r3, r3, #8
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	2b08      	cmp	r3, #8
 800fbee:	d003      	beq.n	800fbf8 <ethernet_input+0xa0>
 800fbf0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fbf4:	d014      	beq.n	800fc20 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fbf6:	e032      	b.n	800fc5e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbfe:	f003 0308 	and.w	r3, r3, #8
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d024      	beq.n	800fc50 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fc06:	8afb      	ldrh	r3, [r7, #22]
 800fc08:	4619      	mov	r1, r3
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f7f7 f812 	bl	8006c34 <pbuf_remove_header>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d11e      	bne.n	800fc54 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7fe ff21 	bl	800ea60 <ip4_input>
      break;
 800fc1e:	e013      	b.n	800fc48 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc26:	f003 0308 	and.w	r3, r3, #8
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d014      	beq.n	800fc58 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fc2e:	8afb      	ldrh	r3, [r7, #22]
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7f6 fffe 	bl	8006c34 <pbuf_remove_header>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10e      	bne.n	800fc5c <ethernet_input+0x104>
        etharp_input(p, netif);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7fe f8bb 	bl	800ddbc <etharp_input>
      break;
 800fc46:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	e00c      	b.n	800fc66 <ethernet_input+0x10e>
    goto free_and_return;
 800fc4c:	bf00      	nop
 800fc4e:	e006      	b.n	800fc5e <ethernet_input+0x106>
        goto free_and_return;
 800fc50:	bf00      	nop
 800fc52:	e004      	b.n	800fc5e <ethernet_input+0x106>
        goto free_and_return;
 800fc54:	bf00      	nop
 800fc56:	e002      	b.n	800fc5e <ethernet_input+0x106>
        goto free_and_return;
 800fc58:	bf00      	nop
 800fc5a:	e000      	b.n	800fc5e <ethernet_input+0x106>
        goto free_and_return;
 800fc5c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7f7 f86e 	bl	8006d40 <pbuf_free>
  return ERR_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3718      	adds	r7, #24
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	08014368 	.word	0x08014368

0800fc74 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
 800fc80:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fc82:	8c3b      	ldrh	r3, [r7, #32]
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7f5 fd43 	bl	8005710 <lwip_htons>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fc8e:	210e      	movs	r1, #14
 800fc90:	68b8      	ldr	r0, [r7, #8]
 800fc92:	f7f6 ffbf 	bl	8006c14 <pbuf_add_header>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d125      	bne.n	800fce8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	8afa      	ldrh	r2, [r7, #22]
 800fca6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	2206      	movs	r2, #6
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 f85c 	bl	800fd6c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	3306      	adds	r3, #6
 800fcb8:	2206      	movs	r2, #6
 800fcba:	6879      	ldr	r1, [r7, #4]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f855 	bl	800fd6c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fcc8:	2b06      	cmp	r3, #6
 800fcca:	d006      	beq.n	800fcda <ethernet_output+0x66>
 800fccc:	4b0a      	ldr	r3, [pc, #40]	; (800fcf8 <ethernet_output+0x84>)
 800fcce:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fcd2:	490a      	ldr	r1, [pc, #40]	; (800fcfc <ethernet_output+0x88>)
 800fcd4:	480a      	ldr	r0, [pc, #40]	; (800fd00 <ethernet_output+0x8c>)
 800fcd6:	f000 f879 	bl	800fdcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	699b      	ldr	r3, [r3, #24]
 800fcde:	68b9      	ldr	r1, [r7, #8]
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	4798      	blx	r3
 800fce4:	4603      	mov	r3, r0
 800fce6:	e002      	b.n	800fcee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fce8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fcea:	f06f 0301 	mvn.w	r3, #1
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3718      	adds	r7, #24
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	080141c4 	.word	0x080141c4
 800fcfc:	080141fc 	.word	0x080141fc
 800fd00:	08014230 	.word	0x08014230

0800fd04 <__libc_init_array>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	4d0d      	ldr	r5, [pc, #52]	; (800fd3c <__libc_init_array+0x38>)
 800fd08:	4c0d      	ldr	r4, [pc, #52]	; (800fd40 <__libc_init_array+0x3c>)
 800fd0a:	1b64      	subs	r4, r4, r5
 800fd0c:	10a4      	asrs	r4, r4, #2
 800fd0e:	2600      	movs	r6, #0
 800fd10:	42a6      	cmp	r6, r4
 800fd12:	d109      	bne.n	800fd28 <__libc_init_array+0x24>
 800fd14:	4d0b      	ldr	r5, [pc, #44]	; (800fd44 <__libc_init_array+0x40>)
 800fd16:	4c0c      	ldr	r4, [pc, #48]	; (800fd48 <__libc_init_array+0x44>)
 800fd18:	f001 fb44 	bl	80113a4 <_init>
 800fd1c:	1b64      	subs	r4, r4, r5
 800fd1e:	10a4      	asrs	r4, r4, #2
 800fd20:	2600      	movs	r6, #0
 800fd22:	42a6      	cmp	r6, r4
 800fd24:	d105      	bne.n	800fd32 <__libc_init_array+0x2e>
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd2c:	4798      	blx	r3
 800fd2e:	3601      	adds	r6, #1
 800fd30:	e7ee      	b.n	800fd10 <__libc_init_array+0xc>
 800fd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd36:	4798      	blx	r3
 800fd38:	3601      	adds	r6, #1
 800fd3a:	e7f2      	b.n	800fd22 <__libc_init_array+0x1e>
 800fd3c:	080144c8 	.word	0x080144c8
 800fd40:	080144c8 	.word	0x080144c8
 800fd44:	080144c8 	.word	0x080144c8
 800fd48:	080144cc 	.word	0x080144cc

0800fd4c <memcmp>:
 800fd4c:	b510      	push	{r4, lr}
 800fd4e:	3901      	subs	r1, #1
 800fd50:	4402      	add	r2, r0
 800fd52:	4290      	cmp	r0, r2
 800fd54:	d101      	bne.n	800fd5a <memcmp+0xe>
 800fd56:	2000      	movs	r0, #0
 800fd58:	e005      	b.n	800fd66 <memcmp+0x1a>
 800fd5a:	7803      	ldrb	r3, [r0, #0]
 800fd5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd60:	42a3      	cmp	r3, r4
 800fd62:	d001      	beq.n	800fd68 <memcmp+0x1c>
 800fd64:	1b18      	subs	r0, r3, r4
 800fd66:	bd10      	pop	{r4, pc}
 800fd68:	3001      	adds	r0, #1
 800fd6a:	e7f2      	b.n	800fd52 <memcmp+0x6>

0800fd6c <memcpy>:
 800fd6c:	440a      	add	r2, r1
 800fd6e:	4291      	cmp	r1, r2
 800fd70:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd74:	d100      	bne.n	800fd78 <memcpy+0xc>
 800fd76:	4770      	bx	lr
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd82:	4291      	cmp	r1, r2
 800fd84:	d1f9      	bne.n	800fd7a <memcpy+0xe>
 800fd86:	bd10      	pop	{r4, pc}

0800fd88 <memmove>:
 800fd88:	4288      	cmp	r0, r1
 800fd8a:	b510      	push	{r4, lr}
 800fd8c:	eb01 0402 	add.w	r4, r1, r2
 800fd90:	d902      	bls.n	800fd98 <memmove+0x10>
 800fd92:	4284      	cmp	r4, r0
 800fd94:	4623      	mov	r3, r4
 800fd96:	d807      	bhi.n	800fda8 <memmove+0x20>
 800fd98:	1e43      	subs	r3, r0, #1
 800fd9a:	42a1      	cmp	r1, r4
 800fd9c:	d008      	beq.n	800fdb0 <memmove+0x28>
 800fd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fda2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fda6:	e7f8      	b.n	800fd9a <memmove+0x12>
 800fda8:	4402      	add	r2, r0
 800fdaa:	4601      	mov	r1, r0
 800fdac:	428a      	cmp	r2, r1
 800fdae:	d100      	bne.n	800fdb2 <memmove+0x2a>
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdba:	e7f7      	b.n	800fdac <memmove+0x24>

0800fdbc <memset>:
 800fdbc:	4402      	add	r2, r0
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d100      	bne.n	800fdc6 <memset+0xa>
 800fdc4:	4770      	bx	lr
 800fdc6:	f803 1b01 	strb.w	r1, [r3], #1
 800fdca:	e7f9      	b.n	800fdc0 <memset+0x4>

0800fdcc <iprintf>:
 800fdcc:	b40f      	push	{r0, r1, r2, r3}
 800fdce:	4b0a      	ldr	r3, [pc, #40]	; (800fdf8 <iprintf+0x2c>)
 800fdd0:	b513      	push	{r0, r1, r4, lr}
 800fdd2:	681c      	ldr	r4, [r3, #0]
 800fdd4:	b124      	cbz	r4, 800fde0 <iprintf+0x14>
 800fdd6:	69a3      	ldr	r3, [r4, #24]
 800fdd8:	b913      	cbnz	r3, 800fde0 <iprintf+0x14>
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 fb04 	bl	80103e8 <__sinit>
 800fde0:	ab05      	add	r3, sp, #20
 800fde2:	9a04      	ldr	r2, [sp, #16]
 800fde4:	68a1      	ldr	r1, [r4, #8]
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	4620      	mov	r0, r4
 800fdea:	f000 fe83 	bl	8010af4 <_vfiprintf_r>
 800fdee:	b002      	add	sp, #8
 800fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf4:	b004      	add	sp, #16
 800fdf6:	4770      	bx	lr
 800fdf8:	20000014 	.word	0x20000014

0800fdfc <putchar>:
 800fdfc:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <putchar+0x28>)
 800fdfe:	b513      	push	{r0, r1, r4, lr}
 800fe00:	681c      	ldr	r4, [r3, #0]
 800fe02:	4601      	mov	r1, r0
 800fe04:	b134      	cbz	r4, 800fe14 <putchar+0x18>
 800fe06:	69a3      	ldr	r3, [r4, #24]
 800fe08:	b923      	cbnz	r3, 800fe14 <putchar+0x18>
 800fe0a:	9001      	str	r0, [sp, #4]
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f000 faeb 	bl	80103e8 <__sinit>
 800fe12:	9901      	ldr	r1, [sp, #4]
 800fe14:	68a2      	ldr	r2, [r4, #8]
 800fe16:	4620      	mov	r0, r4
 800fe18:	b002      	add	sp, #8
 800fe1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe1e:	f001 b92d 	b.w	801107c <_putc_r>
 800fe22:	bf00      	nop
 800fe24:	20000014 	.word	0x20000014

0800fe28 <_puts_r>:
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	460e      	mov	r6, r1
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	b118      	cbz	r0, 800fe38 <_puts_r+0x10>
 800fe30:	6983      	ldr	r3, [r0, #24]
 800fe32:	b90b      	cbnz	r3, 800fe38 <_puts_r+0x10>
 800fe34:	f000 fad8 	bl	80103e8 <__sinit>
 800fe38:	69ab      	ldr	r3, [r5, #24]
 800fe3a:	68ac      	ldr	r4, [r5, #8]
 800fe3c:	b913      	cbnz	r3, 800fe44 <_puts_r+0x1c>
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 fad2 	bl	80103e8 <__sinit>
 800fe44:	4b2c      	ldr	r3, [pc, #176]	; (800fef8 <_puts_r+0xd0>)
 800fe46:	429c      	cmp	r4, r3
 800fe48:	d120      	bne.n	800fe8c <_puts_r+0x64>
 800fe4a:	686c      	ldr	r4, [r5, #4]
 800fe4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe4e:	07db      	lsls	r3, r3, #31
 800fe50:	d405      	bmi.n	800fe5e <_puts_r+0x36>
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	0598      	lsls	r0, r3, #22
 800fe56:	d402      	bmi.n	800fe5e <_puts_r+0x36>
 800fe58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe5a:	f000 fb75 	bl	8010548 <__retarget_lock_acquire_recursive>
 800fe5e:	89a3      	ldrh	r3, [r4, #12]
 800fe60:	0719      	lsls	r1, r3, #28
 800fe62:	d51d      	bpl.n	800fea0 <_puts_r+0x78>
 800fe64:	6923      	ldr	r3, [r4, #16]
 800fe66:	b1db      	cbz	r3, 800fea0 <_puts_r+0x78>
 800fe68:	3e01      	subs	r6, #1
 800fe6a:	68a3      	ldr	r3, [r4, #8]
 800fe6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fe70:	3b01      	subs	r3, #1
 800fe72:	60a3      	str	r3, [r4, #8]
 800fe74:	bb39      	cbnz	r1, 800fec6 <_puts_r+0x9e>
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	da38      	bge.n	800feec <_puts_r+0xc4>
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	210a      	movs	r1, #10
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f000 f8ba 	bl	800fff8 <__swbuf_r>
 800fe84:	3001      	adds	r0, #1
 800fe86:	d011      	beq.n	800feac <_puts_r+0x84>
 800fe88:	250a      	movs	r5, #10
 800fe8a:	e011      	b.n	800feb0 <_puts_r+0x88>
 800fe8c:	4b1b      	ldr	r3, [pc, #108]	; (800fefc <_puts_r+0xd4>)
 800fe8e:	429c      	cmp	r4, r3
 800fe90:	d101      	bne.n	800fe96 <_puts_r+0x6e>
 800fe92:	68ac      	ldr	r4, [r5, #8]
 800fe94:	e7da      	b.n	800fe4c <_puts_r+0x24>
 800fe96:	4b1a      	ldr	r3, [pc, #104]	; (800ff00 <_puts_r+0xd8>)
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	bf08      	it	eq
 800fe9c:	68ec      	ldreq	r4, [r5, #12]
 800fe9e:	e7d5      	b.n	800fe4c <_puts_r+0x24>
 800fea0:	4621      	mov	r1, r4
 800fea2:	4628      	mov	r0, r5
 800fea4:	f000 f8fa 	bl	801009c <__swsetup_r>
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d0dd      	beq.n	800fe68 <_puts_r+0x40>
 800feac:	f04f 35ff 	mov.w	r5, #4294967295
 800feb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feb2:	07da      	lsls	r2, r3, #31
 800feb4:	d405      	bmi.n	800fec2 <_puts_r+0x9a>
 800feb6:	89a3      	ldrh	r3, [r4, #12]
 800feb8:	059b      	lsls	r3, r3, #22
 800feba:	d402      	bmi.n	800fec2 <_puts_r+0x9a>
 800febc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800febe:	f000 fb44 	bl	801054a <__retarget_lock_release_recursive>
 800fec2:	4628      	mov	r0, r5
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	da04      	bge.n	800fed4 <_puts_r+0xac>
 800feca:	69a2      	ldr	r2, [r4, #24]
 800fecc:	429a      	cmp	r2, r3
 800fece:	dc06      	bgt.n	800fede <_puts_r+0xb6>
 800fed0:	290a      	cmp	r1, #10
 800fed2:	d004      	beq.n	800fede <_puts_r+0xb6>
 800fed4:	6823      	ldr	r3, [r4, #0]
 800fed6:	1c5a      	adds	r2, r3, #1
 800fed8:	6022      	str	r2, [r4, #0]
 800feda:	7019      	strb	r1, [r3, #0]
 800fedc:	e7c5      	b.n	800fe6a <_puts_r+0x42>
 800fede:	4622      	mov	r2, r4
 800fee0:	4628      	mov	r0, r5
 800fee2:	f000 f889 	bl	800fff8 <__swbuf_r>
 800fee6:	3001      	adds	r0, #1
 800fee8:	d1bf      	bne.n	800fe6a <_puts_r+0x42>
 800feea:	e7df      	b.n	800feac <_puts_r+0x84>
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	250a      	movs	r5, #10
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	6022      	str	r2, [r4, #0]
 800fef4:	701d      	strb	r5, [r3, #0]
 800fef6:	e7db      	b.n	800feb0 <_puts_r+0x88>
 800fef8:	0801444c 	.word	0x0801444c
 800fefc:	0801446c 	.word	0x0801446c
 800ff00:	0801442c 	.word	0x0801442c

0800ff04 <puts>:
 800ff04:	4b02      	ldr	r3, [pc, #8]	; (800ff10 <puts+0xc>)
 800ff06:	4601      	mov	r1, r0
 800ff08:	6818      	ldr	r0, [r3, #0]
 800ff0a:	f7ff bf8d 	b.w	800fe28 <_puts_r>
 800ff0e:	bf00      	nop
 800ff10:	20000014 	.word	0x20000014

0800ff14 <rand>:
 800ff14:	4b16      	ldr	r3, [pc, #88]	; (800ff70 <rand+0x5c>)
 800ff16:	b510      	push	{r4, lr}
 800ff18:	681c      	ldr	r4, [r3, #0]
 800ff1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff1c:	b9b3      	cbnz	r3, 800ff4c <rand+0x38>
 800ff1e:	2018      	movs	r0, #24
 800ff20:	f000 fb7a 	bl	8010618 <malloc>
 800ff24:	63a0      	str	r0, [r4, #56]	; 0x38
 800ff26:	b928      	cbnz	r0, 800ff34 <rand+0x20>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <rand+0x60>)
 800ff2c:	4812      	ldr	r0, [pc, #72]	; (800ff78 <rand+0x64>)
 800ff2e:	214e      	movs	r1, #78	; 0x4e
 800ff30:	f000 f922 	bl	8010178 <__assert_func>
 800ff34:	4a11      	ldr	r2, [pc, #68]	; (800ff7c <rand+0x68>)
 800ff36:	4b12      	ldr	r3, [pc, #72]	; (800ff80 <rand+0x6c>)
 800ff38:	e9c0 2300 	strd	r2, r3, [r0]
 800ff3c:	4b11      	ldr	r3, [pc, #68]	; (800ff84 <rand+0x70>)
 800ff3e:	6083      	str	r3, [r0, #8]
 800ff40:	230b      	movs	r3, #11
 800ff42:	8183      	strh	r3, [r0, #12]
 800ff44:	2201      	movs	r2, #1
 800ff46:	2300      	movs	r3, #0
 800ff48:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ff4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ff4e:	4a0e      	ldr	r2, [pc, #56]	; (800ff88 <rand+0x74>)
 800ff50:	6920      	ldr	r0, [r4, #16]
 800ff52:	6963      	ldr	r3, [r4, #20]
 800ff54:	490d      	ldr	r1, [pc, #52]	; (800ff8c <rand+0x78>)
 800ff56:	4342      	muls	r2, r0
 800ff58:	fb01 2203 	mla	r2, r1, r3, r2
 800ff5c:	fba0 0101 	umull	r0, r1, r0, r1
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	eb42 0001 	adc.w	r0, r2, r1
 800ff66:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ff6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff6e:	bd10      	pop	{r4, pc}
 800ff70:	20000014 	.word	0x20000014
 800ff74:	0801437c 	.word	0x0801437c
 800ff78:	08014393 	.word	0x08014393
 800ff7c:	abcd330e 	.word	0xabcd330e
 800ff80:	e66d1234 	.word	0xe66d1234
 800ff84:	0005deec 	.word	0x0005deec
 800ff88:	5851f42d 	.word	0x5851f42d
 800ff8c:	4c957f2d 	.word	0x4c957f2d

0800ff90 <siprintf>:
 800ff90:	b40e      	push	{r1, r2, r3}
 800ff92:	b500      	push	{lr}
 800ff94:	b09c      	sub	sp, #112	; 0x70
 800ff96:	ab1d      	add	r3, sp, #116	; 0x74
 800ff98:	9002      	str	r0, [sp, #8]
 800ff9a:	9006      	str	r0, [sp, #24]
 800ff9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffa0:	4809      	ldr	r0, [pc, #36]	; (800ffc8 <siprintf+0x38>)
 800ffa2:	9107      	str	r1, [sp, #28]
 800ffa4:	9104      	str	r1, [sp, #16]
 800ffa6:	4909      	ldr	r1, [pc, #36]	; (800ffcc <siprintf+0x3c>)
 800ffa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffac:	9105      	str	r1, [sp, #20]
 800ffae:	6800      	ldr	r0, [r0, #0]
 800ffb0:	9301      	str	r3, [sp, #4]
 800ffb2:	a902      	add	r1, sp, #8
 800ffb4:	f000 fc74 	bl	80108a0 <_svfiprintf_r>
 800ffb8:	9b02      	ldr	r3, [sp, #8]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	b01c      	add	sp, #112	; 0x70
 800ffc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffc4:	b003      	add	sp, #12
 800ffc6:	4770      	bx	lr
 800ffc8:	20000014 	.word	0x20000014
 800ffcc:	ffff0208 	.word	0xffff0208

0800ffd0 <strncpy>:
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	3901      	subs	r1, #1
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	b132      	cbz	r2, 800ffe6 <strncpy+0x16>
 800ffd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ffdc:	f803 4b01 	strb.w	r4, [r3], #1
 800ffe0:	3a01      	subs	r2, #1
 800ffe2:	2c00      	cmp	r4, #0
 800ffe4:	d1f7      	bne.n	800ffd6 <strncpy+0x6>
 800ffe6:	441a      	add	r2, r3
 800ffe8:	2100      	movs	r1, #0
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d100      	bne.n	800fff0 <strncpy+0x20>
 800ffee:	bd10      	pop	{r4, pc}
 800fff0:	f803 1b01 	strb.w	r1, [r3], #1
 800fff4:	e7f9      	b.n	800ffea <strncpy+0x1a>
	...

0800fff8 <__swbuf_r>:
 800fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffa:	460e      	mov	r6, r1
 800fffc:	4614      	mov	r4, r2
 800fffe:	4605      	mov	r5, r0
 8010000:	b118      	cbz	r0, 801000a <__swbuf_r+0x12>
 8010002:	6983      	ldr	r3, [r0, #24]
 8010004:	b90b      	cbnz	r3, 801000a <__swbuf_r+0x12>
 8010006:	f000 f9ef 	bl	80103e8 <__sinit>
 801000a:	4b21      	ldr	r3, [pc, #132]	; (8010090 <__swbuf_r+0x98>)
 801000c:	429c      	cmp	r4, r3
 801000e:	d12b      	bne.n	8010068 <__swbuf_r+0x70>
 8010010:	686c      	ldr	r4, [r5, #4]
 8010012:	69a3      	ldr	r3, [r4, #24]
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	071a      	lsls	r2, r3, #28
 801001a:	d52f      	bpl.n	801007c <__swbuf_r+0x84>
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	b36b      	cbz	r3, 801007c <__swbuf_r+0x84>
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	6820      	ldr	r0, [r4, #0]
 8010024:	1ac0      	subs	r0, r0, r3
 8010026:	6963      	ldr	r3, [r4, #20]
 8010028:	b2f6      	uxtb	r6, r6
 801002a:	4283      	cmp	r3, r0
 801002c:	4637      	mov	r7, r6
 801002e:	dc04      	bgt.n	801003a <__swbuf_r+0x42>
 8010030:	4621      	mov	r1, r4
 8010032:	4628      	mov	r0, r5
 8010034:	f000 f944 	bl	80102c0 <_fflush_r>
 8010038:	bb30      	cbnz	r0, 8010088 <__swbuf_r+0x90>
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	3b01      	subs	r3, #1
 801003e:	60a3      	str	r3, [r4, #8]
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	6022      	str	r2, [r4, #0]
 8010046:	701e      	strb	r6, [r3, #0]
 8010048:	6963      	ldr	r3, [r4, #20]
 801004a:	3001      	adds	r0, #1
 801004c:	4283      	cmp	r3, r0
 801004e:	d004      	beq.n	801005a <__swbuf_r+0x62>
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	07db      	lsls	r3, r3, #31
 8010054:	d506      	bpl.n	8010064 <__swbuf_r+0x6c>
 8010056:	2e0a      	cmp	r6, #10
 8010058:	d104      	bne.n	8010064 <__swbuf_r+0x6c>
 801005a:	4621      	mov	r1, r4
 801005c:	4628      	mov	r0, r5
 801005e:	f000 f92f 	bl	80102c0 <_fflush_r>
 8010062:	b988      	cbnz	r0, 8010088 <__swbuf_r+0x90>
 8010064:	4638      	mov	r0, r7
 8010066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <__swbuf_r+0x9c>)
 801006a:	429c      	cmp	r4, r3
 801006c:	d101      	bne.n	8010072 <__swbuf_r+0x7a>
 801006e:	68ac      	ldr	r4, [r5, #8]
 8010070:	e7cf      	b.n	8010012 <__swbuf_r+0x1a>
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <__swbuf_r+0xa0>)
 8010074:	429c      	cmp	r4, r3
 8010076:	bf08      	it	eq
 8010078:	68ec      	ldreq	r4, [r5, #12]
 801007a:	e7ca      	b.n	8010012 <__swbuf_r+0x1a>
 801007c:	4621      	mov	r1, r4
 801007e:	4628      	mov	r0, r5
 8010080:	f000 f80c 	bl	801009c <__swsetup_r>
 8010084:	2800      	cmp	r0, #0
 8010086:	d0cb      	beq.n	8010020 <__swbuf_r+0x28>
 8010088:	f04f 37ff 	mov.w	r7, #4294967295
 801008c:	e7ea      	b.n	8010064 <__swbuf_r+0x6c>
 801008e:	bf00      	nop
 8010090:	0801444c 	.word	0x0801444c
 8010094:	0801446c 	.word	0x0801446c
 8010098:	0801442c 	.word	0x0801442c

0801009c <__swsetup_r>:
 801009c:	4b32      	ldr	r3, [pc, #200]	; (8010168 <__swsetup_r+0xcc>)
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	681d      	ldr	r5, [r3, #0]
 80100a2:	4606      	mov	r6, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	b125      	cbz	r5, 80100b2 <__swsetup_r+0x16>
 80100a8:	69ab      	ldr	r3, [r5, #24]
 80100aa:	b913      	cbnz	r3, 80100b2 <__swsetup_r+0x16>
 80100ac:	4628      	mov	r0, r5
 80100ae:	f000 f99b 	bl	80103e8 <__sinit>
 80100b2:	4b2e      	ldr	r3, [pc, #184]	; (801016c <__swsetup_r+0xd0>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d10f      	bne.n	80100d8 <__swsetup_r+0x3c>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	89a3      	ldrh	r3, [r4, #12]
 80100bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100c0:	0719      	lsls	r1, r3, #28
 80100c2:	d42c      	bmi.n	801011e <__swsetup_r+0x82>
 80100c4:	06dd      	lsls	r5, r3, #27
 80100c6:	d411      	bmi.n	80100ec <__swsetup_r+0x50>
 80100c8:	2309      	movs	r3, #9
 80100ca:	6033      	str	r3, [r6, #0]
 80100cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	f04f 30ff 	mov.w	r0, #4294967295
 80100d6:	e03e      	b.n	8010156 <__swsetup_r+0xba>
 80100d8:	4b25      	ldr	r3, [pc, #148]	; (8010170 <__swsetup_r+0xd4>)
 80100da:	429c      	cmp	r4, r3
 80100dc:	d101      	bne.n	80100e2 <__swsetup_r+0x46>
 80100de:	68ac      	ldr	r4, [r5, #8]
 80100e0:	e7eb      	b.n	80100ba <__swsetup_r+0x1e>
 80100e2:	4b24      	ldr	r3, [pc, #144]	; (8010174 <__swsetup_r+0xd8>)
 80100e4:	429c      	cmp	r4, r3
 80100e6:	bf08      	it	eq
 80100e8:	68ec      	ldreq	r4, [r5, #12]
 80100ea:	e7e6      	b.n	80100ba <__swsetup_r+0x1e>
 80100ec:	0758      	lsls	r0, r3, #29
 80100ee:	d512      	bpl.n	8010116 <__swsetup_r+0x7a>
 80100f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100f2:	b141      	cbz	r1, 8010106 <__swsetup_r+0x6a>
 80100f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f8:	4299      	cmp	r1, r3
 80100fa:	d002      	beq.n	8010102 <__swsetup_r+0x66>
 80100fc:	4630      	mov	r0, r6
 80100fe:	f000 fa93 	bl	8010628 <_free_r>
 8010102:	2300      	movs	r3, #0
 8010104:	6363      	str	r3, [r4, #52]	; 0x34
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801010c:	81a3      	strh	r3, [r4, #12]
 801010e:	2300      	movs	r3, #0
 8010110:	6063      	str	r3, [r4, #4]
 8010112:	6923      	ldr	r3, [r4, #16]
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	f043 0308 	orr.w	r3, r3, #8
 801011c:	81a3      	strh	r3, [r4, #12]
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	b94b      	cbnz	r3, 8010136 <__swsetup_r+0x9a>
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801012c:	d003      	beq.n	8010136 <__swsetup_r+0x9a>
 801012e:	4621      	mov	r1, r4
 8010130:	4630      	mov	r0, r6
 8010132:	f000 fa31 	bl	8010598 <__smakebuf_r>
 8010136:	89a0      	ldrh	r0, [r4, #12]
 8010138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801013c:	f010 0301 	ands.w	r3, r0, #1
 8010140:	d00a      	beq.n	8010158 <__swsetup_r+0xbc>
 8010142:	2300      	movs	r3, #0
 8010144:	60a3      	str	r3, [r4, #8]
 8010146:	6963      	ldr	r3, [r4, #20]
 8010148:	425b      	negs	r3, r3
 801014a:	61a3      	str	r3, [r4, #24]
 801014c:	6923      	ldr	r3, [r4, #16]
 801014e:	b943      	cbnz	r3, 8010162 <__swsetup_r+0xc6>
 8010150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010154:	d1ba      	bne.n	80100cc <__swsetup_r+0x30>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	0781      	lsls	r1, r0, #30
 801015a:	bf58      	it	pl
 801015c:	6963      	ldrpl	r3, [r4, #20]
 801015e:	60a3      	str	r3, [r4, #8]
 8010160:	e7f4      	b.n	801014c <__swsetup_r+0xb0>
 8010162:	2000      	movs	r0, #0
 8010164:	e7f7      	b.n	8010156 <__swsetup_r+0xba>
 8010166:	bf00      	nop
 8010168:	20000014 	.word	0x20000014
 801016c:	0801444c 	.word	0x0801444c
 8010170:	0801446c 	.word	0x0801446c
 8010174:	0801442c 	.word	0x0801442c

08010178 <__assert_func>:
 8010178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801017a:	4614      	mov	r4, r2
 801017c:	461a      	mov	r2, r3
 801017e:	4b09      	ldr	r3, [pc, #36]	; (80101a4 <__assert_func+0x2c>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4605      	mov	r5, r0
 8010184:	68d8      	ldr	r0, [r3, #12]
 8010186:	b14c      	cbz	r4, 801019c <__assert_func+0x24>
 8010188:	4b07      	ldr	r3, [pc, #28]	; (80101a8 <__assert_func+0x30>)
 801018a:	9100      	str	r1, [sp, #0]
 801018c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010190:	4906      	ldr	r1, [pc, #24]	; (80101ac <__assert_func+0x34>)
 8010192:	462b      	mov	r3, r5
 8010194:	f000 f9a6 	bl	80104e4 <fiprintf>
 8010198:	f001 f81e 	bl	80111d8 <abort>
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <__assert_func+0x38>)
 801019e:	461c      	mov	r4, r3
 80101a0:	e7f3      	b.n	801018a <__assert_func+0x12>
 80101a2:	bf00      	nop
 80101a4:	20000014 	.word	0x20000014
 80101a8:	080143ee 	.word	0x080143ee
 80101ac:	080143fb 	.word	0x080143fb
 80101b0:	08014429 	.word	0x08014429

080101b4 <__sflush_r>:
 80101b4:	898a      	ldrh	r2, [r1, #12]
 80101b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ba:	4605      	mov	r5, r0
 80101bc:	0710      	lsls	r0, r2, #28
 80101be:	460c      	mov	r4, r1
 80101c0:	d458      	bmi.n	8010274 <__sflush_r+0xc0>
 80101c2:	684b      	ldr	r3, [r1, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	dc05      	bgt.n	80101d4 <__sflush_r+0x20>
 80101c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	dc02      	bgt.n	80101d4 <__sflush_r+0x20>
 80101ce:	2000      	movs	r0, #0
 80101d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101d6:	2e00      	cmp	r6, #0
 80101d8:	d0f9      	beq.n	80101ce <__sflush_r+0x1a>
 80101da:	2300      	movs	r3, #0
 80101dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101e0:	682f      	ldr	r7, [r5, #0]
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	d032      	beq.n	801024c <__sflush_r+0x98>
 80101e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101e8:	89a3      	ldrh	r3, [r4, #12]
 80101ea:	075a      	lsls	r2, r3, #29
 80101ec:	d505      	bpl.n	80101fa <__sflush_r+0x46>
 80101ee:	6863      	ldr	r3, [r4, #4]
 80101f0:	1ac0      	subs	r0, r0, r3
 80101f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101f4:	b10b      	cbz	r3, 80101fa <__sflush_r+0x46>
 80101f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101f8:	1ac0      	subs	r0, r0, r3
 80101fa:	2300      	movs	r3, #0
 80101fc:	4602      	mov	r2, r0
 80101fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010200:	6a21      	ldr	r1, [r4, #32]
 8010202:	4628      	mov	r0, r5
 8010204:	47b0      	blx	r6
 8010206:	1c43      	adds	r3, r0, #1
 8010208:	89a3      	ldrh	r3, [r4, #12]
 801020a:	d106      	bne.n	801021a <__sflush_r+0x66>
 801020c:	6829      	ldr	r1, [r5, #0]
 801020e:	291d      	cmp	r1, #29
 8010210:	d82c      	bhi.n	801026c <__sflush_r+0xb8>
 8010212:	4a2a      	ldr	r2, [pc, #168]	; (80102bc <__sflush_r+0x108>)
 8010214:	40ca      	lsrs	r2, r1
 8010216:	07d6      	lsls	r6, r2, #31
 8010218:	d528      	bpl.n	801026c <__sflush_r+0xb8>
 801021a:	2200      	movs	r2, #0
 801021c:	6062      	str	r2, [r4, #4]
 801021e:	04d9      	lsls	r1, r3, #19
 8010220:	6922      	ldr	r2, [r4, #16]
 8010222:	6022      	str	r2, [r4, #0]
 8010224:	d504      	bpl.n	8010230 <__sflush_r+0x7c>
 8010226:	1c42      	adds	r2, r0, #1
 8010228:	d101      	bne.n	801022e <__sflush_r+0x7a>
 801022a:	682b      	ldr	r3, [r5, #0]
 801022c:	b903      	cbnz	r3, 8010230 <__sflush_r+0x7c>
 801022e:	6560      	str	r0, [r4, #84]	; 0x54
 8010230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010232:	602f      	str	r7, [r5, #0]
 8010234:	2900      	cmp	r1, #0
 8010236:	d0ca      	beq.n	80101ce <__sflush_r+0x1a>
 8010238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801023c:	4299      	cmp	r1, r3
 801023e:	d002      	beq.n	8010246 <__sflush_r+0x92>
 8010240:	4628      	mov	r0, r5
 8010242:	f000 f9f1 	bl	8010628 <_free_r>
 8010246:	2000      	movs	r0, #0
 8010248:	6360      	str	r0, [r4, #52]	; 0x34
 801024a:	e7c1      	b.n	80101d0 <__sflush_r+0x1c>
 801024c:	6a21      	ldr	r1, [r4, #32]
 801024e:	2301      	movs	r3, #1
 8010250:	4628      	mov	r0, r5
 8010252:	47b0      	blx	r6
 8010254:	1c41      	adds	r1, r0, #1
 8010256:	d1c7      	bne.n	80101e8 <__sflush_r+0x34>
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d0c4      	beq.n	80101e8 <__sflush_r+0x34>
 801025e:	2b1d      	cmp	r3, #29
 8010260:	d001      	beq.n	8010266 <__sflush_r+0xb2>
 8010262:	2b16      	cmp	r3, #22
 8010264:	d101      	bne.n	801026a <__sflush_r+0xb6>
 8010266:	602f      	str	r7, [r5, #0]
 8010268:	e7b1      	b.n	80101ce <__sflush_r+0x1a>
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	e7ad      	b.n	80101d0 <__sflush_r+0x1c>
 8010274:	690f      	ldr	r7, [r1, #16]
 8010276:	2f00      	cmp	r7, #0
 8010278:	d0a9      	beq.n	80101ce <__sflush_r+0x1a>
 801027a:	0793      	lsls	r3, r2, #30
 801027c:	680e      	ldr	r6, [r1, #0]
 801027e:	bf08      	it	eq
 8010280:	694b      	ldreq	r3, [r1, #20]
 8010282:	600f      	str	r7, [r1, #0]
 8010284:	bf18      	it	ne
 8010286:	2300      	movne	r3, #0
 8010288:	eba6 0807 	sub.w	r8, r6, r7
 801028c:	608b      	str	r3, [r1, #8]
 801028e:	f1b8 0f00 	cmp.w	r8, #0
 8010292:	dd9c      	ble.n	80101ce <__sflush_r+0x1a>
 8010294:	6a21      	ldr	r1, [r4, #32]
 8010296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010298:	4643      	mov	r3, r8
 801029a:	463a      	mov	r2, r7
 801029c:	4628      	mov	r0, r5
 801029e:	47b0      	blx	r6
 80102a0:	2800      	cmp	r0, #0
 80102a2:	dc06      	bgt.n	80102b2 <__sflush_r+0xfe>
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295
 80102b0:	e78e      	b.n	80101d0 <__sflush_r+0x1c>
 80102b2:	4407      	add	r7, r0
 80102b4:	eba8 0800 	sub.w	r8, r8, r0
 80102b8:	e7e9      	b.n	801028e <__sflush_r+0xda>
 80102ba:	bf00      	nop
 80102bc:	20400001 	.word	0x20400001

080102c0 <_fflush_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	690b      	ldr	r3, [r1, #16]
 80102c4:	4605      	mov	r5, r0
 80102c6:	460c      	mov	r4, r1
 80102c8:	b913      	cbnz	r3, 80102d0 <_fflush_r+0x10>
 80102ca:	2500      	movs	r5, #0
 80102cc:	4628      	mov	r0, r5
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	b118      	cbz	r0, 80102da <_fflush_r+0x1a>
 80102d2:	6983      	ldr	r3, [r0, #24]
 80102d4:	b90b      	cbnz	r3, 80102da <_fflush_r+0x1a>
 80102d6:	f000 f887 	bl	80103e8 <__sinit>
 80102da:	4b14      	ldr	r3, [pc, #80]	; (801032c <_fflush_r+0x6c>)
 80102dc:	429c      	cmp	r4, r3
 80102de:	d11b      	bne.n	8010318 <_fflush_r+0x58>
 80102e0:	686c      	ldr	r4, [r5, #4]
 80102e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0ef      	beq.n	80102ca <_fflush_r+0xa>
 80102ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102ec:	07d0      	lsls	r0, r2, #31
 80102ee:	d404      	bmi.n	80102fa <_fflush_r+0x3a>
 80102f0:	0599      	lsls	r1, r3, #22
 80102f2:	d402      	bmi.n	80102fa <_fflush_r+0x3a>
 80102f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102f6:	f000 f927 	bl	8010548 <__retarget_lock_acquire_recursive>
 80102fa:	4628      	mov	r0, r5
 80102fc:	4621      	mov	r1, r4
 80102fe:	f7ff ff59 	bl	80101b4 <__sflush_r>
 8010302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010304:	07da      	lsls	r2, r3, #31
 8010306:	4605      	mov	r5, r0
 8010308:	d4e0      	bmi.n	80102cc <_fflush_r+0xc>
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	059b      	lsls	r3, r3, #22
 801030e:	d4dd      	bmi.n	80102cc <_fflush_r+0xc>
 8010310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010312:	f000 f91a 	bl	801054a <__retarget_lock_release_recursive>
 8010316:	e7d9      	b.n	80102cc <_fflush_r+0xc>
 8010318:	4b05      	ldr	r3, [pc, #20]	; (8010330 <_fflush_r+0x70>)
 801031a:	429c      	cmp	r4, r3
 801031c:	d101      	bne.n	8010322 <_fflush_r+0x62>
 801031e:	68ac      	ldr	r4, [r5, #8]
 8010320:	e7df      	b.n	80102e2 <_fflush_r+0x22>
 8010322:	4b04      	ldr	r3, [pc, #16]	; (8010334 <_fflush_r+0x74>)
 8010324:	429c      	cmp	r4, r3
 8010326:	bf08      	it	eq
 8010328:	68ec      	ldreq	r4, [r5, #12]
 801032a:	e7da      	b.n	80102e2 <_fflush_r+0x22>
 801032c:	0801444c 	.word	0x0801444c
 8010330:	0801446c 	.word	0x0801446c
 8010334:	0801442c 	.word	0x0801442c

08010338 <std>:
 8010338:	2300      	movs	r3, #0
 801033a:	b510      	push	{r4, lr}
 801033c:	4604      	mov	r4, r0
 801033e:	e9c0 3300 	strd	r3, r3, [r0]
 8010342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010346:	6083      	str	r3, [r0, #8]
 8010348:	8181      	strh	r1, [r0, #12]
 801034a:	6643      	str	r3, [r0, #100]	; 0x64
 801034c:	81c2      	strh	r2, [r0, #14]
 801034e:	6183      	str	r3, [r0, #24]
 8010350:	4619      	mov	r1, r3
 8010352:	2208      	movs	r2, #8
 8010354:	305c      	adds	r0, #92	; 0x5c
 8010356:	f7ff fd31 	bl	800fdbc <memset>
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x38>)
 801035c:	6263      	str	r3, [r4, #36]	; 0x24
 801035e:	4b05      	ldr	r3, [pc, #20]	; (8010374 <std+0x3c>)
 8010360:	62a3      	str	r3, [r4, #40]	; 0x28
 8010362:	4b05      	ldr	r3, [pc, #20]	; (8010378 <std+0x40>)
 8010364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010366:	4b05      	ldr	r3, [pc, #20]	; (801037c <std+0x44>)
 8010368:	6224      	str	r4, [r4, #32]
 801036a:	6323      	str	r3, [r4, #48]	; 0x30
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	0801112d 	.word	0x0801112d
 8010374:	0801114f 	.word	0x0801114f
 8010378:	08011187 	.word	0x08011187
 801037c:	080111ab 	.word	0x080111ab

08010380 <_cleanup_r>:
 8010380:	4901      	ldr	r1, [pc, #4]	; (8010388 <_cleanup_r+0x8>)
 8010382:	f000 b8c1 	b.w	8010508 <_fwalk_reent>
 8010386:	bf00      	nop
 8010388:	080102c1 	.word	0x080102c1

0801038c <__sfmoreglue>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	2268      	movs	r2, #104	; 0x68
 8010390:	1e4d      	subs	r5, r1, #1
 8010392:	4355      	muls	r5, r2
 8010394:	460e      	mov	r6, r1
 8010396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801039a:	f000 f9b1 	bl	8010700 <_malloc_r>
 801039e:	4604      	mov	r4, r0
 80103a0:	b140      	cbz	r0, 80103b4 <__sfmoreglue+0x28>
 80103a2:	2100      	movs	r1, #0
 80103a4:	e9c0 1600 	strd	r1, r6, [r0]
 80103a8:	300c      	adds	r0, #12
 80103aa:	60a0      	str	r0, [r4, #8]
 80103ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103b0:	f7ff fd04 	bl	800fdbc <memset>
 80103b4:	4620      	mov	r0, r4
 80103b6:	bd70      	pop	{r4, r5, r6, pc}

080103b8 <__sfp_lock_acquire>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__sfp_lock_acquire+0x8>)
 80103ba:	f000 b8c5 	b.w	8010548 <__retarget_lock_acquire_recursive>
 80103be:	bf00      	nop
 80103c0:	20008be9 	.word	0x20008be9

080103c4 <__sfp_lock_release>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sfp_lock_release+0x8>)
 80103c6:	f000 b8c0 	b.w	801054a <__retarget_lock_release_recursive>
 80103ca:	bf00      	nop
 80103cc:	20008be9 	.word	0x20008be9

080103d0 <__sinit_lock_acquire>:
 80103d0:	4801      	ldr	r0, [pc, #4]	; (80103d8 <__sinit_lock_acquire+0x8>)
 80103d2:	f000 b8b9 	b.w	8010548 <__retarget_lock_acquire_recursive>
 80103d6:	bf00      	nop
 80103d8:	20008bea 	.word	0x20008bea

080103dc <__sinit_lock_release>:
 80103dc:	4801      	ldr	r0, [pc, #4]	; (80103e4 <__sinit_lock_release+0x8>)
 80103de:	f000 b8b4 	b.w	801054a <__retarget_lock_release_recursive>
 80103e2:	bf00      	nop
 80103e4:	20008bea 	.word	0x20008bea

080103e8 <__sinit>:
 80103e8:	b510      	push	{r4, lr}
 80103ea:	4604      	mov	r4, r0
 80103ec:	f7ff fff0 	bl	80103d0 <__sinit_lock_acquire>
 80103f0:	69a3      	ldr	r3, [r4, #24]
 80103f2:	b11b      	cbz	r3, 80103fc <__sinit+0x14>
 80103f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103f8:	f7ff bff0 	b.w	80103dc <__sinit_lock_release>
 80103fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010400:	6523      	str	r3, [r4, #80]	; 0x50
 8010402:	4b13      	ldr	r3, [pc, #76]	; (8010450 <__sinit+0x68>)
 8010404:	4a13      	ldr	r2, [pc, #76]	; (8010454 <__sinit+0x6c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	62a2      	str	r2, [r4, #40]	; 0x28
 801040a:	42a3      	cmp	r3, r4
 801040c:	bf04      	itt	eq
 801040e:	2301      	moveq	r3, #1
 8010410:	61a3      	streq	r3, [r4, #24]
 8010412:	4620      	mov	r0, r4
 8010414:	f000 f820 	bl	8010458 <__sfp>
 8010418:	6060      	str	r0, [r4, #4]
 801041a:	4620      	mov	r0, r4
 801041c:	f000 f81c 	bl	8010458 <__sfp>
 8010420:	60a0      	str	r0, [r4, #8]
 8010422:	4620      	mov	r0, r4
 8010424:	f000 f818 	bl	8010458 <__sfp>
 8010428:	2200      	movs	r2, #0
 801042a:	60e0      	str	r0, [r4, #12]
 801042c:	2104      	movs	r1, #4
 801042e:	6860      	ldr	r0, [r4, #4]
 8010430:	f7ff ff82 	bl	8010338 <std>
 8010434:	68a0      	ldr	r0, [r4, #8]
 8010436:	2201      	movs	r2, #1
 8010438:	2109      	movs	r1, #9
 801043a:	f7ff ff7d 	bl	8010338 <std>
 801043e:	68e0      	ldr	r0, [r4, #12]
 8010440:	2202      	movs	r2, #2
 8010442:	2112      	movs	r1, #18
 8010444:	f7ff ff78 	bl	8010338 <std>
 8010448:	2301      	movs	r3, #1
 801044a:	61a3      	str	r3, [r4, #24]
 801044c:	e7d2      	b.n	80103f4 <__sinit+0xc>
 801044e:	bf00      	nop
 8010450:	08014378 	.word	0x08014378
 8010454:	08010381 	.word	0x08010381

08010458 <__sfp>:
 8010458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045a:	4607      	mov	r7, r0
 801045c:	f7ff ffac 	bl	80103b8 <__sfp_lock_acquire>
 8010460:	4b1e      	ldr	r3, [pc, #120]	; (80104dc <__sfp+0x84>)
 8010462:	681e      	ldr	r6, [r3, #0]
 8010464:	69b3      	ldr	r3, [r6, #24]
 8010466:	b913      	cbnz	r3, 801046e <__sfp+0x16>
 8010468:	4630      	mov	r0, r6
 801046a:	f7ff ffbd 	bl	80103e8 <__sinit>
 801046e:	3648      	adds	r6, #72	; 0x48
 8010470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010474:	3b01      	subs	r3, #1
 8010476:	d503      	bpl.n	8010480 <__sfp+0x28>
 8010478:	6833      	ldr	r3, [r6, #0]
 801047a:	b30b      	cbz	r3, 80104c0 <__sfp+0x68>
 801047c:	6836      	ldr	r6, [r6, #0]
 801047e:	e7f7      	b.n	8010470 <__sfp+0x18>
 8010480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010484:	b9d5      	cbnz	r5, 80104bc <__sfp+0x64>
 8010486:	4b16      	ldr	r3, [pc, #88]	; (80104e0 <__sfp+0x88>)
 8010488:	60e3      	str	r3, [r4, #12]
 801048a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801048e:	6665      	str	r5, [r4, #100]	; 0x64
 8010490:	f000 f859 	bl	8010546 <__retarget_lock_init_recursive>
 8010494:	f7ff ff96 	bl	80103c4 <__sfp_lock_release>
 8010498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801049c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104a0:	6025      	str	r5, [r4, #0]
 80104a2:	61a5      	str	r5, [r4, #24]
 80104a4:	2208      	movs	r2, #8
 80104a6:	4629      	mov	r1, r5
 80104a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104ac:	f7ff fc86 	bl	800fdbc <memset>
 80104b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80104b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104b8:	4620      	mov	r0, r4
 80104ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104bc:	3468      	adds	r4, #104	; 0x68
 80104be:	e7d9      	b.n	8010474 <__sfp+0x1c>
 80104c0:	2104      	movs	r1, #4
 80104c2:	4638      	mov	r0, r7
 80104c4:	f7ff ff62 	bl	801038c <__sfmoreglue>
 80104c8:	4604      	mov	r4, r0
 80104ca:	6030      	str	r0, [r6, #0]
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d1d5      	bne.n	801047c <__sfp+0x24>
 80104d0:	f7ff ff78 	bl	80103c4 <__sfp_lock_release>
 80104d4:	230c      	movs	r3, #12
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	e7ee      	b.n	80104b8 <__sfp+0x60>
 80104da:	bf00      	nop
 80104dc:	08014378 	.word	0x08014378
 80104e0:	ffff0001 	.word	0xffff0001

080104e4 <fiprintf>:
 80104e4:	b40e      	push	{r1, r2, r3}
 80104e6:	b503      	push	{r0, r1, lr}
 80104e8:	4601      	mov	r1, r0
 80104ea:	ab03      	add	r3, sp, #12
 80104ec:	4805      	ldr	r0, [pc, #20]	; (8010504 <fiprintf+0x20>)
 80104ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f2:	6800      	ldr	r0, [r0, #0]
 80104f4:	9301      	str	r3, [sp, #4]
 80104f6:	f000 fafd 	bl	8010af4 <_vfiprintf_r>
 80104fa:	b002      	add	sp, #8
 80104fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010500:	b003      	add	sp, #12
 8010502:	4770      	bx	lr
 8010504:	20000014 	.word	0x20000014

08010508 <_fwalk_reent>:
 8010508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801050c:	4606      	mov	r6, r0
 801050e:	4688      	mov	r8, r1
 8010510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010514:	2700      	movs	r7, #0
 8010516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801051a:	f1b9 0901 	subs.w	r9, r9, #1
 801051e:	d505      	bpl.n	801052c <_fwalk_reent+0x24>
 8010520:	6824      	ldr	r4, [r4, #0]
 8010522:	2c00      	cmp	r4, #0
 8010524:	d1f7      	bne.n	8010516 <_fwalk_reent+0xe>
 8010526:	4638      	mov	r0, r7
 8010528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801052c:	89ab      	ldrh	r3, [r5, #12]
 801052e:	2b01      	cmp	r3, #1
 8010530:	d907      	bls.n	8010542 <_fwalk_reent+0x3a>
 8010532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010536:	3301      	adds	r3, #1
 8010538:	d003      	beq.n	8010542 <_fwalk_reent+0x3a>
 801053a:	4629      	mov	r1, r5
 801053c:	4630      	mov	r0, r6
 801053e:	47c0      	blx	r8
 8010540:	4307      	orrs	r7, r0
 8010542:	3568      	adds	r5, #104	; 0x68
 8010544:	e7e9      	b.n	801051a <_fwalk_reent+0x12>

08010546 <__retarget_lock_init_recursive>:
 8010546:	4770      	bx	lr

08010548 <__retarget_lock_acquire_recursive>:
 8010548:	4770      	bx	lr

0801054a <__retarget_lock_release_recursive>:
 801054a:	4770      	bx	lr

0801054c <__swhatbuf_r>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	460e      	mov	r6, r1
 8010550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010554:	2900      	cmp	r1, #0
 8010556:	b096      	sub	sp, #88	; 0x58
 8010558:	4614      	mov	r4, r2
 801055a:	461d      	mov	r5, r3
 801055c:	da08      	bge.n	8010570 <__swhatbuf_r+0x24>
 801055e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	602a      	str	r2, [r5, #0]
 8010566:	061a      	lsls	r2, r3, #24
 8010568:	d410      	bmi.n	801058c <__swhatbuf_r+0x40>
 801056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801056e:	e00e      	b.n	801058e <__swhatbuf_r+0x42>
 8010570:	466a      	mov	r2, sp
 8010572:	f000 fe49 	bl	8011208 <_fstat_r>
 8010576:	2800      	cmp	r0, #0
 8010578:	dbf1      	blt.n	801055e <__swhatbuf_r+0x12>
 801057a:	9a01      	ldr	r2, [sp, #4]
 801057c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010580:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010584:	425a      	negs	r2, r3
 8010586:	415a      	adcs	r2, r3
 8010588:	602a      	str	r2, [r5, #0]
 801058a:	e7ee      	b.n	801056a <__swhatbuf_r+0x1e>
 801058c:	2340      	movs	r3, #64	; 0x40
 801058e:	2000      	movs	r0, #0
 8010590:	6023      	str	r3, [r4, #0]
 8010592:	b016      	add	sp, #88	; 0x58
 8010594:	bd70      	pop	{r4, r5, r6, pc}
	...

08010598 <__smakebuf_r>:
 8010598:	898b      	ldrh	r3, [r1, #12]
 801059a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801059c:	079d      	lsls	r5, r3, #30
 801059e:	4606      	mov	r6, r0
 80105a0:	460c      	mov	r4, r1
 80105a2:	d507      	bpl.n	80105b4 <__smakebuf_r+0x1c>
 80105a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	6123      	str	r3, [r4, #16]
 80105ac:	2301      	movs	r3, #1
 80105ae:	6163      	str	r3, [r4, #20]
 80105b0:	b002      	add	sp, #8
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	ab01      	add	r3, sp, #4
 80105b6:	466a      	mov	r2, sp
 80105b8:	f7ff ffc8 	bl	801054c <__swhatbuf_r>
 80105bc:	9900      	ldr	r1, [sp, #0]
 80105be:	4605      	mov	r5, r0
 80105c0:	4630      	mov	r0, r6
 80105c2:	f000 f89d 	bl	8010700 <_malloc_r>
 80105c6:	b948      	cbnz	r0, 80105dc <__smakebuf_r+0x44>
 80105c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105cc:	059a      	lsls	r2, r3, #22
 80105ce:	d4ef      	bmi.n	80105b0 <__smakebuf_r+0x18>
 80105d0:	f023 0303 	bic.w	r3, r3, #3
 80105d4:	f043 0302 	orr.w	r3, r3, #2
 80105d8:	81a3      	strh	r3, [r4, #12]
 80105da:	e7e3      	b.n	80105a4 <__smakebuf_r+0xc>
 80105dc:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <__smakebuf_r+0x7c>)
 80105de:	62b3      	str	r3, [r6, #40]	; 0x28
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	6020      	str	r0, [r4, #0]
 80105e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e8:	81a3      	strh	r3, [r4, #12]
 80105ea:	9b00      	ldr	r3, [sp, #0]
 80105ec:	6163      	str	r3, [r4, #20]
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	6120      	str	r0, [r4, #16]
 80105f2:	b15b      	cbz	r3, 801060c <__smakebuf_r+0x74>
 80105f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105f8:	4630      	mov	r0, r6
 80105fa:	f000 fe17 	bl	801122c <_isatty_r>
 80105fe:	b128      	cbz	r0, 801060c <__smakebuf_r+0x74>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	f023 0303 	bic.w	r3, r3, #3
 8010606:	f043 0301 	orr.w	r3, r3, #1
 801060a:	81a3      	strh	r3, [r4, #12]
 801060c:	89a0      	ldrh	r0, [r4, #12]
 801060e:	4305      	orrs	r5, r0
 8010610:	81a5      	strh	r5, [r4, #12]
 8010612:	e7cd      	b.n	80105b0 <__smakebuf_r+0x18>
 8010614:	08010381 	.word	0x08010381

08010618 <malloc>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <malloc+0xc>)
 801061a:	4601      	mov	r1, r0
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	f000 b86f 	b.w	8010700 <_malloc_r>
 8010622:	bf00      	nop
 8010624:	20000014 	.word	0x20000014

08010628 <_free_r>:
 8010628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801062a:	2900      	cmp	r1, #0
 801062c:	d044      	beq.n	80106b8 <_free_r+0x90>
 801062e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010632:	9001      	str	r0, [sp, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	f1a1 0404 	sub.w	r4, r1, #4
 801063a:	bfb8      	it	lt
 801063c:	18e4      	addlt	r4, r4, r3
 801063e:	f000 fe17 	bl	8011270 <__malloc_lock>
 8010642:	4a1e      	ldr	r2, [pc, #120]	; (80106bc <_free_r+0x94>)
 8010644:	9801      	ldr	r0, [sp, #4]
 8010646:	6813      	ldr	r3, [r2, #0]
 8010648:	b933      	cbnz	r3, 8010658 <_free_r+0x30>
 801064a:	6063      	str	r3, [r4, #4]
 801064c:	6014      	str	r4, [r2, #0]
 801064e:	b003      	add	sp, #12
 8010650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010654:	f000 be12 	b.w	801127c <__malloc_unlock>
 8010658:	42a3      	cmp	r3, r4
 801065a:	d908      	bls.n	801066e <_free_r+0x46>
 801065c:	6825      	ldr	r5, [r4, #0]
 801065e:	1961      	adds	r1, r4, r5
 8010660:	428b      	cmp	r3, r1
 8010662:	bf01      	itttt	eq
 8010664:	6819      	ldreq	r1, [r3, #0]
 8010666:	685b      	ldreq	r3, [r3, #4]
 8010668:	1949      	addeq	r1, r1, r5
 801066a:	6021      	streq	r1, [r4, #0]
 801066c:	e7ed      	b.n	801064a <_free_r+0x22>
 801066e:	461a      	mov	r2, r3
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	b10b      	cbz	r3, 8010678 <_free_r+0x50>
 8010674:	42a3      	cmp	r3, r4
 8010676:	d9fa      	bls.n	801066e <_free_r+0x46>
 8010678:	6811      	ldr	r1, [r2, #0]
 801067a:	1855      	adds	r5, r2, r1
 801067c:	42a5      	cmp	r5, r4
 801067e:	d10b      	bne.n	8010698 <_free_r+0x70>
 8010680:	6824      	ldr	r4, [r4, #0]
 8010682:	4421      	add	r1, r4
 8010684:	1854      	adds	r4, r2, r1
 8010686:	42a3      	cmp	r3, r4
 8010688:	6011      	str	r1, [r2, #0]
 801068a:	d1e0      	bne.n	801064e <_free_r+0x26>
 801068c:	681c      	ldr	r4, [r3, #0]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	6053      	str	r3, [r2, #4]
 8010692:	4421      	add	r1, r4
 8010694:	6011      	str	r1, [r2, #0]
 8010696:	e7da      	b.n	801064e <_free_r+0x26>
 8010698:	d902      	bls.n	80106a0 <_free_r+0x78>
 801069a:	230c      	movs	r3, #12
 801069c:	6003      	str	r3, [r0, #0]
 801069e:	e7d6      	b.n	801064e <_free_r+0x26>
 80106a0:	6825      	ldr	r5, [r4, #0]
 80106a2:	1961      	adds	r1, r4, r5
 80106a4:	428b      	cmp	r3, r1
 80106a6:	bf04      	itt	eq
 80106a8:	6819      	ldreq	r1, [r3, #0]
 80106aa:	685b      	ldreq	r3, [r3, #4]
 80106ac:	6063      	str	r3, [r4, #4]
 80106ae:	bf04      	itt	eq
 80106b0:	1949      	addeq	r1, r1, r5
 80106b2:	6021      	streq	r1, [r4, #0]
 80106b4:	6054      	str	r4, [r2, #4]
 80106b6:	e7ca      	b.n	801064e <_free_r+0x26>
 80106b8:	b003      	add	sp, #12
 80106ba:	bd30      	pop	{r4, r5, pc}
 80106bc:	20008bec 	.word	0x20008bec

080106c0 <sbrk_aligned>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	4e0e      	ldr	r6, [pc, #56]	; (80106fc <sbrk_aligned+0x3c>)
 80106c4:	460c      	mov	r4, r1
 80106c6:	6831      	ldr	r1, [r6, #0]
 80106c8:	4605      	mov	r5, r0
 80106ca:	b911      	cbnz	r1, 80106d2 <sbrk_aligned+0x12>
 80106cc:	f000 fd1e 	bl	801110c <_sbrk_r>
 80106d0:	6030      	str	r0, [r6, #0]
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	f000 fd19 	bl	801110c <_sbrk_r>
 80106da:	1c43      	adds	r3, r0, #1
 80106dc:	d00a      	beq.n	80106f4 <sbrk_aligned+0x34>
 80106de:	1cc4      	adds	r4, r0, #3
 80106e0:	f024 0403 	bic.w	r4, r4, #3
 80106e4:	42a0      	cmp	r0, r4
 80106e6:	d007      	beq.n	80106f8 <sbrk_aligned+0x38>
 80106e8:	1a21      	subs	r1, r4, r0
 80106ea:	4628      	mov	r0, r5
 80106ec:	f000 fd0e 	bl	801110c <_sbrk_r>
 80106f0:	3001      	adds	r0, #1
 80106f2:	d101      	bne.n	80106f8 <sbrk_aligned+0x38>
 80106f4:	f04f 34ff 	mov.w	r4, #4294967295
 80106f8:	4620      	mov	r0, r4
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	20008bf0 	.word	0x20008bf0

08010700 <_malloc_r>:
 8010700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010704:	1ccd      	adds	r5, r1, #3
 8010706:	f025 0503 	bic.w	r5, r5, #3
 801070a:	3508      	adds	r5, #8
 801070c:	2d0c      	cmp	r5, #12
 801070e:	bf38      	it	cc
 8010710:	250c      	movcc	r5, #12
 8010712:	2d00      	cmp	r5, #0
 8010714:	4607      	mov	r7, r0
 8010716:	db01      	blt.n	801071c <_malloc_r+0x1c>
 8010718:	42a9      	cmp	r1, r5
 801071a:	d905      	bls.n	8010728 <_malloc_r+0x28>
 801071c:	230c      	movs	r3, #12
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	2600      	movs	r6, #0
 8010722:	4630      	mov	r0, r6
 8010724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010728:	4e2e      	ldr	r6, [pc, #184]	; (80107e4 <_malloc_r+0xe4>)
 801072a:	f000 fda1 	bl	8011270 <__malloc_lock>
 801072e:	6833      	ldr	r3, [r6, #0]
 8010730:	461c      	mov	r4, r3
 8010732:	bb34      	cbnz	r4, 8010782 <_malloc_r+0x82>
 8010734:	4629      	mov	r1, r5
 8010736:	4638      	mov	r0, r7
 8010738:	f7ff ffc2 	bl	80106c0 <sbrk_aligned>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	4604      	mov	r4, r0
 8010740:	d14d      	bne.n	80107de <_malloc_r+0xde>
 8010742:	6834      	ldr	r4, [r6, #0]
 8010744:	4626      	mov	r6, r4
 8010746:	2e00      	cmp	r6, #0
 8010748:	d140      	bne.n	80107cc <_malloc_r+0xcc>
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	4631      	mov	r1, r6
 801074e:	4638      	mov	r0, r7
 8010750:	eb04 0803 	add.w	r8, r4, r3
 8010754:	f000 fcda 	bl	801110c <_sbrk_r>
 8010758:	4580      	cmp	r8, r0
 801075a:	d13a      	bne.n	80107d2 <_malloc_r+0xd2>
 801075c:	6821      	ldr	r1, [r4, #0]
 801075e:	3503      	adds	r5, #3
 8010760:	1a6d      	subs	r5, r5, r1
 8010762:	f025 0503 	bic.w	r5, r5, #3
 8010766:	3508      	adds	r5, #8
 8010768:	2d0c      	cmp	r5, #12
 801076a:	bf38      	it	cc
 801076c:	250c      	movcc	r5, #12
 801076e:	4629      	mov	r1, r5
 8010770:	4638      	mov	r0, r7
 8010772:	f7ff ffa5 	bl	80106c0 <sbrk_aligned>
 8010776:	3001      	adds	r0, #1
 8010778:	d02b      	beq.n	80107d2 <_malloc_r+0xd2>
 801077a:	6823      	ldr	r3, [r4, #0]
 801077c:	442b      	add	r3, r5
 801077e:	6023      	str	r3, [r4, #0]
 8010780:	e00e      	b.n	80107a0 <_malloc_r+0xa0>
 8010782:	6822      	ldr	r2, [r4, #0]
 8010784:	1b52      	subs	r2, r2, r5
 8010786:	d41e      	bmi.n	80107c6 <_malloc_r+0xc6>
 8010788:	2a0b      	cmp	r2, #11
 801078a:	d916      	bls.n	80107ba <_malloc_r+0xba>
 801078c:	1961      	adds	r1, r4, r5
 801078e:	42a3      	cmp	r3, r4
 8010790:	6025      	str	r5, [r4, #0]
 8010792:	bf18      	it	ne
 8010794:	6059      	strne	r1, [r3, #4]
 8010796:	6863      	ldr	r3, [r4, #4]
 8010798:	bf08      	it	eq
 801079a:	6031      	streq	r1, [r6, #0]
 801079c:	5162      	str	r2, [r4, r5]
 801079e:	604b      	str	r3, [r1, #4]
 80107a0:	4638      	mov	r0, r7
 80107a2:	f104 060b 	add.w	r6, r4, #11
 80107a6:	f000 fd69 	bl	801127c <__malloc_unlock>
 80107aa:	f026 0607 	bic.w	r6, r6, #7
 80107ae:	1d23      	adds	r3, r4, #4
 80107b0:	1af2      	subs	r2, r6, r3
 80107b2:	d0b6      	beq.n	8010722 <_malloc_r+0x22>
 80107b4:	1b9b      	subs	r3, r3, r6
 80107b6:	50a3      	str	r3, [r4, r2]
 80107b8:	e7b3      	b.n	8010722 <_malloc_r+0x22>
 80107ba:	6862      	ldr	r2, [r4, #4]
 80107bc:	42a3      	cmp	r3, r4
 80107be:	bf0c      	ite	eq
 80107c0:	6032      	streq	r2, [r6, #0]
 80107c2:	605a      	strne	r2, [r3, #4]
 80107c4:	e7ec      	b.n	80107a0 <_malloc_r+0xa0>
 80107c6:	4623      	mov	r3, r4
 80107c8:	6864      	ldr	r4, [r4, #4]
 80107ca:	e7b2      	b.n	8010732 <_malloc_r+0x32>
 80107cc:	4634      	mov	r4, r6
 80107ce:	6876      	ldr	r6, [r6, #4]
 80107d0:	e7b9      	b.n	8010746 <_malloc_r+0x46>
 80107d2:	230c      	movs	r3, #12
 80107d4:	603b      	str	r3, [r7, #0]
 80107d6:	4638      	mov	r0, r7
 80107d8:	f000 fd50 	bl	801127c <__malloc_unlock>
 80107dc:	e7a1      	b.n	8010722 <_malloc_r+0x22>
 80107de:	6025      	str	r5, [r4, #0]
 80107e0:	e7de      	b.n	80107a0 <_malloc_r+0xa0>
 80107e2:	bf00      	nop
 80107e4:	20008bec 	.word	0x20008bec

080107e8 <__ssputs_r>:
 80107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	688e      	ldr	r6, [r1, #8]
 80107ee:	429e      	cmp	r6, r3
 80107f0:	4682      	mov	sl, r0
 80107f2:	460c      	mov	r4, r1
 80107f4:	4690      	mov	r8, r2
 80107f6:	461f      	mov	r7, r3
 80107f8:	d838      	bhi.n	801086c <__ssputs_r+0x84>
 80107fa:	898a      	ldrh	r2, [r1, #12]
 80107fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010800:	d032      	beq.n	8010868 <__ssputs_r+0x80>
 8010802:	6825      	ldr	r5, [r4, #0]
 8010804:	6909      	ldr	r1, [r1, #16]
 8010806:	eba5 0901 	sub.w	r9, r5, r1
 801080a:	6965      	ldr	r5, [r4, #20]
 801080c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010814:	3301      	adds	r3, #1
 8010816:	444b      	add	r3, r9
 8010818:	106d      	asrs	r5, r5, #1
 801081a:	429d      	cmp	r5, r3
 801081c:	bf38      	it	cc
 801081e:	461d      	movcc	r5, r3
 8010820:	0553      	lsls	r3, r2, #21
 8010822:	d531      	bpl.n	8010888 <__ssputs_r+0xa0>
 8010824:	4629      	mov	r1, r5
 8010826:	f7ff ff6b 	bl	8010700 <_malloc_r>
 801082a:	4606      	mov	r6, r0
 801082c:	b950      	cbnz	r0, 8010844 <__ssputs_r+0x5c>
 801082e:	230c      	movs	r3, #12
 8010830:	f8ca 3000 	str.w	r3, [sl]
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801083a:	81a3      	strh	r3, [r4, #12]
 801083c:	f04f 30ff 	mov.w	r0, #4294967295
 8010840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010844:	6921      	ldr	r1, [r4, #16]
 8010846:	464a      	mov	r2, r9
 8010848:	f7ff fa90 	bl	800fd6c <memcpy>
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010856:	81a3      	strh	r3, [r4, #12]
 8010858:	6126      	str	r6, [r4, #16]
 801085a:	6165      	str	r5, [r4, #20]
 801085c:	444e      	add	r6, r9
 801085e:	eba5 0509 	sub.w	r5, r5, r9
 8010862:	6026      	str	r6, [r4, #0]
 8010864:	60a5      	str	r5, [r4, #8]
 8010866:	463e      	mov	r6, r7
 8010868:	42be      	cmp	r6, r7
 801086a:	d900      	bls.n	801086e <__ssputs_r+0x86>
 801086c:	463e      	mov	r6, r7
 801086e:	6820      	ldr	r0, [r4, #0]
 8010870:	4632      	mov	r2, r6
 8010872:	4641      	mov	r1, r8
 8010874:	f7ff fa88 	bl	800fd88 <memmove>
 8010878:	68a3      	ldr	r3, [r4, #8]
 801087a:	1b9b      	subs	r3, r3, r6
 801087c:	60a3      	str	r3, [r4, #8]
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	4433      	add	r3, r6
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	2000      	movs	r0, #0
 8010886:	e7db      	b.n	8010840 <__ssputs_r+0x58>
 8010888:	462a      	mov	r2, r5
 801088a:	f000 fcfd 	bl	8011288 <_realloc_r>
 801088e:	4606      	mov	r6, r0
 8010890:	2800      	cmp	r0, #0
 8010892:	d1e1      	bne.n	8010858 <__ssputs_r+0x70>
 8010894:	6921      	ldr	r1, [r4, #16]
 8010896:	4650      	mov	r0, sl
 8010898:	f7ff fec6 	bl	8010628 <_free_r>
 801089c:	e7c7      	b.n	801082e <__ssputs_r+0x46>
	...

080108a0 <_svfiprintf_r>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	4698      	mov	r8, r3
 80108a6:	898b      	ldrh	r3, [r1, #12]
 80108a8:	061b      	lsls	r3, r3, #24
 80108aa:	b09d      	sub	sp, #116	; 0x74
 80108ac:	4607      	mov	r7, r0
 80108ae:	460d      	mov	r5, r1
 80108b0:	4614      	mov	r4, r2
 80108b2:	d50e      	bpl.n	80108d2 <_svfiprintf_r+0x32>
 80108b4:	690b      	ldr	r3, [r1, #16]
 80108b6:	b963      	cbnz	r3, 80108d2 <_svfiprintf_r+0x32>
 80108b8:	2140      	movs	r1, #64	; 0x40
 80108ba:	f7ff ff21 	bl	8010700 <_malloc_r>
 80108be:	6028      	str	r0, [r5, #0]
 80108c0:	6128      	str	r0, [r5, #16]
 80108c2:	b920      	cbnz	r0, 80108ce <_svfiprintf_r+0x2e>
 80108c4:	230c      	movs	r3, #12
 80108c6:	603b      	str	r3, [r7, #0]
 80108c8:	f04f 30ff 	mov.w	r0, #4294967295
 80108cc:	e0d1      	b.n	8010a72 <_svfiprintf_r+0x1d2>
 80108ce:	2340      	movs	r3, #64	; 0x40
 80108d0:	616b      	str	r3, [r5, #20]
 80108d2:	2300      	movs	r3, #0
 80108d4:	9309      	str	r3, [sp, #36]	; 0x24
 80108d6:	2320      	movs	r3, #32
 80108d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80108e0:	2330      	movs	r3, #48	; 0x30
 80108e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a8c <_svfiprintf_r+0x1ec>
 80108e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108ea:	f04f 0901 	mov.w	r9, #1
 80108ee:	4623      	mov	r3, r4
 80108f0:	469a      	mov	sl, r3
 80108f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108f6:	b10a      	cbz	r2, 80108fc <_svfiprintf_r+0x5c>
 80108f8:	2a25      	cmp	r2, #37	; 0x25
 80108fa:	d1f9      	bne.n	80108f0 <_svfiprintf_r+0x50>
 80108fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010900:	d00b      	beq.n	801091a <_svfiprintf_r+0x7a>
 8010902:	465b      	mov	r3, fp
 8010904:	4622      	mov	r2, r4
 8010906:	4629      	mov	r1, r5
 8010908:	4638      	mov	r0, r7
 801090a:	f7ff ff6d 	bl	80107e8 <__ssputs_r>
 801090e:	3001      	adds	r0, #1
 8010910:	f000 80aa 	beq.w	8010a68 <_svfiprintf_r+0x1c8>
 8010914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010916:	445a      	add	r2, fp
 8010918:	9209      	str	r2, [sp, #36]	; 0x24
 801091a:	f89a 3000 	ldrb.w	r3, [sl]
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 80a2 	beq.w	8010a68 <_svfiprintf_r+0x1c8>
 8010924:	2300      	movs	r3, #0
 8010926:	f04f 32ff 	mov.w	r2, #4294967295
 801092a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801092e:	f10a 0a01 	add.w	sl, sl, #1
 8010932:	9304      	str	r3, [sp, #16]
 8010934:	9307      	str	r3, [sp, #28]
 8010936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801093a:	931a      	str	r3, [sp, #104]	; 0x68
 801093c:	4654      	mov	r4, sl
 801093e:	2205      	movs	r2, #5
 8010940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010944:	4851      	ldr	r0, [pc, #324]	; (8010a8c <_svfiprintf_r+0x1ec>)
 8010946:	f7ef fc63 	bl	8000210 <memchr>
 801094a:	9a04      	ldr	r2, [sp, #16]
 801094c:	b9d8      	cbnz	r0, 8010986 <_svfiprintf_r+0xe6>
 801094e:	06d0      	lsls	r0, r2, #27
 8010950:	bf44      	itt	mi
 8010952:	2320      	movmi	r3, #32
 8010954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010958:	0711      	lsls	r1, r2, #28
 801095a:	bf44      	itt	mi
 801095c:	232b      	movmi	r3, #43	; 0x2b
 801095e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010962:	f89a 3000 	ldrb.w	r3, [sl]
 8010966:	2b2a      	cmp	r3, #42	; 0x2a
 8010968:	d015      	beq.n	8010996 <_svfiprintf_r+0xf6>
 801096a:	9a07      	ldr	r2, [sp, #28]
 801096c:	4654      	mov	r4, sl
 801096e:	2000      	movs	r0, #0
 8010970:	f04f 0c0a 	mov.w	ip, #10
 8010974:	4621      	mov	r1, r4
 8010976:	f811 3b01 	ldrb.w	r3, [r1], #1
 801097a:	3b30      	subs	r3, #48	; 0x30
 801097c:	2b09      	cmp	r3, #9
 801097e:	d94e      	bls.n	8010a1e <_svfiprintf_r+0x17e>
 8010980:	b1b0      	cbz	r0, 80109b0 <_svfiprintf_r+0x110>
 8010982:	9207      	str	r2, [sp, #28]
 8010984:	e014      	b.n	80109b0 <_svfiprintf_r+0x110>
 8010986:	eba0 0308 	sub.w	r3, r0, r8
 801098a:	fa09 f303 	lsl.w	r3, r9, r3
 801098e:	4313      	orrs	r3, r2
 8010990:	9304      	str	r3, [sp, #16]
 8010992:	46a2      	mov	sl, r4
 8010994:	e7d2      	b.n	801093c <_svfiprintf_r+0x9c>
 8010996:	9b03      	ldr	r3, [sp, #12]
 8010998:	1d19      	adds	r1, r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	9103      	str	r1, [sp, #12]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	bfbb      	ittet	lt
 80109a2:	425b      	neglt	r3, r3
 80109a4:	f042 0202 	orrlt.w	r2, r2, #2
 80109a8:	9307      	strge	r3, [sp, #28]
 80109aa:	9307      	strlt	r3, [sp, #28]
 80109ac:	bfb8      	it	lt
 80109ae:	9204      	strlt	r2, [sp, #16]
 80109b0:	7823      	ldrb	r3, [r4, #0]
 80109b2:	2b2e      	cmp	r3, #46	; 0x2e
 80109b4:	d10c      	bne.n	80109d0 <_svfiprintf_r+0x130>
 80109b6:	7863      	ldrb	r3, [r4, #1]
 80109b8:	2b2a      	cmp	r3, #42	; 0x2a
 80109ba:	d135      	bne.n	8010a28 <_svfiprintf_r+0x188>
 80109bc:	9b03      	ldr	r3, [sp, #12]
 80109be:	1d1a      	adds	r2, r3, #4
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	9203      	str	r2, [sp, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	bfb8      	it	lt
 80109c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80109cc:	3402      	adds	r4, #2
 80109ce:	9305      	str	r3, [sp, #20]
 80109d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a9c <_svfiprintf_r+0x1fc>
 80109d4:	7821      	ldrb	r1, [r4, #0]
 80109d6:	2203      	movs	r2, #3
 80109d8:	4650      	mov	r0, sl
 80109da:	f7ef fc19 	bl	8000210 <memchr>
 80109de:	b140      	cbz	r0, 80109f2 <_svfiprintf_r+0x152>
 80109e0:	2340      	movs	r3, #64	; 0x40
 80109e2:	eba0 000a 	sub.w	r0, r0, sl
 80109e6:	fa03 f000 	lsl.w	r0, r3, r0
 80109ea:	9b04      	ldr	r3, [sp, #16]
 80109ec:	4303      	orrs	r3, r0
 80109ee:	3401      	adds	r4, #1
 80109f0:	9304      	str	r3, [sp, #16]
 80109f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f6:	4826      	ldr	r0, [pc, #152]	; (8010a90 <_svfiprintf_r+0x1f0>)
 80109f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109fc:	2206      	movs	r2, #6
 80109fe:	f7ef fc07 	bl	8000210 <memchr>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d038      	beq.n	8010a78 <_svfiprintf_r+0x1d8>
 8010a06:	4b23      	ldr	r3, [pc, #140]	; (8010a94 <_svfiprintf_r+0x1f4>)
 8010a08:	bb1b      	cbnz	r3, 8010a52 <_svfiprintf_r+0x1b2>
 8010a0a:	9b03      	ldr	r3, [sp, #12]
 8010a0c:	3307      	adds	r3, #7
 8010a0e:	f023 0307 	bic.w	r3, r3, #7
 8010a12:	3308      	adds	r3, #8
 8010a14:	9303      	str	r3, [sp, #12]
 8010a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a18:	4433      	add	r3, r6
 8010a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a1c:	e767      	b.n	80108ee <_svfiprintf_r+0x4e>
 8010a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a22:	460c      	mov	r4, r1
 8010a24:	2001      	movs	r0, #1
 8010a26:	e7a5      	b.n	8010974 <_svfiprintf_r+0xd4>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	3401      	adds	r4, #1
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	f04f 0c0a 	mov.w	ip, #10
 8010a34:	4620      	mov	r0, r4
 8010a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a3a:	3a30      	subs	r2, #48	; 0x30
 8010a3c:	2a09      	cmp	r2, #9
 8010a3e:	d903      	bls.n	8010a48 <_svfiprintf_r+0x1a8>
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d0c5      	beq.n	80109d0 <_svfiprintf_r+0x130>
 8010a44:	9105      	str	r1, [sp, #20]
 8010a46:	e7c3      	b.n	80109d0 <_svfiprintf_r+0x130>
 8010a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e7f0      	b.n	8010a34 <_svfiprintf_r+0x194>
 8010a52:	ab03      	add	r3, sp, #12
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	462a      	mov	r2, r5
 8010a58:	4b0f      	ldr	r3, [pc, #60]	; (8010a98 <_svfiprintf_r+0x1f8>)
 8010a5a:	a904      	add	r1, sp, #16
 8010a5c:	4638      	mov	r0, r7
 8010a5e:	f3af 8000 	nop.w
 8010a62:	1c42      	adds	r2, r0, #1
 8010a64:	4606      	mov	r6, r0
 8010a66:	d1d6      	bne.n	8010a16 <_svfiprintf_r+0x176>
 8010a68:	89ab      	ldrh	r3, [r5, #12]
 8010a6a:	065b      	lsls	r3, r3, #25
 8010a6c:	f53f af2c 	bmi.w	80108c8 <_svfiprintf_r+0x28>
 8010a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a72:	b01d      	add	sp, #116	; 0x74
 8010a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a78:	ab03      	add	r3, sp, #12
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	462a      	mov	r2, r5
 8010a7e:	4b06      	ldr	r3, [pc, #24]	; (8010a98 <_svfiprintf_r+0x1f8>)
 8010a80:	a904      	add	r1, sp, #16
 8010a82:	4638      	mov	r0, r7
 8010a84:	f000 f9d4 	bl	8010e30 <_printf_i>
 8010a88:	e7eb      	b.n	8010a62 <_svfiprintf_r+0x1c2>
 8010a8a:	bf00      	nop
 8010a8c:	0801448c 	.word	0x0801448c
 8010a90:	08014496 	.word	0x08014496
 8010a94:	00000000 	.word	0x00000000
 8010a98:	080107e9 	.word	0x080107e9
 8010a9c:	08014492 	.word	0x08014492

08010aa0 <__sfputc_r>:
 8010aa0:	6893      	ldr	r3, [r2, #8]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	b410      	push	{r4}
 8010aa8:	6093      	str	r3, [r2, #8]
 8010aaa:	da08      	bge.n	8010abe <__sfputc_r+0x1e>
 8010aac:	6994      	ldr	r4, [r2, #24]
 8010aae:	42a3      	cmp	r3, r4
 8010ab0:	db01      	blt.n	8010ab6 <__sfputc_r+0x16>
 8010ab2:	290a      	cmp	r1, #10
 8010ab4:	d103      	bne.n	8010abe <__sfputc_r+0x1e>
 8010ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aba:	f7ff ba9d 	b.w	800fff8 <__swbuf_r>
 8010abe:	6813      	ldr	r3, [r2, #0]
 8010ac0:	1c58      	adds	r0, r3, #1
 8010ac2:	6010      	str	r0, [r2, #0]
 8010ac4:	7019      	strb	r1, [r3, #0]
 8010ac6:	4608      	mov	r0, r1
 8010ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <__sfputs_r>:
 8010ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	460f      	mov	r7, r1
 8010ad4:	4614      	mov	r4, r2
 8010ad6:	18d5      	adds	r5, r2, r3
 8010ad8:	42ac      	cmp	r4, r5
 8010ada:	d101      	bne.n	8010ae0 <__sfputs_r+0x12>
 8010adc:	2000      	movs	r0, #0
 8010ade:	e007      	b.n	8010af0 <__sfputs_r+0x22>
 8010ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ae4:	463a      	mov	r2, r7
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f7ff ffda 	bl	8010aa0 <__sfputc_r>
 8010aec:	1c43      	adds	r3, r0, #1
 8010aee:	d1f3      	bne.n	8010ad8 <__sfputs_r+0xa>
 8010af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010af4 <_vfiprintf_r>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	460d      	mov	r5, r1
 8010afa:	b09d      	sub	sp, #116	; 0x74
 8010afc:	4614      	mov	r4, r2
 8010afe:	4698      	mov	r8, r3
 8010b00:	4606      	mov	r6, r0
 8010b02:	b118      	cbz	r0, 8010b0c <_vfiprintf_r+0x18>
 8010b04:	6983      	ldr	r3, [r0, #24]
 8010b06:	b90b      	cbnz	r3, 8010b0c <_vfiprintf_r+0x18>
 8010b08:	f7ff fc6e 	bl	80103e8 <__sinit>
 8010b0c:	4b89      	ldr	r3, [pc, #548]	; (8010d34 <_vfiprintf_r+0x240>)
 8010b0e:	429d      	cmp	r5, r3
 8010b10:	d11b      	bne.n	8010b4a <_vfiprintf_r+0x56>
 8010b12:	6875      	ldr	r5, [r6, #4]
 8010b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b16:	07d9      	lsls	r1, r3, #31
 8010b18:	d405      	bmi.n	8010b26 <_vfiprintf_r+0x32>
 8010b1a:	89ab      	ldrh	r3, [r5, #12]
 8010b1c:	059a      	lsls	r2, r3, #22
 8010b1e:	d402      	bmi.n	8010b26 <_vfiprintf_r+0x32>
 8010b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b22:	f7ff fd11 	bl	8010548 <__retarget_lock_acquire_recursive>
 8010b26:	89ab      	ldrh	r3, [r5, #12]
 8010b28:	071b      	lsls	r3, r3, #28
 8010b2a:	d501      	bpl.n	8010b30 <_vfiprintf_r+0x3c>
 8010b2c:	692b      	ldr	r3, [r5, #16]
 8010b2e:	b9eb      	cbnz	r3, 8010b6c <_vfiprintf_r+0x78>
 8010b30:	4629      	mov	r1, r5
 8010b32:	4630      	mov	r0, r6
 8010b34:	f7ff fab2 	bl	801009c <__swsetup_r>
 8010b38:	b1c0      	cbz	r0, 8010b6c <_vfiprintf_r+0x78>
 8010b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b3c:	07dc      	lsls	r4, r3, #31
 8010b3e:	d50e      	bpl.n	8010b5e <_vfiprintf_r+0x6a>
 8010b40:	f04f 30ff 	mov.w	r0, #4294967295
 8010b44:	b01d      	add	sp, #116	; 0x74
 8010b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4a:	4b7b      	ldr	r3, [pc, #492]	; (8010d38 <_vfiprintf_r+0x244>)
 8010b4c:	429d      	cmp	r5, r3
 8010b4e:	d101      	bne.n	8010b54 <_vfiprintf_r+0x60>
 8010b50:	68b5      	ldr	r5, [r6, #8]
 8010b52:	e7df      	b.n	8010b14 <_vfiprintf_r+0x20>
 8010b54:	4b79      	ldr	r3, [pc, #484]	; (8010d3c <_vfiprintf_r+0x248>)
 8010b56:	429d      	cmp	r5, r3
 8010b58:	bf08      	it	eq
 8010b5a:	68f5      	ldreq	r5, [r6, #12]
 8010b5c:	e7da      	b.n	8010b14 <_vfiprintf_r+0x20>
 8010b5e:	89ab      	ldrh	r3, [r5, #12]
 8010b60:	0598      	lsls	r0, r3, #22
 8010b62:	d4ed      	bmi.n	8010b40 <_vfiprintf_r+0x4c>
 8010b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b66:	f7ff fcf0 	bl	801054a <__retarget_lock_release_recursive>
 8010b6a:	e7e9      	b.n	8010b40 <_vfiprintf_r+0x4c>
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8010b70:	2320      	movs	r3, #32
 8010b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b7a:	2330      	movs	r3, #48	; 0x30
 8010b7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010d40 <_vfiprintf_r+0x24c>
 8010b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b84:	f04f 0901 	mov.w	r9, #1
 8010b88:	4623      	mov	r3, r4
 8010b8a:	469a      	mov	sl, r3
 8010b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b90:	b10a      	cbz	r2, 8010b96 <_vfiprintf_r+0xa2>
 8010b92:	2a25      	cmp	r2, #37	; 0x25
 8010b94:	d1f9      	bne.n	8010b8a <_vfiprintf_r+0x96>
 8010b96:	ebba 0b04 	subs.w	fp, sl, r4
 8010b9a:	d00b      	beq.n	8010bb4 <_vfiprintf_r+0xc0>
 8010b9c:	465b      	mov	r3, fp
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7ff ff93 	bl	8010ace <__sfputs_r>
 8010ba8:	3001      	adds	r0, #1
 8010baa:	f000 80aa 	beq.w	8010d02 <_vfiprintf_r+0x20e>
 8010bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bb0:	445a      	add	r2, fp
 8010bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8010bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 80a2 	beq.w	8010d02 <_vfiprintf_r+0x20e>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bc8:	f10a 0a01 	add.w	sl, sl, #1
 8010bcc:	9304      	str	r3, [sp, #16]
 8010bce:	9307      	str	r3, [sp, #28]
 8010bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8010bd6:	4654      	mov	r4, sl
 8010bd8:	2205      	movs	r2, #5
 8010bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bde:	4858      	ldr	r0, [pc, #352]	; (8010d40 <_vfiprintf_r+0x24c>)
 8010be0:	f7ef fb16 	bl	8000210 <memchr>
 8010be4:	9a04      	ldr	r2, [sp, #16]
 8010be6:	b9d8      	cbnz	r0, 8010c20 <_vfiprintf_r+0x12c>
 8010be8:	06d1      	lsls	r1, r2, #27
 8010bea:	bf44      	itt	mi
 8010bec:	2320      	movmi	r3, #32
 8010bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bf2:	0713      	lsls	r3, r2, #28
 8010bf4:	bf44      	itt	mi
 8010bf6:	232b      	movmi	r3, #43	; 0x2b
 8010bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8010c00:	2b2a      	cmp	r3, #42	; 0x2a
 8010c02:	d015      	beq.n	8010c30 <_vfiprintf_r+0x13c>
 8010c04:	9a07      	ldr	r2, [sp, #28]
 8010c06:	4654      	mov	r4, sl
 8010c08:	2000      	movs	r0, #0
 8010c0a:	f04f 0c0a 	mov.w	ip, #10
 8010c0e:	4621      	mov	r1, r4
 8010c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c14:	3b30      	subs	r3, #48	; 0x30
 8010c16:	2b09      	cmp	r3, #9
 8010c18:	d94e      	bls.n	8010cb8 <_vfiprintf_r+0x1c4>
 8010c1a:	b1b0      	cbz	r0, 8010c4a <_vfiprintf_r+0x156>
 8010c1c:	9207      	str	r2, [sp, #28]
 8010c1e:	e014      	b.n	8010c4a <_vfiprintf_r+0x156>
 8010c20:	eba0 0308 	sub.w	r3, r0, r8
 8010c24:	fa09 f303 	lsl.w	r3, r9, r3
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	9304      	str	r3, [sp, #16]
 8010c2c:	46a2      	mov	sl, r4
 8010c2e:	e7d2      	b.n	8010bd6 <_vfiprintf_r+0xe2>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	1d19      	adds	r1, r3, #4
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	9103      	str	r1, [sp, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bfbb      	ittet	lt
 8010c3c:	425b      	neglt	r3, r3
 8010c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8010c42:	9307      	strge	r3, [sp, #28]
 8010c44:	9307      	strlt	r3, [sp, #28]
 8010c46:	bfb8      	it	lt
 8010c48:	9204      	strlt	r2, [sp, #16]
 8010c4a:	7823      	ldrb	r3, [r4, #0]
 8010c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8010c4e:	d10c      	bne.n	8010c6a <_vfiprintf_r+0x176>
 8010c50:	7863      	ldrb	r3, [r4, #1]
 8010c52:	2b2a      	cmp	r3, #42	; 0x2a
 8010c54:	d135      	bne.n	8010cc2 <_vfiprintf_r+0x1ce>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	1d1a      	adds	r2, r3, #4
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	9203      	str	r2, [sp, #12]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bfb8      	it	lt
 8010c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c66:	3402      	adds	r4, #2
 8010c68:	9305      	str	r3, [sp, #20]
 8010c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010d50 <_vfiprintf_r+0x25c>
 8010c6e:	7821      	ldrb	r1, [r4, #0]
 8010c70:	2203      	movs	r2, #3
 8010c72:	4650      	mov	r0, sl
 8010c74:	f7ef facc 	bl	8000210 <memchr>
 8010c78:	b140      	cbz	r0, 8010c8c <_vfiprintf_r+0x198>
 8010c7a:	2340      	movs	r3, #64	; 0x40
 8010c7c:	eba0 000a 	sub.w	r0, r0, sl
 8010c80:	fa03 f000 	lsl.w	r0, r3, r0
 8010c84:	9b04      	ldr	r3, [sp, #16]
 8010c86:	4303      	orrs	r3, r0
 8010c88:	3401      	adds	r4, #1
 8010c8a:	9304      	str	r3, [sp, #16]
 8010c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c90:	482c      	ldr	r0, [pc, #176]	; (8010d44 <_vfiprintf_r+0x250>)
 8010c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c96:	2206      	movs	r2, #6
 8010c98:	f7ef faba 	bl	8000210 <memchr>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d03f      	beq.n	8010d20 <_vfiprintf_r+0x22c>
 8010ca0:	4b29      	ldr	r3, [pc, #164]	; (8010d48 <_vfiprintf_r+0x254>)
 8010ca2:	bb1b      	cbnz	r3, 8010cec <_vfiprintf_r+0x1f8>
 8010ca4:	9b03      	ldr	r3, [sp, #12]
 8010ca6:	3307      	adds	r3, #7
 8010ca8:	f023 0307 	bic.w	r3, r3, #7
 8010cac:	3308      	adds	r3, #8
 8010cae:	9303      	str	r3, [sp, #12]
 8010cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cb2:	443b      	add	r3, r7
 8010cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010cb6:	e767      	b.n	8010b88 <_vfiprintf_r+0x94>
 8010cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cbc:	460c      	mov	r4, r1
 8010cbe:	2001      	movs	r0, #1
 8010cc0:	e7a5      	b.n	8010c0e <_vfiprintf_r+0x11a>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	3401      	adds	r4, #1
 8010cc6:	9305      	str	r3, [sp, #20]
 8010cc8:	4619      	mov	r1, r3
 8010cca:	f04f 0c0a 	mov.w	ip, #10
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cd4:	3a30      	subs	r2, #48	; 0x30
 8010cd6:	2a09      	cmp	r2, #9
 8010cd8:	d903      	bls.n	8010ce2 <_vfiprintf_r+0x1ee>
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d0c5      	beq.n	8010c6a <_vfiprintf_r+0x176>
 8010cde:	9105      	str	r1, [sp, #20]
 8010ce0:	e7c3      	b.n	8010c6a <_vfiprintf_r+0x176>
 8010ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e7f0      	b.n	8010cce <_vfiprintf_r+0x1da>
 8010cec:	ab03      	add	r3, sp, #12
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	4b16      	ldr	r3, [pc, #88]	; (8010d4c <_vfiprintf_r+0x258>)
 8010cf4:	a904      	add	r1, sp, #16
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f3af 8000 	nop.w
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	1c78      	adds	r0, r7, #1
 8010d00:	d1d6      	bne.n	8010cb0 <_vfiprintf_r+0x1bc>
 8010d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d04:	07d9      	lsls	r1, r3, #31
 8010d06:	d405      	bmi.n	8010d14 <_vfiprintf_r+0x220>
 8010d08:	89ab      	ldrh	r3, [r5, #12]
 8010d0a:	059a      	lsls	r2, r3, #22
 8010d0c:	d402      	bmi.n	8010d14 <_vfiprintf_r+0x220>
 8010d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d10:	f7ff fc1b 	bl	801054a <__retarget_lock_release_recursive>
 8010d14:	89ab      	ldrh	r3, [r5, #12]
 8010d16:	065b      	lsls	r3, r3, #25
 8010d18:	f53f af12 	bmi.w	8010b40 <_vfiprintf_r+0x4c>
 8010d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d1e:	e711      	b.n	8010b44 <_vfiprintf_r+0x50>
 8010d20:	ab03      	add	r3, sp, #12
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	462a      	mov	r2, r5
 8010d26:	4b09      	ldr	r3, [pc, #36]	; (8010d4c <_vfiprintf_r+0x258>)
 8010d28:	a904      	add	r1, sp, #16
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f000 f880 	bl	8010e30 <_printf_i>
 8010d30:	e7e4      	b.n	8010cfc <_vfiprintf_r+0x208>
 8010d32:	bf00      	nop
 8010d34:	0801444c 	.word	0x0801444c
 8010d38:	0801446c 	.word	0x0801446c
 8010d3c:	0801442c 	.word	0x0801442c
 8010d40:	0801448c 	.word	0x0801448c
 8010d44:	08014496 	.word	0x08014496
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	08010acf 	.word	0x08010acf
 8010d50:	08014492 	.word	0x08014492

08010d54 <_printf_common>:
 8010d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d58:	4616      	mov	r6, r2
 8010d5a:	4699      	mov	r9, r3
 8010d5c:	688a      	ldr	r2, [r1, #8]
 8010d5e:	690b      	ldr	r3, [r1, #16]
 8010d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d64:	4293      	cmp	r3, r2
 8010d66:	bfb8      	it	lt
 8010d68:	4613      	movlt	r3, r2
 8010d6a:	6033      	str	r3, [r6, #0]
 8010d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d70:	4607      	mov	r7, r0
 8010d72:	460c      	mov	r4, r1
 8010d74:	b10a      	cbz	r2, 8010d7a <_printf_common+0x26>
 8010d76:	3301      	adds	r3, #1
 8010d78:	6033      	str	r3, [r6, #0]
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	0699      	lsls	r1, r3, #26
 8010d7e:	bf42      	ittt	mi
 8010d80:	6833      	ldrmi	r3, [r6, #0]
 8010d82:	3302      	addmi	r3, #2
 8010d84:	6033      	strmi	r3, [r6, #0]
 8010d86:	6825      	ldr	r5, [r4, #0]
 8010d88:	f015 0506 	ands.w	r5, r5, #6
 8010d8c:	d106      	bne.n	8010d9c <_printf_common+0x48>
 8010d8e:	f104 0a19 	add.w	sl, r4, #25
 8010d92:	68e3      	ldr	r3, [r4, #12]
 8010d94:	6832      	ldr	r2, [r6, #0]
 8010d96:	1a9b      	subs	r3, r3, r2
 8010d98:	42ab      	cmp	r3, r5
 8010d9a:	dc26      	bgt.n	8010dea <_printf_common+0x96>
 8010d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010da0:	1e13      	subs	r3, r2, #0
 8010da2:	6822      	ldr	r2, [r4, #0]
 8010da4:	bf18      	it	ne
 8010da6:	2301      	movne	r3, #1
 8010da8:	0692      	lsls	r2, r2, #26
 8010daa:	d42b      	bmi.n	8010e04 <_printf_common+0xb0>
 8010dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010db0:	4649      	mov	r1, r9
 8010db2:	4638      	mov	r0, r7
 8010db4:	47c0      	blx	r8
 8010db6:	3001      	adds	r0, #1
 8010db8:	d01e      	beq.n	8010df8 <_printf_common+0xa4>
 8010dba:	6823      	ldr	r3, [r4, #0]
 8010dbc:	68e5      	ldr	r5, [r4, #12]
 8010dbe:	6832      	ldr	r2, [r6, #0]
 8010dc0:	f003 0306 	and.w	r3, r3, #6
 8010dc4:	2b04      	cmp	r3, #4
 8010dc6:	bf08      	it	eq
 8010dc8:	1aad      	subeq	r5, r5, r2
 8010dca:	68a3      	ldr	r3, [r4, #8]
 8010dcc:	6922      	ldr	r2, [r4, #16]
 8010dce:	bf0c      	ite	eq
 8010dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010dd4:	2500      	movne	r5, #0
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	bfc4      	itt	gt
 8010dda:	1a9b      	subgt	r3, r3, r2
 8010ddc:	18ed      	addgt	r5, r5, r3
 8010dde:	2600      	movs	r6, #0
 8010de0:	341a      	adds	r4, #26
 8010de2:	42b5      	cmp	r5, r6
 8010de4:	d11a      	bne.n	8010e1c <_printf_common+0xc8>
 8010de6:	2000      	movs	r0, #0
 8010de8:	e008      	b.n	8010dfc <_printf_common+0xa8>
 8010dea:	2301      	movs	r3, #1
 8010dec:	4652      	mov	r2, sl
 8010dee:	4649      	mov	r1, r9
 8010df0:	4638      	mov	r0, r7
 8010df2:	47c0      	blx	r8
 8010df4:	3001      	adds	r0, #1
 8010df6:	d103      	bne.n	8010e00 <_printf_common+0xac>
 8010df8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e00:	3501      	adds	r5, #1
 8010e02:	e7c6      	b.n	8010d92 <_printf_common+0x3e>
 8010e04:	18e1      	adds	r1, r4, r3
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	2030      	movs	r0, #48	; 0x30
 8010e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e0e:	4422      	add	r2, r4
 8010e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e18:	3302      	adds	r3, #2
 8010e1a:	e7c7      	b.n	8010dac <_printf_common+0x58>
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	4622      	mov	r2, r4
 8010e20:	4649      	mov	r1, r9
 8010e22:	4638      	mov	r0, r7
 8010e24:	47c0      	blx	r8
 8010e26:	3001      	adds	r0, #1
 8010e28:	d0e6      	beq.n	8010df8 <_printf_common+0xa4>
 8010e2a:	3601      	adds	r6, #1
 8010e2c:	e7d9      	b.n	8010de2 <_printf_common+0x8e>
	...

08010e30 <_printf_i>:
 8010e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e34:	7e0f      	ldrb	r7, [r1, #24]
 8010e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e38:	2f78      	cmp	r7, #120	; 0x78
 8010e3a:	4691      	mov	r9, r2
 8010e3c:	4680      	mov	r8, r0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	469a      	mov	sl, r3
 8010e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e46:	d807      	bhi.n	8010e58 <_printf_i+0x28>
 8010e48:	2f62      	cmp	r7, #98	; 0x62
 8010e4a:	d80a      	bhi.n	8010e62 <_printf_i+0x32>
 8010e4c:	2f00      	cmp	r7, #0
 8010e4e:	f000 80d8 	beq.w	8011002 <_printf_i+0x1d2>
 8010e52:	2f58      	cmp	r7, #88	; 0x58
 8010e54:	f000 80a3 	beq.w	8010f9e <_printf_i+0x16e>
 8010e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e60:	e03a      	b.n	8010ed8 <_printf_i+0xa8>
 8010e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e66:	2b15      	cmp	r3, #21
 8010e68:	d8f6      	bhi.n	8010e58 <_printf_i+0x28>
 8010e6a:	a101      	add	r1, pc, #4	; (adr r1, 8010e70 <_printf_i+0x40>)
 8010e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e70:	08010ec9 	.word	0x08010ec9
 8010e74:	08010edd 	.word	0x08010edd
 8010e78:	08010e59 	.word	0x08010e59
 8010e7c:	08010e59 	.word	0x08010e59
 8010e80:	08010e59 	.word	0x08010e59
 8010e84:	08010e59 	.word	0x08010e59
 8010e88:	08010edd 	.word	0x08010edd
 8010e8c:	08010e59 	.word	0x08010e59
 8010e90:	08010e59 	.word	0x08010e59
 8010e94:	08010e59 	.word	0x08010e59
 8010e98:	08010e59 	.word	0x08010e59
 8010e9c:	08010fe9 	.word	0x08010fe9
 8010ea0:	08010f0d 	.word	0x08010f0d
 8010ea4:	08010fcb 	.word	0x08010fcb
 8010ea8:	08010e59 	.word	0x08010e59
 8010eac:	08010e59 	.word	0x08010e59
 8010eb0:	0801100b 	.word	0x0801100b
 8010eb4:	08010e59 	.word	0x08010e59
 8010eb8:	08010f0d 	.word	0x08010f0d
 8010ebc:	08010e59 	.word	0x08010e59
 8010ec0:	08010e59 	.word	0x08010e59
 8010ec4:	08010fd3 	.word	0x08010fd3
 8010ec8:	682b      	ldr	r3, [r5, #0]
 8010eca:	1d1a      	adds	r2, r3, #4
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	602a      	str	r2, [r5, #0]
 8010ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e0a3      	b.n	8011024 <_printf_i+0x1f4>
 8010edc:	6820      	ldr	r0, [r4, #0]
 8010ede:	6829      	ldr	r1, [r5, #0]
 8010ee0:	0606      	lsls	r6, r0, #24
 8010ee2:	f101 0304 	add.w	r3, r1, #4
 8010ee6:	d50a      	bpl.n	8010efe <_printf_i+0xce>
 8010ee8:	680e      	ldr	r6, [r1, #0]
 8010eea:	602b      	str	r3, [r5, #0]
 8010eec:	2e00      	cmp	r6, #0
 8010eee:	da03      	bge.n	8010ef8 <_printf_i+0xc8>
 8010ef0:	232d      	movs	r3, #45	; 0x2d
 8010ef2:	4276      	negs	r6, r6
 8010ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef8:	485e      	ldr	r0, [pc, #376]	; (8011074 <_printf_i+0x244>)
 8010efa:	230a      	movs	r3, #10
 8010efc:	e019      	b.n	8010f32 <_printf_i+0x102>
 8010efe:	680e      	ldr	r6, [r1, #0]
 8010f00:	602b      	str	r3, [r5, #0]
 8010f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010f06:	bf18      	it	ne
 8010f08:	b236      	sxthne	r6, r6
 8010f0a:	e7ef      	b.n	8010eec <_printf_i+0xbc>
 8010f0c:	682b      	ldr	r3, [r5, #0]
 8010f0e:	6820      	ldr	r0, [r4, #0]
 8010f10:	1d19      	adds	r1, r3, #4
 8010f12:	6029      	str	r1, [r5, #0]
 8010f14:	0601      	lsls	r1, r0, #24
 8010f16:	d501      	bpl.n	8010f1c <_printf_i+0xec>
 8010f18:	681e      	ldr	r6, [r3, #0]
 8010f1a:	e002      	b.n	8010f22 <_printf_i+0xf2>
 8010f1c:	0646      	lsls	r6, r0, #25
 8010f1e:	d5fb      	bpl.n	8010f18 <_printf_i+0xe8>
 8010f20:	881e      	ldrh	r6, [r3, #0]
 8010f22:	4854      	ldr	r0, [pc, #336]	; (8011074 <_printf_i+0x244>)
 8010f24:	2f6f      	cmp	r7, #111	; 0x6f
 8010f26:	bf0c      	ite	eq
 8010f28:	2308      	moveq	r3, #8
 8010f2a:	230a      	movne	r3, #10
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f32:	6865      	ldr	r5, [r4, #4]
 8010f34:	60a5      	str	r5, [r4, #8]
 8010f36:	2d00      	cmp	r5, #0
 8010f38:	bfa2      	ittt	ge
 8010f3a:	6821      	ldrge	r1, [r4, #0]
 8010f3c:	f021 0104 	bicge.w	r1, r1, #4
 8010f40:	6021      	strge	r1, [r4, #0]
 8010f42:	b90e      	cbnz	r6, 8010f48 <_printf_i+0x118>
 8010f44:	2d00      	cmp	r5, #0
 8010f46:	d04d      	beq.n	8010fe4 <_printf_i+0x1b4>
 8010f48:	4615      	mov	r5, r2
 8010f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8010f52:	5dc7      	ldrb	r7, [r0, r7]
 8010f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f58:	4637      	mov	r7, r6
 8010f5a:	42bb      	cmp	r3, r7
 8010f5c:	460e      	mov	r6, r1
 8010f5e:	d9f4      	bls.n	8010f4a <_printf_i+0x11a>
 8010f60:	2b08      	cmp	r3, #8
 8010f62:	d10b      	bne.n	8010f7c <_printf_i+0x14c>
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	07de      	lsls	r6, r3, #31
 8010f68:	d508      	bpl.n	8010f7c <_printf_i+0x14c>
 8010f6a:	6923      	ldr	r3, [r4, #16]
 8010f6c:	6861      	ldr	r1, [r4, #4]
 8010f6e:	4299      	cmp	r1, r3
 8010f70:	bfde      	ittt	le
 8010f72:	2330      	movle	r3, #48	; 0x30
 8010f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f7c:	1b52      	subs	r2, r2, r5
 8010f7e:	6122      	str	r2, [r4, #16]
 8010f80:	f8cd a000 	str.w	sl, [sp]
 8010f84:	464b      	mov	r3, r9
 8010f86:	aa03      	add	r2, sp, #12
 8010f88:	4621      	mov	r1, r4
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	f7ff fee2 	bl	8010d54 <_printf_common>
 8010f90:	3001      	adds	r0, #1
 8010f92:	d14c      	bne.n	801102e <_printf_i+0x1fe>
 8010f94:	f04f 30ff 	mov.w	r0, #4294967295
 8010f98:	b004      	add	sp, #16
 8010f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f9e:	4835      	ldr	r0, [pc, #212]	; (8011074 <_printf_i+0x244>)
 8010fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010fa4:	6829      	ldr	r1, [r5, #0]
 8010fa6:	6823      	ldr	r3, [r4, #0]
 8010fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010fac:	6029      	str	r1, [r5, #0]
 8010fae:	061d      	lsls	r5, r3, #24
 8010fb0:	d514      	bpl.n	8010fdc <_printf_i+0x1ac>
 8010fb2:	07df      	lsls	r7, r3, #31
 8010fb4:	bf44      	itt	mi
 8010fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8010fba:	6023      	strmi	r3, [r4, #0]
 8010fbc:	b91e      	cbnz	r6, 8010fc6 <_printf_i+0x196>
 8010fbe:	6823      	ldr	r3, [r4, #0]
 8010fc0:	f023 0320 	bic.w	r3, r3, #32
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	2310      	movs	r3, #16
 8010fc8:	e7b0      	b.n	8010f2c <_printf_i+0xfc>
 8010fca:	6823      	ldr	r3, [r4, #0]
 8010fcc:	f043 0320 	orr.w	r3, r3, #32
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	2378      	movs	r3, #120	; 0x78
 8010fd4:	4828      	ldr	r0, [pc, #160]	; (8011078 <_printf_i+0x248>)
 8010fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010fda:	e7e3      	b.n	8010fa4 <_printf_i+0x174>
 8010fdc:	0659      	lsls	r1, r3, #25
 8010fde:	bf48      	it	mi
 8010fe0:	b2b6      	uxthmi	r6, r6
 8010fe2:	e7e6      	b.n	8010fb2 <_printf_i+0x182>
 8010fe4:	4615      	mov	r5, r2
 8010fe6:	e7bb      	b.n	8010f60 <_printf_i+0x130>
 8010fe8:	682b      	ldr	r3, [r5, #0]
 8010fea:	6826      	ldr	r6, [r4, #0]
 8010fec:	6961      	ldr	r1, [r4, #20]
 8010fee:	1d18      	adds	r0, r3, #4
 8010ff0:	6028      	str	r0, [r5, #0]
 8010ff2:	0635      	lsls	r5, r6, #24
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	d501      	bpl.n	8010ffc <_printf_i+0x1cc>
 8010ff8:	6019      	str	r1, [r3, #0]
 8010ffa:	e002      	b.n	8011002 <_printf_i+0x1d2>
 8010ffc:	0670      	lsls	r0, r6, #25
 8010ffe:	d5fb      	bpl.n	8010ff8 <_printf_i+0x1c8>
 8011000:	8019      	strh	r1, [r3, #0]
 8011002:	2300      	movs	r3, #0
 8011004:	6123      	str	r3, [r4, #16]
 8011006:	4615      	mov	r5, r2
 8011008:	e7ba      	b.n	8010f80 <_printf_i+0x150>
 801100a:	682b      	ldr	r3, [r5, #0]
 801100c:	1d1a      	adds	r2, r3, #4
 801100e:	602a      	str	r2, [r5, #0]
 8011010:	681d      	ldr	r5, [r3, #0]
 8011012:	6862      	ldr	r2, [r4, #4]
 8011014:	2100      	movs	r1, #0
 8011016:	4628      	mov	r0, r5
 8011018:	f7ef f8fa 	bl	8000210 <memchr>
 801101c:	b108      	cbz	r0, 8011022 <_printf_i+0x1f2>
 801101e:	1b40      	subs	r0, r0, r5
 8011020:	6060      	str	r0, [r4, #4]
 8011022:	6863      	ldr	r3, [r4, #4]
 8011024:	6123      	str	r3, [r4, #16]
 8011026:	2300      	movs	r3, #0
 8011028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801102c:	e7a8      	b.n	8010f80 <_printf_i+0x150>
 801102e:	6923      	ldr	r3, [r4, #16]
 8011030:	462a      	mov	r2, r5
 8011032:	4649      	mov	r1, r9
 8011034:	4640      	mov	r0, r8
 8011036:	47d0      	blx	sl
 8011038:	3001      	adds	r0, #1
 801103a:	d0ab      	beq.n	8010f94 <_printf_i+0x164>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	079b      	lsls	r3, r3, #30
 8011040:	d413      	bmi.n	801106a <_printf_i+0x23a>
 8011042:	68e0      	ldr	r0, [r4, #12]
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	4298      	cmp	r0, r3
 8011048:	bfb8      	it	lt
 801104a:	4618      	movlt	r0, r3
 801104c:	e7a4      	b.n	8010f98 <_printf_i+0x168>
 801104e:	2301      	movs	r3, #1
 8011050:	4632      	mov	r2, r6
 8011052:	4649      	mov	r1, r9
 8011054:	4640      	mov	r0, r8
 8011056:	47d0      	blx	sl
 8011058:	3001      	adds	r0, #1
 801105a:	d09b      	beq.n	8010f94 <_printf_i+0x164>
 801105c:	3501      	adds	r5, #1
 801105e:	68e3      	ldr	r3, [r4, #12]
 8011060:	9903      	ldr	r1, [sp, #12]
 8011062:	1a5b      	subs	r3, r3, r1
 8011064:	42ab      	cmp	r3, r5
 8011066:	dcf2      	bgt.n	801104e <_printf_i+0x21e>
 8011068:	e7eb      	b.n	8011042 <_printf_i+0x212>
 801106a:	2500      	movs	r5, #0
 801106c:	f104 0619 	add.w	r6, r4, #25
 8011070:	e7f5      	b.n	801105e <_printf_i+0x22e>
 8011072:	bf00      	nop
 8011074:	0801449d 	.word	0x0801449d
 8011078:	080144ae 	.word	0x080144ae

0801107c <_putc_r>:
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	460d      	mov	r5, r1
 8011080:	4614      	mov	r4, r2
 8011082:	4606      	mov	r6, r0
 8011084:	b118      	cbz	r0, 801108e <_putc_r+0x12>
 8011086:	6983      	ldr	r3, [r0, #24]
 8011088:	b90b      	cbnz	r3, 801108e <_putc_r+0x12>
 801108a:	f7ff f9ad 	bl	80103e8 <__sinit>
 801108e:	4b1c      	ldr	r3, [pc, #112]	; (8011100 <_putc_r+0x84>)
 8011090:	429c      	cmp	r4, r3
 8011092:	d124      	bne.n	80110de <_putc_r+0x62>
 8011094:	6874      	ldr	r4, [r6, #4]
 8011096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011098:	07d8      	lsls	r0, r3, #31
 801109a:	d405      	bmi.n	80110a8 <_putc_r+0x2c>
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	0599      	lsls	r1, r3, #22
 80110a0:	d402      	bmi.n	80110a8 <_putc_r+0x2c>
 80110a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110a4:	f7ff fa50 	bl	8010548 <__retarget_lock_acquire_recursive>
 80110a8:	68a3      	ldr	r3, [r4, #8]
 80110aa:	3b01      	subs	r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	60a3      	str	r3, [r4, #8]
 80110b0:	da05      	bge.n	80110be <_putc_r+0x42>
 80110b2:	69a2      	ldr	r2, [r4, #24]
 80110b4:	4293      	cmp	r3, r2
 80110b6:	db1c      	blt.n	80110f2 <_putc_r+0x76>
 80110b8:	b2eb      	uxtb	r3, r5
 80110ba:	2b0a      	cmp	r3, #10
 80110bc:	d019      	beq.n	80110f2 <_putc_r+0x76>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	1c5a      	adds	r2, r3, #1
 80110c2:	6022      	str	r2, [r4, #0]
 80110c4:	701d      	strb	r5, [r3, #0]
 80110c6:	b2ed      	uxtb	r5, r5
 80110c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110ca:	07da      	lsls	r2, r3, #31
 80110cc:	d405      	bmi.n	80110da <_putc_r+0x5e>
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	059b      	lsls	r3, r3, #22
 80110d2:	d402      	bmi.n	80110da <_putc_r+0x5e>
 80110d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110d6:	f7ff fa38 	bl	801054a <__retarget_lock_release_recursive>
 80110da:	4628      	mov	r0, r5
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
 80110de:	4b09      	ldr	r3, [pc, #36]	; (8011104 <_putc_r+0x88>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	d101      	bne.n	80110e8 <_putc_r+0x6c>
 80110e4:	68b4      	ldr	r4, [r6, #8]
 80110e6:	e7d6      	b.n	8011096 <_putc_r+0x1a>
 80110e8:	4b07      	ldr	r3, [pc, #28]	; (8011108 <_putc_r+0x8c>)
 80110ea:	429c      	cmp	r4, r3
 80110ec:	bf08      	it	eq
 80110ee:	68f4      	ldreq	r4, [r6, #12]
 80110f0:	e7d1      	b.n	8011096 <_putc_r+0x1a>
 80110f2:	4629      	mov	r1, r5
 80110f4:	4622      	mov	r2, r4
 80110f6:	4630      	mov	r0, r6
 80110f8:	f7fe ff7e 	bl	800fff8 <__swbuf_r>
 80110fc:	4605      	mov	r5, r0
 80110fe:	e7e3      	b.n	80110c8 <_putc_r+0x4c>
 8011100:	0801444c 	.word	0x0801444c
 8011104:	0801446c 	.word	0x0801446c
 8011108:	0801442c 	.word	0x0801442c

0801110c <_sbrk_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_sbrk_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7ef fdba 	bl	8000c90 <_sbrk>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_sbrk_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_sbrk_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	20008be4 	.word	0x20008be4

0801112c <__sread>:
 801112c:	b510      	push	{r4, lr}
 801112e:	460c      	mov	r4, r1
 8011130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011134:	f000 f8d8 	bl	80112e8 <_read_r>
 8011138:	2800      	cmp	r0, #0
 801113a:	bfab      	itete	ge
 801113c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801113e:	89a3      	ldrhlt	r3, [r4, #12]
 8011140:	181b      	addge	r3, r3, r0
 8011142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011146:	bfac      	ite	ge
 8011148:	6563      	strge	r3, [r4, #84]	; 0x54
 801114a:	81a3      	strhlt	r3, [r4, #12]
 801114c:	bd10      	pop	{r4, pc}

0801114e <__swrite>:
 801114e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011152:	461f      	mov	r7, r3
 8011154:	898b      	ldrh	r3, [r1, #12]
 8011156:	05db      	lsls	r3, r3, #23
 8011158:	4605      	mov	r5, r0
 801115a:	460c      	mov	r4, r1
 801115c:	4616      	mov	r6, r2
 801115e:	d505      	bpl.n	801116c <__swrite+0x1e>
 8011160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011164:	2302      	movs	r3, #2
 8011166:	2200      	movs	r2, #0
 8011168:	f000 f870 	bl	801124c <_lseek_r>
 801116c:	89a3      	ldrh	r3, [r4, #12]
 801116e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011176:	81a3      	strh	r3, [r4, #12]
 8011178:	4632      	mov	r2, r6
 801117a:	463b      	mov	r3, r7
 801117c:	4628      	mov	r0, r5
 801117e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011182:	f000 b817 	b.w	80111b4 <_write_r>

08011186 <__sseek>:
 8011186:	b510      	push	{r4, lr}
 8011188:	460c      	mov	r4, r1
 801118a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801118e:	f000 f85d 	bl	801124c <_lseek_r>
 8011192:	1c43      	adds	r3, r0, #1
 8011194:	89a3      	ldrh	r3, [r4, #12]
 8011196:	bf15      	itete	ne
 8011198:	6560      	strne	r0, [r4, #84]	; 0x54
 801119a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801119e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80111a2:	81a3      	strheq	r3, [r4, #12]
 80111a4:	bf18      	it	ne
 80111a6:	81a3      	strhne	r3, [r4, #12]
 80111a8:	bd10      	pop	{r4, pc}

080111aa <__sclose>:
 80111aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111ae:	f000 b81b 	b.w	80111e8 <_close_r>
	...

080111b4 <_write_r>:
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	4d07      	ldr	r5, [pc, #28]	; (80111d4 <_write_r+0x20>)
 80111b8:	4604      	mov	r4, r0
 80111ba:	4608      	mov	r0, r1
 80111bc:	4611      	mov	r1, r2
 80111be:	2200      	movs	r2, #0
 80111c0:	602a      	str	r2, [r5, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	f7ef fd13 	bl	8000bee <_write>
 80111c8:	1c43      	adds	r3, r0, #1
 80111ca:	d102      	bne.n	80111d2 <_write_r+0x1e>
 80111cc:	682b      	ldr	r3, [r5, #0]
 80111ce:	b103      	cbz	r3, 80111d2 <_write_r+0x1e>
 80111d0:	6023      	str	r3, [r4, #0]
 80111d2:	bd38      	pop	{r3, r4, r5, pc}
 80111d4:	20008be4 	.word	0x20008be4

080111d8 <abort>:
 80111d8:	b508      	push	{r3, lr}
 80111da:	2006      	movs	r0, #6
 80111dc:	f000 f8be 	bl	801135c <raise>
 80111e0:	2001      	movs	r0, #1
 80111e2:	f7ef fcdd 	bl	8000ba0 <_exit>
	...

080111e8 <_close_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d06      	ldr	r5, [pc, #24]	; (8011204 <_close_r+0x1c>)
 80111ec:	2300      	movs	r3, #0
 80111ee:	4604      	mov	r4, r0
 80111f0:	4608      	mov	r0, r1
 80111f2:	602b      	str	r3, [r5, #0]
 80111f4:	f7ef fd17 	bl	8000c26 <_close>
 80111f8:	1c43      	adds	r3, r0, #1
 80111fa:	d102      	bne.n	8011202 <_close_r+0x1a>
 80111fc:	682b      	ldr	r3, [r5, #0]
 80111fe:	b103      	cbz	r3, 8011202 <_close_r+0x1a>
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	20008be4 	.word	0x20008be4

08011208 <_fstat_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d07      	ldr	r5, [pc, #28]	; (8011228 <_fstat_r+0x20>)
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	4608      	mov	r0, r1
 8011212:	4611      	mov	r1, r2
 8011214:	602b      	str	r3, [r5, #0]
 8011216:	f7ef fd12 	bl	8000c3e <_fstat>
 801121a:	1c43      	adds	r3, r0, #1
 801121c:	d102      	bne.n	8011224 <_fstat_r+0x1c>
 801121e:	682b      	ldr	r3, [r5, #0]
 8011220:	b103      	cbz	r3, 8011224 <_fstat_r+0x1c>
 8011222:	6023      	str	r3, [r4, #0]
 8011224:	bd38      	pop	{r3, r4, r5, pc}
 8011226:	bf00      	nop
 8011228:	20008be4 	.word	0x20008be4

0801122c <_isatty_r>:
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	4d06      	ldr	r5, [pc, #24]	; (8011248 <_isatty_r+0x1c>)
 8011230:	2300      	movs	r3, #0
 8011232:	4604      	mov	r4, r0
 8011234:	4608      	mov	r0, r1
 8011236:	602b      	str	r3, [r5, #0]
 8011238:	f7ef fd11 	bl	8000c5e <_isatty>
 801123c:	1c43      	adds	r3, r0, #1
 801123e:	d102      	bne.n	8011246 <_isatty_r+0x1a>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	b103      	cbz	r3, 8011246 <_isatty_r+0x1a>
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	20008be4 	.word	0x20008be4

0801124c <_lseek_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d07      	ldr	r5, [pc, #28]	; (801126c <_lseek_r+0x20>)
 8011250:	4604      	mov	r4, r0
 8011252:	4608      	mov	r0, r1
 8011254:	4611      	mov	r1, r2
 8011256:	2200      	movs	r2, #0
 8011258:	602a      	str	r2, [r5, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	f7ef fd0a 	bl	8000c74 <_lseek>
 8011260:	1c43      	adds	r3, r0, #1
 8011262:	d102      	bne.n	801126a <_lseek_r+0x1e>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	b103      	cbz	r3, 801126a <_lseek_r+0x1e>
 8011268:	6023      	str	r3, [r4, #0]
 801126a:	bd38      	pop	{r3, r4, r5, pc}
 801126c:	20008be4 	.word	0x20008be4

08011270 <__malloc_lock>:
 8011270:	4801      	ldr	r0, [pc, #4]	; (8011278 <__malloc_lock+0x8>)
 8011272:	f7ff b969 	b.w	8010548 <__retarget_lock_acquire_recursive>
 8011276:	bf00      	nop
 8011278:	20008be8 	.word	0x20008be8

0801127c <__malloc_unlock>:
 801127c:	4801      	ldr	r0, [pc, #4]	; (8011284 <__malloc_unlock+0x8>)
 801127e:	f7ff b964 	b.w	801054a <__retarget_lock_release_recursive>
 8011282:	bf00      	nop
 8011284:	20008be8 	.word	0x20008be8

08011288 <_realloc_r>:
 8011288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128c:	4680      	mov	r8, r0
 801128e:	4614      	mov	r4, r2
 8011290:	460e      	mov	r6, r1
 8011292:	b921      	cbnz	r1, 801129e <_realloc_r+0x16>
 8011294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011298:	4611      	mov	r1, r2
 801129a:	f7ff ba31 	b.w	8010700 <_malloc_r>
 801129e:	b92a      	cbnz	r2, 80112ac <_realloc_r+0x24>
 80112a0:	f7ff f9c2 	bl	8010628 <_free_r>
 80112a4:	4625      	mov	r5, r4
 80112a6:	4628      	mov	r0, r5
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ac:	f000 f872 	bl	8011394 <_malloc_usable_size_r>
 80112b0:	4284      	cmp	r4, r0
 80112b2:	4607      	mov	r7, r0
 80112b4:	d802      	bhi.n	80112bc <_realloc_r+0x34>
 80112b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112ba:	d812      	bhi.n	80112e2 <_realloc_r+0x5a>
 80112bc:	4621      	mov	r1, r4
 80112be:	4640      	mov	r0, r8
 80112c0:	f7ff fa1e 	bl	8010700 <_malloc_r>
 80112c4:	4605      	mov	r5, r0
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d0ed      	beq.n	80112a6 <_realloc_r+0x1e>
 80112ca:	42bc      	cmp	r4, r7
 80112cc:	4622      	mov	r2, r4
 80112ce:	4631      	mov	r1, r6
 80112d0:	bf28      	it	cs
 80112d2:	463a      	movcs	r2, r7
 80112d4:	f7fe fd4a 	bl	800fd6c <memcpy>
 80112d8:	4631      	mov	r1, r6
 80112da:	4640      	mov	r0, r8
 80112dc:	f7ff f9a4 	bl	8010628 <_free_r>
 80112e0:	e7e1      	b.n	80112a6 <_realloc_r+0x1e>
 80112e2:	4635      	mov	r5, r6
 80112e4:	e7df      	b.n	80112a6 <_realloc_r+0x1e>
	...

080112e8 <_read_r>:
 80112e8:	b538      	push	{r3, r4, r5, lr}
 80112ea:	4d07      	ldr	r5, [pc, #28]	; (8011308 <_read_r+0x20>)
 80112ec:	4604      	mov	r4, r0
 80112ee:	4608      	mov	r0, r1
 80112f0:	4611      	mov	r1, r2
 80112f2:	2200      	movs	r2, #0
 80112f4:	602a      	str	r2, [r5, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	f7ef fc5c 	bl	8000bb4 <_read>
 80112fc:	1c43      	adds	r3, r0, #1
 80112fe:	d102      	bne.n	8011306 <_read_r+0x1e>
 8011300:	682b      	ldr	r3, [r5, #0]
 8011302:	b103      	cbz	r3, 8011306 <_read_r+0x1e>
 8011304:	6023      	str	r3, [r4, #0]
 8011306:	bd38      	pop	{r3, r4, r5, pc}
 8011308:	20008be4 	.word	0x20008be4

0801130c <_raise_r>:
 801130c:	291f      	cmp	r1, #31
 801130e:	b538      	push	{r3, r4, r5, lr}
 8011310:	4604      	mov	r4, r0
 8011312:	460d      	mov	r5, r1
 8011314:	d904      	bls.n	8011320 <_raise_r+0x14>
 8011316:	2316      	movs	r3, #22
 8011318:	6003      	str	r3, [r0, #0]
 801131a:	f04f 30ff 	mov.w	r0, #4294967295
 801131e:	bd38      	pop	{r3, r4, r5, pc}
 8011320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011322:	b112      	cbz	r2, 801132a <_raise_r+0x1e>
 8011324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011328:	b94b      	cbnz	r3, 801133e <_raise_r+0x32>
 801132a:	4620      	mov	r0, r4
 801132c:	f000 f830 	bl	8011390 <_getpid_r>
 8011330:	462a      	mov	r2, r5
 8011332:	4601      	mov	r1, r0
 8011334:	4620      	mov	r0, r4
 8011336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801133a:	f000 b817 	b.w	801136c <_kill_r>
 801133e:	2b01      	cmp	r3, #1
 8011340:	d00a      	beq.n	8011358 <_raise_r+0x4c>
 8011342:	1c59      	adds	r1, r3, #1
 8011344:	d103      	bne.n	801134e <_raise_r+0x42>
 8011346:	2316      	movs	r3, #22
 8011348:	6003      	str	r3, [r0, #0]
 801134a:	2001      	movs	r0, #1
 801134c:	e7e7      	b.n	801131e <_raise_r+0x12>
 801134e:	2400      	movs	r4, #0
 8011350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011354:	4628      	mov	r0, r5
 8011356:	4798      	blx	r3
 8011358:	2000      	movs	r0, #0
 801135a:	e7e0      	b.n	801131e <_raise_r+0x12>

0801135c <raise>:
 801135c:	4b02      	ldr	r3, [pc, #8]	; (8011368 <raise+0xc>)
 801135e:	4601      	mov	r1, r0
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	f7ff bfd3 	b.w	801130c <_raise_r>
 8011366:	bf00      	nop
 8011368:	20000014 	.word	0x20000014

0801136c <_kill_r>:
 801136c:	b538      	push	{r3, r4, r5, lr}
 801136e:	4d07      	ldr	r5, [pc, #28]	; (801138c <_kill_r+0x20>)
 8011370:	2300      	movs	r3, #0
 8011372:	4604      	mov	r4, r0
 8011374:	4608      	mov	r0, r1
 8011376:	4611      	mov	r1, r2
 8011378:	602b      	str	r3, [r5, #0]
 801137a:	f7ef fbff 	bl	8000b7c <_kill>
 801137e:	1c43      	adds	r3, r0, #1
 8011380:	d102      	bne.n	8011388 <_kill_r+0x1c>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	b103      	cbz	r3, 8011388 <_kill_r+0x1c>
 8011386:	6023      	str	r3, [r4, #0]
 8011388:	bd38      	pop	{r3, r4, r5, pc}
 801138a:	bf00      	nop
 801138c:	20008be4 	.word	0x20008be4

08011390 <_getpid_r>:
 8011390:	f7ef bbec 	b.w	8000b6c <_getpid>

08011394 <_malloc_usable_size_r>:
 8011394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011398:	1f18      	subs	r0, r3, #4
 801139a:	2b00      	cmp	r3, #0
 801139c:	bfbc      	itt	lt
 801139e:	580b      	ldrlt	r3, [r1, r0]
 80113a0:	18c0      	addlt	r0, r0, r3
 80113a2:	4770      	bx	lr

080113a4 <_init>:
 80113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a6:	bf00      	nop
 80113a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113aa:	bc08      	pop	{r3}
 80113ac:	469e      	mov	lr, r3
 80113ae:	4770      	bx	lr

080113b0 <_fini>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	bf00      	nop
 80113b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113b6:	bc08      	pop	{r3}
 80113b8:	469e      	mov	lr, r3
 80113ba:	4770      	bx	lr
