
005_TCPClient_Raw_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003948  08010fe4  08010fe4  00020fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801492c  0801492c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801492c  0801492c  0002492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014934  08014934  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014934  08014934  00024934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014938  08014938  00024938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801493c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ab0  20000078  080149b4  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b28  080149b4  00038b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee6e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a2  00000000  00000000  0004ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000540b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00055708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a96  00000000  00000000  00056c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025edb  00000000  00000000  0008872e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104c4a  00000000  00000000  000ae609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b3253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  001b32a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010fcc 	.word	0x08010fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08010fcc 	.word	0x08010fcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fe7a 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f838 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8f6 	bl	80007c0 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005d4:	f003 fd1c 	bl	8004010 <MX_LWIP_Init>
  MX_TIM1_Init();
 80005d8:	f000 f89e 	bl	8000718 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  tcp_client_init();
 80005dc:	f000 fbc2 	bl	8000d64 <tcp_client_init>
  HAL_TIM_Base_Start_IT(&htim1);
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <main+0x68>)
 80005e2:	f003 f8a5 	bl	8003730 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <main+0x6c>)
 80005e8:	f004 f902 	bl	80047f0 <ethernetif_input>

	sys_check_timeouts();
 80005ec:	f00c fbf0 	bl	800cdd0 <sys_check_timeouts>

	// UDP Client needs to have a linksetup if cable is disconnected at power on
	// if user disconnects cable after power it works fine
	// but it doesnt work if cable is disconnected at power on
	// This function is used to set the link and indicate link down, it glows red LED when is link down
	ethernetif_set_link(&gnetif);
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x6c>)
 80005f2:	f004 f953 	bl	800489c <ethernetif_set_link>

	if (HAL_GetTick() - LEDBlinkTimer >= 1000)
 80005f6:	f000 febd 	bl	8001374 <HAL_GetTick>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0x70>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000606:	d3ee      	bcc.n	80005e6 <main+0x22>
	{
	  printf("Hello from UART\r\n");
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <main+0x74>)
 800060a:	f00f fa67 	bl	800fadc <puts>
	  LEDBlinkTimer = HAL_GetTick();
 800060e:	f000 feb1 	bl	8001374 <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <main+0x70>)
 8000616:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000618:	2101      	movs	r1, #1
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x78>)
 800061c:	f002 fb23 	bl	8002c66 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x78>)
 8000626:	f002 fb05 	bl	8002c34 <HAL_GPIO_WritePin>
	ethernetif_input(&gnetif);
 800062a:	e7dc      	b.n	80005e6 <main+0x22>
 800062c:	20000094 	.word	0x20000094
 8000630:	20000100 	.word	0x20000100
 8000634:	200000e0 	.word	0x200000e0
 8000638:	08010fe4 	.word	0x08010fe4
 800063c:	40020400 	.word	0x40020400

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00f f9a0 	bl	800f994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a24      	ldr	r2, [pc, #144]	; (8000714 <SystemClock_Config+0xd4>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006ac:	23d8      	movs	r3, #216	; 0xd8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fb3d 	bl	8002d3c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f94e 	bl	8000968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f002 fae6 	bl	8002c9c <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d6:	f000 f947 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2107      	movs	r1, #7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fdc3 	bl	8003284 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000704:	f000 f930 	bl	8000968 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000738:	4a20      	ldr	r2, [pc, #128]	; (80007bc <MX_TIM1_Init+0xa4>)
 800073a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_TIM1_Init+0xa0>)
 800073e:	f245 4260 	movw	r2, #21600	; 0x5460
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM1_Init+0xa0>)
 800074c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_TIM1_Init+0xa0>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000766:	f002 ff8b 	bl	8003680 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 f8fa 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_TIM1_Init+0xa0>)
 8000782:	f003 f96d 	bl	8003a60 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800078c:	f000 f8ec 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM1_Init+0xa0>)
 80007a2:	f003 fb89 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007ac:	f000 f8dc 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000094 	.word	0x20000094
 80007bc:	40010000 	.word	0x40010000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <MX_GPIO_Init+0x190>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a5d      	ldr	r2, [pc, #372]	; (8000950 <MX_GPIO_Init+0x190>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <MX_GPIO_Init+0x190>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b58      	ldr	r3, [pc, #352]	; (8000950 <MX_GPIO_Init+0x190>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a57      	ldr	r2, [pc, #348]	; (8000950 <MX_GPIO_Init+0x190>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b55      	ldr	r3, [pc, #340]	; (8000950 <MX_GPIO_Init+0x190>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b52      	ldr	r3, [pc, #328]	; (8000950 <MX_GPIO_Init+0x190>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a51      	ldr	r2, [pc, #324]	; (8000950 <MX_GPIO_Init+0x190>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <MX_GPIO_Init+0x190>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_GPIO_Init+0x190>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a4b      	ldr	r2, [pc, #300]	; (8000950 <MX_GPIO_Init+0x190>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <MX_GPIO_Init+0x190>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_GPIO_Init+0x190>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a45      	ldr	r2, [pc, #276]	; (8000950 <MX_GPIO_Init+0x190>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <MX_GPIO_Init+0x190>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_GPIO_Init+0x190>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3f      	ldr	r2, [pc, #252]	; (8000950 <MX_GPIO_Init+0x190>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_GPIO_Init+0x190>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f244 0181 	movw	r1, #16513	; 0x4081
 800086c:	4839      	ldr	r0, [pc, #228]	; (8000954 <MX_GPIO_Init+0x194>)
 800086e:	f002 f9e1 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <MX_GPIO_Init+0x198>)
 8000878:	f002 f9dc 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4832      	ldr	r0, [pc, #200]	; (800095c <MX_GPIO_Init+0x19c>)
 8000894:	f002 f822 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000898:	f244 0381 	movw	r3, #16513	; 0x4081
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <MX_GPIO_Init+0x194>)
 80008b2:	f002 f813 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008c8:	2307      	movs	r3, #7
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <MX_GPIO_Init+0x1a0>)
 80008d4:	f002 f802 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0x198>)
 80008f0:	f001 fff4 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0x198>)
 8000908:	f001 ffe8 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800090c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_GPIO_Init+0x1a4>)
 800092a:	f001 ffd7 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_GPIO_Init+0x1a4>)
 8000944:	f001 ffca 	bl	80028dc <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40020000 	.word	0x40020000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_TIM_Base_MspInit+0x44>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d113      	bne.n	80009f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_Base_MspInit+0x48>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_TIM_Base_MspInit+0x48>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_TIM_Base_MspInit+0x48>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2019      	movs	r0, #25
 80009ec:	f000 fdcd 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 fde6 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010000 	.word	0x40010000
 8000a04:	40023800 	.word	0x40023800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 fc7a 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a62:	f002 fedd 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000094 	.word	0x20000094

08000a70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <ETH_IRQHandler+0x10>)
 8000a76:	f001 f999 	bl	8001dac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200031ec 	.word	0x200031ec

08000a84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d013      	beq.n	8000ac4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000aa4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00b      	beq.n	8000ac4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000aac:	e000      	b.n	8000ab0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000aae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f9      	beq.n	8000aae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000aba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
	return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_kill>:

int _kill(int pid, int sig)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <_kill+0x20>)
 8000af0:	2216      	movs	r2, #22
 8000af2:	601a      	str	r2, [r3, #0]
	return -1;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20008b18 	.word	0x20008b18

08000b08 <_exit>:

void _exit (int status)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ffe5 	bl	8000ae4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b1a:	e7fe      	b.n	8000b1a <_exit+0x12>

08000b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
	}

return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff87 	bl	8000a84 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
	}
	return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d205      	bcs.n	8000c34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <_sbrk+0x6c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	20050000 	.word	0x20050000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200000e4 	.word	0x200000e4
 8000c60:	20008b28 	.word	0x20008b28
 8000c64:	20008b18 	.word	0x20008b18

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <HAL_TIM_PeriodElapsedCallback>:
void *esPtr = 0;
struct tcp_pcb *pcbTx = 0;
struct tcp_pcb *pcbRx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b09f      	sub	sp, #124	; 0x7c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	492a      	ldr	r1, [pc, #168]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00e ff96 	bl	800fbd0 <siprintf>
 8000ca4:	6778      	str	r0, [r7, #116]	; 0x74

	if (counter !=0)
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d046      	beq.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if((esTx->state != ES_CONNECTED) && (esTx->state != ES_RECEIVING))
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d01d      	beq.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d018      	beq.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			tcp_client_connection_close(pcbRx, (struct tcp_client_struct *) esPtr);
 8000cc2:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f9ba 	bl	8001046 <tcp_client_connection_close>
			pcbRx = tcp_new();
 8000cd2:	f007 f8bf 	bl	8007e54 <tcp_new>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cda:	6013      	str	r3, [r2, #0]
			/* 2. Connect to the server */
			ip_addr_t destIPADDR;
			IP_ADDR4(&destIPADDR, 192, 168, 29, 100);
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cde:	60fb      	str	r3, [r7, #12]
			//tcp_bind(tpcb, &destIPADDR, 24);//(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
			tcp_connect(pcbRx, &destIPADDR, 24, tcp_client_connected);
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cea:	2218      	movs	r2, #24
 8000cec:	f006 f8e0 	bl	8006eb0 <tcp_connect>
		{
 8000cf0:	bf00      	nop

			pbuf_free(esTx->p);
		}
	}

}
 8000cf2:	e023      	b.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0xb0>
			esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cfa:	6814      	ldr	r4, [r2, #0]
 8000cfc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000d00:	4619      	mov	r1, r3
 8000d02:	2036      	movs	r0, #54	; 0x36
 8000d04:	f004 febe 	bl	8005a84 <pbuf_alloc>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60a3      	str	r3, [r4, #8]
			pbuf_take(esTx->p, (char*)buf, len);
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d14:	b292      	uxth	r2, r2
 8000d16:	f107 0110 	add.w	r1, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f005 fbf2 	bl	8006504 <pbuf_take>
			tcp_client_send(pcbTx, esTx);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f93d 	bl	8000faa <tcp_client_send>
			pbuf_free(esTx->p);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 f988 	bl	800604c <pbuf_free>
}
 8000d3c:	bf00      	nop
 8000d3e:	377c      	adds	r7, #124	; 0x7c
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	08010ff8 	.word	0x08010ff8
 8000d4c:	200000ec 	.word	0x200000ec
 8000d50:	200000f8 	.word	0x200000f8
 8000d54:	200000f0 	.word	0x200000f0
 8000d58:	641da8c0 	.word	0x641da8c0
 8000d5c:	08000da5 	.word	0x08000da5
 8000d60:	200000f4 	.word	0x200000f4

08000d64 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
//		IP_ADDR4(&destIPADDR, 192, 168, 29, 100);
//		//tcp_bind(tpcb, &destIPADDR, 24);//(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
//		tcp_connect(tpcb, &destIPADDR, 24, tcp_client_connected);
//	}

	pcbRx = tcp_new();
 8000d6a:	f007 f873 	bl	8007e54 <tcp_new>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <tcp_client_init+0x34>)
 8000d72:	6013      	str	r3, [r2, #0]

	if(pcbRx != NULL)
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <tcp_client_init+0x34>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d008      	beq.n	8000d8e <tcp_client_init+0x2a>
	{
		/* 2. Connect to the server */
		ip_addr_t destIPADDR;
		IP_ADDR4(&destIPADDR, 192, 168, 29, 100);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <tcp_client_init+0x38>)
 8000d7e:	607b      	str	r3, [r7, #4]
		//tcp_bind(tpcb, &destIPADDR, 24);//(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
		tcp_connect(pcbRx, &destIPADDR, 24, tcp_client_connected);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <tcp_client_init+0x34>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <tcp_client_init+0x3c>)
 8000d88:	2218      	movs	r2, #24
 8000d8a:	f006 f891 	bl	8006eb0 <tcp_connect>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000f8 	.word	0x200000f8
 8000d9c:	641da8c0 	.word	0x641da8c0
 8000da0:	08000da5 	.word	0x08000da5

08000da4 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000db2:	200c      	movs	r0, #12
 8000db4:	f004 f91a 	bl	8004fec <mem_malloc>
 8000db8:	6138      	str	r0, [r7, #16]

  esPtr = es;
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <tcp_client_connected+0x84>)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	6013      	str	r3, [r2, #0]

  if (es != NULL)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d023      	beq.n	8000e0e <tcp_client_connected+0x6a>
  {
    es->state = ES_CONNECTED;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000dde:	6939      	ldr	r1, [r7, #16]
 8000de0:	68b8      	ldr	r0, [r7, #8]
 8000de2:	f007 f83f 	bl	8007e64 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <tcp_client_connected+0x88>)
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f007 f84d 	bl	8007e88 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	490f      	ldr	r1, [pc, #60]	; (8000e30 <tcp_client_connected+0x8c>)
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f007 f8ae 	bl	8007f54 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000df8:	490e      	ldr	r1, [pc, #56]	; (8000e34 <tcp_client_connected+0x90>)
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f007 f866 	bl	8007ecc <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	68b8      	ldr	r0, [r7, #8]
 8000e04:	f000 f946 	bl	8001094 <tcp_client_handle>

    ret_err = ERR_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75fb      	strb	r3, [r7, #23]
 8000e0c:	e005      	b.n	8000e1a <tcp_client_connected+0x76>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000e0e:	6939      	ldr	r1, [r7, #16]
 8000e10:	68b8      	ldr	r0, [r7, #8]
 8000e12:	f000 f918 	bl	8001046 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	08000e39 	.word	0x08000e39
 8000e30:	08000f29 	.word	0x08000f29
 8000e34:	08000f71 	.word	0x08000f71

08000e38 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <tcp_client_recv+0x20>
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <tcp_client_recv+0xe4>)
 8000e4e:	22fe      	movs	r2, #254	; 0xfe
 8000e50:	4933      	ldr	r1, [pc, #204]	; (8000f20 <tcp_client_recv+0xe8>)
 8000e52:	4834      	ldr	r0, [pc, #208]	; (8000f24 <tcp_client_recv+0xec>)
 8000e54:	f00e fda6 	bl	800f9a4 <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	2203      	movs	r2, #3
 8000e66:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000e70:	6939      	ldr	r1, [r7, #16]
 8000e72:	68b8      	ldr	r0, [r7, #8]
 8000e74:	f000 f8e7 	bl	8001046 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e047      	b.n	8000f0e <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f005 f8da 	bl	800604c <pbuf_free>
    }
    ret_err = err;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e037      	b.n	8000f0e <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d112      	bne.n	8000ecc <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	891b      	ldrh	r3, [r3, #8]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	f005 ff54 	bl	8006d60 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	68b8      	ldr	r0, [r7, #8]
 8000ebc:	f000 f8ea 	bl	8001094 <tcp_client_handle>

    pbuf_free(p);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f005 f8c3 	bl	800604c <pbuf_free>

    ret_err = ERR_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]
 8000eca:	e020      	b.n	8000f0e <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d10e      	bne.n	8000ef2 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	891b      	ldrh	r3, [r3, #8]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f005 ff40 	bl	8006d60 <tcp_recved>
    es->p = NULL;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f005 f8b0 	bl	800604c <pbuf_free>
    ret_err = ERR_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	75fb      	strb	r3, [r7, #23]
 8000ef0:	e00d      	b.n	8000f0e <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	f005 ff31 	bl	8006d60 <tcp_recved>
    es->p = NULL;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f005 f8a1 	bl	800604c <pbuf_free>
    ret_err = ERR_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08011018 	.word	0x08011018
 8000f20:	08011034 	.word	0x08011034
 8000f24:	08011040 	.word	0x08011040

08000f28 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d103      	bne.n	8000f54 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f000 f879 	bl	8001046 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e004      	b.n	8000f64 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000f5a:	6838      	ldr	r0, [r7, #0]
 8000f5c:	f005 fe9a 	bl	8006c94 <tcp_abort>
    ret_err = ERR_ABRT;
 8000f60:	23f3      	movs	r3, #243	; 0xf3
 8000f62:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d103      	bne.n	8000fa0 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000f98:	6979      	ldr	r1, [r7, #20]
 8000f9a:	68b8      	ldr	r0, [r7, #8]
 8000f9c:	f000 f853 	bl	8001046 <tcp_client_connection_close>
  }
  return ERR_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000fb8:	e031      	b.n	800101e <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	895a      	ldrh	r2, [r3, #10]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f009 ffaa 	bl	800af24 <tcp_write>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d118      	bne.n	800100e <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	895b      	ldrh	r3, [r3, #10]
 8000fe0:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 f8c8 	bl	800618c <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000ffc:	6938      	ldr	r0, [r7, #16]
 8000ffe:	f005 f825 	bl	800604c <pbuf_free>
 8001002:	4603      	mov	r3, r0
 8001004:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f7      	beq.n	8000ffc <tcp_client_send+0x52>
 800100c:	e007      	b.n	800101e <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 800100e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001016:	d102      	bne.n	800101e <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10b      	bne.n	800103e <tcp_client_send+0x94>
         (es->p != NULL) &&
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	895a      	ldrh	r2, [r3, #10]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800103a:	429a      	cmp	r2, r3
 800103c:	d9bd      	bls.n	8000fba <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 ff06 	bl	8007e64 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f006 ff36 	bl	8007ecc <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f006 ff10 	bl	8007e88 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f006 ff50 	bl	8007f10 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f006 ff6d 	bl	8007f54 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f003 fe4d 	bl	8004d20 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f005 fd10 	bl	8006aac <tcp_close>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b0a5      	sub	sp, #148	; 0x94
 8001098:	af04      	add	r7, sp, #16
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	char buf[100];
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	8b1b      	ldrh	r3, [r3, #24]
 80010a8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00d fc6f 	bl	800e994 <ip4addr_ntoa>
 80010b6:	67b8      	str	r0, [r7, #120]	; 0x78

	printf("IP Address: %s\n", remIP);
 80010b8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80010ba:	483f      	ldr	r0, [pc, #252]	; (80011b8 <tcp_client_handle+0x124>)
 80010bc:	f00e fc72 	bl	800f9a4 <iprintf>
	printf("Port Used: %d\n", inPort);
 80010c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80010c4:	4619      	mov	r1, r3
 80010c6:	483d      	ldr	r0, [pc, #244]	; (80011bc <tcp_client_handle+0x128>)
 80010c8:	f00e fc6c 	bl	800f9a4 <iprintf>
	printf("Msg Length: %d\n",es->p->tot_len);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	891b      	ldrh	r3, [r3, #8]
 80010d2:	4619      	mov	r1, r3
 80010d4:	483a      	ldr	r0, [pc, #232]	; (80011c0 <tcp_client_handle+0x12c>)
 80010d6:	f00e fc65 	bl	800f9a4 <iprintf>
	printf("Message: %.*s\n", es->p->tot_len , (char*) es->p->payload);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	4619      	mov	r1, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <tcp_client_handle+0x130>)
 80010ec:	f00e fc5a 	bl	800f9a4 <iprintf>

	strcpy(buf, es->p->payload);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00e fd87 	bl	800fc10 <strcpy>

	if((buf[0] == 0xAA) && (buf[1] == 0x55))
 8001102:	7c3b      	ldrb	r3, [r7, #16]
 8001104:	2baa      	cmp	r3, #170	; 0xaa
 8001106:	d107      	bne.n	8001118 <tcp_client_handle+0x84>
 8001108:	7c7b      	ldrb	r3, [r7, #17]
 800110a:	2b55      	cmp	r3, #85	; 0x55
 800110c:	d104      	bne.n	8001118 <tcp_client_handle+0x84>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	482d      	ldr	r0, [pc, #180]	; (80011c8 <tcp_client_handle+0x134>)
 8001114:	f001 fd8e 	bl	8002c34 <HAL_GPIO_WritePin>

	int j = snprintf(buf, 100,
 8001118:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
						 "IP Address: %s\n"
						 "Port Used: %d\n"
						 "Msg Length: %d\n"
						 "Message: %.*s\n",
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6892      	ldr	r2, [r2, #8]
 8001120:	8912      	ldrh	r2, [r2, #8]
	int j = snprintf(buf, 100,
 8001122:	4611      	mov	r1, r2
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	6892      	ldr	r2, [r2, #8]
 8001128:	8912      	ldrh	r2, [r2, #8]
	int j = snprintf(buf, 100,
 800112a:	4614      	mov	r4, r2
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	6892      	ldr	r2, [r2, #8]
 8001130:	6852      	ldr	r2, [r2, #4]
	int j = snprintf(buf, 100,
 8001132:	f107 0010 	add.w	r0, r7, #16
 8001136:	9203      	str	r2, [sp, #12]
 8001138:	9402      	str	r4, [sp, #8]
 800113a:	9101      	str	r1, [sp, #4]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <tcp_client_handle+0x138>)
 8001142:	2164      	movs	r1, #100	; 0x64
 8001144:	f00e fd10 	bl	800fb68 <sniprintf>
 8001148:	6778      	str	r0, [r7, #116]	; 0x74

	esTx = es;
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <tcp_client_handle+0x13c>)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6013      	str	r3, [r2, #0]

	esTx->p->payload = (void*) buf;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <tcp_client_handle+0x13c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f107 0210 	add.w	r2, r7, #16
 800115a:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = strlen (buf);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f855 	bl	8000210 <strlen>
 8001166:	4602      	mov	r2, r0
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <tcp_client_handle+0x13c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	b292      	uxth	r2, r2
 8001170:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen(buf);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f84a 	bl	8000210 <strlen>
 800117c:	4602      	mov	r2, r0
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <tcp_client_handle+0x13c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	b292      	uxth	r2, r2
 8001186:	815a      	strh	r2, [r3, #10]

	esTx = es;
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <tcp_client_handle+0x13c>)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <tcp_client_handle+0x140>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]
	tcp_client_send(pcbTx, esTx);
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <tcp_client_handle+0x140>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <tcp_client_handle+0x13c>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff03 	bl	8000faa <tcp_client_send>
	counter++;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <tcp_client_handle+0x144>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <tcp_client_handle+0x144>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3784      	adds	r7, #132	; 0x84
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08011068 	.word	0x08011068
 80011bc:	08011078 	.word	0x08011078
 80011c0:	08011088 	.word	0x08011088
 80011c4:	08011098 	.word	0x08011098
 80011c8:	40020400 	.word	0x40020400
 80011cc:	080110a8 	.word	0x080110a8
 80011d0:	200000ec 	.word	0x200000ec
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	200000e8 	.word	0x200000e8

080011dc <ethernetif_notify_conn_changed>:

void ethernetif_notify_conn_changed(struct netif *netif)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(netif_is_link_up(&gnetif))
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <ethernetif_notify_conn_changed+0x78>)
 80011e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d020      	beq.n	8001238 <ethernetif_notify_conn_changed+0x5c>
	{
		netif_set_up(&gnetif);
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <ethernetif_notify_conn_changed+0x78>)
 80011f8:	f004 faa6 	bl	8005748 <netif_set_up>
		tcp_client_connection_close(pcbRx, (struct tcp_client_struct *) esPtr);
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <ethernetif_notify_conn_changed+0x7c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <ethernetif_notify_conn_changed+0x80>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff1d 	bl	8001046 <tcp_client_connection_close>
		pcbRx = tcp_new();
 800120c:	f006 fe22 	bl	8007e54 <tcp_new>
 8001210:	4603      	mov	r3, r0
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <ethernetif_notify_conn_changed+0x7c>)
 8001214:	6013      	str	r3, [r2, #0]
		/* 2. Connect to the server */
		ip_addr_t destIPADDR;
		IP_ADDR4(&destIPADDR, 192, 168, 29, 100);
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <ethernetif_notify_conn_changed+0x84>)
 8001218:	60fb      	str	r3, [r7, #12]
		//tcp_bind(tpcb, &destIPADDR, 24);//(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
		tcp_connect(pcbRx, &destIPADDR, 24, tcp_client_connected);
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <ethernetif_notify_conn_changed+0x7c>)
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 010c 	add.w	r1, r7, #12
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <ethernetif_notify_conn_changed+0x88>)
 8001224:	2218      	movs	r2, #24
 8001226:	f005 fe43 	bl	8006eb0 <tcp_connect>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <ethernetif_notify_conn_changed+0x8c>)
 8001232:	f001 fcff 	bl	8002c34 <HAL_GPIO_WritePin>
	else
	{
		netif_set_down(&gnetif);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 8001236:	e008      	b.n	800124a <ethernetif_notify_conn_changed+0x6e>
		netif_set_down(&gnetif);
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <ethernetif_notify_conn_changed+0x78>)
 800123a:	f004 faf1 	bl	8005820 <netif_set_down>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <ethernetif_notify_conn_changed+0x8c>)
 8001246:	f001 fcf5 	bl	8002c34 <HAL_GPIO_WritePin>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000100 	.word	0x20000100
 8001258:	200000f8 	.word	0x200000f8
 800125c:	200000f0 	.word	0x200000f0
 8001260:	641da8c0 	.word	0x641da8c0
 8001264:	08000da5 	.word	0x08000da5
 8001268:	40020400 	.word	0x40020400

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001288:	4c0b      	ldr	r4, [pc, #44]	; (80012b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001296:	f7ff fce7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f00e fb1f 	bl	800f8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff f991 	bl	80005c4 <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012b0:	0801493c 	.word	0x0801493c
  ldr r2, =_sbss
 80012b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012b8:	20008b28 	.word	0x20008b28

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x28>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f94f 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fb4a 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f967 	bl	80015de <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f92f 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	200000fc 	.word	0x200000fc

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200000fc 	.word	0x200000fc

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	05fa0000 	.word	0x05fa0000

0800141c <__NVIC_GetPriorityGrouping>:
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001608:	4ba0      	ldr	r3, [pc, #640]	; (800188c <HAL_ETH_Init+0x294>)
 800160a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e180      	b.n	8001920 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f002 fe1e 	bl	8004274 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b95      	ldr	r3, [pc, #596]	; (8001890 <HAL_ETH_Init+0x298>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	4a94      	ldr	r2, [pc, #592]	; (8001890 <HAL_ETH_Init+0x298>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6453      	str	r3, [r2, #68]	; 0x44
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <HAL_ETH_Init+0x298>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001650:	4b90      	ldr	r3, [pc, #576]	; (8001894 <HAL_ETH_Init+0x29c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a8f      	ldr	r2, [pc, #572]	; (8001894 <HAL_ETH_Init+0x29c>)
 8001656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800165a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800165c:	4b8d      	ldr	r3, [pc, #564]	; (8001894 <HAL_ETH_Init+0x29c>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	498b      	ldr	r1, [pc, #556]	; (8001894 <HAL_ETH_Init+0x29c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001680:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001682:	f7ff fe77 	bl	8001374 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001688:	e011      	b.n	80016ae <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800168a:	f7ff fe73 	bl	8001374 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001698:	d909      	bls.n	80016ae <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e138      	b.n	8001920 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e4      	bne.n	800168a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f023 031c 	bic.w	r3, r3, #28
 80016ce:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016d0:	f001 ffca 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80016d4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <HAL_ETH_Init+0x2a0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d908      	bls.n	80016f0 <HAL_ETH_Init+0xf8>
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_ETH_Init+0x2a4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d804      	bhi.n	80016f0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	e027      	b.n	8001740 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_ETH_Init+0x2a4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d908      	bls.n	800170a <HAL_ETH_Init+0x112>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	4a64      	ldr	r2, [pc, #400]	; (800188c <HAL_ETH_Init+0x294>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d204      	bcs.n	800170a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f043 030c 	orr.w	r3, r3, #12
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e01a      	b.n	8001740 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4a5f      	ldr	r2, [pc, #380]	; (800188c <HAL_ETH_Init+0x294>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d303      	bcc.n	800171a <HAL_ETH_Init+0x122>
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4a62      	ldr	r2, [pc, #392]	; (80018a0 <HAL_ETH_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d911      	bls.n	800173e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4a60      	ldr	r2, [pc, #384]	; (80018a0 <HAL_ETH_Init+0x2a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d908      	bls.n	8001734 <HAL_ETH_Init+0x13c>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <HAL_ETH_Init+0x2ac>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d804      	bhi.n	8001734 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e005      	b.n	8001740 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	e000      	b.n	8001740 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800173e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001748:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800174c:	2100      	movs	r1, #0
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fc16 	bl	8001f80 <HAL_ETH_WritePHYRegister>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fdcb 	bl	80022fc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0d6      	b.n	8001920 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001772:	20ff      	movs	r0, #255	; 0xff
 8001774:	f7ff fe0a 	bl	800138c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a4 	beq.w	80018ca <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001782:	f7ff fdf7 	bl	8001374 <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	461a      	mov	r2, r3
 800178e:	2101      	movs	r1, #1
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb8d 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001796:	f7ff fded 	bl	8001374 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d90f      	bls.n	80017c8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fda4 	bl	80022fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ab      	b.n	8001920 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0da      	beq.n	8001788 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d6:	2100      	movs	r1, #0
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fbd1 	bl	8001f80 <HAL_ETH_WritePHYRegister>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fd86 	bl	80022fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017f8:	2301      	movs	r3, #1
 80017fa:	e091      	b.n	8001920 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fdba 	bl	8001374 <HAL_GetTick>
 8001800:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	461a      	mov	r2, r3
 8001808:	2101      	movs	r1, #1
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fb50 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001810:	f7ff fdb0 	bl	8001374 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d90f      	bls.n	8001842 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fd67 	bl	80022fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e06e      	b.n	8001920 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0da      	beq.n	8001802 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	461a      	mov	r2, r3
 8001852:	2110      	movs	r1, #16
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fb2b 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fd48 	bl	80022fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001874:	2301      	movs	r3, #1
 8001876:	e053      	b.n	8001920 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e010      	b.n	80018ae <HAL_ETH_Init+0x2b6>
 800188c:	03938700 	.word	0x03938700
 8001890:	40023800 	.word	0x40023800
 8001894:	40013800 	.word	0x40013800
 8001898:	01312cff 	.word	0x01312cff
 800189c:	02160ebf 	.word	0x02160ebf
 80018a0:	05f5e0ff 	.word	0x05f5e0ff
 80018a4:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e026      	b.n	800190e <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e021      	b.n	800190e <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80018da:	4313      	orrs	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	2100      	movs	r1, #0
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fb4c 	bl	8001f80 <HAL_ETH_WritePHYRegister>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018f2:	6939      	ldr	r1, [r7, #16]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fd01 	bl	80022fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00c      	b.n	8001920 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001906:	f640 70ff 	movw	r0, #4095	; 0xfff
 800190a:	f7ff fd3f 	bl	800138c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800190e:	6939      	ldr	r1, [r7, #16]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fcf3 	bl	80022fc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ETH_DMATxDescListInit+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e051      	b.n	80019ec <HAL_ETH_DMATxDescListInit+0xc4>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e030      	b.n	80019c6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	015b      	lsls	r3, r3, #5
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001974:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	461a      	mov	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d208      	bcs.n	80019ba <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	015b      	lsls	r3, r3, #5
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e002      	b.n	80019c0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3ca      	bcc.n	8001964 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d8:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ETH_DMARxDescListInit+0x20>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e055      	b.n	8001ac4 <HAL_ETH_DMARxDescListInit+0xcc>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e034      	b.n	8001a9e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a44:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a4c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d208      	bcs.n	8001a92 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	e002      	b.n	8001a98 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3c6      	bcc.n	8001a34 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab0:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ETH_TransmitFrame+0x24>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0cc      	b.n	8001c8e <HAL_ETH_TransmitFrame+0x1be>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0b7      	b.n	8001c8e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da09      	bge.n	8001b3c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2212      	movs	r2, #18
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0a8      	b.n	8001c8e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d915      	bls.n	8001b72 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_ETH_TransmitFrame+0x1cc>)
 8001b56:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e001      	b.n	8001b76 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d11c      	bne.n	8001bb6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b8a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b96:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ba6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb4:	e04b      	b.n	8001c4e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e044      	b.n	8001c46 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d116      	bne.n	8001c24 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c04:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001c0a:	fb03 f202 	mul.w	r2, r3, r2
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001c16:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c22:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c32:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	3301      	adds	r3, #1
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d3b6      	bcc.n	8001bbc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00d      	beq.n	8001c7c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	461a      	mov	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	ac02b00b 	.word	0xac02b00b
 8001ca0:	fffffa0c 	.word	0xfffffa0c

08001ca4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ETH_GetReceivedFrame+0x1a>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e070      	b.n	8001da0 <HAL_ETH_GetReceivedFrame+0xfc>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db5a      	blt.n	8001d8e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d030      	beq.n	8001d48 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d103      	bne.n	8001d00 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d14:	3b04      	subs	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e02b      	b.n	8001da0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
 8001d76:	e00a      	b.n	8001d8e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d112      	bne.n	8001dec <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f85e 	bl	8001e88 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dea:	e01a      	b.n	8001e22 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d111      	bne.n	8001e22 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f838 	bl	8001e74 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2301      	movs	r3, #1
 8001e10:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e30:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e44:	d112      	bne.n	8001e6c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f828 	bl	8001e9c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b82      	cmp	r3, #130	; 0x82
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e050      	b.n	8001f78 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2282      	movs	r2, #130	; 0x82
 8001eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 031c 	and.w	r3, r3, #28
 8001eec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8a1b      	ldrh	r3, [r3, #16]
 8001ef2:	02db      	lsls	r3, r3, #11
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001efc:	897b      	ldrh	r3, [r7, #10]
 8001efe:	019b      	lsls	r3, r3, #6
 8001f00:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f023 0302 	bic.w	r3, r3, #2
 8001f10:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f22:	f7ff fa27 	bl	8001374 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f28:	e015      	b.n	8001f56 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f2a:	f7ff fa23 	bl	8001374 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d309      	bcc.n	8001f4e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e014      	b.n	8001f78 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e4      	bne.n	8001f2a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b42      	cmp	r3, #66	; 0x42
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e04e      	b.n	8002044 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2242      	movs	r2, #66	; 0x42
 8001faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 031c 	and.w	r3, r3, #28
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8a1b      	ldrh	r3, [r3, #16]
 8001fc2:	02db      	lsls	r3, r3, #11
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001fcc:	897b      	ldrh	r3, [r7, #10]
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffc:	f7ff f9ba 	bl	8001374 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002002:	e015      	b.n	8002030 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002004:	f7ff f9b6 	bl	8001374 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d309      	bcc.n	8002028 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e00d      	b.n	8002044 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e4      	bne.n	8002004 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_ETH_Start+0x16>
 800205e:	2302      	movs	r3, #2
 8002060:	e01f      	b.n	80020a2 <HAL_ETH_Start+0x56>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fb40 	bl	80026f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fb77 	bl	800276c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fc06 	bl	8002890 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fbab 	bl	80027e0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fbd4 	bl	8002838 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_ETH_Stop+0x16>
 80020bc:	2302      	movs	r3, #2
 80020be:	e01f      	b.n	8002100 <HAL_ETH_Stop+0x56>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb9b 	bl	800280c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fbc4 	bl	8002864 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fb62 	bl	80027a6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fbd4 	bl	8002890 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb22 	bl	8002732 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ETH_ConfigMAC+0x1c>
 8002120:	2302      	movs	r3, #2
 8002122:	e0e4      	b.n	80022ee <HAL_ETH_ConfigMAC+0x1e6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80b1 	beq.w	800229e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002154:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800215a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002160:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002166:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800216c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002172:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002178:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800217e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002184:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800218a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002190:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002196:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7ff f8ec 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021c4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80021ca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80021d0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80021d6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80021dc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80021e2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80021ee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80021f0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff f8c6 	bl	800138c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002210:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800221a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	f64f 7341 	movw	r3, #65345	; 0xff41
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002238:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800223e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002244:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800224a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002250:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f7ff f88f 	bl	800138c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff f87c 	bl	800138c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	61da      	str	r2, [r3, #28]
 800229c:	e01e      	b.n	80022dc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022ac:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff f85c 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	ff20810f 	.word	0xff20810f

080022fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0b0      	sub	sp, #192	; 0xc0
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002318:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002320:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800232a:	2300      	movs	r3, #0
 800232c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
 8002348:	e001      	b.n	800234e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002358:	2300      	movs	r3, #0
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80023d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d4:	4ba9      	ldr	r3, [pc, #676]	; (800267c <ETH_MACDMAConfig+0x380>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023e0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80023e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80023e4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80023e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80023e8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80023ee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80023f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80023f2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80023f6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80023fc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80023fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002400:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002404:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002408:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800240c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800240e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002410:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe ffab 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800243e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002440:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002444:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002448:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800244a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800244e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002454:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800245a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002460:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002464:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800246c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800246e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe ff86 	bl	800138c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002492:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800249c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ac:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024b0:	4013      	ands	r3, r2
 80024b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80024bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024c0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80024c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80024c6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80024c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80024cc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80024ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80024d2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80024d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024d8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fe ff47 	bl	800138c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002506:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002508:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800250c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe ff32 	bl	800138c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002530:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002544:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002556:	2304      	movs	r3, #4
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800255a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002576:	2300      	movs	r3, #0
 8002578:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800257a:	2300      	movs	r3, #0
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800258c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <ETH_MACDMAConfig+0x384>)
 8002592:	4013      	ands	r3, r2
 8002594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002598:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800259a:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800259c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800259e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025a0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025a2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025a4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025a6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025a8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025aa:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025ac:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80025ae:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80025b0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80025b4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80025b8:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025d2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7fe fed2 	bl	800138c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	461a      	mov	r2, r3
 80025f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025f6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025fc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002600:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002604:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002608:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800260e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002612:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800261c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002620:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002630:	2001      	movs	r0, #1
 8002632:	f7fe feab 	bl	800138c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	461a      	mov	r2, r3
 8002640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002644:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10b      	bne.n	8002666 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	69d9      	ldr	r1, [r3, #28]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <ETH_MACDMAConfig+0x388>)
 800265e:	430b      	orrs	r3, r1
 8002660:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002664:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	461a      	mov	r2, r3
 800266c:	2100      	movs	r1, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f80a 	bl	8002688 <ETH_MACAddressConfig>
}
 8002674:	bf00      	nop
 8002676:	37c0      	adds	r7, #192	; 0xc0
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	ff20810f 	.word	0xff20810f
 8002680:	f8de3f23 	.word	0xf8de3f23
 8002684:	00010040 	.word	0x00010040

08002688 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3305      	adds	r3, #5
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	3204      	adds	r2, #4
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <ETH_MACAddressConfig+0x68>)
 80026aa:	4413      	add	r3, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3303      	adds	r3, #3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	061a      	lsls	r2, r3, #24
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3302      	adds	r3, #2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	4313      	orrs	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <ETH_MACAddressConfig+0x6c>)
 80026da:	4413      	add	r3, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6013      	str	r3, [r2, #0]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40028040 	.word	0x40028040
 80026f4:	40028044 	.word	0x40028044

080026f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800271c:	2001      	movs	r0, #1
 800271e:	f7fe fe35 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0208 	bic.w	r2, r2, #8
 800274c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002756:	2001      	movs	r0, #1
 8002758:	f7fe fe18 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0204 	orr.w	r2, r2, #4
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002790:	2001      	movs	r0, #1
 8002792:	f7fe fdfb 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0204 	bic.w	r2, r2, #4
 80027c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe fdde 	bl	800138c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fe:	6193      	str	r3, [r2, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002826:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800282a:	6193      	str	r3, [r2, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	f043 0302 	orr.w	r3, r3, #2
 8002852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002856:	6193      	str	r3, [r2, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	f023 0302 	bic.w	r3, r3, #2
 800287e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002882:	6193      	str	r3, [r2, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028b2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7fe fd63 	bl	800138c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028d0:	6193      	str	r3, [r2, #24]
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e175      	b.n	8002be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8164 	bne.w	8002be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x56>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80be 	beq.w	8002be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a7e:	4a61      	ldr	r2, [pc, #388]	; (8002c04 <HAL_GPIO_Init+0x328>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d037      	beq.n	8002b1a <HAL_GPIO_Init+0x23e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0x23a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x236>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a55      	ldr	r2, [pc, #340]	; (8002c14 <HAL_GPIO_Init+0x338>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x232>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_GPIO_Init+0x33c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x22e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_GPIO_Init+0x340>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x22a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x344>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_GPIO_Init+0x348>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_GPIO_Init+0x34c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_GPIO_Init+0x350>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002af2:	2309      	movs	r3, #9
 8002af4:	e012      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002af6:	230a      	movs	r3, #10
 8002af8:	e010      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e00e      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	; (8002c04 <HAL_GPIO_Init+0x328>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_GPIO_Init+0x354>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae86 	bls.w	80028fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022400 	.word	0x40022400
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	400b      	ands	r3, r1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7fe fb53 	bl	8001374 <HAL_GetTick>
 8002cce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd0:	e009      	b.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd2:	f7fe fb4f 	bl	8001374 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e022      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d00:	f7fe fb38 	bl	8001374 <HAL_GetTick>
 8002d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d06:	e009      	b.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d08:	f7fe fb34 	bl	8001374 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d16:	d901      	bls.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e007      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d1ee      	bne.n	8002d08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e291      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8087 	beq.w	8002e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d00c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6c:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d112      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d84:	d10b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x130>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d168      	bne.n	8002e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e26b      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a>
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a83      	ldr	r2, [pc, #524]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x9c>
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6b      	ldr	r2, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe faaa 	bl	8001374 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe faa6 	bl	8001374 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e21f      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fa96 	bl	8001374 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fa92 	bl	8001374 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e20b      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x110>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d069      	beq.n	8002f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7a:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1df      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	493d      	ldr	r1, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e040      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fa48 	bl	8001374 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fa44 	bl	8001374 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1bd      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4929      	ldr	r1, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
 8002f1a:	e018      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fa24 	bl	8001374 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe fa20 	bl	8001374 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e199      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d038      	beq.n	8002fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fa01 	bl	8001374 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe f9fd 	bl	8001374 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e176      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x23a>
 8002f94:	e01a      	b.n	8002fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe f9e7 	bl	8001374 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe f9e3 	bl	8001374 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d903      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e15c      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
 8002fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b91      	ldr	r3, [pc, #580]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a4 	beq.w	8003122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b8b      	ldr	r3, [pc, #556]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a87      	ldr	r2, [pc, #540]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9ab 	bl	8001374 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe f9a7 	bl	8001374 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e120      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b75      	ldr	r3, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x31a>
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x33c>
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a66      	ldr	r2, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x35e>
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b5e      	ldr	r3, [pc, #376]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a5d      	ldr	r2, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe f95b 	bl	8001374 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe f957 	bl	8001374 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0ce      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x386>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe f945 	bl	8001374 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe f941 	bl	8001374 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a4 	beq.w	8003274 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d06b      	beq.n	8003210 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d149      	bne.n	80031d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a30      	ldr	r2, [pc, #192]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f912 	bl	8001374 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f90e 	bl	8001374 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e087      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	4313      	orrs	r3, r2
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800319e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f8e2 	bl	8001374 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f8de 	bl	8001374 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e057      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x478>
 80031d2:	e04f      	b.n	8003274 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f8c8 	bl	8001374 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe f8c4 	bl	8001374 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e03d      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4ac>
 8003206:	e035      	b.n	8003274 <HAL_RCC_OscConfig+0x538>
 8003208:	40023800 	.word	0x40023800
 800320c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x544>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d028      	beq.n	8003270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d121      	bne.n	8003270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d11a      	bne.n	8003270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003246:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003248:	4293      	cmp	r3, r2
 800324a:	d111      	bne.n	8003270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0d0      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d910      	bls.n	80032cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 020f 	bic.w	r2, r3, #15
 80032b2:	4965      	ldr	r1, [pc, #404]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a58      	ldr	r2, [pc, #352]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d040      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d115      	bne.n	8003366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e073      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06b      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4936      	ldr	r1, [pc, #216]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd fffc 	bl	8001374 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	e00a      	b.n	8003396 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003380:	f7fd fff8 	bl	8001374 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e053      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 020c 	and.w	r2, r3, #12
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1eb      	bne.n	8003380 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d210      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 020f 	bic.w	r2, r3, #15
 80033be:	4922      	ldr	r1, [pc, #136]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f821 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1cc>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d0>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1d4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd ff58 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00
 800344c:	40023800 	.word	0x40023800
 8003450:	080146a0 	.word	0x080146a0
 8003454:	20000000 	.word	0x20000000
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b094      	sub	sp, #80	; 0x50
 8003462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	2300      	movs	r3, #0
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	2300      	movs	r3, #0
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d00d      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003480:	2b08      	cmp	r3, #8
 8003482:	f200 80e1 	bhi.w	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
 800348a:	2b04      	cmp	r3, #4
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800348e:	e0db      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003494:	e0db      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_GetSysClockFreq+0x208>)
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349a:	e0d8      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034a6:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	2200      	movs	r2, #0
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80034bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ce:	4622      	mov	r2, r4
 80034d0:	462b      	mov	r3, r5
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	0159      	lsls	r1, r3, #5
 80034dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e0:	0150      	lsls	r0, r2, #5
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4621      	mov	r1, r4
 80034e8:	1a51      	subs	r1, r2, r1
 80034ea:	6139      	str	r1, [r7, #16]
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003500:	4659      	mov	r1, fp
 8003502:	018b      	lsls	r3, r1, #6
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800350a:	4651      	mov	r1, sl
 800350c:	018a      	lsls	r2, r1, #6
 800350e:	4651      	mov	r1, sl
 8003510:	ebb2 0801 	subs.w	r8, r2, r1
 8003514:	4659      	mov	r1, fp
 8003516:	eb63 0901 	sbc.w	r9, r3, r1
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352e:	4690      	mov	r8, r2
 8003530:	4699      	mov	r9, r3
 8003532:	4623      	mov	r3, r4
 8003534:	eb18 0303 	adds.w	r3, r8, r3
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	462b      	mov	r3, r5
 800353c:	eb49 0303 	adc.w	r3, r9, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800354e:	4629      	mov	r1, r5
 8003550:	024b      	lsls	r3, r1, #9
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003558:	4621      	mov	r1, r4
 800355a:	024a      	lsls	r2, r1, #9
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800356c:	f7fc fea8 	bl	80002c0 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	e058      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	2200      	movs	r2, #0
 8003582:	4618      	mov	r0, r3
 8003584:	4611      	mov	r1, r2
 8003586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a6:	0150      	lsls	r0, r2, #5
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4641      	mov	r1, r8
 80035ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035cc:	ebb2 040a 	subs.w	r4, r2, sl
 80035d0:	eb63 050b 	sbc.w	r5, r3, fp
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	464b      	mov	r3, r9
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003602:	4629      	mov	r1, r5
 8003604:	028b      	lsls	r3, r1, #10
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800360c:	4621      	mov	r1, r4
 800360e:	028a      	lsls	r2, r1, #10
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	61fa      	str	r2, [r7, #28]
 800361c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003620:	f7fc fe4e 	bl	80002c0 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800363c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800363e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003650:	4618      	mov	r0, r3
 8003652:	3750      	adds	r7, #80	; 0x50
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd f988 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fac0 	bl	8003c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e054      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d01d      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <HAL_TIM_Base_Start_IT+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_TIM_Base_Start_IT+0xd8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_TIM_Base_Start_IT+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_Start_IT+0xe0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIM_Base_Start_IT+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_Start_IT+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d115      	bne.n	80037dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_TIM_Base_Start_IT+0xec>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d015      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d011      	beq.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e008      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40001800 	.word	0x40001800
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0202 	mvn.w	r2, #2
 800384c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9d0 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9c2 	bl	8003bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f9d3 	bl	8003c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9a6 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f998 	bl	8003bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f9a9 	bl	8003c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f97c 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f96e 	bl	8003bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f97f 	bl	8003c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0210 	mvn.w	r2, #16
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2208      	movs	r2, #8
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f952 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f944 	bl	8003bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f955 	bl	8003c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd f974 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fb0c 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 faff 	bl	8003ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f903 	bl	8003c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0220 	mvn.w	r2, #32
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fabf 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIM_ConfigClockSource+0x1c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0b4      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x186>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_TIM_ConfigClockSource+0x190>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab4:	d03e      	beq.n	8003b34 <HAL_TIM_ConfigClockSource+0xd4>
 8003ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aba:	f200 8087 	bhi.w	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac2:	f000 8086 	beq.w	8003bd2 <HAL_TIM_ConfigClockSource+0x172>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aca:	d87f      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b70      	cmp	r3, #112	; 0x70
 8003ace:	d01a      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0xa6>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d87b      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d050      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x11a>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d877      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b50      	cmp	r3, #80	; 0x50
 8003ade:	d03c      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0xfa>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d873      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d058      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x13a>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d86f      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	d064      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d86b      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d060      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d867      	bhi.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05c      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d05a      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	e062      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6899      	ldr	r1, [r3, #8]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f000 f9af 	bl	8003e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
      break;
 8003b32:	e04f      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f000 f998 	bl	8003e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b56:	609a      	str	r2, [r3, #8]
      break;
 8003b58:	e03c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 f90c 	bl	8003d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2150      	movs	r1, #80	; 0x50
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f965 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e02c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f92b 	bl	8003de2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2160      	movs	r1, #96	; 0x60
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f955 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e01c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 f8ec 	bl	8003d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f945 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 f93c 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bca:	e003      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	fffeff88 	.word	0xfffeff88

08003bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d00f      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <TIM_Base_SetConfig+0x118>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <TIM_Base_SetConfig+0x11c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <TIM_Base_SetConfig+0x120>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d108      	bne.n	8003c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2f      	ldr	r2, [pc, #188]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca4:	d027      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <TIM_Base_SetConfig+0x118>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d023      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <TIM_Base_SetConfig+0x11c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01f      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <TIM_Base_SetConfig+0x120>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d017      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a28      	ldr	r2, [pc, #160]	; (8003d6c <TIM_Base_SetConfig+0x128>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <TIM_Base_SetConfig+0x12c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <TIM_Base_SetConfig+0x130>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a25      	ldr	r2, [pc, #148]	; (8003d78 <TIM_Base_SetConfig+0x134>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <TIM_Base_SetConfig+0x138>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <TIM_Base_SetConfig+0x13c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0xf8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800
 8003d78:	40001800 	.word	0x40001800
 8003d7c:	40001c00 	.word	0x40001c00
 8003d80:	40002000 	.word	0x40002000

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 030a 	bic.w	r3, r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b087      	sub	sp, #28
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0210 	bic.w	r2, r3, #16
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 0307 	orr.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e06d      	b.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2f      	ldr	r2, [pc, #188]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d022      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d01d      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d018      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10c      	bne.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004016:	4b8d      	ldr	r3, [pc, #564]	; (800424c <MX_LWIP_Init+0x23c>)
 8004018:	22c0      	movs	r2, #192	; 0xc0
 800401a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800401c:	4b8b      	ldr	r3, [pc, #556]	; (800424c <MX_LWIP_Init+0x23c>)
 800401e:	22a8      	movs	r2, #168	; 0xa8
 8004020:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 29;
 8004022:	4b8a      	ldr	r3, [pc, #552]	; (800424c <MX_LWIP_Init+0x23c>)
 8004024:	221d      	movs	r2, #29
 8004026:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004028:	4b88      	ldr	r3, [pc, #544]	; (800424c <MX_LWIP_Init+0x23c>)
 800402a:	227b      	movs	r2, #123	; 0x7b
 800402c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800402e:	4b88      	ldr	r3, [pc, #544]	; (8004250 <MX_LWIP_Init+0x240>)
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004034:	4b86      	ldr	r3, [pc, #536]	; (8004250 <MX_LWIP_Init+0x240>)
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800403a:	4b85      	ldr	r3, [pc, #532]	; (8004250 <MX_LWIP_Init+0x240>)
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004040:	4b83      	ldr	r3, [pc, #524]	; (8004250 <MX_LWIP_Init+0x240>)
 8004042:	2200      	movs	r2, #0
 8004044:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004046:	4b83      	ldr	r3, [pc, #524]	; (8004254 <MX_LWIP_Init+0x244>)
 8004048:	22c0      	movs	r2, #192	; 0xc0
 800404a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800404c:	4b81      	ldr	r3, [pc, #516]	; (8004254 <MX_LWIP_Init+0x244>)
 800404e:	22a8      	movs	r2, #168	; 0xa8
 8004050:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 29;
 8004052:	4b80      	ldr	r3, [pc, #512]	; (8004254 <MX_LWIP_Init+0x244>)
 8004054:	221d      	movs	r2, #29
 8004056:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <MX_LWIP_Init+0x244>)
 800405a:	2201      	movs	r2, #1
 800405c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800405e:	f000 fd0b 	bl	8004a78 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004062:	4b7a      	ldr	r3, [pc, #488]	; (800424c <MX_LWIP_Init+0x23c>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	061a      	lsls	r2, r3, #24
 8004068:	4b78      	ldr	r3, [pc, #480]	; (800424c <MX_LWIP_Init+0x23c>)
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	4b76      	ldr	r3, [pc, #472]	; (800424c <MX_LWIP_Init+0x23c>)
 8004072:	789b      	ldrb	r3, [r3, #2]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	4313      	orrs	r3, r2
 8004078:	4a74      	ldr	r2, [pc, #464]	; (800424c <MX_LWIP_Init+0x23c>)
 800407a:	78d2      	ldrb	r2, [r2, #3]
 800407c:	4313      	orrs	r3, r2
 800407e:	061a      	lsls	r2, r3, #24
 8004080:	4b72      	ldr	r3, [pc, #456]	; (800424c <MX_LWIP_Init+0x23c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	0619      	lsls	r1, r3, #24
 8004086:	4b71      	ldr	r3, [pc, #452]	; (800424c <MX_LWIP_Init+0x23c>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	4319      	orrs	r1, r3
 800408e:	4b6f      	ldr	r3, [pc, #444]	; (800424c <MX_LWIP_Init+0x23c>)
 8004090:	789b      	ldrb	r3, [r3, #2]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	430b      	orrs	r3, r1
 8004096:	496d      	ldr	r1, [pc, #436]	; (800424c <MX_LWIP_Init+0x23c>)
 8004098:	78c9      	ldrb	r1, [r1, #3]
 800409a:	430b      	orrs	r3, r1
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040a2:	431a      	orrs	r2, r3
 80040a4:	4b69      	ldr	r3, [pc, #420]	; (800424c <MX_LWIP_Init+0x23c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	0619      	lsls	r1, r3, #24
 80040aa:	4b68      	ldr	r3, [pc, #416]	; (800424c <MX_LWIP_Init+0x23c>)
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	4319      	orrs	r1, r3
 80040b2:	4b66      	ldr	r3, [pc, #408]	; (800424c <MX_LWIP_Init+0x23c>)
 80040b4:	789b      	ldrb	r3, [r3, #2]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	430b      	orrs	r3, r1
 80040ba:	4964      	ldr	r1, [pc, #400]	; (800424c <MX_LWIP_Init+0x23c>)
 80040bc:	78c9      	ldrb	r1, [r1, #3]
 80040be:	430b      	orrs	r3, r1
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040c6:	431a      	orrs	r2, r3
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <MX_LWIP_Init+0x23c>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	0619      	lsls	r1, r3, #24
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <MX_LWIP_Init+0x23c>)
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	4319      	orrs	r1, r3
 80040d6:	4b5d      	ldr	r3, [pc, #372]	; (800424c <MX_LWIP_Init+0x23c>)
 80040d8:	789b      	ldrb	r3, [r3, #2]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	430b      	orrs	r3, r1
 80040de:	495b      	ldr	r1, [pc, #364]	; (800424c <MX_LWIP_Init+0x23c>)
 80040e0:	78c9      	ldrb	r1, [r1, #3]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	0e1b      	lsrs	r3, r3, #24
 80040e6:	4313      	orrs	r3, r2
 80040e8:	4a5b      	ldr	r2, [pc, #364]	; (8004258 <MX_LWIP_Init+0x248>)
 80040ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80040ec:	4b58      	ldr	r3, [pc, #352]	; (8004250 <MX_LWIP_Init+0x240>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	061a      	lsls	r2, r3, #24
 80040f2:	4b57      	ldr	r3, [pc, #348]	; (8004250 <MX_LWIP_Init+0x240>)
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	431a      	orrs	r2, r3
 80040fa:	4b55      	ldr	r3, [pc, #340]	; (8004250 <MX_LWIP_Init+0x240>)
 80040fc:	789b      	ldrb	r3, [r3, #2]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	4313      	orrs	r3, r2
 8004102:	4a53      	ldr	r2, [pc, #332]	; (8004250 <MX_LWIP_Init+0x240>)
 8004104:	78d2      	ldrb	r2, [r2, #3]
 8004106:	4313      	orrs	r3, r2
 8004108:	061a      	lsls	r2, r3, #24
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <MX_LWIP_Init+0x240>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	0619      	lsls	r1, r3, #24
 8004110:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <MX_LWIP_Init+0x240>)
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	4319      	orrs	r1, r3
 8004118:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <MX_LWIP_Init+0x240>)
 800411a:	789b      	ldrb	r3, [r3, #2]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	430b      	orrs	r3, r1
 8004120:	494b      	ldr	r1, [pc, #300]	; (8004250 <MX_LWIP_Init+0x240>)
 8004122:	78c9      	ldrb	r1, [r1, #3]
 8004124:	430b      	orrs	r3, r1
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800412c:	431a      	orrs	r2, r3
 800412e:	4b48      	ldr	r3, [pc, #288]	; (8004250 <MX_LWIP_Init+0x240>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	0619      	lsls	r1, r3, #24
 8004134:	4b46      	ldr	r3, [pc, #280]	; (8004250 <MX_LWIP_Init+0x240>)
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	4319      	orrs	r1, r3
 800413c:	4b44      	ldr	r3, [pc, #272]	; (8004250 <MX_LWIP_Init+0x240>)
 800413e:	789b      	ldrb	r3, [r3, #2]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	430b      	orrs	r3, r1
 8004144:	4942      	ldr	r1, [pc, #264]	; (8004250 <MX_LWIP_Init+0x240>)
 8004146:	78c9      	ldrb	r1, [r1, #3]
 8004148:	430b      	orrs	r3, r1
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004150:	431a      	orrs	r2, r3
 8004152:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <MX_LWIP_Init+0x240>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	0619      	lsls	r1, r3, #24
 8004158:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <MX_LWIP_Init+0x240>)
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4319      	orrs	r1, r3
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <MX_LWIP_Init+0x240>)
 8004162:	789b      	ldrb	r3, [r3, #2]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	430b      	orrs	r3, r1
 8004168:	4939      	ldr	r1, [pc, #228]	; (8004250 <MX_LWIP_Init+0x240>)
 800416a:	78c9      	ldrb	r1, [r1, #3]
 800416c:	430b      	orrs	r3, r1
 800416e:	0e1b      	lsrs	r3, r3, #24
 8004170:	4313      	orrs	r3, r2
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <MX_LWIP_Init+0x24c>)
 8004174:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004176:	4b37      	ldr	r3, [pc, #220]	; (8004254 <MX_LWIP_Init+0x244>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	061a      	lsls	r2, r3, #24
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <MX_LWIP_Init+0x244>)
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	431a      	orrs	r2, r3
 8004184:	4b33      	ldr	r3, [pc, #204]	; (8004254 <MX_LWIP_Init+0x244>)
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	4313      	orrs	r3, r2
 800418c:	4a31      	ldr	r2, [pc, #196]	; (8004254 <MX_LWIP_Init+0x244>)
 800418e:	78d2      	ldrb	r2, [r2, #3]
 8004190:	4313      	orrs	r3, r2
 8004192:	061a      	lsls	r2, r3, #24
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <MX_LWIP_Init+0x244>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	0619      	lsls	r1, r3, #24
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <MX_LWIP_Init+0x244>)
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	4319      	orrs	r1, r3
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <MX_LWIP_Init+0x244>)
 80041a4:	789b      	ldrb	r3, [r3, #2]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	430b      	orrs	r3, r1
 80041aa:	492a      	ldr	r1, [pc, #168]	; (8004254 <MX_LWIP_Init+0x244>)
 80041ac:	78c9      	ldrb	r1, [r1, #3]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041b6:	431a      	orrs	r2, r3
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <MX_LWIP_Init+0x244>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	0619      	lsls	r1, r3, #24
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <MX_LWIP_Init+0x244>)
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	4319      	orrs	r1, r3
 80041c6:	4b23      	ldr	r3, [pc, #140]	; (8004254 <MX_LWIP_Init+0x244>)
 80041c8:	789b      	ldrb	r3, [r3, #2]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	430b      	orrs	r3, r1
 80041ce:	4921      	ldr	r1, [pc, #132]	; (8004254 <MX_LWIP_Init+0x244>)
 80041d0:	78c9      	ldrb	r1, [r1, #3]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041da:	431a      	orrs	r2, r3
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <MX_LWIP_Init+0x244>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	0619      	lsls	r1, r3, #24
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <MX_LWIP_Init+0x244>)
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	4319      	orrs	r1, r3
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_LWIP_Init+0x244>)
 80041ec:	789b      	ldrb	r3, [r3, #2]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	430b      	orrs	r3, r1
 80041f2:	4918      	ldr	r1, [pc, #96]	; (8004254 <MX_LWIP_Init+0x244>)
 80041f4:	78c9      	ldrb	r1, [r1, #3]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	4313      	orrs	r3, r2
 80041fc:	4a18      	ldr	r2, [pc, #96]	; (8004260 <MX_LWIP_Init+0x250>)
 80041fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <MX_LWIP_Init+0x254>)
 8004202:	9302      	str	r3, [sp, #8]
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <MX_LWIP_Init+0x258>)
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	2300      	movs	r3, #0
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <MX_LWIP_Init+0x250>)
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <MX_LWIP_Init+0x24c>)
 8004210:	4911      	ldr	r1, [pc, #68]	; (8004258 <MX_LWIP_Init+0x248>)
 8004212:	4816      	ldr	r0, [pc, #88]	; (800426c <MX_LWIP_Init+0x25c>)
 8004214:	f001 f8d6 	bl	80053c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004218:	4814      	ldr	r0, [pc, #80]	; (800426c <MX_LWIP_Init+0x25c>)
 800421a:	f001 fa85 	bl	8005728 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <MX_LWIP_Init+0x25c>)
 8004220:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004230:	480e      	ldr	r0, [pc, #56]	; (800426c <MX_LWIP_Init+0x25c>)
 8004232:	f001 fa89 	bl	8005748 <netif_set_up>
 8004236:	e002      	b.n	800423e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <MX_LWIP_Init+0x25c>)
 800423a:	f001 faf1 	bl	8005820 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800423e:	490c      	ldr	r1, [pc, #48]	; (8004270 <MX_LWIP_Init+0x260>)
 8004240:	480a      	ldr	r0, [pc, #40]	; (800426c <MX_LWIP_Init+0x25c>)
 8004242:	f001 fb83 	bl	800594c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000140 	.word	0x20000140
 8004250:	20000144 	.word	0x20000144
 8004254:	20000148 	.word	0x20000148
 8004258:	20000134 	.word	0x20000134
 800425c:	20000138 	.word	0x20000138
 8004260:	2000013c 	.word	0x2000013c
 8004264:	0800f731 	.word	0x0800f731
 8004268:	08004831 	.word	0x08004831
 800426c:	20000100 	.word	0x20000100
 8004270:	08004925 	.word	0x08004925

08004274 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_ETH_MspInit+0x168>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f040 809e 	bne.w	80043d4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004298:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4a50      	ldr	r2, [pc, #320]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 800429e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042a2:	6313      	str	r3, [r2, #48]	; 0x30
 80042a4:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ba:	6313      	str	r3, [r2, #48]	; 0x30
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042d2:	6313      	str	r3, [r2, #48]	; 0x30
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	4a3e      	ldr	r2, [pc, #248]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6313      	str	r3, [r2, #48]	; 0x30
 80042ec:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6313      	str	r3, [r2, #48]	; 0x30
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4a32      	ldr	r2, [pc, #200]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 8004316:	f043 0302 	orr.w	r3, r3, #2
 800431a:	6313      	str	r3, [r2, #48]	; 0x30
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 800432e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004332:	6313      	str	r3, [r2, #48]	; 0x30
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_ETH_MspInit+0x16c>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004340:	2332      	movs	r3, #50	; 0x32
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	2302      	movs	r3, #2
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004350:	230b      	movs	r3, #11
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004358:	4619      	mov	r1, r3
 800435a:	4822      	ldr	r0, [pc, #136]	; (80043e4 <HAL_ETH_MspInit+0x170>)
 800435c:	f7fe fabe 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004360:	2386      	movs	r3, #134	; 0x86
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004364:	2302      	movs	r3, #2
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436c:	2303      	movs	r3, #3
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004370:	230b      	movs	r3, #11
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4619      	mov	r1, r3
 800437a:	481b      	ldr	r0, [pc, #108]	; (80043e8 <HAL_ETH_MspInit+0x174>)
 800437c:	f7fe faae 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004386:	2302      	movs	r3, #2
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438e:	2303      	movs	r3, #3
 8004390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004392:	230b      	movs	r3, #11
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800439a:	4619      	mov	r1, r3
 800439c:	4813      	ldr	r0, [pc, #76]	; (80043ec <HAL_ETH_MspInit+0x178>)
 800439e:	f7fe fa9d 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80043a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043b4:	230b      	movs	r3, #11
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043bc:	4619      	mov	r1, r3
 80043be:	480c      	ldr	r0, [pc, #48]	; (80043f0 <HAL_ETH_MspInit+0x17c>)
 80043c0:	f7fe fa8c 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2100      	movs	r1, #0
 80043c8:	203d      	movs	r0, #61	; 0x3d
 80043ca:	f7fd f8de 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80043ce:	203d      	movs	r0, #61	; 0x3d
 80043d0:	f7fd f8f7 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80043d4:	bf00      	nop
 80043d6:	3738      	adds	r7, #56	; 0x38
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40028000 	.word	0x40028000
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020000 	.word	0x40020000
 80043ec:	40020400 	.word	0x40020400
 80043f0:	40021800 	.word	0x40021800

080043f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004400:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <low_level_init+0x144>)
 8004402:	4a4e      	ldr	r2, [pc, #312]	; (800453c <low_level_init+0x148>)
 8004404:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004406:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <low_level_init+0x144>)
 8004408:	2201      	movs	r2, #1
 800440a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800440c:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <low_level_init+0x144>)
 800440e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004412:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004414:	4b48      	ldr	r3, [pc, #288]	; (8004538 <low_level_init+0x144>)
 8004416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800441c:	4b46      	ldr	r3, [pc, #280]	; (8004538 <low_level_init+0x144>)
 800441e:	2200      	movs	r2, #0
 8004420:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004422:	2300      	movs	r3, #0
 8004424:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800442a:	23e1      	movs	r3, #225	; 0xe1
 800442c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800442e:	2300      	movs	r3, #0
 8004430:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004432:	2300      	movs	r3, #0
 8004434:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004436:	2300      	movs	r3, #0
 8004438:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <low_level_init+0x144>)
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004442:	4b3d      	ldr	r3, [pc, #244]	; (8004538 <low_level_init+0x144>)
 8004444:	2200      	movs	r2, #0
 8004446:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <low_level_init+0x144>)
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800444e:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <low_level_init+0x144>)
 8004450:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004454:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004456:	4838      	ldr	r0, [pc, #224]	; (8004538 <low_level_init+0x144>)
 8004458:	f7fd f8ce 	bl	80015f8 <HAL_ETH_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	b2da      	uxtb	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004478:	2304      	movs	r3, #4
 800447a:	4a31      	ldr	r2, [pc, #196]	; (8004540 <low_level_init+0x14c>)
 800447c:	4931      	ldr	r1, [pc, #196]	; (8004544 <low_level_init+0x150>)
 800447e:	482e      	ldr	r0, [pc, #184]	; (8004538 <low_level_init+0x144>)
 8004480:	f7fd fa52 	bl	8001928 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004484:	2304      	movs	r3, #4
 8004486:	4a30      	ldr	r2, [pc, #192]	; (8004548 <low_level_init+0x154>)
 8004488:	4930      	ldr	r1, [pc, #192]	; (800454c <low_level_init+0x158>)
 800448a:	482b      	ldr	r0, [pc, #172]	; (8004538 <low_level_init+0x144>)
 800448c:	f7fd fab4 	bl	80019f8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2206      	movs	r2, #6
 8004494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <low_level_init+0x144>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <low_level_init+0x144>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	785a      	ldrb	r2, [r3, #1]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <low_level_init+0x144>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	789a      	ldrb	r2, [r3, #2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <low_level_init+0x144>)
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	78da      	ldrb	r2, [r3, #3]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <low_level_init+0x144>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	791a      	ldrb	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <low_level_init+0x144>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	795a      	ldrb	r2, [r3, #5]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80044e6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044ee:	f043 030a 	orr.w	r3, r3, #10
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80044fa:	480f      	ldr	r0, [pc, #60]	; (8004538 <low_level_init+0x144>)
 80044fc:	f7fd fda6 	bl	800204c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	461a      	mov	r2, r3
 8004506:	211d      	movs	r1, #29
 8004508:	480b      	ldr	r0, [pc, #44]	; (8004538 <low_level_init+0x144>)
 800450a:	f7fd fcd1 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	461a      	mov	r2, r3
 800451a:	211d      	movs	r1, #29
 800451c:	4806      	ldr	r0, [pc, #24]	; (8004538 <low_level_init+0x144>)
 800451e:	f7fd fd2f 	bl	8001f80 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	461a      	mov	r2, r3
 8004528:	211d      	movs	r1, #29
 800452a:	4803      	ldr	r0, [pc, #12]	; (8004538 <low_level_init+0x144>)
 800452c:	f7fd fcc0 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200031ec 	.word	0x200031ec
 800453c:	40028000 	.word	0x40028000
 8004540:	20001a1c 	.word	0x20001a1c
 8004544:	200001cc 	.word	0x200001cc
 8004548:	2000024c 	.word	0x2000024c
 800454c:	2000014c 	.word	0x2000014c

08004550 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800455a:	4b4b      	ldr	r3, [pc, #300]	; (8004688 <low_level_output+0x138>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004572:	4b45      	ldr	r3, [pc, #276]	; (8004688 <low_level_output+0x138>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	e05a      	b.n	8004638 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	da03      	bge.n	8004592 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800458a:	23f8      	movs	r3, #248	; 0xf8
 800458c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004590:	e05c      	b.n	800464c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	895b      	ldrh	r3, [r3, #10]
 8004596:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800459c:	e02f      	b.n	80045fe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	18d0      	adds	r0, r2, r3
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	18d1      	adds	r1, r2, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	f00b f9c5 	bl	800f944 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da03      	bge.n	80045d0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80045c8:	23f8      	movs	r3, #248	; 0xf8
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80045ce:	e03d      	b.n	800464c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80045e0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80045ec:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80045f8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004608:	4293      	cmp	r3, r2
 800460a:	d8c8      	bhi.n	800459e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	18d0      	adds	r0, r2, r3
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4413      	add	r3, r2
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4619      	mov	r1, r3
 800461e:	f00b f991 	bl	800f944 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1a1      	bne.n	8004582 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	4811      	ldr	r0, [pc, #68]	; (8004688 <low_level_output+0x138>)
 8004642:	f7fd fa45 	bl	8001ad0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <low_level_output+0x138>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <low_level_output+0x138>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	461a      	mov	r2, r3
 8004668:	2320      	movs	r3, #32
 800466a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <low_level_output+0x138>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004674:	461a      	mov	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800467a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800467e:	4618      	mov	r0, r3
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200031ec 	.word	0x200031ec

0800468c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80046b0:	484e      	ldr	r0, [pc, #312]	; (80047ec <low_level_input+0x160>)
 80046b2:	f7fd faf7 	bl	8001ca4 <HAL_ETH_GetReceivedFrame>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <low_level_input+0x34>

    return NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	e091      	b.n	80047e4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80046c0:	4b4a      	ldr	r3, [pc, #296]	; (80047ec <low_level_input+0x160>)
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <low_level_input+0x160>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80046d2:	89fb      	ldrh	r3, [r7, #14]
 80046d4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80046d8:	4619      	mov	r1, r3
 80046da:	2000      	movs	r0, #0
 80046dc:	f001 f9d2 	bl	8005a84 <pbuf_alloc>
 80046e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04b      	beq.n	8004780 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80046e8:	4b40      	ldr	r3, [pc, #256]	; (80047ec <low_level_input+0x160>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f6:	e040      	b.n	800477a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	895b      	ldrh	r3, [r3, #10]
 80046fc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004702:	e021      	b.n	8004748 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	18d0      	adds	r0, r2, r3
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	18d1      	adds	r1, r2, r3
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	461a      	mov	r2, r3
 800471c:	f00b f912 	bl	800f944 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004736:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004742:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004752:	4293      	cmp	r3, r2
 8004754:	d8d6      	bhi.n	8004704 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	18d0      	adds	r0, r2, r3
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4619      	mov	r1, r3
 8004768:	f00b f8ec 	bl	800f944 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	4413      	add	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1bb      	bne.n	80046f8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <low_level_input+0x160>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e00b      	b.n	80047a4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3301      	adds	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <low_level_input+0x160>)
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3ee      	bcc.n	800478c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <low_level_input+0x160>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <low_level_input+0x160>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <low_level_input+0x160>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ce:	461a      	mov	r2, r3
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <low_level_input+0x160>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047dc:	461a      	mov	r2, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	6093      	str	r3, [r2, #8]
  }
  return p;
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200031ec 	.word	0x200031ec

080047f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff47 	bl	800468c <low_level_input>
 80047fe:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	4798      	blx	r3
 8004810:	4603      	mov	r3, r0
 8004812:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004814:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f001 fc15 	bl	800604c <pbuf_free>
    p = NULL;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e000      	b.n	800482a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004828:	bf00      	nop
  }
}
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <ethernetif_init+0x1c>
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <ethernetif_init+0x48>)
 8004840:	f44f 7206 	mov.w	r2, #536	; 0x218
 8004844:	490d      	ldr	r1, [pc, #52]	; (800487c <ethernetif_init+0x4c>)
 8004846:	480e      	ldr	r0, [pc, #56]	; (8004880 <ethernetif_init+0x50>)
 8004848:	f00b f8ac 	bl	800f9a4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2273      	movs	r2, #115	; 0x73
 8004850:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2274      	movs	r2, #116	; 0x74
 8004858:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <ethernetif_init+0x54>)
 8004860:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <ethernetif_init+0x58>)
 8004866:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fdc3 	bl	80043f4 <low_level_init>

  return ERR_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	080110e4 	.word	0x080110e4
 800487c:	08011100 	.word	0x08011100
 8004880:	08011110 	.word	0x08011110
 8004884:	0800dabd 	.word	0x0800dabd
 8004888:	08004551 	.word	0x08004551

0800488c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004890:	f7fc fd70 	bl	8001374 <HAL_GetTick>
 8004894:	4603      	mov	r3, r0
}
 8004896:	4618      	mov	r0, r3
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 80048a8:	f7fc fd64 	bl	8001374 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b1b      	ldr	r3, [pc, #108]	; (800491c <ethernetif_set_link+0x80>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2bc7      	cmp	r3, #199	; 0xc7
 80048b6:	d92c      	bls.n	8004912 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 80048b8:	f7fc fd5c 	bl	8001374 <HAL_GetTick>
 80048bc:	4603      	mov	r3, r0
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <ethernetif_set_link+0x80>)
 80048c0:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80048c2:	f107 030c 	add.w	r3, r7, #12
 80048c6:	461a      	mov	r2, r3
 80048c8:	2101      	movs	r1, #1
 80048ca:	4815      	ldr	r0, [pc, #84]	; (8004920 <ethernetif_set_link+0x84>)
 80048cc:	f7fd faf0 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <ethernetif_set_link+0x58>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 ffc9 	bl	8005884 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 80048f2:	e00e      	b.n	8004912 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <ethernetif_set_link+0x76>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 ffed 	bl	80058ec <netif_set_link_down>
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20003234 	.word	0x20003234
 8004920:	200031ec 	.word	0x200031ec

08004924 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d05d      	beq.n	8004a02 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <ethernetif_update_config+0xf4>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d03f      	beq.n	80049ce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800494e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004952:	2100      	movs	r1, #0
 8004954:	4830      	ldr	r0, [pc, #192]	; (8004a18 <ethernetif_update_config+0xf4>)
 8004956:	f7fd fb13 	bl	8001f80 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800495a:	f7fc fd0b 	bl	8001374 <HAL_GetTick>
 800495e:	4603      	mov	r3, r0
 8004960:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004962:	f107 0308 	add.w	r3, r7, #8
 8004966:	461a      	mov	r2, r3
 8004968:	2101      	movs	r1, #1
 800496a:	482b      	ldr	r0, [pc, #172]	; (8004a18 <ethernetif_update_config+0xf4>)
 800496c:	f7fd faa0 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004970:	f7fc fd00 	bl	8001374 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800497e:	d828      	bhi.n	80049d2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0eb      	beq.n	8004962 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	461a      	mov	r2, r3
 8004990:	2110      	movs	r1, #16
 8004992:	4821      	ldr	r0, [pc, #132]	; (8004a18 <ethernetif_update_config+0xf4>)
 8004994:	f7fd fa8c 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	e002      	b.n	80049b2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	e016      	b.n	80049f2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e011      	b.n	80049f2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <ethernetif_update_config+0xb0>
          goto error;
 80049d2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80049d4:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	2100      	movs	r1, #0
 80049ec:	480a      	ldr	r0, [pc, #40]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049ee:	f7fd fac7 	bl	8001f80 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80049f2:	2100      	movs	r1, #0
 80049f4:	4808      	ldr	r0, [pc, #32]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049f6:	f7fd fb87 	bl	8002108 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <ethernetif_update_config+0xf4>)
 80049fc:	f7fd fb26 	bl	800204c <HAL_ETH_Start>
 8004a00:	e002      	b.n	8004a08 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004a02:	4805      	ldr	r0, [pc, #20]	; (8004a18 <ethernetif_update_config+0xf4>)
 8004a04:	f7fd fb51 	bl	80020aa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc fbe7 	bl	80011dc <ethernetif_notify_conn_changed>
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200031ec 	.word	0x200031ec

08004a1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	b21a      	sxth	r2, r3
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	4313      	orrs	r3, r2
 8004a36:	b21b      	sxth	r3, r3
 8004a38:	b29b      	uxth	r3, r3
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	061a      	lsls	r2, r3, #24
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	4313      	orrs	r3, r2
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a82:	f000 f8d5 	bl	8004c30 <mem_init>
  memp_init();
 8004a86:	f000 fbdb 	bl	8005240 <memp_init>
  pbuf_init();
  netif_init();
 8004a8a:	f000 fc93 	bl	80053b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a8e:	f008 f9e1 	bl	800ce54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a92:	f001 fdfb 	bl	800668c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004a96:	f008 f953 	bl	800cd40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <ptr_to_mem+0x20>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	4413      	add	r3, r2
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20005a64 	.word	0x20005a64

08004ac8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <mem_to_ptr+0x20>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	b29b      	uxth	r3, r3
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20005a64 	.word	0x20005a64

08004aec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <plug_holes+0x120>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d206      	bcs.n	8004b0c <plug_holes+0x20>
 8004afe:	4b44      	ldr	r3, [pc, #272]	; (8004c10 <plug_holes+0x124>)
 8004b00:	f240 12df 	movw	r2, #479	; 0x1df
 8004b04:	4943      	ldr	r1, [pc, #268]	; (8004c14 <plug_holes+0x128>)
 8004b06:	4844      	ldr	r0, [pc, #272]	; (8004c18 <plug_holes+0x12c>)
 8004b08:	f00a ff4c 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004b0c:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <plug_holes+0x130>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d306      	bcc.n	8004b24 <plug_holes+0x38>
 8004b16:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <plug_holes+0x124>)
 8004b18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b1c:	4940      	ldr	r1, [pc, #256]	; (8004c20 <plug_holes+0x134>)
 8004b1e:	483e      	ldr	r0, [pc, #248]	; (8004c18 <plug_holes+0x12c>)
 8004b20:	f00a ff40 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	791b      	ldrb	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d006      	beq.n	8004b3a <plug_holes+0x4e>
 8004b2c:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <plug_holes+0x124>)
 8004b2e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004b32:	493c      	ldr	r1, [pc, #240]	; (8004c24 <plug_holes+0x138>)
 8004b34:	4838      	ldr	r0, [pc, #224]	; (8004c18 <plug_holes+0x12c>)
 8004b36:	f00a ff35 	bl	800f9a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b42:	d906      	bls.n	8004b52 <plug_holes+0x66>
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <plug_holes+0x124>)
 8004b46:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004b4a:	4937      	ldr	r1, [pc, #220]	; (8004c28 <plug_holes+0x13c>)
 8004b4c:	4832      	ldr	r0, [pc, #200]	; (8004c18 <plug_holes+0x12c>)
 8004b4e:	f00a ff29 	bl	800f9a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ffa4 	bl	8004aa4 <ptr_to_mem>
 8004b5c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d024      	beq.n	8004bb0 <plug_holes+0xc4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	791b      	ldrb	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d120      	bne.n	8004bb0 <plug_holes+0xc4>
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <plug_holes+0x130>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d01b      	beq.n	8004bb0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b78:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <plug_holes+0x140>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d102      	bne.n	8004b88 <plug_holes+0x9c>
      lfree = mem;
 8004b82:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <plug_holes+0x140>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b98:	d00a      	beq.n	8004bb0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff80 	bl	8004aa4 <ptr_to_mem>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff8e 	bl	8004ac8 <mem_to_ptr>
 8004bac:	4603      	mov	r3, r0
 8004bae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	885b      	ldrh	r3, [r3, #2]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff75 	bl	8004aa4 <ptr_to_mem>
 8004bba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d01f      	beq.n	8004c04 <plug_holes+0x118>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11b      	bne.n	8004c04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <plug_holes+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d102      	bne.n	8004bdc <plug_holes+0xf0>
      lfree = pmem;
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <plug_holes+0x140>)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bec:	d00a      	beq.n	8004c04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff56 	bl	8004aa4 <ptr_to_mem>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f7ff ff64 	bl	8004ac8 <mem_to_ptr>
 8004c00:	4603      	mov	r3, r0
 8004c02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	20005a64 	.word	0x20005a64
 8004c10:	08011138 	.word	0x08011138
 8004c14:	08011168 	.word	0x08011168
 8004c18:	08011180 	.word	0x08011180
 8004c1c:	20005a68 	.word	0x20005a68
 8004c20:	080111a8 	.word	0x080111a8
 8004c24:	080111c4 	.word	0x080111c4
 8004c28:	080111e0 	.word	0x080111e0
 8004c2c:	20005a6c 	.word	0x20005a6c

08004c30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <mem_init+0x68>)
 8004c38:	3303      	adds	r3, #3
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <mem_init+0x6c>)
 8004c42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <mem_init+0x6c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c5e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004c62:	f7ff ff1f 	bl	8004aa4 <ptr_to_mem>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <mem_init+0x70>)
 8004c6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <mem_init+0x70>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <mem_init+0x70>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <mem_init+0x70>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004c86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <mem_init+0x6c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <mem_init+0x74>)
 8004c8e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20003250 	.word	0x20003250
 8004c9c:	20005a64 	.word	0x20005a64
 8004ca0:	20005a68 	.word	0x20005a68
 8004ca4:	20005a6c 	.word	0x20005a6c

08004ca8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ff09 	bl	8004ac8 <mem_to_ptr>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fef0 	bl	8004aa4 <ptr_to_mem>
 8004cc4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	885b      	ldrh	r3, [r3, #2]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff feea 	bl	8004aa4 <ptr_to_mem>
 8004cd0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004cda:	d818      	bhi.n	8004d0e <mem_link_valid+0x66>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	885b      	ldrh	r3, [r3, #2]
 8004ce0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ce4:	d813      	bhi.n	8004d0e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cea:	8afa      	ldrh	r2, [r7, #22]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d004      	beq.n	8004cfa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	8afa      	ldrh	r2, [r7, #22]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d109      	bne.n	8004d0e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <mem_link_valid+0x74>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d006      	beq.n	8004d12 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	885b      	ldrh	r3, [r3, #2]
 8004d08:	8afa      	ldrh	r2, [r7, #22]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d001      	beq.n	8004d12 <mem_link_valid+0x6a>
    return 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <mem_link_valid+0x6c>
  }
  return 1;
 8004d12:	2301      	movs	r3, #1
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20005a68 	.word	0x20005a68

08004d20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04c      	beq.n	8004dc8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <mem_free+0xb0>)
 8004d3a:	f240 2273 	movw	r2, #627	; 0x273
 8004d3e:	4925      	ldr	r1, [pc, #148]	; (8004dd4 <mem_free+0xb4>)
 8004d40:	4825      	ldr	r0, [pc, #148]	; (8004dd8 <mem_free+0xb8>)
 8004d42:	f00a fe2f 	bl	800f9a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d46:	e040      	b.n	8004dca <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3b08      	subs	r3, #8
 8004d4c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <mem_free+0xbc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d306      	bcc.n	8004d66 <mem_free+0x46>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f103 020c 	add.w	r2, r3, #12
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <mem_free+0xc0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d907      	bls.n	8004d76 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <mem_free+0xb0>)
 8004d68:	f240 227f 	movw	r2, #639	; 0x27f
 8004d6c:	491d      	ldr	r1, [pc, #116]	; (8004de4 <mem_free+0xc4>)
 8004d6e:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <mem_free+0xb8>)
 8004d70:	f00a fe18 	bl	800f9a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d74:	e029      	b.n	8004dca <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	791b      	ldrb	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <mem_free+0xb0>)
 8004d80:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004d84:	4918      	ldr	r1, [pc, #96]	; (8004de8 <mem_free+0xc8>)
 8004d86:	4814      	ldr	r0, [pc, #80]	; (8004dd8 <mem_free+0xb8>)
 8004d88:	f00a fe0c 	bl	800f9a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d8c:	e01d      	b.n	8004dca <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff ff8a 	bl	8004ca8 <mem_link_valid>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <mem_free+0xb0>)
 8004d9c:	f240 2295 	movw	r2, #661	; 0x295
 8004da0:	4912      	ldr	r1, [pc, #72]	; (8004dec <mem_free+0xcc>)
 8004da2:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <mem_free+0xb8>)
 8004da4:	f00a fdfe 	bl	800f9a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004da8:	e00f      	b.n	8004dca <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <mem_free+0xd0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d202      	bcs.n	8004dc0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004dba:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <mem_free+0xd0>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fe93 	bl	8004aec <plug_holes>
 8004dc6:	e000      	b.n	8004dca <mem_free+0xaa>
    return;
 8004dc8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08011138 	.word	0x08011138
 8004dd4:	0801120c 	.word	0x0801120c
 8004dd8:	08011180 	.word	0x08011180
 8004ddc:	20005a64 	.word	0x20005a64
 8004de0:	20005a68 	.word	0x20005a68
 8004de4:	08011230 	.word	0x08011230
 8004de8:	0801124c 	.word	0x0801124c
 8004dec:	08011274 	.word	0x08011274
 8004df0:	20005a6c 	.word	0x20005a6c

08004df4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	3303      	adds	r3, #3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004e0c:	8bfb      	ldrh	r3, [r7, #30]
 8004e0e:	2b0b      	cmp	r3, #11
 8004e10:	d801      	bhi.n	8004e16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004e12:	230c      	movs	r3, #12
 8004e14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004e16:	8bfb      	ldrh	r3, [r7, #30]
 8004e18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004e1c:	d803      	bhi.n	8004e26 <mem_trim+0x32>
 8004e1e:	8bfa      	ldrh	r2, [r7, #30]
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d201      	bcs.n	8004e2a <mem_trim+0x36>
    return NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e0cc      	b.n	8004fc4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e2a:	4b68      	ldr	r3, [pc, #416]	; (8004fcc <mem_trim+0x1d8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d304      	bcc.n	8004e3e <mem_trim+0x4a>
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <mem_trim+0x1dc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d306      	bcc.n	8004e4c <mem_trim+0x58>
 8004e3e:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <mem_trim+0x1e0>)
 8004e40:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004e44:	4964      	ldr	r1, [pc, #400]	; (8004fd8 <mem_trim+0x1e4>)
 8004e46:	4865      	ldr	r0, [pc, #404]	; (8004fdc <mem_trim+0x1e8>)
 8004e48:	f00a fdac 	bl	800f9a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e4c:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <mem_trim+0x1d8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d304      	bcc.n	8004e60 <mem_trim+0x6c>
 8004e56:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <mem_trim+0x1dc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d301      	bcc.n	8004e64 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	e0af      	b.n	8004fc4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3b08      	subs	r3, #8
 8004e68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004e6a:	69b8      	ldr	r0, [r7, #24]
 8004e6c:	f7ff fe2c 	bl	8004ac8 <mem_to_ptr>
 8004e70:	4603      	mov	r3, r0
 8004e72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	8afb      	ldrh	r3, [r7, #22]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b08      	subs	r3, #8
 8004e80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e82:	8bfa      	ldrh	r2, [r7, #30]
 8004e84:	8abb      	ldrh	r3, [r7, #20]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d906      	bls.n	8004e98 <mem_trim+0xa4>
 8004e8a:	4b52      	ldr	r3, [pc, #328]	; (8004fd4 <mem_trim+0x1e0>)
 8004e8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004e90:	4953      	ldr	r1, [pc, #332]	; (8004fe0 <mem_trim+0x1ec>)
 8004e92:	4852      	ldr	r0, [pc, #328]	; (8004fdc <mem_trim+0x1e8>)
 8004e94:	f00a fd86 	bl	800f9a4 <iprintf>
  if (newsize > size) {
 8004e98:	8bfa      	ldrh	r2, [r7, #30]
 8004e9a:	8abb      	ldrh	r3, [r7, #20]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d901      	bls.n	8004ea4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e08f      	b.n	8004fc4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004ea4:	8bfa      	ldrh	r2, [r7, #30]
 8004ea6:	8abb      	ldrh	r3, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d101      	bne.n	8004eb0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	e089      	b.n	8004fc4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fdf5 	bl	8004aa4 <ptr_to_mem>
 8004eba:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	791b      	ldrb	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d13f      	bne.n	8004f44 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ecc:	d106      	bne.n	8004edc <mem_trim+0xe8>
 8004ece:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <mem_trim+0x1e0>)
 8004ed0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004ed4:	4943      	ldr	r1, [pc, #268]	; (8004fe4 <mem_trim+0x1f0>)
 8004ed6:	4841      	ldr	r0, [pc, #260]	; (8004fdc <mem_trim+0x1e8>)
 8004ed8:	f00a fd64 	bl	800f9a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ee2:	8afa      	ldrh	r2, [r7, #22]
 8004ee4:	8bfb      	ldrh	r3, [r7, #30]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3308      	adds	r3, #8
 8004eec:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004eee:	4b3e      	ldr	r3, [pc, #248]	; (8004fe8 <mem_trim+0x1f4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ef8:	89fb      	ldrh	r3, [r7, #14]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fdd2 	bl	8004aa4 <ptr_to_mem>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <mem_trim+0x1f4>)
 8004f04:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fdcb 	bl	8004aa4 <ptr_to_mem>
 8004f0e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2200      	movs	r2, #0
 8004f14:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	89ba      	ldrh	r2, [r7, #12]
 8004f1a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	8afa      	ldrh	r2, [r7, #22]
 8004f20:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	89fa      	ldrh	r2, [r7, #14]
 8004f26:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f30:	d047      	beq.n	8004fc2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fdb4 	bl	8004aa4 <ptr_to_mem>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	89fb      	ldrh	r3, [r7, #14]
 8004f40:	8053      	strh	r3, [r2, #2]
 8004f42:	e03e      	b.n	8004fc2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f44:	8bfb      	ldrh	r3, [r7, #30]
 8004f46:	f103 0214 	add.w	r2, r3, #20
 8004f4a:	8abb      	ldrh	r3, [r7, #20]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d838      	bhi.n	8004fc2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	8bfb      	ldrh	r3, [r7, #30]
 8004f54:	4413      	add	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3308      	adds	r3, #8
 8004f5a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f64:	d106      	bne.n	8004f74 <mem_trim+0x180>
 8004f66:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <mem_trim+0x1e0>)
 8004f68:	f240 3216 	movw	r2, #790	; 0x316
 8004f6c:	491d      	ldr	r1, [pc, #116]	; (8004fe4 <mem_trim+0x1f0>)
 8004f6e:	481b      	ldr	r0, [pc, #108]	; (8004fdc <mem_trim+0x1e8>)
 8004f70:	f00a fd18 	bl	800f9a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004f74:	89fb      	ldrh	r3, [r7, #14]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fd94 	bl	8004aa4 <ptr_to_mem>
 8004f7c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <mem_trim+0x1f4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d202      	bcs.n	8004f8e <mem_trim+0x19a>
      lfree = mem2;
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <mem_trim+0x1f4>)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2200      	movs	r2, #0
 8004f92:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	881a      	ldrh	r2, [r3, #0]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	8afa      	ldrh	r2, [r7, #22]
 8004fa0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	89fa      	ldrh	r2, [r7, #14]
 8004fa6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004fb0:	d007      	beq.n	8004fc2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd74 	bl	8004aa4 <ptr_to_mem>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004fc2:	687b      	ldr	r3, [r7, #4]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20005a64 	.word	0x20005a64
 8004fd0:	20005a68 	.word	0x20005a68
 8004fd4:	08011138 	.word	0x08011138
 8004fd8:	080112a8 	.word	0x080112a8
 8004fdc:	08011180 	.word	0x08011180
 8004fe0:	080112c0 	.word	0x080112c0
 8004fe4:	080112e0 	.word	0x080112e0
 8004fe8:	20005a6c 	.word	0x20005a6c

08004fec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <mem_malloc+0x14>
    return NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e0d9      	b.n	80051b4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	3303      	adds	r3, #3
 8005004:	b29b      	uxth	r3, r3
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800500c:	8bbb      	ldrh	r3, [r7, #28]
 800500e:	2b0b      	cmp	r3, #11
 8005010:	d801      	bhi.n	8005016 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005012:	230c      	movs	r3, #12
 8005014:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005016:	8bbb      	ldrh	r3, [r7, #28]
 8005018:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800501c:	d803      	bhi.n	8005026 <mem_malloc+0x3a>
 800501e:	8bba      	ldrh	r2, [r7, #28]
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	429a      	cmp	r2, r3
 8005024:	d201      	bcs.n	800502a <mem_malloc+0x3e>
    return NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	e0c4      	b.n	80051b4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800502a:	4b64      	ldr	r3, [pc, #400]	; (80051bc <mem_malloc+0x1d0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fd4a 	bl	8004ac8 <mem_to_ptr>
 8005034:	4603      	mov	r3, r0
 8005036:	83fb      	strh	r3, [r7, #30]
 8005038:	e0b4      	b.n	80051a4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fd31 	bl	8004aa4 <ptr_to_mem>
 8005042:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	791b      	ldrb	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 80a4 	bne.w	8005196 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	8bfb      	ldrh	r3, [r7, #30]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f1a3 0208 	sub.w	r2, r3, #8
 800505c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800505e:	429a      	cmp	r2, r3
 8005060:	f0c0 8099 	bcc.w	8005196 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	8bfb      	ldrh	r3, [r7, #30]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f1a3 0208 	sub.w	r2, r3, #8
 8005072:	8bbb      	ldrh	r3, [r7, #28]
 8005074:	3314      	adds	r3, #20
 8005076:	429a      	cmp	r2, r3
 8005078:	d333      	bcc.n	80050e2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800507a:	8bfa      	ldrh	r2, [r7, #30]
 800507c:	8bbb      	ldrh	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	3308      	adds	r3, #8
 8005084:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005086:	8a7b      	ldrh	r3, [r7, #18]
 8005088:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800508c:	d106      	bne.n	800509c <mem_malloc+0xb0>
 800508e:	4b4c      	ldr	r3, [pc, #304]	; (80051c0 <mem_malloc+0x1d4>)
 8005090:	f240 3287 	movw	r2, #903	; 0x387
 8005094:	494b      	ldr	r1, [pc, #300]	; (80051c4 <mem_malloc+0x1d8>)
 8005096:	484c      	ldr	r0, [pc, #304]	; (80051c8 <mem_malloc+0x1dc>)
 8005098:	f00a fc84 	bl	800f9a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800509c:	8a7b      	ldrh	r3, [r7, #18]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fd00 	bl	8004aa4 <ptr_to_mem>
 80050a4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8bfa      	ldrh	r2, [r7, #30]
 80050b8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	8a7a      	ldrh	r2, [r7, #18]
 80050be:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2201      	movs	r2, #1
 80050c4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050ce:	d00b      	beq.n	80050e8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fce5 	bl	8004aa4 <ptr_to_mem>
 80050da:	4602      	mov	r2, r0
 80050dc:	8a7b      	ldrh	r3, [r7, #18]
 80050de:	8053      	strh	r3, [r2, #2]
 80050e0:	e002      	b.n	80050e8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2201      	movs	r2, #1
 80050e6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80050e8:	4b34      	ldr	r3, [pc, #208]	; (80051bc <mem_malloc+0x1d0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d127      	bne.n	8005142 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <mem_malloc+0x1d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80050f8:	e005      	b.n	8005106 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fcd0 	bl	8004aa4 <ptr_to_mem>
 8005104:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	791b      	ldrb	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <mem_malloc+0x12c>
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <mem_malloc+0x1e0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d1f0      	bne.n	80050fa <mem_malloc+0x10e>
          }
          lfree = cur;
 8005118:	4a28      	ldr	r2, [pc, #160]	; (80051bc <mem_malloc+0x1d0>)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800511e:	4b27      	ldr	r3, [pc, #156]	; (80051bc <mem_malloc+0x1d0>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <mem_malloc+0x1e0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d00b      	beq.n	8005142 <mem_malloc+0x156>
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <mem_malloc+0x1d0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	791b      	ldrb	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <mem_malloc+0x156>
 8005134:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <mem_malloc+0x1d4>)
 8005136:	f240 32b5 	movw	r2, #949	; 0x3b5
 800513a:	4925      	ldr	r1, [pc, #148]	; (80051d0 <mem_malloc+0x1e4>)
 800513c:	4822      	ldr	r0, [pc, #136]	; (80051c8 <mem_malloc+0x1dc>)
 800513e:	f00a fc31 	bl	800f9a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005142:	8bba      	ldrh	r2, [r7, #28]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	3308      	adds	r3, #8
 800514a:	4a20      	ldr	r2, [pc, #128]	; (80051cc <mem_malloc+0x1e0>)
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	4293      	cmp	r3, r2
 8005150:	d906      	bls.n	8005160 <mem_malloc+0x174>
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <mem_malloc+0x1d4>)
 8005154:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005158:	491e      	ldr	r1, [pc, #120]	; (80051d4 <mem_malloc+0x1e8>)
 800515a:	481b      	ldr	r0, [pc, #108]	; (80051c8 <mem_malloc+0x1dc>)
 800515c:	f00a fc22 	bl	800f9a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d006      	beq.n	8005178 <mem_malloc+0x18c>
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <mem_malloc+0x1d4>)
 800516c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005170:	4919      	ldr	r1, [pc, #100]	; (80051d8 <mem_malloc+0x1ec>)
 8005172:	4815      	ldr	r0, [pc, #84]	; (80051c8 <mem_malloc+0x1dc>)
 8005174:	f00a fc16 	bl	800f9a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <mem_malloc+0x1a4>
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <mem_malloc+0x1d4>)
 8005184:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005188:	4914      	ldr	r1, [pc, #80]	; (80051dc <mem_malloc+0x1f0>)
 800518a:	480f      	ldr	r0, [pc, #60]	; (80051c8 <mem_malloc+0x1dc>)
 800518c:	f00a fc0a 	bl	800f9a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3308      	adds	r3, #8
 8005194:	e00e      	b.n	80051b4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fc83 	bl	8004aa4 <ptr_to_mem>
 800519e:	4603      	mov	r3, r0
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80051a4:	8bfa      	ldrh	r2, [r7, #30]
 80051a6:	8bbb      	ldrh	r3, [r7, #28]
 80051a8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80051ac:	429a      	cmp	r2, r3
 80051ae:	f4ff af44 	bcc.w	800503a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20005a6c 	.word	0x20005a6c
 80051c0:	08011138 	.word	0x08011138
 80051c4:	080112e0 	.word	0x080112e0
 80051c8:	08011180 	.word	0x08011180
 80051cc:	20005a68 	.word	0x20005a68
 80051d0:	080112f4 	.word	0x080112f4
 80051d4:	08011310 	.word	0x08011310
 80051d8:	08011340 	.word	0x08011340
 80051dc:	08011370 	.word	0x08011370

080051e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	3303      	adds	r3, #3
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e011      	b.n	8005226 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	889b      	ldrh	r3, [r3, #4]
 8005218:	461a      	mov	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	88db      	ldrh	r3, [r3, #6]
 800522a:	461a      	mov	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4293      	cmp	r3, r2
 8005230:	dbe7      	blt.n	8005202 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005246:	2300      	movs	r3, #0
 8005248:	80fb      	strh	r3, [r7, #6]
 800524a:	e009      	b.n	8005260 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4a08      	ldr	r2, [pc, #32]	; (8005270 <memp_init+0x30>)
 8005250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ffc3 	bl	80051e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	3301      	adds	r3, #1
 800525e:	80fb      	strh	r3, [r7, #6]
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d9f2      	bls.n	800524c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	08014740 	.word	0x08014740

08005274 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d012      	beq.n	80052b0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <do_memp_malloc_pool+0x38>
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <do_memp_malloc_pool+0x48>)
 80052a0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80052a4:	4906      	ldr	r1, [pc, #24]	; (80052c0 <do_memp_malloc_pool+0x4c>)
 80052a6:	4807      	ldr	r0, [pc, #28]	; (80052c4 <do_memp_malloc_pool+0x50>)
 80052a8:	f00a fb7c 	bl	800f9a4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e000      	b.n	80052b2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	080113fc 	.word	0x080113fc
 80052c0:	0801142c 	.word	0x0801142c
 80052c4:	08011450 	.word	0x08011450

080052c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d908      	bls.n	80052ea <memp_malloc+0x22>
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <memp_malloc+0x3c>)
 80052da:	f240 1257 	movw	r2, #343	; 0x157
 80052de:	490a      	ldr	r1, [pc, #40]	; (8005308 <memp_malloc+0x40>)
 80052e0:	480a      	ldr	r0, [pc, #40]	; (800530c <memp_malloc+0x44>)
 80052e2:	f00a fb5f 	bl	800f9a4 <iprintf>
 80052e6:	2300      	movs	r3, #0
 80052e8:	e008      	b.n	80052fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	4a08      	ldr	r2, [pc, #32]	; (8005310 <memp_malloc+0x48>)
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ffbe 	bl	8005274 <do_memp_malloc_pool>
 80052f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	080113fc 	.word	0x080113fc
 8005308:	0801148c 	.word	0x0801148c
 800530c:	08011450 	.word	0x08011450
 8005310:	08014740 	.word	0x08014740

08005314 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <do_memp_free_pool+0x22>
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <do_memp_free_pool+0x40>)
 800532a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <do_memp_free_pool+0x44>)
 8005330:	480a      	ldr	r0, [pc, #40]	; (800535c <do_memp_free_pool+0x48>)
 8005332:	f00a fb37 	bl	800f9a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	080113fc 	.word	0x080113fc
 8005358:	080114ac 	.word	0x080114ac
 800535c:	08011450 	.word	0x08011450

08005360 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	6039      	str	r1, [r7, #0]
 800536a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b08      	cmp	r3, #8
 8005370:	d907      	bls.n	8005382 <memp_free+0x22>
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <memp_free+0x44>)
 8005374:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005378:	490b      	ldr	r1, [pc, #44]	; (80053a8 <memp_free+0x48>)
 800537a:	480c      	ldr	r0, [pc, #48]	; (80053ac <memp_free+0x4c>)
 800537c:	f00a fb12 	bl	800f9a4 <iprintf>
 8005380:	e00c      	b.n	800539c <memp_free+0x3c>

  if (mem == NULL) {
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <memp_free+0x50>)
 800538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ffbe 	bl	8005314 <do_memp_free_pool>
 8005398:	e000      	b.n	800539c <memp_free+0x3c>
    return;
 800539a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	080113fc 	.word	0x080113fc
 80053a8:	080114cc 	.word	0x080114cc
 80053ac:	08011450 	.word	0x08011450
 80053b0:	08014740 	.word	0x08014740

080053b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <netif_add+0x26>
 80053d8:	4b57      	ldr	r3, [pc, #348]	; (8005538 <netif_add+0x174>)
 80053da:	f240 1227 	movw	r2, #295	; 0x127
 80053de:	4957      	ldr	r1, [pc, #348]	; (800553c <netif_add+0x178>)
 80053e0:	4857      	ldr	r0, [pc, #348]	; (8005540 <netif_add+0x17c>)
 80053e2:	f00a fadf 	bl	800f9a4 <iprintf>
 80053e6:	2300      	movs	r3, #0
 80053e8:	e0a2      	b.n	8005530 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <netif_add+0x3e>
 80053f0:	4b51      	ldr	r3, [pc, #324]	; (8005538 <netif_add+0x174>)
 80053f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80053f6:	4953      	ldr	r1, [pc, #332]	; (8005544 <netif_add+0x180>)
 80053f8:	4851      	ldr	r0, [pc, #324]	; (8005540 <netif_add+0x17c>)
 80053fa:	f00a fad3 	bl	800f9a4 <iprintf>
 80053fe:	2300      	movs	r3, #0
 8005400:	e096      	b.n	8005530 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005408:	4b4f      	ldr	r3, [pc, #316]	; (8005548 <netif_add+0x184>)
 800540a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005412:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <netif_add+0x184>)
 8005414:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800541c:	4b4a      	ldr	r3, [pc, #296]	; (8005548 <netif_add+0x184>)
 800541e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a45      	ldr	r2, [pc, #276]	; (800554c <netif_add+0x188>)
 8005436:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005452:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <netif_add+0x18c>)
 8005454:	781a      	ldrb	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f913 	bl	8005694 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	4798      	blx	r3
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <netif_add+0xba>
    return NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	e058      	b.n	8005530 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005484:	2bff      	cmp	r3, #255	; 0xff
 8005486:	d103      	bne.n	8005490 <netif_add+0xcc>
        netif->num = 0;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005494:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <netif_add+0x190>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e02b      	b.n	80054f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d106      	bne.n	80054b2 <netif_add+0xee>
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <netif_add+0x174>)
 80054a6:	f240 128b 	movw	r2, #395	; 0x18b
 80054aa:	492b      	ldr	r1, [pc, #172]	; (8005558 <netif_add+0x194>)
 80054ac:	4824      	ldr	r0, [pc, #144]	; (8005540 <netif_add+0x17c>)
 80054ae:	f00a fa79 	bl	800f9a4 <iprintf>
        num_netifs++;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	dd06      	ble.n	80054cc <netif_add+0x108>
 80054be:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <netif_add+0x174>)
 80054c0:	f240 128d 	movw	r2, #397	; 0x18d
 80054c4:	4925      	ldr	r1, [pc, #148]	; (800555c <netif_add+0x198>)
 80054c6:	481e      	ldr	r0, [pc, #120]	; (8005540 <netif_add+0x17c>)
 80054c8:	f00a fa6c 	bl	800f9a4 <iprintf>
        if (netif2->num == netif->num) {
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d8:	429a      	cmp	r2, r3
 80054da:	d108      	bne.n	80054ee <netif_add+0x12a>
          netif->num++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054e2:	3301      	adds	r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80054ec:	e005      	b.n	80054fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d0      	bne.n	800549c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1be      	bne.n	800547e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005506:	2bfe      	cmp	r3, #254	; 0xfe
 8005508:	d103      	bne.n	8005512 <netif_add+0x14e>
    netif_num = 0;
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <netif_add+0x18c>)
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e006      	b.n	8005520 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005518:	3301      	adds	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <netif_add+0x18c>)
 800551e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <netif_add+0x190>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <netif_add+0x190>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	080114e8 	.word	0x080114e8
 800553c:	0801157c 	.word	0x0801157c
 8005540:	08011538 	.word	0x08011538
 8005544:	08011598 	.word	0x08011598
 8005548:	080147d0 	.word	0x080147d0
 800554c:	0800596f 	.word	0x0800596f
 8005550:	200089a4 	.word	0x200089a4
 8005554:	2000899c 	.word	0x2000899c
 8005558:	080115bc 	.word	0x080115bc
 800555c:	080115d0 	.word	0x080115d0

08005560 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f002 fec7 	bl	8008300 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f007 fdf7 	bl	800d168 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <netif_do_set_ipaddr+0x20>
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <netif_do_set_ipaddr+0x88>)
 8005598:	f240 12cb 	movw	r2, #459	; 0x1cb
 800559c:	491c      	ldr	r1, [pc, #112]	; (8005610 <netif_do_set_ipaddr+0x8c>)
 800559e:	481d      	ldr	r0, [pc, #116]	; (8005614 <netif_do_set_ipaddr+0x90>)
 80055a0:	f00a fa00 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <netif_do_set_ipaddr+0x34>
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <netif_do_set_ipaddr+0x88>)
 80055ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80055b0:	4917      	ldr	r1, [pc, #92]	; (8005610 <netif_do_set_ipaddr+0x8c>)
 80055b2:	4818      	ldr	r0, [pc, #96]	; (8005614 <netif_do_set_ipaddr+0x90>)
 80055b4:	f00a f9f6 	bl	800f9a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3304      	adds	r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d01c      	beq.n	8005600 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3304      	adds	r3, #4
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ffbf 	bl	8005560 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <netif_do_set_ipaddr+0x6a>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	e000      	b.n	80055f0 <netif_do_set_ipaddr+0x6c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80055f4:	2101      	movs	r1, #1
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f8d2 	bl	80057a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	080114e8 	.word	0x080114e8
 8005610:	08011600 	.word	0x08011600
 8005614:	08011538 	.word	0x08011538

08005618 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3308      	adds	r3, #8
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d00a      	beq.n	8005648 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <netif_do_set_netmask+0x26>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	e000      	b.n	8005640 <netif_do_set_netmask+0x28>
 800563e:	2300      	movs	r3, #0
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	330c      	adds	r3, #12
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d00a      	beq.n	8005686 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <netif_do_set_gw+0x26>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	e000      	b.n	800567e <netif_do_set_gw+0x28>
 800567c:	2300      	movs	r3, #0
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <netif_set_addr+0x90>)
 80056b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <netif_set_addr+0x90>)
 80056bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <netif_set_addr+0x90>)
 80056c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <netif_set_addr+0x42>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <netif_set_addr+0x46>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <netif_set_addr+0x48>
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d006      	beq.n	80056f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	461a      	mov	r2, r3
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ff49 	bl	8005584 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff ff8e 	bl	8005618 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ffa8 	bl	8005656 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	461a      	mov	r2, r3
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff35 	bl	8005584 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800571a:	bf00      	nop
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	080147d0 	.word	0x080147d0

08005728 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <netif_set_default+0x1c>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	200089a0 	.word	0x200089a0

08005748 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <netif_set_up+0x1e>
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <netif_set_up+0x4c>)
 8005758:	f44f 7254 	mov.w	r2, #848	; 0x350
 800575c:	490e      	ldr	r1, [pc, #56]	; (8005798 <netif_set_up+0x50>)
 800575e:	480f      	ldr	r0, [pc, #60]	; (800579c <netif_set_up+0x54>)
 8005760:	f00a f920 	bl	800f9a4 <iprintf>
 8005764:	e013      	b.n	800578e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10c      	bne.n	800578e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005786:	2103      	movs	r1, #3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f809 	bl	80057a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	080114e8 	.word	0x080114e8
 8005798:	08011670 	.word	0x08011670
 800579c:	08011538 	.word	0x08011538

080057a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <netif_issue_reports+0x20>
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <netif_issue_reports+0x74>)
 80057b4:	f240 326d 	movw	r2, #877	; 0x36d
 80057b8:	4917      	ldr	r1, [pc, #92]	; (8005818 <netif_issue_reports+0x78>)
 80057ba:	4818      	ldr	r0, [pc, #96]	; (800581c <netif_issue_reports+0x7c>)
 80057bc:	f00a f8f2 	bl	800f9a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01e      	beq.n	800580c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d013      	beq.n	800580e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f008 fc47 	bl	800e098 <etharp_request>
 800580a:	e000      	b.n	800580e <netif_issue_reports+0x6e>
    return;
 800580c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	080114e8 	.word	0x080114e8
 8005818:	0801168c 	.word	0x0801168c
 800581c:	08011538 	.word	0x08011538

08005820 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <netif_set_down+0x1e>
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <netif_set_down+0x58>)
 8005830:	f240 329b 	movw	r2, #923	; 0x39b
 8005834:	4911      	ldr	r1, [pc, #68]	; (800587c <netif_set_down+0x5c>)
 8005836:	4812      	ldr	r0, [pc, #72]	; (8005880 <netif_set_down+0x60>)
 8005838:	f00a f8b4 	bl	800f9a4 <iprintf>
 800583c:	e019      	b.n	8005872 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d012      	beq.n	8005872 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f007 ffd1 	bl	800d814 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	080114e8 	.word	0x080114e8
 800587c:	080116b0 	.word	0x080116b0
 8005880:	08011538 	.word	0x08011538

08005884 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d107      	bne.n	80058a2 <netif_set_link_up+0x1e>
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <netif_set_link_up+0x5c>)
 8005894:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005898:	4912      	ldr	r1, [pc, #72]	; (80058e4 <netif_set_link_up+0x60>)
 800589a:	4813      	ldr	r0, [pc, #76]	; (80058e8 <netif_set_link_up+0x64>)
 800589c:	f00a f882 	bl	800f9a4 <iprintf>
 80058a0:	e01b      	b.n	80058da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d114      	bne.n	80058da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058c2:	2103      	movs	r1, #3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff6b 	bl	80057a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <netif_set_link_up+0x56>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	080114e8 	.word	0x080114e8
 80058e4:	080116d0 	.word	0x080116d0
 80058e8:	08011538 	.word	0x08011538

080058ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <netif_set_link_down+0x1e>
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <netif_set_link_down+0x54>)
 80058fc:	f240 4206 	movw	r2, #1030	; 0x406
 8005900:	4910      	ldr	r1, [pc, #64]	; (8005944 <netif_set_link_down+0x58>)
 8005902:	4811      	ldr	r0, [pc, #68]	; (8005948 <netif_set_link_down+0x5c>)
 8005904:	f00a f84e 	bl	800f9a4 <iprintf>
 8005908:	e017      	b.n	800593a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800591e:	f023 0304 	bic.w	r3, r3, #4
 8005922:	b2da      	uxtb	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <netif_set_link_down+0x4e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	080114e8 	.word	0x080114e8
 8005944:	080116f4 	.word	0x080116f4
 8005948:	08011538 	.word	0x08011538

0800594c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	61da      	str	r2, [r3, #28]
  }
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800597a:	f06f 030b 	mvn.w	r3, #11
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <netif_get_by_index+0x48>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e00c      	b.n	80059be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059aa:	3301      	adds	r3, #1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	79fa      	ldrb	r2, [r7, #7]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d101      	bne.n	80059b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	e006      	b.n	80059c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ef      	bne.n	80059a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000899c 	.word	0x2000899c

080059d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <pbuf_free_ooseq+0x38>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <pbuf_free_ooseq+0x3c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	e00a      	b.n	8005a02 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f002 fcc1 	bl	800837c <tcp_free_ooseq>
      return;
 80059fa:	e005      	b.n	8005a08 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f1      	bne.n	80059ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	200089a5 	.word	0x200089a5
 8005a14:	200089b4 	.word	0x200089b4

08005a18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <pbuf_pool_is_empty+0x14>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005a22:	bf00      	nop
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	200089a5 	.word	0x200089a5

08005a30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88ba      	ldrh	r2, [r7, #4]
 8005a5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005a5e:	8b3b      	ldrh	r3, [r7, #24]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	7f3a      	ldrb	r2, [r7, #28]
 8005a6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	73da      	strb	r2, [r3, #15]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	; 0x30
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	80bb      	strh	r3, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005aa0:	d07f      	beq.n	8005ba2 <pbuf_alloc+0x11e>
 8005aa2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005aa6:	f300 80c8 	bgt.w	8005c3a <pbuf_alloc+0x1b6>
 8005aaa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005aae:	d010      	beq.n	8005ad2 <pbuf_alloc+0x4e>
 8005ab0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005ab4:	f300 80c1 	bgt.w	8005c3a <pbuf_alloc+0x1b6>
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d002      	beq.n	8005ac2 <pbuf_alloc+0x3e>
 8005abc:	2b41      	cmp	r3, #65	; 0x41
 8005abe:	f040 80bc 	bne.w	8005c3a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005ac2:	887a      	ldrh	r2, [r7, #2]
 8005ac4:	88bb      	ldrh	r3, [r7, #4]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f000 f8d1 	bl	8005c70 <pbuf_alloc_reference>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005ad0:	e0bd      	b.n	8005c4e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005ada:	88bb      	ldrh	r3, [r7, #4]
 8005adc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005ade:	2008      	movs	r0, #8
 8005ae0:	f7ff fbf2 	bl	80052c8 <memp_malloc>
 8005ae4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005aec:	f7ff ff94 	bl	8005a18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <pbuf_alloc+0x78>
            pbuf_free(p);
 8005af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005af8:	f000 faa8 	bl	800604c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e0a7      	b.n	8005c50 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b02:	3303      	adds	r3, #3
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8b7a      	ldrh	r2, [r7, #26]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf28      	it	cs
 8005b18:	4613      	movcs	r3, r2
 8005b1a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b1e:	3310      	adds	r3, #16
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	3303      	adds	r3, #3
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	89f9      	ldrh	r1, [r7, #14]
 8005b2e:	8b7a      	ldrh	r2, [r7, #26]
 8005b30:	2300      	movs	r3, #0
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	6938      	ldr	r0, [r7, #16]
 8005b3e:	f7ff ff77 	bl	8005a30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <pbuf_alloc+0xd8>
 8005b4e:	4b42      	ldr	r3, [pc, #264]	; (8005c58 <pbuf_alloc+0x1d4>)
 8005b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b54:	4941      	ldr	r1, [pc, #260]	; (8005c5c <pbuf_alloc+0x1d8>)
 8005b56:	4842      	ldr	r0, [pc, #264]	; (8005c60 <pbuf_alloc+0x1dc>)
 8005b58:	f009 ff24 	bl	800f9a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b5e:	3303      	adds	r3, #3
 8005b60:	f023 0303 	bic.w	r3, r3, #3
 8005b64:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005b68:	d106      	bne.n	8005b78 <pbuf_alloc+0xf4>
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <pbuf_alloc+0x1d4>)
 8005b6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005b70:	493c      	ldr	r1, [pc, #240]	; (8005c64 <pbuf_alloc+0x1e0>)
 8005b72:	483b      	ldr	r0, [pc, #236]	; (8005c60 <pbuf_alloc+0x1dc>)
 8005b74:	f009 ff16 	bl	800f9a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
 8005b82:	e002      	b.n	8005b8a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b8e:	8b7a      	ldrh	r2, [r7, #26]
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b9a:	8b7b      	ldrh	r3, [r7, #26]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d19e      	bne.n	8005ade <pbuf_alloc+0x5a>
      break;
 8005ba0:	e055      	b.n	8005c4e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f023 0303 	bic.w	r3, r3, #3
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	88bb      	ldrh	r3, [r7, #4]
 8005bb0:	3303      	adds	r3, #3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f023 0303 	bic.w	r3, r3, #3
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005bbe:	8b3b      	ldrh	r3, [r7, #24]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005bc4:	8b3a      	ldrh	r2, [r7, #24]
 8005bc6:	88bb      	ldrh	r3, [r7, #4]
 8005bc8:	3303      	adds	r3, #3
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d306      	bcc.n	8005be0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005bd2:	8afa      	ldrh	r2, [r7, #22]
 8005bd4:	88bb      	ldrh	r3, [r7, #4]
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d201      	bcs.n	8005be4 <pbuf_alloc+0x160>
        return NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e035      	b.n	8005c50 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005be4:	8afb      	ldrh	r3, [r7, #22]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fa00 	bl	8004fec <mem_malloc>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <pbuf_alloc+0x174>
        return NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e02b      	b.n	8005c50 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bfa:	3310      	adds	r3, #16
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfe:	4413      	add	r3, r2
 8005c00:	3303      	adds	r3, #3
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	4618      	mov	r0, r3
 8005c08:	88b9      	ldrh	r1, [r7, #4]
 8005c0a:	88ba      	ldrh	r2, [r7, #4]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	887b      	ldrh	r3, [r7, #2]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	460b      	mov	r3, r1
 8005c16:	4601      	mov	r1, r0
 8005c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c1a:	f7ff ff09 	bl	8005a30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d010      	beq.n	8005c4c <pbuf_alloc+0x1c8>
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <pbuf_alloc+0x1d4>)
 8005c2c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005c30:	490d      	ldr	r1, [pc, #52]	; (8005c68 <pbuf_alloc+0x1e4>)
 8005c32:	480b      	ldr	r0, [pc, #44]	; (8005c60 <pbuf_alloc+0x1dc>)
 8005c34:	f009 feb6 	bl	800f9a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005c38:	e008      	b.n	8005c4c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <pbuf_alloc+0x1d4>)
 8005c3c:	f240 1227 	movw	r2, #295	; 0x127
 8005c40:	490a      	ldr	r1, [pc, #40]	; (8005c6c <pbuf_alloc+0x1e8>)
 8005c42:	4807      	ldr	r0, [pc, #28]	; (8005c60 <pbuf_alloc+0x1dc>)
 8005c44:	f009 feae 	bl	800f9a4 <iprintf>
      return NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e001      	b.n	8005c50 <pbuf_alloc+0x1cc>
      break;
 8005c4c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	; 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08011718 	.word	0x08011718
 8005c5c:	08011748 	.word	0x08011748
 8005c60:	08011778 	.word	0x08011778
 8005c64:	080117a0 	.word	0x080117a0
 8005c68:	080117d4 	.word	0x080117d4
 8005c6c:	08011800 	.word	0x08011800

08005c70 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	807b      	strh	r3, [r7, #2]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c80:	883b      	ldrh	r3, [r7, #0]
 8005c82:	2b41      	cmp	r3, #65	; 0x41
 8005c84:	d009      	beq.n	8005c9a <pbuf_alloc_reference+0x2a>
 8005c86:	883b      	ldrh	r3, [r7, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d006      	beq.n	8005c9a <pbuf_alloc_reference+0x2a>
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <pbuf_alloc_reference+0x5c>)
 8005c8e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c92:	490f      	ldr	r1, [pc, #60]	; (8005cd0 <pbuf_alloc_reference+0x60>)
 8005c94:	480f      	ldr	r0, [pc, #60]	; (8005cd4 <pbuf_alloc_reference+0x64>)
 8005c96:	f009 fe85 	bl	800f9a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c9a:	2007      	movs	r0, #7
 8005c9c:	f7ff fb14 	bl	80052c8 <memp_malloc>
 8005ca0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e00b      	b.n	8005cc4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005cac:	8879      	ldrh	r1, [r7, #2]
 8005cae:	887a      	ldrh	r2, [r7, #2]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	883b      	ldrh	r3, [r7, #0]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff feb7 	bl	8005a30 <pbuf_init_alloced_pbuf>
  return p;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	08011718 	.word	0x08011718
 8005cd0:	0801181c 	.word	0x0801181c
 8005cd4:	08011778 	.word	0x08011778

08005cd8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	81bb      	strh	r3, [r7, #12]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005cf0:	8a7b      	ldrh	r3, [r7, #18]
 8005cf2:	3303      	adds	r3, #3
 8005cf4:	f023 0203 	bic.w	r2, r3, #3
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	441a      	add	r2, r3
 8005cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d901      	bls.n	8005d06 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e018      	b.n	8005d38 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d0c:	8a7b      	ldrh	r3, [r7, #18]
 8005d0e:	3303      	adds	r3, #3
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	4413      	add	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e001      	b.n	8005d20 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	89b9      	ldrh	r1, [r7, #12]
 8005d24:	89ba      	ldrh	r2, [r7, #12]
 8005d26:	2302      	movs	r3, #2
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	897b      	ldrh	r3, [r7, #10]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	6979      	ldr	r1, [r7, #20]
 8005d32:	f7ff fe7d 	bl	8005a30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005d36:	687b      	ldr	r3, [r7, #4]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <pbuf_realloc+0x20>
 8005d52:	4b3a      	ldr	r3, [pc, #232]	; (8005e3c <pbuf_realloc+0xfc>)
 8005d54:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005d58:	4939      	ldr	r1, [pc, #228]	; (8005e40 <pbuf_realloc+0x100>)
 8005d5a:	483a      	ldr	r0, [pc, #232]	; (8005e44 <pbuf_realloc+0x104>)
 8005d5c:	f009 fe22 	bl	800f9a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	891b      	ldrh	r3, [r3, #8]
 8005d64:	887a      	ldrh	r2, [r7, #2]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d263      	bcs.n	8005e32 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	891a      	ldrh	r2, [r3, #8]
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d7c:	e018      	b.n	8005db0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	895b      	ldrh	r3, [r3, #10]
 8005d82:	897a      	ldrh	r2, [r7, #10]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	891a      	ldrh	r2, [r3, #8]
 8005d8c:	893b      	ldrh	r3, [r7, #8]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <pbuf_realloc+0x70>
 8005da2:	4b26      	ldr	r3, [pc, #152]	; (8005e3c <pbuf_realloc+0xfc>)
 8005da4:	f240 12af 	movw	r2, #431	; 0x1af
 8005da8:	4927      	ldr	r1, [pc, #156]	; (8005e48 <pbuf_realloc+0x108>)
 8005daa:	4826      	ldr	r0, [pc, #152]	; (8005e44 <pbuf_realloc+0x104>)
 8005dac:	f009 fdfa 	bl	800f9a4 <iprintf>
  while (rem_len > q->len) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	895b      	ldrh	r3, [r3, #10]
 8005db4:	897a      	ldrh	r2, [r7, #10]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d8e1      	bhi.n	8005d7e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	7b1b      	ldrb	r3, [r3, #12]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d121      	bne.n	8005e0a <pbuf_realloc+0xca>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	895b      	ldrh	r3, [r3, #10]
 8005dca:	897a      	ldrh	r2, [r7, #10]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d01c      	beq.n	8005e0a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	7b5b      	ldrb	r3, [r3, #13]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	4413      	add	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4619      	mov	r1, r3
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff f800 	bl	8004df4 <mem_trim>
 8005df4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <pbuf_realloc+0xca>
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <pbuf_realloc+0xfc>)
 8005dfe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e02:	4912      	ldr	r1, [pc, #72]	; (8005e4c <pbuf_realloc+0x10c>)
 8005e04:	480f      	ldr	r0, [pc, #60]	; (8005e44 <pbuf_realloc+0x104>)
 8005e06:	f009 fdcd 	bl	800f9a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	897a      	ldrh	r2, [r7, #10]
 8005e0e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	895a      	ldrh	r2, [r3, #10]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f911 	bl	800604c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e000      	b.n	8005e34 <pbuf_realloc+0xf4>
    return;
 8005e32:	bf00      	nop

}
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	08011718 	.word	0x08011718
 8005e40:	08011830 	.word	0x08011830
 8005e44:	08011778 	.word	0x08011778
 8005e48:	08011848 	.word	0x08011848
 8005e4c:	08011860 	.word	0x08011860

08005e50 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <pbuf_add_header_impl+0x22>
 8005e64:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <pbuf_add_header_impl+0xc4>)
 8005e66:	f240 12df 	movw	r2, #479	; 0x1df
 8005e6a:	492b      	ldr	r1, [pc, #172]	; (8005f18 <pbuf_add_header_impl+0xc8>)
 8005e6c:	482b      	ldr	r0, [pc, #172]	; (8005f1c <pbuf_add_header_impl+0xcc>)
 8005e6e:	f009 fd99 	bl	800f9a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <pbuf_add_header_impl+0x30>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7e:	d301      	bcc.n	8005e84 <pbuf_add_header_impl+0x34>
    return 1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e043      	b.n	8005f0c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <pbuf_add_header_impl+0x3e>
    return 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e03e      	b.n	8005f0c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	891a      	ldrh	r2, [r3, #8]
 8005e96:	8a7b      	ldrh	r3, [r7, #18]
 8005e98:	4413      	add	r3, r2
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8a7a      	ldrh	r2, [r7, #18]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d901      	bls.n	8005ea6 <pbuf_add_header_impl+0x56>
    return 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e032      	b.n	8005f0c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	7b1b      	ldrb	r3, [r3, #12]
 8005eaa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005eac:	8a3b      	ldrh	r3, [r7, #16]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	425b      	negs	r3, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d20d      	bcs.n	8005ee8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e01d      	b.n	8005f0c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	425b      	negs	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e001      	b.n	8005ee8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e011      	b.n	8005f0c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	895a      	ldrh	r2, [r3, #10]
 8005ef2:	8a7b      	ldrh	r3, [r7, #18]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	891a      	ldrh	r2, [r3, #8]
 8005f00:	8a7b      	ldrh	r3, [r7, #18]
 8005f02:	4413      	add	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	08011718 	.word	0x08011718
 8005f18:	0801187c 	.word	0x0801187c
 8005f1c:	08011778 	.word	0x08011778

08005f20 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff8e 	bl	8005e50 <pbuf_add_header_impl>
 8005f34:	4603      	mov	r3, r0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <pbuf_remove_header+0x1e>
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <pbuf_remove_header+0x94>)
 8005f52:	f240 224b 	movw	r2, #587	; 0x24b
 8005f56:	4920      	ldr	r1, [pc, #128]	; (8005fd8 <pbuf_remove_header+0x98>)
 8005f58:	4820      	ldr	r0, [pc, #128]	; (8005fdc <pbuf_remove_header+0x9c>)
 8005f5a:	f009 fd23 	bl	800f9a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <pbuf_remove_header+0x2c>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6a:	d301      	bcc.n	8005f70 <pbuf_remove_header+0x30>
    return 1;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e02c      	b.n	8005fca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <pbuf_remove_header+0x3a>
    return 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e027      	b.n	8005fca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	895b      	ldrh	r3, [r3, #10]
 8005f82:	89fa      	ldrh	r2, [r7, #14]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d908      	bls.n	8005f9a <pbuf_remove_header+0x5a>
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <pbuf_remove_header+0x94>)
 8005f8a:	f240 2255 	movw	r2, #597	; 0x255
 8005f8e:	4914      	ldr	r1, [pc, #80]	; (8005fe0 <pbuf_remove_header+0xa0>)
 8005f90:	4812      	ldr	r0, [pc, #72]	; (8005fdc <pbuf_remove_header+0x9c>)
 8005f92:	f009 fd07 	bl	800f9a4 <iprintf>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e017      	b.n	8005fca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	441a      	add	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	895a      	ldrh	r2, [r3, #10]
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	891a      	ldrh	r2, [r3, #8]
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	08011718 	.word	0x08011718
 8005fd8:	0801187c 	.word	0x0801187c
 8005fdc:	08011778 	.word	0x08011778
 8005fe0:	08011888 	.word	0x08011888

08005fe4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da08      	bge.n	800600e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005ffc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006000:	425b      	negs	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff9b 	bl	8005f40 <pbuf_remove_header>
 800600a:	4603      	mov	r3, r0
 800600c:	e007      	b.n	800601e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800600e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006012:	787a      	ldrb	r2, [r7, #1]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ff1a 	bl	8005e50 <pbuf_add_header_impl>
 800601c:	4603      	mov	r3, r0
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006036:	2201      	movs	r2, #1
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffd2 	bl	8005fe4 <pbuf_header_impl>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <pbuf_free+0x22>
 8006060:	4b38      	ldr	r3, [pc, #224]	; (8006144 <pbuf_free+0xf8>)
 8006062:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006066:	4938      	ldr	r1, [pc, #224]	; (8006148 <pbuf_free+0xfc>)
 8006068:	4838      	ldr	r0, [pc, #224]	; (800614c <pbuf_free+0x100>)
 800606a:	f009 fc9b 	bl	800f9a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800606e:	2300      	movs	r3, #0
 8006070:	e063      	b.n	800613a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006076:	e05c      	b.n	8006132 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7b9b      	ldrb	r3, [r3, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <pbuf_free+0x42>
 8006080:	4b30      	ldr	r3, [pc, #192]	; (8006144 <pbuf_free+0xf8>)
 8006082:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006086:	4932      	ldr	r1, [pc, #200]	; (8006150 <pbuf_free+0x104>)
 8006088:	4830      	ldr	r0, [pc, #192]	; (800614c <pbuf_free+0x100>)
 800608a:	f009 fc8b 	bl	800f9a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7b9b      	ldrb	r3, [r3, #14]
 8006092:	3b01      	subs	r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	739a      	strb	r2, [r3, #14]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7b9b      	ldrb	r3, [r3, #14]
 800609e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80060a0:	7dbb      	ldrb	r3, [r7, #22]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d143      	bne.n	800612e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	7b1b      	ldrb	r3, [r3, #12]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7b5b      	ldrb	r3, [r3, #13]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <pbuf_free+0x90>
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <pbuf_free+0xf8>)
 80060d0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80060d4:	491f      	ldr	r1, [pc, #124]	; (8006154 <pbuf_free+0x108>)
 80060d6:	481d      	ldr	r0, [pc, #116]	; (800614c <pbuf_free+0x100>)
 80060d8:	f009 fc64 	bl	800f9a4 <iprintf>
        pc->custom_free_function(p);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
 80060e4:	e01d      	b.n	8006122 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d104      	bne.n	80060f6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	2008      	movs	r0, #8
 80060f0:	f7ff f936 	bl	8005360 <memp_free>
 80060f4:	e015      	b.n	8006122 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d104      	bne.n	8006106 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	2007      	movs	r0, #7
 8006100:	f7ff f92e 	bl	8005360 <memp_free>
 8006104:	e00d      	b.n	8006122 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <pbuf_free+0xc8>
          mem_free(p);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fe fe07 	bl	8004d20 <mem_free>
 8006112:	e006      	b.n	8006122 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <pbuf_free+0xf8>)
 8006116:	f240 320f 	movw	r2, #783	; 0x30f
 800611a:	490f      	ldr	r1, [pc, #60]	; (8006158 <pbuf_free+0x10c>)
 800611c:	480b      	ldr	r0, [pc, #44]	; (800614c <pbuf_free+0x100>)
 800611e:	f009 fc41 	bl	800f9a4 <iprintf>
        }
      }
      count++;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	3301      	adds	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	e001      	b.n	8006132 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d19f      	bne.n	8006078 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08011718 	.word	0x08011718
 8006148:	0801187c 	.word	0x0801187c
 800614c:	08011778 	.word	0x08011778
 8006150:	080118a8 	.word	0x080118a8
 8006154:	080118c0 	.word	0x080118c0
 8006158:	080118e4 	.word	0x080118e4

0800615c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006168:	e005      	b.n	8006176 <pbuf_clen+0x1a>
    ++len;
 800616a:	89fb      	ldrh	r3, [r7, #14]
 800616c:	3301      	adds	r3, #1
 800616e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f6      	bne.n	800616a <pbuf_clen+0xe>
  }
  return len;
 800617c:	89fb      	ldrh	r3, [r7, #14]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7b9b      	ldrb	r3, [r3, #14]
 800619e:	3301      	adds	r3, #1
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	7b9b      	ldrb	r3, [r3, #14]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <pbuf_ref+0x30>
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <pbuf_ref+0x38>)
 80061b0:	f240 3242 	movw	r2, #834	; 0x342
 80061b4:	4904      	ldr	r1, [pc, #16]	; (80061c8 <pbuf_ref+0x3c>)
 80061b6:	4805      	ldr	r0, [pc, #20]	; (80061cc <pbuf_ref+0x40>)
 80061b8:	f009 fbf4 	bl	800f9a4 <iprintf>
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	08011718 	.word	0x08011718
 80061c8:	080118f8 	.word	0x080118f8
 80061cc:	08011778 	.word	0x08011778

080061d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <pbuf_cat+0x16>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <pbuf_cat+0x26>
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <pbuf_cat+0x98>)
 80061e8:	f240 3259 	movw	r2, #857	; 0x359
 80061ec:	491f      	ldr	r1, [pc, #124]	; (800626c <pbuf_cat+0x9c>)
 80061ee:	4820      	ldr	r0, [pc, #128]	; (8006270 <pbuf_cat+0xa0>)
 80061f0:	f009 fbd8 	bl	800f9a4 <iprintf>
 80061f4:	e034      	b.n	8006260 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e00a      	b.n	8006212 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	891a      	ldrh	r2, [r3, #8]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	891b      	ldrh	r3, [r3, #8]
 8006204:	4413      	add	r3, r2
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	891a      	ldrh	r2, [r3, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	895b      	ldrh	r3, [r3, #10]
 8006222:	429a      	cmp	r2, r3
 8006224:	d006      	beq.n	8006234 <pbuf_cat+0x64>
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <pbuf_cat+0x98>)
 8006228:	f240 3262 	movw	r2, #866	; 0x362
 800622c:	4911      	ldr	r1, [pc, #68]	; (8006274 <pbuf_cat+0xa4>)
 800622e:	4810      	ldr	r0, [pc, #64]	; (8006270 <pbuf_cat+0xa0>)
 8006230:	f009 fbb8 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <pbuf_cat+0x7a>
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <pbuf_cat+0x98>)
 800623e:	f240 3263 	movw	r2, #867	; 0x363
 8006242:	490d      	ldr	r1, [pc, #52]	; (8006278 <pbuf_cat+0xa8>)
 8006244:	480a      	ldr	r0, [pc, #40]	; (8006270 <pbuf_cat+0xa0>)
 8006246:	f009 fbad 	bl	800f9a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	891a      	ldrh	r2, [r3, #8]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	891b      	ldrh	r3, [r3, #8]
 8006252:	4413      	add	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	08011718 	.word	0x08011718
 800626c:	0801190c 	.word	0x0801190c
 8006270:	08011778 	.word	0x08011778
 8006274:	08011944 	.word	0x08011944
 8006278:	08011974 	.word	0x08011974

0800627c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <pbuf_copy+0x2a>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <pbuf_copy+0x2a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	891a      	ldrh	r2, [r3, #8]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	891b      	ldrh	r3, [r3, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d209      	bcs.n	80062ba <pbuf_copy+0x3e>
 80062a6:	4b57      	ldr	r3, [pc, #348]	; (8006404 <pbuf_copy+0x188>)
 80062a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80062ac:	4956      	ldr	r1, [pc, #344]	; (8006408 <pbuf_copy+0x18c>)
 80062ae:	4857      	ldr	r0, [pc, #348]	; (800640c <pbuf_copy+0x190>)
 80062b0:	f009 fb78 	bl	800f9a4 <iprintf>
 80062b4:	f06f 030f 	mvn.w	r3, #15
 80062b8:	e09f      	b.n	80063fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	895b      	ldrh	r3, [r3, #10]
 80062be:	461a      	mov	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	895b      	ldrh	r3, [r3, #10]
 80062c8:	4619      	mov	r1, r3
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1acb      	subs	r3, r1, r3
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d306      	bcc.n	80062e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	895b      	ldrh	r3, [r3, #10]
 80062d6:	461a      	mov	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e005      	b.n	80062ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	895b      	ldrh	r3, [r3, #10]
 80062e4:	461a      	mov	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	18d0      	adds	r0, r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4619      	mov	r1, r3
 8006300:	f009 fb20 	bl	800f944 <memcpy>
    offset_to += len;
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	895b      	ldrh	r3, [r3, #10]
 8006318:	461a      	mov	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	4293      	cmp	r3, r2
 800631e:	d906      	bls.n	800632e <pbuf_copy+0xb2>
 8006320:	4b38      	ldr	r3, [pc, #224]	; (8006404 <pbuf_copy+0x188>)
 8006322:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006326:	493a      	ldr	r1, [pc, #232]	; (8006410 <pbuf_copy+0x194>)
 8006328:	4838      	ldr	r0, [pc, #224]	; (800640c <pbuf_copy+0x190>)
 800632a:	f009 fb3b 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	895b      	ldrh	r3, [r3, #10]
 8006332:	461a      	mov	r2, r3
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4293      	cmp	r3, r2
 8006338:	d906      	bls.n	8006348 <pbuf_copy+0xcc>
 800633a:	4b32      	ldr	r3, [pc, #200]	; (8006404 <pbuf_copy+0x188>)
 800633c:	f240 32da 	movw	r2, #986	; 0x3da
 8006340:	4934      	ldr	r1, [pc, #208]	; (8006414 <pbuf_copy+0x198>)
 8006342:	4832      	ldr	r0, [pc, #200]	; (800640c <pbuf_copy+0x190>)
 8006344:	f009 fb2e 	bl	800f9a4 <iprintf>
    if (offset_from >= p_from->len) {
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	895b      	ldrh	r3, [r3, #10]
 800634c:	461a      	mov	r2, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4293      	cmp	r3, r2
 8006352:	d304      	bcc.n	800635e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	895b      	ldrh	r3, [r3, #10]
 8006362:	461a      	mov	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4293      	cmp	r3, r2
 8006368:	d114      	bne.n	8006394 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10c      	bne.n	8006394 <pbuf_copy+0x118>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <pbuf_copy+0x118>
 8006380:	4b20      	ldr	r3, [pc, #128]	; (8006404 <pbuf_copy+0x188>)
 8006382:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006386:	4924      	ldr	r1, [pc, #144]	; (8006418 <pbuf_copy+0x19c>)
 8006388:	4820      	ldr	r0, [pc, #128]	; (800640c <pbuf_copy+0x190>)
 800638a:	f009 fb0b 	bl	800f9a4 <iprintf>
 800638e:	f06f 030f 	mvn.w	r3, #15
 8006392:	e032      	b.n	80063fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <pbuf_copy+0x146>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	895a      	ldrh	r2, [r3, #10]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	891b      	ldrh	r3, [r3, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d10d      	bne.n	80063c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <pbuf_copy+0x146>
 80063ae:	4b15      	ldr	r3, [pc, #84]	; (8006404 <pbuf_copy+0x188>)
 80063b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80063b4:	4919      	ldr	r1, [pc, #100]	; (800641c <pbuf_copy+0x1a0>)
 80063b6:	4815      	ldr	r0, [pc, #84]	; (800640c <pbuf_copy+0x190>)
 80063b8:	f009 faf4 	bl	800f9a4 <iprintf>
 80063bc:	f06f 0305 	mvn.w	r3, #5
 80063c0:	e01b      	b.n	80063fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <pbuf_copy+0x174>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	895a      	ldrh	r2, [r3, #10]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	891b      	ldrh	r3, [r3, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d10d      	bne.n	80063f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <pbuf_copy+0x174>
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <pbuf_copy+0x188>)
 80063de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80063e2:	490e      	ldr	r1, [pc, #56]	; (800641c <pbuf_copy+0x1a0>)
 80063e4:	4809      	ldr	r0, [pc, #36]	; (800640c <pbuf_copy+0x190>)
 80063e6:	f009 fadd 	bl	800f9a4 <iprintf>
 80063ea:	f06f 0305 	mvn.w	r3, #5
 80063ee:	e004      	b.n	80063fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f af61 	bne.w	80062ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	08011718 	.word	0x08011718
 8006408:	080119c0 	.word	0x080119c0
 800640c:	08011778 	.word	0x08011778
 8006410:	080119f0 	.word	0x080119f0
 8006414:	08011a08 	.word	0x08011a08
 8006418:	08011a24 	.word	0x08011a24
 800641c:	08011a34 	.word	0x08011a34

08006420 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	460b      	mov	r3, r1
 8006430:	80fb      	strh	r3, [r7, #6]
 8006432:	4613      	mov	r3, r2
 8006434:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <pbuf_copy_partial+0x36>
 8006444:	4b2b      	ldr	r3, [pc, #172]	; (80064f4 <pbuf_copy_partial+0xd4>)
 8006446:	f240 420a 	movw	r2, #1034	; 0x40a
 800644a:	492b      	ldr	r1, [pc, #172]	; (80064f8 <pbuf_copy_partial+0xd8>)
 800644c:	482b      	ldr	r0, [pc, #172]	; (80064fc <pbuf_copy_partial+0xdc>)
 800644e:	f009 faa9 	bl	800f9a4 <iprintf>
 8006452:	2300      	movs	r3, #0
 8006454:	e04a      	b.n	80064ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <pbuf_copy_partial+0x4e>
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <pbuf_copy_partial+0xd4>)
 800645e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006462:	4927      	ldr	r1, [pc, #156]	; (8006500 <pbuf_copy_partial+0xe0>)
 8006464:	4825      	ldr	r0, [pc, #148]	; (80064fc <pbuf_copy_partial+0xdc>)
 8006466:	f009 fa9d 	bl	800f9a4 <iprintf>
 800646a:	2300      	movs	r3, #0
 800646c:	e03e      	b.n	80064ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	e034      	b.n	80064de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006474:	88bb      	ldrh	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <pbuf_copy_partial+0x70>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	895b      	ldrh	r3, [r3, #10]
 800647e:	88ba      	ldrh	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d305      	bcc.n	8006490 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	895b      	ldrh	r3, [r3, #10]
 8006488:	88ba      	ldrh	r2, [r7, #4]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	80bb      	strh	r3, [r7, #4]
 800648e:	e023      	b.n	80064d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	895a      	ldrh	r2, [r3, #10]
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800649a:	8b3a      	ldrh	r2, [r7, #24]
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d901      	bls.n	80064a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80064a6:	8b7b      	ldrh	r3, [r7, #26]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	18d0      	adds	r0, r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	88bb      	ldrh	r3, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	8b3a      	ldrh	r2, [r7, #24]
 80064b6:	4619      	mov	r1, r3
 80064b8:	f009 fa44 	bl	800f944 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80064bc:	8afa      	ldrh	r2, [r7, #22]
 80064be:	8b3b      	ldrh	r3, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80064c4:	8b7a      	ldrh	r2, [r7, #26]
 80064c6:	8b3b      	ldrh	r3, [r7, #24]
 80064c8:	4413      	add	r3, r2
 80064ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80064cc:	88fa      	ldrh	r2, [r7, #6]
 80064ce:	8b3b      	ldrh	r3, [r7, #24]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <pbuf_copy_partial+0xca>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1c4      	bne.n	8006474 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80064ea:	8afb      	ldrh	r3, [r7, #22]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	08011718 	.word	0x08011718
 80064f8:	08011a60 	.word	0x08011a60
 80064fc:	08011778 	.word	0x08011778
 8006500:	08011a80 	.word	0x08011a80

08006504 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d109      	bne.n	8006534 <pbuf_take+0x30>
 8006520:	4b3a      	ldr	r3, [pc, #232]	; (800660c <pbuf_take+0x108>)
 8006522:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8006526:	493a      	ldr	r1, [pc, #232]	; (8006610 <pbuf_take+0x10c>)
 8006528:	483a      	ldr	r0, [pc, #232]	; (8006614 <pbuf_take+0x110>)
 800652a:	f009 fa3b 	bl	800f9a4 <iprintf>
 800652e:	f06f 030f 	mvn.w	r3, #15
 8006532:	e067      	b.n	8006604 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <pbuf_take+0x4a>
 800653a:	4b34      	ldr	r3, [pc, #208]	; (800660c <pbuf_take+0x108>)
 800653c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006540:	4935      	ldr	r1, [pc, #212]	; (8006618 <pbuf_take+0x114>)
 8006542:	4834      	ldr	r0, [pc, #208]	; (8006614 <pbuf_take+0x110>)
 8006544:	f009 fa2e 	bl	800f9a4 <iprintf>
 8006548:	f06f 030f 	mvn.w	r3, #15
 800654c:	e05a      	b.n	8006604 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	891b      	ldrh	r3, [r3, #8]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	429a      	cmp	r2, r3
 8006556:	d909      	bls.n	800656c <pbuf_take+0x68>
 8006558:	4b2c      	ldr	r3, [pc, #176]	; (800660c <pbuf_take+0x108>)
 800655a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800655e:	492f      	ldr	r1, [pc, #188]	; (800661c <pbuf_take+0x118>)
 8006560:	482c      	ldr	r0, [pc, #176]	; (8006614 <pbuf_take+0x110>)
 8006562:	f009 fa1f 	bl	800f9a4 <iprintf>
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	e04b      	b.n	8006604 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <pbuf_take+0x7e>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <pbuf_take+0x7e>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	891b      	ldrh	r3, [r3, #8]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	429a      	cmp	r2, r3
 8006580:	d902      	bls.n	8006588 <pbuf_take+0x84>
    return ERR_ARG;
 8006582:	f06f 030f 	mvn.w	r3, #15
 8006586:	e03d      	b.n	8006604 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e028      	b.n	80065e0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <pbuf_take+0x9e>
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <pbuf_take+0x108>)
 8006596:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800659a:	4921      	ldr	r1, [pc, #132]	; (8006620 <pbuf_take+0x11c>)
 800659c:	481d      	ldr	r0, [pc, #116]	; (8006614 <pbuf_take+0x110>)
 800659e:	f009 fa01 	bl	800f9a4 <iprintf>
    buf_copy_len = total_copy_len;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	895b      	ldrh	r3, [r3, #10]
 80065aa:	461a      	mov	r2, r3
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d902      	bls.n	80065b8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	895b      	ldrh	r3, [r3, #10]
 80065b6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	6858      	ldr	r0, [r3, #4]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	f009 f9bd 	bl	800f944 <memcpy>
    total_copy_len -= buf_copy_len;
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	4413      	add	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1d3      	bne.n	800658e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <pbuf_take+0xf0>
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d006      	beq.n	8006602 <pbuf_take+0xfe>
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <pbuf_take+0x108>)
 80065f6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <pbuf_take+0x120>)
 80065fc:	4805      	ldr	r0, [pc, #20]	; (8006614 <pbuf_take+0x110>)
 80065fe:	f009 f9d1 	bl	800f9a4 <iprintf>
  return ERR_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	08011718 	.word	0x08011718
 8006610:	08011af0 	.word	0x08011af0
 8006614:	08011778 	.word	0x08011778
 8006618:	08011b08 	.word	0x08011b08
 800661c:	08011b24 	.word	0x08011b24
 8006620:	08011b44 	.word	0x08011b44
 8006624:	08011b5c 	.word	0x08011b5c

08006628 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	603a      	str	r2, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
 8006634:	460b      	mov	r3, r1
 8006636:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	8919      	ldrh	r1, [r3, #8]
 800663c:	88ba      	ldrh	r2, [r7, #4]
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fa1f 	bl	8005a84 <pbuf_alloc>
 8006646:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <pbuf_clone+0x2a>
    return NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	e011      	b.n	8006676 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fe11 	bl	800627c <pbuf_copy>
 800665a:	4603      	mov	r3, r0
 800665c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800665e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <pbuf_clone+0x4c>
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <pbuf_clone+0x58>)
 8006668:	f240 5224 	movw	r2, #1316	; 0x524
 800666c:	4905      	ldr	r1, [pc, #20]	; (8006684 <pbuf_clone+0x5c>)
 800666e:	4806      	ldr	r0, [pc, #24]	; (8006688 <pbuf_clone+0x60>)
 8006670:	f009 f998 	bl	800f9a4 <iprintf>
  return q;
 8006674:	68fb      	ldr	r3, [r7, #12]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	08011718 	.word	0x08011718
 8006684:	08011b8c 	.word	0x08011b8c
 8006688:	08011778 	.word	0x08011778

0800668c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006690:	f009 fa2c 	bl	800faec <rand>
 8006694:	4603      	mov	r3, r0
 8006696:	b29b      	uxth	r3, r3
 8006698:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800669c:	b29b      	uxth	r3, r3
 800669e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	4b01      	ldr	r3, [pc, #4]	; (80066ac <tcp_init+0x20>)
 80066a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80066a8:	bf00      	nop
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	2000000a 	.word	0x2000000a

080066b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7d1b      	ldrb	r3, [r3, #20]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d105      	bne.n	80066cc <tcp_free+0x1c>
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <tcp_free+0x2c>)
 80066c2:	22d4      	movs	r2, #212	; 0xd4
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <tcp_free+0x30>)
 80066c6:	4807      	ldr	r0, [pc, #28]	; (80066e4 <tcp_free+0x34>)
 80066c8:	f009 f96c 	bl	800f9a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	2001      	movs	r0, #1
 80066d0:	f7fe fe46 	bl	8005360 <memp_free>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	08011c18 	.word	0x08011c18
 80066e0:	08011c48 	.word	0x08011c48
 80066e4:	08011c5c 	.word	0x08011c5c

080066e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7d1b      	ldrb	r3, [r3, #20]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <tcp_free_listen+0x1c>
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <tcp_free_listen+0x2c>)
 80066fa:	22df      	movs	r2, #223	; 0xdf
 80066fc:	4906      	ldr	r1, [pc, #24]	; (8006718 <tcp_free_listen+0x30>)
 80066fe:	4807      	ldr	r0, [pc, #28]	; (800671c <tcp_free_listen+0x34>)
 8006700:	f009 f950 	bl	800f9a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	2002      	movs	r0, #2
 8006708:	f7fe fe2a 	bl	8005360 <memp_free>
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	08011c18 	.word	0x08011c18
 8006718:	08011c84 	.word	0x08011c84
 800671c:	08011c5c 	.word	0x08011c5c

08006720 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006724:	f001 f872 	bl	800780c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006728:	4b07      	ldr	r3, [pc, #28]	; (8006748 <tcp_tmr+0x28>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <tcp_tmr+0x28>)
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <tcp_tmr+0x28>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006740:	f000 fcd6 	bl	80070f0 <tcp_slowtmr>
  }
}
 8006744:	bf00      	nop
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200089bd 	.word	0x200089bd

0800674c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <tcp_remove_listener+0x1c>
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <tcp_remove_listener+0x48>)
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	490d      	ldr	r1, [pc, #52]	; (8006798 <tcp_remove_listener+0x4c>)
 8006762:	480e      	ldr	r0, [pc, #56]	; (800679c <tcp_remove_listener+0x50>)
 8006764:	f009 f91e 	bl	800f9a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e00a      	b.n	8006784 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d102      	bne.n	800677e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f1      	bne.n	800676e <tcp_remove_listener+0x22>
    }
  }
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	08011c18 	.word	0x08011c18
 8006798:	08011ca0 	.word	0x08011ca0
 800679c:	08011c5c 	.word	0x08011c5c

080067a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <tcp_listen_closed+0x1c>
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <tcp_listen_closed+0x60>)
 80067b0:	f240 1211 	movw	r2, #273	; 0x111
 80067b4:	4913      	ldr	r1, [pc, #76]	; (8006804 <tcp_listen_closed+0x64>)
 80067b6:	4814      	ldr	r0, [pc, #80]	; (8006808 <tcp_listen_closed+0x68>)
 80067b8:	f009 f8f4 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7d1b      	ldrb	r3, [r3, #20]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d006      	beq.n	80067d2 <tcp_listen_closed+0x32>
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <tcp_listen_closed+0x60>)
 80067c6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80067ca:	4910      	ldr	r1, [pc, #64]	; (800680c <tcp_listen_closed+0x6c>)
 80067cc:	480e      	ldr	r0, [pc, #56]	; (8006808 <tcp_listen_closed+0x68>)
 80067ce:	f009 f8e9 	bl	800f9a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80067d2:	2301      	movs	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e00b      	b.n	80067f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80067d8:	4a0d      	ldr	r2, [pc, #52]	; (8006810 <tcp_listen_closed+0x70>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ffb1 	bl	800674c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d9f0      	bls.n	80067d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08011c18 	.word	0x08011c18
 8006804:	08011cc8 	.word	0x08011cc8
 8006808:	08011c5c 	.word	0x08011c5c
 800680c:	08011cd4 	.word	0x08011cd4
 8006810:	080147a8 	.word	0x080147a8

08006814 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af04      	add	r7, sp, #16
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <tcp_close_shutdown+0x20>
 8006826:	4b63      	ldr	r3, [pc, #396]	; (80069b4 <tcp_close_shutdown+0x1a0>)
 8006828:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800682c:	4962      	ldr	r1, [pc, #392]	; (80069b8 <tcp_close_shutdown+0x1a4>)
 800682e:	4863      	ldr	r0, [pc, #396]	; (80069bc <tcp_close_shutdown+0x1a8>)
 8006830:	f009 f8b8 	bl	800f9a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d066      	beq.n	8006908 <tcp_close_shutdown+0xf4>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7d1b      	ldrb	r3, [r3, #20]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d003      	beq.n	800684a <tcp_close_shutdown+0x36>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7d1b      	ldrb	r3, [r3, #20]
 8006846:	2b07      	cmp	r3, #7
 8006848:	d15e      	bne.n	8006908 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <tcp_close_shutdown+0x48>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800685a:	d055      	beq.n	8006908 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8b5b      	ldrh	r3, [r3, #26]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <tcp_close_shutdown+0x62>
 8006868:	4b52      	ldr	r3, [pc, #328]	; (80069b4 <tcp_close_shutdown+0x1a0>)
 800686a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800686e:	4954      	ldr	r1, [pc, #336]	; (80069c0 <tcp_close_shutdown+0x1ac>)
 8006870:	4852      	ldr	r0, [pc, #328]	; (80069bc <tcp_close_shutdown+0x1a8>)
 8006872:	f009 f897 	bl	800f9a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800687e:	687d      	ldr	r5, [r7, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	8ad2      	ldrh	r2, [r2, #22]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	8b09      	ldrh	r1, [r1, #24]
 800688c:	9102      	str	r1, [sp, #8]
 800688e:	9201      	str	r2, [sp, #4]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	462b      	mov	r3, r5
 8006894:	4622      	mov	r2, r4
 8006896:	4601      	mov	r1, r0
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f005 ff4b 	bl	800c734 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fb88 	bl	8007fb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80068a4:	4b47      	ldr	r3, [pc, #284]	; (80069c4 <tcp_close_shutdown+0x1b0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d105      	bne.n	80068ba <tcp_close_shutdown+0xa6>
 80068ae:	4b45      	ldr	r3, [pc, #276]	; (80069c4 <tcp_close_shutdown+0x1b0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4a43      	ldr	r2, [pc, #268]	; (80069c4 <tcp_close_shutdown+0x1b0>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e013      	b.n	80068e2 <tcp_close_shutdown+0xce>
 80068ba:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <tcp_close_shutdown+0x1b0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e00c      	b.n	80068dc <tcp_close_shutdown+0xc8>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d104      	bne.n	80068d6 <tcp_close_shutdown+0xc2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]
 80068d4:	e005      	b.n	80068e2 <tcp_close_shutdown+0xce>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ef      	bne.n	80068c2 <tcp_close_shutdown+0xae>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <tcp_close_shutdown+0x1b4>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <tcp_close_shutdown+0x1b8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d102      	bne.n	80068fe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80068f8:	f004 f954 	bl	800aba4 <tcp_trigger_input_pcb_close>
 80068fc:	e002      	b.n	8006904 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fed6 	bl	80066b0 <tcp_free>
      }
      return ERR_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e050      	b.n	80069aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7d1b      	ldrb	r3, [r3, #20]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d03b      	beq.n	8006988 <tcp_close_shutdown+0x174>
 8006910:	2b02      	cmp	r3, #2
 8006912:	dc44      	bgt.n	800699e <tcp_close_shutdown+0x18a>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <tcp_close_shutdown+0x10a>
 8006918:	2b01      	cmp	r3, #1
 800691a:	d02a      	beq.n	8006972 <tcp_close_shutdown+0x15e>
 800691c:	e03f      	b.n	800699e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	8adb      	ldrh	r3, [r3, #22]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d021      	beq.n	800696a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006926:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <tcp_close_shutdown+0x1bc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d105      	bne.n	800693c <tcp_close_shutdown+0x128>
 8006930:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <tcp_close_shutdown+0x1bc>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	4a26      	ldr	r2, [pc, #152]	; (80069d0 <tcp_close_shutdown+0x1bc>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e013      	b.n	8006964 <tcp_close_shutdown+0x150>
 800693c:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <tcp_close_shutdown+0x1bc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	e00c      	b.n	800695e <tcp_close_shutdown+0x14a>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d104      	bne.n	8006958 <tcp_close_shutdown+0x144>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	e005      	b.n	8006964 <tcp_close_shutdown+0x150>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ef      	bne.n	8006944 <tcp_close_shutdown+0x130>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fea0 	bl	80066b0 <tcp_free>
      break;
 8006970:	e01a      	b.n	80069a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ff14 	bl	80067a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4816      	ldr	r0, [pc, #88]	; (80069d4 <tcp_close_shutdown+0x1c0>)
 800697c:	f001 fb8c 	bl	8008098 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff feb1 	bl	80066e8 <tcp_free_listen>
      break;
 8006986:	e00f      	b.n	80069a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	480e      	ldr	r0, [pc, #56]	; (80069c4 <tcp_close_shutdown+0x1b0>)
 800698c:	f001 fb84 	bl	8008098 <tcp_pcb_remove>
 8006990:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <tcp_close_shutdown+0x1b4>)
 8006992:	2201      	movs	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fe8a 	bl	80066b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800699c:	e004      	b.n	80069a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f81a 	bl	80069d8 <tcp_close_shutdown_fin>
 80069a4:	4603      	mov	r3, r0
 80069a6:	e000      	b.n	80069aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08011c18 	.word	0x08011c18
 80069b8:	08011cec 	.word	0x08011cec
 80069bc:	08011c5c 	.word	0x08011c5c
 80069c0:	08011d0c 	.word	0x08011d0c
 80069c4:	200089b4 	.word	0x200089b4
 80069c8:	200089bc 	.word	0x200089bc
 80069cc:	200089f8 	.word	0x200089f8
 80069d0:	200089ac 	.word	0x200089ac
 80069d4:	200089b0 	.word	0x200089b0

080069d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <tcp_close_shutdown_fin+0x1c>
 80069e6:	4b2e      	ldr	r3, [pc, #184]	; (8006aa0 <tcp_close_shutdown_fin+0xc8>)
 80069e8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80069ec:	492d      	ldr	r1, [pc, #180]	; (8006aa4 <tcp_close_shutdown_fin+0xcc>)
 80069ee:	482e      	ldr	r0, [pc, #184]	; (8006aa8 <tcp_close_shutdown_fin+0xd0>)
 80069f0:	f008 ffd8 	bl	800f9a4 <iprintf>

  switch (pcb->state) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7d1b      	ldrb	r3, [r3, #20]
 80069f8:	2b07      	cmp	r3, #7
 80069fa:	d020      	beq.n	8006a3e <tcp_close_shutdown_fin+0x66>
 80069fc:	2b07      	cmp	r3, #7
 80069fe:	dc2b      	bgt.n	8006a58 <tcp_close_shutdown_fin+0x80>
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d002      	beq.n	8006a0a <tcp_close_shutdown_fin+0x32>
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d00d      	beq.n	8006a24 <tcp_close_shutdown_fin+0x4c>
 8006a08:	e026      	b.n	8006a58 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f004 ff94 	bl	800b938 <tcp_send_fin>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11f      	bne.n	8006a5c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2205      	movs	r2, #5
 8006a20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a22:	e01b      	b.n	8006a5c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f004 ff87 	bl	800b938 <tcp_send_fin>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d114      	bne.n	8006a60 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2205      	movs	r2, #5
 8006a3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a3c:	e010      	b.n	8006a60 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f004 ff7a 	bl	800b938 <tcp_send_fin>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d109      	bne.n	8006a64 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2209      	movs	r2, #9
 8006a54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a56:	e005      	b.n	8006a64 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e01c      	b.n	8006a96 <tcp_close_shutdown_fin+0xbe>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <tcp_close_shutdown_fin+0x8e>
      break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <tcp_close_shutdown_fin+0x8e>
      break;
 8006a64:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d103      	bne.n	8006a76 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f005 f8a0 	bl	800bbb4 <tcp_output>
 8006a74:	e00d      	b.n	8006a92 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d108      	bne.n	8006a92 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8b5b      	ldrh	r3, [r3, #26]
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e001      	b.n	8006a96 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08011c18 	.word	0x08011c18
 8006aa4:	08011cc8 	.word	0x08011cc8
 8006aa8:	08011c5c 	.word	0x08011c5c

08006aac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <tcp_close+0x22>
 8006aba:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <tcp_close+0x5c>)
 8006abc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006ac0:	4912      	ldr	r1, [pc, #72]	; (8006b0c <tcp_close+0x60>)
 8006ac2:	4813      	ldr	r0, [pc, #76]	; (8006b10 <tcp_close+0x64>)
 8006ac4:	f008 ff6e 	bl	800f9a4 <iprintf>
 8006ac8:	f06f 030f 	mvn.w	r3, #15
 8006acc:	e017      	b.n	8006afe <tcp_close+0x52>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 8006ace:	4811      	ldr	r0, [pc, #68]	; (8006b14 <tcp_close+0x68>)
 8006ad0:	f008 ff68 	bl	800f9a4 <iprintf>

  tcp_debug_print_state(pcb->state);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7d1b      	ldrb	r3, [r3, #20]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fc63 	bl	80083a4 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7d1b      	ldrb	r3, [r3, #20]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d006      	beq.n	8006af4 <tcp_close+0x48>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8b5b      	ldrh	r3, [r3, #26]
 8006aea:	f043 0310 	orr.w	r3, r3, #16
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006af4:	2101      	movs	r1, #1
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fe8c 	bl	8006814 <tcp_close_shutdown>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	08011c18 	.word	0x08011c18
 8006b0c:	08011d28 	.word	0x08011d28
 8006b10:	08011c5c 	.word	0x08011c5c
 8006b14:	08011d40 	.word	0x08011d40

08006b18 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	; 0x38
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <tcp_abandon+0x20>
 8006b28:	4b52      	ldr	r3, [pc, #328]	; (8006c74 <tcp_abandon+0x15c>)
 8006b2a:	f240 223d 	movw	r2, #573	; 0x23d
 8006b2e:	4952      	ldr	r1, [pc, #328]	; (8006c78 <tcp_abandon+0x160>)
 8006b30:	4852      	ldr	r0, [pc, #328]	; (8006c7c <tcp_abandon+0x164>)
 8006b32:	f008 ff37 	bl	800f9a4 <iprintf>
 8006b36:	e099      	b.n	8006c6c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d106      	bne.n	8006b4e <tcp_abandon+0x36>
 8006b40:	4b4c      	ldr	r3, [pc, #304]	; (8006c74 <tcp_abandon+0x15c>)
 8006b42:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006b46:	494e      	ldr	r1, [pc, #312]	; (8006c80 <tcp_abandon+0x168>)
 8006b48:	484c      	ldr	r0, [pc, #304]	; (8006c7c <tcp_abandon+0x164>)
 8006b4a:	f008 ff2b 	bl	800f9a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7d1b      	ldrb	r3, [r3, #20]
 8006b52:	2b0a      	cmp	r3, #10
 8006b54:	d107      	bne.n	8006b66 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	484a      	ldr	r0, [pc, #296]	; (8006c84 <tcp_abandon+0x16c>)
 8006b5a:	f001 fa9d 	bl	8008098 <tcp_pcb_remove>
    tcp_free(pcb);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fda6 	bl	80066b0 <tcp_free>
 8006b64:	e082      	b.n	8006c6c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b72:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	7d1b      	ldrb	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d126      	bne.n	8006bde <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8adb      	ldrh	r3, [r3, #22]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d02e      	beq.n	8006bf6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <tcp_abandon+0x170>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d105      	bne.n	8006bae <tcp_abandon+0x96>
 8006ba2:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <tcp_abandon+0x170>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a37      	ldr	r2, [pc, #220]	; (8006c88 <tcp_abandon+0x170>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	e013      	b.n	8006bd6 <tcp_abandon+0xbe>
 8006bae:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <tcp_abandon+0x170>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e00c      	b.n	8006bd0 <tcp_abandon+0xb8>
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d104      	bne.n	8006bca <tcp_abandon+0xb2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	60da      	str	r2, [r3, #12]
 8006bc8:	e005      	b.n	8006bd6 <tcp_abandon+0xbe>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ef      	bne.n	8006bb6 <tcp_abandon+0x9e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60da      	str	r2, [r3, #12]
 8006bdc:	e00b      	b.n	8006bf6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8adb      	ldrh	r3, [r3, #22]
 8006be6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4828      	ldr	r0, [pc, #160]	; (8006c8c <tcp_abandon+0x174>)
 8006bec:	f001 fa54 	bl	8008098 <tcp_pcb_remove>
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <tcp_abandon+0x178>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 feec 	bl	80079e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fee3 	bl	80079e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 feda 	bl	80079e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	8b12      	ldrh	r2, [r2, #24]
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	460b      	mov	r3, r1
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f005 fd72 	bl	800c734 <tcp_rst>
    }
    last_state = pcb->state;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7d1b      	ldrb	r3, [r3, #20]
 8006c54:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff fd2a 	bl	80066b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <tcp_abandon+0x154>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f06f 010c 	mvn.w	r1, #12
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	4798      	blx	r3
  }
}
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08011c18 	.word	0x08011c18
 8006c78:	08011d74 	.word	0x08011d74
 8006c7c:	08011c5c 	.word	0x08011c5c
 8006c80:	08011d90 	.word	0x08011d90
 8006c84:	200089b8 	.word	0x200089b8
 8006c88:	200089ac 	.word	0x200089ac
 8006c8c:	200089b4 	.word	0x200089b4
 8006c90:	200089bc 	.word	0x200089bc

08006c94 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ff3a 	bl	8006b18 <tcp_abandon>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <tcp_update_rcv_ann_wnd+0x1c>
 8006cba:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <tcp_update_rcv_ann_wnd+0xa4>)
 8006cbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006cc0:	4924      	ldr	r1, [pc, #144]	; (8006d54 <tcp_update_rcv_ann_wnd+0xa8>)
 8006cc2:	4825      	ldr	r0, [pc, #148]	; (8006d58 <tcp_update_rcv_ann_wnd+0xac>)
 8006cc4:	f008 fe6e 	bl	800f9a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006cdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006ce0:	bf28      	it	cs
 8006ce2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	4413      	add	r3, r2
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	db08      	blt.n	8006d04 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	e020      	b.n	8006d46 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd03      	ble.n	8006d1a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d18:	e014      	b.n	8006d44 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2c:	d306      	bcc.n	8006d3c <tcp_update_rcv_ann_wnd+0x90>
 8006d2e:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <tcp_update_rcv_ann_wnd+0xa4>)
 8006d30:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006d34:	4909      	ldr	r1, [pc, #36]	; (8006d5c <tcp_update_rcv_ann_wnd+0xb0>)
 8006d36:	4808      	ldr	r0, [pc, #32]	; (8006d58 <tcp_update_rcv_ann_wnd+0xac>)
 8006d38:	f008 fe34 	bl	800f9a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006d44:	2300      	movs	r3, #0
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08011c18 	.word	0x08011c18
 8006d54:	08011ea8 	.word	0x08011ea8
 8006d58:	08011c5c 	.word	0x08011c5c
 8006d5c:	08011ecc 	.word	0x08011ecc

08006d60 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <tcp_recved+0x22>
 8006d72:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <tcp_recved+0xac>)
 8006d74:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006d78:	4925      	ldr	r1, [pc, #148]	; (8006e10 <tcp_recved+0xb0>)
 8006d7a:	4826      	ldr	r0, [pc, #152]	; (8006e14 <tcp_recved+0xb4>)
 8006d7c:	f008 fe12 	bl	800f9a4 <iprintf>
 8006d80:	e041      	b.n	8006e06 <tcp_recved+0xa6>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7d1b      	ldrb	r3, [r3, #20]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d106      	bne.n	8006d98 <tcp_recved+0x38>
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <tcp_recved+0xac>)
 8006d8c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006d90:	4921      	ldr	r1, [pc, #132]	; (8006e18 <tcp_recved+0xb8>)
 8006d92:	4820      	ldr	r0, [pc, #128]	; (8006e14 <tcp_recved+0xb4>)
 8006d94:	f008 fe06 	bl	800f9a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	4413      	add	r3, r2
 8006da0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006da2:	89fb      	ldrh	r3, [r7, #14]
 8006da4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006da8:	d804      	bhi.n	8006db4 <tcp_recved+0x54>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	89fa      	ldrh	r2, [r7, #14]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d207      	bcs.n	8006dc4 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 8006db4:	4819      	ldr	r0, [pc, #100]	; (8006e1c <tcp_recved+0xbc>)
 8006db6:	f008 fe91 	bl	800fadc <puts>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006dc2:	e002      	b.n	8006dca <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	89fa      	ldrh	r2, [r7, #14]
 8006dc8:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff ff6e 	bl	8006cac <tcp_update_rcv_ann_wnd>
 8006dd0:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006dd8:	d309      	bcc.n	8006dee <tcp_recved+0x8e>
    tcp_ack_now(pcb);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8b5b      	ldrh	r3, [r3, #26]
 8006dde:	f043 0302 	orr.w	r3, r3, #2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f004 fee3 	bl	800bbb4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 8006dee:	8879      	ldrh	r1, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4807      	ldr	r0, [pc, #28]	; (8006e20 <tcp_recved+0xc0>)
 8006e02:	f008 fdcf 	bl	800f9a4 <iprintf>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08011c18 	.word	0x08011c18
 8006e10:	08011ee8 	.word	0x08011ee8
 8006e14:	08011c5c 	.word	0x08011c5c
 8006e18:	08011f00 	.word	0x08011f00
 8006e1c:	08011f28 	.word	0x08011f28
 8006e20:	08011f64 	.word	0x08011f64

08006e24 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006e2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <tcp_new_port+0x84>)
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <tcp_new_port+0x84>)
 8006e38:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <tcp_new_port+0x84>)
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d103      	bne.n	8006e4e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <tcp_new_port+0x84>)
 8006e48:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006e4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006e4e:	2300      	movs	r3, #0
 8006e50:	71fb      	strb	r3, [r7, #7]
 8006e52:	e01e      	b.n	8006e92 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <tcp_new_port+0x88>)
 8006e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e011      	b.n	8006e86 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	8ada      	ldrh	r2, [r3, #22]
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <tcp_new_port+0x84>)
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d108      	bne.n	8006e80 <tcp_new_port+0x5c>
        n++;
 8006e6e:	88bb      	ldrh	r3, [r7, #4]
 8006e70:	3301      	adds	r3, #1
 8006e72:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006e74:	88bb      	ldrh	r3, [r7, #4]
 8006e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e7a:	d3d8      	bcc.n	8006e2e <tcp_new_port+0xa>
          return 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e00d      	b.n	8006e9c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ea      	bne.n	8006e62 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	71fb      	strb	r3, [r7, #7]
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d9dd      	bls.n	8006e54 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <tcp_new_port+0x84>)
 8006e9a:	881b      	ldrh	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	2000000a 	.word	0x2000000a
 8006eac:	080147a8 	.word	0x080147a8

08006eb0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <tcp_connect+0x2e>
 8006eca:	4b80      	ldr	r3, [pc, #512]	; (80070cc <tcp_connect+0x21c>)
 8006ecc:	f240 4235 	movw	r2, #1077	; 0x435
 8006ed0:	497f      	ldr	r1, [pc, #508]	; (80070d0 <tcp_connect+0x220>)
 8006ed2:	4880      	ldr	r0, [pc, #512]	; (80070d4 <tcp_connect+0x224>)
 8006ed4:	f008 fd66 	bl	800f9a4 <iprintf>
 8006ed8:	f06f 030f 	mvn.w	r3, #15
 8006edc:	e0f1      	b.n	80070c2 <tcp_connect+0x212>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <tcp_connect+0x48>
 8006ee4:	4b79      	ldr	r3, [pc, #484]	; (80070cc <tcp_connect+0x21c>)
 8006ee6:	f240 4236 	movw	r2, #1078	; 0x436
 8006eea:	497b      	ldr	r1, [pc, #492]	; (80070d8 <tcp_connect+0x228>)
 8006eec:	4879      	ldr	r0, [pc, #484]	; (80070d4 <tcp_connect+0x224>)
 8006eee:	f008 fd59 	bl	800f9a4 <iprintf>
 8006ef2:	f06f 030f 	mvn.w	r3, #15
 8006ef6:	e0e4      	b.n	80070c2 <tcp_connect+0x212>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <tcp_connect+0x64>
 8006f00:	4b72      	ldr	r3, [pc, #456]	; (80070cc <tcp_connect+0x21c>)
 8006f02:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8006f06:	4975      	ldr	r1, [pc, #468]	; (80070dc <tcp_connect+0x22c>)
 8006f08:	4872      	ldr	r0, [pc, #456]	; (80070d4 <tcp_connect+0x224>)
 8006f0a:	f008 fd4b 	bl	800f9a4 <iprintf>
 8006f0e:	f06f 0309 	mvn.w	r3, #9
 8006f12:	e0d6      	b.n	80070c2 <tcp_connect+0x212>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4871      	ldr	r0, [pc, #452]	; (80070e0 <tcp_connect+0x230>)
 8006f1a:	f008 fd43 	bl	800f9a4 <iprintf>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <tcp_connect+0x7a>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	e000      	b.n	8006f2c <tcp_connect+0x7c>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	7a1b      	ldrb	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <tcp_connect+0x9c>
    netif = netif_get_by_index(pcb->netif_idx);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	7a1b      	ldrb	r3, [r3, #8]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fd22 	bl	800598c <netif_get_by_index>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24
 8006f4a:	e005      	b.n	8006f58 <tcp_connect+0xa8>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f007 fa47 	bl	800e3e4 <ip4_route>
 8006f56:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <tcp_connect+0xb4>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006f5e:	f06f 0303 	mvn.w	r3, #3
 8006f62:	e0ae      	b.n	80070c2 <tcp_connect+0x212>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <tcp_connect+0xc2>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d111      	bne.n	8006f96 <tcp_connect+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <tcp_connect+0xce>
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	e000      	b.n	8006f80 <tcp_connect+0xd0>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <tcp_connect+0xde>
      return ERR_RTE;
 8006f88:	f06f 0303 	mvn.w	r3, #3
 8006f8c:	e099      	b.n	80070c2 <tcp_connect+0x212>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8adb      	ldrh	r3, [r3, #22]
 8006f9a:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8adb      	ldrh	r3, [r3, #22]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <tcp_connect+0x10e>
    pcb->local_port = tcp_new_port();
 8006fa4:	f7ff ff3e 	bl	8006e24 <tcp_new_port>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8adb      	ldrh	r3, [r3, #22]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <tcp_connect+0x10e>
      return ERR_BUF;
 8006fb8:	f06f 0301 	mvn.w	r3, #1
 8006fbc:	e081      	b.n	80070c2 <tcp_connect+0x212>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f001 f90c 	bl	80081dc <tcp_next_iss>
 8006fc4:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1e5a      	subs	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007012:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3304      	adds	r3, #4
 800701c:	461a      	mov	r2, r3
 800701e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007020:	f001 f902 	bl	8008228 <tcp_eff_send_mss_netif>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800703c:	2102      	movs	r1, #2
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f004 fcca 	bl	800b9d8 <tcp_enqueue_flags>
 8007044:	4603      	mov	r3, r0
 8007046:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8007048:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d136      	bne.n	80070be <tcp_connect+0x20e>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2202      	movs	r2, #2
 8007054:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007056:	8b7b      	ldrh	r3, [r7, #26]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d021      	beq.n	80070a0 <tcp_connect+0x1f0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800705c:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <tcp_connect+0x234>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d105      	bne.n	8007072 <tcp_connect+0x1c2>
 8007066:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <tcp_connect+0x234>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <tcp_connect+0x234>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	e013      	b.n	800709a <tcp_connect+0x1ea>
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <tcp_connect+0x234>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	623b      	str	r3, [r7, #32]
 8007078:	e00c      	b.n	8007094 <tcp_connect+0x1e4>
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	429a      	cmp	r2, r3
 8007082:	d104      	bne.n	800708e <tcp_connect+0x1de>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	60da      	str	r2, [r3, #12]
 800708c:	e005      	b.n	800709a <tcp_connect+0x1ea>
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1ef      	bne.n	800707a <tcp_connect+0x1ca>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80070a0:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <tcp_connect+0x238>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	60da      	str	r2, [r3, #12]
 80070a8:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <tcp_connect+0x238>)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	f005 fd87 	bl	800cbc0 <tcp_timer_needed>
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <tcp_connect+0x23c>)
 80070b4:	2201      	movs	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f004 fd7b 	bl	800bbb4 <tcp_output>
  }
  return ret;
 80070be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3728      	adds	r7, #40	; 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	08011c18 	.word	0x08011c18
 80070d0:	08011f94 	.word	0x08011f94
 80070d4:	08011c5c 	.word	0x08011c5c
 80070d8:	08011fb0 	.word	0x08011fb0
 80070dc:	08011fcc 	.word	0x08011fcc
 80070e0:	08011ffc 	.word	0x08011ffc
 80070e4:	200089ac 	.word	0x200089ac
 80070e8:	200089b4 	.word	0x200089b4
 80070ec:	200089bc 	.word	0x200089bc

080070f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80070f0:	b5b0      	push	{r4, r5, r7, lr}
 80070f2:	b092      	sub	sp, #72	; 0x48
 80070f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  ++tcp_ticks;
 80070fc:	4b9d      	ldr	r3, [pc, #628]	; (8007374 <tcp_slowtmr+0x284>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	4a9c      	ldr	r2, [pc, #624]	; (8007374 <tcp_slowtmr+0x284>)
 8007104:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007106:	4b9c      	ldr	r3, [pc, #624]	; (8007378 <tcp_slowtmr+0x288>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	4b9a      	ldr	r3, [pc, #616]	; (8007378 <tcp_slowtmr+0x288>)
 8007110:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
  pcb = tcp_active_pcbs;
 8007116:	4b99      	ldr	r3, [pc, #612]	; (800737c <tcp_slowtmr+0x28c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	633b      	str	r3, [r7, #48]	; 0x30
  if (pcb == NULL) {
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 82fc 	bne.w	800771c <tcp_slowtmr+0x62c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 8007124:	4896      	ldr	r0, [pc, #600]	; (8007380 <tcp_slowtmr+0x290>)
 8007126:	f008 fcd9 	bl	800fadc <puts>
  }
  while (pcb != NULL) {
 800712a:	e2f7      	b.n	800771c <tcp_slowtmr+0x62c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800712c:	4895      	ldr	r0, [pc, #596]	; (8007384 <tcp_slowtmr+0x294>)
 800712e:	f008 fcd5 	bl	800fadc <puts>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <tcp_slowtmr+0x58>
 800713a:	4b93      	ldr	r3, [pc, #588]	; (8007388 <tcp_slowtmr+0x298>)
 800713c:	f240 42be 	movw	r2, #1214	; 0x4be
 8007140:	4992      	ldr	r1, [pc, #584]	; (800738c <tcp_slowtmr+0x29c>)
 8007142:	4893      	ldr	r0, [pc, #588]	; (8007390 <tcp_slowtmr+0x2a0>)
 8007144:	f008 fc2e 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	7d1b      	ldrb	r3, [r3, #20]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d106      	bne.n	800715e <tcp_slowtmr+0x6e>
 8007150:	4b8d      	ldr	r3, [pc, #564]	; (8007388 <tcp_slowtmr+0x298>)
 8007152:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007156:	498f      	ldr	r1, [pc, #572]	; (8007394 <tcp_slowtmr+0x2a4>)
 8007158:	488d      	ldr	r0, [pc, #564]	; (8007390 <tcp_slowtmr+0x2a0>)
 800715a:	f008 fc23 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	7d1b      	ldrb	r3, [r3, #20]
 8007162:	2b0a      	cmp	r3, #10
 8007164:	d106      	bne.n	8007174 <tcp_slowtmr+0x84>
 8007166:	4b88      	ldr	r3, [pc, #544]	; (8007388 <tcp_slowtmr+0x298>)
 8007168:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800716c:	498a      	ldr	r1, [pc, #552]	; (8007398 <tcp_slowtmr+0x2a8>)
 800716e:	4888      	ldr	r0, [pc, #544]	; (8007390 <tcp_slowtmr+0x2a0>)
 8007170:	f008 fc18 	bl	800f9a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	7f9a      	ldrb	r2, [r3, #30]
 8007178:	4b7f      	ldr	r3, [pc, #508]	; (8007378 <tcp_slowtmr+0x288>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d105      	bne.n	800718c <tcp_slowtmr+0x9c>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb = pcb->next;
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	633b      	str	r3, [r7, #48]	; 0x30
      continue;
 800718a:	e2c7      	b.n	800771c <tcp_slowtmr+0x62c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800718c:	4b7a      	ldr	r3, [pc, #488]	; (8007378 <tcp_slowtmr+0x288>)
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    pcb_reset = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	7d1b      	ldrb	r3, [r3, #20]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d10d      	bne.n	80071c4 <tcp_slowtmr+0xd4>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d908      	bls.n	80071c4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80071b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071b6:	3301      	adds	r3, #1
 80071b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80071bc:	4877      	ldr	r0, [pc, #476]	; (800739c <tcp_slowtmr+0x2ac>)
 80071be:	f008 fc8d 	bl	800fadc <puts>
 80071c2:	e12b      	b.n	800741c <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ca:	2b0b      	cmp	r3, #11
 80071cc:	d908      	bls.n	80071e0 <tcp_slowtmr+0xf0>
      ++pcb_remove;
 80071ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071d2:	3301      	adds	r3, #1
 80071d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 80071d8:	4871      	ldr	r0, [pc, #452]	; (80073a0 <tcp_slowtmr+0x2b0>)
 80071da:	f008 fc7f 	bl	800fadc <puts>
 80071de:	e11d      	b.n	800741c <tcp_slowtmr+0x32c>
    } else {
      if (pcb->persist_backoff > 0) {
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d075      	beq.n	80072d6 <tcp_slowtmr+0x1e6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <tcp_slowtmr+0x110>
 80071f2:	4b65      	ldr	r3, [pc, #404]	; (8007388 <tcp_slowtmr+0x298>)
 80071f4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80071f8:	496a      	ldr	r1, [pc, #424]	; (80073a4 <tcp_slowtmr+0x2b4>)
 80071fa:	4865      	ldr	r0, [pc, #404]	; (8007390 <tcp_slowtmr+0x2a0>)
 80071fc:	f008 fbd2 	bl	800f9a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <tcp_slowtmr+0x126>
 8007208:	4b5f      	ldr	r3, [pc, #380]	; (8007388 <tcp_slowtmr+0x298>)
 800720a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800720e:	4966      	ldr	r1, [pc, #408]	; (80073a8 <tcp_slowtmr+0x2b8>)
 8007210:	485f      	ldr	r0, [pc, #380]	; (8007390 <tcp_slowtmr+0x2a0>)
 8007212:	f008 fbc7 	bl	800f9a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800721c:	2b0b      	cmp	r3, #11
 800721e:	d905      	bls.n	800722c <tcp_slowtmr+0x13c>
          ++pcb_remove; /* max probes reached */
 8007220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007224:	3301      	adds	r3, #1
 8007226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800722a:	e0f7      	b.n	800741c <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007232:	3b01      	subs	r3, #1
 8007234:	4a5d      	ldr	r2, [pc, #372]	; (80073ac <tcp_slowtmr+0x2bc>)
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007240:	7d7a      	ldrb	r2, [r7, #21]
 8007242:	429a      	cmp	r2, r3
 8007244:	d907      	bls.n	8007256 <tcp_slowtmr+0x166>
            pcb->persist_cnt++;
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800724c:	3301      	adds	r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800725c:	7d7a      	ldrb	r2, [r7, #21]
 800725e:	429a      	cmp	r2, r3
 8007260:	f200 80dc 	bhi.w	800741c <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8007264:	2301      	movs	r3, #1
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <tcp_slowtmr+0x194>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007274:	f005 fb96 	bl	800c9a4 <tcp_zero_window_probe>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d014      	beq.n	80072a8 <tcp_slowtmr+0x1b8>
                next_slot = 0; /* try probe again with current slot */
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
 8007282:	e011      	b.n	80072a8 <tcp_slowtmr+0x1b8>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800728a:	4619      	mov	r1, r3
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f004 fa07 	bl	800b6a0 <tcp_split_unsent_seg>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d107      	bne.n	80072a8 <tcp_slowtmr+0x1b8>
                if (tcp_output(pcb) == ERR_OK) {
 8007298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729a:	f004 fc8b 	bl	800bbb4 <tcp_output>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <tcp_slowtmr+0x1b8>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
                }
              }
            }
            if (next_slot) {
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 80b6 	beq.w	800741c <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072be:	2b06      	cmp	r3, #6
 80072c0:	f200 80ac 	bhi.w	800741c <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80072d4:	e0a2      	b.n	800741c <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	db0f      	blt.n	8007300 <tcp_slowtmr+0x210>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d008      	beq.n	8007300 <tcp_slowtmr+0x210>
          ++pcb->rtime;
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3301      	adds	r3, #1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	b21a      	sxth	r2, r3
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800730c:	429a      	cmp	r2, r3
 800730e:	f2c0 8085 	blt.w	800741c <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007314:	f004 ff42 	bl	800c19c <tcp_rexmit_rto_prepare>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <tcp_slowtmr+0x23e>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	2b00      	cmp	r3, #0
 8007324:	d17a      	bne.n	800741c <tcp_slowtmr+0x32c>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d076      	beq.n	800741c <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	7d1b      	ldrb	r3, [r3, #20]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d043      	beq.n	80073be <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800733c:	2b0c      	cmp	r3, #12
 800733e:	bf28      	it	cs
 8007340:	230c      	movcs	r3, #12
 8007342:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800734a:	10db      	asrs	r3, r3, #3
 800734c:	b21b      	sxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007356:	4413      	add	r3, r2
 8007358:	7ffa      	ldrb	r2, [r7, #31]
 800735a:	4915      	ldr	r1, [pc, #84]	; (80073b0 <tcp_slowtmr+0x2c0>)
 800735c:	5c8a      	ldrb	r2, [r1, r2]
 800735e:	4093      	lsls	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007368:	4293      	cmp	r3, r2
 800736a:	dc23      	bgt.n	80073b4 <tcp_slowtmr+0x2c4>
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	b21a      	sxth	r2, r3
 8007370:	e022      	b.n	80073b8 <tcp_slowtmr+0x2c8>
 8007372:	bf00      	nop
 8007374:	200089a8 	.word	0x200089a8
 8007378:	200089be 	.word	0x200089be
 800737c:	200089b4 	.word	0x200089b4
 8007380:	08012018 	.word	0x08012018
 8007384:	08012034 	.word	0x08012034
 8007388:	08011c18 	.word	0x08011c18
 800738c:	08012058 	.word	0x08012058
 8007390:	08011c5c 	.word	0x08011c5c
 8007394:	08012084 	.word	0x08012084
 8007398:	080120b0 	.word	0x080120b0
 800739c:	080120e0 	.word	0x080120e0
 80073a0:	08012108 	.word	0x08012108
 80073a4:	08012130 	.word	0x08012130
 80073a8:	08012164 	.word	0x08012164
 80073ac:	080147a0 	.word	0x080147a0
 80073b0:	08014790 	.word	0x08014790
 80073b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2200      	movs	r2, #0
 80073c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bf28      	it	cs
 80073d4:	4613      	movcs	r3, r2
 80073d6:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 80073d8:	8afb      	ldrh	r3, [r7, #22]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d206      	bcs.n	8007404 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	2200      	movs	r2, #0
 8007412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007418:	f004 ff3a 	bl	800c290 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	7d1b      	ldrb	r3, [r3, #20]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d114      	bne.n	800744e <tcp_slowtmr+0x35e>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	8b5b      	ldrh	r3, [r3, #26]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00e      	beq.n	800744e <tcp_slowtmr+0x35e>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007430:	4b8e      	ldr	r3, [pc, #568]	; (800766c <tcp_slowtmr+0x57c>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b28      	cmp	r3, #40	; 0x28
 800743c:	d907      	bls.n	800744e <tcp_slowtmr+0x35e>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800743e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007442:	3301      	adds	r3, #1
 8007444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 8007448:	4889      	ldr	r0, [pc, #548]	; (8007670 <tcp_slowtmr+0x580>)
 800744a:	f008 fb47 	bl	800fadc <puts>
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	7a5b      	ldrb	r3, [r3, #9]
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d067      	beq.n	800752a <tcp_slowtmr+0x43a>
        ((pcb->state == ESTABLISHED) ||
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800745e:	2b04      	cmp	r3, #4
 8007460:	d003      	beq.n	800746a <tcp_slowtmr+0x37a>
         (pcb->state == CLOSE_WAIT))) {
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007466:	2b07      	cmp	r3, #7
 8007468:	d15f      	bne.n	800752a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800746a:	4b80      	ldr	r3, [pc, #512]	; (800766c <tcp_slowtmr+0x57c>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800747a:	4b7e      	ldr	r3, [pc, #504]	; (8007674 <tcp_slowtmr+0x584>)
 800747c:	440b      	add	r3, r1
 800747e:	497e      	ldr	r1, [pc, #504]	; (8007678 <tcp_slowtmr+0x588>)
 8007480:	fba1 1303 	umull	r1, r3, r1, r3
 8007484:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007486:	429a      	cmp	r2, r3
 8007488:	d927      	bls.n	80074da <tcp_slowtmr+0x3ea>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 800748a:	487c      	ldr	r0, [pc, #496]	; (800767c <tcp_slowtmr+0x58c>)
 800748c:	f008 fa8a 	bl	800f9a4 <iprintf>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4619      	mov	r1, r3
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	0a1b      	lsrs	r3, r3, #8
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4618      	mov	r0, r3
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	4603      	mov	r3, r0
 80074b8:	4871      	ldr	r0, [pc, #452]	; (8007680 <tcp_slowtmr+0x590>)
 80074ba:	f008 fa73 	bl	800f9a4 <iprintf>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 80074be:	200a      	movs	r0, #10
 80074c0:	f008 fa88 	bl	800f9d4 <putchar>

        ++pcb_remove;
 80074c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074c8:	3301      	adds	r3, #1
 80074ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        ++pcb_reset;
 80074ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074d2:	3301      	adds	r3, #1
 80074d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d8:	e027      	b.n	800752a <tcp_slowtmr+0x43a>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074da:	4b64      	ldr	r3, [pc, #400]	; (800766c <tcp_slowtmr+0x57c>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80074f0:	4618      	mov	r0, r3
 80074f2:	4b64      	ldr	r3, [pc, #400]	; (8007684 <tcp_slowtmr+0x594>)
 80074f4:	fb00 f303 	mul.w	r3, r0, r3
 80074f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80074fa:	495f      	ldr	r1, [pc, #380]	; (8007678 <tcp_slowtmr+0x588>)
 80074fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007500:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007502:	429a      	cmp	r2, r3
 8007504:	d911      	bls.n	800752a <tcp_slowtmr+0x43a>
        err = tcp_keepalive(pcb);
 8007506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007508:	f005 f9cc 	bl	800c8a4 <tcp_keepalive>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (err == ERR_OK) {
 8007512:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <tcp_slowtmr+0x43a>
          pcb->keep_cnt_sent++;
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007520:	3301      	adds	r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <tcp_slowtmr+0x466>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007532:	4b4e      	ldr	r3, [pc, #312]	; (800766c <tcp_slowtmr+0x57c>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007542:	4619      	mov	r1, r3
 8007544:	460b      	mov	r3, r1
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	440b      	add	r3, r1
 800754a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <tcp_slowtmr+0x466>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007552:	f000 ff13 	bl	800837c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	7d1b      	ldrb	r3, [r3, #20]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d10e      	bne.n	800757c <tcp_slowtmr+0x48c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800755e:	4b43      	ldr	r3, [pc, #268]	; (800766c <tcp_slowtmr+0x57c>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b28      	cmp	r3, #40	; 0x28
 800756a:	d907      	bls.n	800757c <tcp_slowtmr+0x48c>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800756c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007570:	3301      	adds	r3, #1
 8007572:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 8007576:	4844      	ldr	r0, [pc, #272]	; (8007688 <tcp_slowtmr+0x598>)
 8007578:	f008 fab0 	bl	800fadc <puts>
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	7d1b      	ldrb	r3, [r3, #20]
 8007580:	2b09      	cmp	r3, #9
 8007582:	d10e      	bne.n	80075a2 <tcp_slowtmr+0x4b2>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007584:	4b39      	ldr	r3, [pc, #228]	; (800766c <tcp_slowtmr+0x57c>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2bf0      	cmp	r3, #240	; 0xf0
 8007590:	d907      	bls.n	80075a2 <tcp_slowtmr+0x4b2>
        ++pcb_remove;
 8007592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007596:	3301      	adds	r3, #1
 8007598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 800759c:	483b      	ldr	r0, [pc, #236]	; (800768c <tcp_slowtmr+0x59c>)
 800759e:	f008 fa9d 	bl	800fadc <puts>
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80075a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d07e      	beq.n	80076a8 <tcp_slowtmr+0x5b8>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80075b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075b4:	f000 fcfe 	bl	8007fb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d010      	beq.n	80075e0 <tcp_slowtmr+0x4f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80075be:	4b34      	ldr	r3, [pc, #208]	; (8007690 <tcp_slowtmr+0x5a0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d106      	bne.n	80075d6 <tcp_slowtmr+0x4e6>
 80075c8:	4b32      	ldr	r3, [pc, #200]	; (8007694 <tcp_slowtmr+0x5a4>)
 80075ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80075ce:	4932      	ldr	r1, [pc, #200]	; (8007698 <tcp_slowtmr+0x5a8>)
 80075d0:	4832      	ldr	r0, [pc, #200]	; (800769c <tcp_slowtmr+0x5ac>)
 80075d2:	f008 f9e7 	bl	800f9a4 <iprintf>
        prev->next = pcb->next;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	e00f      	b.n	8007600 <tcp_slowtmr+0x510>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80075e0:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <tcp_slowtmr+0x5a0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d006      	beq.n	80075f8 <tcp_slowtmr+0x508>
 80075ea:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <tcp_slowtmr+0x5a4>)
 80075ec:	f240 5271 	movw	r2, #1393	; 0x571
 80075f0:	492b      	ldr	r1, [pc, #172]	; (80076a0 <tcp_slowtmr+0x5b0>)
 80075f2:	482a      	ldr	r0, [pc, #168]	; (800769c <tcp_slowtmr+0x5ac>)
 80075f4:	f008 f9d6 	bl	800f9a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a24      	ldr	r2, [pc, #144]	; (8007690 <tcp_slowtmr+0x5a0>)
 80075fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007604:	2b00      	cmp	r3, #0
 8007606:	d013      	beq.n	8007630 <tcp_slowtmr+0x540>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007610:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	3304      	adds	r3, #4
 8007616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007618:	8ad2      	ldrh	r2, [r2, #22]
 800761a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800761c:	8b09      	ldrh	r1, [r1, #24]
 800761e:	9102      	str	r1, [sp, #8]
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	462b      	mov	r3, r5
 8007626:	4622      	mov	r2, r4
 8007628:	4601      	mov	r1, r0
 800762a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762c:	f005 f882 	bl	800c734 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	7d1b      	ldrb	r3, [r3, #20]
 800763a:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	633b      	str	r3, [r7, #48]	; 0x30
      tcp_free(pcb2);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff f832 	bl	80066b0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800764c:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <tcp_slowtmr+0x5b4>)
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <tcp_slowtmr+0x572>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f06f 010c 	mvn.w	r1, #12
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007662:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <tcp_slowtmr+0x5b4>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d058      	beq.n	800771c <tcp_slowtmr+0x62c>
        goto tcp_slowtmr_start;
 800766a:	e552      	b.n	8007112 <tcp_slowtmr+0x22>
 800766c:	200089a8 	.word	0x200089a8
 8007670:	0801219c 	.word	0x0801219c
 8007674:	000a4cb8 	.word	0x000a4cb8
 8007678:	10624dd3 	.word	0x10624dd3
 800767c:	080121cc 	.word	0x080121cc
 8007680:	08012204 	.word	0x08012204
 8007684:	000124f8 	.word	0x000124f8
 8007688:	08012214 	.word	0x08012214
 800768c:	08012240 	.word	0x08012240
 8007690:	200089b4 	.word	0x200089b4
 8007694:	08011c18 	.word	0x08011c18
 8007698:	0801226c 	.word	0x0801226c
 800769c:	08011c5c 	.word	0x08011c5c
 80076a0:	08012298 	.word	0x08012298
 80076a4:	200089bc 	.word	0x200089bc
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb = pcb->next;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	633b      	str	r3, [r7, #48]	; 0x30

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	7f1b      	ldrb	r3, [r3, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	7f1a      	ldrb	r2, [r3, #28]
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	7f5b      	ldrb	r3, [r3, #29]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d328      	bcc.n	800771c <tcp_slowtmr+0x62c>
        prev->polltmr = 0;
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 80076d0:	4845      	ldr	r0, [pc, #276]	; (80077e8 <tcp_slowtmr+0x6f8>)
 80076d2:	f008 fa03 	bl	800fadc <puts>
        tcp_active_pcbs_changed = 0;
 80076d6:	4b45      	ldr	r3, [pc, #276]	; (80077ec <tcp_slowtmr+0x6fc>)
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <tcp_slowtmr+0x60e>
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ee:	6912      	ldr	r2, [r2, #16]
 80076f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076fc:	e002      	b.n	8007704 <tcp_slowtmr+0x614>
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (tcp_active_pcbs_changed) {
 8007704:	4b39      	ldr	r3, [pc, #228]	; (80077ec <tcp_slowtmr+0x6fc>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d000      	beq.n	800770e <tcp_slowtmr+0x61e>
          goto tcp_slowtmr_start;
 800770c:	e501      	b.n	8007112 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800770e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <tcp_slowtmr+0x62c>
          tcp_output(prev);
 8007716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007718:	f004 fa4c 	bl	800bbb4 <tcp_output>
  while (pcb != NULL) {
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	f47f ad04 	bne.w	800712c <tcp_slowtmr+0x3c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
  pcb = tcp_tw_pcbs;
 8007728:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <tcp_slowtmr+0x700>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	633b      	str	r3, [r7, #48]	; 0x30
  while (pcb != NULL) {
 800772e:	e052      	b.n	80077d6 <tcp_slowtmr+0x6e6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	7d1b      	ldrb	r3, [r3, #20]
 8007734:	2b0a      	cmp	r3, #10
 8007736:	d006      	beq.n	8007746 <tcp_slowtmr+0x656>
 8007738:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <tcp_slowtmr+0x704>)
 800773a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800773e:	492e      	ldr	r1, [pc, #184]	; (80077f8 <tcp_slowtmr+0x708>)
 8007740:	482e      	ldr	r0, [pc, #184]	; (80077fc <tcp_slowtmr+0x70c>)
 8007742:	f008 f92f 	bl	800f9a4 <iprintf>
    pcb_remove = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800774c:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <tcp_slowtmr+0x710>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2bf0      	cmp	r3, #240	; 0xf0
 8007758:	d904      	bls.n	8007764 <tcp_slowtmr+0x674>
      ++pcb_remove;
 800775a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800775e:	3301      	adds	r3, #1
 8007760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007768:	2b00      	cmp	r3, #0
 800776a:	d02f      	beq.n	80077cc <tcp_slowtmr+0x6dc>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800776c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800776e:	f000 fc21 	bl	8007fb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d010      	beq.n	800779a <tcp_slowtmr+0x6aa>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <tcp_slowtmr+0x700>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777e:	429a      	cmp	r2, r3
 8007780:	d106      	bne.n	8007790 <tcp_slowtmr+0x6a0>
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <tcp_slowtmr+0x704>)
 8007784:	f240 52af 	movw	r2, #1455	; 0x5af
 8007788:	491e      	ldr	r1, [pc, #120]	; (8007804 <tcp_slowtmr+0x714>)
 800778a:	481c      	ldr	r0, [pc, #112]	; (80077fc <tcp_slowtmr+0x70c>)
 800778c:	f008 f90a 	bl	800f9a4 <iprintf>
        prev->next = pcb->next;
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	60da      	str	r2, [r3, #12]
 8007798:	e00f      	b.n	80077ba <tcp_slowtmr+0x6ca>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <tcp_slowtmr+0x700>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d006      	beq.n	80077b2 <tcp_slowtmr+0x6c2>
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <tcp_slowtmr+0x704>)
 80077a6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80077aa:	4917      	ldr	r1, [pc, #92]	; (8007808 <tcp_slowtmr+0x718>)
 80077ac:	4813      	ldr	r0, [pc, #76]	; (80077fc <tcp_slowtmr+0x70c>)
 80077ae:	f008 f8f9 	bl	800f9a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	4a0e      	ldr	r2, [pc, #56]	; (80077f0 <tcp_slowtmr+0x700>)
 80077b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	633b      	str	r3, [r7, #48]	; 0x30
      tcp_free(pcb2);
 80077c4:	6a38      	ldr	r0, [r7, #32]
 80077c6:	f7fe ff73 	bl	80066b0 <tcp_free>
 80077ca:	e004      	b.n	80077d6 <tcp_slowtmr+0x6e6>
    } else {
      prev = pcb;
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb = pcb->next;
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
  while (pcb != NULL) {
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1a9      	bne.n	8007730 <tcp_slowtmr+0x640>
    }
  }
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	3738      	adds	r7, #56	; 0x38
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bdb0      	pop	{r4, r5, r7, pc}
 80077e6:	bf00      	nop
 80077e8:	080122c4 	.word	0x080122c4
 80077ec:	200089bc 	.word	0x200089bc
 80077f0:	200089b8 	.word	0x200089b8
 80077f4:	08011c18 	.word	0x08011c18
 80077f8:	080122e8 	.word	0x080122e8
 80077fc:	08011c5c 	.word	0x08011c5c
 8007800:	200089a8 	.word	0x200089a8
 8007804:	08012318 	.word	0x08012318
 8007808:	08012340 	.word	0x08012340

0800780c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007812:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <tcp_fasttmr+0xc8>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4b2e      	ldr	r3, [pc, #184]	; (80078d4 <tcp_fasttmr+0xc8>)
 800781c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <tcp_fasttmr+0xcc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007824:	e04e      	b.n	80078c4 <tcp_fasttmr+0xb8>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7f9a      	ldrb	r2, [r3, #30]
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <tcp_fasttmr+0xc8>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d045      	beq.n	80078be <tcp_fasttmr+0xb2>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007832:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <tcp_fasttmr+0xc8>)
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8b5b      	ldrh	r3, [r3, #26]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d013      	beq.n	800786e <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 8007846:	4825      	ldr	r0, [pc, #148]	; (80078dc <tcp_fasttmr+0xd0>)
 8007848:	f008 f948 	bl	800fadc <puts>
        tcp_ack_now(pcb);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8b5b      	ldrh	r3, [r3, #26]
 8007850:	f043 0302 	orr.w	r3, r3, #2
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f004 f9aa 	bl	800bbb4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8b5b      	ldrh	r3, [r3, #26]
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	b29a      	uxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8b5b      	ldrh	r3, [r3, #26]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00c      	beq.n	8007894 <tcp_fasttmr+0x88>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 800787a:	4819      	ldr	r0, [pc, #100]	; (80078e0 <tcp_fasttmr+0xd4>)
 800787c:	f008 f92e 	bl	800fadc <puts>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8b5b      	ldrh	r3, [r3, #26]
 8007884:	f023 0308 	bic.w	r3, r3, #8
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f8a2 	bl	80069d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <tcp_fasttmr+0xac>
        tcp_active_pcbs_changed = 0;
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <tcp_fasttmr+0xd8>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f81d 	bl	80078e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <tcp_fasttmr+0xd8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d000      	beq.n	80078b8 <tcp_fasttmr+0xac>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80078b6:	e7b2      	b.n	800781e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	607b      	str	r3, [r7, #4]
 80078bc:	e002      	b.n	80078c4 <tcp_fasttmr+0xb8>
    } else {
      pcb = pcb->next;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1ad      	bne.n	8007826 <tcp_fasttmr+0x1a>
    }
  }
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200089be 	.word	0x200089be
 80078d8:	200089b4 	.word	0x200089b4
 80078dc:	08012368 	.word	0x08012368
 80078e0:	08012384 	.word	0x08012384
 80078e4:	200089bc 	.word	0x200089bc

080078e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <tcp_process_refused_data+0x22>
 80078f6:	4b37      	ldr	r3, [pc, #220]	; (80079d4 <tcp_process_refused_data+0xec>)
 80078f8:	f240 6209 	movw	r2, #1545	; 0x609
 80078fc:	4936      	ldr	r1, [pc, #216]	; (80079d8 <tcp_process_refused_data+0xf0>)
 80078fe:	4837      	ldr	r0, [pc, #220]	; (80079dc <tcp_process_refused_data+0xf4>)
 8007900:	f008 f850 	bl	800f9a4 <iprintf>
 8007904:	f06f 030f 	mvn.w	r3, #15
 8007908:	e060      	b.n	80079cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	7b5b      	ldrb	r3, [r3, #13]
 8007910:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007916:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00b      	beq.n	8007940 <tcp_process_refused_data+0x58>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6918      	ldr	r0, [r3, #16]
 8007932:	2300      	movs	r3, #0
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	47a0      	blx	r4
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e007      	b.n	8007950 <tcp_process_refused_data+0x68>
 8007940:	2300      	movs	r3, #0
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	2000      	movs	r0, #0
 8007948:	f000 f8a6 	bl	8007a98 <tcp_recv_null>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d12a      	bne.n	80079ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d033      	beq.n	80079ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800796a:	d005      	beq.n	8007978 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007970:	3301      	adds	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <tcp_process_refused_data+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6918      	ldr	r0, [r3, #16]
 800798c:	2300      	movs	r3, #0
 800798e:	2200      	movs	r2, #0
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	47a0      	blx	r4
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
 8007998:	e001      	b.n	800799e <tcp_process_refused_data+0xb6>
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800799e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a2:	f113 0f0d 	cmn.w	r3, #13
 80079a6:	d110      	bne.n	80079ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80079a8:	f06f 030c 	mvn.w	r3, #12
 80079ac:	e00e      	b.n	80079cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80079ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b2:	f113 0f0d 	cmn.w	r3, #13
 80079b6:	d102      	bne.n	80079be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80079b8:	f06f 030c 	mvn.w	r3, #12
 80079bc:	e006      	b.n	80079cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80079c4:	f06f 0304 	mvn.w	r3, #4
 80079c8:	e000      	b.n	80079cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd90      	pop	{r4, r7, pc}
 80079d4:	08011c18 	.word	0x08011c18
 80079d8:	080123a0 	.word	0x080123a0
 80079dc:	08011c5c 	.word	0x08011c5c

080079e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80079e8:	e007      	b.n	80079fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f80a 	bl	8007a0a <tcp_seg_free>
    seg = next;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f4      	bne.n	80079ea <tcp_segs_free+0xa>
  }
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00f      	beq.n	8007a38 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fb11 	bl	800604c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	2003      	movs	r0, #3
 8007a34:	f7fd fc94 	bl	8005360 <memp_free>
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <tcp_seg_copy+0x1c>
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <tcp_seg_copy+0x4c>)
 8007a50:	f240 6282 	movw	r2, #1666	; 0x682
 8007a54:	490e      	ldr	r1, [pc, #56]	; (8007a90 <tcp_seg_copy+0x50>)
 8007a56:	480f      	ldr	r0, [pc, #60]	; (8007a94 <tcp_seg_copy+0x54>)
 8007a58:	f007 ffa4 	bl	800f9a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007a5c:	2003      	movs	r0, #3
 8007a5e:	f7fd fc33 	bl	80052c8 <memp_malloc>
 8007a62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <tcp_seg_copy+0x2e>
    return NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e00a      	b.n	8007a84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007a6e:	2214      	movs	r2, #20
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f007 ff66 	bl	800f944 <memcpy>
  pbuf_ref(cseg->p);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fb85 	bl	800618c <pbuf_ref>
  return cseg;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08011c18 	.word	0x08011c18
 8007a90:	080123e4 	.word	0x080123e4
 8007a94:	08011c5c 	.word	0x08011c5c

08007a98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <tcp_recv_null+0x28>
 8007aac:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <tcp_recv_null+0x60>)
 8007aae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007ab2:	4912      	ldr	r1, [pc, #72]	; (8007afc <tcp_recv_null+0x64>)
 8007ab4:	4812      	ldr	r0, [pc, #72]	; (8007b00 <tcp_recv_null+0x68>)
 8007ab6:	f007 ff75 	bl	800f9a4 <iprintf>
 8007aba:	f06f 030f 	mvn.w	r3, #15
 8007abe:	e016      	b.n	8007aee <tcp_recv_null+0x56>

  if (p != NULL) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	891b      	ldrh	r3, [r3, #8]
 8007aca:	4619      	mov	r1, r3
 8007acc:	68b8      	ldr	r0, [r7, #8]
 8007ace:	f7ff f947 	bl	8006d60 <tcp_recved>
    pbuf_free(p);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fe faba 	bl	800604c <pbuf_free>
 8007ad8:	e008      	b.n	8007aec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007ae2:	68b8      	ldr	r0, [r7, #8]
 8007ae4:	f7fe ffe2 	bl	8006aac <tcp_close>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	e000      	b.n	8007aee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08011c18 	.word	0x08011c18
 8007afc:	08012400 	.word	0x08012400
 8007b00:	08011c5c 	.word	0x08011c5c

08007b04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	db01      	blt.n	8007b1a <tcp_kill_prio+0x16>
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	e000      	b.n	8007b1c <tcp_kill_prio+0x18>
 8007b1a:	237f      	movs	r3, #127	; 0x7f
 8007b1c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d039      	beq.n	8007b98 <tcp_kill_prio+0x94>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b32:	4b1b      	ldr	r3, [pc, #108]	; (8007ba0 <tcp_kill_prio+0x9c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e01f      	b.n	8007b7a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	7d5b      	ldrb	r3, [r3, #21]
 8007b3e:	7afa      	ldrb	r2, [r7, #11]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d80c      	bhi.n	8007b5e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007b48:	7afa      	ldrb	r2, [r7, #11]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d112      	bne.n	8007b74 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b4e:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <tcp_kill_prio+0xa0>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d80a      	bhi.n	8007b74 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007b5e:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <tcp_kill_prio+0xa0>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	7d5b      	ldrb	r3, [r3, #21]
 8007b72:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1dc      	bne.n	8007b3a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <tcp_kill_prio+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	6939      	ldr	r1, [r7, #16]
 8007b8a:	4807      	ldr	r0, [pc, #28]	; (8007ba8 <tcp_kill_prio+0xa4>)
 8007b8c:	f007 ff0a 	bl	800f9a4 <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b90:	6938      	ldr	r0, [r7, #16]
 8007b92:	f7ff f87f 	bl	8006c94 <tcp_abort>
 8007b96:	e000      	b.n	8007b9a <tcp_kill_prio+0x96>
    return;
 8007b98:	bf00      	nop
  }
}
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	200089b4 	.word	0x200089b4
 8007ba4:	200089a8 	.word	0x200089a8
 8007ba8:	0801241c 	.word	0x0801241c

08007bac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d009      	beq.n	8007bd0 <tcp_kill_state+0x24>
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b09      	cmp	r3, #9
 8007bc0:	d006      	beq.n	8007bd0 <tcp_kill_state+0x24>
 8007bc2:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <tcp_kill_state+0x94>)
 8007bc4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007bc8:	491e      	ldr	r1, [pc, #120]	; (8007c44 <tcp_kill_state+0x98>)
 8007bca:	481f      	ldr	r0, [pc, #124]	; (8007c48 <tcp_kill_state+0x9c>)
 8007bcc:	f007 feea 	bl	800f9a4 <iprintf>

  inactivity = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <tcp_kill_state+0xa0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e017      	b.n	8007c10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	7d1b      	ldrb	r3, [r3, #20]
 8007be4:	79fa      	ldrb	r2, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d10f      	bne.n	8007c0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007bea:	4b19      	ldr	r3, [pc, #100]	; (8007c50 <tcp_kill_state+0xa4>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d807      	bhi.n	8007c0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <tcp_kill_state+0xa4>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e4      	bne.n	8007be0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00c      	beq.n	8007c36 <tcp_kill_state+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <tcp_kill_state+0xa8>)
 8007c20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	480b      	ldr	r0, [pc, #44]	; (8007c58 <tcp_kill_state+0xac>)
 8007c2a:	f007 febb 	bl	800f9a4 <iprintf>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6938      	ldr	r0, [r7, #16]
 8007c32:	f7fe ff71 	bl	8006b18 <tcp_abandon>
  }
}
 8007c36:	bf00      	nop
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	08011c18 	.word	0x08011c18
 8007c44:	08012448 	.word	0x08012448
 8007c48:	08011c5c 	.word	0x08011c5c
 8007c4c:	200089b4 	.word	0x200089b4
 8007c50:	200089a8 	.word	0x200089a8
 8007c54:	08014764 	.word	0x08014764
 8007c58:	08012458 	.word	0x08012458

08007c5c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <tcp_kill_timewait+0x60>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e012      	b.n	8007c98 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <tcp_kill_timewait+0x64>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d807      	bhi.n	8007c92 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <tcp_kill_timewait+0x64>)
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e9      	bne.n	8007c72 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <tcp_kill_timewait+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	4806      	ldr	r0, [pc, #24]	; (8007cc4 <tcp_kill_timewait+0x68>)
 8007caa:	f007 fe7b 	bl	800f9a4 <iprintf>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007cae:	68b8      	ldr	r0, [r7, #8]
 8007cb0:	f7fe fff0 	bl	8006c94 <tcp_abort>
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200089b8 	.word	0x200089b8
 8007cc0:	200089a8 	.word	0x200089a8
 8007cc4:	0801248c 	.word	0x0801248c

08007cc8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <tcp_handle_closepend+0x50>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007cd4:	e017      	b.n	8007d06 <tcp_handle_closepend+0x3e>
    struct tcp_pcb *next = pcb->next;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8b5b      	ldrh	r3, [r3, #26]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <tcp_handle_closepend+0x3a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 8007ce8:	480c      	ldr	r0, [pc, #48]	; (8007d1c <tcp_handle_closepend+0x54>)
 8007cea:	f007 fef7 	bl	800fadc <puts>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8b5b      	ldrh	r3, [r3, #26]
 8007cf2:	f023 0308 	bic.w	r3, r3, #8
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe fe6b 	bl	80069d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e4      	bne.n	8007cd6 <tcp_handle_closepend+0xe>
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200089b4 	.word	0x200089b4
 8007d1c:	080124c8 	.word	0x080124c8

08007d20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f7fd facc 	bl	80052c8 <memp_malloc>
 8007d30:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d134      	bne.n	8007da2 <tcp_alloc+0x82>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007d38:	f7ff ffc6 	bl	8007cc8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 8007d3c:	483d      	ldr	r0, [pc, #244]	; (8007e34 <tcp_alloc+0x114>)
 8007d3e:	f007 fecd 	bl	800fadc <puts>
    tcp_kill_timewait();
 8007d42:	f7ff ff8b 	bl	8007c5c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d46:	2001      	movs	r0, #1
 8007d48:	f7fd fabe 	bl	80052c8 <memp_malloc>
 8007d4c:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d126      	bne.n	8007da2 <tcp_alloc+0x82>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 8007d54:	4838      	ldr	r0, [pc, #224]	; (8007e38 <tcp_alloc+0x118>)
 8007d56:	f007 fec1 	bl	800fadc <puts>
      tcp_kill_state(LAST_ACK);
 8007d5a:	2009      	movs	r0, #9
 8007d5c:	f7ff ff26 	bl	8007bac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d60:	2001      	movs	r0, #1
 8007d62:	f7fd fab1 	bl	80052c8 <memp_malloc>
 8007d66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <tcp_alloc+0x82>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 8007d6e:	4833      	ldr	r0, [pc, #204]	; (8007e3c <tcp_alloc+0x11c>)
 8007d70:	f007 feb4 	bl	800fadc <puts>
        tcp_kill_state(CLOSING);
 8007d74:	2008      	movs	r0, #8
 8007d76:	f7ff ff19 	bl	8007bac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f7fd faa4 	bl	80052c8 <memp_malloc>
 8007d80:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <tcp_alloc+0x82>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	482c      	ldr	r0, [pc, #176]	; (8007e40 <tcp_alloc+0x120>)
 8007d8e:	f007 fe09 	bl	800f9a4 <iprintf>
          tcp_kill_prio(prio);
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff feb5 	bl	8007b04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7fd fa94 	bl	80052c8 <memp_malloc>
 8007da0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03f      	beq.n	8007e28 <tcp_alloc+0x108>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007da8:	229c      	movs	r2, #156	; 0x9c
 8007daa:	2100      	movs	r1, #0
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f007 fdf1 	bl	800f994 <memset>
    pcb->prio = prio;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	79fa      	ldrb	r2, [r7, #7]
 8007db6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007dbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007dde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2206      	movs	r2, #6
 8007de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2206      	movs	r2, #6
 8007dec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <tcp_alloc+0x124>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <tcp_alloc+0x128>)
 8007e08:	781a      	ldrb	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <tcp_alloc+0x12c>)
 8007e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a0b      	ldr	r2, [pc, #44]	; (8007e50 <tcp_alloc+0x130>)
 8007e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007e28:	68fb      	ldr	r3, [r7, #12]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	080124ec 	.word	0x080124ec
 8007e38:	08012520 	.word	0x08012520
 8007e3c:	08012554 	.word	0x08012554
 8007e40:	08012588 	.word	0x08012588
 8007e44:	200089a8 	.word	0x200089a8
 8007e48:	200089be 	.word	0x200089be
 8007e4c:	08007a99 	.word	0x08007a99
 8007e50:	006ddd00 	.word	0x006ddd00

08007e54 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007e58:	2040      	movs	r0, #64	; 0x40
 8007e5a:	f7ff ff61 	bl	8007d20 <tcp_alloc>
 8007e5e:	4603      	mov	r3, r0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	611a      	str	r2, [r3, #16]
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7d1b      	ldrb	r3, [r3, #20]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d106      	bne.n	8007eae <tcp_recv+0x26>
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <tcp_recv+0x38>)
 8007ea2:	f240 72df 	movw	r2, #2015	; 0x7df
 8007ea6:	4907      	ldr	r1, [pc, #28]	; (8007ec4 <tcp_recv+0x3c>)
 8007ea8:	4807      	ldr	r0, [pc, #28]	; (8007ec8 <tcp_recv+0x40>)
 8007eaa:	f007 fd7b 	bl	800f9a4 <iprintf>
    pcb->recv = recv;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	08011c18 	.word	0x08011c18
 8007ec4:	080125c8 	.word	0x080125c8
 8007ec8:	08011c5c 	.word	0x08011c5c

08007ecc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	7d1b      	ldrb	r3, [r3, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d106      	bne.n	8007ef2 <tcp_sent+0x26>
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <tcp_sent+0x38>)
 8007ee6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007eea:	4907      	ldr	r1, [pc, #28]	; (8007f08 <tcp_sent+0x3c>)
 8007eec:	4807      	ldr	r0, [pc, #28]	; (8007f0c <tcp_sent+0x40>)
 8007eee:	f007 fd59 	bl	800f9a4 <iprintf>
    pcb->sent = sent;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	08011c18 	.word	0x08011c18
 8007f08:	080125f0 	.word	0x080125f0
 8007f0c:	08011c5c 	.word	0x08011c5c

08007f10 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00e      	beq.n	8007f3e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7d1b      	ldrb	r3, [r3, #20]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d106      	bne.n	8007f36 <tcp_err+0x26>
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <tcp_err+0x38>)
 8007f2a:	f640 020d 	movw	r2, #2061	; 0x80d
 8007f2e:	4907      	ldr	r1, [pc, #28]	; (8007f4c <tcp_err+0x3c>)
 8007f30:	4807      	ldr	r0, [pc, #28]	; (8007f50 <tcp_err+0x40>)
 8007f32:	f007 fd37 	bl	800f9a4 <iprintf>
    pcb->errf = err;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	08011c18 	.word	0x08011c18
 8007f4c:	08012618 	.word	0x08012618
 8007f50:	08011c5c 	.word	0x08011c5c

08007f54 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d107      	bne.n	8007f78 <tcp_poll+0x24>
 8007f68:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <tcp_poll+0x50>)
 8007f6a:	f640 023d 	movw	r2, #2109	; 0x83d
 8007f6e:	490e      	ldr	r1, [pc, #56]	; (8007fa8 <tcp_poll+0x54>)
 8007f70:	480e      	ldr	r0, [pc, #56]	; (8007fac <tcp_poll+0x58>)
 8007f72:	f007 fd17 	bl	800f9a4 <iprintf>
 8007f76:	e011      	b.n	8007f9c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	7d1b      	ldrb	r3, [r3, #20]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <tcp_poll+0x3a>
 8007f80:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <tcp_poll+0x50>)
 8007f82:	f640 023e 	movw	r2, #2110	; 0x83e
 8007f86:	490a      	ldr	r1, [pc, #40]	; (8007fb0 <tcp_poll+0x5c>)
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <tcp_poll+0x58>)
 8007f8a:	f007 fd0b 	bl	800f9a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	79fa      	ldrb	r2, [r7, #7]
 8007f9a:	775a      	strb	r2, [r3, #29]
}
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	08011c18 	.word	0x08011c18
 8007fa8:	08012640 	.word	0x08012640
 8007fac:	08011c5c 	.word	0x08011c5c
 8007fb0:	08012658 	.word	0x08012658

08007fb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d107      	bne.n	8007fd2 <tcp_pcb_purge+0x1e>
 8007fc2:	4b2d      	ldr	r3, [pc, #180]	; (8008078 <tcp_pcb_purge+0xc4>)
 8007fc4:	f640 0251 	movw	r2, #2129	; 0x851
 8007fc8:	492c      	ldr	r1, [pc, #176]	; (800807c <tcp_pcb_purge+0xc8>)
 8007fca:	482d      	ldr	r0, [pc, #180]	; (8008080 <tcp_pcb_purge+0xcc>)
 8007fcc:	f007 fcea 	bl	800f9a4 <iprintf>
 8007fd0:	e04e      	b.n	8008070 <tcp_pcb_purge+0xbc>

  if (pcb->state != CLOSED &&
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d04a      	beq.n	8008070 <tcp_pcb_purge+0xbc>
      pcb->state != TIME_WAIT &&
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007fde:	2b0a      	cmp	r3, #10
 8007fe0:	d046      	beq.n	8008070 <tcp_pcb_purge+0xbc>
      pcb->state != LISTEN) {
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d042      	beq.n	8008070 <tcp_pcb_purge+0xbc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 8007fea:	4826      	ldr	r0, [pc, #152]	; (8008084 <tcp_pcb_purge+0xd0>)
 8007fec:	f007 fd76 	bl	800fadc <puts>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <tcp_pcb_purge+0x5a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 8007ff8:	4823      	ldr	r0, [pc, #140]	; (8008088 <tcp_pcb_purge+0xd4>)
 8007ffa:	f007 fd6f 	bl	800fadc <puts>
      pbuf_free(pcb->refused_data);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe f822 	bl	800604c <pbuf_free>
      pcb->refused_data = NULL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unsent != NULL) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <tcp_pcb_purge+0x68>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 8008016:	481d      	ldr	r0, [pc, #116]	; (800808c <tcp_pcb_purge+0xd8>)
 8008018:	f007 fd60 	bl	800fadc <puts>
    }
    if (pcb->unacked != NULL) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <tcp_pcb_purge+0x76>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 8008024:	481a      	ldr	r0, [pc, #104]	; (8008090 <tcp_pcb_purge+0xdc>)
 8008026:	f007 fd59 	bl	800fadc <puts>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <tcp_pcb_purge+0x8a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 8008032:	4818      	ldr	r0, [pc, #96]	; (8008094 <tcp_pcb_purge+0xe0>)
 8008034:	f007 fd52 	bl	800fadc <puts>
      tcp_free_ooseq(pcb);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f99f 	bl	800837c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008044:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fcc8 	bl	80079e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fcc3 	bl	80079e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	08011c18 	.word	0x08011c18
 800807c:	08012678 	.word	0x08012678
 8008080:	08011c5c 	.word	0x08011c5c
 8008084:	08012694 	.word	0x08012694
 8008088:	080126a4 	.word	0x080126a4
 800808c:	080126d0 	.word	0x080126d0
 8008090:	080126f4 	.word	0x080126f4
 8008094:	0801271c 	.word	0x0801271c

08008098 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <tcp_pcb_remove+0x1e>
 80080a8:	4b44      	ldr	r3, [pc, #272]	; (80081bc <tcp_pcb_remove+0x124>)
 80080aa:	f640 0283 	movw	r2, #2179	; 0x883
 80080ae:	4944      	ldr	r1, [pc, #272]	; (80081c0 <tcp_pcb_remove+0x128>)
 80080b0:	4844      	ldr	r0, [pc, #272]	; (80081c4 <tcp_pcb_remove+0x12c>)
 80080b2:	f007 fc77 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <tcp_pcb_remove+0x32>
 80080bc:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <tcp_pcb_remove+0x124>)
 80080be:	f640 0284 	movw	r2, #2180	; 0x884
 80080c2:	4941      	ldr	r1, [pc, #260]	; (80081c8 <tcp_pcb_remove+0x130>)
 80080c4:	483f      	ldr	r0, [pc, #252]	; (80081c4 <tcp_pcb_remove+0x12c>)
 80080c6:	f007 fc6d 	bl	800f9a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d105      	bne.n	80080e0 <tcp_pcb_remove+0x48>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e013      	b.n	8008108 <tcp_pcb_remove+0x70>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e00c      	b.n	8008102 <tcp_pcb_remove+0x6a>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d104      	bne.n	80080fc <tcp_pcb_remove+0x64>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	60da      	str	r2, [r3, #12]
 80080fa:	e005      	b.n	8008108 <tcp_pcb_remove+0x70>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ef      	bne.n	80080e8 <tcp_pcb_remove+0x50>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	f7ff ff50 	bl	8007fb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	7d1b      	ldrb	r3, [r3, #20]
 8008118:	2b0a      	cmp	r3, #10
 800811a:	d013      	beq.n	8008144 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008120:	2b01      	cmp	r3, #1
 8008122:	d00f      	beq.n	8008144 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	8b5b      	ldrh	r3, [r3, #26]
 8008128:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	8b5b      	ldrh	r3, [r3, #26]
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	b29a      	uxth	r2, r3
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f003 fd38 	bl	800bbb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	7d1b      	ldrb	r3, [r3, #20]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d020      	beq.n	800818e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d006      	beq.n	8008162 <tcp_pcb_remove+0xca>
 8008154:	4b19      	ldr	r3, [pc, #100]	; (80081bc <tcp_pcb_remove+0x124>)
 8008156:	f640 0293 	movw	r2, #2195	; 0x893
 800815a:	491c      	ldr	r1, [pc, #112]	; (80081cc <tcp_pcb_remove+0x134>)
 800815c:	4819      	ldr	r0, [pc, #100]	; (80081c4 <tcp_pcb_remove+0x12c>)
 800815e:	f007 fc21 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <tcp_pcb_remove+0xe0>
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <tcp_pcb_remove+0x124>)
 800816c:	f640 0294 	movw	r2, #2196	; 0x894
 8008170:	4917      	ldr	r1, [pc, #92]	; (80081d0 <tcp_pcb_remove+0x138>)
 8008172:	4814      	ldr	r0, [pc, #80]	; (80081c4 <tcp_pcb_remove+0x12c>)
 8008174:	f007 fc16 	bl	800f9a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <tcp_pcb_remove+0xf6>
 8008180:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <tcp_pcb_remove+0x124>)
 8008182:	f640 0296 	movw	r2, #2198	; 0x896
 8008186:	4913      	ldr	r1, [pc, #76]	; (80081d4 <tcp_pcb_remove+0x13c>)
 8008188:	480e      	ldr	r0, [pc, #56]	; (80081c4 <tcp_pcb_remove+0x12c>)
 800818a:	f007 fc0b 	bl	800f9a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2200      	movs	r2, #0
 8008198:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800819a:	f000 f919 	bl	80083d0 <tcp_pcbs_sane>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <tcp_pcb_remove+0x11a>
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <tcp_pcb_remove+0x124>)
 80081a6:	f640 029e 	movw	r2, #2206	; 0x89e
 80081aa:	490b      	ldr	r1, [pc, #44]	; (80081d8 <tcp_pcb_remove+0x140>)
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <tcp_pcb_remove+0x12c>)
 80081ae:	f007 fbf9 	bl	800f9a4 <iprintf>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	08011c18 	.word	0x08011c18
 80081c0:	08012740 	.word	0x08012740
 80081c4:	08011c5c 	.word	0x08011c5c
 80081c8:	0801275c 	.word	0x0801275c
 80081cc:	0801277c 	.word	0x0801277c
 80081d0:	08012794 	.word	0x08012794
 80081d4:	080127b0 	.word	0x080127b0
 80081d8:	080127c8 	.word	0x080127c8

080081dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <tcp_next_iss+0x1c>
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <tcp_next_iss+0x38>)
 80081ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80081f0:	4909      	ldr	r1, [pc, #36]	; (8008218 <tcp_next_iss+0x3c>)
 80081f2:	480a      	ldr	r0, [pc, #40]	; (800821c <tcp_next_iss+0x40>)
 80081f4:	f007 fbd6 	bl	800f9a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <tcp_next_iss+0x44>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <tcp_next_iss+0x48>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4413      	add	r3, r2
 8008202:	4a07      	ldr	r2, [pc, #28]	; (8008220 <tcp_next_iss+0x44>)
 8008204:	6013      	str	r3, [r2, #0]
  return iss;
 8008206:	4b06      	ldr	r3, [pc, #24]	; (8008220 <tcp_next_iss+0x44>)
 8008208:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08011c18 	.word	0x08011c18
 8008218:	080127e8 	.word	0x080127e8
 800821c:	08011c5c 	.word	0x08011c5c
 8008220:	2000000c 	.word	0x2000000c
 8008224:	200089a8 	.word	0x200089a8

08008228 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <tcp_eff_send_mss_netif+0x22>
 800823c:	4b14      	ldr	r3, [pc, #80]	; (8008290 <tcp_eff_send_mss_netif+0x68>)
 800823e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008242:	4914      	ldr	r1, [pc, #80]	; (8008294 <tcp_eff_send_mss_netif+0x6c>)
 8008244:	4814      	ldr	r0, [pc, #80]	; (8008298 <tcp_eff_send_mss_netif+0x70>)
 8008246:	f007 fbad 	bl	800f9a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008250:	89fb      	ldrh	r3, [r7, #14]
 8008252:	e019      	b.n	8008288 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008258:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800825a:	8afb      	ldrh	r3, [r7, #22]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d012      	beq.n	8008286 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008260:	2328      	movs	r3, #40	; 0x28
 8008262:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008264:	8afa      	ldrh	r2, [r7, #22]
 8008266:	8abb      	ldrh	r3, [r7, #20]
 8008268:	429a      	cmp	r2, r3
 800826a:	d904      	bls.n	8008276 <tcp_eff_send_mss_netif+0x4e>
 800826c:	8afa      	ldrh	r2, [r7, #22]
 800826e:	8abb      	ldrh	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	b29b      	uxth	r3, r3
 8008274:	e000      	b.n	8008278 <tcp_eff_send_mss_netif+0x50>
 8008276:	2300      	movs	r3, #0
 8008278:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800827a:	8a7a      	ldrh	r2, [r7, #18]
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	4293      	cmp	r3, r2
 8008280:	bf28      	it	cs
 8008282:	4613      	movcs	r3, r2
 8008284:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008286:	89fb      	ldrh	r3, [r7, #14]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08011c18 	.word	0x08011c18
 8008294:	08012804 	.word	0x08012804
 8008298:	08011c5c 	.word	0x08011c5c

0800829c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d119      	bne.n	80082e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80082b0:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80082b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80082b6:	4910      	ldr	r1, [pc, #64]	; (80082f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80082b8:	4810      	ldr	r0, [pc, #64]	; (80082fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80082ba:	f007 fb73 	bl	800f9a4 <iprintf>

  while (pcb != NULL) {
 80082be:	e011      	b.n	80082e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d108      	bne.n	80082de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7fe fcde 	bl	8006c94 <tcp_abort>
      pcb = next;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e002      	b.n	80082e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1ea      	bne.n	80082c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	08011c18 	.word	0x08011c18
 80082f8:	0801282c 	.word	0x0801282c
 80082fc:	08011c5c 	.word	0x08011c5c

08008300 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02a      	beq.n	8008366 <tcp_netif_ip_addr_changed+0x66>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d026      	beq.n	8008366 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <tcp_netif_ip_addr_changed+0x70>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff ffbc 	bl	800829c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <tcp_netif_ip_addr_changed+0x74>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff ffb6 	bl	800829c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d017      	beq.n	8008366 <tcp_netif_ip_addr_changed+0x66>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <tcp_netif_ip_addr_changed+0x78>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e00c      	b.n	8008360 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d103      	bne.n	800835a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1ef      	bne.n	8008346 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200089b4 	.word	0x200089b4
 8008374:	200089ac 	.word	0x200089ac
 8008378:	200089b0 	.word	0x200089b0

0800837c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff fb25 	bl	80079e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	4a05      	ldr	r2, [pc, #20]	; (80083c8 <tcp_debug_print_state+0x24>)
 80083b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b6:	4619      	mov	r1, r3
 80083b8:	4804      	ldr	r0, [pc, #16]	; (80083cc <tcp_debug_print_state+0x28>)
 80083ba:	f007 faf3 	bl	800f9a4 <iprintf>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	08014764 	.word	0x08014764
 80083cc:	08012994 	.word	0x08012994

080083d0 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80083d6:	4b22      	ldr	r3, [pc, #136]	; (8008460 <tcp_pcbs_sane+0x90>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	e023      	b.n	8008426 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <tcp_pcbs_sane+0x24>
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <tcp_pcbs_sane+0x94>)
 80083e8:	f640 12d9 	movw	r2, #2521	; 0x9d9
 80083ec:	491e      	ldr	r1, [pc, #120]	; (8008468 <tcp_pcbs_sane+0x98>)
 80083ee:	481f      	ldr	r0, [pc, #124]	; (800846c <tcp_pcbs_sane+0x9c>)
 80083f0:	f007 fad8 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7d1b      	ldrb	r3, [r3, #20]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d106      	bne.n	800840a <tcp_pcbs_sane+0x3a>
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <tcp_pcbs_sane+0x94>)
 80083fe:	f640 12da 	movw	r2, #2522	; 0x9da
 8008402:	491b      	ldr	r1, [pc, #108]	; (8008470 <tcp_pcbs_sane+0xa0>)
 8008404:	4819      	ldr	r0, [pc, #100]	; (800846c <tcp_pcbs_sane+0x9c>)
 8008406:	f007 facd 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7d1b      	ldrb	r3, [r3, #20]
 800840e:	2b0a      	cmp	r3, #10
 8008410:	d106      	bne.n	8008420 <tcp_pcbs_sane+0x50>
 8008412:	4b14      	ldr	r3, [pc, #80]	; (8008464 <tcp_pcbs_sane+0x94>)
 8008414:	f640 12db 	movw	r2, #2523	; 0x9db
 8008418:	4916      	ldr	r1, [pc, #88]	; (8008474 <tcp_pcbs_sane+0xa4>)
 800841a:	4814      	ldr	r0, [pc, #80]	; (800846c <tcp_pcbs_sane+0x9c>)
 800841c:	f007 fac2 	bl	800f9a4 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	607b      	str	r3, [r7, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1d8      	bne.n	80083de <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800842c:	4b12      	ldr	r3, [pc, #72]	; (8008478 <tcp_pcbs_sane+0xa8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	e00d      	b.n	8008450 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	7d1b      	ldrb	r3, [r3, #20]
 8008438:	2b0a      	cmp	r3, #10
 800843a:	d006      	beq.n	800844a <tcp_pcbs_sane+0x7a>
 800843c:	4b09      	ldr	r3, [pc, #36]	; (8008464 <tcp_pcbs_sane+0x94>)
 800843e:	f640 12de 	movw	r2, #2526	; 0x9de
 8008442:	490e      	ldr	r1, [pc, #56]	; (800847c <tcp_pcbs_sane+0xac>)
 8008444:	4809      	ldr	r0, [pc, #36]	; (800846c <tcp_pcbs_sane+0x9c>)
 8008446:	f007 faad 	bl	800f9a4 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1ee      	bne.n	8008434 <tcp_pcbs_sane+0x64>
  }
  return 1;
 8008456:	2301      	movs	r3, #1
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200089b4 	.word	0x200089b4
 8008464:	08011c18 	.word	0x08011c18
 8008468:	08012a6c 	.word	0x08012a6c
 800846c:	08011c5c 	.word	0x08011c5c
 8008470:	08012a98 	.word	0x08012a98
 8008474:	08012ac4 	.word	0x08012ac4
 8008478:	200089b8 	.word	0x200089b8
 800847c:	08012af4 	.word	0x08012af4

08008480 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b08d      	sub	sp, #52	; 0x34
 8008484:	af04      	add	r7, sp, #16
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d105      	bne.n	800849c <tcp_input+0x1c>
 8008490:	4b9b      	ldr	r3, [pc, #620]	; (8008700 <tcp_input+0x280>)
 8008492:	2283      	movs	r2, #131	; 0x83
 8008494:	499b      	ldr	r1, [pc, #620]	; (8008704 <tcp_input+0x284>)
 8008496:	489c      	ldr	r0, [pc, #624]	; (8008708 <tcp_input+0x288>)
 8008498:	f007 fa84 	bl	800f9a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4a9a      	ldr	r2, [pc, #616]	; (800870c <tcp_input+0x28c>)
 80084a2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	895b      	ldrh	r3, [r3, #10]
 80084a8:	2b13      	cmp	r3, #19
 80084aa:	f240 83dd 	bls.w	8008c68 <tcp_input+0x7e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084ae:	4b98      	ldr	r3, [pc, #608]	; (8008710 <tcp_input+0x290>)
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	4a97      	ldr	r2, [pc, #604]	; (8008710 <tcp_input+0x290>)
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f006 fa29 	bl	800e910 <ip4_addr_isbroadcast_u32>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f040 83d3 	bne.w	8008c6c <tcp_input+0x7ec>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084c6:	4b92      	ldr	r3, [pc, #584]	; (8008710 <tcp_input+0x290>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084ce:	2be0      	cmp	r3, #224	; 0xe0
 80084d0:	f000 83cc 	beq.w	8008c6c <tcp_input+0x7ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80084d4:	4b8d      	ldr	r3, [pc, #564]	; (800870c <tcp_input+0x28c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	899b      	ldrh	r3, [r3, #12]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fc fa9d 	bl	8004a1c <lwip_htons>
 80084e2:	4603      	mov	r3, r0
 80084e4:	0b1b      	lsrs	r3, r3, #12
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80084ee:	7cbb      	ldrb	r3, [r7, #18]
 80084f0:	2b13      	cmp	r3, #19
 80084f2:	f240 83bd 	bls.w	8008c70 <tcp_input+0x7f0>
 80084f6:	7cbb      	ldrb	r3, [r7, #18]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	891b      	ldrh	r3, [r3, #8]
 80084fe:	429a      	cmp	r2, r3
 8008500:	f200 83b6 	bhi.w	8008c70 <tcp_input+0x7f0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008504:	7cbb      	ldrb	r3, [r7, #18]
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b14      	subs	r3, #20
 800850a:	b29a      	uxth	r2, r3
 800850c:	4b81      	ldr	r3, [pc, #516]	; (8008714 <tcp_input+0x294>)
 800850e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008510:	4b81      	ldr	r3, [pc, #516]	; (8008718 <tcp_input+0x298>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	895a      	ldrh	r2, [r3, #10]
 800851a:	7cbb      	ldrb	r3, [r7, #18]
 800851c:	b29b      	uxth	r3, r3
 800851e:	429a      	cmp	r2, r3
 8008520:	d309      	bcc.n	8008536 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008522:	4b7c      	ldr	r3, [pc, #496]	; (8008714 <tcp_input+0x294>)
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	4b7d      	ldr	r3, [pc, #500]	; (800871c <tcp_input+0x29c>)
 8008528:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800852a:	7cbb      	ldrb	r3, [r7, #18]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fd fd06 	bl	8005f40 <pbuf_remove_header>
 8008534:	e04e      	b.n	80085d4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <tcp_input+0xca>
 800853e:	4b70      	ldr	r3, [pc, #448]	; (8008700 <tcp_input+0x280>)
 8008540:	22c2      	movs	r2, #194	; 0xc2
 8008542:	4977      	ldr	r1, [pc, #476]	; (8008720 <tcp_input+0x2a0>)
 8008544:	4870      	ldr	r0, [pc, #448]	; (8008708 <tcp_input+0x288>)
 8008546:	f007 fa2d 	bl	800f9a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800854a:	2114      	movs	r1, #20
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fd fcf7 	bl	8005f40 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	895a      	ldrh	r2, [r3, #10]
 8008556:	4b71      	ldr	r3, [pc, #452]	; (800871c <tcp_input+0x29c>)
 8008558:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800855a:	4b6e      	ldr	r3, [pc, #440]	; (8008714 <tcp_input+0x294>)
 800855c:	881a      	ldrh	r2, [r3, #0]
 800855e:	4b6f      	ldr	r3, [pc, #444]	; (800871c <tcp_input+0x29c>)
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008566:	4b6d      	ldr	r3, [pc, #436]	; (800871c <tcp_input+0x29c>)
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fd fce7 	bl	8005f40 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	895b      	ldrh	r3, [r3, #10]
 8008578:	8a3a      	ldrh	r2, [r7, #16]
 800857a:	429a      	cmp	r2, r3
 800857c:	f200 837a 	bhi.w	8008c74 <tcp_input+0x7f4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a64      	ldr	r2, [pc, #400]	; (8008718 <tcp_input+0x298>)
 8008588:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	8a3a      	ldrh	r2, [r7, #16]
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f7fd fcd4 	bl	8005f40 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	891a      	ldrh	r2, [r3, #8]
 800859c:	8a3b      	ldrh	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	895b      	ldrh	r3, [r3, #10]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <tcp_input+0x13a>
 80085ae:	4b54      	ldr	r3, [pc, #336]	; (8008700 <tcp_input+0x280>)
 80085b0:	22df      	movs	r2, #223	; 0xdf
 80085b2:	495c      	ldr	r1, [pc, #368]	; (8008724 <tcp_input+0x2a4>)
 80085b4:	4854      	ldr	r0, [pc, #336]	; (8008708 <tcp_input+0x288>)
 80085b6:	f007 f9f5 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	891a      	ldrh	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	891b      	ldrh	r3, [r3, #8]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d005      	beq.n	80085d4 <tcp_input+0x154>
 80085c8:	4b4d      	ldr	r3, [pc, #308]	; (8008700 <tcp_input+0x280>)
 80085ca:	22e0      	movs	r2, #224	; 0xe0
 80085cc:	4956      	ldr	r1, [pc, #344]	; (8008728 <tcp_input+0x2a8>)
 80085ce:	484e      	ldr	r0, [pc, #312]	; (8008708 <tcp_input+0x288>)
 80085d0:	f007 f9e8 	bl	800f9a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085d4:	4b4d      	ldr	r3, [pc, #308]	; (800870c <tcp_input+0x28c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4a4b      	ldr	r2, [pc, #300]	; (800870c <tcp_input+0x28c>)
 80085de:	6814      	ldr	r4, [r2, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fc fa1b 	bl	8004a1c <lwip_htons>
 80085e6:	4603      	mov	r3, r0
 80085e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80085ea:	4b48      	ldr	r3, [pc, #288]	; (800870c <tcp_input+0x28c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	885b      	ldrh	r3, [r3, #2]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4a46      	ldr	r2, [pc, #280]	; (800870c <tcp_input+0x28c>)
 80085f4:	6814      	ldr	r4, [r2, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fc fa10 	bl	8004a1c <lwip_htons>
 80085fc:	4603      	mov	r3, r0
 80085fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008600:	4b42      	ldr	r3, [pc, #264]	; (800870c <tcp_input+0x28c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4a41      	ldr	r2, [pc, #260]	; (800870c <tcp_input+0x28c>)
 8008608:	6814      	ldr	r4, [r2, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f7fc fa1b 	bl	8004a46 <lwip_htonl>
 8008610:	4603      	mov	r3, r0
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	4a45      	ldr	r2, [pc, #276]	; (800872c <tcp_input+0x2ac>)
 8008618:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800861a:	4b3c      	ldr	r3, [pc, #240]	; (800870c <tcp_input+0x28c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4a3a      	ldr	r2, [pc, #232]	; (800870c <tcp_input+0x28c>)
 8008622:	6814      	ldr	r4, [r2, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f7fc fa0e 	bl	8004a46 <lwip_htonl>
 800862a:	4603      	mov	r3, r0
 800862c:	60a3      	str	r3, [r4, #8]
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	4a3f      	ldr	r2, [pc, #252]	; (8008730 <tcp_input+0x2b0>)
 8008632:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008634:	4b35      	ldr	r3, [pc, #212]	; (800870c <tcp_input+0x28c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	89db      	ldrh	r3, [r3, #14]
 800863a:	b29b      	uxth	r3, r3
 800863c:	4a33      	ldr	r2, [pc, #204]	; (800870c <tcp_input+0x28c>)
 800863e:	6814      	ldr	r4, [r2, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7fc f9eb 	bl	8004a1c <lwip_htons>
 8008646:	4603      	mov	r3, r0
 8008648:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800864a:	4b30      	ldr	r3, [pc, #192]	; (800870c <tcp_input+0x28c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	899b      	ldrh	r3, [r3, #12]
 8008650:	b29b      	uxth	r3, r3
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc f9e2 	bl	8004a1c <lwip_htons>
 8008658:	4603      	mov	r3, r0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4b34      	ldr	r3, [pc, #208]	; (8008734 <tcp_input+0x2b4>)
 8008664:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	891a      	ldrh	r2, [r3, #8]
 800866a:	4b33      	ldr	r3, [pc, #204]	; (8008738 <tcp_input+0x2b8>)
 800866c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800866e:	4b31      	ldr	r3, [pc, #196]	; (8008734 <tcp_input+0x2b4>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00c      	beq.n	8008694 <tcp_input+0x214>
    tcplen++;
 800867a:	4b2f      	ldr	r3, [pc, #188]	; (8008738 <tcp_input+0x2b8>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <tcp_input+0x2b8>)
 8008684:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	891a      	ldrh	r2, [r3, #8]
 800868a:	4b2b      	ldr	r3, [pc, #172]	; (8008738 <tcp_input+0x2b8>)
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	f200 82f2 	bhi.w	8008c78 <tcp_input+0x7f8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008698:	4b28      	ldr	r3, [pc, #160]	; (800873c <tcp_input+0x2bc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	61bb      	str	r3, [r7, #24]
 800869e:	e09d      	b.n	80087dc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	7d1b      	ldrb	r3, [r3, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d105      	bne.n	80086b4 <tcp_input+0x234>
 80086a8:	4b15      	ldr	r3, [pc, #84]	; (8008700 <tcp_input+0x280>)
 80086aa:	22fb      	movs	r2, #251	; 0xfb
 80086ac:	4924      	ldr	r1, [pc, #144]	; (8008740 <tcp_input+0x2c0>)
 80086ae:	4816      	ldr	r0, [pc, #88]	; (8008708 <tcp_input+0x288>)
 80086b0:	f007 f978 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	7d1b      	ldrb	r3, [r3, #20]
 80086b8:	2b0a      	cmp	r3, #10
 80086ba:	d105      	bne.n	80086c8 <tcp_input+0x248>
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <tcp_input+0x280>)
 80086be:	22fc      	movs	r2, #252	; 0xfc
 80086c0:	4920      	ldr	r1, [pc, #128]	; (8008744 <tcp_input+0x2c4>)
 80086c2:	4811      	ldr	r0, [pc, #68]	; (8008708 <tcp_input+0x288>)
 80086c4:	f007 f96e 	bl	800f9a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	7d1b      	ldrb	r3, [r3, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d105      	bne.n	80086dc <tcp_input+0x25c>
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <tcp_input+0x280>)
 80086d2:	22fd      	movs	r2, #253	; 0xfd
 80086d4:	491c      	ldr	r1, [pc, #112]	; (8008748 <tcp_input+0x2c8>)
 80086d6:	480c      	ldr	r0, [pc, #48]	; (8008708 <tcp_input+0x288>)
 80086d8:	f007 f964 	bl	800f9a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	7a1b      	ldrb	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d033      	beq.n	800874c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	7a1a      	ldrb	r2, [r3, #8]
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <tcp_input+0x290>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f0:	3301      	adds	r3, #1
 80086f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d029      	beq.n	800874c <tcp_input+0x2cc>
      prev = pcb;
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	61fb      	str	r3, [r7, #28]
      continue;
 80086fc:	e06b      	b.n	80087d6 <tcp_input+0x356>
 80086fe:	bf00      	nop
 8008700:	08012b20 	.word	0x08012b20
 8008704:	08012b54 	.word	0x08012b54
 8008708:	08012b6c 	.word	0x08012b6c
 800870c:	200089d4 	.word	0x200089d4
 8008710:	20003238 	.word	0x20003238
 8008714:	200089d8 	.word	0x200089d8
 8008718:	200089dc 	.word	0x200089dc
 800871c:	200089da 	.word	0x200089da
 8008720:	08012b94 	.word	0x08012b94
 8008724:	08012ba4 	.word	0x08012ba4
 8008728:	08012bb0 	.word	0x08012bb0
 800872c:	200089e4 	.word	0x200089e4
 8008730:	200089e8 	.word	0x200089e8
 8008734:	200089f0 	.word	0x200089f0
 8008738:	200089ee 	.word	0x200089ee
 800873c:	200089b4 	.word	0x200089b4
 8008740:	08012bd0 	.word	0x08012bd0
 8008744:	08012bf8 	.word	0x08012bf8
 8008748:	08012c24 	.word	0x08012c24
    }

    if (pcb->remote_port == tcphdr->src &&
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	8b1a      	ldrh	r2, [r3, #24]
 8008750:	4b72      	ldr	r3, [pc, #456]	; (800891c <tcp_input+0x49c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	429a      	cmp	r2, r3
 800875a:	d13a      	bne.n	80087d2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	8ada      	ldrh	r2, [r3, #22]
 8008760:	4b6e      	ldr	r3, [pc, #440]	; (800891c <tcp_input+0x49c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008768:	429a      	cmp	r2, r3
 800876a:	d132      	bne.n	80087d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4b6b      	ldr	r3, [pc, #428]	; (8008920 <tcp_input+0x4a0>)
 8008772:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008774:	429a      	cmp	r2, r3
 8008776:	d12c      	bne.n	80087d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b68      	ldr	r3, [pc, #416]	; (8008920 <tcp_input+0x4a0>)
 800877e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008780:	429a      	cmp	r2, r3
 8008782:	d126      	bne.n	80087d2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	429a      	cmp	r2, r3
 800878c:	d106      	bne.n	800879c <tcp_input+0x31c>
 800878e:	4b65      	ldr	r3, [pc, #404]	; (8008924 <tcp_input+0x4a4>)
 8008790:	f240 120d 	movw	r2, #269	; 0x10d
 8008794:	4964      	ldr	r1, [pc, #400]	; (8008928 <tcp_input+0x4a8>)
 8008796:	4865      	ldr	r0, [pc, #404]	; (800892c <tcp_input+0x4ac>)
 8008798:	f007 f904 	bl	800f9a4 <iprintf>
      if (prev != NULL) {
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <tcp_input+0x338>
        prev->next = pcb->next;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80087aa:	4b61      	ldr	r3, [pc, #388]	; (8008930 <tcp_input+0x4b0>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80087b2:	4a5f      	ldr	r2, [pc, #380]	; (8008930 <tcp_input+0x4b0>)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d111      	bne.n	80087e6 <tcp_input+0x366>
 80087c2:	4b58      	ldr	r3, [pc, #352]	; (8008924 <tcp_input+0x4a4>)
 80087c4:	f240 1215 	movw	r2, #277	; 0x115
 80087c8:	495a      	ldr	r1, [pc, #360]	; (8008934 <tcp_input+0x4b4>)
 80087ca:	4858      	ldr	r0, [pc, #352]	; (800892c <tcp_input+0x4ac>)
 80087cc:	f007 f8ea 	bl	800f9a4 <iprintf>
      break;
 80087d0:	e009      	b.n	80087e6 <tcp_input+0x366>
    }
    prev = pcb;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f47f af5e 	bne.w	80086a0 <tcp_input+0x220>
 80087e4:	e000      	b.n	80087e8 <tcp_input+0x368>
      break;
 80087e6:	bf00      	nop
  }

  if (pcb == NULL) {
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f040 80aa 	bne.w	8008944 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087f0:	4b51      	ldr	r3, [pc, #324]	; (8008938 <tcp_input+0x4b8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	e03f      	b.n	8008878 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	7d1b      	ldrb	r3, [r3, #20]
 80087fc:	2b0a      	cmp	r3, #10
 80087fe:	d006      	beq.n	800880e <tcp_input+0x38e>
 8008800:	4b48      	ldr	r3, [pc, #288]	; (8008924 <tcp_input+0x4a4>)
 8008802:	f240 121f 	movw	r2, #287	; 0x11f
 8008806:	494d      	ldr	r1, [pc, #308]	; (800893c <tcp_input+0x4bc>)
 8008808:	4848      	ldr	r0, [pc, #288]	; (800892c <tcp_input+0x4ac>)
 800880a:	f007 f8cb 	bl	800f9a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	7a1b      	ldrb	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	7a1a      	ldrb	r2, [r3, #8]
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <tcp_input+0x4a0>)
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008822:	3301      	adds	r3, #1
 8008824:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008826:	429a      	cmp	r2, r3
 8008828:	d122      	bne.n	8008870 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	8b1a      	ldrh	r2, [r3, #24]
 800882e:	4b3b      	ldr	r3, [pc, #236]	; (800891c <tcp_input+0x49c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	429a      	cmp	r2, r3
 8008838:	d11b      	bne.n	8008872 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	8ada      	ldrh	r2, [r3, #22]
 800883e:	4b37      	ldr	r3, [pc, #220]	; (800891c <tcp_input+0x49c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008846:	429a      	cmp	r2, r3
 8008848:	d113      	bne.n	8008872 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	4b34      	ldr	r3, [pc, #208]	; (8008920 <tcp_input+0x4a0>)
 8008850:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008852:	429a      	cmp	r2, r3
 8008854:	d10d      	bne.n	8008872 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b31      	ldr	r3, [pc, #196]	; (8008920 <tcp_input+0x4a0>)
 800885c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800885e:	429a      	cmp	r2, r3
 8008860:	d107      	bne.n	8008872 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008862:	69b8      	ldr	r0, [r7, #24]
 8008864:	f000 fb7c 	bl	8008f60 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fd fbef 	bl	800604c <pbuf_free>
        return;
 800886e:	e209      	b.n	8008c84 <tcp_input+0x804>
        continue;
 8008870:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1bc      	bne.n	80087f8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008882:	4b2f      	ldr	r3, [pc, #188]	; (8008940 <tcp_input+0x4c0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e02a      	b.n	80088e0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	7a1b      	ldrb	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00c      	beq.n	80088ac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	7a1a      	ldrb	r2, [r3, #8]
 8008896:	4b22      	ldr	r3, [pc, #136]	; (8008920 <tcp_input+0x4a0>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800889e:	3301      	adds	r3, #1
 80088a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d002      	beq.n	80088ac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	61fb      	str	r3, [r7, #28]
        continue;
 80088aa:	e016      	b.n	80088da <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	8ada      	ldrh	r2, [r3, #22]
 80088b0:	4b1a      	ldr	r3, [pc, #104]	; (800891c <tcp_input+0x49c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	885b      	ldrh	r3, [r3, #2]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d10c      	bne.n	80088d6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	4b17      	ldr	r3, [pc, #92]	; (8008920 <tcp_input+0x4a0>)
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d00f      	beq.n	80088e8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <tcp_input+0x46a>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1d1      	bne.n	800888a <tcp_input+0x40a>
 80088e6:	e000      	b.n	80088ea <tcp_input+0x46a>
            break;
 80088e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d029      	beq.n	8008944 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <tcp_input+0x4c0>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008906:	4a0e      	ldr	r2, [pc, #56]	; (8008940 <tcp_input+0x4c0>)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800890c:	6978      	ldr	r0, [r7, #20]
 800890e:	f000 fa15 	bl	8008d3c <tcp_listen_input>
      }
      pbuf_free(p);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fd fb9a 	bl	800604c <pbuf_free>
      return;
 8008918:	e1b4      	b.n	8008c84 <tcp_input+0x804>
 800891a:	bf00      	nop
 800891c:	200089d4 	.word	0x200089d4
 8008920:	20003238 	.word	0x20003238
 8008924:	08012b20 	.word	0x08012b20
 8008928:	08012c4c 	.word	0x08012c4c
 800892c:	08012b6c 	.word	0x08012b6c
 8008930:	200089b4 	.word	0x200089b4
 8008934:	08012c78 	.word	0x08012c78
 8008938:	200089b8 	.word	0x200089b8
 800893c:	08012ca4 	.word	0x08012ca4
 8008940:	200089b0 	.word	0x200089b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 8158 	beq.w	8008bfc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800894c:	4b95      	ldr	r3, [pc, #596]	; (8008ba4 <tcp_input+0x724>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	891a      	ldrh	r2, [r3, #8]
 8008956:	4b93      	ldr	r3, [pc, #588]	; (8008ba4 <tcp_input+0x724>)
 8008958:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800895a:	4a92      	ldr	r2, [pc, #584]	; (8008ba4 <tcp_input+0x724>)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008960:	4b91      	ldr	r3, [pc, #580]	; (8008ba8 <tcp_input+0x728>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a8f      	ldr	r2, [pc, #572]	; (8008ba4 <tcp_input+0x724>)
 8008966:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008968:	4b90      	ldr	r3, [pc, #576]	; (8008bac <tcp_input+0x72c>)
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800896e:	4b90      	ldr	r3, [pc, #576]	; (8008bb0 <tcp_input+0x730>)
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008974:	4b8f      	ldr	r3, [pc, #572]	; (8008bb4 <tcp_input+0x734>)
 8008976:	2200      	movs	r2, #0
 8008978:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800897a:	4b8f      	ldr	r3, [pc, #572]	; (8008bb8 <tcp_input+0x738>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d006      	beq.n	8008994 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	7b5b      	ldrb	r3, [r3, #13]
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008998:	2b00      	cmp	r3, #0
 800899a:	d017      	beq.n	80089cc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800899c:	69b8      	ldr	r0, [r7, #24]
 800899e:	f7fe ffa3 	bl	80078e8 <tcp_process_refused_data>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f113 0f0d 	cmn.w	r3, #13
 80089a8:	d007      	beq.n	80089ba <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089b2:	4b82      	ldr	r3, [pc, #520]	; (8008bbc <tcp_input+0x73c>)
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 80e3 	bne.w	8008b8a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80089c4:	69b8      	ldr	r0, [r7, #24]
 80089c6:	f003 ff0b 	bl	800c7e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80089ca:	e0de      	b.n	8008b8a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80089cc:	4a7c      	ldr	r2, [pc, #496]	; (8008bc0 <tcp_input+0x740>)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80089d2:	69b8      	ldr	r0, [r7, #24]
 80089d4:	f000 fb3e 	bl	8009054 <tcp_process>
 80089d8:	4603      	mov	r3, r0
 80089da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80089dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e0:	f113 0f0d 	cmn.w	r3, #13
 80089e4:	f000 80d3 	beq.w	8008b8e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80089e8:	4b71      	ldr	r3, [pc, #452]	; (8008bb0 <tcp_input+0x730>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 0308 	and.w	r3, r3, #8
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d015      	beq.n	8008a20 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <tcp_input+0x590>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	6912      	ldr	r2, [r2, #16]
 8008a08:	f06f 010d 	mvn.w	r1, #13
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	486c      	ldr	r0, [pc, #432]	; (8008bc4 <tcp_input+0x744>)
 8008a14:	f7ff fb40 	bl	8008098 <tcp_pcb_remove>
        tcp_free(pcb);
 8008a18:	69b8      	ldr	r0, [r7, #24]
 8008a1a:	f7fd fe49 	bl	80066b0 <tcp_free>
 8008a1e:	e0da      	b.n	8008bd6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a24:	4b63      	ldr	r3, [pc, #396]	; (8008bb4 <tcp_input+0x734>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01d      	beq.n	8008a68 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008a2c:	4b61      	ldr	r3, [pc, #388]	; (8008bb4 <tcp_input+0x734>)
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <tcp_input+0x5d2>
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	6910      	ldr	r0, [r2, #16]
 8008a46:	89fa      	ldrh	r2, [r7, #14]
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	4798      	blx	r3
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	74fb      	strb	r3, [r7, #19]
 8008a50:	e001      	b.n	8008a56 <tcp_input+0x5d6>
 8008a52:	2300      	movs	r3, #0
 8008a54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a5a:	f113 0f0d 	cmn.w	r3, #13
 8008a5e:	f000 8098 	beq.w	8008b92 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a62:	4b54      	ldr	r3, [pc, #336]	; (8008bb4 <tcp_input+0x734>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a68:	69b8      	ldr	r0, [r7, #24]
 8008a6a:	f000 f927 	bl	8008cbc <tcp_input_delayed_close>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8090 	bne.w	8008b96 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a76:	4b4d      	ldr	r3, [pc, #308]	; (8008bac <tcp_input+0x72c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d041      	beq.n	8008b02 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <tcp_input+0x614>
 8008a86:	4b50      	ldr	r3, [pc, #320]	; (8008bc8 <tcp_input+0x748>)
 8008a88:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008a8c:	494f      	ldr	r1, [pc, #316]	; (8008bcc <tcp_input+0x74c>)
 8008a8e:	4850      	ldr	r0, [pc, #320]	; (8008bd0 <tcp_input+0x750>)
 8008a90:	f006 ff88 	bl	800f9a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	8b5b      	ldrh	r3, [r3, #26]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008aa0:	4b42      	ldr	r3, [pc, #264]	; (8008bac <tcp_input+0x72c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fd fad1 	bl	800604c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	f7fe f8f2 	bl	8006c94 <tcp_abort>
            goto aborted;
 8008ab0:	e091      	b.n	8008bd6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00c      	beq.n	8008ad6 <tcp_input+0x656>
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6918      	ldr	r0, [r3, #16]
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <tcp_input+0x72c>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	47a0      	blx	r4
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	74fb      	strb	r3, [r7, #19]
 8008ad4:	e008      	b.n	8008ae8 <tcp_input+0x668>
 8008ad6:	4b35      	ldr	r3, [pc, #212]	; (8008bac <tcp_input+0x72c>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7fe ffda 	bl	8007a98 <tcp_recv_null>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008ae8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008aec:	f113 0f0d 	cmn.w	r3, #13
 8008af0:	d053      	beq.n	8008b9a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008af2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008afa:	4b2c      	ldr	r3, [pc, #176]	; (8008bac <tcp_input+0x72c>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b02:	4b2b      	ldr	r3, [pc, #172]	; (8008bb0 <tcp_input+0x730>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d030      	beq.n	8008b70 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b1a:	7b5a      	ldrb	r2, [r3, #13]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b20:	f042 0220 	orr.w	r2, r2, #32
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	735a      	strb	r2, [r3, #13]
 8008b28:	e022      	b.n	8008b70 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b32:	d005      	beq.n	8008b40 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b38:	3301      	adds	r3, #1
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <tcp_input+0x6e2>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	6918      	ldr	r0, [r3, #16]
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	47a0      	blx	r4
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	74fb      	strb	r3, [r7, #19]
 8008b60:	e001      	b.n	8008b66 <tcp_input+0x6e6>
 8008b62:	2300      	movs	r3, #0
 8008b64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b6a:	f113 0f0d 	cmn.w	r3, #13
 8008b6e:	d016      	beq.n	8008b9e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008b70:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <tcp_input+0x740>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b76:	69b8      	ldr	r0, [r7, #24]
 8008b78:	f000 f8a0 	bl	8008cbc <tcp_input_delayed_close>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d128      	bne.n	8008bd4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b82:	69b8      	ldr	r0, [r7, #24]
 8008b84:	f003 f816 	bl	800bbb4 <tcp_output>
 8008b88:	e025      	b.n	8008bd6 <tcp_input+0x756>
        goto aborted;
 8008b8a:	bf00      	nop
 8008b8c:	e023      	b.n	8008bd6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b8e:	bf00      	nop
 8008b90:	e021      	b.n	8008bd6 <tcp_input+0x756>
              goto aborted;
 8008b92:	bf00      	nop
 8008b94:	e01f      	b.n	8008bd6 <tcp_input+0x756>
          goto aborted;
 8008b96:	bf00      	nop
 8008b98:	e01d      	b.n	8008bd6 <tcp_input+0x756>
            goto aborted;
 8008b9a:	bf00      	nop
 8008b9c:	e01b      	b.n	8008bd6 <tcp_input+0x756>
              goto aborted;
 8008b9e:	bf00      	nop
 8008ba0:	e019      	b.n	8008bd6 <tcp_input+0x756>
 8008ba2:	bf00      	nop
 8008ba4:	200089c0 	.word	0x200089c0
 8008ba8:	200089d4 	.word	0x200089d4
 8008bac:	200089f4 	.word	0x200089f4
 8008bb0:	200089f1 	.word	0x200089f1
 8008bb4:	200089ec 	.word	0x200089ec
 8008bb8:	200089f0 	.word	0x200089f0
 8008bbc:	200089ee 	.word	0x200089ee
 8008bc0:	200089f8 	.word	0x200089f8
 8008bc4:	200089b4 	.word	0x200089b4
 8008bc8:	08012b20 	.word	0x08012b20
 8008bcc:	08012cd4 	.word	0x08012cd4
 8008bd0:	08012b6c 	.word	0x08012b6c
          goto aborted;
 8008bd4:	bf00      	nop
    tcp_input_pcb = NULL;
 8008bd6:	4b2d      	ldr	r3, [pc, #180]	; (8008c8c <tcp_input+0x80c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008bdc:	4b2c      	ldr	r3, [pc, #176]	; (8008c90 <tcp_input+0x810>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008be2:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <tcp_input+0x814>)
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d031      	beq.n	8008c4e <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 8008bea:	4b2a      	ldr	r3, [pc, #168]	; (8008c94 <tcp_input+0x814>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fd fa2c 	bl	800604c <pbuf_free>
      inseg.p = NULL;
 8008bf4:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <tcp_input+0x814>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	e028      	b.n	8008c4e <tcp_input+0x7ce>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008bfc:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <tcp_input+0x818>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fb ff09 	bl	8004a1c <lwip_htons>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d118      	bne.n	8008c48 <tcp_input+0x7c8>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c16:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <tcp_input+0x81c>)
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	4b21      	ldr	r3, [pc, #132]	; (8008ca0 <tcp_input+0x820>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4b20      	ldr	r3, [pc, #128]	; (8008ca4 <tcp_input+0x824>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c26:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <tcp_input+0x818>)
 8008c28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c2a:	885b      	ldrh	r3, [r3, #2]
 8008c2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c2e:	4a1a      	ldr	r2, [pc, #104]	; (8008c98 <tcp_input+0x818>)
 8008c30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c32:	8812      	ldrh	r2, [r2, #0]
 8008c34:	b292      	uxth	r2, r2
 8008c36:	9202      	str	r2, [sp, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <tcp_input+0x828>)
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <tcp_input+0x82c>)
 8008c40:	4602      	mov	r2, r0
 8008c42:	2000      	movs	r0, #0
 8008c44:	f003 fd76 	bl	800c734 <tcp_rst>
    }
    pbuf_free(p);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fd f9ff 	bl	800604c <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 8008c4e:	f7ff fbbf 	bl	80083d0 <tcp_pcbs_sane>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d114      	bne.n	8008c82 <tcp_input+0x802>
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <tcp_input+0x830>)
 8008c5a:	f240 2249 	movw	r2, #585	; 0x249
 8008c5e:	4915      	ldr	r1, [pc, #84]	; (8008cb4 <tcp_input+0x834>)
 8008c60:	4815      	ldr	r0, [pc, #84]	; (8008cb8 <tcp_input+0x838>)
 8008c62:	f006 fe9f 	bl	800f9a4 <iprintf>
  PERF_STOP("tcp_input");
  return;
 8008c66:	e00c      	b.n	8008c82 <tcp_input+0x802>
    goto dropped;
 8008c68:	bf00      	nop
 8008c6a:	e006      	b.n	8008c7a <tcp_input+0x7fa>
    goto dropped;
 8008c6c:	bf00      	nop
 8008c6e:	e004      	b.n	8008c7a <tcp_input+0x7fa>
    goto dropped;
 8008c70:	bf00      	nop
 8008c72:	e002      	b.n	8008c7a <tcp_input+0x7fa>
      goto dropped;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <tcp_input+0x7fa>
      goto dropped;
 8008c78:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fd f9e6 	bl	800604c <pbuf_free>
 8008c80:	e000      	b.n	8008c84 <tcp_input+0x804>
  return;
 8008c82:	bf00      	nop
}
 8008c84:	3724      	adds	r7, #36	; 0x24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd90      	pop	{r4, r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200089f8 	.word	0x200089f8
 8008c90:	200089f4 	.word	0x200089f4
 8008c94:	200089c0 	.word	0x200089c0
 8008c98:	200089d4 	.word	0x200089d4
 8008c9c:	200089e8 	.word	0x200089e8
 8008ca0:	200089ee 	.word	0x200089ee
 8008ca4:	200089e4 	.word	0x200089e4
 8008ca8:	20003248 	.word	0x20003248
 8008cac:	2000324c 	.word	0x2000324c
 8008cb0:	08012b20 	.word	0x08012b20
 8008cb4:	08012cf0 	.word	0x08012cf0
 8008cb8:	08012b6c 	.word	0x08012b6c

08008cbc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <tcp_input_delayed_close+0x1c>
 8008cca:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <tcp_input_delayed_close+0x6c>)
 8008ccc:	f240 225a 	movw	r2, #602	; 0x25a
 8008cd0:	4916      	ldr	r1, [pc, #88]	; (8008d2c <tcp_input_delayed_close+0x70>)
 8008cd2:	4817      	ldr	r0, [pc, #92]	; (8008d30 <tcp_input_delayed_close+0x74>)
 8008cd4:	f006 fe66 	bl	800f9a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008cd8:	4b16      	ldr	r3, [pc, #88]	; (8008d34 <tcp_input_delayed_close+0x78>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01c      	beq.n	8008d1e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8b5b      	ldrh	r3, [r3, #26]
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10d      	bne.n	8008d0c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <tcp_input_delayed_close+0x50>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6912      	ldr	r2, [r2, #16]
 8008d04:	f06f 010e 	mvn.w	r1, #14
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	480a      	ldr	r0, [pc, #40]	; (8008d38 <tcp_input_delayed_close+0x7c>)
 8008d10:	f7ff f9c2 	bl	8008098 <tcp_pcb_remove>
    tcp_free(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7fd fccb 	bl	80066b0 <tcp_free>
    return 1;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	08012b20 	.word	0x08012b20
 8008d2c:	08012d0c 	.word	0x08012d0c
 8008d30:	08012b6c 	.word	0x08012b6c
 8008d34:	200089f1 	.word	0x200089f1
 8008d38:	200089b4 	.word	0x200089b4

08008d3c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d3c:	b590      	push	{r4, r7, lr}
 8008d3e:	b08b      	sub	sp, #44	; 0x2c
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d44:	4b77      	ldr	r3, [pc, #476]	; (8008f24 <tcp_listen_input+0x1e8>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 80e2 	bne.w	8008f16 <tcp_listen_input+0x1da>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <tcp_listen_input+0x2a>
 8008d58:	4b73      	ldr	r3, [pc, #460]	; (8008f28 <tcp_listen_input+0x1ec>)
 8008d5a:	f240 2281 	movw	r2, #641	; 0x281
 8008d5e:	4973      	ldr	r1, [pc, #460]	; (8008f2c <tcp_listen_input+0x1f0>)
 8008d60:	4873      	ldr	r0, [pc, #460]	; (8008f30 <tcp_listen_input+0x1f4>)
 8008d62:	f006 fe1f 	bl	800f9a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d66:	4b6f      	ldr	r3, [pc, #444]	; (8008f24 <tcp_listen_input+0x1e8>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	f003 0310 	and.w	r3, r3, #16
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d019      	beq.n	8008da6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d72:	4b70      	ldr	r3, [pc, #448]	; (8008f34 <tcp_listen_input+0x1f8>)
 8008d74:	6819      	ldr	r1, [r3, #0]
 8008d76:	4b70      	ldr	r3, [pc, #448]	; (8008f38 <tcp_listen_input+0x1fc>)
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4b6f      	ldr	r3, [pc, #444]	; (8008f3c <tcp_listen_input+0x200>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d82:	4b6f      	ldr	r3, [pc, #444]	; (8008f40 <tcp_listen_input+0x204>)
 8008d84:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d8a:	4a6d      	ldr	r2, [pc, #436]	; (8008f40 <tcp_listen_input+0x204>)
 8008d8c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d8e:	8812      	ldrh	r2, [r2, #0]
 8008d90:	b292      	uxth	r2, r2
 8008d92:	9202      	str	r2, [sp, #8]
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	4b6b      	ldr	r3, [pc, #428]	; (8008f44 <tcp_listen_input+0x208>)
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4b6b      	ldr	r3, [pc, #428]	; (8008f48 <tcp_listen_input+0x20c>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f003 fcc8 	bl	800c734 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008da4:	e0b9      	b.n	8008f1a <tcp_listen_input+0x1de>
  } else if (flags & TCP_SYN) {
 8008da6:	4b5f      	ldr	r3, [pc, #380]	; (8008f24 <tcp_listen_input+0x1e8>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80b3 	beq.w	8008f1a <tcp_listen_input+0x1de>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 8008db4:	4b62      	ldr	r3, [pc, #392]	; (8008f40 <tcp_listen_input+0x204>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4b60      	ldr	r3, [pc, #384]	; (8008f40 <tcp_listen_input+0x204>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4860      	ldr	r0, [pc, #384]	; (8008f4c <tcp_listen_input+0x210>)
 8008dca:	f006 fdeb 	bl	800f9a4 <iprintf>
    npcb = tcp_alloc(pcb->prio);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7d5b      	ldrb	r3, [r3, #21]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe ffa4 	bl	8007d20 <tcp_alloc>
 8008dd8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d114      	bne.n	8008e0a <tcp_listen_input+0xce>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 8008de0:	485b      	ldr	r0, [pc, #364]	; (8008f50 <tcp_listen_input+0x214>)
 8008de2:	f006 fe7b 	bl	800fadc <puts>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <tcp_listen_input+0xc8>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6910      	ldr	r0, [r2, #16]
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4798      	blx	r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]
      return;
 8008e02:	e08b      	b.n	8008f1c <tcp_listen_input+0x1e0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008e04:	23f0      	movs	r3, #240	; 0xf0
 8008e06:	73bb      	strb	r3, [r7, #14]
      return;
 8008e08:	e088      	b.n	8008f1c <tcp_listen_input+0x1e0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008e0a:	4b52      	ldr	r3, [pc, #328]	; (8008f54 <tcp_listen_input+0x218>)
 8008e0c:	695a      	ldr	r2, [r3, #20]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008e12:	4b50      	ldr	r3, [pc, #320]	; (8008f54 <tcp_listen_input+0x218>)
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	8ada      	ldrh	r2, [r3, #22]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008e22:	4b47      	ldr	r3, [pc, #284]	; (8008f40 <tcp_listen_input+0x204>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2203      	movs	r2, #3
 8008e32:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e34:	4b41      	ldr	r3, [pc, #260]	; (8008f3c <tcp_listen_input+0x200>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008e46:	6978      	ldr	r0, [r7, #20]
 8008e48:	f7ff f9c8 	bl	80081dc <tcp_next_iss>
 8008e4c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e66:	4b35      	ldr	r3, [pc, #212]	; (8008f3c <tcp_listen_input+0x200>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	1e5a      	subs	r2, r3, #1
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7a5b      	ldrb	r3, [r3, #9]
 8008e82:	f003 030c 	and.w	r3, r3, #12
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7a1a      	ldrb	r2, [r3, #8]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008e94:	4b30      	ldr	r3, [pc, #192]	; (8008f58 <tcp_listen_input+0x21c>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	4a2e      	ldr	r2, [pc, #184]	; (8008f58 <tcp_listen_input+0x21c>)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	f003 fe8d 	bl	800cbc0 <tcp_timer_needed>
 8008ea6:	4b2d      	ldr	r3, [pc, #180]	; (8008f5c <tcp_listen_input+0x220>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008eac:	6978      	ldr	r0, [r7, #20]
 8008eae:	f001 fe03 	bl	800aab8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008eb2:	4b23      	ldr	r3, [pc, #140]	; (8008f40 <tcp_listen_input+0x204>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	89db      	ldrh	r3, [r3, #14]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f005 fa85 	bl	800e3e4 <ip4_route>
 8008eda:	4601      	mov	r1, r0
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7ff f9a0 	bl	8008228 <tcp_eff_send_mss_netif>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ef0:	2112      	movs	r1, #18
 8008ef2:	6978      	ldr	r0, [r7, #20]
 8008ef4:	f002 fd70 	bl	800b9d8 <tcp_enqueue_flags>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <tcp_listen_input+0x1d2>
      tcp_abandon(npcb, 0);
 8008f04:	2100      	movs	r1, #0
 8008f06:	6978      	ldr	r0, [r7, #20]
 8008f08:	f7fd fe06 	bl	8006b18 <tcp_abandon>
      return;
 8008f0c:	e006      	b.n	8008f1c <tcp_listen_input+0x1e0>
    tcp_output(npcb);
 8008f0e:	6978      	ldr	r0, [r7, #20]
 8008f10:	f002 fe50 	bl	800bbb4 <tcp_output>
  return;
 8008f14:	e001      	b.n	8008f1a <tcp_listen_input+0x1de>
    return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <tcp_listen_input+0x1e0>
  return;
 8008f1a:	bf00      	nop
}
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd90      	pop	{r4, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	200089f0 	.word	0x200089f0
 8008f28:	08012b20 	.word	0x08012b20
 8008f2c:	08012d34 	.word	0x08012d34
 8008f30:	08012b6c 	.word	0x08012b6c
 8008f34:	200089e8 	.word	0x200089e8
 8008f38:	200089ee 	.word	0x200089ee
 8008f3c:	200089e4 	.word	0x200089e4
 8008f40:	200089d4 	.word	0x200089d4
 8008f44:	20003248 	.word	0x20003248
 8008f48:	2000324c 	.word	0x2000324c
 8008f4c:	08012d54 	.word	0x08012d54
 8008f50:	08012d78 	.word	0x08012d78
 8008f54:	20003238 	.word	0x20003238
 8008f58:	200089b4 	.word	0x200089b4
 8008f5c:	200089bc 	.word	0x200089bc

08008f60 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af04      	add	r7, sp, #16
 8008f66:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f68:	4b2f      	ldr	r3, [pc, #188]	; (8009028 <tcp_timewait_input+0xc8>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d153      	bne.n	800901c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <tcp_timewait_input+0x28>
 8008f7a:	4b2c      	ldr	r3, [pc, #176]	; (800902c <tcp_timewait_input+0xcc>)
 8008f7c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008f80:	492b      	ldr	r1, [pc, #172]	; (8009030 <tcp_timewait_input+0xd0>)
 8008f82:	482c      	ldr	r0, [pc, #176]	; (8009034 <tcp_timewait_input+0xd4>)
 8008f84:	f006 fd0e 	bl	800f9a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f88:	4b27      	ldr	r3, [pc, #156]	; (8009028 <tcp_timewait_input+0xc8>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d02a      	beq.n	8008fea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008f94:	4b28      	ldr	r3, [pc, #160]	; (8009038 <tcp_timewait_input+0xd8>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	db2d      	blt.n	8008ffe <tcp_timewait_input+0x9e>
 8008fa2:	4b25      	ldr	r3, [pc, #148]	; (8009038 <tcp_timewait_input+0xd8>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fae:	440b      	add	r3, r1
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dc23      	bgt.n	8008ffe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fb6:	4b21      	ldr	r3, [pc, #132]	; (800903c <tcp_timewait_input+0xdc>)
 8008fb8:	6819      	ldr	r1, [r3, #0]
 8008fba:	4b21      	ldr	r3, [pc, #132]	; (8009040 <tcp_timewait_input+0xe0>)
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4b1d      	ldr	r3, [pc, #116]	; (8009038 <tcp_timewait_input+0xd8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fc6:	4b1f      	ldr	r3, [pc, #124]	; (8009044 <tcp_timewait_input+0xe4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fce:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <tcp_timewait_input+0xe4>)
 8008fd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd2:	8812      	ldrh	r2, [r2, #0]
 8008fd4:	b292      	uxth	r2, r2
 8008fd6:	9202      	str	r2, [sp, #8]
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <tcp_timewait_input+0xe8>)
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	4b1b      	ldr	r3, [pc, #108]	; (800904c <tcp_timewait_input+0xec>)
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f003 fba6 	bl	800c734 <tcp_rst>
      return;
 8008fe8:	e01b      	b.n	8009022 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <tcp_timewait_input+0xc8>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <tcp_timewait_input+0xf0>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <tcp_timewait_input+0xe0>)
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8b5b      	ldrh	r3, [r3, #26]
 800900a:	f043 0302 	orr.w	r3, r3, #2
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 fdcd 	bl	800bbb4 <tcp_output>
  }
  return;
 800901a:	e001      	b.n	8009020 <tcp_timewait_input+0xc0>
    return;
 800901c:	bf00      	nop
 800901e:	e000      	b.n	8009022 <tcp_timewait_input+0xc2>
  return;
 8009020:	bf00      	nop
}
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200089f0 	.word	0x200089f0
 800902c:	08012b20 	.word	0x08012b20
 8009030:	08012da4 	.word	0x08012da4
 8009034:	08012b6c 	.word	0x08012b6c
 8009038:	200089e4 	.word	0x200089e4
 800903c:	200089e8 	.word	0x200089e8
 8009040:	200089ee 	.word	0x200089ee
 8009044:	200089d4 	.word	0x200089d4
 8009048:	20003248 	.word	0x20003248
 800904c:	2000324c 	.word	0x2000324c
 8009050:	200089a8 	.word	0x200089a8

08009054 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b08d      	sub	sp, #52	; 0x34
 8009058:	af04      	add	r7, sp, #16
 800905a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  err_t err;

  err = ERR_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73bb      	strb	r3, [r7, #14]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <tcp_process+0x24>
 800906a:	4b88      	ldr	r3, [pc, #544]	; (800928c <tcp_process+0x238>)
 800906c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009070:	4987      	ldr	r1, [pc, #540]	; (8009290 <tcp_process+0x23c>)
 8009072:	4888      	ldr	r0, [pc, #544]	; (8009294 <tcp_process+0x240>)
 8009074:	f006 fc96 	bl	800f9a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009078:	4b87      	ldr	r3, [pc, #540]	; (8009298 <tcp_process+0x244>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d056      	beq.n	8009132 <tcp_process+0xde>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7d1b      	ldrb	r3, [r3, #20]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d108      	bne.n	800909e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009090:	4b82      	ldr	r3, [pc, #520]	; (800929c <tcp_process+0x248>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d123      	bne.n	80090e0 <tcp_process+0x8c>
        acceptable = 1;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
 800909c:	e020      	b.n	80090e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a2:	4b7f      	ldr	r3, [pc, #508]	; (80092a0 <tcp_process+0x24c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d102      	bne.n	80090b0 <tcp_process+0x5c>
        acceptable = 1;
 80090aa:	2301      	movs	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]
 80090ae:	e017      	b.n	80090e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090b0:	4b7b      	ldr	r3, [pc, #492]	; (80092a0 <tcp_process+0x24c>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	db10      	blt.n	80090e0 <tcp_process+0x8c>
 80090be:	4b78      	ldr	r3, [pc, #480]	; (80092a0 <tcp_process+0x24c>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80090ca:	440b      	add	r3, r1
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc06      	bgt.n	80090e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8b5b      	ldrh	r3, [r3, #26]
 80090d6:	f043 0302 	orr.w	r3, r3, #2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01b      	beq.n	800911e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7d1b      	ldrb	r3, [r3, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <tcp_process+0xa8>
 80090ee:	4b67      	ldr	r3, [pc, #412]	; (800928c <tcp_process+0x238>)
 80090f0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80090f4:	496b      	ldr	r1, [pc, #428]	; (80092a4 <tcp_process+0x250>)
 80090f6:	4867      	ldr	r0, [pc, #412]	; (8009294 <tcp_process+0x240>)
 80090f8:	f006 fc54 	bl	800f9a4 <iprintf>
      recv_flags |= TF_RESET;
 80090fc:	4b6a      	ldr	r3, [pc, #424]	; (80092a8 <tcp_process+0x254>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	f043 0308 	orr.w	r3, r3, #8
 8009104:	b2da      	uxtb	r2, r3
 8009106:	4b68      	ldr	r3, [pc, #416]	; (80092a8 <tcp_process+0x254>)
 8009108:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8b5b      	ldrh	r3, [r3, #26]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009118:	f06f 030d 	mvn.w	r3, #13
 800911c:	e3e3      	b.n	80098e6 <tcp_process+0x892>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 800911e:	4b60      	ldr	r3, [pc, #384]	; (80092a0 <tcp_process+0x24c>)
 8009120:	6819      	ldr	r1, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	461a      	mov	r2, r3
 8009128:	4860      	ldr	r0, [pc, #384]	; (80092ac <tcp_process+0x258>)
 800912a:	f006 fc3b 	bl	800f9a4 <iprintf>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	e3d9      	b.n	80098e6 <tcp_process+0x892>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009132:	4b59      	ldr	r3, [pc, #356]	; (8009298 <tcp_process+0x244>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <tcp_process+0x10c>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7d1b      	ldrb	r3, [r3, #20]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d00c      	beq.n	8009160 <tcp_process+0x10c>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7d1b      	ldrb	r3, [r3, #20]
 800914a:	2b03      	cmp	r3, #3
 800914c:	d008      	beq.n	8009160 <tcp_process+0x10c>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8b5b      	ldrh	r3, [r3, #26]
 8009152:	f043 0302 	orr.w	r3, r3, #2
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e3c2      	b.n	80098e6 <tcp_process+0x892>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8b5b      	ldrh	r3, [r3, #26]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <tcp_process+0x120>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800916c:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <tcp_process+0x25c>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fc97 	bl	800aab8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7d1b      	ldrb	r3, [r3, #20]
 800918e:	3b02      	subs	r3, #2
 8009190:	2b07      	cmp	r3, #7
 8009192:	f200 8398 	bhi.w	80098c6 <tcp_process+0x872>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <tcp_process+0x148>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080093e7 	.word	0x080093e7
 80091a4:	080095bd 	.word	0x080095bd
 80091a8:	080095e7 	.word	0x080095e7
 80091ac:	080096ef 	.word	0x080096ef
 80091b0:	080095bd 	.word	0x080095bd
 80091b4:	080097cd 	.word	0x080097cd
 80091b8:	08009877 	.word	0x08009877
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80091bc:	4b36      	ldr	r3, [pc, #216]	; (8009298 <tcp_process+0x244>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80e1 	beq.w	800938c <tcp_process+0x338>
 80091ca:	4b33      	ldr	r3, [pc, #204]	; (8009298 <tcp_process+0x244>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80da 	beq.w	800938c <tcp_process+0x338>
          && (ackno == pcb->lastack + 1)) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <tcp_process+0x248>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f040 80d2 	bne.w	800938c <tcp_process+0x338>
        pcb->rcv_nxt = seqno + 1;
 80091e8:	4b2d      	ldr	r3, [pc, #180]	; (80092a0 <tcp_process+0x24c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80091fa:	4b28      	ldr	r3, [pc, #160]	; (800929c <tcp_process+0x248>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009202:	4b2c      	ldr	r3, [pc, #176]	; (80092b4 <tcp_process+0x260>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	89db      	ldrh	r3, [r3, #14]
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800921c:	4b20      	ldr	r3, [pc, #128]	; (80092a0 <tcp_process+0x24c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2204      	movs	r2, #4
 800922a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	4618      	mov	r0, r3
 8009236:	f005 f8d5 	bl	800e3e4 <ip4_route>
 800923a:	4601      	mov	r1, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3304      	adds	r3, #4
 8009240:	461a      	mov	r2, r3
 8009242:	4620      	mov	r0, r4
 8009244:	f7fe fff0 	bl	8008228 <tcp_eff_send_mss_netif>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009254:	009a      	lsls	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009260:	428b      	cmp	r3, r1
 8009262:	bf38      	it	cc
 8009264:	460b      	movcc	r3, r1
 8009266:	429a      	cmp	r2, r3
 8009268:	d204      	bcs.n	8009274 <tcp_process+0x220>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	b29b      	uxth	r3, r3
 8009272:	e023      	b.n	80092bc <tcp_process+0x268>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	f241 121c 	movw	r2, #4380	; 0x111c
 800927e:	4293      	cmp	r3, r2
 8009280:	d91a      	bls.n	80092b8 <tcp_process+0x264>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	b29b      	uxth	r3, r3
 800928a:	e017      	b.n	80092bc <tcp_process+0x268>
 800928c:	08012b20 	.word	0x08012b20
 8009290:	08012dc4 	.word	0x08012dc4
 8009294:	08012b6c 	.word	0x08012b6c
 8009298:	200089f0 	.word	0x200089f0
 800929c:	200089e8 	.word	0x200089e8
 80092a0:	200089e4 	.word	0x200089e4
 80092a4:	08012de0 	.word	0x08012de0
 80092a8:	200089f1 	.word	0x200089f1
 80092ac:	08012e00 	.word	0x08012e00
 80092b0:	200089a8 	.word	0x200089a8
 80092b4:	200089d4 	.word	0x200089d4
 80092b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <tcp_process+0x286>
 80092cc:	4b94      	ldr	r3, [pc, #592]	; (8009520 <tcp_process+0x4cc>)
 80092ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80092d2:	4994      	ldr	r1, [pc, #592]	; (8009524 <tcp_process+0x4d0>)
 80092d4:	4894      	ldr	r0, [pc, #592]	; (8009528 <tcp_process+0x4d4>)
 80092d6:	f006 fb65 	bl	800f9a4 <iprintf>
        --pcb->snd_queuelen;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d111      	bne.n	800931a <tcp_process+0x2c6>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fa:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <tcp_process+0x2bc>
 8009302:	4b87      	ldr	r3, [pc, #540]	; (8009520 <tcp_process+0x4cc>)
 8009304:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009308:	4988      	ldr	r1, [pc, #544]	; (800952c <tcp_process+0x4d8>)
 800930a:	4887      	ldr	r0, [pc, #540]	; (8009528 <tcp_process+0x4d4>)
 800930c:	f006 fb4a 	bl	800f9a4 <iprintf>
          pcb->unsent = rseg->next;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	66da      	str	r2, [r3, #108]	; 0x6c
 8009318:	e003      	b.n	8009322 <tcp_process+0x2ce>
        } else {
          pcb->unacked = rseg->next;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009322:	6938      	ldr	r0, [r7, #16]
 8009324:	f7fe fb71 	bl	8007a0a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	2b00      	cmp	r3, #0
 800932e:	d104      	bne.n	800933a <tcp_process+0x2e6>
          pcb->rtime = -1;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009336:	861a      	strh	r2, [r3, #48]	; 0x30
 8009338:	e006      	b.n	8009348 <tcp_process+0x2f4>
        } else {
          pcb->rtime = 0;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <tcp_process+0x314>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6910      	ldr	r0, [r2, #16]
 800935c:	2200      	movs	r2, #0
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]
 8009366:	e001      	b.n	800936c <tcp_process+0x318>
 8009368:	2300      	movs	r3, #0
 800936a:	73bb      	strb	r3, [r7, #14]
        if (err == ERR_ABRT) {
 800936c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009370:	f113 0f0d 	cmn.w	r3, #13
 8009374:	d102      	bne.n	800937c <tcp_process+0x328>
          return ERR_ABRT;
 8009376:	f06f 030c 	mvn.w	r3, #12
 800937a:	e2b4      	b.n	80098e6 <tcp_process+0x892>
        }
        tcp_ack_now(pcb);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8b5b      	ldrh	r3, [r3, #26]
 8009380:	f043 0302 	orr.w	r3, r3, #2
 8009384:	b29a      	uxth	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800938a:	e29e      	b.n	80098ca <tcp_process+0x876>
      else if (flags & TCP_ACK) {
 800938c:	4b68      	ldr	r3, [pc, #416]	; (8009530 <tcp_process+0x4dc>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 8298 	beq.w	80098ca <tcp_process+0x876>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800939a:	4b66      	ldr	r3, [pc, #408]	; (8009534 <tcp_process+0x4e0>)
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	4b66      	ldr	r3, [pc, #408]	; (8009538 <tcp_process+0x4e4>)
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	4b65      	ldr	r3, [pc, #404]	; (800953c <tcp_process+0x4e8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093aa:	4b65      	ldr	r3, [pc, #404]	; (8009540 <tcp_process+0x4ec>)
 80093ac:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b2:	4a63      	ldr	r2, [pc, #396]	; (8009540 <tcp_process+0x4ec>)
 80093b4:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b6:	8812      	ldrh	r2, [r2, #0]
 80093b8:	b292      	uxth	r2, r2
 80093ba:	9202      	str	r2, [sp, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	4b61      	ldr	r3, [pc, #388]	; (8009544 <tcp_process+0x4f0>)
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	4b61      	ldr	r3, [pc, #388]	; (8009548 <tcp_process+0x4f4>)
 80093c4:	4602      	mov	r2, r0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f003 f9b4 	bl	800c734 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	f200 8279 	bhi.w	80098ca <tcp_process+0x876>
          pcb->rtime = 0;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f002 ff7e 	bl	800c2e0 <tcp_rexmit_rto>
      break;
 80093e4:	e271      	b.n	80098ca <tcp_process+0x876>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80093e6:	4b52      	ldr	r3, [pc, #328]	; (8009530 <tcp_process+0x4dc>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80d0 	beq.w	8009594 <tcp_process+0x540>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093f4:	4b4f      	ldr	r3, [pc, #316]	; (8009534 <tcp_process+0x4e0>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	f2c0 80ad 	blt.w	8009560 <tcp_process+0x50c>
 8009406:	4b4b      	ldr	r3, [pc, #300]	; (8009534 <tcp_process+0x4e0>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	f300 80a5 	bgt.w	8009560 <tcp_process+0x50c>
          pcb->state = ESTABLISHED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2204      	movs	r2, #4
 800941a:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800941c:	4b4b      	ldr	r3, [pc, #300]	; (800954c <tcp_process+0x4f8>)
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	4619      	mov	r1, r3
 8009426:	4b49      	ldr	r3, [pc, #292]	; (800954c <tcp_process+0x4f8>)
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	b29b      	uxth	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	4847      	ldr	r0, [pc, #284]	; (8009550 <tcp_process+0x4fc>)
 8009432:	f006 fab7 	bl	800f9a4 <iprintf>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <tcp_process+0x3f0>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800943e:	23fa      	movs	r3, #250	; 0xfa
 8009440:	73bb      	strb	r3, [r7, #14]
 8009442:	e01d      	b.n	8009480 <tcp_process+0x42c>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <tcp_process+0x408>
 800944e:	4b34      	ldr	r3, [pc, #208]	; (8009520 <tcp_process+0x4cc>)
 8009450:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009454:	493f      	ldr	r1, [pc, #252]	; (8009554 <tcp_process+0x500>)
 8009456:	4834      	ldr	r0, [pc, #208]	; (8009528 <tcp_process+0x4d4>)
 8009458:	f006 faa4 	bl	800f9a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <tcp_process+0x428>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6910      	ldr	r0, [r2, #16]
 8009470:	2200      	movs	r2, #0
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	73bb      	strb	r3, [r7, #14]
 800947a:	e001      	b.n	8009480 <tcp_process+0x42c>
 800947c:	23f0      	movs	r3, #240	; 0xf0
 800947e:	73bb      	strb	r3, [r7, #14]
          }
          if (err != ERR_OK) {
 8009480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <tcp_process+0x44a>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800948c:	f113 0f0d 	cmn.w	r3, #13
 8009490:	d002      	beq.n	8009498 <tcp_process+0x444>
              tcp_abort(pcb);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fd fbfe 	bl	8006c94 <tcp_abort>
            }
            return ERR_ABRT;
 8009498:	f06f 030c 	mvn.w	r3, #12
 800949c:	e223      	b.n	80098e6 <tcp_process+0x892>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb3c 	bl	8009b1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <tcp_process+0x504>)
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <tcp_process+0x464>
            recv_acked--;
 80094ac:	4b2a      	ldr	r3, [pc, #168]	; (8009558 <tcp_process+0x504>)
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	4b28      	ldr	r3, [pc, #160]	; (8009558 <tcp_process+0x504>)
 80094b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094bc:	009a      	lsls	r2, r3, #2
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf38      	it	cc
 80094cc:	460b      	movcc	r3, r1
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d204      	bcs.n	80094dc <tcp_process+0x488>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	b29b      	uxth	r3, r3
 80094da:	e00d      	b.n	80094f8 <tcp_process+0x4a4>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d904      	bls.n	80094f4 <tcp_process+0x4a0>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	e001      	b.n	80094f8 <tcp_process+0x4a4>
 80094f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80094fe:	4b17      	ldr	r3, [pc, #92]	; (800955c <tcp_process+0x508>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d057      	beq.n	80095ba <tcp_process+0x566>
            tcp_ack_now(pcb);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8b5b      	ldrh	r3, [r3, #26]
 800950e:	f043 0302 	orr.w	r3, r3, #2
 8009512:	b29a      	uxth	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2207      	movs	r2, #7
 800951c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800951e:	e04c      	b.n	80095ba <tcp_process+0x566>
 8009520:	08012b20 	.word	0x08012b20
 8009524:	08012e38 	.word	0x08012e38
 8009528:	08012b6c 	.word	0x08012b6c
 800952c:	08012e50 	.word	0x08012e50
 8009530:	200089f0 	.word	0x200089f0
 8009534:	200089e8 	.word	0x200089e8
 8009538:	200089ee 	.word	0x200089ee
 800953c:	200089e4 	.word	0x200089e4
 8009540:	200089d4 	.word	0x200089d4
 8009544:	20003248 	.word	0x20003248
 8009548:	2000324c 	.word	0x2000324c
 800954c:	200089c0 	.word	0x200089c0
 8009550:	08012e64 	.word	0x08012e64
 8009554:	08012e8c 	.word	0x08012e8c
 8009558:	200089ec 	.word	0x200089ec
 800955c:	200089f1 	.word	0x200089f1
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009560:	4b8c      	ldr	r3, [pc, #560]	; (8009794 <tcp_process+0x740>)
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	4b8c      	ldr	r3, [pc, #560]	; (8009798 <tcp_process+0x744>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	4b8c      	ldr	r3, [pc, #560]	; (800979c <tcp_process+0x748>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009570:	4b8b      	ldr	r3, [pc, #556]	; (80097a0 <tcp_process+0x74c>)
 8009572:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009578:	4a89      	ldr	r2, [pc, #548]	; (80097a0 <tcp_process+0x74c>)
 800957a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800957c:	8812      	ldrh	r2, [r2, #0]
 800957e:	b292      	uxth	r2, r2
 8009580:	9202      	str	r2, [sp, #8]
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	4b87      	ldr	r3, [pc, #540]	; (80097a4 <tcp_process+0x750>)
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4b87      	ldr	r3, [pc, #540]	; (80097a8 <tcp_process+0x754>)
 800958a:	4602      	mov	r2, r0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f003 f8d1 	bl	800c734 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009592:	e19c      	b.n	80098ce <tcp_process+0x87a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009594:	4b85      	ldr	r3, [pc, #532]	; (80097ac <tcp_process+0x758>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 8196 	beq.w	80098ce <tcp_process+0x87a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	1e5a      	subs	r2, r3, #1
 80095a8:	4b7c      	ldr	r3, [pc, #496]	; (800979c <tcp_process+0x748>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	f040 818e 	bne.w	80098ce <tcp_process+0x87a>
        tcp_rexmit(pcb);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f002 feb6 	bl	800c324 <tcp_rexmit>
      break;
 80095b8:	e189      	b.n	80098ce <tcp_process+0x87a>
 80095ba:	e188      	b.n	80098ce <tcp_process+0x87a>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 faad 	bl	8009b1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80095c2:	4b7b      	ldr	r3, [pc, #492]	; (80097b0 <tcp_process+0x75c>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8181 	beq.w	80098d2 <tcp_process+0x87e>
        tcp_ack_now(pcb);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8b5b      	ldrh	r3, [r3, #26]
 80095d4:	f043 0302 	orr.w	r3, r3, #2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2207      	movs	r2, #7
 80095e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80095e4:	e175      	b.n	80098d2 <tcp_process+0x87e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fa98 	bl	8009b1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80095ec:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <tcp_process+0x75c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d063      	beq.n	80096c0 <tcp_process+0x66c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095f8:	4b6c      	ldr	r3, [pc, #432]	; (80097ac <tcp_process+0x758>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d052      	beq.n	80096aa <tcp_process+0x656>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009608:	4b62      	ldr	r3, [pc, #392]	; (8009794 <tcp_process+0x740>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d14c      	bne.n	80096aa <tcp_process+0x656>
            pcb->unsent == NULL) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009614:	2b00      	cmp	r3, #0
 8009616:	d148      	bne.n	80096aa <tcp_process+0x656>
          LWIP_DEBUGF(TCP_DEBUG,
 8009618:	4b66      	ldr	r3, [pc, #408]	; (80097b4 <tcp_process+0x760>)
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4619      	mov	r1, r3
 8009622:	4b64      	ldr	r3, [pc, #400]	; (80097b4 <tcp_process+0x760>)
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	b29b      	uxth	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	4862      	ldr	r0, [pc, #392]	; (80097b8 <tcp_process+0x764>)
 800962e:	f006 f9b9 	bl	800f9a4 <iprintf>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8b5b      	ldrh	r3, [r3, #26]
 8009636:	f043 0302 	orr.w	r3, r3, #2
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7fe fcb7 	bl	8007fb4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009646:	4b5d      	ldr	r3, [pc, #372]	; (80097bc <tcp_process+0x768>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d105      	bne.n	800965c <tcp_process+0x608>
 8009650:	4b5a      	ldr	r3, [pc, #360]	; (80097bc <tcp_process+0x768>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	4a59      	ldr	r2, [pc, #356]	; (80097bc <tcp_process+0x768>)
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e013      	b.n	8009684 <tcp_process+0x630>
 800965c:	4b57      	ldr	r3, [pc, #348]	; (80097bc <tcp_process+0x768>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	e00c      	b.n	800967e <tcp_process+0x62a>
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d104      	bne.n	8009678 <tcp_process+0x624>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	e005      	b.n	8009684 <tcp_process+0x630>
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1ef      	bne.n	8009664 <tcp_process+0x610>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	4b4d      	ldr	r3, [pc, #308]	; (80097c0 <tcp_process+0x76c>)
 800968c:	2201      	movs	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	220a      	movs	r2, #10
 8009694:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009696:	4b4b      	ldr	r3, [pc, #300]	; (80097c4 <tcp_process+0x770>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60da      	str	r2, [r3, #12]
 800969e:	4a49      	ldr	r2, [pc, #292]	; (80097c4 <tcp_process+0x770>)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	f003 fa8c 	bl	800cbc0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80096a8:	e115      	b.n	80098d6 <tcp_process+0x882>
          tcp_ack_now(pcb);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	8b5b      	ldrh	r3, [r3, #26]
 80096ae:	f043 0302 	orr.w	r3, r3, #2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2208      	movs	r2, #8
 80096bc:	751a      	strb	r2, [r3, #20]
      break;
 80096be:	e10a      	b.n	80098d6 <tcp_process+0x882>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80096c0:	4b3a      	ldr	r3, [pc, #232]	; (80097ac <tcp_process+0x758>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 8104 	beq.w	80098d6 <tcp_process+0x882>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096d2:	4b30      	ldr	r3, [pc, #192]	; (8009794 <tcp_process+0x740>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	f040 80fd 	bne.w	80098d6 <tcp_process+0x882>
                 pcb->unsent == NULL) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f040 80f8 	bne.w	80098d6 <tcp_process+0x882>
        pcb->state = FIN_WAIT_2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2206      	movs	r2, #6
 80096ea:	751a      	strb	r2, [r3, #20]
      break;
 80096ec:	e0f3      	b.n	80098d6 <tcp_process+0x882>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa14 	bl	8009b1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80096f4:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <tcp_process+0x75c>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 80ec 	beq.w	80098da <tcp_process+0x886>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8009702:	4b2c      	ldr	r3, [pc, #176]	; (80097b4 <tcp_process+0x760>)
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <tcp_process+0x760>)
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	b29b      	uxth	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	482c      	ldr	r0, [pc, #176]	; (80097c8 <tcp_process+0x774>)
 8009718:	f006 f944 	bl	800f9a4 <iprintf>
        tcp_ack_now(pcb);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8b5b      	ldrh	r3, [r3, #26]
 8009720:	f043 0302 	orr.w	r3, r3, #2
 8009724:	b29a      	uxth	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7fe fc42 	bl	8007fb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009730:	4b22      	ldr	r3, [pc, #136]	; (80097bc <tcp_process+0x768>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d105      	bne.n	8009746 <tcp_process+0x6f2>
 800973a:	4b20      	ldr	r3, [pc, #128]	; (80097bc <tcp_process+0x768>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4a1e      	ldr	r2, [pc, #120]	; (80097bc <tcp_process+0x768>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	e013      	b.n	800976e <tcp_process+0x71a>
 8009746:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <tcp_process+0x768>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	e00c      	b.n	8009768 <tcp_process+0x714>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d104      	bne.n	8009762 <tcp_process+0x70e>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e005      	b.n	800976e <tcp_process+0x71a>
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1ef      	bne.n	800974e <tcp_process+0x6fa>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	60da      	str	r2, [r3, #12]
 8009774:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <tcp_process+0x76c>)
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	220a      	movs	r2, #10
 800977e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009780:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <tcp_process+0x770>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	4a0e      	ldr	r2, [pc, #56]	; (80097c4 <tcp_process+0x770>)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	f003 fa17 	bl	800cbc0 <tcp_timer_needed>
      }
      break;
 8009792:	e0a2      	b.n	80098da <tcp_process+0x886>
 8009794:	200089e8 	.word	0x200089e8
 8009798:	200089ee 	.word	0x200089ee
 800979c:	200089e4 	.word	0x200089e4
 80097a0:	200089d4 	.word	0x200089d4
 80097a4:	20003248 	.word	0x20003248
 80097a8:	2000324c 	.word	0x2000324c
 80097ac:	200089f0 	.word	0x200089f0
 80097b0:	200089f1 	.word	0x200089f1
 80097b4:	200089c0 	.word	0x200089c0
 80097b8:	08012eac 	.word	0x08012eac
 80097bc:	200089b4 	.word	0x200089b4
 80097c0:	200089bc 	.word	0x200089bc
 80097c4:	200089b8 	.word	0x200089b8
 80097c8:	08012edc 	.word	0x08012edc
    case CLOSING:
      tcp_receive(pcb);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f9a5 	bl	8009b1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80097d2:	4b47      	ldr	r3, [pc, #284]	; (80098f0 <tcp_process+0x89c>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d07f      	beq.n	80098de <tcp_process+0x88a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097e2:	4b44      	ldr	r3, [pc, #272]	; (80098f4 <tcp_process+0x8a0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d179      	bne.n	80098de <tcp_process+0x88a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d175      	bne.n	80098de <tcp_process+0x88a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 80097f2:	4b41      	ldr	r3, [pc, #260]	; (80098f8 <tcp_process+0x8a4>)
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4619      	mov	r1, r3
 80097fc:	4b3e      	ldr	r3, [pc, #248]	; (80098f8 <tcp_process+0x8a4>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	885b      	ldrh	r3, [r3, #2]
 8009802:	b29b      	uxth	r3, r3
 8009804:	461a      	mov	r2, r3
 8009806:	483d      	ldr	r0, [pc, #244]	; (80098fc <tcp_process+0x8a8>)
 8009808:	f006 f8cc 	bl	800f9a4 <iprintf>
        tcp_pcb_purge(pcb);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7fe fbd1 	bl	8007fb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009812:	4b3b      	ldr	r3, [pc, #236]	; (8009900 <tcp_process+0x8ac>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d105      	bne.n	8009828 <tcp_process+0x7d4>
 800981c:	4b38      	ldr	r3, [pc, #224]	; (8009900 <tcp_process+0x8ac>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	4a37      	ldr	r2, [pc, #220]	; (8009900 <tcp_process+0x8ac>)
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	e013      	b.n	8009850 <tcp_process+0x7fc>
 8009828:	4b35      	ldr	r3, [pc, #212]	; (8009900 <tcp_process+0x8ac>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	e00c      	b.n	800984a <tcp_process+0x7f6>
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d104      	bne.n	8009844 <tcp_process+0x7f0>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	e005      	b.n	8009850 <tcp_process+0x7fc>
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1ef      	bne.n	8009830 <tcp_process+0x7dc>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	4b2b      	ldr	r3, [pc, #172]	; (8009904 <tcp_process+0x8b0>)
 8009858:	2201      	movs	r2, #1
 800985a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220a      	movs	r2, #10
 8009860:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009862:	4b29      	ldr	r3, [pc, #164]	; (8009908 <tcp_process+0x8b4>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	4a27      	ldr	r2, [pc, #156]	; (8009908 <tcp_process+0x8b4>)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	f003 f9a6 	bl	800cbc0 <tcp_timer_needed>
      }
      break;
 8009874:	e033      	b.n	80098de <tcp_process+0x88a>
    case LAST_ACK:
      tcp_receive(pcb);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f950 	bl	8009b1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800987c:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <tcp_process+0x89c>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02c      	beq.n	80098e2 <tcp_process+0x88e>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800988c:	4b19      	ldr	r3, [pc, #100]	; (80098f4 <tcp_process+0x8a0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d126      	bne.n	80098e2 <tcp_process+0x88e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d122      	bne.n	80098e2 <tcp_process+0x88e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 800989c:	4b16      	ldr	r3, [pc, #88]	; (80098f8 <tcp_process+0x8a4>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4619      	mov	r1, r3
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <tcp_process+0x8a4>)
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	885b      	ldrh	r3, [r3, #2]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	461a      	mov	r2, r3
 80098b0:	4816      	ldr	r0, [pc, #88]	; (800990c <tcp_process+0x8b8>)
 80098b2:	f006 f877 	bl	800f9a4 <iprintf>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80098b6:	4b16      	ldr	r3, [pc, #88]	; (8009910 <tcp_process+0x8bc>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f043 0310 	orr.w	r3, r3, #16
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b13      	ldr	r3, [pc, #76]	; (8009910 <tcp_process+0x8bc>)
 80098c2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80098c4:	e00d      	b.n	80098e2 <tcp_process+0x88e>
    default:
      break;
 80098c6:	bf00      	nop
 80098c8:	e00c      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098ca:	bf00      	nop
 80098cc:	e00a      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098ce:	bf00      	nop
 80098d0:	e008      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098d2:	bf00      	nop
 80098d4:	e006      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098d6:	bf00      	nop
 80098d8:	e004      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098da:	bf00      	nop
 80098dc:	e002      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098de:	bf00      	nop
 80098e0:	e000      	b.n	80098e4 <tcp_process+0x890>
      break;
 80098e2:	bf00      	nop
  }
  return ERR_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3724      	adds	r7, #36	; 0x24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd90      	pop	{r4, r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200089f0 	.word	0x200089f0
 80098f4:	200089e8 	.word	0x200089e8
 80098f8:	200089c0 	.word	0x200089c0
 80098fc:	08012f0c 	.word	0x08012f0c
 8009900:	200089b4 	.word	0x200089b4
 8009904:	200089bc 	.word	0x200089bc
 8009908:	200089b8 	.word	0x200089b8
 800990c:	08012f38 	.word	0x08012f38
 8009910:	200089f1 	.word	0x200089f1

08009914 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <tcp_oos_insert_segment+0x1e>
 8009924:	4b3b      	ldr	r3, [pc, #236]	; (8009a14 <tcp_oos_insert_segment+0x100>)
 8009926:	f240 421f 	movw	r2, #1055	; 0x41f
 800992a:	493b      	ldr	r1, [pc, #236]	; (8009a18 <tcp_oos_insert_segment+0x104>)
 800992c:	483b      	ldr	r0, [pc, #236]	; (8009a1c <tcp_oos_insert_segment+0x108>)
 800992e:	f006 f839 	bl	800f9a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	899b      	ldrh	r3, [r3, #12]
 8009938:	b29b      	uxth	r3, r3
 800993a:	4618      	mov	r0, r3
 800993c:	f7fb f86e 	bl	8004a1c <lwip_htons>
 8009940:	4603      	mov	r3, r0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d028      	beq.n	800999e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800994c:	6838      	ldr	r0, [r7, #0]
 800994e:	f7fe f847 	bl	80079e0 <tcp_segs_free>
    next = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	603b      	str	r3, [r7, #0]
 8009956:	e056      	b.n	8009a06 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	899b      	ldrh	r3, [r3, #12]
 800995e:	b29b      	uxth	r3, r3
 8009960:	4618      	mov	r0, r3
 8009962:	f7fb f85b 	bl	8004a1c <lwip_htons>
 8009966:	4603      	mov	r3, r0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00d      	beq.n	800998e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	899b      	ldrh	r3, [r3, #12]
 8009978:	b29c      	uxth	r4, r3
 800997a:	2001      	movs	r0, #1
 800997c:	f7fb f84e 	bl	8004a1c <lwip_htons>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	4322      	orrs	r2, r4
 800998a:	b292      	uxth	r2, r2
 800998c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7fe f836 	bl	8007a0a <tcp_seg_free>
    while (next &&
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00e      	beq.n	80099c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	891b      	ldrh	r3, [r3, #8]
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <tcp_oos_insert_segment+0x10c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	441a      	add	r2, r3
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	8909      	ldrh	r1, [r1, #8]
 80099ba:	440b      	add	r3, r1
 80099bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80099be:	2b00      	cmp	r3, #0
 80099c0:	daca      	bge.n	8009958 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01e      	beq.n	8009a06 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	461a      	mov	r2, r3
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <tcp_oos_insert_segment+0x10c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	441a      	add	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dd12      	ble.n	8009a06 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <tcp_oos_insert_segment+0x10c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	891b      	ldrh	r3, [r3, #8]
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f7fc f99d 	bl	8005d40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	601a      	str	r2, [r3, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd90      	pop	{r4, r7, pc}
 8009a14:	08012b20 	.word	0x08012b20
 8009a18:	08012f68 	.word	0x08012f68
 8009a1c:	08012b6c 	.word	0x08012b6c
 8009a20:	200089e4 	.word	0x200089e4

08009a24 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009a24:	b5b0      	push	{r4, r5, r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009a32:	e03e      	b.n	8009ab2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fc fb8a 	bl	800615c <pbuf_clen>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a52:	8a7a      	ldrh	r2, [r7, #18]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d906      	bls.n	8009a66 <tcp_free_acked_segments+0x42>
 8009a58:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <tcp_free_acked_segments+0xe0>)
 8009a5a:	f240 4257 	movw	r2, #1111	; 0x457
 8009a5e:	492a      	ldr	r1, [pc, #168]	; (8009b08 <tcp_free_acked_segments+0xe4>)
 8009a60:	482a      	ldr	r0, [pc, #168]	; (8009b0c <tcp_free_acked_segments+0xe8>)
 8009a62:	f005 ff9f 	bl	800f9a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	891a      	ldrh	r2, [r3, #8]
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <tcp_free_acked_segments+0xec>)
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	4413      	add	r3, r2
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <tcp_free_acked_segments+0xec>)
 8009a86:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009a88:	6978      	ldr	r0, [r7, #20]
 8009a8a:	f7fd ffbe 	bl	8007a0a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00c      	beq.n	8009ab2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d109      	bne.n	8009ab2 <tcp_free_acked_segments+0x8e>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d106      	bne.n	8009ab2 <tcp_free_acked_segments+0x8e>
 8009aa4:	4b17      	ldr	r3, [pc, #92]	; (8009b04 <tcp_free_acked_segments+0xe0>)
 8009aa6:	f240 4261 	movw	r2, #1121	; 0x461
 8009aaa:	491a      	ldr	r1, [pc, #104]	; (8009b14 <tcp_free_acked_segments+0xf0>)
 8009aac:	4817      	ldr	r0, [pc, #92]	; (8009b0c <tcp_free_acked_segments+0xe8>)
 8009aae:	f005 ff79 	bl	800f9a4 <iprintf>
  while (seg_list != NULL &&
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d020      	beq.n	8009afa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa ffc1 	bl	8004a46 <lwip_htonl>
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	891b      	ldrh	r3, [r3, #8]
 8009aca:	461d      	mov	r5, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	899b      	ldrh	r3, [r3, #12]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fa ffa1 	bl	8004a1c <lwip_htons>
 8009ada:	4603      	mov	r3, r0
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <tcp_free_acked_segments+0xc6>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <tcp_free_acked_segments+0xc8>
 8009aea:	2300      	movs	r3, #0
 8009aec:	442b      	add	r3, r5
 8009aee:	18e2      	adds	r2, r4, r3
 8009af0:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <tcp_free_acked_segments+0xf4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd9c      	ble.n	8009a34 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009afa:	68bb      	ldr	r3, [r7, #8]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bdb0      	pop	{r4, r5, r7, pc}
 8009b04:	08012b20 	.word	0x08012b20
 8009b08:	08012f90 	.word	0x08012f90
 8009b0c:	08012b6c 	.word	0x08012b6c
 8009b10:	200089ec 	.word	0x200089ec
 8009b14:	08012fb8 	.word	0x08012fb8
 8009b18:	200089e8 	.word	0x200089e8

08009b1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009b1c:	b5b0      	push	{r4, r5, r7, lr}
 8009b1e:	b094      	sub	sp, #80	; 0x50
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <tcp_receive+0x20>
 8009b2e:	4b91      	ldr	r3, [pc, #580]	; (8009d74 <tcp_receive+0x258>)
 8009b30:	f240 427b 	movw	r2, #1147	; 0x47b
 8009b34:	4990      	ldr	r1, [pc, #576]	; (8009d78 <tcp_receive+0x25c>)
 8009b36:	4891      	ldr	r0, [pc, #580]	; (8009d7c <tcp_receive+0x260>)
 8009b38:	f005 ff34 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7d1b      	ldrb	r3, [r3, #20]
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d806      	bhi.n	8009b52 <tcp_receive+0x36>
 8009b44:	4b8b      	ldr	r3, [pc, #556]	; (8009d74 <tcp_receive+0x258>)
 8009b46:	f240 427c 	movw	r2, #1148	; 0x47c
 8009b4a:	498d      	ldr	r1, [pc, #564]	; (8009d80 <tcp_receive+0x264>)
 8009b4c:	488b      	ldr	r0, [pc, #556]	; (8009d7c <tcp_receive+0x260>)
 8009b4e:	f005 ff29 	bl	800f9a4 <iprintf>

  if (flags & TCP_ACK) {
 8009b52:	4b8c      	ldr	r3, [pc, #560]	; (8009d84 <tcp_receive+0x268>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 8264 	beq.w	800a028 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6c:	4413      	add	r3, r2
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b74:	4b84      	ldr	r3, [pc, #528]	; (8009d88 <tcp_receive+0x26c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db1b      	blt.n	8009bb6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b82:	4b81      	ldr	r3, [pc, #516]	; (8009d88 <tcp_receive+0x26c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d106      	bne.n	8009b98 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b8e:	4b7f      	ldr	r3, [pc, #508]	; (8009d8c <tcp_receive+0x270>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	db0e      	blt.n	8009bb6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b9c:	4b7b      	ldr	r3, [pc, #492]	; (8009d8c <tcp_receive+0x270>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d125      	bne.n	8009bf0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ba4:	4b7a      	ldr	r3, [pc, #488]	; (8009d90 <tcp_receive+0x274>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	89db      	ldrh	r3, [r3, #14]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d91c      	bls.n	8009bf0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009bb6:	4b76      	ldr	r3, [pc, #472]	; (8009d90 <tcp_receive+0x274>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	89db      	ldrh	r3, [r3, #14]
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d205      	bcs.n	8009be0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009be0:	4b69      	ldr	r3, [pc, #420]	; (8009d88 <tcp_receive+0x26c>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009be8:	4b68      	ldr	r3, [pc, #416]	; (8009d8c <tcp_receive+0x270>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009bf0:	4b66      	ldr	r3, [pc, #408]	; (8009d8c <tcp_receive+0x270>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc58      	bgt.n	8009cb0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009bfe:	4b65      	ldr	r3, [pc, #404]	; (8009d94 <tcp_receive+0x278>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d14b      	bne.n	8009c9e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009c10:	4413      	add	r3, r2
 8009c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d142      	bne.n	8009c9e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	db3d      	blt.n	8009c9e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c26:	4b59      	ldr	r3, [pc, #356]	; (8009d8c <tcp_receive+0x270>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d137      	bne.n	8009c9e <tcp_receive+0x182>
              found_dupack = 1;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c38:	2bff      	cmp	r3, #255	; 0xff
 8009c3a:	d007      	beq.n	8009c4c <tcp_receive+0x130>
                ++pcb->dupacks;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c42:	3301      	adds	r3, #1
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d91b      	bls.n	8009c8e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c60:	4413      	add	r3, r2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d30a      	bcc.n	8009c84 <tcp_receive+0x168>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c78:	4413      	add	r3, r2
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c82:	e004      	b.n	8009c8e <tcp_receive+0x172>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d902      	bls.n	8009c9e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f002 fbaf 	bl	800c3fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 8161 	bne.w	8009f68 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cae:	e15b      	b.n	8009f68 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cb0:	4b36      	ldr	r3, [pc, #216]	; (8009d8c <tcp_receive+0x270>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f2c0 814e 	blt.w	8009f5e <tcp_receive+0x442>
 8009cc2:	4b32      	ldr	r3, [pc, #200]	; (8009d8c <tcp_receive+0x270>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f300 8146 	bgt.w	8009f5e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8b5b      	ldrh	r3, [r3, #26]
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d010      	beq.n	8009d00 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	8b5b      	ldrh	r3, [r3, #26]
 8009ce2:	f023 0304 	bic.w	r3, r3, #4
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d0e:	10db      	asrs	r3, r3, #3
 8009d10:	b21b      	sxth	r3, r3
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	b21a      	sxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009d28:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <tcp_receive+0x270>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <tcp_receive+0x270>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7d1b      	ldrb	r3, [r3, #20]
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	f240 8097 	bls.w	8009e80 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d245      	bcs.n	8009dee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	8b5b      	ldrh	r3, [r3, #26]
 8009d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d014      	beq.n	8009d98 <tcp_receive+0x27c>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e013      	b.n	8009d9a <tcp_receive+0x27e>
 8009d72:	bf00      	nop
 8009d74:	08012b20 	.word	0x08012b20
 8009d78:	08012fd8 	.word	0x08012fd8
 8009d7c:	08012b6c 	.word	0x08012b6c
 8009d80:	08012ff4 	.word	0x08012ff4
 8009d84:	200089f0 	.word	0x200089f0
 8009d88:	200089e4 	.word	0x200089e4
 8009d8c:	200089e8 	.word	0x200089e8
 8009d90:	200089d4 	.word	0x200089d4
 8009d94:	200089ee 	.word	0x200089ee
 8009d98:	2302      	movs	r3, #2
 8009d9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009d9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009da8:	fb12 f303 	smulbb	r3, r2, r3
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009db0:	4293      	cmp	r3, r2
 8009db2:	bf28      	it	cs
 8009db4:	4613      	movcs	r3, r2
 8009db6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009dc0:	4413      	add	r3, r2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d309      	bcc.n	8009de2 <tcp_receive+0x2c6>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009dd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009dd6:	4413      	add	r3, r2
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009de0:	e04e      	b.n	8009e80 <tcp_receive+0x364>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009de8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009dec:	e048      	b.n	8009e80 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009df6:	4413      	add	r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d309      	bcc.n	8009e18 <tcp_receive+0x2fc>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e0c:	4413      	add	r3, r2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009e16:	e004      	b.n	8009e22 <tcp_receive+0x306>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d326      	bcc.n	8009e80 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e52:	4413      	add	r3, r2
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d30a      	bcc.n	8009e76 <tcp_receive+0x35a>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e6a:	4413      	add	r3, r2
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e74:	e004      	b.n	8009e80 <tcp_receive+0x364>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e88:	4a98      	ldr	r2, [pc, #608]	; (800a0ec <tcp_receive+0x5d0>)
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fdca 	bl	8009a24 <tcp_free_acked_segments>
 8009e90:	4602      	mov	r2, r0
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9e:	4a94      	ldr	r2, [pc, #592]	; (800a0f0 <tcp_receive+0x5d4>)
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fdbf 	bl	8009a24 <tcp_free_acked_segments>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009eba:	861a      	strh	r2, [r3, #48]	; 0x30
 8009ebc:	e002      	b.n	8009ec4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009ee0:	4b84      	ldr	r3, [pc, #528]	; (800a0f4 <tcp_receive+0x5d8>)
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	8b5b      	ldrh	r3, [r3, #26]
 8009ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d035      	beq.n	8009f66 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d118      	bne.n	8009f34 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00c      	beq.n	8009f24 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fa fd95 	bl	8004a46 <lwip_htonl>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dc20      	bgt.n	8009f66 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	8b5b      	ldrh	r3, [r3, #26]
 8009f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f32:	e018      	b.n	8009f66 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fa fd80 	bl	8004a46 <lwip_htonl>
 8009f46:	4603      	mov	r3, r0
 8009f48:	1ae3      	subs	r3, r4, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dc0b      	bgt.n	8009f66 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	8b5b      	ldrh	r3, [r3, #26]
 8009f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f5c:	e003      	b.n	8009f66 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f002 fc3e 	bl	800c7e0 <tcp_send_empty_ack>
 8009f64:	e000      	b.n	8009f68 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f66:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05b      	beq.n	800a028 <tcp_receive+0x50c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f74:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <tcp_receive+0x5dc>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	da54      	bge.n	800a028 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009f7e:	4b5f      	ldr	r3, [pc, #380]	; (800a0fc <tcp_receive+0x5e0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009f92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009f9c:	10db      	asrs	r3, r3, #3
 8009f9e:	b21b      	sxth	r3, r3
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fb6:	4413      	add	r3, r2
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	b21a      	sxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009fc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da05      	bge.n	8009fd4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fcc:	425b      	negs	r3, r3
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009fd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009fde:	109b      	asrs	r3, r3, #2
 8009fe0:	b21b      	sxth	r3, r3
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ff8:	4413      	add	r3, r2
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a008:	10db      	asrs	r3, r3, #3
 800a00a:	b21b      	sxth	r3, r3
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a014:	b29b      	uxth	r3, r3
 800a016:	4413      	add	r3, r2
 800a018:	b29b      	uxth	r3, r3
 800a01a:	b21a      	sxth	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a028:	4b35      	ldr	r3, [pc, #212]	; (800a100 <tcp_receive+0x5e4>)
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 84e2 	beq.w	800a9f6 <tcp_receive+0xeda>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	2b06      	cmp	r3, #6
 800a038:	f200 84dd 	bhi.w	800a9f6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a040:	4b30      	ldr	r3, [pc, #192]	; (800a104 <tcp_receive+0x5e8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f2c0 808f 	blt.w	800a16c <tcp_receive+0x650>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a052:	4b2b      	ldr	r3, [pc, #172]	; (800a100 <tcp_receive+0x5e4>)
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	4b2a      	ldr	r3, [pc, #168]	; (800a104 <tcp_receive+0x5e8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	440b      	add	r3, r1
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	3301      	adds	r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	f300 8082 	bgt.w	800a16c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a068:	4b27      	ldr	r3, [pc, #156]	; (800a108 <tcp_receive+0x5ec>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a072:	4b24      	ldr	r3, [pc, #144]	; (800a104 <tcp_receive+0x5e8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a07a:	4b23      	ldr	r3, [pc, #140]	; (800a108 <tcp_receive+0x5ec>)
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <tcp_receive+0x574>
 800a082:	4b22      	ldr	r3, [pc, #136]	; (800a10c <tcp_receive+0x5f0>)
 800a084:	f240 5294 	movw	r2, #1428	; 0x594
 800a088:	4921      	ldr	r1, [pc, #132]	; (800a110 <tcp_receive+0x5f4>)
 800a08a:	4822      	ldr	r0, [pc, #136]	; (800a114 <tcp_receive+0x5f8>)
 800a08c:	f005 fc8a 	bl	800f9a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a096:	4293      	cmp	r3, r2
 800a098:	d906      	bls.n	800a0a8 <tcp_receive+0x58c>
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <tcp_receive+0x5f0>)
 800a09c:	f240 5295 	movw	r2, #1429	; 0x595
 800a0a0:	491d      	ldr	r1, [pc, #116]	; (800a118 <tcp_receive+0x5fc>)
 800a0a2:	481c      	ldr	r0, [pc, #112]	; (800a114 <tcp_receive+0x5f8>)
 800a0a4:	f005 fc7e 	bl	800f9a4 <iprintf>
      off = (u16_t)off32;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a0ae:	4b16      	ldr	r3, [pc, #88]	; (800a108 <tcp_receive+0x5ec>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	891b      	ldrh	r3, [r3, #8]
 800a0b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d906      	bls.n	800a0ca <tcp_receive+0x5ae>
 800a0bc:	4b13      	ldr	r3, [pc, #76]	; (800a10c <tcp_receive+0x5f0>)
 800a0be:	f240 5297 	movw	r2, #1431	; 0x597
 800a0c2:	4916      	ldr	r1, [pc, #88]	; (800a11c <tcp_receive+0x600>)
 800a0c4:	4813      	ldr	r0, [pc, #76]	; (800a114 <tcp_receive+0x5f8>)
 800a0c6:	f005 fc6d 	bl	800f9a4 <iprintf>
      inseg.len -= off;
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <tcp_receive+0x5ec>)
 800a0cc:	891a      	ldrh	r2, [r3, #8]
 800a0ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <tcp_receive+0x5ec>)
 800a0d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a0da:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <tcp_receive+0x5ec>)
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	891a      	ldrh	r2, [r3, #8]
 800a0e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a0e8:	e02a      	b.n	800a140 <tcp_receive+0x624>
 800a0ea:	bf00      	nop
 800a0ec:	08013010 	.word	0x08013010
 800a0f0:	08013018 	.word	0x08013018
 800a0f4:	200089ec 	.word	0x200089ec
 800a0f8:	200089e8 	.word	0x200089e8
 800a0fc:	200089a8 	.word	0x200089a8
 800a100:	200089ee 	.word	0x200089ee
 800a104:	200089e4 	.word	0x200089e4
 800a108:	200089c0 	.word	0x200089c0
 800a10c:	08012b20 	.word	0x08012b20
 800a110:	08013020 	.word	0x08013020
 800a114:	08012b6c 	.word	0x08012b6c
 800a118:	08013030 	.word	0x08013030
 800a11c:	08013040 	.word	0x08013040
        off -= p->len;
 800a120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a122:	895b      	ldrh	r3, [r3, #10]
 800a124:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a130:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a132:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a136:	2200      	movs	r2, #0
 800a138:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a142:	895b      	ldrh	r3, [r3, #10]
 800a144:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a148:	429a      	cmp	r2, r3
 800a14a:	d8e9      	bhi.n	800a120 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a14c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a150:	4619      	mov	r1, r3
 800a152:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a154:	f7fb fef4 	bl	8005f40 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	4a91      	ldr	r2, [pc, #580]	; (800a3a4 <tcp_receive+0x888>)
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	4b91      	ldr	r3, [pc, #580]	; (800a3a8 <tcp_receive+0x88c>)
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	4a8f      	ldr	r2, [pc, #572]	; (800a3a4 <tcp_receive+0x888>)
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a16a:	e00d      	b.n	800a188 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a16c:	4b8d      	ldr	r3, [pc, #564]	; (800a3a4 <tcp_receive+0x888>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	da06      	bge.n	800a188 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	8b5b      	ldrh	r3, [r3, #26]
 800a17e:	f043 0302 	orr.w	r3, r3, #2
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a188:	4b86      	ldr	r3, [pc, #536]	; (800a3a4 <tcp_receive+0x888>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	f2c0 842a 	blt.w	800a9ec <tcp_receive+0xed0>
 800a198:	4b82      	ldr	r3, [pc, #520]	; (800a3a4 <tcp_receive+0x888>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1a4:	440b      	add	r3, r1
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f300 841e 	bgt.w	800a9ec <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1b4:	4b7b      	ldr	r3, [pc, #492]	; (800a3a4 <tcp_receive+0x888>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f040 829a 	bne.w	800a6f2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a1be:	4b7a      	ldr	r3, [pc, #488]	; (800a3a8 <tcp_receive+0x88c>)
 800a1c0:	891c      	ldrh	r4, [r3, #8]
 800a1c2:	4b79      	ldr	r3, [pc, #484]	; (800a3a8 <tcp_receive+0x88c>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	899b      	ldrh	r3, [r3, #12]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fa fc26 	bl	8004a1c <lwip_htons>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <tcp_receive+0x6c4>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <tcp_receive+0x6c6>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4423      	add	r3, r4
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	4b71      	ldr	r3, [pc, #452]	; (800a3ac <tcp_receive+0x890>)
 800a1e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1ee:	4b6f      	ldr	r3, [pc, #444]	; (800a3ac <tcp_receive+0x890>)
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d275      	bcs.n	800a2e2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1f6:	4b6c      	ldr	r3, [pc, #432]	; (800a3a8 <tcp_receive+0x88c>)
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	899b      	ldrh	r3, [r3, #12]
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fa fc0c 	bl	8004a1c <lwip_htons>
 800a204:	4603      	mov	r3, r0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01f      	beq.n	800a250 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a210:	4b65      	ldr	r3, [pc, #404]	; (800a3a8 <tcp_receive+0x88c>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	899b      	ldrh	r3, [r3, #12]
 800a216:	b29b      	uxth	r3, r3
 800a218:	b21b      	sxth	r3, r3
 800a21a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a21e:	b21c      	sxth	r4, r3
 800a220:	4b61      	ldr	r3, [pc, #388]	; (800a3a8 <tcp_receive+0x88c>)
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	899b      	ldrh	r3, [r3, #12]
 800a226:	b29b      	uxth	r3, r3
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fa fbf7 	bl	8004a1c <lwip_htons>
 800a22e:	4603      	mov	r3, r0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	b29b      	uxth	r3, r3
 800a234:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a238:	b29b      	uxth	r3, r3
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fa fbee 	bl	8004a1c <lwip_htons>
 800a240:	4603      	mov	r3, r0
 800a242:	b21b      	sxth	r3, r3
 800a244:	4323      	orrs	r3, r4
 800a246:	b21a      	sxth	r2, r3
 800a248:	4b57      	ldr	r3, [pc, #348]	; (800a3a8 <tcp_receive+0x88c>)
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	b292      	uxth	r2, r2
 800a24e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a254:	4b54      	ldr	r3, [pc, #336]	; (800a3a8 <tcp_receive+0x88c>)
 800a256:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a258:	4b53      	ldr	r3, [pc, #332]	; (800a3a8 <tcp_receive+0x88c>)
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	899b      	ldrh	r3, [r3, #12]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	f7fa fbdb 	bl	8004a1c <lwip_htons>
 800a266:	4603      	mov	r3, r0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <tcp_receive+0x762>
            inseg.len -= 1;
 800a272:	4b4d      	ldr	r3, [pc, #308]	; (800a3a8 <tcp_receive+0x88c>)
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	4b4b      	ldr	r3, [pc, #300]	; (800a3a8 <tcp_receive+0x88c>)
 800a27c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a27e:	4b4a      	ldr	r3, [pc, #296]	; (800a3a8 <tcp_receive+0x88c>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	4a49      	ldr	r2, [pc, #292]	; (800a3a8 <tcp_receive+0x88c>)
 800a284:	8912      	ldrh	r2, [r2, #8]
 800a286:	4611      	mov	r1, r2
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fb fd59 	bl	8005d40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a28e:	4b46      	ldr	r3, [pc, #280]	; (800a3a8 <tcp_receive+0x88c>)
 800a290:	891c      	ldrh	r4, [r3, #8]
 800a292:	4b45      	ldr	r3, [pc, #276]	; (800a3a8 <tcp_receive+0x88c>)
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	899b      	ldrh	r3, [r3, #12]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fa fbbe 	bl	8004a1c <lwip_htons>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f003 0303 	and.w	r3, r3, #3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <tcp_receive+0x794>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <tcp_receive+0x796>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4423      	add	r3, r4
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	4b3d      	ldr	r3, [pc, #244]	; (800a3ac <tcp_receive+0x890>)
 800a2b8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a2ba:	4b3c      	ldr	r3, [pc, #240]	; (800a3ac <tcp_receive+0x890>)
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4b38      	ldr	r3, [pc, #224]	; (800a3a4 <tcp_receive+0x888>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	441a      	add	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2ce:	440b      	add	r3, r1
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d006      	beq.n	800a2e2 <tcp_receive+0x7c6>
 800a2d4:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <tcp_receive+0x894>)
 800a2d6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a2da:	4936      	ldr	r1, [pc, #216]	; (800a3b4 <tcp_receive+0x898>)
 800a2dc:	4836      	ldr	r0, [pc, #216]	; (800a3b8 <tcp_receive+0x89c>)
 800a2de:	f005 fb61 	bl	800f9a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80e7 	beq.w	800a4ba <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a2ec:	4b2e      	ldr	r3, [pc, #184]	; (800a3a8 <tcp_receive+0x88c>)
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	899b      	ldrh	r3, [r3, #12]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fa fb91 	bl	8004a1c <lwip_htons>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d010      	beq.n	800a328 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a306:	e00a      	b.n	800a31e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a30c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f7fd fb76 	bl	8007a0a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f0      	bne.n	800a308 <tcp_receive+0x7ec>
 800a326:	e0c8      	b.n	800a4ba <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a32e:	e052      	b.n	800a3d6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	899b      	ldrh	r3, [r3, #12]
 800a336:	b29b      	uxth	r3, r3
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fa fb6f 	bl	8004a1c <lwip_htons>
 800a33e:	4603      	mov	r3, r0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d03d      	beq.n	800a3c6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a34a:	4b17      	ldr	r3, [pc, #92]	; (800a3a8 <tcp_receive+0x88c>)
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	899b      	ldrh	r3, [r3, #12]
 800a350:	b29b      	uxth	r3, r3
 800a352:	4618      	mov	r0, r3
 800a354:	f7fa fb62 	bl	8004a1c <lwip_htons>
 800a358:	4603      	mov	r3, r0
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a360:	2b00      	cmp	r3, #0
 800a362:	d130      	bne.n	800a3c6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a364:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <tcp_receive+0x88c>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	899b      	ldrh	r3, [r3, #12]
 800a36a:	b29c      	uxth	r4, r3
 800a36c:	2001      	movs	r0, #1
 800a36e:	f7fa fb55 	bl	8004a1c <lwip_htons>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <tcp_receive+0x88c>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	4322      	orrs	r2, r4
 800a37c:	b292      	uxth	r2, r2
 800a37e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <tcp_receive+0x88c>)
 800a382:	891c      	ldrh	r4, [r3, #8]
 800a384:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <tcp_receive+0x88c>)
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	899b      	ldrh	r3, [r3, #12]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fa fb45 	bl	8004a1c <lwip_htons>
 800a392:	4603      	mov	r3, r0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <tcp_receive+0x8a0>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e00d      	b.n	800a3be <tcp_receive+0x8a2>
 800a3a2:	bf00      	nop
 800a3a4:	200089e4 	.word	0x200089e4
 800a3a8:	200089c0 	.word	0x200089c0
 800a3ac:	200089ee 	.word	0x200089ee
 800a3b0:	08012b20 	.word	0x08012b20
 800a3b4:	08013050 	.word	0x08013050
 800a3b8:	08012b6c 	.word	0x08012b6c
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4423      	add	r3, r4
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	4b98      	ldr	r3, [pc, #608]	; (800a624 <tcp_receive+0xb08>)
 800a3c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a3d0:	6938      	ldr	r0, [r7, #16]
 800a3d2:	f7fd fb1a 	bl	8007a0a <tcp_seg_free>
            while (next &&
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00e      	beq.n	800a3fa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a3dc:	4b91      	ldr	r3, [pc, #580]	; (800a624 <tcp_receive+0xb08>)
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4b91      	ldr	r3, [pc, #580]	; (800a628 <tcp_receive+0xb0c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	441a      	add	r2, r3
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3f0:	8909      	ldrh	r1, [r1, #8]
 800a3f2:	440b      	add	r3, r1
 800a3f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da9a      	bge.n	800a330 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d059      	beq.n	800a4b4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a400:	4b88      	ldr	r3, [pc, #544]	; (800a624 <tcp_receive+0xb08>)
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	4b88      	ldr	r3, [pc, #544]	; (800a628 <tcp_receive+0xb0c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	441a      	add	r2, r3
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a414:	2b00      	cmp	r3, #0
 800a416:	dd4d      	ble.n	800a4b4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	b29a      	uxth	r2, r3
 800a420:	4b81      	ldr	r3, [pc, #516]	; (800a628 <tcp_receive+0xb0c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	b29a      	uxth	r2, r3
 800a42a:	4b80      	ldr	r3, [pc, #512]	; (800a62c <tcp_receive+0xb10>)
 800a42c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a42e:	4b7f      	ldr	r3, [pc, #508]	; (800a62c <tcp_receive+0xb10>)
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	899b      	ldrh	r3, [r3, #12]
 800a434:	b29b      	uxth	r3, r3
 800a436:	4618      	mov	r0, r3
 800a438:	f7fa faf0 	bl	8004a1c <lwip_htons>
 800a43c:	4603      	mov	r3, r0
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <tcp_receive+0x938>
                inseg.len -= 1;
 800a448:	4b78      	ldr	r3, [pc, #480]	; (800a62c <tcp_receive+0xb10>)
 800a44a:	891b      	ldrh	r3, [r3, #8]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	b29a      	uxth	r2, r3
 800a450:	4b76      	ldr	r3, [pc, #472]	; (800a62c <tcp_receive+0xb10>)
 800a452:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a454:	4b75      	ldr	r3, [pc, #468]	; (800a62c <tcp_receive+0xb10>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4a74      	ldr	r2, [pc, #464]	; (800a62c <tcp_receive+0xb10>)
 800a45a:	8912      	ldrh	r2, [r2, #8]
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fb fc6e 	bl	8005d40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a464:	4b71      	ldr	r3, [pc, #452]	; (800a62c <tcp_receive+0xb10>)
 800a466:	891c      	ldrh	r4, [r3, #8]
 800a468:	4b70      	ldr	r3, [pc, #448]	; (800a62c <tcp_receive+0xb10>)
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	899b      	ldrh	r3, [r3, #12]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4618      	mov	r0, r3
 800a472:	f7fa fad3 	bl	8004a1c <lwip_htons>
 800a476:	4603      	mov	r3, r0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <tcp_receive+0x96a>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <tcp_receive+0x96c>
 800a486:	2300      	movs	r3, #0
 800a488:	4423      	add	r3, r4
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	4b65      	ldr	r3, [pc, #404]	; (800a624 <tcp_receive+0xb08>)
 800a48e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a490:	4b64      	ldr	r3, [pc, #400]	; (800a624 <tcp_receive+0xb08>)
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	4b64      	ldr	r3, [pc, #400]	; (800a628 <tcp_receive+0xb0c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	441a      	add	r2, r3
 800a49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d006      	beq.n	800a4b4 <tcp_receive+0x998>
 800a4a6:	4b62      	ldr	r3, [pc, #392]	; (800a630 <tcp_receive+0xb14>)
 800a4a8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a4ac:	4961      	ldr	r1, [pc, #388]	; (800a634 <tcp_receive+0xb18>)
 800a4ae:	4862      	ldr	r0, [pc, #392]	; (800a638 <tcp_receive+0xb1c>)
 800a4b0:	f005 fa78 	bl	800f9a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4b8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a4ba:	4b5a      	ldr	r3, [pc, #360]	; (800a624 <tcp_receive+0xb08>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4b59      	ldr	r3, [pc, #356]	; (800a628 <tcp_receive+0xb0c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4ce:	4b55      	ldr	r3, [pc, #340]	; (800a624 <tcp_receive+0xb08>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d206      	bcs.n	800a4e4 <tcp_receive+0x9c8>
 800a4d6:	4b56      	ldr	r3, [pc, #344]	; (800a630 <tcp_receive+0xb14>)
 800a4d8:	f240 6207 	movw	r2, #1543	; 0x607
 800a4dc:	4957      	ldr	r1, [pc, #348]	; (800a63c <tcp_receive+0xb20>)
 800a4de:	4856      	ldr	r0, [pc, #344]	; (800a638 <tcp_receive+0xb1c>)
 800a4e0:	f005 fa60 	bl	800f9a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4e8:	4b4e      	ldr	r3, [pc, #312]	; (800a624 <tcp_receive+0xb08>)
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7fc fbd9 	bl	8006cac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a4fa:	4b4c      	ldr	r3, [pc, #304]	; (800a62c <tcp_receive+0xb10>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	891b      	ldrh	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d006      	beq.n	800a512 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a504:	4b49      	ldr	r3, [pc, #292]	; (800a62c <tcp_receive+0xb10>)
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	4a4d      	ldr	r2, [pc, #308]	; (800a640 <tcp_receive+0xb24>)
 800a50a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a50c:	4b47      	ldr	r3, [pc, #284]	; (800a62c <tcp_receive+0xb10>)
 800a50e:	2200      	movs	r2, #0
 800a510:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a512:	4b46      	ldr	r3, [pc, #280]	; (800a62c <tcp_receive+0xb10>)
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	899b      	ldrh	r3, [r3, #12]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fa fa7e 	bl	8004a1c <lwip_htons>
 800a520:	4603      	mov	r3, r0
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80b8 	beq.w	800a69e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a52e:	4b45      	ldr	r3, [pc, #276]	; (800a644 <tcp_receive+0xb28>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f043 0320 	orr.w	r3, r3, #32
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b42      	ldr	r3, [pc, #264]	; (800a644 <tcp_receive+0xb28>)
 800a53a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a53c:	e0af      	b.n	800a69e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a542:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	4a36      	ldr	r2, [pc, #216]	; (800a628 <tcp_receive+0xb0c>)
 800a54e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	891b      	ldrh	r3, [r3, #8]
 800a554:	461c      	mov	r4, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fa fa5c 	bl	8004a1c <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <tcp_receive+0xa58>
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <tcp_receive+0xa5a>
 800a574:	2300      	movs	r3, #0
 800a576:	191a      	adds	r2, r3, r4
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	441a      	add	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a586:	461c      	mov	r4, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	891b      	ldrh	r3, [r3, #8]
 800a58c:	461d      	mov	r5, r3
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	899b      	ldrh	r3, [r3, #12]
 800a594:	b29b      	uxth	r3, r3
 800a596:	4618      	mov	r0, r3
 800a598:	f7fa fa40 	bl	8004a1c <lwip_htons>
 800a59c:	4603      	mov	r3, r0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0303 	and.w	r3, r3, #3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <tcp_receive+0xa90>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e000      	b.n	800a5ae <tcp_receive+0xa92>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	442b      	add	r3, r5
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	d206      	bcs.n	800a5c2 <tcp_receive+0xaa6>
 800a5b4:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <tcp_receive+0xb14>)
 800a5b6:	f240 622b 	movw	r2, #1579	; 0x62b
 800a5ba:	4923      	ldr	r1, [pc, #140]	; (800a648 <tcp_receive+0xb2c>)
 800a5bc:	481e      	ldr	r0, [pc, #120]	; (800a638 <tcp_receive+0xb1c>)
 800a5be:	f005 f9f1 	bl	800f9a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	891b      	ldrh	r3, [r3, #8]
 800a5c6:	461c      	mov	r4, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	899b      	ldrh	r3, [r3, #12]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fa fa23 	bl	8004a1c <lwip_htons>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <tcp_receive+0xaca>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <tcp_receive+0xacc>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	1919      	adds	r1, r3, r4
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5ee:	b28b      	uxth	r3, r1
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7fc fb57 	bl	8006cac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	891b      	ldrh	r3, [r3, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d028      	beq.n	800a65a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a608:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <tcp_receive+0xb24>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01d      	beq.n	800a64c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <tcp_receive+0xb24>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fb fdd8 	bl	80061d0 <pbuf_cat>
 800a620:	e018      	b.n	800a654 <tcp_receive+0xb38>
 800a622:	bf00      	nop
 800a624:	200089ee 	.word	0x200089ee
 800a628:	200089e4 	.word	0x200089e4
 800a62c:	200089c0 	.word	0x200089c0
 800a630:	08012b20 	.word	0x08012b20
 800a634:	08013088 	.word	0x08013088
 800a638:	08012b6c 	.word	0x08012b6c
 800a63c:	080130c4 	.word	0x080130c4
 800a640:	200089f4 	.word	0x200089f4
 800a644:	200089f1 	.word	0x200089f1
 800a648:	080130e4 	.word	0x080130e4
            } else {
              recv_data = cseg->p;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	4a70      	ldr	r2, [pc, #448]	; (800a814 <tcp_receive+0xcf8>)
 800a652:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2200      	movs	r2, #0
 800a658:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	899b      	ldrh	r3, [r3, #12]
 800a660:	b29b      	uxth	r3, r3
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa f9da 	bl	8004a1c <lwip_htons>
 800a668:	4603      	mov	r3, r0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00d      	beq.n	800a690 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a674:	4b68      	ldr	r3, [pc, #416]	; (800a818 <tcp_receive+0xcfc>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	f043 0320 	orr.w	r3, r3, #32
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	4b66      	ldr	r3, [pc, #408]	; (800a818 <tcp_receive+0xcfc>)
 800a680:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7d1b      	ldrb	r3, [r3, #20]
 800a686:	2b04      	cmp	r3, #4
 800a688:	d102      	bne.n	800a690 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2207      	movs	r2, #7
 800a68e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a698:	68b8      	ldr	r0, [r7, #8]
 800a69a:	f7fd f9b6 	bl	8007a0a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d008      	beq.n	800a6b8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	f43f af43 	beq.w	800a53e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8b5b      	ldrh	r3, [r3, #26]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00e      	beq.n	800a6e2 <tcp_receive+0xbc6>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	8b5b      	ldrh	r3, [r3, #26]
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	835a      	strh	r2, [r3, #26]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	8b5b      	ldrh	r3, [r3, #26]
 800a6d6:	f043 0302 	orr.w	r3, r3, #2
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a6e0:	e188      	b.n	800a9f4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8b5b      	ldrh	r3, [r3, #26]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a6f0:	e180      	b.n	800a9f4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a6fa:	4848      	ldr	r0, [pc, #288]	; (800a81c <tcp_receive+0xd00>)
 800a6fc:	f7fd f9a0 	bl	8007a40 <tcp_seg_copy>
 800a700:	4602      	mov	r2, r0
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	675a      	str	r2, [r3, #116]	; 0x74
 800a706:	e16d      	b.n	800a9e4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a710:	63bb      	str	r3, [r7, #56]	; 0x38
 800a712:	e157      	b.n	800a9c4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	4b41      	ldr	r3, [pc, #260]	; (800a820 <tcp_receive+0xd04>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d11d      	bne.n	800a75e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a722:	4b3e      	ldr	r3, [pc, #248]	; (800a81c <tcp_receive+0xd00>)
 800a724:	891a      	ldrh	r2, [r3, #8]
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	891b      	ldrh	r3, [r3, #8]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	f240 814f 	bls.w	800a9ce <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a730:	483a      	ldr	r0, [pc, #232]	; (800a81c <tcp_receive+0xd00>)
 800a732:	f7fd f985 	bl	8007a40 <tcp_seg_copy>
 800a736:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8149 	beq.w	800a9d2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <tcp_receive+0xc32>
                    prev->next = cseg;
 800a746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	e002      	b.n	800a754 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a756:	6978      	ldr	r0, [r7, #20]
 800a758:	f7ff f8dc 	bl	8009914 <tcp_oos_insert_segment>
                }
                break;
 800a75c:	e139      	b.n	800a9d2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	2b00      	cmp	r3, #0
 800a762:	d117      	bne.n	800a794 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a764:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <tcp_receive+0xd04>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	da57      	bge.n	800a824 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a774:	4829      	ldr	r0, [pc, #164]	; (800a81c <tcp_receive+0xd00>)
 800a776:	f7fd f963 	bl	8007a40 <tcp_seg_copy>
 800a77a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 8129 	beq.w	800a9d6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a78a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a78c:	69b8      	ldr	r0, [r7, #24]
 800a78e:	f7ff f8c1 	bl	8009914 <tcp_oos_insert_segment>
                  }
                  break;
 800a792:	e120      	b.n	800a9d6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a794:	4b22      	ldr	r3, [pc, #136]	; (800a820 <tcp_receive+0xd04>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	db3e      	blt.n	800a824 <tcp_receive+0xd08>
 800a7a6:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <tcp_receive+0xd04>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dc35      	bgt.n	800a824 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7b8:	4818      	ldr	r0, [pc, #96]	; (800a81c <tcp_receive+0xd00>)
 800a7ba:	f7fd f941 	bl	8007a40 <tcp_seg_copy>
 800a7be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 8109 	beq.w	800a9da <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d0:	8912      	ldrh	r2, [r2, #8]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	4b12      	ldr	r3, [pc, #72]	; (800a820 <tcp_receive+0xd04>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd12      	ble.n	800a804 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a7de:	4b10      	ldr	r3, [pc, #64]	; (800a820 <tcp_receive+0xd04>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fa:	891b      	ldrh	r3, [r3, #8]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fb fa9e 	bl	8005d40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a806:	69fa      	ldr	r2, [r7, #28]
 800a808:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a80a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a80c:	69f8      	ldr	r0, [r7, #28]
 800a80e:	f7ff f881 	bl	8009914 <tcp_oos_insert_segment>
                  }
                  break;
 800a812:	e0e2      	b.n	800a9da <tcp_receive+0xebe>
 800a814:	200089f4 	.word	0x200089f4
 800a818:	200089f1 	.word	0x200089f1
 800a81c:	200089c0 	.word	0x200089c0
 800a820:	200089e4 	.word	0x200089e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 80c6 	bne.w	800a9be <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a832:	4b80      	ldr	r3, [pc, #512]	; (800aa34 <tcp_receive+0xf18>)
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f340 80bd 	ble.w	800a9be <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	899b      	ldrh	r3, [r3, #12]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fa f8e5 	bl	8004a1c <lwip_htons>
 800a852:	4603      	mov	r3, r0
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f040 80bf 	bne.w	800a9de <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a860:	4875      	ldr	r0, [pc, #468]	; (800aa38 <tcp_receive+0xf1c>)
 800a862:	f7fd f8ed 	bl	8007a40 <tcp_seg_copy>
 800a866:	4602      	mov	r2, r0
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80b6 	beq.w	800a9e2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a87e:	8912      	ldrh	r2, [r2, #8]
 800a880:	441a      	add	r2, r3
 800a882:	4b6c      	ldr	r3, [pc, #432]	; (800aa34 <tcp_receive+0xf18>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dd12      	ble.n	800a8b2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a88c:	4b69      	ldr	r3, [pc, #420]	; (800aa34 <tcp_receive+0xf18>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	b29a      	uxth	r2, r3
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	b29b      	uxth	r3, r3
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	891b      	ldrh	r3, [r3, #8]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7fb fa47 	bl	8005d40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a8b2:	4b62      	ldr	r3, [pc, #392]	; (800aa3c <tcp_receive+0xf20>)
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <tcp_receive+0xf18>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	441a      	add	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8c6:	440b      	add	r3, r1
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f340 8089 	ble.w	800a9e2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	899b      	ldrh	r3, [r3, #12]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fa f89e 	bl	8004a1c <lwip_htons>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d022      	beq.n	800a932 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	b21b      	sxth	r3, r3
 800a8f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a8fc:	b21c      	sxth	r4, r3
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	b29b      	uxth	r3, r3
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fa f887 	bl	8004a1c <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fa f87e 	bl	8004a1c <lwip_htons>
 800a920:	4603      	mov	r3, r0
 800a922:	b21b      	sxth	r3, r3
 800a924:	4323      	orrs	r3, r4
 800a926:	b21a      	sxth	r2, r3
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	b292      	uxth	r2, r2
 800a930:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93c:	4413      	add	r3, r2
 800a93e:	b299      	uxth	r1, r3
 800a940:	4b3c      	ldr	r3, [pc, #240]	; (800aa34 <tcp_receive+0xf18>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	b29a      	uxth	r2, r3
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	1a8a      	subs	r2, r1, r2
 800a94c:	b292      	uxth	r2, r2
 800a94e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	891b      	ldrh	r3, [r3, #8]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7fb f9ee 	bl	8005d40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	891c      	ldrh	r4, [r3, #8]
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	899b      	ldrh	r3, [r3, #12]
 800a972:	b29b      	uxth	r3, r3
 800a974:	4618      	mov	r0, r3
 800a976:	f7fa f851 	bl	8004a1c <lwip_htons>
 800a97a:	4603      	mov	r3, r0
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <tcp_receive+0xe6e>
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <tcp_receive+0xe70>
 800a98a:	2300      	movs	r3, #0
 800a98c:	4423      	add	r3, r4
 800a98e:	b29a      	uxth	r2, r3
 800a990:	4b2a      	ldr	r3, [pc, #168]	; (800aa3c <tcp_receive+0xf20>)
 800a992:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a994:	4b29      	ldr	r3, [pc, #164]	; (800aa3c <tcp_receive+0xf20>)
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <tcp_receive+0xf18>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	441a      	add	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9a8:	440b      	add	r3, r1
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d019      	beq.n	800a9e2 <tcp_receive+0xec6>
 800a9ae:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <tcp_receive+0xf24>)
 800a9b0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a9b4:	4923      	ldr	r1, [pc, #140]	; (800aa44 <tcp_receive+0xf28>)
 800a9b6:	4824      	ldr	r0, [pc, #144]	; (800aa48 <tcp_receive+0xf2c>)
 800a9b8:	f004 fff4 	bl	800f9a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a9bc:	e011      	b.n	800a9e2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f47f aea4 	bne.w	800a714 <tcp_receive+0xbf8>
 800a9cc:	e00a      	b.n	800a9e4 <tcp_receive+0xec8>
                break;
 800a9ce:	bf00      	nop
 800a9d0:	e008      	b.n	800a9e4 <tcp_receive+0xec8>
                break;
 800a9d2:	bf00      	nop
 800a9d4:	e006      	b.n	800a9e4 <tcp_receive+0xec8>
                  break;
 800a9d6:	bf00      	nop
 800a9d8:	e004      	b.n	800a9e4 <tcp_receive+0xec8>
                  break;
 800a9da:	bf00      	nop
 800a9dc:	e002      	b.n	800a9e4 <tcp_receive+0xec8>
                  break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <tcp_receive+0xec8>
                break;
 800a9e2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 fefb 	bl	800c7e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a9ea:	e003      	b.n	800a9f4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fef7 	bl	800c7e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9f2:	e01a      	b.n	800aa2a <tcp_receive+0xf0e>
 800a9f4:	e019      	b.n	800aa2a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <tcp_receive+0xf18>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	db0a      	blt.n	800aa1a <tcp_receive+0xefe>
 800aa04:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <tcp_receive+0xf18>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa10:	440b      	add	r3, r1
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	3301      	adds	r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	dd07      	ble.n	800aa2a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	8b5b      	ldrh	r3, [r3, #26]
 800aa1e:	f043 0302 	orr.w	r3, r3, #2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aa28:	e7ff      	b.n	800aa2a <tcp_receive+0xf0e>
 800aa2a:	bf00      	nop
 800aa2c:	3750      	adds	r7, #80	; 0x50
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bdb0      	pop	{r4, r5, r7, pc}
 800aa32:	bf00      	nop
 800aa34:	200089e4 	.word	0x200089e4
 800aa38:	200089c0 	.word	0x200089c0
 800aa3c:	200089ee 	.word	0x200089ee
 800aa40:	08012b20 	.word	0x08012b20
 800aa44:	08013050 	.word	0x08013050
 800aa48:	08012b6c 	.word	0x08012b6c

0800aa4c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <tcp_get_next_optbyte+0x5c>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	b291      	uxth	r1, r2
 800aa5a:	4a13      	ldr	r2, [pc, #76]	; (800aaa8 <tcp_get_next_optbyte+0x5c>)
 800aa5c:	8011      	strh	r1, [r2, #0]
 800aa5e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <tcp_get_next_optbyte+0x60>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <tcp_get_next_optbyte+0x26>
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <tcp_get_next_optbyte+0x64>)
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	88fa      	ldrh	r2, [r7, #6]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d208      	bcs.n	800aa84 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800aa72:	4b10      	ldr	r3, [pc, #64]	; (800aab4 <tcp_get_next_optbyte+0x68>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3314      	adds	r3, #20
 800aa78:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	e00b      	b.n	800aa9c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aa84:	88fb      	ldrh	r3, [r7, #6]
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <tcp_get_next_optbyte+0x64>)
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aa92:	4b06      	ldr	r3, [pc, #24]	; (800aaac <tcp_get_next_optbyte+0x60>)
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	797b      	ldrb	r3, [r7, #5]
 800aa98:	4413      	add	r3, r2
 800aa9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	200089e0 	.word	0x200089e0
 800aaac:	200089dc 	.word	0x200089dc
 800aab0:	200089da 	.word	0x200089da
 800aab4:	200089d4 	.word	0x200089d4

0800aab8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <tcp_parseopt+0x1c>
 800aac6:	4b32      	ldr	r3, [pc, #200]	; (800ab90 <tcp_parseopt+0xd8>)
 800aac8:	f240 727d 	movw	r2, #1917	; 0x77d
 800aacc:	4931      	ldr	r1, [pc, #196]	; (800ab94 <tcp_parseopt+0xdc>)
 800aace:	4832      	ldr	r0, [pc, #200]	; (800ab98 <tcp_parseopt+0xe0>)
 800aad0:	f004 ff68 	bl	800f9a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aad4:	4b31      	ldr	r3, [pc, #196]	; (800ab9c <tcp_parseopt+0xe4>)
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d055      	beq.n	800ab88 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aadc:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <tcp_parseopt+0xe8>)
 800aade:	2200      	movs	r2, #0
 800aae0:	801a      	strh	r2, [r3, #0]
 800aae2:	e045      	b.n	800ab70 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800aae4:	f7ff ffb2 	bl	800aa4c <tcp_get_next_optbyte>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d006      	beq.n	800ab00 <tcp_parseopt+0x48>
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	dc2b      	bgt.n	800ab4e <tcp_parseopt+0x96>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d041      	beq.n	800ab7e <tcp_parseopt+0xc6>
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d127      	bne.n	800ab4e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800aafe:	e037      	b.n	800ab70 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ab00:	f7ff ffa4 	bl	800aa4c <tcp_get_next_optbyte>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d13b      	bne.n	800ab82 <tcp_parseopt+0xca>
 800ab0a:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <tcp_parseopt+0xe8>)
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a22      	ldr	r2, [pc, #136]	; (800ab9c <tcp_parseopt+0xe4>)
 800ab12:	8812      	ldrh	r2, [r2, #0]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	da34      	bge.n	800ab82 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ab18:	f7ff ff98 	bl	800aa4c <tcp_get_next_optbyte>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ab24:	f7ff ff92 	bl	800aa4c <tcp_get_next_optbyte>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	89bb      	ldrh	r3, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ab32:	89bb      	ldrh	r3, [r7, #12]
 800ab34:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ab38:	d804      	bhi.n	800ab44 <tcp_parseopt+0x8c>
 800ab3a:	89bb      	ldrh	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <tcp_parseopt+0x8c>
 800ab40:	89ba      	ldrh	r2, [r7, #12]
 800ab42:	e001      	b.n	800ab48 <tcp_parseopt+0x90>
 800ab44:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ab4c:	e010      	b.n	800ab70 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ab4e:	f7ff ff7d 	bl	800aa4c <tcp_get_next_optbyte>
 800ab52:	4603      	mov	r3, r0
 800ab54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ab56:	7afb      	ldrb	r3, [r7, #11]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d914      	bls.n	800ab86 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ab5c:	7afb      	ldrb	r3, [r7, #11]
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <tcp_parseopt+0xe8>)
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	3b02      	subs	r3, #2
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <tcp_parseopt+0xe8>)
 800ab6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <tcp_parseopt+0xe8>)
 800ab72:	881a      	ldrh	r2, [r3, #0]
 800ab74:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <tcp_parseopt+0xe4>)
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d3b3      	bcc.n	800aae4 <tcp_parseopt+0x2c>
 800ab7c:	e004      	b.n	800ab88 <tcp_parseopt+0xd0>
          return;
 800ab7e:	bf00      	nop
 800ab80:	e002      	b.n	800ab88 <tcp_parseopt+0xd0>
            return;
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <tcp_parseopt+0xd0>
            return;
 800ab86:	bf00      	nop
      }
    }
  }
}
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	08012b20 	.word	0x08012b20
 800ab94:	0801310c 	.word	0x0801310c
 800ab98:	08012b6c 	.word	0x08012b6c
 800ab9c:	200089d8 	.word	0x200089d8
 800aba0:	200089e0 	.word	0x200089e0

0800aba4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <tcp_trigger_input_pcb_close+0x1c>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f043 0310 	orr.w	r3, r3, #16
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <tcp_trigger_input_pcb_close+0x1c>)
 800abb4:	701a      	strb	r2, [r3, #0]
}
 800abb6:	bf00      	nop
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	200089f1 	.word	0x200089f1

0800abc4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <tcp_route+0x28>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	7a1b      	ldrb	r3, [r3, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d006      	beq.n	800abec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	7a1b      	ldrb	r3, [r3, #8]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fa fed2 	bl	800598c <netif_get_by_index>
 800abe8:	4603      	mov	r3, r0
 800abea:	e003      	b.n	800abf4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f003 fbf9 	bl	800e3e4 <ip4_route>
 800abf2:	4603      	mov	r3, r0
  }
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800abfc:	b590      	push	{r4, r7, lr}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d105      	bne.n	800ac1e <tcp_create_segment+0x22>
 800ac12:	4b45      	ldr	r3, [pc, #276]	; (800ad28 <tcp_create_segment+0x12c>)
 800ac14:	22a3      	movs	r2, #163	; 0xa3
 800ac16:	4945      	ldr	r1, [pc, #276]	; (800ad2c <tcp_create_segment+0x130>)
 800ac18:	4845      	ldr	r0, [pc, #276]	; (800ad30 <tcp_create_segment+0x134>)
 800ac1a:	f004 fec3 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d105      	bne.n	800ac30 <tcp_create_segment+0x34>
 800ac24:	4b40      	ldr	r3, [pc, #256]	; (800ad28 <tcp_create_segment+0x12c>)
 800ac26:	22a4      	movs	r2, #164	; 0xa4
 800ac28:	4942      	ldr	r1, [pc, #264]	; (800ad34 <tcp_create_segment+0x138>)
 800ac2a:	4841      	ldr	r0, [pc, #260]	; (800ad30 <tcp_create_segment+0x134>)
 800ac2c:	f004 feba 	bl	800f9a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ac3e:	2003      	movs	r0, #3
 800ac40:	f7fa fb42 	bl	80052c8 <memp_malloc>
 800ac44:	6138      	str	r0, [r7, #16]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d104      	bne.n	800ac56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ac4c:	68b8      	ldr	r0, [r7, #8]
 800ac4e:	f7fb f9fd 	bl	800604c <pbuf_free>
    return NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e064      	b.n	800ad20 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ac5c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	891a      	ldrh	r2, [r3, #8]
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d205      	bcs.n	800ac82 <tcp_create_segment+0x86>
 800ac76:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <tcp_create_segment+0x12c>)
 800ac78:	22b0      	movs	r2, #176	; 0xb0
 800ac7a:	492f      	ldr	r1, [pc, #188]	; (800ad38 <tcp_create_segment+0x13c>)
 800ac7c:	482c      	ldr	r0, [pc, #176]	; (800ad30 <tcp_create_segment+0x134>)
 800ac7e:	f004 fe91 	bl	800f9a4 <iprintf>
  seg->len = p->tot_len - optlen;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	891a      	ldrh	r2, [r3, #8]
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2200      	movs	r2, #0
 800ac96:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ac98:	2114      	movs	r1, #20
 800ac9a:	68b8      	ldr	r0, [r7, #8]
 800ac9c:	f7fb f940 	bl	8005f20 <pbuf_add_header>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aca6:	6938      	ldr	r0, [r7, #16]
 800aca8:	f7fc feaf 	bl	8007a0a <tcp_seg_free>
    return NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	e037      	b.n	800ad20 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8ada      	ldrh	r2, [r3, #22]
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	691c      	ldr	r4, [r3, #16]
 800acc2:	4610      	mov	r0, r2
 800acc4:	f7f9 feaa 	bl	8004a1c <lwip_htons>
 800acc8:	4603      	mov	r3, r0
 800acca:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	8b1a      	ldrh	r2, [r3, #24]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	691c      	ldr	r4, [r3, #16]
 800acd4:	4610      	mov	r0, r2
 800acd6:	f7f9 fea1 	bl	8004a1c <lwip_htons>
 800acda:	4603      	mov	r3, r0
 800acdc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	691c      	ldr	r4, [r3, #16]
 800ace2:	6838      	ldr	r0, [r7, #0]
 800ace4:	f7f9 feaf 	bl	8004a46 <lwip_htonl>
 800ace8:	4603      	mov	r3, r0
 800acea:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	089b      	lsrs	r3, r3, #2
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	3305      	adds	r3, #5
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	031b      	lsls	r3, r3, #12
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4313      	orrs	r3, r2
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	691c      	ldr	r4, [r3, #16]
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7f9 fe87 	bl	8004a1c <lwip_htons>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	749a      	strb	r2, [r3, #18]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	74da      	strb	r2, [r3, #19]
  return seg;
 800ad1e:	693b      	ldr	r3, [r7, #16]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	371c      	adds	r7, #28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd90      	pop	{r4, r7, pc}
 800ad28:	08013128 	.word	0x08013128
 800ad2c:	0801315c 	.word	0x0801315c
 800ad30:	0801317c 	.word	0x0801317c
 800ad34:	080131a4 	.word	0x080131a4
 800ad38:	080131c8 	.word	0x080131c8

0800ad3c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	607b      	str	r3, [r7, #4]
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	81bb      	strh	r3, [r7, #12]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ad50:	89bb      	ldrh	r3, [r7, #12]
 800ad52:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d105      	bne.n	800ad66 <tcp_pbuf_prealloc+0x2a>
 800ad5a:	4b30      	ldr	r3, [pc, #192]	; (800ae1c <tcp_pbuf_prealloc+0xe0>)
 800ad5c:	22e8      	movs	r2, #232	; 0xe8
 800ad5e:	4930      	ldr	r1, [pc, #192]	; (800ae20 <tcp_pbuf_prealloc+0xe4>)
 800ad60:	4830      	ldr	r0, [pc, #192]	; (800ae24 <tcp_pbuf_prealloc+0xe8>)
 800ad62:	f004 fe1f 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d105      	bne.n	800ad78 <tcp_pbuf_prealloc+0x3c>
 800ad6c:	4b2b      	ldr	r3, [pc, #172]	; (800ae1c <tcp_pbuf_prealloc+0xe0>)
 800ad6e:	22e9      	movs	r2, #233	; 0xe9
 800ad70:	492d      	ldr	r1, [pc, #180]	; (800ae28 <tcp_pbuf_prealloc+0xec>)
 800ad72:	482c      	ldr	r0, [pc, #176]	; (800ae24 <tcp_pbuf_prealloc+0xe8>)
 800ad74:	f004 fe16 	bl	800f9a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ad78:	89ba      	ldrh	r2, [r7, #12]
 800ad7a:	897b      	ldrh	r3, [r7, #10]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d221      	bcs.n	800adc4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ad80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d111      	bne.n	800adb0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	8b5b      	ldrh	r3, [r3, #26]
 800ad90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d115      	bne.n	800adc4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ad98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d009      	beq.n	800adc4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800adb0:	89bb      	ldrh	r3, [r7, #12]
 800adb2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800adb6:	f023 0203 	bic.w	r2, r3, #3
 800adba:	897b      	ldrh	r3, [r7, #10]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bf28      	it	cs
 800adc0:	4613      	movcs	r3, r2
 800adc2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800adc4:	8af9      	ldrh	r1, [r7, #22]
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fa fe59 	bl	8005a84 <pbuf_alloc>
 800add2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	e019      	b.n	800ae12 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <tcp_pbuf_prealloc+0xb8>
 800ade6:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <tcp_pbuf_prealloc+0xe0>)
 800ade8:	f240 120b 	movw	r2, #267	; 0x10b
 800adec:	490f      	ldr	r1, [pc, #60]	; (800ae2c <tcp_pbuf_prealloc+0xf0>)
 800adee:	480d      	ldr	r0, [pc, #52]	; (800ae24 <tcp_pbuf_prealloc+0xe8>)
 800adf0:	f004 fdd8 	bl	800f9a4 <iprintf>
  *oversize = p->len - length;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	895a      	ldrh	r2, [r3, #10]
 800adf8:	89bb      	ldrh	r3, [r7, #12]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	89ba      	ldrh	r2, [r7, #12]
 800ae06:	811a      	strh	r2, [r3, #8]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	891a      	ldrh	r2, [r3, #8]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	815a      	strh	r2, [r3, #10]
  return p;
 800ae10:	693b      	ldr	r3, [r7, #16]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08013128 	.word	0x08013128
 800ae20:	080131e0 	.word	0x080131e0
 800ae24:	0801317c 	.word	0x0801317c
 800ae28:	08013204 	.word	0x08013204
 800ae2c:	08013224 	.word	0x08013224

0800ae30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <tcp_write_checks+0x20>
 800ae42:	4b33      	ldr	r3, [pc, #204]	; (800af10 <tcp_write_checks+0xe0>)
 800ae44:	f240 1233 	movw	r2, #307	; 0x133
 800ae48:	4932      	ldr	r1, [pc, #200]	; (800af14 <tcp_write_checks+0xe4>)
 800ae4a:	4833      	ldr	r0, [pc, #204]	; (800af18 <tcp_write_checks+0xe8>)
 800ae4c:	f004 fdaa 	bl	800f9a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	7d1b      	ldrb	r3, [r3, #20]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d00e      	beq.n	800ae76 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ae5c:	2b07      	cmp	r3, #7
 800ae5e:	d00a      	beq.n	800ae76 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d006      	beq.n	800ae76 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d002      	beq.n	800ae76 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ae70:	f06f 030a 	mvn.w	r3, #10
 800ae74:	e048      	b.n	800af08 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ae76:	887b      	ldrh	r3, [r7, #2]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <tcp_write_checks+0x50>
    return ERR_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e043      	b.n	800af08 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae86:	887a      	ldrh	r2, [r7, #2]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d909      	bls.n	800aea0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	8b5b      	ldrh	r3, [r3, #26]
 800ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ae9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9e:	e033      	b.n	800af08 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d909      	bls.n	800aebe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	8b5b      	ldrh	r3, [r3, #26]
 800aeae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800aebc:	e024      	b.n	800af08 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00f      	beq.n	800aee8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d11a      	bne.n	800af06 <tcp_write_checks+0xd6>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d116      	bne.n	800af06 <tcp_write_checks+0xd6>
 800aed8:	4b0d      	ldr	r3, [pc, #52]	; (800af10 <tcp_write_checks+0xe0>)
 800aeda:	f240 1255 	movw	r2, #341	; 0x155
 800aede:	490f      	ldr	r1, [pc, #60]	; (800af1c <tcp_write_checks+0xec>)
 800aee0:	480d      	ldr	r0, [pc, #52]	; (800af18 <tcp_write_checks+0xe8>)
 800aee2:	f004 fd5f 	bl	800f9a4 <iprintf>
 800aee6:	e00e      	b.n	800af06 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <tcp_write_checks+0xc8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d006      	beq.n	800af06 <tcp_write_checks+0xd6>
 800aef8:	4b05      	ldr	r3, [pc, #20]	; (800af10 <tcp_write_checks+0xe0>)
 800aefa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800aefe:	4908      	ldr	r1, [pc, #32]	; (800af20 <tcp_write_checks+0xf0>)
 800af00:	4805      	ldr	r0, [pc, #20]	; (800af18 <tcp_write_checks+0xe8>)
 800af02:	f004 fd4f 	bl	800f9a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	08013128 	.word	0x08013128
 800af14:	08013238 	.word	0x08013238
 800af18:	0801317c 	.word	0x0801317c
 800af1c:	08013258 	.word	0x08013258
 800af20:	08013294 	.word	0x08013294

0800af24 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b09d      	sub	sp, #116	; 0x74
 800af28:	af04      	add	r7, sp, #16
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4611      	mov	r1, r2
 800af30:	461a      	mov	r2, r3
 800af32:	460b      	mov	r3, r1
 800af34:	80fb      	strh	r3, [r7, #6]
 800af36:	4613      	mov	r3, r2
 800af38:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	643b      	str	r3, [r7, #64]	; 0x40
 800af42:	2300      	movs	r3, #0
 800af44:	657b      	str	r3, [r7, #84]	; 0x54
 800af46:	2300      	movs	r3, #0
 800af48:	653b      	str	r3, [r7, #80]	; 0x50
 800af4a:	2300      	movs	r3, #0
 800af4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 800af4e:	2300      	movs	r3, #0
 800af50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <tcp_write+0x66>
 800af76:	4b9c      	ldr	r3, [pc, #624]	; (800b1e8 <tcp_write+0x2c4>)
 800af78:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800af7c:	499b      	ldr	r1, [pc, #620]	; (800b1ec <tcp_write+0x2c8>)
 800af7e:	489c      	ldr	r0, [pc, #624]	; (800b1f0 <tcp_write+0x2cc>)
 800af80:	f004 fd10 	bl	800f9a4 <iprintf>
 800af84:	f06f 030f 	mvn.w	r3, #15
 800af88:	e379      	b.n	800b67e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	b29a      	uxth	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af98:	4293      	cmp	r3, r2
 800af9a:	bf28      	it	cs
 800af9c:	4613      	movcs	r3, r2
 800af9e:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 800afa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <tcp_write+0x88>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afaa:	e000      	b.n	800afae <tcp_write+0x8a>
 800afac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afae:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <tcp_write+0xa6>
 800afb6:	4b8c      	ldr	r3, [pc, #560]	; (800b1e8 <tcp_write+0x2c4>)
 800afb8:	f240 12ad 	movw	r2, #429	; 0x1ad
 800afbc:	498d      	ldr	r1, [pc, #564]	; (800b1f4 <tcp_write+0x2d0>)
 800afbe:	488c      	ldr	r0, [pc, #560]	; (800b1f0 <tcp_write+0x2cc>)
 800afc0:	f004 fcf0 	bl	800f9a4 <iprintf>
 800afc4:	f06f 030f 	mvn.w	r3, #15
 800afc8:	e359      	b.n	800b67e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	4619      	mov	r1, r3
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff ff2e 	bl	800ae30 <tcp_write_checks>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800afda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <tcp_write+0xc4>
    return err;
 800afe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afe6:	e34a      	b.n	800b67e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aff2:	2300      	movs	r3, #0
 800aff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8127 	beq.w	800b250 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b006:	643b      	str	r3, [r7, #64]	; 0x40
 800b008:	e002      	b.n	800b010 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 800b00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f8      	bne.n	800b00a <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	7b1b      	ldrb	r3, [r3, #12]
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b026:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02a:	891b      	ldrh	r3, [r3, #8]
 800b02c:	4619      	mov	r1, r3
 800b02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b030:	440b      	add	r3, r1
 800b032:	429a      	cmp	r2, r3
 800b034:	da06      	bge.n	800b044 <tcp_write+0x120>
 800b036:	4b6c      	ldr	r3, [pc, #432]	; (800b1e8 <tcp_write+0x2c4>)
 800b038:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b03c:	496e      	ldr	r1, [pc, #440]	; (800b1f8 <tcp_write+0x2d4>)
 800b03e:	486c      	ldr	r0, [pc, #432]	; (800b1f0 <tcp_write+0x2cc>)
 800b040:	f004 fcb0 	bl	800f9a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b046:	891a      	ldrh	r2, [r3, #8]
 800b048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b04a:	4413      	add	r3, r2
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b05e:	895b      	ldrh	r3, [r3, #10]
 800b060:	429a      	cmp	r2, r3
 800b062:	d006      	beq.n	800b072 <tcp_write+0x14e>
 800b064:	4b60      	ldr	r3, [pc, #384]	; (800b1e8 <tcp_write+0x2c4>)
 800b066:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b06a:	4964      	ldr	r1, [pc, #400]	; (800b1fc <tcp_write+0x2d8>)
 800b06c:	4860      	ldr	r0, [pc, #384]	; (800b1f0 <tcp_write+0x2cc>)
 800b06e:	f004 fc99 	bl	800f9a4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b078:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 800b07a:	8afb      	ldrh	r3, [r7, #22]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d02e      	beq.n	800b0de <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b080:	8afb      	ldrh	r3, [r7, #22]
 800b082:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800b086:	429a      	cmp	r2, r3
 800b088:	d206      	bcs.n	800b098 <tcp_write+0x174>
 800b08a:	4b57      	ldr	r3, [pc, #348]	; (800b1e8 <tcp_write+0x2c4>)
 800b08c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b090:	495b      	ldr	r1, [pc, #364]	; (800b200 <tcp_write+0x2dc>)
 800b092:	4857      	ldr	r0, [pc, #348]	; (800b1f0 <tcp_write+0x2cc>)
 800b094:	f004 fc86 	bl	800f9a4 <iprintf>
      seg = last_unsent;
 800b098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09a:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b09c:	8afb      	ldrh	r3, [r7, #22]
 800b09e:	88fa      	ldrh	r2, [r7, #6]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	bf28      	it	cs
 800b0a4:	4613      	movcs	r3, r2
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	bf28      	it	cs
 800b0b0:	4613      	movcs	r3, r2
 800b0b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 800b0b6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b0ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b0be:	4413      	add	r3, r2
 800b0c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 800b0c4:	8afa      	ldrh	r2, [r7, #22]
 800b0c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 800b0d0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800b0d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b0de:	8afb      	ldrh	r3, [r7, #22]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <tcp_write+0x1d8>
 800b0e4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b0e8:	88fb      	ldrh	r3, [r7, #6]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d006      	beq.n	800b0fc <tcp_write+0x1d8>
 800b0ee:	4b3e      	ldr	r3, [pc, #248]	; (800b1e8 <tcp_write+0x2c4>)
 800b0f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f4:	4943      	ldr	r1, [pc, #268]	; (800b204 <tcp_write+0x2e0>)
 800b0f6:	483e      	ldr	r0, [pc, #248]	; (800b1f0 <tcp_write+0x2cc>)
 800b0f8:	f004 fc54 	bl	800f9a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b0fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	429a      	cmp	r2, r3
 800b104:	f080 8172 	bcs.w	800b3ec <tcp_write+0x4c8>
 800b108:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 816d 	beq.w	800b3ec <tcp_write+0x4c8>
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	891b      	ldrh	r3, [r3, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8168 	beq.w	800b3ec <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b11c:	88fa      	ldrh	r2, [r7, #6]
 800b11e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b122:	1ad2      	subs	r2, r2, r3
 800b124:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800b128:	4293      	cmp	r3, r2
 800b12a:	bfa8      	it	ge
 800b12c:	4613      	movge	r3, r2
 800b12e:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 800b130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b132:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b134:	797b      	ldrb	r3, [r7, #5]
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d02b      	beq.n	800b196 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b13e:	f107 0016 	add.w	r0, r7, #22
 800b142:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800b146:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800b148:	2301      	movs	r3, #1
 800b14a:	9302      	str	r3, [sp, #8]
 800b14c:	797b      	ldrb	r3, [r7, #5]
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	4603      	mov	r3, r0
 800b156:	2000      	movs	r0, #0
 800b158:	f7ff fdf0 	bl	800ad3c <tcp_pbuf_prealloc>
 800b15c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 825a 	beq.w	800b61a <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800b166:	8afb      	ldrh	r3, [r7, #22]
 800b168:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16e:	6858      	ldr	r0, [r3, #4]
 800b170:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	4413      	add	r3, r2
 800b178:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b17a:	4619      	mov	r1, r3
 800b17c:	f004 fbe2 	bl	800f944 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b180:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b182:	f7fa ffeb 	bl	800615c <pbuf_clen>
 800b186:	4603      	mov	r3, r0
 800b188:	461a      	mov	r2, r3
 800b18a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b18e:	4413      	add	r3, r2
 800b190:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b194:	e055      	b.n	800b242 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b19c:	e002      	b.n	800b1a4 <tcp_write+0x280>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1f8      	bne.n	800b19e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	7b1b      	ldrb	r3, [r3, #12]
 800b1b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d129      	bne.n	800b20c <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1be:	8952      	ldrh	r2, [r2, #10]
 800b1c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d121      	bne.n	800b20c <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b1c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d006      	beq.n	800b1de <tcp_write+0x2ba>
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <tcp_write+0x2c4>)
 800b1d2:	f240 2231 	movw	r2, #561	; 0x231
 800b1d6:	490c      	ldr	r1, [pc, #48]	; (800b208 <tcp_write+0x2e4>)
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <tcp_write+0x2cc>)
 800b1da:	f004 fbe3 	bl	800f9a4 <iprintf>
          extendlen = seglen;
 800b1de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800b1e4:	e02d      	b.n	800b242 <tcp_write+0x31e>
 800b1e6:	bf00      	nop
 800b1e8:	08013128 	.word	0x08013128
 800b1ec:	080132c8 	.word	0x080132c8
 800b1f0:	0801317c 	.word	0x0801317c
 800b1f4:	080132e0 	.word	0x080132e0
 800b1f8:	08013314 	.word	0x08013314
 800b1fc:	0801332c 	.word	0x0801332c
 800b200:	0801335c 	.word	0x0801335c
 800b204:	0801337c 	.word	0x0801337c
 800b208:	0801339c 	.word	0x0801339c
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b20e:	2201      	movs	r2, #1
 800b210:	4619      	mov	r1, r3
 800b212:	2000      	movs	r0, #0
 800b214:	f7fa fc36 	bl	8005a84 <pbuf_alloc>
 800b218:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 81fe 	beq.w	800b61e <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	441a      	add	r2, r3
 800b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b22e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b230:	f7fa ff94 	bl	800615c <pbuf_clen>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b23c:	4413      	add	r3, r2
 800b23e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b242:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b248:	4413      	add	r3, r2
 800b24a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b24e:	e0cd      	b.n	800b3ec <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 80c8 	beq.w	800b3ec <tcp_write+0x4c8>
 800b25c:	4b72      	ldr	r3, [pc, #456]	; (800b428 <tcp_write+0x504>)
 800b25e:	f240 224a 	movw	r2, #586	; 0x24a
 800b262:	4972      	ldr	r1, [pc, #456]	; (800b42c <tcp_write+0x508>)
 800b264:	4872      	ldr	r0, [pc, #456]	; (800b430 <tcp_write+0x50c>)
 800b266:	f004 fb9d 	bl	800f9a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b26a:	e0bf      	b.n	800b3ec <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 800b26c:	88fa      	ldrh	r2, [r7, #6]
 800b26e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 800b276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b282:	8bfa      	ldrh	r2, [r7, #30]
 800b284:	8c3b      	ldrh	r3, [r7, #32]
 800b286:	4293      	cmp	r3, r2
 800b288:	bf28      	it	cs
 800b28a:	4613      	movcs	r3, r2
 800b28c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b28e:	797b      	ldrb	r3, [r7, #5]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d036      	beq.n	800b306 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	8bbb      	ldrh	r3, [r7, #28]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	b299      	uxth	r1, r3
 800b2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	bf0c      	ite	eq
 800b2aa:	2301      	moveq	r3, #1
 800b2ac:	2300      	movne	r3, #0
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	f107 0016 	add.w	r0, r7, #22
 800b2b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	797b      	ldrb	r3, [r7, #5]
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2036      	movs	r0, #54	; 0x36
 800b2c4:	f7ff fd3a 	bl	800ad3c <tcp_pbuf_prealloc>
 800b2c8:	6378      	str	r0, [r7, #52]	; 0x34
 800b2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 81a8 	beq.w	800b622 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	895b      	ldrh	r3, [r3, #10]
 800b2d6:	8bba      	ldrh	r2, [r7, #28]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d906      	bls.n	800b2ea <tcp_write+0x3c6>
 800b2dc:	4b52      	ldr	r3, [pc, #328]	; (800b428 <tcp_write+0x504>)
 800b2de:	f240 2266 	movw	r2, #614	; 0x266
 800b2e2:	4954      	ldr	r1, [pc, #336]	; (800b434 <tcp_write+0x510>)
 800b2e4:	4852      	ldr	r0, [pc, #328]	; (800b430 <tcp_write+0x50c>)
 800b2e6:	f004 fb5d 	bl	800f9a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2f2:	18d0      	adds	r0, r2, r3
 800b2f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	8bba      	ldrh	r2, [r7, #28]
 800b2fe:	4619      	mov	r1, r3
 800b300:	f004 fb20 	bl	800f944 <memcpy>
 800b304:	e02f      	b.n	800b366 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b306:	8afb      	ldrh	r3, [r7, #22]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <tcp_write+0x3f6>
 800b30c:	4b46      	ldr	r3, [pc, #280]	; (800b428 <tcp_write+0x504>)
 800b30e:	f240 2271 	movw	r2, #625	; 0x271
 800b312:	4949      	ldr	r1, [pc, #292]	; (800b438 <tcp_write+0x514>)
 800b314:	4846      	ldr	r0, [pc, #280]	; (800b430 <tcp_write+0x50c>)
 800b316:	f004 fb45 	bl	800f9a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b31a:	8bbb      	ldrh	r3, [r7, #28]
 800b31c:	2201      	movs	r2, #1
 800b31e:	4619      	mov	r1, r3
 800b320:	2036      	movs	r0, #54	; 0x36
 800b322:	f7fa fbaf 	bl	8005a84 <pbuf_alloc>
 800b326:	61b8      	str	r0, [r7, #24]
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 817b 	beq.w	800b626 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b330:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	441a      	add	r2, r3
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b33c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b340:	b29b      	uxth	r3, r3
 800b342:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b346:	4619      	mov	r1, r3
 800b348:	2036      	movs	r0, #54	; 0x36
 800b34a:	f7fa fb9b 	bl	8005a84 <pbuf_alloc>
 800b34e:	6378      	str	r0, [r7, #52]	; 0x34
 800b350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b352:	2b00      	cmp	r3, #0
 800b354:	d103      	bne.n	800b35e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b356:	69b8      	ldr	r0, [r7, #24]
 800b358:	f7fa fe78 	bl	800604c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b35c:	e166      	b.n	800b62c <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b35e:	69b9      	ldr	r1, [r7, #24]
 800b360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b362:	f7fa ff35 	bl	80061d0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b368:	f7fa fef8 	bl	800615c <pbuf_clen>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b374:	4413      	add	r3, r2
 800b376:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b37a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b37e:	2b09      	cmp	r3, #9
 800b380:	d903      	bls.n	800b38a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b384:	f7fa fe62 	bl	800604c <pbuf_free>
      goto memerr;
 800b388:	e150      	b.n	800b62c <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b38e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b392:	441a      	add	r2, r3
 800b394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4613      	mov	r3, r2
 800b39c:	2200      	movs	r2, #0
 800b39e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7ff fc2b 	bl	800abfc <tcp_create_segment>
 800b3a6:	6578      	str	r0, [r7, #84]	; 0x54
 800b3a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 813d 	beq.w	800b62a <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800b3b0:	8afa      	ldrh	r2, [r7, #22]
 800b3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b4:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <tcp_write+0x49e>
      queue = seg;
 800b3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c0:	e00c      	b.n	800b3dc <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <tcp_write+0x4b2>
 800b3c8:	4b17      	ldr	r3, [pc, #92]	; (800b428 <tcp_write+0x504>)
 800b3ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b3ce:	491b      	ldr	r1, [pc, #108]	; (800b43c <tcp_write+0x518>)
 800b3d0:	4817      	ldr	r0, [pc, #92]	; (800b430 <tcp_write+0x50c>)
 800b3d2:	f004 fae7 	bl	800f9a4 <iprintf>
      prev_seg->next = seg;
 800b3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3da:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3de:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b3e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b3e4:	8bbb      	ldrh	r3, [r7, #28]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 800b3ec:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800b3f0:	88fb      	ldrh	r3, [r7, #6]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	f4ff af3a 	bcc.w	800b26c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800b3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00b      	beq.n	800b416 <tcp_write+0x4f2>
 800b3fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b402:	2b00      	cmp	r3, #0
 800b404:	d007      	beq.n	800b416 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 800b406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b408:	895a      	ldrh	r2, [r3, #10]
 800b40a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b40e:	4413      	add	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b414:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b416:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d052      	beq.n	800b4c4 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	633b      	str	r3, [r7, #48]	; 0x30
 800b424:	e02e      	b.n	800b484 <tcp_write+0x560>
 800b426:	bf00      	nop
 800b428:	08013128 	.word	0x08013128
 800b42c:	080133c8 	.word	0x080133c8
 800b430:	0801317c 	.word	0x0801317c
 800b434:	080133f8 	.word	0x080133f8
 800b438:	08013438 	.word	0x08013438
 800b43c:	08013448 	.word	0x08013448
      p->tot_len += oversize_used;
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	891a      	ldrh	r2, [r3, #8]
 800b444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b448:	4413      	add	r3, r2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d112      	bne.n	800b47e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45e:	8952      	ldrh	r2, [r2, #10]
 800b460:	4413      	add	r3, r2
 800b462:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	4618      	mov	r0, r3
 800b46a:	f004 fa6b 	bl	800f944 <memcpy>
        p->len += oversize_used;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	895a      	ldrh	r2, [r3, #10]
 800b472:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b476:	4413      	add	r3, r2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	633b      	str	r3, [r7, #48]	; 0x30
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1da      	bne.n	800b440 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 800b48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48c:	891a      	ldrh	r2, [r3, #8]
 800b48e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b492:	4413      	add	r3, r2
 800b494:	b29a      	uxth	r2, r3
 800b496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b498:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800b49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d906      	bls.n	800b4b4 <tcp_write+0x590>
 800b4a6:	4b78      	ldr	r3, [pc, #480]	; (800b688 <tcp_write+0x764>)
 800b4a8:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b4ac:	4977      	ldr	r1, [pc, #476]	; (800b68c <tcp_write+0x768>)
 800b4ae:	4878      	ldr	r0, [pc, #480]	; (800b690 <tcp_write+0x76c>)
 800b4b0:	f004 fa78 	bl	800f9a4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b6:	895a      	ldrh	r2, [r3, #10]
 800b4b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b4c4:	8afa      	ldrh	r2, [r7, #22]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d018      	beq.n	800b504 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d106      	bne.n	800b4e6 <tcp_write+0x5c2>
 800b4d8:	4b6b      	ldr	r3, [pc, #428]	; (800b688 <tcp_write+0x764>)
 800b4da:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b4de:	496d      	ldr	r1, [pc, #436]	; (800b694 <tcp_write+0x770>)
 800b4e0:	486b      	ldr	r0, [pc, #428]	; (800b690 <tcp_write+0x76c>)
 800b4e2:	f004 fa5f 	bl	800f9a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fa fe6f 	bl	80061d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4f4:	891a      	ldrh	r2, [r3, #8]
 800b4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f8:	891b      	ldrh	r3, [r3, #8]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b500:	811a      	strh	r2, [r3, #8]
 800b502:	e03c      	b.n	800b57e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 800b504:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d038      	beq.n	800b57e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <tcp_write+0x5f6>
 800b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <tcp_write+0x604>
 800b51a:	4b5b      	ldr	r3, [pc, #364]	; (800b688 <tcp_write+0x764>)
 800b51c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b520:	495d      	ldr	r1, [pc, #372]	; (800b698 <tcp_write+0x774>)
 800b522:	485b      	ldr	r0, [pc, #364]	; (800b690 <tcp_write+0x76c>)
 800b524:	f004 fa3e 	bl	800f9a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b52e:	e00a      	b.n	800b546 <tcp_write+0x622>
      p->tot_len += extendlen;
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	891a      	ldrh	r2, [r3, #8]
 800b534:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b538:	4413      	add	r3, r2
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f0      	bne.n	800b530 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	891a      	ldrh	r2, [r3, #8]
 800b552:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b556:	4413      	add	r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	895a      	ldrh	r2, [r3, #10]
 800b562:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b566:	4413      	add	r3, r2
 800b568:	b29a      	uxth	r2, r3
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b570:	891a      	ldrh	r2, [r3, #8]
 800b572:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800b576:	4413      	add	r3, r2
 800b578:	b29a      	uxth	r2, r3
 800b57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b57c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <tcp_write+0x668>
    pcb->unsent = queue;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b588:	66da      	str	r2, [r3, #108]	; 0x6c
 800b58a:	e002      	b.n	800b592 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 800b58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b590:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b596:	88fb      	ldrh	r3, [r7, #6]
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b5b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00e      	beq.n	800b5e2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <tcp_write+0x6be>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <tcp_write+0x6be>
 800b5d4:	4b2c      	ldr	r3, [pc, #176]	; (800b688 <tcp_write+0x764>)
 800b5d6:	f240 3212 	movw	r2, #786	; 0x312
 800b5da:	4930      	ldr	r1, [pc, #192]	; (800b69c <tcp_write+0x778>)
 800b5dc:	482c      	ldr	r0, [pc, #176]	; (800b690 <tcp_write+0x76c>)
 800b5de:	f004 f9e1 	bl	800f9a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d016      	beq.n	800b616 <tcp_write+0x6f2>
 800b5e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d012      	beq.n	800b616 <tcp_write+0x6f2>
 800b5f0:	797b      	ldrb	r3, [r7, #5]
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10d      	bne.n	800b616 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	899b      	ldrh	r3, [r3, #12]
 800b600:	b29c      	uxth	r4, r3
 800b602:	2008      	movs	r0, #8
 800b604:	f7f9 fa0a 	bl	8004a1c <lwip_htons>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	4322      	orrs	r2, r4
 800b612:	b292      	uxth	r2, r2
 800b614:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	e031      	b.n	800b67e <tcp_write+0x75a>
          goto memerr;
 800b61a:	bf00      	nop
 800b61c:	e006      	b.n	800b62c <tcp_write+0x708>
            goto memerr;
 800b61e:	bf00      	nop
 800b620:	e004      	b.n	800b62c <tcp_write+0x708>
        goto memerr;
 800b622:	bf00      	nop
 800b624:	e002      	b.n	800b62c <tcp_write+0x708>
        goto memerr;
 800b626:	bf00      	nop
 800b628:	e000      	b.n	800b62c <tcp_write+0x708>
      goto memerr;
 800b62a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8b5b      	ldrh	r3, [r3, #26]
 800b630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <tcp_write+0x722>
    pbuf_free(concat_p);
 800b640:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b642:	f7fa fd03 	bl	800604c <pbuf_free>
  }
  if (queue != NULL) {
 800b646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <tcp_write+0x72e>
    tcp_segs_free(queue);
 800b64c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b64e:	f7fc f9c7 	bl	80079e0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00e      	beq.n	800b67a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10a      	bne.n	800b67a <tcp_write+0x756>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <tcp_write+0x756>
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <tcp_write+0x764>)
 800b66e:	f240 3227 	movw	r2, #807	; 0x327
 800b672:	490a      	ldr	r1, [pc, #40]	; (800b69c <tcp_write+0x778>)
 800b674:	4806      	ldr	r0, [pc, #24]	; (800b690 <tcp_write+0x76c>)
 800b676:	f004 f995 	bl	800f9a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b67a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3764      	adds	r7, #100	; 0x64
 800b682:	46bd      	mov	sp, r7
 800b684:	bd90      	pop	{r4, r7, pc}
 800b686:	bf00      	nop
 800b688:	08013128 	.word	0x08013128
 800b68c:	0801345c 	.word	0x0801345c
 800b690:	0801317c 	.word	0x0801317c
 800b694:	08013488 	.word	0x08013488
 800b698:	080134c0 	.word	0x080134c0
 800b69c:	080134f8 	.word	0x080134f8

0800b6a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b08b      	sub	sp, #44	; 0x2c
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <tcp_split_unsent_seg+0x2c>
 800b6be:	4b97      	ldr	r3, [pc, #604]	; (800b91c <tcp_split_unsent_seg+0x27c>)
 800b6c0:	f240 324b 	movw	r2, #843	; 0x34b
 800b6c4:	4996      	ldr	r1, [pc, #600]	; (800b920 <tcp_split_unsent_seg+0x280>)
 800b6c6:	4897      	ldr	r0, [pc, #604]	; (800b924 <tcp_split_unsent_seg+0x284>)
 800b6c8:	f004 f96c 	bl	800f9a4 <iprintf>

  useg = pcb->unsent;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6dc:	e119      	b.n	800b912 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800b6de:	887b      	ldrh	r3, [r7, #2]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d109      	bne.n	800b6f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b6e4:	4b8d      	ldr	r3, [pc, #564]	; (800b91c <tcp_split_unsent_seg+0x27c>)
 800b6e6:	f240 3253 	movw	r2, #851	; 0x353
 800b6ea:	498f      	ldr	r1, [pc, #572]	; (800b928 <tcp_split_unsent_seg+0x288>)
 800b6ec:	488d      	ldr	r0, [pc, #564]	; (800b924 <tcp_split_unsent_seg+0x284>)
 800b6ee:	f004 f959 	bl	800f9a4 <iprintf>
    return ERR_VAL;
 800b6f2:	f06f 0305 	mvn.w	r3, #5
 800b6f6:	e10c      	b.n	800b912 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	891b      	ldrh	r3, [r3, #8]
 800b6fc:	887a      	ldrh	r2, [r7, #2]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d301      	bcc.n	800b706 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	e105      	b.n	800b912 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b70a:	887a      	ldrh	r2, [r7, #2]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d906      	bls.n	800b71e <tcp_split_unsent_seg+0x7e>
 800b710:	4b82      	ldr	r3, [pc, #520]	; (800b91c <tcp_split_unsent_seg+0x27c>)
 800b712:	f240 325b 	movw	r2, #859	; 0x35b
 800b716:	4985      	ldr	r1, [pc, #532]	; (800b92c <tcp_split_unsent_seg+0x28c>)
 800b718:	4882      	ldr	r0, [pc, #520]	; (800b924 <tcp_split_unsent_seg+0x284>)
 800b71a:	f004 f943 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	891b      	ldrh	r3, [r3, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <tcp_split_unsent_seg+0x94>
 800b726:	4b7d      	ldr	r3, [pc, #500]	; (800b91c <tcp_split_unsent_seg+0x27c>)
 800b728:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b72c:	4980      	ldr	r1, [pc, #512]	; (800b930 <tcp_split_unsent_seg+0x290>)
 800b72e:	487d      	ldr	r0, [pc, #500]	; (800b924 <tcp_split_unsent_seg+0x284>)
 800b730:	f004 f938 	bl	800f9a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	7b1b      	ldrb	r3, [r3, #12]
 800b738:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	891a      	ldrh	r2, [r3, #8]
 800b74a:	887b      	ldrh	r3, [r7, #2]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	b29a      	uxth	r2, r3
 800b754:	89bb      	ldrh	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	b29b      	uxth	r3, r3
 800b75a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b75e:	4619      	mov	r1, r3
 800b760:	2036      	movs	r0, #54	; 0x36
 800b762:	f7fa f98f 	bl	8005a84 <pbuf_alloc>
 800b766:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80ba 	beq.w	800b8e4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	891a      	ldrh	r2, [r3, #8]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	891b      	ldrh	r3, [r3, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	887b      	ldrh	r3, [r7, #2]
 800b780:	4413      	add	r3, r2
 800b782:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	6858      	ldr	r0, [r3, #4]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	18d1      	adds	r1, r2, r3
 800b790:	897b      	ldrh	r3, [r7, #10]
 800b792:	89ba      	ldrh	r2, [r7, #12]
 800b794:	f7fa fe44 	bl	8006420 <pbuf_copy_partial>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	89bb      	ldrh	r3, [r7, #12]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	f040 80a2 	bne.w	800b8e8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	899b      	ldrh	r3, [r3, #12]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f9 f935 	bl	8004a1c <lwip_htons>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ba:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b7bc:	2300      	movs	r3, #0
 800b7be:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800b7c0:	7ffb      	ldrb	r3, [r7, #31]
 800b7c2:	f003 0308 	and.w	r3, r3, #8
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d007      	beq.n	800b7da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b7ca:	7ffb      	ldrb	r3, [r7, #31]
 800b7cc:	f023 0308 	bic.w	r3, r3, #8
 800b7d0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800b7d2:	7fbb      	ldrb	r3, [r7, #30]
 800b7d4:	f043 0308 	orr.w	r3, r3, #8
 800b7d8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800b7da:	7ffb      	ldrb	r3, [r7, #31]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d007      	beq.n	800b7f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b7e4:	7ffb      	ldrb	r3, [r7, #31]
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800b7ec:	7fbb      	ldrb	r3, [r7, #30]
 800b7ee:	f043 0301 	orr.w	r3, r3, #1
 800b7f2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7f9 f923 	bl	8004a46 <lwip_htonl>
 800b800:	4602      	mov	r2, r0
 800b802:	887b      	ldrh	r3, [r7, #2]
 800b804:	18d1      	adds	r1, r2, r3
 800b806:	7fba      	ldrb	r2, [r7, #30]
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	460b      	mov	r3, r1
 800b80e:	6939      	ldr	r1, [r7, #16]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff f9f3 	bl	800abfc <tcp_create_segment>
 800b816:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d066      	beq.n	800b8ec <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	4618      	mov	r0, r3
 800b824:	f7fa fc9a 	bl	800615c <pbuf_clen>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	b29a      	uxth	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	6858      	ldr	r0, [r3, #4]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	891a      	ldrh	r2, [r3, #8]
 800b846:	89bb      	ldrh	r3, [r7, #12]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	4619      	mov	r1, r3
 800b84e:	f7fa fa77 	bl	8005d40 <pbuf_realloc>
  useg->len -= remainder;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	891a      	ldrh	r2, [r3, #8]
 800b856:	89bb      	ldrh	r3, [r7, #12]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	899b      	ldrh	r3, [r3, #12]
 800b866:	b29c      	uxth	r4, r3
 800b868:	7ffb      	ldrb	r3, [r7, #31]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f9 f8d5 	bl	8004a1c <lwip_htons>
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	4322      	orrs	r2, r4
 800b87c:	b292      	uxth	r2, r2
 800b87e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	2200      	movs	r2, #0
 800b884:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fa fc66 	bl	800615c <pbuf_clen>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b89a:	4413      	add	r3, r2
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fa fc57 	bl	800615c <pbuf_clen>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8b8:	4413      	add	r3, r2
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	69ba      	ldr	r2, [r7, #24]
 800b8ce:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d103      	bne.n	800b8e0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e016      	b.n	800b912 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800b8e4:	bf00      	nop
 800b8e6:	e002      	b.n	800b8ee <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b8e8:	bf00      	nop
 800b8ea:	e000      	b.n	800b8ee <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800b8ec:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d006      	beq.n	800b902 <tcp_split_unsent_seg+0x262>
 800b8f4:	4b09      	ldr	r3, [pc, #36]	; (800b91c <tcp_split_unsent_seg+0x27c>)
 800b8f6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b8fa:	490e      	ldr	r1, [pc, #56]	; (800b934 <tcp_split_unsent_seg+0x294>)
 800b8fc:	4809      	ldr	r0, [pc, #36]	; (800b924 <tcp_split_unsent_seg+0x284>)
 800b8fe:	f004 f851 	bl	800f9a4 <iprintf>
  if (p != NULL) {
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f7fa fb9f 	bl	800604c <pbuf_free>
  }

  return ERR_MEM;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b912:	4618      	mov	r0, r3
 800b914:	3724      	adds	r7, #36	; 0x24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd90      	pop	{r4, r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08013128 	.word	0x08013128
 800b920:	08013518 	.word	0x08013518
 800b924:	0801317c 	.word	0x0801317c
 800b928:	0801353c 	.word	0x0801353c
 800b92c:	08013560 	.word	0x08013560
 800b930:	08013570 	.word	0x08013570
 800b934:	08013580 	.word	0x08013580

0800b938 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <tcp_send_fin+0x1c>
 800b946:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <tcp_send_fin+0x94>)
 800b948:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b94c:	4920      	ldr	r1, [pc, #128]	; (800b9d0 <tcp_send_fin+0x98>)
 800b94e:	4821      	ldr	r0, [pc, #132]	; (800b9d4 <tcp_send_fin+0x9c>)
 800b950:	f004 f828 	bl	800f9a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d02e      	beq.n	800b9ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	e002      	b.n	800b96a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1f8      	bne.n	800b964 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	899b      	ldrh	r3, [r3, #12]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7f9 f84e 	bl	8004a1c <lwip_htons>
 800b980:	4603      	mov	r3, r0
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f003 0307 	and.w	r3, r3, #7
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d116      	bne.n	800b9ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	899b      	ldrh	r3, [r3, #12]
 800b992:	b29c      	uxth	r4, r3
 800b994:	2001      	movs	r0, #1
 800b996:	f7f9 f841 	bl	8004a1c <lwip_htons>
 800b99a:	4603      	mov	r3, r0
 800b99c:	461a      	mov	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	4322      	orrs	r2, r4
 800b9a4:	b292      	uxth	r2, r2
 800b9a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	8b5b      	ldrh	r3, [r3, #26]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e004      	b.n	800b9c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f80b 	bl	800b9d8 <tcp_enqueue_flags>
 800b9c2:	4603      	mov	r3, r0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd90      	pop	{r4, r7, pc}
 800b9cc:	08013128 	.word	0x08013128
 800b9d0:	0801358c 	.word	0x0801358c
 800b9d4:	0801317c 	.word	0x0801317c

0800b9d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <tcp_enqueue_flags+0x2c>
 800b9f6:	4b67      	ldr	r3, [pc, #412]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800b9f8:	f240 4211 	movw	r2, #1041	; 0x411
 800b9fc:	4966      	ldr	r1, [pc, #408]	; (800bb98 <tcp_enqueue_flags+0x1c0>)
 800b9fe:	4867      	ldr	r0, [pc, #412]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800ba00:	f003 ffd0 	bl	800f9a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <tcp_enqueue_flags+0x40>
 800ba0a:	4b62      	ldr	r3, [pc, #392]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800ba0c:	f240 4213 	movw	r2, #1043	; 0x413
 800ba10:	4963      	ldr	r1, [pc, #396]	; (800bba0 <tcp_enqueue_flags+0x1c8>)
 800ba12:	4862      	ldr	r0, [pc, #392]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800ba14:	f003 ffc6 	bl	800f9a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ba22:	2301      	movs	r3, #1
 800ba24:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba32:	7dbb      	ldrb	r3, [r7, #22]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	2036      	movs	r0, #54	; 0x36
 800ba3e:	f7fa f821 	bl	8005a84 <pbuf_alloc>
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	8b5b      	ldrh	r3, [r3, #26]
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ba58:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5c:	e095      	b.n	800bb8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	895a      	ldrh	r2, [r3, #10]
 800ba62:	7dbb      	ldrb	r3, [r7, #22]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d206      	bcs.n	800ba78 <tcp_enqueue_flags+0xa0>
 800ba6a:	4b4a      	ldr	r3, [pc, #296]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800ba6c:	f240 4239 	movw	r2, #1081	; 0x439
 800ba70:	494c      	ldr	r1, [pc, #304]	; (800bba4 <tcp_enqueue_flags+0x1cc>)
 800ba72:	484a      	ldr	r0, [pc, #296]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800ba74:	f003 ff96 	bl	800f9a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ba7c:	78fa      	ldrb	r2, [r7, #3]
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	460b      	mov	r3, r1
 800ba84:	68f9      	ldr	r1, [r7, #12]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff f8b8 	bl	800abfc <tcp_create_segment>
 800ba8c:	60b8      	str	r0, [r7, #8]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d109      	bne.n	800baa8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	8b5b      	ldrh	r3, [r3, #26]
 800ba98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800baa2:	f04f 33ff 	mov.w	r3, #4294967295
 800baa6:	e070      	b.n	800bb8a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d006      	beq.n	800bac2 <tcp_enqueue_flags+0xea>
 800bab4:	4b37      	ldr	r3, [pc, #220]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800bab6:	f240 4242 	movw	r2, #1090	; 0x442
 800baba:	493b      	ldr	r1, [pc, #236]	; (800bba8 <tcp_enqueue_flags+0x1d0>)
 800babc:	4837      	ldr	r0, [pc, #220]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800babe:	f003 ff71 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	891b      	ldrh	r3, [r3, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d006      	beq.n	800bad8 <tcp_enqueue_flags+0x100>
 800baca:	4b32      	ldr	r3, [pc, #200]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800bacc:	f240 4243 	movw	r2, #1091	; 0x443
 800bad0:	4936      	ldr	r1, [pc, #216]	; (800bbac <tcp_enqueue_flags+0x1d4>)
 800bad2:	4832      	ldr	r0, [pc, #200]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800bad4:	f003 ff66 	bl	800f9a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	66da      	str	r2, [r3, #108]	; 0x6c
 800bae6:	e00d      	b.n	800bb04 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	e002      	b.n	800baf6 <tcp_enqueue_flags+0x11e>
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	613b      	str	r3, [r7, #16]
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1f8      	bne.n	800baf0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	f003 0302 	and.w	r3, r3, #2
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <tcp_enqueue_flags+0x148>
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d006      	beq.n	800bb42 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	8b5b      	ldrh	r3, [r3, #26]
 800bb38:	f043 0320 	orr.w	r3, r3, #32
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fa fb08 	bl	800615c <pbuf_clen>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb56:	4413      	add	r3, r2
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00e      	beq.n	800bb88 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10a      	bne.n	800bb88 <tcp_enqueue_flags+0x1b0>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <tcp_enqueue_flags+0x1b0>
 800bb7a:	4b06      	ldr	r3, [pc, #24]	; (800bb94 <tcp_enqueue_flags+0x1bc>)
 800bb7c:	f240 4265 	movw	r2, #1125	; 0x465
 800bb80:	490b      	ldr	r1, [pc, #44]	; (800bbb0 <tcp_enqueue_flags+0x1d8>)
 800bb82:	4806      	ldr	r0, [pc, #24]	; (800bb9c <tcp_enqueue_flags+0x1c4>)
 800bb84:	f003 ff0e 	bl	800f9a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	08013128 	.word	0x08013128
 800bb98:	080135a8 	.word	0x080135a8
 800bb9c:	0801317c 	.word	0x0801317c
 800bba0:	08013600 	.word	0x08013600
 800bba4:	08013620 	.word	0x08013620
 800bba8:	0801365c 	.word	0x0801365c
 800bbac:	08013674 	.word	0x08013674
 800bbb0:	080136a0 	.word	0x080136a0

0800bbb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bbb4:	b5b0      	push	{r4, r5, r7, lr}
 800bbb6:	b08a      	sub	sp, #40	; 0x28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <tcp_output+0x1c>
 800bbc2:	4b8a      	ldr	r3, [pc, #552]	; (800bdec <tcp_output+0x238>)
 800bbc4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bbc8:	4989      	ldr	r1, [pc, #548]	; (800bdf0 <tcp_output+0x23c>)
 800bbca:	488a      	ldr	r0, [pc, #552]	; (800bdf4 <tcp_output+0x240>)
 800bbcc:	f003 feea 	bl	800f9a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7d1b      	ldrb	r3, [r3, #20]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d106      	bne.n	800bbe6 <tcp_output+0x32>
 800bbd8:	4b84      	ldr	r3, [pc, #528]	; (800bdec <tcp_output+0x238>)
 800bbda:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bbde:	4986      	ldr	r1, [pc, #536]	; (800bdf8 <tcp_output+0x244>)
 800bbe0:	4884      	ldr	r0, [pc, #528]	; (800bdf4 <tcp_output+0x240>)
 800bbe2:	f003 fedf 	bl	800f9a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bbe6:	4b85      	ldr	r3, [pc, #532]	; (800bdfc <tcp_output+0x248>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d101      	bne.n	800bbf4 <tcp_output+0x40>
    return ERR_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e1d1      	b.n	800bf98 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc00:	4293      	cmp	r3, r2
 800bc02:	bf28      	it	cs
 800bc04:	4613      	movcs	r3, r2
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10b      	bne.n	800bc2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8b5b      	ldrh	r3, [r3, #26]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 81ad 	beq.w	800bf7e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fddb 	bl	800c7e0 <tcp_send_empty_ack>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	e1b4      	b.n	800bf98 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	461a      	mov	r2, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7fe ffc4 	bl	800abc4 <tcp_route>
 800bc3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <tcp_output+0x96>
    return ERR_RTE;
 800bc44:	f06f 0303 	mvn.w	r3, #3
 800bc48:	e1a6      	b.n	800bf98 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <tcp_output+0xa4>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d111      	bne.n	800bc7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <tcp_output+0xb0>
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	3304      	adds	r3, #4
 800bc62:	e000      	b.n	800bc66 <tcp_output+0xb2>
 800bc64:	2300      	movs	r3, #0
 800bc66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <tcp_output+0xc0>
      return ERR_RTE;
 800bc6e:	f06f 0303 	mvn.w	r3, #3
 800bc72:	e191      	b.n	800bf98 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7f8 fedf 	bl	8004a46 <lwip_htonl>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc92:	8912      	ldrh	r2, [r2, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	69ba      	ldr	r2, [r7, #24]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d227      	bcs.n	800bcec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bca2:	461a      	mov	r2, r3
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d114      	bne.n	800bcd4 <tcp_output+0x120>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d110      	bne.n	800bcd4 <tcp_output+0x120>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10b      	bne.n	800bcd4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	8b5b      	ldrh	r3, [r3, #26]
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 8150 	beq.w	800bf82 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fd7c 	bl	800c7e0 <tcp_send_empty_ack>
 800bce8:	4603      	mov	r3, r0
 800bcea:	e155      	b.n	800bf98 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bcfa:	6a3b      	ldr	r3, [r7, #32]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 811f 	beq.w	800bf40 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800bd02:	e002      	b.n	800bd0a <tcp_output+0x156>
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	623b      	str	r3, [r7, #32]
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f8      	bne.n	800bd04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bd12:	e115      	b.n	800bf40 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	899b      	ldrh	r3, [r3, #12]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f8 fe7d 	bl	8004a1c <lwip_htons>
 800bd22:	4603      	mov	r3, r0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	f003 0304 	and.w	r3, r3, #4
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d006      	beq.n	800bd3c <tcp_output+0x188>
 800bd2e:	4b2f      	ldr	r3, [pc, #188]	; (800bdec <tcp_output+0x238>)
 800bd30:	f240 5236 	movw	r2, #1334	; 0x536
 800bd34:	4932      	ldr	r1, [pc, #200]	; (800be00 <tcp_output+0x24c>)
 800bd36:	482f      	ldr	r0, [pc, #188]	; (800bdf4 <tcp_output+0x240>)
 800bd38:	f003 fe34 	bl	800f9a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d01f      	beq.n	800bd84 <tcp_output+0x1d0>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8b5b      	ldrh	r3, [r3, #26]
 800bd48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d119      	bne.n	800bd84 <tcp_output+0x1d0>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00b      	beq.n	800bd70 <tcp_output+0x1bc>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d110      	bne.n	800bd84 <tcp_output+0x1d0>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd66:	891a      	ldrh	r2, [r3, #8]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d209      	bcs.n	800bd84 <tcp_output+0x1d0>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <tcp_output+0x1d0>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d901      	bls.n	800bd88 <tcp_output+0x1d4>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <tcp_output+0x1d6>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8b5b      	ldrh	r3, [r3, #26]
 800bd92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 80e7 	beq.w	800bf6a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7d1b      	ldrb	r3, [r3, #20]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d00d      	beq.n	800bdc0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	899b      	ldrh	r3, [r3, #12]
 800bdaa:	b29c      	uxth	r4, r3
 800bdac:	2010      	movs	r0, #16
 800bdae:	f7f8 fe35 	bl	8004a1c <lwip_htons>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	4322      	orrs	r2, r4
 800bdbc:	b292      	uxth	r2, r2
 800bdbe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdc6:	f000 f90b 	bl	800bfe0 <tcp_output_segment>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bdce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d016      	beq.n	800be04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	8b5b      	ldrh	r3, [r3, #26]
 800bdda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	835a      	strh	r2, [r3, #26]
      return err;
 800bde4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde8:	e0d6      	b.n	800bf98 <tcp_output+0x3e4>
 800bdea:	bf00      	nop
 800bdec:	08013128 	.word	0x08013128
 800bdf0:	080136c8 	.word	0x080136c8
 800bdf4:	0801317c 	.word	0x0801317c
 800bdf8:	080136e0 	.word	0x080136e0
 800bdfc:	200089f8 	.word	0x200089f8
 800be00:	08013708 	.word	0x08013708
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	2200      	movs	r2, #0
 800be08:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7d1b      	ldrb	r3, [r3, #20]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d006      	beq.n	800be28 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	8b5b      	ldrh	r3, [r3, #26]
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	b29a      	uxth	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7f8 fe09 	bl	8004a46 <lwip_htonl>
 800be34:	4604      	mov	r4, r0
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	891b      	ldrh	r3, [r3, #8]
 800be3a:	461d      	mov	r5, r3
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	899b      	ldrh	r3, [r3, #12]
 800be42:	b29b      	uxth	r3, r3
 800be44:	4618      	mov	r0, r3
 800be46:	f7f8 fde9 	bl	8004a1c <lwip_htons>
 800be4a:	4603      	mov	r3, r0
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	f003 0303 	and.w	r3, r3, #3
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <tcp_output+0x2a6>
 800be56:	2301      	movs	r3, #1
 800be58:	e000      	b.n	800be5c <tcp_output+0x2a8>
 800be5a:	2300      	movs	r3, #0
 800be5c:	442b      	add	r3, r5
 800be5e:	4423      	add	r3, r4
 800be60:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	da02      	bge.n	800be74 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	891b      	ldrh	r3, [r3, #8]
 800be78:	461c      	mov	r4, r3
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	899b      	ldrh	r3, [r3, #12]
 800be80:	b29b      	uxth	r3, r3
 800be82:	4618      	mov	r0, r3
 800be84:	f7f8 fdca 	bl	8004a1c <lwip_htons>
 800be88:	4603      	mov	r3, r0
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	f003 0303 	and.w	r3, r3, #3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <tcp_output+0x2e4>
 800be94:	2301      	movs	r3, #1
 800be96:	e000      	b.n	800be9a <tcp_output+0x2e6>
 800be98:	2300      	movs	r3, #0
 800be9a:	4423      	add	r3, r4
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d049      	beq.n	800bf34 <tcp_output+0x380>
      seg->next = NULL;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <tcp_output+0x306>
        pcb->unacked = seg;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb2:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	623b      	str	r3, [r7, #32]
 800beb8:	e03f      	b.n	800bf3a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7f8 fdc0 	bl	8004a46 <lwip_htonl>
 800bec6:	4604      	mov	r4, r0
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7f8 fdb9 	bl	8004a46 <lwip_htonl>
 800bed4:	4603      	mov	r3, r0
 800bed6:	1ae3      	subs	r3, r4, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	da24      	bge.n	800bf26 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3370      	adds	r3, #112	; 0x70
 800bee0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bee2:	e002      	b.n	800beea <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d011      	beq.n	800bf16 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	4618      	mov	r0, r3
 800befc:	f7f8 fda3 	bl	8004a46 <lwip_htonl>
 800bf00:	4604      	mov	r4, r0
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f8 fd9c 	bl	8004a46 <lwip_htonl>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dbe6      	blt.n	800bee4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e009      	b.n	800bf3a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf2a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	623b      	str	r3, [r7, #32]
 800bf32:	e002      	b.n	800bf3a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bf34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf36:	f7fb fd68 	bl	8007a0a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d012      	beq.n	800bf6c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f8 fd7a 	bl	8004a46 <lwip_htonl>
 800bf52:	4602      	mov	r2, r0
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5c:	8912      	ldrh	r2, [r2, #8]
 800bf5e:	4413      	add	r3, r2
  while (seg != NULL &&
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	f4bf aed6 	bcs.w	800bd14 <tcp_output+0x160>
 800bf68:	e000      	b.n	800bf6c <tcp_output+0x3b8>
      break;
 800bf6a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d108      	bne.n	800bf86 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bf7c:	e004      	b.n	800bf88 <tcp_output+0x3d4>
    goto output_done;
 800bf7e:	bf00      	nop
 800bf80:	e002      	b.n	800bf88 <tcp_output+0x3d4>
    goto output_done;
 800bf82:	bf00      	nop
 800bf84:	e000      	b.n	800bf88 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bf86:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	8b5b      	ldrh	r3, [r3, #26]
 800bf8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3728      	adds	r7, #40	; 0x28
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bfa0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <tcp_output_segment_busy+0x1c>
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <tcp_output_segment_busy+0x34>)
 800bfb0:	f240 529a 	movw	r2, #1434	; 0x59a
 800bfb4:	4908      	ldr	r1, [pc, #32]	; (800bfd8 <tcp_output_segment_busy+0x38>)
 800bfb6:	4809      	ldr	r0, [pc, #36]	; (800bfdc <tcp_output_segment_busy+0x3c>)
 800bfb8:	f003 fcf4 	bl	800f9a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	7b9b      	ldrb	r3, [r3, #14]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d001      	beq.n	800bfca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08013128 	.word	0x08013128
 800bfd8:	08013720 	.word	0x08013720
 800bfdc:	0801317c 	.word	0x0801317c

0800bfe0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bfe0:	b5b0      	push	{r4, r5, r7, lr}
 800bfe2:	b08c      	sub	sp, #48	; 0x30
 800bfe4:	af04      	add	r7, sp, #16
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <tcp_output_segment+0x20>
 800bff2:	4b63      	ldr	r3, [pc, #396]	; (800c180 <tcp_output_segment+0x1a0>)
 800bff4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bff8:	4962      	ldr	r1, [pc, #392]	; (800c184 <tcp_output_segment+0x1a4>)
 800bffa:	4863      	ldr	r0, [pc, #396]	; (800c188 <tcp_output_segment+0x1a8>)
 800bffc:	f003 fcd2 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <tcp_output_segment+0x34>
 800c006:	4b5e      	ldr	r3, [pc, #376]	; (800c180 <tcp_output_segment+0x1a0>)
 800c008:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c00c:	495f      	ldr	r1, [pc, #380]	; (800c18c <tcp_output_segment+0x1ac>)
 800c00e:	485e      	ldr	r0, [pc, #376]	; (800c188 <tcp_output_segment+0x1a8>)
 800c010:	f003 fcc8 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_output_segment+0x48>
 800c01a:	4b59      	ldr	r3, [pc, #356]	; (800c180 <tcp_output_segment+0x1a0>)
 800c01c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c020:	495b      	ldr	r1, [pc, #364]	; (800c190 <tcp_output_segment+0x1b0>)
 800c022:	4859      	ldr	r0, [pc, #356]	; (800c188 <tcp_output_segment+0x1a8>)
 800c024:	f003 fcbe 	bl	800f9a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f7ff ffb9 	bl	800bfa0 <tcp_output_segment_busy>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	e09f      	b.n	800c178 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	691c      	ldr	r4, [r3, #16]
 800c040:	4610      	mov	r0, r2
 800c042:	f7f8 fd00 	bl	8004a46 <lwip_htonl>
 800c046:	4603      	mov	r3, r0
 800c048:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	691c      	ldr	r4, [r3, #16]
 800c052:	4610      	mov	r0, r2
 800c054:	f7f8 fce2 	bl	8004a1c <lwip_htons>
 800c058:	4603      	mov	r3, r0
 800c05a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c064:	441a      	add	r2, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	3314      	adds	r3, #20
 800c070:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	7b1b      	ldrb	r3, [r3, #12]
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d015      	beq.n	800c0aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	3304      	adds	r3, #4
 800c082:	461a      	mov	r2, r3
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c08a:	f7fc f8cd 	bl	8008228 <tcp_eff_send_mss_netif>
 800c08e:	4603      	mov	r3, r0
 800c090:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c092:	8b7b      	ldrh	r3, [r7, #26]
 800c094:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c098:	4618      	mov	r0, r3
 800c09a:	f7f8 fcd4 	bl	8004a46 <lwip_htonl>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	da02      	bge.n	800c0ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10c      	bne.n	800c0dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c0c2:	4b34      	ldr	r3, [pc, #208]	; (800c194 <tcp_output_segment+0x1b4>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f8 fcb8 	bl	8004a46 <lwip_htonl>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	691a      	ldr	r2, [r3, #16]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	8959      	ldrh	r1, [r3, #10]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	8b3a      	ldrh	r2, [r7, #24]
 800c0f6:	1a8a      	subs	r2, r1, r2
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	8919      	ldrh	r1, [r3, #8]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	8b3a      	ldrh	r2, [r7, #24]
 800c108:	1a8a      	subs	r2, r1, r2
 800c10a:	b292      	uxth	r2, r2
 800c10c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	6912      	ldr	r2, [r2, #16]
 800c116:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	2200      	movs	r2, #0
 800c11e:	741a      	strb	r2, [r3, #16]
 800c120:	2200      	movs	r2, #0
 800c122:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	f103 0214 	add.w	r2, r3, #20
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	7b1b      	ldrb	r3, [r3, #12]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	4413      	add	r3, r2
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d006      	beq.n	800c14c <tcp_output_segment+0x16c>
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <tcp_output_segment+0x1a0>)
 800c140:	f240 621c 	movw	r2, #1564	; 0x61c
 800c144:	4914      	ldr	r1, [pc, #80]	; (800c198 <tcp_output_segment+0x1b8>)
 800c146:	4810      	ldr	r0, [pc, #64]	; (800c188 <tcp_output_segment+0x1a8>)
 800c148:	f003 fc2c 	bl	800f9a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6858      	ldr	r0, [r3, #4]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	1d1c      	adds	r4, r3, #4
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	7add      	ldrb	r5, [r3, #11]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	7a9b      	ldrb	r3, [r3, #10]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	9202      	str	r2, [sp, #8]
 800c162:	2206      	movs	r2, #6
 800c164:	9201      	str	r2, [sp, #4]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	462b      	mov	r3, r5
 800c16a:	4622      	mov	r2, r4
 800c16c:	f002 faf8 	bl	800e760 <ip4_output_if>
 800c170:	4603      	mov	r3, r0
 800c172:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3720      	adds	r7, #32
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bdb0      	pop	{r4, r5, r7, pc}
 800c180:	08013128 	.word	0x08013128
 800c184:	08013748 	.word	0x08013748
 800c188:	0801317c 	.word	0x0801317c
 800c18c:	08013768 	.word	0x08013768
 800c190:	08013788 	.word	0x08013788
 800c194:	200089a8 	.word	0x200089a8
 800c198:	080137ac 	.word	0x080137ac

0800c19c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c19c:	b5b0      	push	{r4, r5, r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <tcp_rexmit_rto_prepare+0x1c>
 800c1aa:	4b36      	ldr	r3, [pc, #216]	; (800c284 <tcp_rexmit_rto_prepare+0xe8>)
 800c1ac:	f240 6263 	movw	r2, #1635	; 0x663
 800c1b0:	4935      	ldr	r1, [pc, #212]	; (800c288 <tcp_rexmit_rto_prepare+0xec>)
 800c1b2:	4836      	ldr	r0, [pc, #216]	; (800c28c <tcp_rexmit_rto_prepare+0xf0>)
 800c1b4:	f003 fbf6 	bl	800f9a4 <iprintf>

  if (pcb->unacked == NULL) {
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d102      	bne.n	800c1c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c1c0:	f06f 0305 	mvn.w	r3, #5
 800c1c4:	e059      	b.n	800c27a <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	e00b      	b.n	800c1e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f7ff fee6 	bl	800bfa0 <tcp_output_segment_busy>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c1da:	f06f 0305 	mvn.w	r3, #5
 800c1de:	e04c      	b.n	800c27a <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1ef      	bne.n	800c1ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff fed6 	bl	800bfa0 <tcp_output_segment_busy>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c1fa:	f06f 0305 	mvn.w	r3, #5
 800c1fe:	e03c      	b.n	800c27a <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	895a      	ldrh	r2, [r3, #10]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	8b5b      	ldrh	r3, [r3, #26]
 800c22c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c230:	b29a      	uxth	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7f8 fc02 	bl	8004a46 <lwip_htonl>
 800c242:	4604      	mov	r4, r0
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	891b      	ldrh	r3, [r3, #8]
 800c248:	461d      	mov	r5, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	899b      	ldrh	r3, [r3, #12]
 800c250:	b29b      	uxth	r3, r3
 800c252:	4618      	mov	r0, r3
 800c254:	f7f8 fbe2 	bl	8004a1c <lwip_htons>
 800c258:	4603      	mov	r3, r0
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 0303 	and.w	r3, r3, #3
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <tcp_rexmit_rto_prepare+0xcc>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <tcp_rexmit_rto_prepare+0xce>
 800c268:	2300      	movs	r3, #0
 800c26a:	442b      	add	r3, r5
 800c26c:	18e2      	adds	r2, r4, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bdb0      	pop	{r4, r5, r7, pc}
 800c282:	bf00      	nop
 800c284:	08013128 	.word	0x08013128
 800c288:	080137c0 	.word	0x080137c0
 800c28c:	0801317c 	.word	0x0801317c

0800c290 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <tcp_rexmit_rto_commit+0x1c>
 800c29e:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <tcp_rexmit_rto_commit+0x44>)
 800c2a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c2a4:	490c      	ldr	r1, [pc, #48]	; (800c2d8 <tcp_rexmit_rto_commit+0x48>)
 800c2a6:	480d      	ldr	r0, [pc, #52]	; (800c2dc <tcp_rexmit_rto_commit+0x4c>)
 800c2a8:	f003 fb7c 	bl	800f9a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2b2:	2bff      	cmp	r3, #255	; 0xff
 800c2b4:	d007      	beq.n	800c2c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2bc:	3301      	adds	r3, #1
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff fc74 	bl	800bbb4 <tcp_output>
}
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	08013128 	.word	0x08013128
 800c2d8:	080137e4 	.word	0x080137e4
 800c2dc:	0801317c 	.word	0x0801317c

0800c2e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <tcp_rexmit_rto+0x1c>
 800c2ee:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <tcp_rexmit_rto+0x38>)
 800c2f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c2f4:	4909      	ldr	r1, [pc, #36]	; (800c31c <tcp_rexmit_rto+0x3c>)
 800c2f6:	480a      	ldr	r0, [pc, #40]	; (800c320 <tcp_rexmit_rto+0x40>)
 800c2f8:	f003 fb54 	bl	800f9a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff ff4d 	bl	800c19c <tcp_rexmit_rto_prepare>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d102      	bne.n	800c30e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff ffc1 	bl	800c290 <tcp_rexmit_rto_commit>
  }
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	08013128 	.word	0x08013128
 800c31c:	08013808 	.word	0x08013808
 800c320:	0801317c 	.word	0x0801317c

0800c324 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c324:	b590      	push	{r4, r7, lr}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <tcp_rexmit+0x1c>
 800c332:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <tcp_rexmit+0xcc>)
 800c334:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c338:	492e      	ldr	r1, [pc, #184]	; (800c3f4 <tcp_rexmit+0xd0>)
 800c33a:	482f      	ldr	r0, [pc, #188]	; (800c3f8 <tcp_rexmit+0xd4>)
 800c33c:	f003 fb32 	bl	800f9a4 <iprintf>

  if (pcb->unacked == NULL) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c348:	f06f 0305 	mvn.w	r3, #5
 800c34c:	e04c      	b.n	800c3e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c352:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c354:	68b8      	ldr	r0, [r7, #8]
 800c356:	f7ff fe23 	bl	800bfa0 <tcp_output_segment_busy>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c360:	f06f 0305 	mvn.w	r3, #5
 800c364:	e040      	b.n	800c3e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	336c      	adds	r3, #108	; 0x6c
 800c372:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c374:	e002      	b.n	800c37c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d011      	beq.n	800c3a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f8 fb5a 	bl	8004a46 <lwip_htonl>
 800c392:	4604      	mov	r4, r0
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7f8 fb53 	bl	8004a46 <lwip_htonl>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dbe6      	blt.n	800c376 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d103      	bne.n	800c3c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3cc:	2bff      	cmp	r3, #255	; 0xff
 800c3ce:	d007      	beq.n	800c3e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd90      	pop	{r4, r7, pc}
 800c3f0:	08013128 	.word	0x08013128
 800c3f4:	08013824 	.word	0x08013824
 800c3f8:	0801317c 	.word	0x0801317c

0800c3fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <tcp_rexmit_fast+0x1c>
 800c40a:	4b2a      	ldr	r3, [pc, #168]	; (800c4b4 <tcp_rexmit_fast+0xb8>)
 800c40c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c410:	4929      	ldr	r1, [pc, #164]	; (800c4b8 <tcp_rexmit_fast+0xbc>)
 800c412:	482a      	ldr	r0, [pc, #168]	; (800c4bc <tcp_rexmit_fast+0xc0>)
 800c414:	f003 fac6 	bl	800f9a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d045      	beq.n	800c4ac <tcp_rexmit_fast+0xb0>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	8b5b      	ldrh	r3, [r3, #26]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d13f      	bne.n	800c4ac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff ff79 	bl	800c324 <tcp_rexmit>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d139      	bne.n	800c4ac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c444:	4293      	cmp	r3, r2
 800c446:	bf28      	it	cs
 800c448:	4613      	movcs	r3, r2
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	da00      	bge.n	800c452 <tcp_rexmit_fast+0x56>
 800c450:	3301      	adds	r3, #1
 800c452:	105b      	asrs	r3, r3, #1
 800c454:	b29a      	uxth	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d206      	bcs.n	800c47c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c486:	4619      	mov	r1, r3
 800c488:	0049      	lsls	r1, r1, #1
 800c48a:	440b      	add	r3, r1
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	4413      	add	r3, r2
 800c490:	b29a      	uxth	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	8b5b      	ldrh	r3, [r3, #26]
 800c49c:	f043 0304 	orr.w	r3, r3, #4
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c4ac:	bf00      	nop
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08013128 	.word	0x08013128
 800c4b8:	0801383c 	.word	0x0801383c
 800c4bc:	0801317c 	.word	0x0801317c

0800c4c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	817b      	strh	r3, [r7, #10]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c4d2:	897a      	ldrh	r2, [r7, #10]
 800c4d4:	893b      	ldrh	r3, [r7, #8]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	3314      	adds	r3, #20
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	2022      	movs	r0, #34	; 0x22
 800c4e6:	f7f9 facd 	bl	8005a84 <pbuf_alloc>
 800c4ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d04d      	beq.n	800c58e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c4f2:	897b      	ldrh	r3, [r7, #10]
 800c4f4:	3313      	adds	r3, #19
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	8952      	ldrh	r2, [r2, #10]
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	db06      	blt.n	800c50c <tcp_output_alloc_header_common+0x4c>
 800c4fe:	4b26      	ldr	r3, [pc, #152]	; (800c598 <tcp_output_alloc_header_common+0xd8>)
 800c500:	f240 7223 	movw	r2, #1827	; 0x723
 800c504:	4925      	ldr	r1, [pc, #148]	; (800c59c <tcp_output_alloc_header_common+0xdc>)
 800c506:	4826      	ldr	r0, [pc, #152]	; (800c5a0 <tcp_output_alloc_header_common+0xe0>)
 800c508:	f003 fa4c 	bl	800f9a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c512:	8c3b      	ldrh	r3, [r7, #32]
 800c514:	4618      	mov	r0, r3
 800c516:	f7f8 fa81 	bl	8004a1c <lwip_htons>
 800c51a:	4603      	mov	r3, r0
 800c51c:	461a      	mov	r2, r3
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c524:	4618      	mov	r0, r3
 800c526:	f7f8 fa79 	bl	8004a1c <lwip_htons>
 800c52a:	4603      	mov	r3, r0
 800c52c:	461a      	mov	r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7f8 fa84 	bl	8004a46 <lwip_htonl>
 800c53e:	4602      	mov	r2, r0
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c544:	897b      	ldrh	r3, [r7, #10]
 800c546:	089b      	lsrs	r3, r3, #2
 800c548:	b29b      	uxth	r3, r3
 800c54a:	3305      	adds	r3, #5
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	031b      	lsls	r3, r3, #12
 800c550:	b29a      	uxth	r2, r3
 800c552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c556:	b29b      	uxth	r3, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7f8 fa5d 	bl	8004a1c <lwip_htons>
 800c562:	4603      	mov	r3, r0
 800c564:	461a      	mov	r2, r3
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c56a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f8 fa55 	bl	8004a1c <lwip_htons>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2200      	movs	r2, #0
 800c57e:	741a      	strb	r2, [r3, #16]
 800c580:	2200      	movs	r2, #0
 800c582:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2200      	movs	r2, #0
 800c588:	749a      	strb	r2, [r3, #18]
 800c58a:	2200      	movs	r2, #0
 800c58c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c58e:	697b      	ldr	r3, [r7, #20]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	08013128 	.word	0x08013128
 800c59c:	0801385c 	.word	0x0801385c
 800c5a0:	0801317c 	.word	0x0801317c

0800c5a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c5a4:	b5b0      	push	{r4, r5, r7, lr}
 800c5a6:	b08a      	sub	sp, #40	; 0x28
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	817b      	strh	r3, [r7, #10]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <tcp_output_alloc_header+0x26>
 800c5bc:	4b15      	ldr	r3, [pc, #84]	; (800c614 <tcp_output_alloc_header+0x70>)
 800c5be:	f240 7242 	movw	r2, #1858	; 0x742
 800c5c2:	4915      	ldr	r1, [pc, #84]	; (800c618 <tcp_output_alloc_header+0x74>)
 800c5c4:	4815      	ldr	r0, [pc, #84]	; (800c61c <tcp_output_alloc_header+0x78>)
 800c5c6:	f003 f9ed 	bl	800f9a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	8adb      	ldrh	r3, [r3, #22]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	8b12      	ldrh	r2, [r2, #24]
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c5da:	893d      	ldrh	r5, [r7, #8]
 800c5dc:	897c      	ldrh	r4, [r7, #10]
 800c5de:	9103      	str	r1, [sp, #12]
 800c5e0:	2110      	movs	r1, #16
 800c5e2:	9102      	str	r1, [sp, #8]
 800c5e4:	9201      	str	r2, [sp, #4]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7ff ff67 	bl	800c4c0 <tcp_output_alloc_header_common>
 800c5f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c602:	441a      	add	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c608:	697b      	ldr	r3, [r7, #20]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bdb0      	pop	{r4, r5, r7, pc}
 800c612:	bf00      	nop
 800c614:	08013128 	.word	0x08013128
 800c618:	0801388c 	.word	0x0801388c
 800c61c:	0801317c 	.word	0x0801317c

0800c620 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4611      	mov	r1, r2
 800c62c:	461a      	mov	r2, r3
 800c62e:	460b      	mov	r3, r1
 800c630:	71fb      	strb	r3, [r7, #7]
 800c632:	4613      	mov	r3, r2
 800c634:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d106      	bne.n	800c64e <tcp_output_fill_options+0x2e>
 800c640:	4b13      	ldr	r3, [pc, #76]	; (800c690 <tcp_output_fill_options+0x70>)
 800c642:	f240 7256 	movw	r2, #1878	; 0x756
 800c646:	4913      	ldr	r1, [pc, #76]	; (800c694 <tcp_output_fill_options+0x74>)
 800c648:	4813      	ldr	r0, [pc, #76]	; (800c698 <tcp_output_fill_options+0x78>)
 800c64a:	f003 f9ab 	bl	800f9a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	3314      	adds	r3, #20
 800c658:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	f103 0214 	add.w	r2, r3, #20
 800c660:	8bfb      	ldrh	r3, [r7, #30]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4619      	mov	r1, r3
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	440b      	add	r3, r1
 800c670:	4413      	add	r3, r2
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	429a      	cmp	r2, r3
 800c676:	d006      	beq.n	800c686 <tcp_output_fill_options+0x66>
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <tcp_output_fill_options+0x70>)
 800c67a:	f240 7275 	movw	r2, #1909	; 0x775
 800c67e:	4907      	ldr	r1, [pc, #28]	; (800c69c <tcp_output_fill_options+0x7c>)
 800c680:	4805      	ldr	r0, [pc, #20]	; (800c698 <tcp_output_fill_options+0x78>)
 800c682:	f003 f98f 	bl	800f9a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c686:	bf00      	nop
 800c688:	3720      	adds	r7, #32
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	08013128 	.word	0x08013128
 800c694:	080138b4 	.word	0x080138b4
 800c698:	0801317c 	.word	0x0801317c
 800c69c:	080137ac 	.word	0x080137ac

0800c6a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08a      	sub	sp, #40	; 0x28
 800c6a4:	af04      	add	r7, sp, #16
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
 800c6ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <tcp_output_control_segment+0x22>
 800c6b4:	4b1c      	ldr	r3, [pc, #112]	; (800c728 <tcp_output_control_segment+0x88>)
 800c6b6:	f240 7287 	movw	r2, #1927	; 0x787
 800c6ba:	491c      	ldr	r1, [pc, #112]	; (800c72c <tcp_output_control_segment+0x8c>)
 800c6bc:	481c      	ldr	r0, [pc, #112]	; (800c730 <tcp_output_control_segment+0x90>)
 800c6be:	f003 f971 	bl	800f9a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7fe fa7c 	bl	800abc4 <tcp_route>
 800c6cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d102      	bne.n	800c6da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c6d4:	23fc      	movs	r3, #252	; 0xfc
 800c6d6:	75fb      	strb	r3, [r7, #23]
 800c6d8:	e01c      	b.n	800c714 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d006      	beq.n	800c6ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7adb      	ldrb	r3, [r3, #11]
 800c6e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	7a9b      	ldrb	r3, [r3, #10]
 800c6ea:	757b      	strb	r3, [r7, #21]
 800c6ec:	e003      	b.n	800c6f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c6ee:	23ff      	movs	r3, #255	; 0xff
 800c6f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c6f6:	7dba      	ldrb	r2, [r7, #22]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	9302      	str	r3, [sp, #8]
 800c6fc:	2306      	movs	r3, #6
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	7d7b      	ldrb	r3, [r7, #21]
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	4613      	mov	r3, r2
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	6879      	ldr	r1, [r7, #4]
 800c70a:	68b8      	ldr	r0, [r7, #8]
 800c70c:	f002 f828 	bl	800e760 <ip4_output_if>
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c714:	68b8      	ldr	r0, [r7, #8]
 800c716:	f7f9 fc99 	bl	800604c <pbuf_free>
  return err;
 800c71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	08013128 	.word	0x08013128
 800c72c:	080138dc 	.word	0x080138dc
 800c730:	0801317c 	.word	0x0801317c

0800c734 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c734:	b590      	push	{r4, r7, lr}
 800c736:	b08b      	sub	sp, #44	; 0x2c
 800c738:	af04      	add	r7, sp, #16
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d106      	bne.n	800c756 <tcp_rst+0x22>
 800c748:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <tcp_rst+0x98>)
 800c74a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c74e:	4920      	ldr	r1, [pc, #128]	; (800c7d0 <tcp_rst+0x9c>)
 800c750:	4820      	ldr	r0, [pc, #128]	; (800c7d4 <tcp_rst+0xa0>)
 800c752:	f003 f927 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <tcp_rst+0x36>
 800c75c:	4b1b      	ldr	r3, [pc, #108]	; (800c7cc <tcp_rst+0x98>)
 800c75e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c762:	491d      	ldr	r1, [pc, #116]	; (800c7d8 <tcp_rst+0xa4>)
 800c764:	481b      	ldr	r0, [pc, #108]	; (800c7d4 <tcp_rst+0xa0>)
 800c766:	f003 f91d 	bl	800f9a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c76a:	2300      	movs	r3, #0
 800c76c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c76e:	f246 0308 	movw	r3, #24584	; 0x6008
 800c772:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	b29c      	uxth	r4, r3
 800c778:	68b8      	ldr	r0, [r7, #8]
 800c77a:	f7f8 f964 	bl	8004a46 <lwip_htonl>
 800c77e:	4602      	mov	r2, r0
 800c780:	8abb      	ldrh	r3, [r7, #20]
 800c782:	9303      	str	r3, [sp, #12]
 800c784:	2314      	movs	r3, #20
 800c786:	9302      	str	r3, [sp, #8]
 800c788:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	4613      	mov	r3, r2
 800c792:	2200      	movs	r2, #0
 800c794:	4621      	mov	r1, r4
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff fe92 	bl	800c4c0 <tcp_output_alloc_header_common>
 800c79c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d103      	bne.n	800c7ac <tcp_rst+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 800c7a4:	480d      	ldr	r0, [pc, #52]	; (800c7dc <tcp_rst+0xa8>)
 800c7a6:	f003 f999 	bl	800fadc <puts>
    return;
 800c7aa:	e00b      	b.n	800c7c4 <tcp_rst+0x90>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	6939      	ldr	r1, [r7, #16]
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f7ff ff34 	bl	800c620 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	6939      	ldr	r1, [r7, #16]
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff ff6e 	bl	800c6a0 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c7c4:	371c      	adds	r7, #28
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	08013128 	.word	0x08013128
 800c7d0:	08013908 	.word	0x08013908
 800c7d4:	0801317c 	.word	0x0801317c
 800c7d8:	08013924 	.word	0x08013924
 800c7dc:	08013940 	.word	0x08013940

0800c7e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c7e0:	b590      	push	{r4, r7, lr}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <tcp_send_empty_ack+0x24>
 800c7f6:	4b28      	ldr	r3, [pc, #160]	; (800c898 <tcp_send_empty_ack+0xb8>)
 800c7f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c7fc:	4927      	ldr	r1, [pc, #156]	; (800c89c <tcp_send_empty_ack+0xbc>)
 800c7fe:	4828      	ldr	r0, [pc, #160]	; (800c8a0 <tcp_send_empty_ack+0xc0>)
 800c800:	f003 f8d0 	bl	800f9a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c804:	7dfb      	ldrb	r3, [r7, #23]
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	f003 0304 	and.w	r3, r3, #4
 800c80e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c810:	7d7b      	ldrb	r3, [r7, #21]
 800c812:	b29c      	uxth	r4, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c818:	4618      	mov	r0, r3
 800c81a:	f7f8 f914 	bl	8004a46 <lwip_htonl>
 800c81e:	4603      	mov	r3, r0
 800c820:	2200      	movs	r2, #0
 800c822:	4621      	mov	r1, r4
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff febd 	bl	800c5a4 <tcp_output_alloc_header>
 800c82a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d109      	bne.n	800c846 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	8b5b      	ldrh	r3, [r3, #26]
 800c836:	f043 0303 	orr.w	r3, r3, #3
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c840:	f06f 0301 	mvn.w	r3, #1
 800c844:	e023      	b.n	800c88e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c846:	7dbb      	ldrb	r3, [r7, #22]
 800c848:	7dfa      	ldrb	r2, [r7, #23]
 800c84a:	6939      	ldr	r1, [r7, #16]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fee7 	bl	800c620 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	3304      	adds	r3, #4
 800c858:	6939      	ldr	r1, [r7, #16]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff ff20 	bl	800c6a0 <tcp_output_control_segment>
 800c860:	4603      	mov	r3, r0
 800c862:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d007      	beq.n	800c87c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8b5b      	ldrh	r3, [r3, #26]
 800c870:	f043 0303 	orr.w	r3, r3, #3
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	835a      	strh	r2, [r3, #26]
 800c87a:	e006      	b.n	800c88a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8b5b      	ldrh	r3, [r3, #26]
 800c880:	f023 0303 	bic.w	r3, r3, #3
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	bd90      	pop	{r4, r7, pc}
 800c896:	bf00      	nop
 800c898:	08013128 	.word	0x08013128
 800c89c:	0801396c 	.word	0x0801396c
 800c8a0:	0801317c 	.word	0x0801317c

0800c8a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c8a4:	b590      	push	{r4, r7, lr}
 800c8a6:	b089      	sub	sp, #36	; 0x24
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d106      	bne.n	800c8c4 <tcp_keepalive+0x20>
 800c8b6:	4b32      	ldr	r3, [pc, #200]	; (800c980 <tcp_keepalive+0xdc>)
 800c8b8:	f640 0224 	movw	r2, #2084	; 0x824
 800c8bc:	4931      	ldr	r1, [pc, #196]	; (800c984 <tcp_keepalive+0xe0>)
 800c8be:	4832      	ldr	r0, [pc, #200]	; (800c988 <tcp_keepalive+0xe4>)
 800c8c0:	f003 f870 	bl	800f9a4 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 800c8c4:	4831      	ldr	r0, [pc, #196]	; (800c98c <tcp_keepalive+0xe8>)
 800c8c6:	f003 f86d 	bl	800f9a4 <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	0a1b      	lsrs	r3, r3, #8
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	461a      	mov	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	0c1b      	lsrs	r3, r3, #16
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	0e1b      	lsrs	r3, r3, #24
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	4827      	ldr	r0, [pc, #156]	; (800c990 <tcp_keepalive+0xec>)
 800c8f4:	f003 f856 	bl	800f9a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800c8f8:	200a      	movs	r0, #10
 800c8fa:	f003 f86b 	bl	800f9d4 <putchar>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 800c8fe:	4b25      	ldr	r3, [pc, #148]	; (800c994 <tcp_keepalive+0xf0>)
 800c900:	6819      	ldr	r1, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c90c:	4822      	ldr	r0, [pc, #136]	; (800c998 <tcp_keepalive+0xf4>)
 800c90e:	f003 f849 	bl	800f9a4 <iprintf>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	b29c      	uxth	r4, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c91a:	3b01      	subs	r3, #1
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f8 f892 	bl	8004a46 <lwip_htonl>
 800c922:	4603      	mov	r3, r0
 800c924:	2200      	movs	r2, #0
 800c926:	4621      	mov	r1, r4
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7ff fe3b 	bl	800c5a4 <tcp_output_alloc_header>
 800c92e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d105      	bne.n	800c942 <tcp_keepalive+0x9e>
    LWIP_DEBUGF(TCP_DEBUG,
 800c936:	4819      	ldr	r0, [pc, #100]	; (800c99c <tcp_keepalive+0xf8>)
 800c938:	f003 f8d0 	bl	800fadc <puts>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c93c:	f04f 33ff 	mov.w	r3, #4294967295
 800c940:	e01a      	b.n	800c978 <tcp_keepalive+0xd4>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2200      	movs	r2, #0
 800c946:	6939      	ldr	r1, [r7, #16]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fe69 	bl	800c620 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3304      	adds	r3, #4
 800c954:	6939      	ldr	r1, [r7, #16]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fea2 	bl	800c6a0 <tcp_output_control_segment>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c964:	1e59      	subs	r1, r3, #1
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c96e:	480c      	ldr	r0, [pc, #48]	; (800c9a0 <tcp_keepalive+0xfc>)
 800c970:	f003 f818 	bl	800f9a4 <iprintf>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	371c      	adds	r7, #28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd90      	pop	{r4, r7, pc}
 800c980:	08013128 	.word	0x08013128
 800c984:	0801398c 	.word	0x0801398c
 800c988:	0801317c 	.word	0x0801317c
 800c98c:	080139a8 	.word	0x080139a8
 800c990:	080139d4 	.word	0x080139d4
 800c994:	200089a8 	.word	0x200089a8
 800c998:	080139e4 	.word	0x080139e4
 800c99c:	08013a28 	.word	0x08013a28
 800c9a0:	08013a5c 	.word	0x08013a5c

0800c9a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c9a4:	b590      	push	{r4, r7, lr}
 800c9a6:	b08d      	sub	sp, #52	; 0x34
 800c9a8:	af02      	add	r7, sp, #8
 800c9aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <tcp_zero_window_probe+0x22>
 800c9b8:	4b66      	ldr	r3, [pc, #408]	; (800cb54 <tcp_zero_window_probe+0x1b0>)
 800c9ba:	f640 024f 	movw	r2, #2127	; 0x84f
 800c9be:	4966      	ldr	r1, [pc, #408]	; (800cb58 <tcp_zero_window_probe+0x1b4>)
 800c9c0:	4866      	ldr	r0, [pc, #408]	; (800cb5c <tcp_zero_window_probe+0x1b8>)
 800c9c2:	f002 ffef 	bl	800f9a4 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 800c9c6:	4866      	ldr	r0, [pc, #408]	; (800cb60 <tcp_zero_window_probe+0x1bc>)
 800c9c8:	f002 ffec 	bl	800f9a4 <iprintf>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	0a1b      	lsrs	r3, r3, #8
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	0c1b      	lsrs	r3, r3, #16
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	0e1b      	lsrs	r3, r3, #24
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	485b      	ldr	r0, [pc, #364]	; (800cb64 <tcp_zero_window_probe+0x1c0>)
 800c9f6:	f002 ffd5 	bl	800f9a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800c9fa:	200a      	movs	r0, #10
 800c9fc:	f002 ffea 	bl	800f9d4 <putchar>

  LWIP_DEBUGF(TCP_DEBUG,
 800ca00:	4b59      	ldr	r3, [pc, #356]	; (800cb68 <tcp_zero_window_probe+0x1c4>)
 800ca02:	6819      	ldr	r1, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a1a      	ldr	r2, [r3, #32]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca0e:	4857      	ldr	r0, [pc, #348]	; (800cb6c <tcp_zero_window_probe+0x1c8>)
 800ca10:	f002 ffc8 	bl	800f9a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca18:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <tcp_zero_window_probe+0x80>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e093      	b.n	800cb4c <tcp_zero_window_probe+0x1a8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca2a:	2bff      	cmp	r3, #255	; 0xff
 800ca2c:	d007      	beq.n	800ca3e <tcp_zero_window_probe+0x9a>
    ++pcb->persist_probe;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca34:	3301      	adds	r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	899b      	ldrh	r3, [r3, #12]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7f7 ffe8 	bl	8004a1c <lwip_htons>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d005      	beq.n	800ca64 <tcp_zero_window_probe+0xc0>
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	891b      	ldrh	r3, [r3, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <tcp_zero_window_probe+0xc0>
 800ca60:	2301      	movs	r3, #1
 800ca62:	e000      	b.n	800ca66 <tcp_zero_window_probe+0xc2>
 800ca64:	2300      	movs	r3, #0
 800ca66:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ca68:	7ffb      	ldrb	r3, [r7, #31]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	bf0c      	ite	eq
 800ca6e:	2301      	moveq	r3, #1
 800ca70:	2300      	movne	r3, #0
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ca76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca7a:	b299      	uxth	r1, r3
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	8bba      	ldrh	r2, [r7, #28]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fd8d 	bl	800c5a4 <tcp_output_alloc_header>
 800ca8a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <tcp_zero_window_probe+0xfa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 800ca92:	4837      	ldr	r0, [pc, #220]	; (800cb70 <tcp_zero_window_probe+0x1cc>)
 800ca94:	f003 f822 	bl	800fadc <puts>
    return ERR_MEM;
 800ca98:	f04f 33ff 	mov.w	r3, #4294967295
 800ca9c:	e056      	b.n	800cb4c <tcp_zero_window_probe+0x1a8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800caa4:	7ffb      	ldrb	r3, [r7, #31]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d011      	beq.n	800cace <tcp_zero_window_probe+0x12a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	899b      	ldrh	r3, [r3, #12]
 800caae:	b29b      	uxth	r3, r3
 800cab0:	b21b      	sxth	r3, r3
 800cab2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cab6:	b21c      	sxth	r4, r3
 800cab8:	2011      	movs	r0, #17
 800caba:	f7f7 ffaf 	bl	8004a1c <lwip_htons>
 800cabe:	4603      	mov	r3, r0
 800cac0:	b21b      	sxth	r3, r3
 800cac2:	4323      	orrs	r3, r4
 800cac4:	b21b      	sxth	r3, r3
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	819a      	strh	r2, [r3, #12]
 800cacc:	e010      	b.n	800caf0 <tcp_zero_window_probe+0x14c>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	3314      	adds	r3, #20
 800cad4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	6858      	ldr	r0, [r3, #4]
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	891a      	ldrh	r2, [r3, #8]
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	891b      	ldrh	r3, [r3, #8]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	2201      	movs	r2, #1
 800caea:	6939      	ldr	r1, [r7, #16]
 800caec:	f7f9 fc98 	bl	8006420 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f7 ffa5 	bl	8004a46 <lwip_htonl>
 800cafc:	4603      	mov	r3, r0
 800cafe:	3301      	adds	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da02      	bge.n	800cb14 <tcp_zero_window_probe+0x170>
    pcb->snd_nxt = snd_nxt;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb18:	2200      	movs	r2, #0
 800cb1a:	69b9      	ldr	r1, [r7, #24]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff fd7f 	bl	800c620 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3304      	adds	r3, #4
 800cb28:	69b9      	ldr	r1, [r7, #24]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff fdb8 	bl	800c6a0 <tcp_output_control_segment>
 800cb30:	4603      	mov	r3, r0
 800cb32:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb38:	1e59      	subs	r1, r3, #1
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cb42:	480c      	ldr	r0, [pc, #48]	; (800cb74 <tcp_zero_window_probe+0x1d0>)
 800cb44:	f002 ff2e 	bl	800f9a4 <iprintf>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cb48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	372c      	adds	r7, #44	; 0x2c
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}
 800cb54:	08013128 	.word	0x08013128
 800cb58:	08013a88 	.word	0x08013a88
 800cb5c:	0801317c 	.word	0x0801317c
 800cb60:	08013aac 	.word	0x08013aac
 800cb64:	080139d4 	.word	0x080139d4
 800cb68:	200089a8 	.word	0x200089a8
 800cb6c:	08013ae4 	.word	0x08013ae4
 800cb70:	08013b30 	.word	0x08013b30
 800cb74:	08013b5c 	.word	0x08013b5c

0800cb78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cb80:	f7f9 fdce 	bl	8006720 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cb84:	4b0a      	ldr	r3, [pc, #40]	; (800cbb0 <tcpip_tcp_timer+0x38>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <tcpip_tcp_timer+0x1c>
 800cb8c:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <tcpip_tcp_timer+0x3c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d005      	beq.n	800cba0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb94:	2200      	movs	r2, #0
 800cb96:	4908      	ldr	r1, [pc, #32]	; (800cbb8 <tcpip_tcp_timer+0x40>)
 800cb98:	20fa      	movs	r0, #250	; 0xfa
 800cb9a:	f000 f8f3 	bl	800cd84 <sys_timeout>
 800cb9e:	e003      	b.n	800cba8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <tcpip_tcp_timer+0x44>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	601a      	str	r2, [r3, #0]
  }
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	200089b4 	.word	0x200089b4
 800cbb4:	200089b8 	.word	0x200089b8
 800cbb8:	0800cb79 	.word	0x0800cb79
 800cbbc:	20008a04 	.word	0x20008a04

0800cbc0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cbc4:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <tcp_timer_needed+0x30>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10f      	bne.n	800cbec <tcp_timer_needed+0x2c>
 800cbcc:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <tcp_timer_needed+0x34>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d103      	bne.n	800cbdc <tcp_timer_needed+0x1c>
 800cbd4:	4b08      	ldr	r3, [pc, #32]	; (800cbf8 <tcp_timer_needed+0x38>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d007      	beq.n	800cbec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <tcp_timer_needed+0x30>)
 800cbde:	2201      	movs	r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4905      	ldr	r1, [pc, #20]	; (800cbfc <tcp_timer_needed+0x3c>)
 800cbe6:	20fa      	movs	r0, #250	; 0xfa
 800cbe8:	f000 f8cc 	bl	800cd84 <sys_timeout>
  }
}
 800cbec:	bf00      	nop
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20008a04 	.word	0x20008a04
 800cbf4:	200089b4 	.word	0x200089b4
 800cbf8:	200089b8 	.word	0x200089b8
 800cbfc:	0800cb79 	.word	0x0800cb79

0800cc00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cc0c:	2006      	movs	r0, #6
 800cc0e:	f7f8 fb5b 	bl	80052c8 <memp_malloc>
 800cc12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d109      	bne.n	800cc2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d151      	bne.n	800ccc4 <sys_timeout_abs+0xc4>
 800cc20:	4b2a      	ldr	r3, [pc, #168]	; (800cccc <sys_timeout_abs+0xcc>)
 800cc22:	22be      	movs	r2, #190	; 0xbe
 800cc24:	492a      	ldr	r1, [pc, #168]	; (800ccd0 <sys_timeout_abs+0xd0>)
 800cc26:	482b      	ldr	r0, [pc, #172]	; (800ccd4 <sys_timeout_abs+0xd4>)
 800cc28:	f002 febc 	bl	800f9a4 <iprintf>
    return;
 800cc2c:	e04a      	b.n	800ccc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2200      	movs	r2, #0
 800cc32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cc46:	4b24      	ldr	r3, [pc, #144]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d103      	bne.n	800cc56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cc4e:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	6013      	str	r3, [r2, #0]
    return;
 800cc54:	e037      	b.n	800ccc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	4b1f      	ldr	r3, [pc, #124]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	0fdb      	lsrs	r3, r3, #31
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d007      	beq.n	800cc7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800cc6e:	4b1a      	ldr	r3, [pc, #104]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cc76:	4a18      	ldr	r2, [pc, #96]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	e023      	b.n	800ccc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cc7e:	4b16      	ldr	r3, [pc, #88]	; (800ccd8 <sys_timeout_abs+0xd8>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	617b      	str	r3, [r7, #20]
 800cc84:	e01a      	b.n	800ccbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00b      	beq.n	800cca6 <sys_timeout_abs+0xa6>
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	0fdb      	lsrs	r3, r3, #31
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d007      	beq.n	800ccb6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	601a      	str	r2, [r3, #0]
        break;
 800ccb4:	e007      	b.n	800ccc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e1      	bne.n	800cc86 <sys_timeout_abs+0x86>
 800ccc2:	e000      	b.n	800ccc6 <sys_timeout_abs+0xc6>
    return;
 800ccc4:	bf00      	nop
      }
    }
  }
}
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	08013b90 	.word	0x08013b90
 800ccd0:	08013bc4 	.word	0x08013bc4
 800ccd4:	08013c04 	.word	0x08013c04
 800ccd8:	200089fc 	.word	0x200089fc

0800ccdc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	4798      	blx	r3

  now = sys_now();
 800ccee:	f7f7 fdcd 	bl	800488c <sys_now>
 800ccf2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <lwip_cyclic_timer+0x5c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	0fdb      	lsrs	r3, r3, #31
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	4413      	add	r3, r2
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	4907      	ldr	r1, [pc, #28]	; (800cd3c <lwip_cyclic_timer+0x60>)
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff ff6e 	bl	800cc00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cd24:	e004      	b.n	800cd30 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	4904      	ldr	r1, [pc, #16]	; (800cd3c <lwip_cyclic_timer+0x60>)
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7ff ff68 	bl	800cc00 <sys_timeout_abs>
}
 800cd30:	bf00      	nop
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20008a00 	.word	0x20008a00
 800cd3c:	0800ccdd 	.word	0x0800ccdd

0800cd40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cd46:	2301      	movs	r3, #1
 800cd48:	607b      	str	r3, [r7, #4]
 800cd4a:	e00e      	b.n	800cd6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cd4c:	4a0b      	ldr	r2, [pc, #44]	; (800cd7c <sys_timeouts_init+0x3c>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	4a08      	ldr	r2, [pc, #32]	; (800cd7c <sys_timeouts_init+0x3c>)
 800cd5a:	4413      	add	r3, r2
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4908      	ldr	r1, [pc, #32]	; (800cd80 <sys_timeouts_init+0x40>)
 800cd60:	f000 f810 	bl	800cd84 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3301      	adds	r3, #1
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d9ed      	bls.n	800cd4c <sys_timeouts_init+0xc>
  }
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	080147b8 	.word	0x080147b8
 800cd80:	0800ccdd 	.word	0x0800ccdd

0800cd84 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd96:	d306      	bcc.n	800cda6 <sys_timeout+0x22>
 800cd98:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <sys_timeout+0x40>)
 800cd9a:	f240 1229 	movw	r2, #297	; 0x129
 800cd9e:	490a      	ldr	r1, [pc, #40]	; (800cdc8 <sys_timeout+0x44>)
 800cda0:	480a      	ldr	r0, [pc, #40]	; (800cdcc <sys_timeout+0x48>)
 800cda2:	f002 fdff 	bl	800f9a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cda6:	f7f7 fd71 	bl	800488c <sys_now>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4413      	add	r3, r2
 800cdb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	6978      	ldr	r0, [r7, #20]
 800cdb8:	f7ff ff22 	bl	800cc00 <sys_timeout_abs>
#endif
}
 800cdbc:	bf00      	nop
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	08013b90 	.word	0x08013b90
 800cdc8:	08013c2c 	.word	0x08013c2c
 800cdcc:	08013c04 	.word	0x08013c04

0800cdd0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cdd6:	f7f7 fd59 	bl	800488c <sys_now>
 800cdda:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cddc:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <sys_check_timeouts+0x78>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d001      	beq.n	800cdea <sys_check_timeouts+0x1a>
 800cde6:	f7f8 fdf7 	bl	80059d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cdea:	4b18      	ldr	r3, [pc, #96]	; (800ce4c <sys_check_timeouts+0x7c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d022      	beq.n	800ce3c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	0fdb      	lsrs	r3, r3, #31
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d11a      	bne.n	800ce40 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a0f      	ldr	r2, [pc, #60]	; (800ce4c <sys_check_timeouts+0x7c>)
 800ce10:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	4a0b      	ldr	r2, [pc, #44]	; (800ce50 <sys_check_timeouts+0x80>)
 800ce24:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	2006      	movs	r0, #6
 800ce2a:	f7f8 fa99 	bl	8005360 <memp_free>
    if (handler != NULL) {
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d0d3      	beq.n	800cddc <sys_check_timeouts+0xc>
      handler(arg);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	4798      	blx	r3
  do {
 800ce3a:	e7cf      	b.n	800cddc <sys_check_timeouts+0xc>
      return;
 800ce3c:	bf00      	nop
 800ce3e:	e000      	b.n	800ce42 <sys_check_timeouts+0x72>
      return;
 800ce40:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	200089a5 	.word	0x200089a5
 800ce4c:	200089fc 	.word	0x200089fc
 800ce50:	20008a00 	.word	0x20008a00

0800ce54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ce58:	f002 fe48 	bl	800faec <rand>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	4b01      	ldr	r3, [pc, #4]	; (800ce74 <udp_init+0x20>)
 800ce6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ce70:	bf00      	nop
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	20000010 	.word	0x20000010

0800ce78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <udp_input_local_match+0x20>
 800ce8c:	4b27      	ldr	r3, [pc, #156]	; (800cf2c <udp_input_local_match+0xb4>)
 800ce8e:	2287      	movs	r2, #135	; 0x87
 800ce90:	4927      	ldr	r1, [pc, #156]	; (800cf30 <udp_input_local_match+0xb8>)
 800ce92:	4828      	ldr	r0, [pc, #160]	; (800cf34 <udp_input_local_match+0xbc>)
 800ce94:	f002 fd86 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d105      	bne.n	800ceaa <udp_input_local_match+0x32>
 800ce9e:	4b23      	ldr	r3, [pc, #140]	; (800cf2c <udp_input_local_match+0xb4>)
 800cea0:	2288      	movs	r2, #136	; 0x88
 800cea2:	4925      	ldr	r1, [pc, #148]	; (800cf38 <udp_input_local_match+0xc0>)
 800cea4:	4823      	ldr	r0, [pc, #140]	; (800cf34 <udp_input_local_match+0xbc>)
 800cea6:	f002 fd7d 	bl	800f9a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	7a1b      	ldrb	r3, [r3, #8]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00b      	beq.n	800ceca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	7a1a      	ldrb	r2, [r3, #8]
 800ceb6:	4b21      	ldr	r3, [pc, #132]	; (800cf3c <udp_input_local_match+0xc4>)
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cebe:	3301      	adds	r3, #1
 800cec0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d001      	beq.n	800ceca <udp_input_local_match+0x52>
    return 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e02b      	b.n	800cf22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d018      	beq.n	800cf02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d013      	beq.n	800cefe <udp_input_local_match+0x86>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00f      	beq.n	800cefe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cede:	4b17      	ldr	r3, [pc, #92]	; (800cf3c <udp_input_local_match+0xc4>)
 800cee0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d00a      	beq.n	800cefe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <udp_input_local_match+0xc4>)
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	405a      	eors	r2, r3
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	3308      	adds	r3, #8
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d110      	bne.n	800cf20 <udp_input_local_match+0xa8>
          return 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e00f      	b.n	800cf22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d009      	beq.n	800cf1c <udp_input_local_match+0xa4>
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d005      	beq.n	800cf1c <udp_input_local_match+0xa4>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <udp_input_local_match+0xc4>)
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d101      	bne.n	800cf20 <udp_input_local_match+0xa8>
        return 1;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e000      	b.n	800cf22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	08013c78 	.word	0x08013c78
 800cf30:	08013ca8 	.word	0x08013ca8
 800cf34:	08013ccc 	.word	0x08013ccc
 800cf38:	08013cf4 	.word	0x08013cf4
 800cf3c:	20003238 	.word	0x20003238

0800cf40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b08d      	sub	sp, #52	; 0x34
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <udp_input+0x20>
 800cf54:	4b7c      	ldr	r3, [pc, #496]	; (800d148 <udp_input+0x208>)
 800cf56:	22cf      	movs	r2, #207	; 0xcf
 800cf58:	497c      	ldr	r1, [pc, #496]	; (800d14c <udp_input+0x20c>)
 800cf5a:	487d      	ldr	r0, [pc, #500]	; (800d150 <udp_input+0x210>)
 800cf5c:	f002 fd22 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <udp_input+0x32>
 800cf66:	4b78      	ldr	r3, [pc, #480]	; (800d148 <udp_input+0x208>)
 800cf68:	22d0      	movs	r2, #208	; 0xd0
 800cf6a:	497a      	ldr	r1, [pc, #488]	; (800d154 <udp_input+0x214>)
 800cf6c:	4878      	ldr	r0, [pc, #480]	; (800d150 <udp_input+0x210>)
 800cf6e:	f002 fd19 	bl	800f9a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	895b      	ldrh	r3, [r3, #10]
 800cf76:	2b07      	cmp	r3, #7
 800cf78:	d803      	bhi.n	800cf82 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7f9 f866 	bl	800604c <pbuf_free>
    goto end;
 800cf80:	e0de      	b.n	800d140 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cf88:	4b73      	ldr	r3, [pc, #460]	; (800d158 <udp_input+0x218>)
 800cf8a:	695b      	ldr	r3, [r3, #20]
 800cf8c:	4a72      	ldr	r2, [pc, #456]	; (800d158 <udp_input+0x218>)
 800cf8e:	6812      	ldr	r2, [r2, #0]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 fcbc 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f7 fd3a 	bl	8004a1c <lwip_htons>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	885b      	ldrh	r3, [r3, #2]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f7 fd32 	bl	8004a1c <lwip_htons>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfc8:	4b64      	ldr	r3, [pc, #400]	; (800d15c <udp_input+0x21c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	623b      	str	r3, [r7, #32]
 800cfce:	e054      	b.n	800d07a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	8a5b      	ldrh	r3, [r3, #18]
 800cfd4:	89fa      	ldrh	r2, [r7, #14]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d14a      	bne.n	800d070 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cfda:	7cfb      	ldrb	r3, [r7, #19]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	6839      	ldr	r1, [r7, #0]
 800cfe0:	6a38      	ldr	r0, [r7, #32]
 800cfe2:	f7ff ff49 	bl	800ce78 <udp_input_local_match>
 800cfe6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d041      	beq.n	800d070 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	7c1b      	ldrb	r3, [r3, #16]
 800cff0:	f003 0304 	and.w	r3, r3, #4
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11d      	bne.n	800d034 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	61bb      	str	r3, [r7, #24]
 800d002:	e017      	b.n	800d034 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d004:	7cfb      	ldrb	r3, [r7, #19]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d014      	beq.n	800d034 <udp_input+0xf4>
 800d00a:	4b53      	ldr	r3, [pc, #332]	; (800d158 <udp_input+0x218>)
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d012:	d10f      	bne.n	800d034 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	3304      	adds	r3, #4
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d008      	beq.n	800d034 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	3304      	adds	r3, #4
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d101      	bne.n	800d034 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	8a9b      	ldrh	r3, [r3, #20]
 800d038:	8a3a      	ldrh	r2, [r7, #16]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d118      	bne.n	800d070 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	685a      	ldr	r2, [r3, #4]
 800d04a:	4b43      	ldr	r3, [pc, #268]	; (800d158 <udp_input+0x218>)
 800d04c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d04e:	429a      	cmp	r2, r3
 800d050:	d10e      	bne.n	800d070 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d014      	beq.n	800d082 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	68da      	ldr	r2, [r3, #12]
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d060:	4b3e      	ldr	r3, [pc, #248]	; (800d15c <udp_input+0x21c>)
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d068:	4a3c      	ldr	r2, [pc, #240]	; (800d15c <udp_input+0x21c>)
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d06e:	e008      	b.n	800d082 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	623b      	str	r3, [r7, #32]
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1a7      	bne.n	800cfd0 <udp_input+0x90>
 800d080:	e000      	b.n	800d084 <udp_input+0x144>
        break;
 800d082:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <udp_input+0x14e>
    pcb = uncon_pcb;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <udp_input+0x15a>
    for_us = 1;
 800d094:	2301      	movs	r3, #1
 800d096:	77fb      	strb	r3, [r7, #31]
 800d098:	e00a      	b.n	800d0b0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	3304      	adds	r3, #4
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	4b2d      	ldr	r3, [pc, #180]	; (800d158 <udp_input+0x218>)
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	bf0c      	ite	eq
 800d0a8:	2301      	moveq	r3, #1
 800d0aa:	2300      	movne	r3, #0
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d0b0:	7ffb      	ldrb	r3, [r7, #31]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d041      	beq.n	800d13a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d0b6:	2108      	movs	r1, #8
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7f8 ff41 	bl	8005f40 <pbuf_remove_header>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00a      	beq.n	800d0da <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d0c4:	4b20      	ldr	r3, [pc, #128]	; (800d148 <udp_input+0x208>)
 800d0c6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d0ca:	4925      	ldr	r1, [pc, #148]	; (800d160 <udp_input+0x220>)
 800d0cc:	4820      	ldr	r0, [pc, #128]	; (800d150 <udp_input+0x210>)
 800d0ce:	f002 fc69 	bl	800f9a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f8 ffba 	bl	800604c <pbuf_free>
      goto end;
 800d0d8:	e032      	b.n	800d140 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d012      	beq.n	800d106 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00a      	beq.n	800d0fe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	699c      	ldr	r4, [r3, #24]
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	69d8      	ldr	r0, [r3, #28]
 800d0f0:	8a3b      	ldrh	r3, [r7, #16]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	4b1b      	ldr	r3, [pc, #108]	; (800d164 <udp_input+0x224>)
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	6a39      	ldr	r1, [r7, #32]
 800d0fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d0fc:	e021      	b.n	800d142 <udp_input+0x202>
        pbuf_free(p);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7f8 ffa4 	bl	800604c <pbuf_free>
        goto end;
 800d104:	e01c      	b.n	800d140 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d106:	7cfb      	ldrb	r3, [r7, #19]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d112      	bne.n	800d132 <udp_input+0x1f2>
 800d10c:	4b12      	ldr	r3, [pc, #72]	; (800d158 <udp_input+0x218>)
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d114:	2be0      	cmp	r3, #224	; 0xe0
 800d116:	d00c      	beq.n	800d132 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d118:	4b0f      	ldr	r3, [pc, #60]	; (800d158 <udp_input+0x218>)
 800d11a:	899b      	ldrh	r3, [r3, #12]
 800d11c:	3308      	adds	r3, #8
 800d11e:	b29b      	uxth	r3, r3
 800d120:	b21b      	sxth	r3, r3
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f8 ff7e 	bl	8006026 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d12a:	2103      	movs	r1, #3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f8cf 	bl	800e2d0 <icmp_dest_unreach>
      pbuf_free(p);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7f8 ff8a 	bl	800604c <pbuf_free>
  return;
 800d138:	e003      	b.n	800d142 <udp_input+0x202>
    pbuf_free(p);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7f8 ff86 	bl	800604c <pbuf_free>
  return;
 800d140:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d142:	372c      	adds	r7, #44	; 0x2c
 800d144:	46bd      	mov	sp, r7
 800d146:	bd90      	pop	{r4, r7, pc}
 800d148:	08013c78 	.word	0x08013c78
 800d14c:	08013d1c 	.word	0x08013d1c
 800d150:	08013ccc 	.word	0x08013ccc
 800d154:	08013d34 	.word	0x08013d34
 800d158:	20003238 	.word	0x20003238
 800d15c:	20008a08 	.word	0x20008a08
 800d160:	08013d50 	.word	0x08013d50
 800d164:	20003248 	.word	0x20003248

0800d168 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01e      	beq.n	800d1b6 <udp_netif_ip_addr_changed+0x4e>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d01a      	beq.n	800d1b6 <udp_netif_ip_addr_changed+0x4e>
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d017      	beq.n	800d1b6 <udp_netif_ip_addr_changed+0x4e>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d013      	beq.n	800d1b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d18e:	4b0d      	ldr	r3, [pc, #52]	; (800d1c4 <udp_netif_ip_addr_changed+0x5c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	e00c      	b.n	800d1b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d103      	bne.n	800d1aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	60fb      	str	r3, [r7, #12]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1ef      	bne.n	800d196 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20008a08 	.word	0x20008a08

0800d1c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d1d0:	492b      	ldr	r1, [pc, #172]	; (800d280 <etharp_free_entry+0xb8>)
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	4413      	add	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	440b      	add	r3, r1
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d013      	beq.n	800d20c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d1e4:	4926      	ldr	r1, [pc, #152]	; (800d280 <etharp_free_entry+0xb8>)
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	4413      	add	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	440b      	add	r3, r1
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f8 ff29 	bl	800604c <pbuf_free>
    arp_table[i].q = NULL;
 800d1fa:	4921      	ldr	r1, [pc, #132]	; (800d280 <etharp_free_entry+0xb8>)
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	4613      	mov	r3, r2
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	4413      	add	r3, r2
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	440b      	add	r3, r1
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d20c:	491c      	ldr	r1, [pc, #112]	; (800d280 <etharp_free_entry+0xb8>)
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4613      	mov	r3, r2
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	4413      	add	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	440b      	add	r3, r1
 800d21a:	3314      	adds	r3, #20
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800d220:	4917      	ldr	r1, [pc, #92]	; (800d280 <etharp_free_entry+0xb8>)
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	3312      	adds	r3, #18
 800d230:	2200      	movs	r2, #0
 800d232:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800d234:	4912      	ldr	r1, [pc, #72]	; (800d280 <etharp_free_entry+0xb8>)
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3308      	adds	r3, #8
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800d248:	490d      	ldr	r1, [pc, #52]	; (800d280 <etharp_free_entry+0xb8>)
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	4613      	mov	r3, r2
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	4413      	add	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	440b      	add	r3, r1
 800d256:	3304      	adds	r3, #4
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800d25c:	4908      	ldr	r1, [pc, #32]	; (800d280 <etharp_free_entry+0xb8>)
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	4613      	mov	r3, r2
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4413      	add	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	440b      	add	r3, r1
 800d26a:	3308      	adds	r3, #8
 800d26c:	4a05      	ldr	r2, [pc, #20]	; (800d284 <etharp_free_entry+0xbc>)
 800d26e:	3304      	adds	r3, #4
 800d270:	6810      	ldr	r0, [r2, #0]
 800d272:	6018      	str	r0, [r3, #0]
 800d274:	8892      	ldrh	r2, [r2, #4]
 800d276:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20008a0c 	.word	0x20008a0c
 800d284:	080147dc 	.word	0x080147dc

0800d288 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d28e:	2300      	movs	r3, #0
 800d290:	607b      	str	r3, [r7, #4]
 800d292:	e096      	b.n	800d3c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d294:	494f      	ldr	r1, [pc, #316]	; (800d3d4 <etharp_tmr+0x14c>)
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4613      	mov	r3, r2
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	4413      	add	r3, r2
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	440b      	add	r3, r1
 800d2a2:	3314      	adds	r3, #20
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f000 8086 	beq.w	800d3bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d2b0:	4948      	ldr	r1, [pc, #288]	; (800d3d4 <etharp_tmr+0x14c>)
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	4413      	add	r3, r2
 800d2ba:	00db      	lsls	r3, r3, #3
 800d2bc:	440b      	add	r3, r1
 800d2be:	3312      	adds	r3, #18
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	b298      	uxth	r0, r3
 800d2c6:	4943      	ldr	r1, [pc, #268]	; (800d3d4 <etharp_tmr+0x14c>)
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	00db      	lsls	r3, r3, #3
 800d2d2:	440b      	add	r3, r1
 800d2d4:	3312      	adds	r3, #18
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d2da:	493e      	ldr	r1, [pc, #248]	; (800d3d4 <etharp_tmr+0x14c>)
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	4413      	add	r3, r2
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	440b      	add	r3, r1
 800d2e8:	3312      	adds	r3, #18
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d2f0:	d215      	bcs.n	800d31e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d2f2:	4938      	ldr	r1, [pc, #224]	; (800d3d4 <etharp_tmr+0x14c>)
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	440b      	add	r3, r1
 800d300:	3314      	adds	r3, #20
 800d302:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d304:	2b01      	cmp	r3, #1
 800d306:	d10e      	bne.n	800d326 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d308:	4932      	ldr	r1, [pc, #200]	; (800d3d4 <etharp_tmr+0x14c>)
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	4613      	mov	r3, r2
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	4413      	add	r3, r2
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	440b      	add	r3, r1
 800d316:	3312      	adds	r3, #18
 800d318:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d903      	bls.n	800d326 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff ff52 	bl	800d1c8 <etharp_free_entry>
 800d324:	e04a      	b.n	800d3bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d326:	492b      	ldr	r1, [pc, #172]	; (800d3d4 <etharp_tmr+0x14c>)
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	4613      	mov	r3, r2
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	4413      	add	r3, r2
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	440b      	add	r3, r1
 800d334:	3314      	adds	r3, #20
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b03      	cmp	r3, #3
 800d33a:	d10a      	bne.n	800d352 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d33c:	4925      	ldr	r1, [pc, #148]	; (800d3d4 <etharp_tmr+0x14c>)
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4613      	mov	r3, r2
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	4413      	add	r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	440b      	add	r3, r1
 800d34a:	3314      	adds	r3, #20
 800d34c:	2204      	movs	r2, #4
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	e034      	b.n	800d3bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d352:	4920      	ldr	r1, [pc, #128]	; (800d3d4 <etharp_tmr+0x14c>)
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	4613      	mov	r3, r2
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	4413      	add	r3, r2
 800d35c:	00db      	lsls	r3, r3, #3
 800d35e:	440b      	add	r3, r1
 800d360:	3314      	adds	r3, #20
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d10a      	bne.n	800d37e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d368:	491a      	ldr	r1, [pc, #104]	; (800d3d4 <etharp_tmr+0x14c>)
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4613      	mov	r3, r2
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	4413      	add	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	440b      	add	r3, r1
 800d376:	3314      	adds	r3, #20
 800d378:	2202      	movs	r2, #2
 800d37a:	701a      	strb	r2, [r3, #0]
 800d37c:	e01e      	b.n	800d3bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d37e:	4915      	ldr	r1, [pc, #84]	; (800d3d4 <etharp_tmr+0x14c>)
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	4613      	mov	r3, r2
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	4413      	add	r3, r2
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	440b      	add	r3, r1
 800d38c:	3314      	adds	r3, #20
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d113      	bne.n	800d3bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d394:	490f      	ldr	r1, [pc, #60]	; (800d3d4 <etharp_tmr+0x14c>)
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	4613      	mov	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	4413      	add	r3, r2
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	4a08      	ldr	r2, [pc, #32]	; (800d3d4 <etharp_tmr+0x14c>)
 800d3b2:	4413      	add	r3, r2
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	f000 fe6e 	bl	800e098 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	607b      	str	r3, [r7, #4]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b09      	cmp	r3, #9
 800d3c6:	f77f af65 	ble.w	800d294 <etharp_tmr+0xc>
      }
    }
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20008a0c 	.word	0x20008a0c

0800d3d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	607a      	str	r2, [r7, #4]
 800d3e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d3e6:	230a      	movs	r3, #10
 800d3e8:	843b      	strh	r3, [r7, #32]
 800d3ea:	230a      	movs	r3, #10
 800d3ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800d3ee:	230a      	movs	r3, #10
 800d3f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d3f6:	230a      	movs	r3, #10
 800d3f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	83bb      	strh	r3, [r7, #28]
 800d3fe:	2300      	movs	r3, #0
 800d400:	837b      	strh	r3, [r7, #26]
 800d402:	2300      	movs	r3, #0
 800d404:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d406:	2300      	movs	r3, #0
 800d408:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d40a:	e0ae      	b.n	800d56a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d40c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d410:	49a6      	ldr	r1, [pc, #664]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d412:	4613      	mov	r3, r2
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	4413      	add	r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	440b      	add	r3, r1
 800d41c:	3314      	adds	r3, #20
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d422:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d426:	2b0a      	cmp	r3, #10
 800d428:	d105      	bne.n	800d436 <etharp_find_entry+0x5e>
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d102      	bne.n	800d436 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d432:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d434:	e095      	b.n	800d562 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 8092 	beq.w	800d562 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d009      	beq.n	800d458 <etharp_find_entry+0x80>
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d806      	bhi.n	800d458 <etharp_find_entry+0x80>
 800d44a:	4b99      	ldr	r3, [pc, #612]	; (800d6b0 <etharp_find_entry+0x2d8>)
 800d44c:	f240 1223 	movw	r2, #291	; 0x123
 800d450:	4998      	ldr	r1, [pc, #608]	; (800d6b4 <etharp_find_entry+0x2dc>)
 800d452:	4899      	ldr	r0, [pc, #612]	; (800d6b8 <etharp_find_entry+0x2e0>)
 800d454:	f002 faa6 	bl	800f9a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d020      	beq.n	800d4a0 <etharp_find_entry+0xc8>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d466:	4891      	ldr	r0, [pc, #580]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d468:	4613      	mov	r3, r2
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	4413      	add	r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4403      	add	r3, r0
 800d472:	3304      	adds	r3, #4
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4299      	cmp	r1, r3
 800d478:	d112      	bne.n	800d4a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00c      	beq.n	800d49a <etharp_find_entry+0xc2>
 800d480:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d484:	4989      	ldr	r1, [pc, #548]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d486:	4613      	mov	r3, r2
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	4413      	add	r3, r2
 800d48c:	00db      	lsls	r3, r3, #3
 800d48e:	440b      	add	r3, r1
 800d490:	3308      	adds	r3, #8
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	429a      	cmp	r2, r3
 800d498:	d102      	bne.n	800d4a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d49a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d49e:	e100      	b.n	800d6a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d4a0:	7dfb      	ldrb	r3, [r7, #23]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d140      	bne.n	800d528 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d4a6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d4aa:	4980      	ldr	r1, [pc, #512]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	440b      	add	r3, r1
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d01a      	beq.n	800d4f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d4bc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d4c0:	497a      	ldr	r1, [pc, #488]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	440b      	add	r3, r1
 800d4cc:	3312      	adds	r3, #18
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	8bba      	ldrh	r2, [r7, #28]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d845      	bhi.n	800d562 <etharp_find_entry+0x18a>
            old_queue = i;
 800d4d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d4da:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d4de:	4973      	ldr	r1, [pc, #460]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3312      	adds	r3, #18
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	83bb      	strh	r3, [r7, #28]
 800d4f0:	e037      	b.n	800d562 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d4f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d4f6:	496d      	ldr	r1, [pc, #436]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	4413      	add	r3, r2
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	440b      	add	r3, r1
 800d502:	3312      	adds	r3, #18
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	8b7a      	ldrh	r2, [r7, #26]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d82a      	bhi.n	800d562 <etharp_find_entry+0x18a>
            old_pending = i;
 800d50c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d50e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800d510:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d514:	4965      	ldr	r1, [pc, #404]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
 800d520:	3312      	adds	r3, #18
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	837b      	strh	r3, [r7, #26]
 800d526:	e01c      	b.n	800d562 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d528:	7dfb      	ldrb	r3, [r7, #23]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d919      	bls.n	800d562 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d52e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d532:	495e      	ldr	r1, [pc, #376]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d534:	4613      	mov	r3, r2
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	4413      	add	r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	440b      	add	r3, r1
 800d53e:	3312      	adds	r3, #18
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	8b3a      	ldrh	r2, [r7, #24]
 800d544:	429a      	cmp	r2, r3
 800d546:	d80c      	bhi.n	800d562 <etharp_find_entry+0x18a>
            old_stable = i;
 800d548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d54a:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 800d54c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d550:	4956      	ldr	r1, [pc, #344]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d552:	4613      	mov	r3, r2
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	440b      	add	r3, r1
 800d55c:	3312      	adds	r3, #18
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d562:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d564:	3301      	adds	r3, #1
 800d566:	b29b      	uxth	r3, r3
 800d568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d56a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d56e:	2b09      	cmp	r3, #9
 800d570:	f77f af4c 	ble.w	800d40c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d574:	7afb      	ldrb	r3, [r7, #11]
 800d576:	f003 0302 	and.w	r3, r3, #2
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d108      	bne.n	800d590 <etharp_find_entry+0x1b8>
 800d57e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d582:	2b0a      	cmp	r3, #10
 800d584:	d107      	bne.n	800d596 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d586:	7afb      	ldrb	r3, [r7, #11]
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d102      	bne.n	800d596 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d590:	f04f 33ff 	mov.w	r3, #4294967295
 800d594:	e085      	b.n	800d6a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d596:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d59a:	2b09      	cmp	r3, #9
 800d59c:	dc02      	bgt.n	800d5a4 <etharp_find_entry+0x1cc>
    i = empty;
 800d59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5a2:	e039      	b.n	800d618 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d5a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5a8:	2b09      	cmp	r3, #9
 800d5aa:	dc14      	bgt.n	800d5d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d5ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d5b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d5b4:	493d      	ldr	r1, [pc, #244]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	4413      	add	r3, r2
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	440b      	add	r3, r1
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d018      	beq.n	800d5f8 <etharp_find_entry+0x220>
 800d5c6:	4b3a      	ldr	r3, [pc, #232]	; (800d6b0 <etharp_find_entry+0x2d8>)
 800d5c8:	f240 126d 	movw	r2, #365	; 0x16d
 800d5cc:	493b      	ldr	r1, [pc, #236]	; (800d6bc <etharp_find_entry+0x2e4>)
 800d5ce:	483a      	ldr	r0, [pc, #232]	; (800d6b8 <etharp_find_entry+0x2e0>)
 800d5d0:	f002 f9e8 	bl	800f9a4 <iprintf>
 800d5d4:	e010      	b.n	800d5f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d5d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	dc02      	bgt.n	800d5e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d5de:	8c3b      	ldrh	r3, [r7, #32]
 800d5e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5e2:	e009      	b.n	800d5f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d5e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d5e8:	2b09      	cmp	r3, #9
 800d5ea:	dc02      	bgt.n	800d5f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d5ec:	8bfb      	ldrh	r3, [r7, #30]
 800d5ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5f0:	e002      	b.n	800d5f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f6:	e054      	b.n	800d6a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d5f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d5fc:	2b09      	cmp	r3, #9
 800d5fe:	dd06      	ble.n	800d60e <etharp_find_entry+0x236>
 800d600:	4b2b      	ldr	r3, [pc, #172]	; (800d6b0 <etharp_find_entry+0x2d8>)
 800d602:	f240 127f 	movw	r2, #383	; 0x17f
 800d606:	492e      	ldr	r1, [pc, #184]	; (800d6c0 <etharp_find_entry+0x2e8>)
 800d608:	482b      	ldr	r0, [pc, #172]	; (800d6b8 <etharp_find_entry+0x2e0>)
 800d60a:	f002 f9cb 	bl	800f9a4 <iprintf>
    etharp_free_entry(i);
 800d60e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff fdd8 	bl	800d1c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d618:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d61c:	2b09      	cmp	r3, #9
 800d61e:	dd06      	ble.n	800d62e <etharp_find_entry+0x256>
 800d620:	4b23      	ldr	r3, [pc, #140]	; (800d6b0 <etharp_find_entry+0x2d8>)
 800d622:	f240 1283 	movw	r2, #387	; 0x183
 800d626:	4926      	ldr	r1, [pc, #152]	; (800d6c0 <etharp_find_entry+0x2e8>)
 800d628:	4823      	ldr	r0, [pc, #140]	; (800d6b8 <etharp_find_entry+0x2e0>)
 800d62a:	f002 f9bb 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d62e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d632:	491e      	ldr	r1, [pc, #120]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d634:	4613      	mov	r3, r2
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	4413      	add	r3, r2
 800d63a:	00db      	lsls	r3, r3, #3
 800d63c:	440b      	add	r3, r1
 800d63e:	3314      	adds	r3, #20
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <etharp_find_entry+0x27c>
 800d646:	4b1a      	ldr	r3, [pc, #104]	; (800d6b0 <etharp_find_entry+0x2d8>)
 800d648:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d64c:	491d      	ldr	r1, [pc, #116]	; (800d6c4 <etharp_find_entry+0x2ec>)
 800d64e:	481a      	ldr	r0, [pc, #104]	; (800d6b8 <etharp_find_entry+0x2e0>)
 800d650:	f002 f9a8 	bl	800f9a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00b      	beq.n	800d672 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d65a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6819      	ldr	r1, [r3, #0]
 800d662:	4812      	ldr	r0, [pc, #72]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d664:	4613      	mov	r3, r2
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	4413      	add	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4403      	add	r3, r0
 800d66e:	3304      	adds	r3, #4
 800d670:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d672:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d676:	490d      	ldr	r1, [pc, #52]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d678:	4613      	mov	r3, r2
 800d67a:	005b      	lsls	r3, r3, #1
 800d67c:	4413      	add	r3, r2
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	440b      	add	r3, r1
 800d682:	3312      	adds	r3, #18
 800d684:	2200      	movs	r2, #0
 800d686:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d688:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800d68c:	4907      	ldr	r1, [pc, #28]	; (800d6ac <etharp_find_entry+0x2d4>)
 800d68e:	4613      	mov	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	4413      	add	r3, r2
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	440b      	add	r3, r1
 800d698:	3308      	adds	r3, #8
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d69e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3728      	adds	r7, #40	; 0x28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20008a0c 	.word	0x20008a0c
 800d6b0:	08013fdc 	.word	0x08013fdc
 800d6b4:	08014014 	.word	0x08014014
 800d6b8:	08014054 	.word	0x08014054
 800d6bc:	0801407c 	.word	0x0801407c
 800d6c0:	08014094 	.word	0x08014094
 800d6c4:	080140a8 	.word	0x080140a8

0800d6c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af02      	add	r7, sp, #8
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6dc:	2b06      	cmp	r3, #6
 800d6de:	d006      	beq.n	800d6ee <etharp_update_arp_entry+0x26>
 800d6e0:	4b48      	ldr	r3, [pc, #288]	; (800d804 <etharp_update_arp_entry+0x13c>)
 800d6e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d6e6:	4948      	ldr	r1, [pc, #288]	; (800d808 <etharp_update_arp_entry+0x140>)
 800d6e8:	4848      	ldr	r0, [pc, #288]	; (800d80c <etharp_update_arp_entry+0x144>)
 800d6ea:	f002 f95b 	bl	800f9a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d012      	beq.n	800d71a <etharp_update_arp_entry+0x52>
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00e      	beq.n	800d71a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	4618      	mov	r0, r3
 800d704:	f001 f904 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800d708:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d105      	bne.n	800d71a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d716:	2be0      	cmp	r3, #224	; 0xe0
 800d718:	d102      	bne.n	800d720 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d71a:	f06f 030f 	mvn.w	r3, #15
 800d71e:	e06c      	b.n	800d7fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4619      	mov	r1, r3
 800d726:	68b8      	ldr	r0, [r7, #8]
 800d728:	f7ff fe56 	bl	800d3d8 <etharp_find_entry>
 800d72c:	4603      	mov	r3, r0
 800d72e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d734:	2b00      	cmp	r3, #0
 800d736:	da02      	bge.n	800d73e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d738:	8afb      	ldrh	r3, [r7, #22]
 800d73a:	b25b      	sxtb	r3, r3
 800d73c:	e05d      	b.n	800d7fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d73e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d742:	4933      	ldr	r1, [pc, #204]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d744:	4613      	mov	r3, r2
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	440b      	add	r3, r1
 800d74e:	3314      	adds	r3, #20
 800d750:	2202      	movs	r2, #2
 800d752:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d754:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d758:	492d      	ldr	r1, [pc, #180]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	440b      	add	r3, r1
 800d764:	3308      	adds	r3, #8
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d76a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d76e:	4613      	mov	r3, r2
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	4413      	add	r3, r2
 800d774:	00db      	lsls	r3, r3, #3
 800d776:	3308      	adds	r3, #8
 800d778:	4a25      	ldr	r2, [pc, #148]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d77a:	4413      	add	r3, r2
 800d77c:	3304      	adds	r3, #4
 800d77e:	2206      	movs	r2, #6
 800d780:	6879      	ldr	r1, [r7, #4]
 800d782:	4618      	mov	r0, r3
 800d784:	f002 f8de 	bl	800f944 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d788:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d78c:	4920      	ldr	r1, [pc, #128]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	440b      	add	r3, r1
 800d798:	3312      	adds	r3, #18
 800d79a:	2200      	movs	r2, #0
 800d79c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d79e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7a2:	491b      	ldr	r1, [pc, #108]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	440b      	add	r3, r1
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d021      	beq.n	800d7f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d7b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7b8:	4915      	ldr	r1, [pc, #84]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	440b      	add	r3, r1
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d7c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d7cc:	4910      	ldr	r1, [pc, #64]	; (800d810 <etharp_update_arp_entry+0x148>)
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d7e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6939      	ldr	r1, [r7, #16]
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f002 f82d 	bl	800f84c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d7f2:	6938      	ldr	r0, [r7, #16]
 800d7f4:	f7f8 fc2a 	bl	800604c <pbuf_free>
  }
  return ERR_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	08013fdc 	.word	0x08013fdc
 800d808:	080140d4 	.word	0x080140d4
 800d80c:	08014054 	.word	0x08014054
 800d810:	20008a0c 	.word	0x20008a0c

0800d814 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d81c:	2300      	movs	r3, #0
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e01e      	b.n	800d860 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d822:	4913      	ldr	r1, [pc, #76]	; (800d870 <etharp_cleanup_netif+0x5c>)
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	440b      	add	r3, r1
 800d830:	3314      	adds	r3, #20
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d836:	7afb      	ldrb	r3, [r7, #11]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00e      	beq.n	800d85a <etharp_cleanup_netif+0x46>
 800d83c:	490c      	ldr	r1, [pc, #48]	; (800d870 <etharp_cleanup_netif+0x5c>)
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	4613      	mov	r3, r2
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	4413      	add	r3, r2
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	440b      	add	r3, r1
 800d84a:	3308      	adds	r3, #8
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	429a      	cmp	r2, r3
 800d852:	d102      	bne.n	800d85a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f7ff fcb7 	bl	800d1c8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3301      	adds	r3, #1
 800d85e:	60fb      	str	r3, [r7, #12]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2b09      	cmp	r3, #9
 800d864:	dddd      	ble.n	800d822 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d866:	bf00      	nop
 800d868:	bf00      	nop
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20008a0c 	.word	0x20008a0c

0800d874 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d874:	b5b0      	push	{r4, r5, r7, lr}
 800d876:	b08a      	sub	sp, #40	; 0x28
 800d878:	af04      	add	r7, sp, #16
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d107      	bne.n	800d894 <etharp_input+0x20>
 800d884:	4b3d      	ldr	r3, [pc, #244]	; (800d97c <etharp_input+0x108>)
 800d886:	f240 228a 	movw	r2, #650	; 0x28a
 800d88a:	493d      	ldr	r1, [pc, #244]	; (800d980 <etharp_input+0x10c>)
 800d88c:	483d      	ldr	r0, [pc, #244]	; (800d984 <etharp_input+0x110>)
 800d88e:	f002 f889 	bl	800f9a4 <iprintf>
 800d892:	e06f      	b.n	800d974 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8a4:	d10c      	bne.n	800d8c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d8aa:	2b06      	cmp	r3, #6
 800d8ac:	d108      	bne.n	800d8c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d8b2:	2b04      	cmp	r3, #4
 800d8b4:	d104      	bne.n	800d8c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	885b      	ldrh	r3, [r3, #2]
 800d8ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d8bc:	2b08      	cmp	r3, #8
 800d8be:	d003      	beq.n	800d8c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7f8 fbc3 	bl	800604c <pbuf_free>
    return;
 800d8c6:	e055      	b.n	800d974 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	330e      	adds	r3, #14
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	3318      	adds	r3, #24
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	3304      	adds	r3, #4
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <etharp_input+0x74>
    for_us = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	74fb      	strb	r3, [r7, #19]
 800d8e6:	e009      	b.n	800d8fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	bf0c      	ite	eq
 800d8f4:	2301      	moveq	r3, #1
 800d8f6:	2300      	movne	r3, #0
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f103 0208 	add.w	r2, r3, #8
 800d902:	7cfb      	ldrb	r3, [r7, #19]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <etharp_input+0x98>
 800d908:	2301      	movs	r3, #1
 800d90a:	e000      	b.n	800d90e <etharp_input+0x9a>
 800d90c:	2302      	movs	r3, #2
 800d90e:	f107 010c 	add.w	r1, r7, #12
 800d912:	6838      	ldr	r0, [r7, #0]
 800d914:	f7ff fed8 	bl	800d6c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	88db      	ldrh	r3, [r3, #6]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d922:	d003      	beq.n	800d92c <etharp_input+0xb8>
 800d924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d928:	d01e      	beq.n	800d968 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d92a:	e020      	b.n	800d96e <etharp_input+0xfa>
      if (for_us) {
 800d92c:	7cfb      	ldrb	r3, [r7, #19]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d01c      	beq.n	800d96c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d94c:	2102      	movs	r1, #2
 800d94e:	9103      	str	r1, [sp, #12]
 800d950:	f107 010c 	add.w	r1, r7, #12
 800d954:	9102      	str	r1, [sp, #8]
 800d956:	9201      	str	r2, [sp, #4]
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	462b      	mov	r3, r5
 800d95c:	4622      	mov	r2, r4
 800d95e:	4601      	mov	r1, r0
 800d960:	6838      	ldr	r0, [r7, #0]
 800d962:	f000 faeb 	bl	800df3c <etharp_raw>
      break;
 800d966:	e001      	b.n	800d96c <etharp_input+0xf8>
      break;
 800d968:	bf00      	nop
 800d96a:	e000      	b.n	800d96e <etharp_input+0xfa>
      break;
 800d96c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7f8 fb6c 	bl	800604c <pbuf_free>
}
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bdb0      	pop	{r4, r5, r7, pc}
 800d97a:	bf00      	nop
 800d97c:	08013fdc 	.word	0x08013fdc
 800d980:	0801412c 	.word	0x0801412c
 800d984:	08014054 	.word	0x08014054

0800d988 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	4613      	mov	r3, r2
 800d994:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d996:	79fa      	ldrb	r2, [r7, #7]
 800d998:	4944      	ldr	r1, [pc, #272]	; (800daac <etharp_output_to_arp_index+0x124>)
 800d99a:	4613      	mov	r3, r2
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	4413      	add	r3, r2
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	440b      	add	r3, r1
 800d9a4:	3314      	adds	r3, #20
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d806      	bhi.n	800d9ba <etharp_output_to_arp_index+0x32>
 800d9ac:	4b40      	ldr	r3, [pc, #256]	; (800dab0 <etharp_output_to_arp_index+0x128>)
 800d9ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d9b2:	4940      	ldr	r1, [pc, #256]	; (800dab4 <etharp_output_to_arp_index+0x12c>)
 800d9b4:	4840      	ldr	r0, [pc, #256]	; (800dab8 <etharp_output_to_arp_index+0x130>)
 800d9b6:	f001 fff5 	bl	800f9a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d9ba:	79fa      	ldrb	r2, [r7, #7]
 800d9bc:	493b      	ldr	r1, [pc, #236]	; (800daac <etharp_output_to_arp_index+0x124>)
 800d9be:	4613      	mov	r3, r2
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4413      	add	r3, r2
 800d9c4:	00db      	lsls	r3, r3, #3
 800d9c6:	440b      	add	r3, r1
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d153      	bne.n	800da78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d9d0:	79fa      	ldrb	r2, [r7, #7]
 800d9d2:	4936      	ldr	r1, [pc, #216]	; (800daac <etharp_output_to_arp_index+0x124>)
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	4413      	add	r3, r2
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	440b      	add	r3, r1
 800d9de:	3312      	adds	r3, #18
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d9e6:	d919      	bls.n	800da1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d9e8:	79fa      	ldrb	r2, [r7, #7]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	4413      	add	r3, r2
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	4a2e      	ldr	r2, [pc, #184]	; (800daac <etharp_output_to_arp_index+0x124>)
 800d9f4:	4413      	add	r3, r2
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 fb4c 	bl	800e098 <etharp_request>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d138      	bne.n	800da78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800da06:	79fa      	ldrb	r2, [r7, #7]
 800da08:	4928      	ldr	r1, [pc, #160]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da0a:	4613      	mov	r3, r2
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	4413      	add	r3, r2
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	440b      	add	r3, r1
 800da14:	3314      	adds	r3, #20
 800da16:	2203      	movs	r2, #3
 800da18:	701a      	strb	r2, [r3, #0]
 800da1a:	e02d      	b.n	800da78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800da1c:	79fa      	ldrb	r2, [r7, #7]
 800da1e:	4923      	ldr	r1, [pc, #140]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da20:	4613      	mov	r3, r2
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	4413      	add	r3, r2
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	440b      	add	r3, r1
 800da2a:	3312      	adds	r3, #18
 800da2c:	881b      	ldrh	r3, [r3, #0]
 800da2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800da32:	d321      	bcc.n	800da78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800da34:	79fa      	ldrb	r2, [r7, #7]
 800da36:	4613      	mov	r3, r2
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4413      	add	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	4a1b      	ldr	r2, [pc, #108]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da40:	4413      	add	r3, r2
 800da42:	1d19      	adds	r1, r3, #4
 800da44:	79fa      	ldrb	r2, [r7, #7]
 800da46:	4613      	mov	r3, r2
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	3308      	adds	r3, #8
 800da50:	4a16      	ldr	r2, [pc, #88]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da52:	4413      	add	r3, r2
 800da54:	3304      	adds	r3, #4
 800da56:	461a      	mov	r2, r3
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 fafb 	bl	800e054 <etharp_request_dst>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800da64:	79fa      	ldrb	r2, [r7, #7]
 800da66:	4911      	ldr	r1, [pc, #68]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da68:	4613      	mov	r3, r2
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	4413      	add	r3, r2
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	440b      	add	r3, r1
 800da72:	3314      	adds	r3, #20
 800da74:	2203      	movs	r2, #3
 800da76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800da7e:	79fa      	ldrb	r2, [r7, #7]
 800da80:	4613      	mov	r3, r2
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	4413      	add	r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	3308      	adds	r3, #8
 800da8a:	4a08      	ldr	r2, [pc, #32]	; (800daac <etharp_output_to_arp_index+0x124>)
 800da8c:	4413      	add	r3, r2
 800da8e:	3304      	adds	r3, #4
 800da90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da94:	9200      	str	r2, [sp, #0]
 800da96:	460a      	mov	r2, r1
 800da98:	68b9      	ldr	r1, [r7, #8]
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f001 fed6 	bl	800f84c <ethernet_output>
 800daa0:	4603      	mov	r3, r0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	20008a0c 	.word	0x20008a0c
 800dab0:	08013fdc 	.word	0x08013fdc
 800dab4:	0801414c 	.word	0x0801414c
 800dab8:	08014054 	.word	0x08014054

0800dabc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08a      	sub	sp, #40	; 0x28
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <etharp_output+0x24>
 800dad2:	4b73      	ldr	r3, [pc, #460]	; (800dca0 <etharp_output+0x1e4>)
 800dad4:	f240 321e 	movw	r2, #798	; 0x31e
 800dad8:	4972      	ldr	r1, [pc, #456]	; (800dca4 <etharp_output+0x1e8>)
 800dada:	4873      	ldr	r0, [pc, #460]	; (800dca8 <etharp_output+0x1ec>)
 800dadc:	f001 ff62 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <etharp_output+0x38>
 800dae6:	4b6e      	ldr	r3, [pc, #440]	; (800dca0 <etharp_output+0x1e4>)
 800dae8:	f240 321f 	movw	r2, #799	; 0x31f
 800daec:	496f      	ldr	r1, [pc, #444]	; (800dcac <etharp_output+0x1f0>)
 800daee:	486e      	ldr	r0, [pc, #440]	; (800dca8 <etharp_output+0x1ec>)
 800daf0:	f001 ff58 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <etharp_output+0x4c>
 800dafa:	4b69      	ldr	r3, [pc, #420]	; (800dca0 <etharp_output+0x1e4>)
 800dafc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800db00:	496b      	ldr	r1, [pc, #428]	; (800dcb0 <etharp_output+0x1f4>)
 800db02:	4869      	ldr	r0, [pc, #420]	; (800dca8 <etharp_output+0x1ec>)
 800db04:	f001 ff4e 	bl	800f9a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68f9      	ldr	r1, [r7, #12]
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 fefe 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800db1a:	4b66      	ldr	r3, [pc, #408]	; (800dcb4 <etharp_output+0x1f8>)
 800db1c:	61fb      	str	r3, [r7, #28]
 800db1e:	e0af      	b.n	800dc80 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db28:	2be0      	cmp	r3, #224	; 0xe0
 800db2a:	d118      	bne.n	800db5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800db2c:	2301      	movs	r3, #1
 800db2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800db30:	2300      	movs	r3, #0
 800db32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800db34:	235e      	movs	r3, #94	; 0x5e
 800db36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3301      	adds	r3, #1
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db42:	b2db      	uxtb	r3, r3
 800db44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3302      	adds	r3, #2
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3303      	adds	r3, #3
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800db56:	f107 0310 	add.w	r3, r7, #16
 800db5a:	61fb      	str	r3, [r7, #28]
 800db5c:	e090      	b.n	800dc80 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3304      	adds	r3, #4
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	405a      	eors	r2, r3
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3308      	adds	r3, #8
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4013      	ands	r3, r2
 800db72:	2b00      	cmp	r3, #0
 800db74:	d012      	beq.n	800db9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800db7c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800db80:	4293      	cmp	r3, r2
 800db82:	d00b      	beq.n	800db9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	330c      	adds	r3, #12
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d003      	beq.n	800db96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	330c      	adds	r3, #12
 800db92:	61bb      	str	r3, [r7, #24]
 800db94:	e002      	b.n	800db9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800db96:	f06f 0303 	mvn.w	r3, #3
 800db9a:	e07d      	b.n	800dc98 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800db9c:	4b46      	ldr	r3, [pc, #280]	; (800dcb8 <etharp_output+0x1fc>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	4619      	mov	r1, r3
 800dba2:	4a46      	ldr	r2, [pc, #280]	; (800dcbc <etharp_output+0x200>)
 800dba4:	460b      	mov	r3, r1
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	440b      	add	r3, r1
 800dbaa:	00db      	lsls	r3, r3, #3
 800dbac:	4413      	add	r3, r2
 800dbae:	3314      	adds	r3, #20
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d925      	bls.n	800dc02 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dbb6:	4b40      	ldr	r3, [pc, #256]	; (800dcb8 <etharp_output+0x1fc>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4a3f      	ldr	r2, [pc, #252]	; (800dcbc <etharp_output+0x200>)
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	440b      	add	r3, r1
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	4413      	add	r3, r2
 800dbc8:	3308      	adds	r3, #8
 800dbca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d117      	bne.n	800dc02 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	4b38      	ldr	r3, [pc, #224]	; (800dcb8 <etharp_output+0x1fc>)
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	4937      	ldr	r1, [pc, #220]	; (800dcbc <etharp_output+0x200>)
 800dbde:	4603      	mov	r3, r0
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	4403      	add	r3, r0
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3304      	adds	r3, #4
 800dbea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d108      	bne.n	800dc02 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dbf0:	4b31      	ldr	r3, [pc, #196]	; (800dcb8 <etharp_output+0x1fc>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	68b9      	ldr	r1, [r7, #8]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7ff fec5 	bl	800d988 <etharp_output_to_arp_index>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	e04a      	b.n	800dc98 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dc02:	2300      	movs	r3, #0
 800dc04:	75fb      	strb	r3, [r7, #23]
 800dc06:	e031      	b.n	800dc6c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dc08:	7dfa      	ldrb	r2, [r7, #23]
 800dc0a:	492c      	ldr	r1, [pc, #176]	; (800dcbc <etharp_output+0x200>)
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	440b      	add	r3, r1
 800dc16:	3314      	adds	r3, #20
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d923      	bls.n	800dc66 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800dc1e:	7dfa      	ldrb	r2, [r7, #23]
 800dc20:	4926      	ldr	r1, [pc, #152]	; (800dcbc <etharp_output+0x200>)
 800dc22:	4613      	mov	r3, r2
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	440b      	add	r3, r1
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d117      	bne.n	800dc66 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	6819      	ldr	r1, [r3, #0]
 800dc3a:	7dfa      	ldrb	r2, [r7, #23]
 800dc3c:	481f      	ldr	r0, [pc, #124]	; (800dcbc <etharp_output+0x200>)
 800dc3e:	4613      	mov	r3, r2
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	4413      	add	r3, r2
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	4403      	add	r3, r0
 800dc48:	3304      	adds	r3, #4
 800dc4a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dc4c:	4299      	cmp	r1, r3
 800dc4e:	d10a      	bne.n	800dc66 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dc50:	4a19      	ldr	r2, [pc, #100]	; (800dcb8 <etharp_output+0x1fc>)
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff fe93 	bl	800d988 <etharp_output_to_arp_index>
 800dc62:	4603      	mov	r3, r0
 800dc64:	e018      	b.n	800dc98 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	2b09      	cmp	r3, #9
 800dc70:	d9ca      	bls.n	800dc08 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	69b9      	ldr	r1, [r7, #24]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 f822 	bl	800dcc0 <etharp_query>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	e00b      	b.n	800dc98 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dc86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f001 fddb 	bl	800f84c <ethernet_output>
 800dc96:	4603      	mov	r3, r0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	08013fdc 	.word	0x08013fdc
 800dca4:	0801412c 	.word	0x0801412c
 800dca8:	08014054 	.word	0x08014054
 800dcac:	0801417c 	.word	0x0801417c
 800dcb0:	0801411c 	.word	0x0801411c
 800dcb4:	080147d4 	.word	0x080147d4
 800dcb8:	20008afc 	.word	0x20008afc
 800dcbc:	20008a0c 	.word	0x20008a0c

0800dcc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08c      	sub	sp, #48	; 0x30
 800dcc4:	af02      	add	r7, sp, #8
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3326      	adds	r3, #38	; 0x26
 800dcd0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800dcd2:	23ff      	movs	r3, #255	; 0xff
 800dcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	68f9      	ldr	r1, [r7, #12]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 fe14 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10c      	bne.n	800dd08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dcf6:	2be0      	cmp	r3, #224	; 0xe0
 800dcf8:	d006      	beq.n	800dd08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dd08:	f06f 030f 	mvn.w	r3, #15
 800dd0c:	e101      	b.n	800df12 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	2101      	movs	r1, #1
 800dd12:	68b8      	ldr	r0, [r7, #8]
 800dd14:	f7ff fb60 	bl	800d3d8 <etharp_find_entry>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dd1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	da02      	bge.n	800dd2a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dd24:	8a7b      	ldrh	r3, [r7, #18]
 800dd26:	b25b      	sxtb	r3, r3
 800dd28:	e0f3      	b.n	800df12 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dd2a:	8a7b      	ldrh	r3, [r7, #18]
 800dd2c:	2b7e      	cmp	r3, #126	; 0x7e
 800dd2e:	d906      	bls.n	800dd3e <etharp_query+0x7e>
 800dd30:	4b7a      	ldr	r3, [pc, #488]	; (800df1c <etharp_query+0x25c>)
 800dd32:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dd36:	497a      	ldr	r1, [pc, #488]	; (800df20 <etharp_query+0x260>)
 800dd38:	487a      	ldr	r0, [pc, #488]	; (800df24 <etharp_query+0x264>)
 800dd3a:	f001 fe33 	bl	800f9a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dd3e:	8a7b      	ldrh	r3, [r7, #18]
 800dd40:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dd42:	7c7a      	ldrb	r2, [r7, #17]
 800dd44:	4978      	ldr	r1, [pc, #480]	; (800df28 <etharp_query+0x268>)
 800dd46:	4613      	mov	r3, r2
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	4413      	add	r3, r2
 800dd4c:	00db      	lsls	r3, r3, #3
 800dd4e:	440b      	add	r3, r1
 800dd50:	3314      	adds	r3, #20
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d115      	bne.n	800dd84 <etharp_query+0xc4>
    is_new_entry = 1;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dd5c:	7c7a      	ldrb	r2, [r7, #17]
 800dd5e:	4972      	ldr	r1, [pc, #456]	; (800df28 <etharp_query+0x268>)
 800dd60:	4613      	mov	r3, r2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	4413      	add	r3, r2
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	440b      	add	r3, r1
 800dd6a:	3314      	adds	r3, #20
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dd70:	7c7a      	ldrb	r2, [r7, #17]
 800dd72:	496d      	ldr	r1, [pc, #436]	; (800df28 <etharp_query+0x268>)
 800dd74:	4613      	mov	r3, r2
 800dd76:	005b      	lsls	r3, r3, #1
 800dd78:	4413      	add	r3, r2
 800dd7a:	00db      	lsls	r3, r3, #3
 800dd7c:	440b      	add	r3, r1
 800dd7e:	3308      	adds	r3, #8
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dd84:	7c7a      	ldrb	r2, [r7, #17]
 800dd86:	4968      	ldr	r1, [pc, #416]	; (800df28 <etharp_query+0x268>)
 800dd88:	4613      	mov	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	3314      	adds	r3, #20
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d011      	beq.n	800ddbe <etharp_query+0xfe>
 800dd9a:	7c7a      	ldrb	r2, [r7, #17]
 800dd9c:	4962      	ldr	r1, [pc, #392]	; (800df28 <etharp_query+0x268>)
 800dd9e:	4613      	mov	r3, r2
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	440b      	add	r3, r1
 800dda8:	3314      	adds	r3, #20
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d806      	bhi.n	800ddbe <etharp_query+0xfe>
 800ddb0:	4b5a      	ldr	r3, [pc, #360]	; (800df1c <etharp_query+0x25c>)
 800ddb2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ddb6:	495d      	ldr	r1, [pc, #372]	; (800df2c <etharp_query+0x26c>)
 800ddb8:	485a      	ldr	r0, [pc, #360]	; (800df24 <etharp_query+0x264>)
 800ddba:	f001 fdf3 	bl	800f9a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d102      	bne.n	800ddca <etharp_query+0x10a>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10c      	bne.n	800dde4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ddca:	68b9      	ldr	r1, [r7, #8]
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f000 f963 	bl	800e098 <etharp_request>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <etharp_query+0x124>
      return result;
 800ddde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dde2:	e096      	b.n	800df12 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <etharp_query+0x138>
 800ddea:	4b4c      	ldr	r3, [pc, #304]	; (800df1c <etharp_query+0x25c>)
 800ddec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ddf0:	494f      	ldr	r1, [pc, #316]	; (800df30 <etharp_query+0x270>)
 800ddf2:	484c      	ldr	r0, [pc, #304]	; (800df24 <etharp_query+0x264>)
 800ddf4:	f001 fdd6 	bl	800f9a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ddf8:	7c7a      	ldrb	r2, [r7, #17]
 800ddfa:	494b      	ldr	r1, [pc, #300]	; (800df28 <etharp_query+0x268>)
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	4413      	add	r3, r2
 800de02:	00db      	lsls	r3, r3, #3
 800de04:	440b      	add	r3, r1
 800de06:	3314      	adds	r3, #20
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d917      	bls.n	800de3e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800de0e:	4a49      	ldr	r2, [pc, #292]	; (800df34 <etharp_query+0x274>)
 800de10:	7c7b      	ldrb	r3, [r7, #17]
 800de12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800de14:	7c7a      	ldrb	r2, [r7, #17]
 800de16:	4613      	mov	r3, r2
 800de18:	005b      	lsls	r3, r3, #1
 800de1a:	4413      	add	r3, r2
 800de1c:	00db      	lsls	r3, r3, #3
 800de1e:	3308      	adds	r3, #8
 800de20:	4a41      	ldr	r2, [pc, #260]	; (800df28 <etharp_query+0x268>)
 800de22:	4413      	add	r3, r2
 800de24:	3304      	adds	r3, #4
 800de26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de2a:	9200      	str	r2, [sp, #0]
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f001 fd0b 	bl	800f84c <ethernet_output>
 800de36:	4603      	mov	r3, r0
 800de38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de3c:	e067      	b.n	800df0e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de3e:	7c7a      	ldrb	r2, [r7, #17]
 800de40:	4939      	ldr	r1, [pc, #228]	; (800df28 <etharp_query+0x268>)
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	440b      	add	r3, r1
 800de4c:	3314      	adds	r3, #20
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d15c      	bne.n	800df0e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800de5c:	e01c      	b.n	800de98 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	895a      	ldrh	r2, [r3, #10]
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	891b      	ldrh	r3, [r3, #8]
 800de66:	429a      	cmp	r2, r3
 800de68:	d10a      	bne.n	800de80 <etharp_query+0x1c0>
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d006      	beq.n	800de80 <etharp_query+0x1c0>
 800de72:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <etharp_query+0x25c>)
 800de74:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800de78:	492f      	ldr	r1, [pc, #188]	; (800df38 <etharp_query+0x278>)
 800de7a:	482a      	ldr	r0, [pc, #168]	; (800df24 <etharp_query+0x264>)
 800de7c:	f001 fd92 	bl	800f9a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	7b1b      	ldrb	r3, [r3, #12]
 800de84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <etharp_query+0x1d2>
        copy_needed = 1;
 800de8c:	2301      	movs	r3, #1
 800de8e:	61bb      	str	r3, [r7, #24]
        break;
 800de90:	e005      	b.n	800de9e <etharp_query+0x1de>
      }
      p = p->next;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	61fb      	str	r3, [r7, #28]
    while (p) {
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1df      	bne.n	800de5e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d007      	beq.n	800deb4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800deaa:	200e      	movs	r0, #14
 800deac:	f7f8 fbbc 	bl	8006628 <pbuf_clone>
 800deb0:	61f8      	str	r0, [r7, #28]
 800deb2:	e004      	b.n	800debe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800deb8:	69f8      	ldr	r0, [r7, #28]
 800deba:	f7f8 f967 	bl	800618c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d021      	beq.n	800df08 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dec4:	7c7a      	ldrb	r2, [r7, #17]
 800dec6:	4918      	ldr	r1, [pc, #96]	; (800df28 <etharp_query+0x268>)
 800dec8:	4613      	mov	r3, r2
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	4413      	add	r3, r2
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	440b      	add	r3, r1
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ded8:	7c7a      	ldrb	r2, [r7, #17]
 800deda:	4913      	ldr	r1, [pc, #76]	; (800df28 <etharp_query+0x268>)
 800dedc:	4613      	mov	r3, r2
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	4413      	add	r3, r2
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	440b      	add	r3, r1
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f8 f8af 	bl	800604c <pbuf_free>
      }
      arp_table[i].q = p;
 800deee:	7c7a      	ldrb	r2, [r7, #17]
 800def0:	490d      	ldr	r1, [pc, #52]	; (800df28 <etharp_query+0x268>)
 800def2:	4613      	mov	r3, r2
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	4413      	add	r3, r2
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	440b      	add	r3, r1
 800defc:	69fa      	ldr	r2, [r7, #28]
 800defe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800df00:	2300      	movs	r3, #0
 800df02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df06:	e002      	b.n	800df0e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800df08:	23ff      	movs	r3, #255	; 0xff
 800df0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800df0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800df12:	4618      	mov	r0, r3
 800df14:	3728      	adds	r7, #40	; 0x28
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	08013fdc 	.word	0x08013fdc
 800df20:	08014188 	.word	0x08014188
 800df24:	08014054 	.word	0x08014054
 800df28:	20008a0c 	.word	0x20008a0c
 800df2c:	08014198 	.word	0x08014198
 800df30:	0801417c 	.word	0x0801417c
 800df34:	20008afc 	.word	0x20008afc
 800df38:	080141c0 	.word	0x080141c0

0800df3c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b08a      	sub	sp, #40	; 0x28
 800df40:	af02      	add	r7, sp, #8
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d106      	bne.n	800df62 <etharp_raw+0x26>
 800df54:	4b3a      	ldr	r3, [pc, #232]	; (800e040 <etharp_raw+0x104>)
 800df56:	f240 4257 	movw	r2, #1111	; 0x457
 800df5a:	493a      	ldr	r1, [pc, #232]	; (800e044 <etharp_raw+0x108>)
 800df5c:	483a      	ldr	r0, [pc, #232]	; (800e048 <etharp_raw+0x10c>)
 800df5e:	f001 fd21 	bl	800f9a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800df62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df66:	211c      	movs	r1, #28
 800df68:	200e      	movs	r0, #14
 800df6a:	f7f7 fd8b 	bl	8005a84 <pbuf_alloc>
 800df6e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d102      	bne.n	800df7c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800df76:	f04f 33ff 	mov.w	r3, #4294967295
 800df7a:	e05d      	b.n	800e038 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	895b      	ldrh	r3, [r3, #10]
 800df80:	2b1b      	cmp	r3, #27
 800df82:	d806      	bhi.n	800df92 <etharp_raw+0x56>
 800df84:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <etharp_raw+0x104>)
 800df86:	f240 4262 	movw	r2, #1122	; 0x462
 800df8a:	4930      	ldr	r1, [pc, #192]	; (800e04c <etharp_raw+0x110>)
 800df8c:	482e      	ldr	r0, [pc, #184]	; (800e048 <etharp_raw+0x10c>)
 800df8e:	f001 fd09 	bl	800f9a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800df98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f6 fd3e 	bl	8004a1c <lwip_htons>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dfae:	2b06      	cmp	r3, #6
 800dfb0:	d006      	beq.n	800dfc0 <etharp_raw+0x84>
 800dfb2:	4b23      	ldr	r3, [pc, #140]	; (800e040 <etharp_raw+0x104>)
 800dfb4:	f240 4269 	movw	r2, #1129	; 0x469
 800dfb8:	4925      	ldr	r1, [pc, #148]	; (800e050 <etharp_raw+0x114>)
 800dfba:	4823      	ldr	r0, [pc, #140]	; (800e048 <etharp_raw+0x10c>)
 800dfbc:	f001 fcf2 	bl	800f9a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	3308      	adds	r3, #8
 800dfc4:	2206      	movs	r2, #6
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f001 fcbb 	bl	800f944 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	3312      	adds	r3, #18
 800dfd2:	2206      	movs	r2, #6
 800dfd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f001 fcb4 	bl	800f944 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	330e      	adds	r3, #14
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	6812      	ldr	r2, [r2, #0]
 800dfe4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	3318      	adds	r3, #24
 800dfea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfec:	6812      	ldr	r2, [r2, #0]
 800dfee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2200      	movs	r2, #0
 800dff4:	701a      	strb	r2, [r3, #0]
 800dff6:	2200      	movs	r2, #0
 800dff8:	f042 0201 	orr.w	r2, r2, #1
 800dffc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	f042 0208 	orr.w	r2, r2, #8
 800e006:	709a      	strb	r2, [r3, #2]
 800e008:	2200      	movs	r2, #0
 800e00a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	2206      	movs	r2, #6
 800e010:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2204      	movs	r2, #4
 800e016:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e018:	f640 0306 	movw	r3, #2054	; 0x806
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	69b9      	ldr	r1, [r7, #24]
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f001 fc11 	bl	800f84c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e02a:	69b8      	ldr	r0, [r7, #24]
 800e02c:	f7f8 f80e 	bl	800604c <pbuf_free>
  p = NULL;
 800e030:	2300      	movs	r3, #0
 800e032:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e034:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	08013fdc 	.word	0x08013fdc
 800e044:	0801412c 	.word	0x0801412c
 800e048:	08014054 	.word	0x08014054
 800e04c:	080141dc 	.word	0x080141dc
 800e050:	08014210 	.word	0x08014210

0800e054 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af04      	add	r7, sp, #16
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e070:	2201      	movs	r2, #1
 800e072:	9203      	str	r2, [sp, #12]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	9202      	str	r2, [sp, #8]
 800e078:	4a06      	ldr	r2, [pc, #24]	; (800e094 <etharp_request_dst+0x40>)
 800e07a:	9201      	str	r2, [sp, #4]
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	4603      	mov	r3, r0
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff ff5a 	bl	800df3c <etharp_raw>
 800e088:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	080147dc 	.word	0x080147dc

0800e098 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e0a2:	4a05      	ldr	r2, [pc, #20]	; (800e0b8 <etharp_request+0x20>)
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ffd4 	bl	800e054 <etharp_request_dst>
 800e0ac:	4603      	mov	r3, r0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	080147d4 	.word	0x080147d4

0800e0bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08e      	sub	sp, #56	; 0x38
 800e0c0:	af04      	add	r7, sp, #16
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e0c6:	4b7c      	ldr	r3, [pc, #496]	; (800e2b8 <icmp_input+0x1fc>)
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	f003 030f 	and.w	r3, r3, #15
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e0dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0de:	2b13      	cmp	r3, #19
 800e0e0:	f240 80d2 	bls.w	800e288 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	895b      	ldrh	r3, [r3, #10]
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	f240 80cf 	bls.w	800e28c <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	785b      	ldrb	r3, [r3, #1]
 800e0fe:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e102:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 80b7 	beq.w	800e27a <icmp_input+0x1be>
 800e10c:	2b08      	cmp	r3, #8
 800e10e:	f040 80b7 	bne.w	800e280 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e112:	4b6a      	ldr	r3, [pc, #424]	; (800e2bc <icmp_input+0x200>)
 800e114:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e116:	4b68      	ldr	r3, [pc, #416]	; (800e2b8 <icmp_input+0x1fc>)
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e11e:	2be0      	cmp	r3, #224	; 0xe0
 800e120:	f000 80bb 	beq.w	800e29a <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e124:	4b64      	ldr	r3, [pc, #400]	; (800e2b8 <icmp_input+0x1fc>)
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	4a63      	ldr	r2, [pc, #396]	; (800e2b8 <icmp_input+0x1fc>)
 800e12a:	6812      	ldr	r2, [r2, #0]
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 fbee 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	f040 80b1 	bne.w	800e29e <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	891b      	ldrh	r3, [r3, #8]
 800e140:	2b07      	cmp	r3, #7
 800e142:	f240 80a5 	bls.w	800e290 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e148:	330e      	adds	r3, #14
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7f7 fee7 	bl	8005f20 <pbuf_add_header>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d04b      	beq.n	800e1f0 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	891a      	ldrh	r2, [r3, #8]
 800e15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e15e:	4413      	add	r3, r2
 800e160:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	891b      	ldrh	r3, [r3, #8]
 800e166:	8b7a      	ldrh	r2, [r7, #26]
 800e168:	429a      	cmp	r2, r3
 800e16a:	f0c0 809a 	bcc.w	800e2a2 <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e16e:	8b7b      	ldrh	r3, [r7, #26]
 800e170:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e174:	4619      	mov	r1, r3
 800e176:	200e      	movs	r0, #14
 800e178:	f7f7 fc84 	bl	8005a84 <pbuf_alloc>
 800e17c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 8090 	beq.w	800e2a6 <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	895b      	ldrh	r3, [r3, #10]
 800e18a:	461a      	mov	r2, r3
 800e18c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e18e:	3308      	adds	r3, #8
 800e190:	429a      	cmp	r2, r3
 800e192:	d203      	bcs.n	800e19c <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e194:	6978      	ldr	r0, [r7, #20]
 800e196:	f7f7 ff59 	bl	800604c <pbuf_free>
          goto icmperr;
 800e19a:	e085      	b.n	800e2a8 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e1a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f001 fbcd 	bl	800f944 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e1aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6978      	ldr	r0, [r7, #20]
 800e1b0:	f7f7 fec6 	bl	8005f40 <pbuf_remove_header>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d009      	beq.n	800e1ce <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e1ba:	4b41      	ldr	r3, [pc, #260]	; (800e2c0 <icmp_input+0x204>)
 800e1bc:	22b6      	movs	r2, #182	; 0xb6
 800e1be:	4941      	ldr	r1, [pc, #260]	; (800e2c4 <icmp_input+0x208>)
 800e1c0:	4841      	ldr	r0, [pc, #260]	; (800e2c8 <icmp_input+0x20c>)
 800e1c2:	f001 fbef 	bl	800f9a4 <iprintf>
          pbuf_free(r);
 800e1c6:	6978      	ldr	r0, [r7, #20]
 800e1c8:	f7f7 ff40 	bl	800604c <pbuf_free>
          goto icmperr;
 800e1cc:	e06c      	b.n	800e2a8 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	6978      	ldr	r0, [r7, #20]
 800e1d2:	f7f8 f853 	bl	800627c <pbuf_copy>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e1dc:	6978      	ldr	r0, [r7, #20]
 800e1de:	f7f7 ff35 	bl	800604c <pbuf_free>
          goto icmperr;
 800e1e2:	e061      	b.n	800e2a8 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7f7 ff31 	bl	800604c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	607b      	str	r3, [r7, #4]
 800e1ee:	e00f      	b.n	800e210 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e1f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1f2:	330e      	adds	r3, #14
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7f7 fea2 	bl	8005f40 <pbuf_remove_header>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d006      	beq.n	800e210 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e202:	4b2f      	ldr	r3, [pc, #188]	; (800e2c0 <icmp_input+0x204>)
 800e204:	22c7      	movs	r2, #199	; 0xc7
 800e206:	4931      	ldr	r1, [pc, #196]	; (800e2cc <icmp_input+0x210>)
 800e208:	482f      	ldr	r0, [pc, #188]	; (800e2c8 <icmp_input+0x20c>)
 800e20a:	f001 fbcb 	bl	800f9a4 <iprintf>
          goto icmperr;
 800e20e:	e04b      	b.n	800e2a8 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7f7 fe80 	bl	8005f20 <pbuf_add_header>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d12b      	bne.n	800e27e <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e234:	4b20      	ldr	r3, [pc, #128]	; (800e2b8 <icmp_input+0x1fc>)
 800e236:	691a      	ldr	r2, [r3, #16]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	2200      	movs	r2, #0
 800e240:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	2200      	movs	r2, #0
 800e246:	709a      	strb	r2, [r3, #2]
 800e248:	2200      	movs	r2, #0
 800e24a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	22ff      	movs	r2, #255	; 0xff
 800e250:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	729a      	strb	r2, [r3, #10]
 800e258:	2200      	movs	r2, #0
 800e25a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	9302      	str	r3, [sp, #8]
 800e260:	2301      	movs	r3, #1
 800e262:	9301      	str	r3, [sp, #4]
 800e264:	2300      	movs	r3, #0
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	23ff      	movs	r3, #255	; 0xff
 800e26a:	2200      	movs	r2, #0
 800e26c:	69f9      	ldr	r1, [r7, #28]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa76 	bl	800e760 <ip4_output_if>
 800e274:	4603      	mov	r3, r0
 800e276:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e278:	e001      	b.n	800e27e <icmp_input+0x1c2>
      break;
 800e27a:	bf00      	nop
 800e27c:	e000      	b.n	800e280 <icmp_input+0x1c4>
      break;
 800e27e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7f7 fee3 	bl	800604c <pbuf_free>
  return;
 800e286:	e013      	b.n	800e2b0 <icmp_input+0x1f4>
    goto lenerr;
 800e288:	bf00      	nop
 800e28a:	e002      	b.n	800e292 <icmp_input+0x1d6>
    goto lenerr;
 800e28c:	bf00      	nop
 800e28e:	e000      	b.n	800e292 <icmp_input+0x1d6>
        goto lenerr;
 800e290:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7f7 feda 	bl	800604c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e298:	e00a      	b.n	800e2b0 <icmp_input+0x1f4>
        goto icmperr;
 800e29a:	bf00      	nop
 800e29c:	e004      	b.n	800e2a8 <icmp_input+0x1ec>
        goto icmperr;
 800e29e:	bf00      	nop
 800e2a0:	e002      	b.n	800e2a8 <icmp_input+0x1ec>
          goto icmperr;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <icmp_input+0x1ec>
          goto icmperr;
 800e2a6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7f7 fecf 	bl	800604c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e2ae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e2b0:	3728      	adds	r7, #40	; 0x28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20003238 	.word	0x20003238
 800e2bc:	2000324c 	.word	0x2000324c
 800e2c0:	08014254 	.word	0x08014254
 800e2c4:	0801428c 	.word	0x0801428c
 800e2c8:	080142c4 	.word	0x080142c4
 800e2cc:	080142ec 	.word	0x080142ec

0800e2d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	2103      	movs	r1, #3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f814 	bl	800e310 <icmp_send_response>
}
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e2fc:	78fb      	ldrb	r3, [r7, #3]
 800e2fe:	461a      	mov	r2, r3
 800e300:	210b      	movs	r1, #11
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f804 	bl	800e310 <icmp_send_response>
}
 800e308:	bf00      	nop
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08c      	sub	sp, #48	; 0x30
 800e314:	af04      	add	r7, sp, #16
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	460b      	mov	r3, r1
 800e31a:	70fb      	strb	r3, [r7, #3]
 800e31c:	4613      	mov	r3, r2
 800e31e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e320:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e324:	2124      	movs	r1, #36	; 0x24
 800e326:	2022      	movs	r0, #34	; 0x22
 800e328:	f7f7 fbac 	bl	8005a84 <pbuf_alloc>
 800e32c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d04c      	beq.n	800e3ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	895b      	ldrh	r3, [r3, #10]
 800e338:	2b23      	cmp	r3, #35	; 0x23
 800e33a:	d806      	bhi.n	800e34a <icmp_send_response+0x3a>
 800e33c:	4b26      	ldr	r3, [pc, #152]	; (800e3d8 <icmp_send_response+0xc8>)
 800e33e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e342:	4926      	ldr	r1, [pc, #152]	; (800e3dc <icmp_send_response+0xcc>)
 800e344:	4826      	ldr	r0, [pc, #152]	; (800e3e0 <icmp_send_response+0xd0>)
 800e346:	f001 fb2d 	bl	800f9a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	78fa      	ldrb	r2, [r7, #3]
 800e35a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	78ba      	ldrb	r2, [r7, #2]
 800e360:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2200      	movs	r2, #0
 800e366:	711a      	strb	r2, [r3, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	2200      	movs	r2, #0
 800e370:	719a      	strb	r2, [r3, #6]
 800e372:	2200      	movs	r2, #0
 800e374:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f103 0008 	add.w	r0, r3, #8
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	221c      	movs	r2, #28
 800e384:	4619      	mov	r1, r3
 800e386:	f001 fadd 	bl	800f944 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e390:	f107 030c 	add.w	r3, r7, #12
 800e394:	4618      	mov	r0, r3
 800e396:	f000 f825 	bl	800e3e4 <ip4_route>
 800e39a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d011      	beq.n	800e3c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	709a      	strb	r2, [r3, #2]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e3ac:	f107 020c 	add.w	r2, r7, #12
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	9302      	str	r3, [sp, #8]
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	9301      	str	r3, [sp, #4]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	23ff      	movs	r3, #255	; 0xff
 800e3be:	2100      	movs	r1, #0
 800e3c0:	69b8      	ldr	r0, [r7, #24]
 800e3c2:	f000 f9cd 	bl	800e760 <ip4_output_if>
  }
  pbuf_free(q);
 800e3c6:	69b8      	ldr	r0, [r7, #24]
 800e3c8:	f7f7 fe40 	bl	800604c <pbuf_free>
 800e3cc:	e000      	b.n	800e3d0 <icmp_send_response+0xc0>
    return;
 800e3ce:	bf00      	nop
}
 800e3d0:	3720      	adds	r7, #32
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	08014254 	.word	0x08014254
 800e3dc:	08014320 	.word	0x08014320
 800e3e0:	080142c4 	.word	0x080142c4

0800e3e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e3ec:	4b33      	ldr	r3, [pc, #204]	; (800e4bc <ip4_route+0xd8>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	60fb      	str	r3, [r7, #12]
 800e3f2:	e036      	b.n	800e462 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3fa:	f003 0301 	and.w	r3, r3, #1
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	d02b      	beq.n	800e45c <ip4_route+0x78>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e40a:	089b      	lsrs	r3, r3, #2
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d022      	beq.n	800e45c <ip4_route+0x78>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3304      	adds	r3, #4
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d01d      	beq.n	800e45c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3304      	adds	r3, #4
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	405a      	eors	r2, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3308      	adds	r3, #8
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4013      	ands	r3, r2
 800e434:	2b00      	cmp	r3, #0
 800e436:	d101      	bne.n	800e43c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	e038      	b.n	800e4ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e442:	f003 0302 	and.w	r3, r3, #2
 800e446:	2b00      	cmp	r3, #0
 800e448:	d108      	bne.n	800e45c <ip4_route+0x78>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	330c      	adds	r3, #12
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d101      	bne.n	800e45c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	e028      	b.n	800e4ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1c5      	bne.n	800e3f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e468:	4b15      	ldr	r3, [pc, #84]	; (800e4c0 <ip4_route+0xdc>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01a      	beq.n	800e4a6 <ip4_route+0xc2>
 800e470:	4b13      	ldr	r3, [pc, #76]	; (800e4c0 <ip4_route+0xdc>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d012      	beq.n	800e4a6 <ip4_route+0xc2>
 800e480:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <ip4_route+0xdc>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00a      	beq.n	800e4a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e490:	4b0b      	ldr	r3, [pc, #44]	; (800e4c0 <ip4_route+0xdc>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3304      	adds	r3, #4
 800e496:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d004      	beq.n	800e4a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b7f      	cmp	r3, #127	; 0x7f
 800e4a4:	d101      	bne.n	800e4aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	e001      	b.n	800e4ae <ip4_route+0xca>
  }

  return netif_default;
 800e4aa:	4b05      	ldr	r3, [pc, #20]	; (800e4c0 <ip4_route+0xdc>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	2000899c 	.word	0x2000899c
 800e4c0:	200089a0 	.word	0x200089a0

0800e4c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d016      	beq.n	800e50a <ip4_input_accept+0x46>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d011      	beq.n	800e50a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <ip4_input_accept+0x50>)
 800e4e8:	695a      	ldr	r2, [r3, #20]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d008      	beq.n	800e506 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e4f4:	4b07      	ldr	r3, [pc, #28]	; (800e514 <ip4_input_accept+0x50>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	6879      	ldr	r1, [r7, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 fa08 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800e500:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e506:	2301      	movs	r3, #1
 800e508:	e000      	b.n	800e50c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20003238 	.word	0x20003238

0800e518 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	091b      	lsrs	r3, r3, #4
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b04      	cmp	r3, #4
 800e532:	d004      	beq.n	800e53e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7f7 fd89 	bl	800604c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	e107      	b.n	800e74e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	f003 030f 	and.w	r3, r3, #15
 800e546:	b2db      	uxtb	r3, r3
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	885b      	ldrh	r3, [r3, #2]
 800e552:	b29b      	uxth	r3, r3
 800e554:	4618      	mov	r0, r3
 800e556:	f7f6 fa61 	bl	8004a1c <lwip_htons>
 800e55a:	4603      	mov	r3, r0
 800e55c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	891b      	ldrh	r3, [r3, #8]
 800e562:	89ba      	ldrh	r2, [r7, #12]
 800e564:	429a      	cmp	r2, r3
 800e566:	d204      	bcs.n	800e572 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e568:	89bb      	ldrh	r3, [r7, #12]
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f7 fbe7 	bl	8005d40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	895b      	ldrh	r3, [r3, #10]
 800e576:	89fa      	ldrh	r2, [r7, #14]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d807      	bhi.n	800e58c <ip4_input+0x74>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	891b      	ldrh	r3, [r3, #8]
 800e580:	89ba      	ldrh	r2, [r7, #12]
 800e582:	429a      	cmp	r2, r3
 800e584:	d802      	bhi.n	800e58c <ip4_input+0x74>
 800e586:	89fb      	ldrh	r3, [r7, #14]
 800e588:	2b13      	cmp	r3, #19
 800e58a:	d804      	bhi.n	800e596 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7f7 fd5d 	bl	800604c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	e0db      	b.n	800e74e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	4a6f      	ldr	r2, [pc, #444]	; (800e758 <ip4_input+0x240>)
 800e59c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	4a6d      	ldr	r2, [pc, #436]	; (800e758 <ip4_input+0x240>)
 800e5a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5a6:	4b6c      	ldr	r3, [pc, #432]	; (800e758 <ip4_input+0x240>)
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5ae:	2be0      	cmp	r3, #224	; 0xe0
 800e5b0:	d112      	bne.n	800e5d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5b8:	f003 0301 	and.w	r3, r3, #1
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d007      	beq.n	800e5d2 <ip4_input+0xba>
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <ip4_input+0xba>
      netif = inp;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	617b      	str	r3, [r7, #20]
 800e5d0:	e02a      	b.n	800e628 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	e027      	b.n	800e628 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e5d8:	6838      	ldr	r0, [r7, #0]
 800e5da:	f7ff ff73 	bl	800e4c4 <ip4_input_accept>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <ip4_input+0xd2>
      netif = inp;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	617b      	str	r3, [r7, #20]
 800e5e8:	e01e      	b.n	800e628 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e5ee:	4b5a      	ldr	r3, [pc, #360]	; (800e758 <ip4_input+0x240>)
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b7f      	cmp	r3, #127	; 0x7f
 800e5f6:	d017      	beq.n	800e628 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e5f8:	4b58      	ldr	r3, [pc, #352]	; (800e75c <ip4_input+0x244>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	617b      	str	r3, [r7, #20]
 800e5fe:	e00e      	b.n	800e61e <ip4_input+0x106>
          if (netif == inp) {
 800e600:	697a      	ldr	r2, [r7, #20]
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	429a      	cmp	r2, r3
 800e606:	d006      	beq.n	800e616 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e608:	6978      	ldr	r0, [r7, #20]
 800e60a:	f7ff ff5b 	bl	800e4c4 <ip4_input_accept>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d108      	bne.n	800e626 <ip4_input+0x10e>
 800e614:	e000      	b.n	800e618 <ip4_input+0x100>
            continue;
 800e616:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	617b      	str	r3, [r7, #20]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1ed      	bne.n	800e600 <ip4_input+0xe8>
 800e624:	e000      	b.n	800e628 <ip4_input+0x110>
            break;
 800e626:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e628:	4b4b      	ldr	r3, [pc, #300]	; (800e758 <ip4_input+0x240>)
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	6839      	ldr	r1, [r7, #0]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f96e 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d105      	bne.n	800e646 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e63a:	4b47      	ldr	r3, [pc, #284]	; (800e758 <ip4_input+0x240>)
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e642:	2be0      	cmp	r3, #224	; 0xe0
 800e644:	d104      	bne.n	800e650 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7f7 fd00 	bl	800604c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e07e      	b.n	800e74e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d104      	bne.n	800e660 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7f7 fcf8 	bl	800604c <pbuf_free>
    return ERR_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	e076      	b.n	800e74e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	88db      	ldrh	r3, [r3, #6]
 800e664:	b29b      	uxth	r3, r3
 800e666:	461a      	mov	r2, r3
 800e668:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e66c:	4013      	ands	r3, r2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00b      	beq.n	800e68a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fd22 	bl	800f0bc <ip4_reass>
 800e678:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <ip4_input+0x16c>
      return ERR_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	e064      	b.n	800e74e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e68a:	4a33      	ldr	r2, [pc, #204]	; (800e758 <ip4_input+0x240>)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e690:	4a31      	ldr	r2, [pc, #196]	; (800e758 <ip4_input+0x240>)
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e696:	4a30      	ldr	r2, [pc, #192]	; (800e758 <ip4_input+0x240>)
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 030f 	and.w	r3, r3, #15
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	4b2a      	ldr	r3, [pc, #168]	; (800e758 <ip4_input+0x240>)
 800e6ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e6b0:	89fb      	ldrh	r3, [r7, #14]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7f7 fc43 	bl	8005f40 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	7a5b      	ldrb	r3, [r3, #9]
 800e6be:	2b11      	cmp	r3, #17
 800e6c0:	d006      	beq.n	800e6d0 <ip4_input+0x1b8>
 800e6c2:	2b11      	cmp	r3, #17
 800e6c4:	dc13      	bgt.n	800e6ee <ip4_input+0x1d6>
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d00c      	beq.n	800e6e4 <ip4_input+0x1cc>
 800e6ca:	2b06      	cmp	r3, #6
 800e6cc:	d005      	beq.n	800e6da <ip4_input+0x1c2>
 800e6ce:	e00e      	b.n	800e6ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7fe fc34 	bl	800cf40 <udp_input>
        break;
 800e6d8:	e026      	b.n	800e728 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e6da:	6839      	ldr	r1, [r7, #0]
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7f9 fecf 	bl	8008480 <tcp_input>
        break;
 800e6e2:	e021      	b.n	800e728 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff fce8 	bl	800e0bc <icmp_input>
        break;
 800e6ec:	e01c      	b.n	800e728 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e6ee:	4b1a      	ldr	r3, [pc, #104]	; (800e758 <ip4_input+0x240>)
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	6979      	ldr	r1, [r7, #20]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 f90b 	bl	800e910 <ip4_addr_isbroadcast_u32>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d10f      	bne.n	800e720 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e700:	4b15      	ldr	r3, [pc, #84]	; (800e758 <ip4_input+0x240>)
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e708:	2be0      	cmp	r3, #224	; 0xe0
 800e70a:	d009      	beq.n	800e720 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e70c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7f7 fc87 	bl	8006026 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e718:	2102      	movs	r1, #2
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff fdd8 	bl	800e2d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f7 fc93 	bl	800604c <pbuf_free>
        break;
 800e726:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e728:	4b0b      	ldr	r3, [pc, #44]	; (800e758 <ip4_input+0x240>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e72e:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <ip4_input+0x240>)
 800e730:	2200      	movs	r2, #0
 800e732:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e734:	4b08      	ldr	r3, [pc, #32]	; (800e758 <ip4_input+0x240>)
 800e736:	2200      	movs	r2, #0
 800e738:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e73a:	4b07      	ldr	r3, [pc, #28]	; (800e758 <ip4_input+0x240>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e740:	4b05      	ldr	r3, [pc, #20]	; (800e758 <ip4_input+0x240>)
 800e742:	2200      	movs	r2, #0
 800e744:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e746:	4b04      	ldr	r3, [pc, #16]	; (800e758 <ip4_input+0x240>)
 800e748:	2200      	movs	r2, #0
 800e74a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3718      	adds	r7, #24
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20003238 	.word	0x20003238
 800e75c:	2000899c 	.word	0x2000899c

0800e760 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b08a      	sub	sp, #40	; 0x28
 800e764:	af04      	add	r7, sp, #16
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d009      	beq.n	800e78c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <ip4_output_if+0x26>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d102      	bne.n	800e78c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	3304      	adds	r3, #4
 800e78a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e78c:	78fa      	ldrb	r2, [r7, #3]
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	9302      	str	r3, [sp, #8]
 800e792:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e796:	9301      	str	r3, [sp, #4]
 800e798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	6979      	ldr	r1, [r7, #20]
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f000 f805 	bl	800e7b4 <ip4_output_if_src>
 800e7aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	7b9b      	ldrb	r3, [r3, #14]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d006      	beq.n	800e7d8 <ip4_output_if_src+0x24>
 800e7ca:	4b4b      	ldr	r3, [pc, #300]	; (800e8f8 <ip4_output_if_src+0x144>)
 800e7cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e7d0:	494a      	ldr	r1, [pc, #296]	; (800e8fc <ip4_output_if_src+0x148>)
 800e7d2:	484b      	ldr	r0, [pc, #300]	; (800e900 <ip4_output_if_src+0x14c>)
 800e7d4:	f001 f8e6 	bl	800f9a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d060      	beq.n	800e8a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e7de:	2314      	movs	r3, #20
 800e7e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e7e2:	2114      	movs	r1, #20
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f7f7 fb9b 	bl	8005f20 <pbuf_add_header>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e7f0:	f06f 0301 	mvn.w	r3, #1
 800e7f4:	e07c      	b.n	800e8f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	895b      	ldrh	r3, [r3, #10]
 800e800:	2b13      	cmp	r3, #19
 800e802:	d806      	bhi.n	800e812 <ip4_output_if_src+0x5e>
 800e804:	4b3c      	ldr	r3, [pc, #240]	; (800e8f8 <ip4_output_if_src+0x144>)
 800e806:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e80a:	493e      	ldr	r1, [pc, #248]	; (800e904 <ip4_output_if_src+0x150>)
 800e80c:	483c      	ldr	r0, [pc, #240]	; (800e900 <ip4_output_if_src+0x14c>)
 800e80e:	f001 f8c9 	bl	800f9a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	78fa      	ldrb	r2, [r7, #3]
 800e816:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e81e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e828:	8b7b      	ldrh	r3, [r7, #26]
 800e82a:	089b      	lsrs	r3, r3, #2
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e834:	b2da      	uxtb	r2, r3
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e840:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	891b      	ldrh	r3, [r3, #8]
 800e846:	4618      	mov	r0, r3
 800e848:	f7f6 f8e8 	bl	8004a1c <lwip_htons>
 800e84c:	4603      	mov	r3, r0
 800e84e:	461a      	mov	r2, r3
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	2200      	movs	r2, #0
 800e858:	719a      	strb	r2, [r3, #6]
 800e85a:	2200      	movs	r2, #0
 800e85c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e85e:	4b2a      	ldr	r3, [pc, #168]	; (800e908 <ip4_output_if_src+0x154>)
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	4618      	mov	r0, r3
 800e864:	f7f6 f8da 	bl	8004a1c <lwip_htons>
 800e868:	4603      	mov	r3, r0
 800e86a:	461a      	mov	r2, r3
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e870:	4b25      	ldr	r3, [pc, #148]	; (800e908 <ip4_output_if_src+0x154>)
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	3301      	adds	r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	4b23      	ldr	r3, [pc, #140]	; (800e908 <ip4_output_if_src+0x154>)
 800e87a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d104      	bne.n	800e88c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e882:	4b22      	ldr	r3, [pc, #136]	; (800e90c <ip4_output_if_src+0x158>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	60da      	str	r2, [r3, #12]
 800e88a:	e003      	b.n	800e894 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	2200      	movs	r2, #0
 800e898:	729a      	strb	r2, [r3, #10]
 800e89a:	2200      	movs	r2, #0
 800e89c:	72da      	strb	r2, [r3, #11]
 800e89e:	e00f      	b.n	800e8c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	895b      	ldrh	r3, [r3, #10]
 800e8a4:	2b13      	cmp	r3, #19
 800e8a6:	d802      	bhi.n	800e8ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e8a8:	f06f 0301 	mvn.w	r3, #1
 800e8ac:	e020      	b.n	800e8f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e8ba:	f107 0314 	add.w	r3, r7, #20
 800e8be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00c      	beq.n	800e8e2 <ip4_output_if_src+0x12e>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	891a      	ldrh	r2, [r3, #8]
 800e8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d906      	bls.n	800e8e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 fde3 	bl	800f4a4 <ip4_frag>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	e006      	b.n	800e8f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	68f9      	ldr	r1, [r7, #12]
 800e8ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8ec:	4798      	blx	r3
 800e8ee:	4603      	mov	r3, r0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	0801434c 	.word	0x0801434c
 800e8fc:	08014380 	.word	0x08014380
 800e900:	0801438c 	.word	0x0801438c
 800e904:	080143b4 	.word	0x080143b4
 800e908:	20008afe 	.word	0x20008afe
 800e90c:	080147d0 	.word	0x080147d0

0800e910 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d002      	beq.n	800e92c <ip4_addr_isbroadcast_u32+0x1c>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d101      	bne.n	800e930 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e92c:	2301      	movs	r3, #1
 800e92e:	e02a      	b.n	800e986 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e936:	f003 0302 	and.w	r3, r3, #2
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	e021      	b.n	800e986 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	3304      	adds	r3, #4
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d101      	bne.n	800e952 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	e019      	b.n	800e986 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	3304      	adds	r3, #4
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	405a      	eors	r2, r3
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	3308      	adds	r3, #8
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4013      	ands	r3, r2
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10d      	bne.n	800e984 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	3308      	adds	r3, #8
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	43da      	mvns	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	3308      	adds	r3, #8
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d101      	bne.n	800e984 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e980:	2301      	movs	r3, #1
 800e982:	e000      	b.n	800e986 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e984:	2300      	movs	r3, #0
  }
}
 800e986:	4618      	mov	r0, r3
 800e988:	3714      	adds	r7, #20
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
	...

0800e994 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e99c:	2210      	movs	r2, #16
 800e99e:	4904      	ldr	r1, [pc, #16]	; (800e9b0 <ip4addr_ntoa+0x1c>)
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f807 	bl	800e9b4 <ip4addr_ntoa_r>
 800e9a6:	4603      	mov	r3, r0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20008b00 	.word	0x20008b00

0800e9b4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b08d      	sub	sp, #52	; 0x34
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e9ce:	f107 0318 	add.w	r3, r7, #24
 800e9d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9da:	e058      	b.n	800ea8e <ip4addr_ntoa_r+0xda>
    i = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	781a      	ldrb	r2, [r3, #0]
 800e9e6:	4b32      	ldr	r3, [pc, #200]	; (800eab0 <ip4addr_ntoa_r+0xfc>)
 800e9e8:	fba3 1302 	umull	r1, r3, r3, r2
 800e9ec:	08d9      	lsrs	r1, r3, #3
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	440b      	add	r3, r1
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	4a2c      	ldr	r2, [pc, #176]	; (800eab0 <ip4addr_ntoa_r+0xfc>)
 800ea00:	fba2 2303 	umull	r2, r3, r2, r3
 800ea04:	08db      	lsrs	r3, r3, #3
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800ea0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ea16:	4619      	mov	r1, r3
 800ea18:	7ffb      	ldrb	r3, [r7, #31]
 800ea1a:	3330      	adds	r3, #48	; 0x30
 800ea1c:	b2da      	uxtb	r2, r3
 800ea1e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800ea22:	443b      	add	r3, r7
 800ea24:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1d8      	bne.n	800e9e2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ea30:	e011      	b.n	800ea56 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	1c5a      	adds	r2, r3, #1
 800ea36:	623a      	str	r2, [r7, #32]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	dc01      	bgt.n	800ea42 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e030      	b.n	800eaa4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ea42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ea46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea48:	1c59      	adds	r1, r3, #1
 800ea4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ea4c:	3230      	adds	r2, #48	; 0x30
 800ea4e:	443a      	add	r2, r7
 800ea50:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ea54:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ea56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea5a:	1e5a      	subs	r2, r3, #1
 800ea5c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1e6      	bne.n	800ea32 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	623a      	str	r2, [r7, #32]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	dc01      	bgt.n	800ea74 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ea70:	2300      	movs	r3, #0
 800ea72:	e017      	b.n	800eaa4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea7a:	222e      	movs	r2, #46	; 0x2e
 800ea7c:	701a      	strb	r2, [r3, #0]
    ap++;
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	3301      	adds	r3, #1
 800ea82:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ea84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea88:	3301      	adds	r3, #1
 800ea8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea92:	2b03      	cmp	r3, #3
 800ea94:	d9a2      	bls.n	800e9dc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	701a      	strb	r2, [r3, #0]
  return buf;
 800eaa2:	68bb      	ldr	r3, [r7, #8]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3734      	adds	r7, #52	; 0x34
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	cccccccd 	.word	0xcccccccd

0800eab4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800eabe:	4b12      	ldr	r3, [pc, #72]	; (800eb08 <ip_reass_tmr+0x54>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800eac4:	e018      	b.n	800eaf8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	7fdb      	ldrb	r3, [r3, #31]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00b      	beq.n	800eae6 <ip_reass_tmr+0x32>
      r->timer--;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	7fdb      	ldrb	r3, [r3, #31]
 800ead2:	3b01      	subs	r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	60fb      	str	r3, [r7, #12]
 800eae4:	e008      	b.n	800eaf8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eaf0:	68b9      	ldr	r1, [r7, #8]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f80a 	bl	800eb0c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1e3      	bne.n	800eac6 <ip_reass_tmr+0x12>
    }
  }
}
 800eafe:	bf00      	nop
 800eb00:	bf00      	nop
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20008b10 	.word	0x20008b10

0800eb0c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d105      	bne.n	800eb2e <ip_reass_free_complete_datagram+0x22>
 800eb22:	4b45      	ldr	r3, [pc, #276]	; (800ec38 <ip_reass_free_complete_datagram+0x12c>)
 800eb24:	22ab      	movs	r2, #171	; 0xab
 800eb26:	4945      	ldr	r1, [pc, #276]	; (800ec3c <ip_reass_free_complete_datagram+0x130>)
 800eb28:	4845      	ldr	r0, [pc, #276]	; (800ec40 <ip_reass_free_complete_datagram+0x134>)
 800eb2a:	f000 ff3b 	bl	800f9a4 <iprintf>
  if (prev != NULL) {
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d00a      	beq.n	800eb4a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d005      	beq.n	800eb4a <ip_reass_free_complete_datagram+0x3e>
 800eb3e:	4b3e      	ldr	r3, [pc, #248]	; (800ec38 <ip_reass_free_complete_datagram+0x12c>)
 800eb40:	22ad      	movs	r2, #173	; 0xad
 800eb42:	4940      	ldr	r1, [pc, #256]	; (800ec44 <ip_reass_free_complete_datagram+0x138>)
 800eb44:	483e      	ldr	r0, [pc, #248]	; (800ec40 <ip_reass_free_complete_datagram+0x134>)
 800eb46:	f000 ff2d 	bl	800f9a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	889b      	ldrh	r3, [r3, #4]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d12a      	bne.n	800ebb2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	6858      	ldr	r0, [r3, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3308      	adds	r3, #8
 800eb72:	2214      	movs	r2, #20
 800eb74:	4619      	mov	r1, r3
 800eb76:	f000 fee5 	bl	800f944 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800eb7a:	2101      	movs	r1, #1
 800eb7c:	69b8      	ldr	r0, [r7, #24]
 800eb7e:	f7ff fbb7 	bl	800e2f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800eb82:	69b8      	ldr	r0, [r7, #24]
 800eb84:	f7f7 faea 	bl	800615c <pbuf_clen>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eb8c:	8bfa      	ldrh	r2, [r7, #30]
 800eb8e:	8a7b      	ldrh	r3, [r7, #18]
 800eb90:	4413      	add	r3, r2
 800eb92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb96:	db05      	blt.n	800eba4 <ip_reass_free_complete_datagram+0x98>
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <ip_reass_free_complete_datagram+0x12c>)
 800eb9a:	22bc      	movs	r2, #188	; 0xbc
 800eb9c:	492a      	ldr	r1, [pc, #168]	; (800ec48 <ip_reass_free_complete_datagram+0x13c>)
 800eb9e:	4828      	ldr	r0, [pc, #160]	; (800ec40 <ip_reass_free_complete_datagram+0x134>)
 800eba0:	f000 ff00 	bl	800f9a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eba4:	8bfa      	ldrh	r2, [r7, #30]
 800eba6:	8a7b      	ldrh	r3, [r7, #18]
 800eba8:	4413      	add	r3, r2
 800ebaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ebac:	69b8      	ldr	r0, [r7, #24]
 800ebae:	f7f7 fa4d 	bl	800604c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ebb8:	e01f      	b.n	800ebfa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7f7 fac6 	bl	800615c <pbuf_clen>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ebd4:	8bfa      	ldrh	r2, [r7, #30]
 800ebd6:	8a7b      	ldrh	r3, [r7, #18]
 800ebd8:	4413      	add	r3, r2
 800ebda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebde:	db05      	blt.n	800ebec <ip_reass_free_complete_datagram+0xe0>
 800ebe0:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <ip_reass_free_complete_datagram+0x12c>)
 800ebe2:	22cc      	movs	r2, #204	; 0xcc
 800ebe4:	4918      	ldr	r1, [pc, #96]	; (800ec48 <ip_reass_free_complete_datagram+0x13c>)
 800ebe6:	4816      	ldr	r0, [pc, #88]	; (800ec40 <ip_reass_free_complete_datagram+0x134>)
 800ebe8:	f000 fedc 	bl	800f9a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ebec:	8bfa      	ldrh	r2, [r7, #30]
 800ebee:	8a7b      	ldrh	r3, [r7, #18]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f7f7 fa29 	bl	800604c <pbuf_free>
  while (p != NULL) {
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d1dc      	bne.n	800ebba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f8c2 	bl	800ed8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ec08:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <ip_reass_free_complete_datagram+0x140>)
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	8bfa      	ldrh	r2, [r7, #30]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d905      	bls.n	800ec1e <ip_reass_free_complete_datagram+0x112>
 800ec12:	4b09      	ldr	r3, [pc, #36]	; (800ec38 <ip_reass_free_complete_datagram+0x12c>)
 800ec14:	22d2      	movs	r2, #210	; 0xd2
 800ec16:	490e      	ldr	r1, [pc, #56]	; (800ec50 <ip_reass_free_complete_datagram+0x144>)
 800ec18:	4809      	ldr	r0, [pc, #36]	; (800ec40 <ip_reass_free_complete_datagram+0x134>)
 800ec1a:	f000 fec3 	bl	800f9a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	; (800ec4c <ip_reass_free_complete_datagram+0x140>)
 800ec20:	881a      	ldrh	r2, [r3, #0]
 800ec22:	8bfb      	ldrh	r3, [r7, #30]
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	4b08      	ldr	r3, [pc, #32]	; (800ec4c <ip_reass_free_complete_datagram+0x140>)
 800ec2a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ec2c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3720      	adds	r7, #32
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	080143e4 	.word	0x080143e4
 800ec3c:	08014420 	.word	0x08014420
 800ec40:	0801442c 	.word	0x0801442c
 800ec44:	08014454 	.word	0x08014454
 800ec48:	08014468 	.word	0x08014468
 800ec4c:	20008b14 	.word	0x20008b14
 800ec50:	08014488 	.word	0x08014488

0800ec54 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08a      	sub	sp, #40	; 0x28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ec72:	4b28      	ldr	r3, [pc, #160]	; (800ed14 <ip_reass_remove_oldest_datagram+0xc0>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ec78:	e030      	b.n	800ecdc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	695a      	ldr	r2, [r3, #20]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d10c      	bne.n	800eca0 <ip_reass_remove_oldest_datagram+0x4c>
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	699a      	ldr	r2, [r3, #24]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d106      	bne.n	800eca0 <ip_reass_remove_oldest_datagram+0x4c>
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	899a      	ldrh	r2, [r3, #12]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	889b      	ldrh	r3, [r3, #4]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d014      	beq.n	800ecca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	3301      	adds	r3, #1
 800eca4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d104      	bne.n	800ecb6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	61bb      	str	r3, [r7, #24]
 800ecb4:	e009      	b.n	800ecca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	7fda      	ldrb	r2, [r3, #31]
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	7fdb      	ldrb	r3, [r3, #31]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d803      	bhi.n	800ecca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1cb      	bne.n	800ec7a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d008      	beq.n	800ecfa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ece8:	69b9      	ldr	r1, [r7, #24]
 800ecea:	6a38      	ldr	r0, [r7, #32]
 800ecec:	f7ff ff0e 	bl	800eb0c <ip_reass_free_complete_datagram>
 800ecf0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	da02      	bge.n	800ed08 <ip_reass_remove_oldest_datagram+0xb4>
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	dcac      	bgt.n	800ec62 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ed08:	697b      	ldr	r3, [r7, #20]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3728      	adds	r7, #40	; 0x28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20008b10 	.word	0x20008b10

0800ed18 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ed22:	2004      	movs	r0, #4
 800ed24:	f7f6 fad0 	bl	80052c8 <memp_malloc>
 800ed28:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d110      	bne.n	800ed52 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ed30:	6839      	ldr	r1, [r7, #0]
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff ff8e 	bl	800ec54 <ip_reass_remove_oldest_datagram>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	dc03      	bgt.n	800ed48 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ed40:	2004      	movs	r0, #4
 800ed42:	f7f6 fac1 	bl	80052c8 <memp_malloc>
 800ed46:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e016      	b.n	800ed80 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ed52:	2220      	movs	r2, #32
 800ed54:	2100      	movs	r1, #0
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f000 fe1c 	bl	800f994 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	220f      	movs	r2, #15
 800ed60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ed62:	4b09      	ldr	r3, [pc, #36]	; (800ed88 <ip_reass_enqueue_new_datagram+0x70>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ed6a:	4a07      	ldr	r2, [pc, #28]	; (800ed88 <ip_reass_enqueue_new_datagram+0x70>)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3308      	adds	r3, #8
 800ed74:	2214      	movs	r2, #20
 800ed76:	6879      	ldr	r1, [r7, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 fde3 	bl	800f944 <memcpy>
  return ipr;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	20008b10 	.word	0x20008b10

0800ed8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ed96:	4b10      	ldr	r3, [pc, #64]	; (800edd8 <ip_reass_dequeue_datagram+0x4c>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d104      	bne.n	800edaa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a0c      	ldr	r2, [pc, #48]	; (800edd8 <ip_reass_dequeue_datagram+0x4c>)
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	e00d      	b.n	800edc6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d106      	bne.n	800edbe <ip_reass_dequeue_datagram+0x32>
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <ip_reass_dequeue_datagram+0x50>)
 800edb2:	f240 1245 	movw	r2, #325	; 0x145
 800edb6:	490a      	ldr	r1, [pc, #40]	; (800ede0 <ip_reass_dequeue_datagram+0x54>)
 800edb8:	480a      	ldr	r0, [pc, #40]	; (800ede4 <ip_reass_dequeue_datagram+0x58>)
 800edba:	f000 fdf3 	bl	800f9a4 <iprintf>
    prev->next = ipr->next;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800edc6:	6879      	ldr	r1, [r7, #4]
 800edc8:	2004      	movs	r0, #4
 800edca:	f7f6 fac9 	bl	8005360 <memp_free>
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20008b10 	.word	0x20008b10
 800eddc:	080143e4 	.word	0x080143e4
 800ede0:	080144ac 	.word	0x080144ac
 800ede4:	0801442c 	.word	0x0801442c

0800ede8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08c      	sub	sp, #48	; 0x30
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800edf4:	2300      	movs	r3, #0
 800edf6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800edf8:	2301      	movs	r3, #1
 800edfa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	885b      	ldrh	r3, [r3, #2]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f5 fe07 	bl	8004a1c <lwip_htons>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 030f 	and.w	r3, r3, #15
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ee20:	7e7b      	ldrb	r3, [r7, #25]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	8b7a      	ldrh	r2, [r7, #26]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d202      	bcs.n	800ee30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2e:	e135      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ee30:	7e7b      	ldrb	r3, [r7, #25]
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	8b7a      	ldrh	r2, [r7, #26]
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	88db      	ldrh	r3, [r3, #6]
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7f5 fdeb 	bl	8004a1c <lwip_htons>
 800ee46:	4603      	mov	r3, r0
 800ee48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	00db      	lsls	r3, r3, #3
 800ee50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	705a      	strb	r2, [r3, #1]
 800ee62:	2200      	movs	r2, #0
 800ee64:	709a      	strb	r2, [r3, #2]
 800ee66:	2200      	movs	r2, #0
 800ee68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	8afa      	ldrh	r2, [r7, #22]
 800ee6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ee70:	8afa      	ldrh	r2, [r7, #22]
 800ee72:	8b7b      	ldrh	r3, [r7, #26]
 800ee74:	4413      	add	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	88db      	ldrh	r3, [r3, #6]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	8afa      	ldrh	r2, [r7, #22]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d902      	bls.n	800ee8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee88:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8c:	e106      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	627b      	str	r3, [r7, #36]	; 0x24
 800ee94:	e068      	b.n	800ef68 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	889b      	ldrh	r3, [r3, #4]
 800eea0:	b29a      	uxth	r2, r3
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	889b      	ldrh	r3, [r3, #4]
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d235      	bcs.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d020      	beq.n	800eefa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	889b      	ldrh	r3, [r3, #4]
 800eebc:	b29a      	uxth	r2, r3
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	88db      	ldrh	r3, [r3, #6]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d307      	bcc.n	800eed8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	88db      	ldrh	r3, [r3, #6]
 800eecc:	b29a      	uxth	r2, r3
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	889b      	ldrh	r3, [r3, #4]
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d902      	bls.n	800eede <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
 800eedc:	e0de      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800eede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	88db      	ldrh	r3, [r3, #6]
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	889b      	ldrh	r3, [r3, #4]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d03d      	beq.n	800ef70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eef8:	e03a      	b.n	800ef70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	88db      	ldrh	r3, [r3, #6]
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	889b      	ldrh	r3, [r3, #4]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d902      	bls.n	800ef10 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0e:	e0c5      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	605a      	str	r2, [r3, #4]
      break;
 800ef16:	e02b      	b.n	800ef70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	889b      	ldrh	r3, [r3, #4]
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	889b      	ldrh	r3, [r3, #4]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d102      	bne.n	800ef2e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef28:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2c:	e0b6      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef30:	889b      	ldrh	r3, [r3, #4]
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d202      	bcs.n	800ef44 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef42:	e0ab      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ef44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d009      	beq.n	800ef5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ef4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4c:	88db      	ldrh	r3, [r3, #6]
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	889b      	ldrh	r3, [r3, #4]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d001      	beq.n	800ef5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d193      	bne.n	800ee96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ef6e:	e000      	b.n	800ef72 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ef70:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d12d      	bne.n	800efd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d01c      	beq.n	800efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ef7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef80:	88db      	ldrh	r3, [r3, #6]
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	889b      	ldrh	r3, [r3, #4]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d906      	bls.n	800ef9c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ef8e:	4b45      	ldr	r3, [pc, #276]	; (800f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ef90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ef94:	4944      	ldr	r1, [pc, #272]	; (800f0a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ef96:	4845      	ldr	r0, [pc, #276]	; (800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ef98:	f000 fd04 	bl	800f9a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	88db      	ldrh	r3, [r3, #6]
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	889b      	ldrh	r3, [r3, #4]
 800efac:	b29b      	uxth	r3, r3
 800efae:	429a      	cmp	r2, r3
 800efb0:	d010      	beq.n	800efd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	623b      	str	r3, [r7, #32]
 800efb6:	e00d      	b.n	800efd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d006      	beq.n	800efce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800efc0:	4b38      	ldr	r3, [pc, #224]	; (800f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800efc2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800efc6:	493a      	ldr	r1, [pc, #232]	; (800f0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800efc8:	4838      	ldr	r0, [pc, #224]	; (800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800efca:	f000 fceb 	bl	800f9a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d105      	bne.n	800efe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	7f9b      	ldrb	r3, [r3, #30]
 800efde:	f003 0301 	and.w	r3, r3, #1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d059      	beq.n	800f09a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d04f      	beq.n	800f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d006      	beq.n	800f002 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	889b      	ldrh	r3, [r3, #4]
 800effc:	b29b      	uxth	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d002      	beq.n	800f008 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	623b      	str	r3, [r7, #32]
 800f006:	e041      	b.n	800f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f012:	e012      	b.n	800f03a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	88db      	ldrh	r3, [r3, #6]
 800f01e:	b29a      	uxth	r2, r3
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	889b      	ldrh	r3, [r3, #4]
 800f024:	b29b      	uxth	r3, r3
 800f026:	429a      	cmp	r2, r3
 800f028:	d002      	beq.n	800f030 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	623b      	str	r3, [r7, #32]
            break;
 800f02e:	e007      	b.n	800f040 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d1e9      	bne.n	800f014 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d022      	beq.n	800f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f04e:	4b15      	ldr	r3, [pc, #84]	; (800f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f050:	f240 12df 	movw	r2, #479	; 0x1df
 800f054:	4917      	ldr	r1, [pc, #92]	; (800f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f056:	4815      	ldr	r0, [pc, #84]	; (800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f058:	f000 fca4 	bl	800f9a4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f064:	429a      	cmp	r2, r3
 800f066:	d106      	bne.n	800f076 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f068:	4b0e      	ldr	r3, [pc, #56]	; (800f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f06a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f06e:	4911      	ldr	r1, [pc, #68]	; (800f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f070:	480e      	ldr	r0, [pc, #56]	; (800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f072:	f000 fc97 	bl	800f9a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d006      	beq.n	800f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f07e:	4b09      	ldr	r3, [pc, #36]	; (800f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f080:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f084:	490c      	ldr	r1, [pc, #48]	; (800f0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f086:	4809      	ldr	r0, [pc, #36]	; (800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f088:	f000 fc8c 	bl	800f9a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f08c:	6a3b      	ldr	r3, [r7, #32]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	bf14      	ite	ne
 800f092:	2301      	movne	r3, #1
 800f094:	2300      	moveq	r3, #0
 800f096:	b2db      	uxtb	r3, r3
 800f098:	e000      	b.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3730      	adds	r7, #48	; 0x30
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	080143e4 	.word	0x080143e4
 800f0a8:	080144c8 	.word	0x080144c8
 800f0ac:	0801442c 	.word	0x0801442c
 800f0b0:	080144e8 	.word	0x080144e8
 800f0b4:	08014520 	.word	0x08014520
 800f0b8:	08014530 	.word	0x08014530

0800f0bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08e      	sub	sp, #56	; 0x38
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 030f 	and.w	r3, r3, #15
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b14      	cmp	r3, #20
 800f0da:	f040 8171 	bne.w	800f3c0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	88db      	ldrh	r3, [r3, #6]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7f5 fc99 	bl	8004a1c <lwip_htons>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	00db      	lsls	r3, r3, #3
 800f0f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	885b      	ldrh	r3, [r3, #2]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f5 fc8d 	bl	8004a1c <lwip_htons>
 800f102:	4603      	mov	r3, r0
 800f104:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	f003 030f 	and.w	r3, r3, #15
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f11e:	429a      	cmp	r2, r3
 800f120:	f0c0 8150 	bcc.w	800f3c4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f128:	b29b      	uxth	r3, r3
 800f12a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7f7 f813 	bl	800615c <pbuf_clen>
 800f136:	4603      	mov	r3, r0
 800f138:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f13a:	4b8c      	ldr	r3, [pc, #560]	; (800f36c <ip4_reass+0x2b0>)
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	461a      	mov	r2, r3
 800f140:	8c3b      	ldrh	r3, [r7, #32]
 800f142:	4413      	add	r3, r2
 800f144:	2b0a      	cmp	r3, #10
 800f146:	dd10      	ble.n	800f16a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f148:	8c3b      	ldrh	r3, [r7, #32]
 800f14a:	4619      	mov	r1, r3
 800f14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f14e:	f7ff fd81 	bl	800ec54 <ip_reass_remove_oldest_datagram>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 8137 	beq.w	800f3c8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f15a:	4b84      	ldr	r3, [pc, #528]	; (800f36c <ip4_reass+0x2b0>)
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	461a      	mov	r2, r3
 800f160:	8c3b      	ldrh	r3, [r7, #32]
 800f162:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f164:	2b0a      	cmp	r3, #10
 800f166:	f300 812f 	bgt.w	800f3c8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f16a:	4b81      	ldr	r3, [pc, #516]	; (800f370 <ip4_reass+0x2b4>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	633b      	str	r3, [r7, #48]	; 0x30
 800f170:	e015      	b.n	800f19e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	695a      	ldr	r2, [r3, #20]
 800f176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d10c      	bne.n	800f198 <ip4_reass+0xdc>
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	699a      	ldr	r2, [r3, #24]
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	429a      	cmp	r2, r3
 800f188:	d106      	bne.n	800f198 <ip4_reass+0xdc>
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	899a      	ldrh	r2, [r3, #12]
 800f18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f190:	889b      	ldrh	r3, [r3, #4]
 800f192:	b29b      	uxth	r3, r3
 800f194:	429a      	cmp	r2, r3
 800f196:	d006      	beq.n	800f1a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	633b      	str	r3, [r7, #48]	; 0x30
 800f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e6      	bne.n	800f172 <ip4_reass+0xb6>
 800f1a4:	e000      	b.n	800f1a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f1a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f1ae:	8c3b      	ldrh	r3, [r7, #32]
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1b4:	f7ff fdb0 	bl	800ed18 <ip_reass_enqueue_new_datagram>
 800f1b8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d11c      	bne.n	800f1fa <ip4_reass+0x13e>
      goto nullreturn;
 800f1c0:	e105      	b.n	800f3ce <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c4:	88db      	ldrh	r3, [r3, #6]
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f5 fc27 	bl	8004a1c <lwip_htons>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d110      	bne.n	800f1fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	89db      	ldrh	r3, [r3, #14]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f5 fc1d 	bl	8004a1c <lwip_htons>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d006      	beq.n	800f1fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	3308      	adds	r3, #8
 800f1f0:	2214      	movs	r2, #20
 800f1f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 fba5 	bl	800f944 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	88db      	ldrh	r3, [r3, #6]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	f003 0320 	and.w	r3, r3, #32
 800f204:	2b00      	cmp	r3, #0
 800f206:	bf0c      	ite	eq
 800f208:	2301      	moveq	r3, #1
 800f20a:	2300      	movne	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00e      	beq.n	800f234 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f21a:	4413      	add	r3, r2
 800f21c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f21e:	8b7a      	ldrh	r2, [r7, #26]
 800f220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f222:	429a      	cmp	r2, r3
 800f224:	f0c0 80a0 	bcc.w	800f368 <ip4_reass+0x2ac>
 800f228:	8b7b      	ldrh	r3, [r7, #26]
 800f22a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f22e:	4293      	cmp	r3, r2
 800f230:	f200 809a 	bhi.w	800f368 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f234:	69fa      	ldr	r2, [r7, #28]
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f23a:	f7ff fdd5 	bl	800ede8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f23e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f246:	f000 809b 	beq.w	800f380 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f24a:	4b48      	ldr	r3, [pc, #288]	; (800f36c <ip4_reass+0x2b0>)
 800f24c:	881a      	ldrh	r2, [r3, #0]
 800f24e:	8c3b      	ldrh	r3, [r7, #32]
 800f250:	4413      	add	r3, r2
 800f252:	b29a      	uxth	r2, r3
 800f254:	4b45      	ldr	r3, [pc, #276]	; (800f36c <ip4_reass+0x2b0>)
 800f256:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00d      	beq.n	800f27a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f25e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f262:	4413      	add	r3, r2
 800f264:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	8a7a      	ldrh	r2, [r7, #18]
 800f26a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	7f9b      	ldrb	r3, [r3, #30]
 800f270:	f043 0301 	orr.w	r3, r3, #1
 800f274:	b2da      	uxtb	r2, r3
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d171      	bne.n	800f364 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f282:	8b9b      	ldrh	r3, [r3, #28]
 800f284:	3314      	adds	r3, #20
 800f286:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	3308      	adds	r3, #8
 800f29e:	2214      	movs	r2, #20
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2a4:	f000 fb4e 	bl	800f944 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f2a8:	8a3b      	ldrh	r3, [r7, #16]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7f5 fbb6 	bl	8004a1c <lwip_htons>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	719a      	strb	r2, [r3, #6]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	729a      	strb	r2, [r3, #10]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f2d2:	e00d      	b.n	800f2f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f2da:	2114      	movs	r1, #20
 800f2dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2de:	f7f6 fe2f 	bl	8005f40 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7f6 ff73 	bl	80061d0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1ee      	bne.n	800f2d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f2f6:	4b1e      	ldr	r3, [pc, #120]	; (800f370 <ip4_reass+0x2b4>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d102      	bne.n	800f306 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	637b      	str	r3, [r7, #52]	; 0x34
 800f304:	e010      	b.n	800f328 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f306:	4b1a      	ldr	r3, [pc, #104]	; (800f370 <ip4_reass+0x2b4>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	637b      	str	r3, [r7, #52]	; 0x34
 800f30c:	e007      	b.n	800f31e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f314:	429a      	cmp	r2, r3
 800f316:	d006      	beq.n	800f326 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	637b      	str	r3, [r7, #52]	; 0x34
 800f31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1f4      	bne.n	800f30e <ip4_reass+0x252>
 800f324:	e000      	b.n	800f328 <ip4_reass+0x26c>
          break;
 800f326:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f32a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f32c:	f7ff fd2e 	bl	800ed8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7f6 ff13 	bl	800615c <pbuf_clen>
 800f336:	4603      	mov	r3, r0
 800f338:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f33a:	4b0c      	ldr	r3, [pc, #48]	; (800f36c <ip4_reass+0x2b0>)
 800f33c:	881b      	ldrh	r3, [r3, #0]
 800f33e:	8c3a      	ldrh	r2, [r7, #32]
 800f340:	429a      	cmp	r2, r3
 800f342:	d906      	bls.n	800f352 <ip4_reass+0x296>
 800f344:	4b0b      	ldr	r3, [pc, #44]	; (800f374 <ip4_reass+0x2b8>)
 800f346:	f240 229b 	movw	r2, #667	; 0x29b
 800f34a:	490b      	ldr	r1, [pc, #44]	; (800f378 <ip4_reass+0x2bc>)
 800f34c:	480b      	ldr	r0, [pc, #44]	; (800f37c <ip4_reass+0x2c0>)
 800f34e:	f000 fb29 	bl	800f9a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f352:	4b06      	ldr	r3, [pc, #24]	; (800f36c <ip4_reass+0x2b0>)
 800f354:	881a      	ldrh	r2, [r3, #0]
 800f356:	8c3b      	ldrh	r3, [r7, #32]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	4b03      	ldr	r3, [pc, #12]	; (800f36c <ip4_reass+0x2b0>)
 800f35e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	e038      	b.n	800f3d6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f364:	2300      	movs	r3, #0
 800f366:	e036      	b.n	800f3d6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f368:	bf00      	nop
 800f36a:	e00a      	b.n	800f382 <ip4_reass+0x2c6>
 800f36c:	20008b14 	.word	0x20008b14
 800f370:	20008b10 	.word	0x20008b10
 800f374:	080143e4 	.word	0x080143e4
 800f378:	08014554 	.word	0x08014554
 800f37c:	0801442c 	.word	0x0801442c
    goto nullreturn_ipr;
 800f380:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	2b00      	cmp	r3, #0
 800f386:	d106      	bne.n	800f396 <ip4_reass+0x2da>
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <ip4_reass+0x324>)
 800f38a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f38e:	4915      	ldr	r1, [pc, #84]	; (800f3e4 <ip4_reass+0x328>)
 800f390:	4815      	ldr	r0, [pc, #84]	; (800f3e8 <ip4_reass+0x32c>)
 800f392:	f000 fb07 	bl	800f9a4 <iprintf>
  if (ipr->p == NULL) {
 800f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d116      	bne.n	800f3cc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f39e:	4b13      	ldr	r3, [pc, #76]	; (800f3ec <ip4_reass+0x330>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d006      	beq.n	800f3b6 <ip4_reass+0x2fa>
 800f3a8:	4b0d      	ldr	r3, [pc, #52]	; (800f3e0 <ip4_reass+0x324>)
 800f3aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f3ae:	4910      	ldr	r1, [pc, #64]	; (800f3f0 <ip4_reass+0x334>)
 800f3b0:	480d      	ldr	r0, [pc, #52]	; (800f3e8 <ip4_reass+0x32c>)
 800f3b2:	f000 faf7 	bl	800f9a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ba:	f7ff fce7 	bl	800ed8c <ip_reass_dequeue_datagram>
 800f3be:	e006      	b.n	800f3ce <ip4_reass+0x312>
    goto nullreturn;
 800f3c0:	bf00      	nop
 800f3c2:	e004      	b.n	800f3ce <ip4_reass+0x312>
    goto nullreturn;
 800f3c4:	bf00      	nop
 800f3c6:	e002      	b.n	800f3ce <ip4_reass+0x312>
      goto nullreturn;
 800f3c8:	bf00      	nop
 800f3ca:	e000      	b.n	800f3ce <ip4_reass+0x312>
  }

nullreturn:
 800f3cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7f6 fe3c 	bl	800604c <pbuf_free>
  return NULL;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3738      	adds	r7, #56	; 0x38
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	080143e4 	.word	0x080143e4
 800f3e4:	08014570 	.word	0x08014570
 800f3e8:	0801442c 	.word	0x0801442c
 800f3ec:	20008b10 	.word	0x20008b10
 800f3f0:	0801457c 	.word	0x0801457c

0800f3f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f3f8:	2005      	movs	r0, #5
 800f3fa:	f7f5 ff65 	bl	80052c8 <memp_malloc>
 800f3fe:	4603      	mov	r3, r0
}
 800f400:	4618      	mov	r0, r3
 800f402:	bd80      	pop	{r7, pc}

0800f404 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f412:	4b07      	ldr	r3, [pc, #28]	; (800f430 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f414:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f418:	4906      	ldr	r1, [pc, #24]	; (800f434 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f41a:	4807      	ldr	r0, [pc, #28]	; (800f438 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f41c:	f000 fac2 	bl	800f9a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f420:	6879      	ldr	r1, [r7, #4]
 800f422:	2005      	movs	r0, #5
 800f424:	f7f5 ff9c 	bl	8005360 <memp_free>
}
 800f428:	bf00      	nop
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	080143e4 	.word	0x080143e4
 800f434:	0801459c 	.word	0x0801459c
 800f438:	0801442c 	.word	0x0801442c

0800f43c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <ipfrag_free_pbuf_custom+0x20>
 800f44e:	4b11      	ldr	r3, [pc, #68]	; (800f494 <ipfrag_free_pbuf_custom+0x58>)
 800f450:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f454:	4910      	ldr	r1, [pc, #64]	; (800f498 <ipfrag_free_pbuf_custom+0x5c>)
 800f456:	4811      	ldr	r0, [pc, #68]	; (800f49c <ipfrag_free_pbuf_custom+0x60>)
 800f458:	f000 faa4 	bl	800f9a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	429a      	cmp	r2, r3
 800f462:	d006      	beq.n	800f472 <ipfrag_free_pbuf_custom+0x36>
 800f464:	4b0b      	ldr	r3, [pc, #44]	; (800f494 <ipfrag_free_pbuf_custom+0x58>)
 800f466:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f46a:	490d      	ldr	r1, [pc, #52]	; (800f4a0 <ipfrag_free_pbuf_custom+0x64>)
 800f46c:	480b      	ldr	r0, [pc, #44]	; (800f49c <ipfrag_free_pbuf_custom+0x60>)
 800f46e:	f000 fa99 	bl	800f9a4 <iprintf>
  if (pcr->original != NULL) {
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d004      	beq.n	800f484 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	4618      	mov	r0, r3
 800f480:	f7f6 fde4 	bl	800604c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f7ff ffbd 	bl	800f404 <ip_frag_free_pbuf_custom_ref>
}
 800f48a:	bf00      	nop
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	080143e4 	.word	0x080143e4
 800f498:	080145a8 	.word	0x080145a8
 800f49c:	0801442c 	.word	0x0801442c
 800f4a0:	080145b4 	.word	0x080145b4

0800f4a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b094      	sub	sp, #80	; 0x50
 800f4a8:	af02      	add	r7, sp, #8
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4ba:	3b14      	subs	r3, #20
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da00      	bge.n	800f4c2 <ip4_frag+0x1e>
 800f4c0:	3307      	adds	r3, #7
 800f4c2:	10db      	asrs	r3, r3, #3
 800f4c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f4c6:	2314      	movs	r3, #20
 800f4c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	2b14      	cmp	r3, #20
 800f4e4:	d002      	beq.n	800f4ec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f4e6:	f06f 0305 	mvn.w	r3, #5
 800f4ea:	e110      	b.n	800f70e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	895b      	ldrh	r3, [r3, #10]
 800f4f0:	2b13      	cmp	r3, #19
 800f4f2:	d809      	bhi.n	800f508 <ip4_frag+0x64>
 800f4f4:	4b88      	ldr	r3, [pc, #544]	; (800f718 <ip4_frag+0x274>)
 800f4f6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f4fa:	4988      	ldr	r1, [pc, #544]	; (800f71c <ip4_frag+0x278>)
 800f4fc:	4888      	ldr	r0, [pc, #544]	; (800f720 <ip4_frag+0x27c>)
 800f4fe:	f000 fa51 	bl	800f9a4 <iprintf>
 800f502:	f06f 0305 	mvn.w	r3, #5
 800f506:	e102      	b.n	800f70e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50a:	88db      	ldrh	r3, [r3, #6]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f5 fa84 	bl	8004a1c <lwip_htons>
 800f514:	4603      	mov	r3, r0
 800f516:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f518:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f51a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f51e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f522:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f528:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	891b      	ldrh	r3, [r3, #8]
 800f52e:	3b14      	subs	r3, #20
 800f530:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f534:	e0e1      	b.n	800f6fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f536:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f538:	00db      	lsls	r3, r3, #3
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f540:	4293      	cmp	r3, r2
 800f542:	bf28      	it	cs
 800f544:	4613      	movcs	r3, r2
 800f546:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f548:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f54c:	2114      	movs	r1, #20
 800f54e:	200e      	movs	r0, #14
 800f550:	f7f6 fa98 	bl	8005a84 <pbuf_alloc>
 800f554:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f000 80d5 	beq.w	800f708 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	895b      	ldrh	r3, [r3, #10]
 800f562:	2b13      	cmp	r3, #19
 800f564:	d806      	bhi.n	800f574 <ip4_frag+0xd0>
 800f566:	4b6c      	ldr	r3, [pc, #432]	; (800f718 <ip4_frag+0x274>)
 800f568:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f56c:	496d      	ldr	r1, [pc, #436]	; (800f724 <ip4_frag+0x280>)
 800f56e:	486c      	ldr	r0, [pc, #432]	; (800f720 <ip4_frag+0x27c>)
 800f570:	f000 fa18 	bl	800f9a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	2214      	movs	r2, #20
 800f57a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f57c:	4618      	mov	r0, r3
 800f57e:	f000 f9e1 	bl	800f944 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f588:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f58a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f58e:	e064      	b.n	800f65a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	895a      	ldrh	r2, [r3, #10]
 800f594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	895b      	ldrh	r3, [r3, #10]
 800f59e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d906      	bls.n	800f5b2 <ip4_frag+0x10e>
 800f5a4:	4b5c      	ldr	r3, [pc, #368]	; (800f718 <ip4_frag+0x274>)
 800f5a6:	f240 322d 	movw	r2, #813	; 0x32d
 800f5aa:	495f      	ldr	r1, [pc, #380]	; (800f728 <ip4_frag+0x284>)
 800f5ac:	485c      	ldr	r0, [pc, #368]	; (800f720 <ip4_frag+0x27c>)
 800f5ae:	f000 f9f9 	bl	800f9a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f5b2:	8bfa      	ldrh	r2, [r7, #30]
 800f5b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	bf28      	it	cs
 800f5bc:	4613      	movcs	r3, r2
 800f5be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f5c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d105      	bne.n	800f5d6 <ip4_frag+0x132>
        poff = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	60fb      	str	r3, [r7, #12]
        continue;
 800f5d4:	e041      	b.n	800f65a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f5d6:	f7ff ff0d 	bl	800f3f4 <ip_frag_alloc_pbuf_custom_ref>
 800f5da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d103      	bne.n	800f5ea <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f5e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5e4:	f7f6 fd32 	bl	800604c <pbuf_free>
        goto memerr;
 800f5e8:	e08f      	b.n	800f70a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f5ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f5f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f5f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f5fc:	9201      	str	r2, [sp, #4]
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	4603      	mov	r3, r0
 800f602:	2241      	movs	r2, #65	; 0x41
 800f604:	2000      	movs	r0, #0
 800f606:	f7f6 fb67 	bl	8005cd8 <pbuf_alloced_custom>
 800f60a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d106      	bne.n	800f620 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f612:	69b8      	ldr	r0, [r7, #24]
 800f614:	f7ff fef6 	bl	800f404 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f61a:	f7f6 fd17 	bl	800604c <pbuf_free>
        goto memerr;
 800f61e:	e074      	b.n	800f70a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f7f6 fdb3 	bl	800618c <pbuf_ref>
      pcr->original = p;
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	4a3f      	ldr	r2, [pc, #252]	; (800f72c <ip4_frag+0x288>)
 800f630:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f632:	6979      	ldr	r1, [r7, #20]
 800f634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f636:	f7f6 fdcb 	bl	80061d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f63a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f63e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f648:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d004      	beq.n	800f65a <ip4_frag+0x1b6>
        poff = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f65a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d196      	bne.n	800f590 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f662:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f664:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f668:	4413      	add	r3, r2
 800f66a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f670:	f1a3 0213 	sub.w	r2, r3, #19
 800f674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f678:	429a      	cmp	r2, r3
 800f67a:	bfcc      	ite	gt
 800f67c:	2301      	movgt	r3, #1
 800f67e:	2300      	movle	r3, #0
 800f680:	b2db      	uxtb	r3, r3
 800f682:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f684:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f68c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f68e:	6a3b      	ldr	r3, [r7, #32]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <ip4_frag+0x1f6>
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	2b00      	cmp	r3, #0
 800f698:	d003      	beq.n	800f6a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f69a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f69c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f6a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f6a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7f5 f9b9 	bl	8004a1c <lwip_htons>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f6b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6b4:	3314      	adds	r3, #20
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7f5 f9af 	bl	8004a1c <lwip_htons>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	729a      	strb	r2, [r3, #10]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6d8:	68b8      	ldr	r0, [r7, #8]
 800f6da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6de:	f7f6 fcb5 	bl	800604c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f6e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f6ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f6f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6f4:	4413      	add	r3, r2
 800f6f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f6fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f47f af19 	bne.w	800f536 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f704:	2300      	movs	r3, #0
 800f706:	e002      	b.n	800f70e <ip4_frag+0x26a>
      goto memerr;
 800f708:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f70a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3748      	adds	r7, #72	; 0x48
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	080143e4 	.word	0x080143e4
 800f71c:	080145c0 	.word	0x080145c0
 800f720:	0801442c 	.word	0x0801442c
 800f724:	080145dc 	.word	0x080145dc
 800f728:	080145fc 	.word	0x080145fc
 800f72c:	0800f43d 	.word	0x0800f43d

0800f730 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f73a:	230e      	movs	r3, #14
 800f73c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	895b      	ldrh	r3, [r3, #10]
 800f742:	2b0e      	cmp	r3, #14
 800f744:	d96e      	bls.n	800f824 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	7bdb      	ldrb	r3, [r3, #15]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f754:	3301      	adds	r3, #1
 800f756:	b2da      	uxtb	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	7b1a      	ldrb	r2, [r3, #12]
 800f766:	7b5b      	ldrb	r3, [r3, #13]
 800f768:	021b      	lsls	r3, r3, #8
 800f76a:	4313      	orrs	r3, r2
 800f76c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	d023      	beq.n	800f7c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d10f      	bne.n	800f7a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	785b      	ldrb	r3, [r3, #1]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d11b      	bne.n	800f7c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f78e:	2b5e      	cmp	r3, #94	; 0x5e
 800f790:	d117      	bne.n	800f7c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	7b5b      	ldrb	r3, [r3, #13]
 800f796:	f043 0310 	orr.w	r3, r3, #16
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	735a      	strb	r2, [r3, #13]
 800f7a0:	e00f      	b.n	800f7c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2206      	movs	r2, #6
 800f7a6:	4928      	ldr	r1, [pc, #160]	; (800f848 <ethernet_input+0x118>)
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 f8bb 	bl	800f924 <memcmp>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d106      	bne.n	800f7c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7b5b      	ldrb	r3, [r3, #13]
 800f7b8:	f043 0308 	orr.w	r3, r3, #8
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f7c2:	89fb      	ldrh	r3, [r7, #14]
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d003      	beq.n	800f7d0 <ethernet_input+0xa0>
 800f7c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f7cc:	d014      	beq.n	800f7f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f7ce:	e032      	b.n	800f836 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7d6:	f003 0308 	and.w	r3, r3, #8
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d024      	beq.n	800f828 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f7de:	8afb      	ldrh	r3, [r7, #22]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7f6 fbac 	bl	8005f40 <pbuf_remove_header>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d11e      	bne.n	800f82c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7fe fe91 	bl	800e518 <ip4_input>
      break;
 800f7f6:	e013      	b.n	800f820 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7fe:	f003 0308 	and.w	r3, r3, #8
 800f802:	2b00      	cmp	r3, #0
 800f804:	d014      	beq.n	800f830 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f806:	8afb      	ldrh	r3, [r7, #22]
 800f808:	4619      	mov	r1, r3
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7f6 fb98 	bl	8005f40 <pbuf_remove_header>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d10e      	bne.n	800f834 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7fe f82b 	bl	800d874 <etharp_input>
      break;
 800f81e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f820:	2300      	movs	r3, #0
 800f822:	e00c      	b.n	800f83e <ethernet_input+0x10e>
    goto free_and_return;
 800f824:	bf00      	nop
 800f826:	e006      	b.n	800f836 <ethernet_input+0x106>
        goto free_and_return;
 800f828:	bf00      	nop
 800f82a:	e004      	b.n	800f836 <ethernet_input+0x106>
        goto free_and_return;
 800f82c:	bf00      	nop
 800f82e:	e002      	b.n	800f836 <ethernet_input+0x106>
        goto free_and_return;
 800f830:	bf00      	nop
 800f832:	e000      	b.n	800f836 <ethernet_input+0x106>
        goto free_and_return;
 800f834:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7f6 fc08 	bl	800604c <pbuf_free>
  return ERR_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	080147d4 	.word	0x080147d4

0800f84c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
 800f858:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f85a:	8c3b      	ldrh	r3, [r7, #32]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7f5 f8dd 	bl	8004a1c <lwip_htons>
 800f862:	4603      	mov	r3, r0
 800f864:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f866:	210e      	movs	r1, #14
 800f868:	68b8      	ldr	r0, [r7, #8]
 800f86a:	f7f6 fb59 	bl	8005f20 <pbuf_add_header>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d125      	bne.n	800f8c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	8afa      	ldrh	r2, [r7, #22]
 800f87e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2206      	movs	r2, #6
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	4618      	mov	r0, r3
 800f888:	f000 f85c 	bl	800f944 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	3306      	adds	r3, #6
 800f890:	2206      	movs	r2, #6
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	f000 f855 	bl	800f944 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8a0:	2b06      	cmp	r3, #6
 800f8a2:	d006      	beq.n	800f8b2 <ethernet_output+0x66>
 800f8a4:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <ethernet_output+0x84>)
 800f8a6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f8aa:	490a      	ldr	r1, [pc, #40]	; (800f8d4 <ethernet_output+0x88>)
 800f8ac:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <ethernet_output+0x8c>)
 800f8ae:	f000 f879 	bl	800f9a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	699b      	ldr	r3, [r3, #24]
 800f8b6:	68b9      	ldr	r1, [r7, #8]
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	4798      	blx	r3
 800f8bc:	4603      	mov	r3, r0
 800f8be:	e002      	b.n	800f8c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f8c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f8c2:	f06f 0301 	mvn.w	r3, #1
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	0801460c 	.word	0x0801460c
 800f8d4:	08014644 	.word	0x08014644
 800f8d8:	08014678 	.word	0x08014678

0800f8dc <__libc_init_array>:
 800f8dc:	b570      	push	{r4, r5, r6, lr}
 800f8de:	4d0d      	ldr	r5, [pc, #52]	; (800f914 <__libc_init_array+0x38>)
 800f8e0:	4c0d      	ldr	r4, [pc, #52]	; (800f918 <__libc_init_array+0x3c>)
 800f8e2:	1b64      	subs	r4, r4, r5
 800f8e4:	10a4      	asrs	r4, r4, #2
 800f8e6:	2600      	movs	r6, #0
 800f8e8:	42a6      	cmp	r6, r4
 800f8ea:	d109      	bne.n	800f900 <__libc_init_array+0x24>
 800f8ec:	4d0b      	ldr	r5, [pc, #44]	; (800f91c <__libc_init_array+0x40>)
 800f8ee:	4c0c      	ldr	r4, [pc, #48]	; (800f920 <__libc_init_array+0x44>)
 800f8f0:	f001 fb6c 	bl	8010fcc <_init>
 800f8f4:	1b64      	subs	r4, r4, r5
 800f8f6:	10a4      	asrs	r4, r4, #2
 800f8f8:	2600      	movs	r6, #0
 800f8fa:	42a6      	cmp	r6, r4
 800f8fc:	d105      	bne.n	800f90a <__libc_init_array+0x2e>
 800f8fe:	bd70      	pop	{r4, r5, r6, pc}
 800f900:	f855 3b04 	ldr.w	r3, [r5], #4
 800f904:	4798      	blx	r3
 800f906:	3601      	adds	r6, #1
 800f908:	e7ee      	b.n	800f8e8 <__libc_init_array+0xc>
 800f90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f90e:	4798      	blx	r3
 800f910:	3601      	adds	r6, #1
 800f912:	e7f2      	b.n	800f8fa <__libc_init_array+0x1e>
 800f914:	08014934 	.word	0x08014934
 800f918:	08014934 	.word	0x08014934
 800f91c:	08014934 	.word	0x08014934
 800f920:	08014938 	.word	0x08014938

0800f924 <memcmp>:
 800f924:	b510      	push	{r4, lr}
 800f926:	3901      	subs	r1, #1
 800f928:	4402      	add	r2, r0
 800f92a:	4290      	cmp	r0, r2
 800f92c:	d101      	bne.n	800f932 <memcmp+0xe>
 800f92e:	2000      	movs	r0, #0
 800f930:	e005      	b.n	800f93e <memcmp+0x1a>
 800f932:	7803      	ldrb	r3, [r0, #0]
 800f934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f938:	42a3      	cmp	r3, r4
 800f93a:	d001      	beq.n	800f940 <memcmp+0x1c>
 800f93c:	1b18      	subs	r0, r3, r4
 800f93e:	bd10      	pop	{r4, pc}
 800f940:	3001      	adds	r0, #1
 800f942:	e7f2      	b.n	800f92a <memcmp+0x6>

0800f944 <memcpy>:
 800f944:	440a      	add	r2, r1
 800f946:	4291      	cmp	r1, r2
 800f948:	f100 33ff 	add.w	r3, r0, #4294967295
 800f94c:	d100      	bne.n	800f950 <memcpy+0xc>
 800f94e:	4770      	bx	lr
 800f950:	b510      	push	{r4, lr}
 800f952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f95a:	4291      	cmp	r1, r2
 800f95c:	d1f9      	bne.n	800f952 <memcpy+0xe>
 800f95e:	bd10      	pop	{r4, pc}

0800f960 <memmove>:
 800f960:	4288      	cmp	r0, r1
 800f962:	b510      	push	{r4, lr}
 800f964:	eb01 0402 	add.w	r4, r1, r2
 800f968:	d902      	bls.n	800f970 <memmove+0x10>
 800f96a:	4284      	cmp	r4, r0
 800f96c:	4623      	mov	r3, r4
 800f96e:	d807      	bhi.n	800f980 <memmove+0x20>
 800f970:	1e43      	subs	r3, r0, #1
 800f972:	42a1      	cmp	r1, r4
 800f974:	d008      	beq.n	800f988 <memmove+0x28>
 800f976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f97e:	e7f8      	b.n	800f972 <memmove+0x12>
 800f980:	4402      	add	r2, r0
 800f982:	4601      	mov	r1, r0
 800f984:	428a      	cmp	r2, r1
 800f986:	d100      	bne.n	800f98a <memmove+0x2a>
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f992:	e7f7      	b.n	800f984 <memmove+0x24>

0800f994 <memset>:
 800f994:	4402      	add	r2, r0
 800f996:	4603      	mov	r3, r0
 800f998:	4293      	cmp	r3, r2
 800f99a:	d100      	bne.n	800f99e <memset+0xa>
 800f99c:	4770      	bx	lr
 800f99e:	f803 1b01 	strb.w	r1, [r3], #1
 800f9a2:	e7f9      	b.n	800f998 <memset+0x4>

0800f9a4 <iprintf>:
 800f9a4:	b40f      	push	{r0, r1, r2, r3}
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <iprintf+0x2c>)
 800f9a8:	b513      	push	{r0, r1, r4, lr}
 800f9aa:	681c      	ldr	r4, [r3, #0]
 800f9ac:	b124      	cbz	r4, 800f9b8 <iprintf+0x14>
 800f9ae:	69a3      	ldr	r3, [r4, #24]
 800f9b0:	b913      	cbnz	r3, 800f9b8 <iprintf+0x14>
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 fb2c 	bl	8010010 <__sinit>
 800f9b8:	ab05      	add	r3, sp, #20
 800f9ba:	9a04      	ldr	r2, [sp, #16]
 800f9bc:	68a1      	ldr	r1, [r4, #8]
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f000 feab 	bl	801071c <_vfiprintf_r>
 800f9c6:	b002      	add	sp, #8
 800f9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9cc:	b004      	add	sp, #16
 800f9ce:	4770      	bx	lr
 800f9d0:	20000014 	.word	0x20000014

0800f9d4 <putchar>:
 800f9d4:	4b09      	ldr	r3, [pc, #36]	; (800f9fc <putchar+0x28>)
 800f9d6:	b513      	push	{r0, r1, r4, lr}
 800f9d8:	681c      	ldr	r4, [r3, #0]
 800f9da:	4601      	mov	r1, r0
 800f9dc:	b134      	cbz	r4, 800f9ec <putchar+0x18>
 800f9de:	69a3      	ldr	r3, [r4, #24]
 800f9e0:	b923      	cbnz	r3, 800f9ec <putchar+0x18>
 800f9e2:	9001      	str	r0, [sp, #4]
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f000 fb13 	bl	8010010 <__sinit>
 800f9ea:	9901      	ldr	r1, [sp, #4]
 800f9ec:	68a2      	ldr	r2, [r4, #8]
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	b002      	add	sp, #8
 800f9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9f6:	f001 b955 	b.w	8010ca4 <_putc_r>
 800f9fa:	bf00      	nop
 800f9fc:	20000014 	.word	0x20000014

0800fa00 <_puts_r>:
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	460e      	mov	r6, r1
 800fa04:	4605      	mov	r5, r0
 800fa06:	b118      	cbz	r0, 800fa10 <_puts_r+0x10>
 800fa08:	6983      	ldr	r3, [r0, #24]
 800fa0a:	b90b      	cbnz	r3, 800fa10 <_puts_r+0x10>
 800fa0c:	f000 fb00 	bl	8010010 <__sinit>
 800fa10:	69ab      	ldr	r3, [r5, #24]
 800fa12:	68ac      	ldr	r4, [r5, #8]
 800fa14:	b913      	cbnz	r3, 800fa1c <_puts_r+0x1c>
 800fa16:	4628      	mov	r0, r5
 800fa18:	f000 fafa 	bl	8010010 <__sinit>
 800fa1c:	4b2c      	ldr	r3, [pc, #176]	; (800fad0 <_puts_r+0xd0>)
 800fa1e:	429c      	cmp	r4, r3
 800fa20:	d120      	bne.n	800fa64 <_puts_r+0x64>
 800fa22:	686c      	ldr	r4, [r5, #4]
 800fa24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa26:	07db      	lsls	r3, r3, #31
 800fa28:	d405      	bmi.n	800fa36 <_puts_r+0x36>
 800fa2a:	89a3      	ldrh	r3, [r4, #12]
 800fa2c:	0598      	lsls	r0, r3, #22
 800fa2e:	d402      	bmi.n	800fa36 <_puts_r+0x36>
 800fa30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa32:	f000 fb9d 	bl	8010170 <__retarget_lock_acquire_recursive>
 800fa36:	89a3      	ldrh	r3, [r4, #12]
 800fa38:	0719      	lsls	r1, r3, #28
 800fa3a:	d51d      	bpl.n	800fa78 <_puts_r+0x78>
 800fa3c:	6923      	ldr	r3, [r4, #16]
 800fa3e:	b1db      	cbz	r3, 800fa78 <_puts_r+0x78>
 800fa40:	3e01      	subs	r6, #1
 800fa42:	68a3      	ldr	r3, [r4, #8]
 800fa44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	60a3      	str	r3, [r4, #8]
 800fa4c:	bb39      	cbnz	r1, 800fa9e <_puts_r+0x9e>
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	da38      	bge.n	800fac4 <_puts_r+0xc4>
 800fa52:	4622      	mov	r2, r4
 800fa54:	210a      	movs	r1, #10
 800fa56:	4628      	mov	r0, r5
 800fa58:	f000 f8e2 	bl	800fc20 <__swbuf_r>
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	d011      	beq.n	800fa84 <_puts_r+0x84>
 800fa60:	250a      	movs	r5, #10
 800fa62:	e011      	b.n	800fa88 <_puts_r+0x88>
 800fa64:	4b1b      	ldr	r3, [pc, #108]	; (800fad4 <_puts_r+0xd4>)
 800fa66:	429c      	cmp	r4, r3
 800fa68:	d101      	bne.n	800fa6e <_puts_r+0x6e>
 800fa6a:	68ac      	ldr	r4, [r5, #8]
 800fa6c:	e7da      	b.n	800fa24 <_puts_r+0x24>
 800fa6e:	4b1a      	ldr	r3, [pc, #104]	; (800fad8 <_puts_r+0xd8>)
 800fa70:	429c      	cmp	r4, r3
 800fa72:	bf08      	it	eq
 800fa74:	68ec      	ldreq	r4, [r5, #12]
 800fa76:	e7d5      	b.n	800fa24 <_puts_r+0x24>
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	f000 f922 	bl	800fcc4 <__swsetup_r>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d0dd      	beq.n	800fa40 <_puts_r+0x40>
 800fa84:	f04f 35ff 	mov.w	r5, #4294967295
 800fa88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa8a:	07da      	lsls	r2, r3, #31
 800fa8c:	d405      	bmi.n	800fa9a <_puts_r+0x9a>
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	059b      	lsls	r3, r3, #22
 800fa92:	d402      	bmi.n	800fa9a <_puts_r+0x9a>
 800fa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa96:	f000 fb6c 	bl	8010172 <__retarget_lock_release_recursive>
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	bd70      	pop	{r4, r5, r6, pc}
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	da04      	bge.n	800faac <_puts_r+0xac>
 800faa2:	69a2      	ldr	r2, [r4, #24]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	dc06      	bgt.n	800fab6 <_puts_r+0xb6>
 800faa8:	290a      	cmp	r1, #10
 800faaa:	d004      	beq.n	800fab6 <_puts_r+0xb6>
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	6022      	str	r2, [r4, #0]
 800fab2:	7019      	strb	r1, [r3, #0]
 800fab4:	e7c5      	b.n	800fa42 <_puts_r+0x42>
 800fab6:	4622      	mov	r2, r4
 800fab8:	4628      	mov	r0, r5
 800faba:	f000 f8b1 	bl	800fc20 <__swbuf_r>
 800fabe:	3001      	adds	r0, #1
 800fac0:	d1bf      	bne.n	800fa42 <_puts_r+0x42>
 800fac2:	e7df      	b.n	800fa84 <_puts_r+0x84>
 800fac4:	6823      	ldr	r3, [r4, #0]
 800fac6:	250a      	movs	r5, #10
 800fac8:	1c5a      	adds	r2, r3, #1
 800faca:	6022      	str	r2, [r4, #0]
 800facc:	701d      	strb	r5, [r3, #0]
 800face:	e7db      	b.n	800fa88 <_puts_r+0x88>
 800fad0:	080148b8 	.word	0x080148b8
 800fad4:	080148d8 	.word	0x080148d8
 800fad8:	08014898 	.word	0x08014898

0800fadc <puts>:
 800fadc:	4b02      	ldr	r3, [pc, #8]	; (800fae8 <puts+0xc>)
 800fade:	4601      	mov	r1, r0
 800fae0:	6818      	ldr	r0, [r3, #0]
 800fae2:	f7ff bf8d 	b.w	800fa00 <_puts_r>
 800fae6:	bf00      	nop
 800fae8:	20000014 	.word	0x20000014

0800faec <rand>:
 800faec:	4b16      	ldr	r3, [pc, #88]	; (800fb48 <rand+0x5c>)
 800faee:	b510      	push	{r4, lr}
 800faf0:	681c      	ldr	r4, [r3, #0]
 800faf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800faf4:	b9b3      	cbnz	r3, 800fb24 <rand+0x38>
 800faf6:	2018      	movs	r0, #24
 800faf8:	f000 fba2 	bl	8010240 <malloc>
 800fafc:	63a0      	str	r0, [r4, #56]	; 0x38
 800fafe:	b928      	cbnz	r0, 800fb0c <rand+0x20>
 800fb00:	4602      	mov	r2, r0
 800fb02:	4b12      	ldr	r3, [pc, #72]	; (800fb4c <rand+0x60>)
 800fb04:	4812      	ldr	r0, [pc, #72]	; (800fb50 <rand+0x64>)
 800fb06:	214e      	movs	r1, #78	; 0x4e
 800fb08:	f000 f94a 	bl	800fda0 <__assert_func>
 800fb0c:	4a11      	ldr	r2, [pc, #68]	; (800fb54 <rand+0x68>)
 800fb0e:	4b12      	ldr	r3, [pc, #72]	; (800fb58 <rand+0x6c>)
 800fb10:	e9c0 2300 	strd	r2, r3, [r0]
 800fb14:	4b11      	ldr	r3, [pc, #68]	; (800fb5c <rand+0x70>)
 800fb16:	6083      	str	r3, [r0, #8]
 800fb18:	230b      	movs	r3, #11
 800fb1a:	8183      	strh	r3, [r0, #12]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fb24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fb26:	4a0e      	ldr	r2, [pc, #56]	; (800fb60 <rand+0x74>)
 800fb28:	6920      	ldr	r0, [r4, #16]
 800fb2a:	6963      	ldr	r3, [r4, #20]
 800fb2c:	490d      	ldr	r1, [pc, #52]	; (800fb64 <rand+0x78>)
 800fb2e:	4342      	muls	r2, r0
 800fb30:	fb01 2203 	mla	r2, r1, r3, r2
 800fb34:	fba0 0101 	umull	r0, r1, r0, r1
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	eb42 0001 	adc.w	r0, r2, r1
 800fb3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fb42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fb46:	bd10      	pop	{r4, pc}
 800fb48:	20000014 	.word	0x20000014
 800fb4c:	080147e8 	.word	0x080147e8
 800fb50:	080147ff 	.word	0x080147ff
 800fb54:	abcd330e 	.word	0xabcd330e
 800fb58:	e66d1234 	.word	0xe66d1234
 800fb5c:	0005deec 	.word	0x0005deec
 800fb60:	5851f42d 	.word	0x5851f42d
 800fb64:	4c957f2d 	.word	0x4c957f2d

0800fb68 <sniprintf>:
 800fb68:	b40c      	push	{r2, r3}
 800fb6a:	b530      	push	{r4, r5, lr}
 800fb6c:	4b17      	ldr	r3, [pc, #92]	; (800fbcc <sniprintf+0x64>)
 800fb6e:	1e0c      	subs	r4, r1, #0
 800fb70:	681d      	ldr	r5, [r3, #0]
 800fb72:	b09d      	sub	sp, #116	; 0x74
 800fb74:	da08      	bge.n	800fb88 <sniprintf+0x20>
 800fb76:	238b      	movs	r3, #139	; 0x8b
 800fb78:	602b      	str	r3, [r5, #0]
 800fb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7e:	b01d      	add	sp, #116	; 0x74
 800fb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb84:	b002      	add	sp, #8
 800fb86:	4770      	bx	lr
 800fb88:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb90:	bf14      	ite	ne
 800fb92:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb96:	4623      	moveq	r3, r4
 800fb98:	9304      	str	r3, [sp, #16]
 800fb9a:	9307      	str	r3, [sp, #28]
 800fb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fba0:	9002      	str	r0, [sp, #8]
 800fba2:	9006      	str	r0, [sp, #24]
 800fba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbaa:	ab21      	add	r3, sp, #132	; 0x84
 800fbac:	a902      	add	r1, sp, #8
 800fbae:	4628      	mov	r0, r5
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	f000 fc89 	bl	80104c8 <_svfiprintf_r>
 800fbb6:	1c43      	adds	r3, r0, #1
 800fbb8:	bfbc      	itt	lt
 800fbba:	238b      	movlt	r3, #139	; 0x8b
 800fbbc:	602b      	strlt	r3, [r5, #0]
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d0dd      	beq.n	800fb7e <sniprintf+0x16>
 800fbc2:	9b02      	ldr	r3, [sp, #8]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
 800fbc8:	e7d9      	b.n	800fb7e <sniprintf+0x16>
 800fbca:	bf00      	nop
 800fbcc:	20000014 	.word	0x20000014

0800fbd0 <siprintf>:
 800fbd0:	b40e      	push	{r1, r2, r3}
 800fbd2:	b500      	push	{lr}
 800fbd4:	b09c      	sub	sp, #112	; 0x70
 800fbd6:	ab1d      	add	r3, sp, #116	; 0x74
 800fbd8:	9002      	str	r0, [sp, #8]
 800fbda:	9006      	str	r0, [sp, #24]
 800fbdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbe0:	4809      	ldr	r0, [pc, #36]	; (800fc08 <siprintf+0x38>)
 800fbe2:	9107      	str	r1, [sp, #28]
 800fbe4:	9104      	str	r1, [sp, #16]
 800fbe6:	4909      	ldr	r1, [pc, #36]	; (800fc0c <siprintf+0x3c>)
 800fbe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbec:	9105      	str	r1, [sp, #20]
 800fbee:	6800      	ldr	r0, [r0, #0]
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	a902      	add	r1, sp, #8
 800fbf4:	f000 fc68 	bl	80104c8 <_svfiprintf_r>
 800fbf8:	9b02      	ldr	r3, [sp, #8]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
 800fbfe:	b01c      	add	sp, #112	; 0x70
 800fc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc04:	b003      	add	sp, #12
 800fc06:	4770      	bx	lr
 800fc08:	20000014 	.word	0x20000014
 800fc0c:	ffff0208 	.word	0xffff0208

0800fc10 <strcpy>:
 800fc10:	4603      	mov	r3, r0
 800fc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc16:	f803 2b01 	strb.w	r2, [r3], #1
 800fc1a:	2a00      	cmp	r2, #0
 800fc1c:	d1f9      	bne.n	800fc12 <strcpy+0x2>
 800fc1e:	4770      	bx	lr

0800fc20 <__swbuf_r>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	460e      	mov	r6, r1
 800fc24:	4614      	mov	r4, r2
 800fc26:	4605      	mov	r5, r0
 800fc28:	b118      	cbz	r0, 800fc32 <__swbuf_r+0x12>
 800fc2a:	6983      	ldr	r3, [r0, #24]
 800fc2c:	b90b      	cbnz	r3, 800fc32 <__swbuf_r+0x12>
 800fc2e:	f000 f9ef 	bl	8010010 <__sinit>
 800fc32:	4b21      	ldr	r3, [pc, #132]	; (800fcb8 <__swbuf_r+0x98>)
 800fc34:	429c      	cmp	r4, r3
 800fc36:	d12b      	bne.n	800fc90 <__swbuf_r+0x70>
 800fc38:	686c      	ldr	r4, [r5, #4]
 800fc3a:	69a3      	ldr	r3, [r4, #24]
 800fc3c:	60a3      	str	r3, [r4, #8]
 800fc3e:	89a3      	ldrh	r3, [r4, #12]
 800fc40:	071a      	lsls	r2, r3, #28
 800fc42:	d52f      	bpl.n	800fca4 <__swbuf_r+0x84>
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	b36b      	cbz	r3, 800fca4 <__swbuf_r+0x84>
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	6820      	ldr	r0, [r4, #0]
 800fc4c:	1ac0      	subs	r0, r0, r3
 800fc4e:	6963      	ldr	r3, [r4, #20]
 800fc50:	b2f6      	uxtb	r6, r6
 800fc52:	4283      	cmp	r3, r0
 800fc54:	4637      	mov	r7, r6
 800fc56:	dc04      	bgt.n	800fc62 <__swbuf_r+0x42>
 800fc58:	4621      	mov	r1, r4
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f944 	bl	800fee8 <_fflush_r>
 800fc60:	bb30      	cbnz	r0, 800fcb0 <__swbuf_r+0x90>
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	3b01      	subs	r3, #1
 800fc66:	60a3      	str	r3, [r4, #8]
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	6022      	str	r2, [r4, #0]
 800fc6e:	701e      	strb	r6, [r3, #0]
 800fc70:	6963      	ldr	r3, [r4, #20]
 800fc72:	3001      	adds	r0, #1
 800fc74:	4283      	cmp	r3, r0
 800fc76:	d004      	beq.n	800fc82 <__swbuf_r+0x62>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	07db      	lsls	r3, r3, #31
 800fc7c:	d506      	bpl.n	800fc8c <__swbuf_r+0x6c>
 800fc7e:	2e0a      	cmp	r6, #10
 800fc80:	d104      	bne.n	800fc8c <__swbuf_r+0x6c>
 800fc82:	4621      	mov	r1, r4
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 f92f 	bl	800fee8 <_fflush_r>
 800fc8a:	b988      	cbnz	r0, 800fcb0 <__swbuf_r+0x90>
 800fc8c:	4638      	mov	r0, r7
 800fc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc90:	4b0a      	ldr	r3, [pc, #40]	; (800fcbc <__swbuf_r+0x9c>)
 800fc92:	429c      	cmp	r4, r3
 800fc94:	d101      	bne.n	800fc9a <__swbuf_r+0x7a>
 800fc96:	68ac      	ldr	r4, [r5, #8]
 800fc98:	e7cf      	b.n	800fc3a <__swbuf_r+0x1a>
 800fc9a:	4b09      	ldr	r3, [pc, #36]	; (800fcc0 <__swbuf_r+0xa0>)
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	bf08      	it	eq
 800fca0:	68ec      	ldreq	r4, [r5, #12]
 800fca2:	e7ca      	b.n	800fc3a <__swbuf_r+0x1a>
 800fca4:	4621      	mov	r1, r4
 800fca6:	4628      	mov	r0, r5
 800fca8:	f000 f80c 	bl	800fcc4 <__swsetup_r>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d0cb      	beq.n	800fc48 <__swbuf_r+0x28>
 800fcb0:	f04f 37ff 	mov.w	r7, #4294967295
 800fcb4:	e7ea      	b.n	800fc8c <__swbuf_r+0x6c>
 800fcb6:	bf00      	nop
 800fcb8:	080148b8 	.word	0x080148b8
 800fcbc:	080148d8 	.word	0x080148d8
 800fcc0:	08014898 	.word	0x08014898

0800fcc4 <__swsetup_r>:
 800fcc4:	4b32      	ldr	r3, [pc, #200]	; (800fd90 <__swsetup_r+0xcc>)
 800fcc6:	b570      	push	{r4, r5, r6, lr}
 800fcc8:	681d      	ldr	r5, [r3, #0]
 800fcca:	4606      	mov	r6, r0
 800fccc:	460c      	mov	r4, r1
 800fcce:	b125      	cbz	r5, 800fcda <__swsetup_r+0x16>
 800fcd0:	69ab      	ldr	r3, [r5, #24]
 800fcd2:	b913      	cbnz	r3, 800fcda <__swsetup_r+0x16>
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	f000 f99b 	bl	8010010 <__sinit>
 800fcda:	4b2e      	ldr	r3, [pc, #184]	; (800fd94 <__swsetup_r+0xd0>)
 800fcdc:	429c      	cmp	r4, r3
 800fcde:	d10f      	bne.n	800fd00 <__swsetup_r+0x3c>
 800fce0:	686c      	ldr	r4, [r5, #4]
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fce8:	0719      	lsls	r1, r3, #28
 800fcea:	d42c      	bmi.n	800fd46 <__swsetup_r+0x82>
 800fcec:	06dd      	lsls	r5, r3, #27
 800fcee:	d411      	bmi.n	800fd14 <__swsetup_r+0x50>
 800fcf0:	2309      	movs	r3, #9
 800fcf2:	6033      	str	r3, [r6, #0]
 800fcf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfe:	e03e      	b.n	800fd7e <__swsetup_r+0xba>
 800fd00:	4b25      	ldr	r3, [pc, #148]	; (800fd98 <__swsetup_r+0xd4>)
 800fd02:	429c      	cmp	r4, r3
 800fd04:	d101      	bne.n	800fd0a <__swsetup_r+0x46>
 800fd06:	68ac      	ldr	r4, [r5, #8]
 800fd08:	e7eb      	b.n	800fce2 <__swsetup_r+0x1e>
 800fd0a:	4b24      	ldr	r3, [pc, #144]	; (800fd9c <__swsetup_r+0xd8>)
 800fd0c:	429c      	cmp	r4, r3
 800fd0e:	bf08      	it	eq
 800fd10:	68ec      	ldreq	r4, [r5, #12]
 800fd12:	e7e6      	b.n	800fce2 <__swsetup_r+0x1e>
 800fd14:	0758      	lsls	r0, r3, #29
 800fd16:	d512      	bpl.n	800fd3e <__swsetup_r+0x7a>
 800fd18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd1a:	b141      	cbz	r1, 800fd2e <__swsetup_r+0x6a>
 800fd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd20:	4299      	cmp	r1, r3
 800fd22:	d002      	beq.n	800fd2a <__swsetup_r+0x66>
 800fd24:	4630      	mov	r0, r6
 800fd26:	f000 fa93 	bl	8010250 <_free_r>
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6363      	str	r3, [r4, #52]	; 0x34
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	2300      	movs	r3, #0
 800fd38:	6063      	str	r3, [r4, #4]
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	89a3      	ldrh	r3, [r4, #12]
 800fd40:	f043 0308 	orr.w	r3, r3, #8
 800fd44:	81a3      	strh	r3, [r4, #12]
 800fd46:	6923      	ldr	r3, [r4, #16]
 800fd48:	b94b      	cbnz	r3, 800fd5e <__swsetup_r+0x9a>
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd54:	d003      	beq.n	800fd5e <__swsetup_r+0x9a>
 800fd56:	4621      	mov	r1, r4
 800fd58:	4630      	mov	r0, r6
 800fd5a:	f000 fa31 	bl	80101c0 <__smakebuf_r>
 800fd5e:	89a0      	ldrh	r0, [r4, #12]
 800fd60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd64:	f010 0301 	ands.w	r3, r0, #1
 800fd68:	d00a      	beq.n	800fd80 <__swsetup_r+0xbc>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	60a3      	str	r3, [r4, #8]
 800fd6e:	6963      	ldr	r3, [r4, #20]
 800fd70:	425b      	negs	r3, r3
 800fd72:	61a3      	str	r3, [r4, #24]
 800fd74:	6923      	ldr	r3, [r4, #16]
 800fd76:	b943      	cbnz	r3, 800fd8a <__swsetup_r+0xc6>
 800fd78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd7c:	d1ba      	bne.n	800fcf4 <__swsetup_r+0x30>
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	0781      	lsls	r1, r0, #30
 800fd82:	bf58      	it	pl
 800fd84:	6963      	ldrpl	r3, [r4, #20]
 800fd86:	60a3      	str	r3, [r4, #8]
 800fd88:	e7f4      	b.n	800fd74 <__swsetup_r+0xb0>
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	e7f7      	b.n	800fd7e <__swsetup_r+0xba>
 800fd8e:	bf00      	nop
 800fd90:	20000014 	.word	0x20000014
 800fd94:	080148b8 	.word	0x080148b8
 800fd98:	080148d8 	.word	0x080148d8
 800fd9c:	08014898 	.word	0x08014898

0800fda0 <__assert_func>:
 800fda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fda2:	4614      	mov	r4, r2
 800fda4:	461a      	mov	r2, r3
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <__assert_func+0x2c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4605      	mov	r5, r0
 800fdac:	68d8      	ldr	r0, [r3, #12]
 800fdae:	b14c      	cbz	r4, 800fdc4 <__assert_func+0x24>
 800fdb0:	4b07      	ldr	r3, [pc, #28]	; (800fdd0 <__assert_func+0x30>)
 800fdb2:	9100      	str	r1, [sp, #0]
 800fdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb8:	4906      	ldr	r1, [pc, #24]	; (800fdd4 <__assert_func+0x34>)
 800fdba:	462b      	mov	r3, r5
 800fdbc:	f000 f9a6 	bl	801010c <fiprintf>
 800fdc0:	f001 f81e 	bl	8010e00 <abort>
 800fdc4:	4b04      	ldr	r3, [pc, #16]	; (800fdd8 <__assert_func+0x38>)
 800fdc6:	461c      	mov	r4, r3
 800fdc8:	e7f3      	b.n	800fdb2 <__assert_func+0x12>
 800fdca:	bf00      	nop
 800fdcc:	20000014 	.word	0x20000014
 800fdd0:	0801485a 	.word	0x0801485a
 800fdd4:	08014867 	.word	0x08014867
 800fdd8:	08014895 	.word	0x08014895

0800fddc <__sflush_r>:
 800fddc:	898a      	ldrh	r2, [r1, #12]
 800fdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde2:	4605      	mov	r5, r0
 800fde4:	0710      	lsls	r0, r2, #28
 800fde6:	460c      	mov	r4, r1
 800fde8:	d458      	bmi.n	800fe9c <__sflush_r+0xc0>
 800fdea:	684b      	ldr	r3, [r1, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	dc05      	bgt.n	800fdfc <__sflush_r+0x20>
 800fdf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	dc02      	bgt.n	800fdfc <__sflush_r+0x20>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	d0f9      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fe02:	2300      	movs	r3, #0
 800fe04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe08:	682f      	ldr	r7, [r5, #0]
 800fe0a:	602b      	str	r3, [r5, #0]
 800fe0c:	d032      	beq.n	800fe74 <__sflush_r+0x98>
 800fe0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	075a      	lsls	r2, r3, #29
 800fe14:	d505      	bpl.n	800fe22 <__sflush_r+0x46>
 800fe16:	6863      	ldr	r3, [r4, #4]
 800fe18:	1ac0      	subs	r0, r0, r3
 800fe1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe1c:	b10b      	cbz	r3, 800fe22 <__sflush_r+0x46>
 800fe1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe20:	1ac0      	subs	r0, r0, r3
 800fe22:	2300      	movs	r3, #0
 800fe24:	4602      	mov	r2, r0
 800fe26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe28:	6a21      	ldr	r1, [r4, #32]
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b0      	blx	r6
 800fe2e:	1c43      	adds	r3, r0, #1
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	d106      	bne.n	800fe42 <__sflush_r+0x66>
 800fe34:	6829      	ldr	r1, [r5, #0]
 800fe36:	291d      	cmp	r1, #29
 800fe38:	d82c      	bhi.n	800fe94 <__sflush_r+0xb8>
 800fe3a:	4a2a      	ldr	r2, [pc, #168]	; (800fee4 <__sflush_r+0x108>)
 800fe3c:	40ca      	lsrs	r2, r1
 800fe3e:	07d6      	lsls	r6, r2, #31
 800fe40:	d528      	bpl.n	800fe94 <__sflush_r+0xb8>
 800fe42:	2200      	movs	r2, #0
 800fe44:	6062      	str	r2, [r4, #4]
 800fe46:	04d9      	lsls	r1, r3, #19
 800fe48:	6922      	ldr	r2, [r4, #16]
 800fe4a:	6022      	str	r2, [r4, #0]
 800fe4c:	d504      	bpl.n	800fe58 <__sflush_r+0x7c>
 800fe4e:	1c42      	adds	r2, r0, #1
 800fe50:	d101      	bne.n	800fe56 <__sflush_r+0x7a>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	b903      	cbnz	r3, 800fe58 <__sflush_r+0x7c>
 800fe56:	6560      	str	r0, [r4, #84]	; 0x54
 800fe58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe5a:	602f      	str	r7, [r5, #0]
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	d0ca      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fe60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe64:	4299      	cmp	r1, r3
 800fe66:	d002      	beq.n	800fe6e <__sflush_r+0x92>
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f000 f9f1 	bl	8010250 <_free_r>
 800fe6e:	2000      	movs	r0, #0
 800fe70:	6360      	str	r0, [r4, #52]	; 0x34
 800fe72:	e7c1      	b.n	800fdf8 <__sflush_r+0x1c>
 800fe74:	6a21      	ldr	r1, [r4, #32]
 800fe76:	2301      	movs	r3, #1
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b0      	blx	r6
 800fe7c:	1c41      	adds	r1, r0, #1
 800fe7e:	d1c7      	bne.n	800fe10 <__sflush_r+0x34>
 800fe80:	682b      	ldr	r3, [r5, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0c4      	beq.n	800fe10 <__sflush_r+0x34>
 800fe86:	2b1d      	cmp	r3, #29
 800fe88:	d001      	beq.n	800fe8e <__sflush_r+0xb2>
 800fe8a:	2b16      	cmp	r3, #22
 800fe8c:	d101      	bne.n	800fe92 <__sflush_r+0xb6>
 800fe8e:	602f      	str	r7, [r5, #0]
 800fe90:	e7b1      	b.n	800fdf6 <__sflush_r+0x1a>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	e7ad      	b.n	800fdf8 <__sflush_r+0x1c>
 800fe9c:	690f      	ldr	r7, [r1, #16]
 800fe9e:	2f00      	cmp	r7, #0
 800fea0:	d0a9      	beq.n	800fdf6 <__sflush_r+0x1a>
 800fea2:	0793      	lsls	r3, r2, #30
 800fea4:	680e      	ldr	r6, [r1, #0]
 800fea6:	bf08      	it	eq
 800fea8:	694b      	ldreq	r3, [r1, #20]
 800feaa:	600f      	str	r7, [r1, #0]
 800feac:	bf18      	it	ne
 800feae:	2300      	movne	r3, #0
 800feb0:	eba6 0807 	sub.w	r8, r6, r7
 800feb4:	608b      	str	r3, [r1, #8]
 800feb6:	f1b8 0f00 	cmp.w	r8, #0
 800feba:	dd9c      	ble.n	800fdf6 <__sflush_r+0x1a>
 800febc:	6a21      	ldr	r1, [r4, #32]
 800febe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fec0:	4643      	mov	r3, r8
 800fec2:	463a      	mov	r2, r7
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b0      	blx	r6
 800fec8:	2800      	cmp	r0, #0
 800feca:	dc06      	bgt.n	800feda <__sflush_r+0xfe>
 800fecc:	89a3      	ldrh	r3, [r4, #12]
 800fece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295
 800fed8:	e78e      	b.n	800fdf8 <__sflush_r+0x1c>
 800feda:	4407      	add	r7, r0
 800fedc:	eba8 0800 	sub.w	r8, r8, r0
 800fee0:	e7e9      	b.n	800feb6 <__sflush_r+0xda>
 800fee2:	bf00      	nop
 800fee4:	20400001 	.word	0x20400001

0800fee8 <_fflush_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	690b      	ldr	r3, [r1, #16]
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	b913      	cbnz	r3, 800fef8 <_fflush_r+0x10>
 800fef2:	2500      	movs	r5, #0
 800fef4:	4628      	mov	r0, r5
 800fef6:	bd38      	pop	{r3, r4, r5, pc}
 800fef8:	b118      	cbz	r0, 800ff02 <_fflush_r+0x1a>
 800fefa:	6983      	ldr	r3, [r0, #24]
 800fefc:	b90b      	cbnz	r3, 800ff02 <_fflush_r+0x1a>
 800fefe:	f000 f887 	bl	8010010 <__sinit>
 800ff02:	4b14      	ldr	r3, [pc, #80]	; (800ff54 <_fflush_r+0x6c>)
 800ff04:	429c      	cmp	r4, r3
 800ff06:	d11b      	bne.n	800ff40 <_fflush_r+0x58>
 800ff08:	686c      	ldr	r4, [r5, #4]
 800ff0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d0ef      	beq.n	800fef2 <_fflush_r+0xa>
 800ff12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff14:	07d0      	lsls	r0, r2, #31
 800ff16:	d404      	bmi.n	800ff22 <_fflush_r+0x3a>
 800ff18:	0599      	lsls	r1, r3, #22
 800ff1a:	d402      	bmi.n	800ff22 <_fflush_r+0x3a>
 800ff1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff1e:	f000 f927 	bl	8010170 <__retarget_lock_acquire_recursive>
 800ff22:	4628      	mov	r0, r5
 800ff24:	4621      	mov	r1, r4
 800ff26:	f7ff ff59 	bl	800fddc <__sflush_r>
 800ff2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff2c:	07da      	lsls	r2, r3, #31
 800ff2e:	4605      	mov	r5, r0
 800ff30:	d4e0      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	059b      	lsls	r3, r3, #22
 800ff36:	d4dd      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff3a:	f000 f91a 	bl	8010172 <__retarget_lock_release_recursive>
 800ff3e:	e7d9      	b.n	800fef4 <_fflush_r+0xc>
 800ff40:	4b05      	ldr	r3, [pc, #20]	; (800ff58 <_fflush_r+0x70>)
 800ff42:	429c      	cmp	r4, r3
 800ff44:	d101      	bne.n	800ff4a <_fflush_r+0x62>
 800ff46:	68ac      	ldr	r4, [r5, #8]
 800ff48:	e7df      	b.n	800ff0a <_fflush_r+0x22>
 800ff4a:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <_fflush_r+0x74>)
 800ff4c:	429c      	cmp	r4, r3
 800ff4e:	bf08      	it	eq
 800ff50:	68ec      	ldreq	r4, [r5, #12]
 800ff52:	e7da      	b.n	800ff0a <_fflush_r+0x22>
 800ff54:	080148b8 	.word	0x080148b8
 800ff58:	080148d8 	.word	0x080148d8
 800ff5c:	08014898 	.word	0x08014898

0800ff60 <std>:
 800ff60:	2300      	movs	r3, #0
 800ff62:	b510      	push	{r4, lr}
 800ff64:	4604      	mov	r4, r0
 800ff66:	e9c0 3300 	strd	r3, r3, [r0]
 800ff6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff6e:	6083      	str	r3, [r0, #8]
 800ff70:	8181      	strh	r1, [r0, #12]
 800ff72:	6643      	str	r3, [r0, #100]	; 0x64
 800ff74:	81c2      	strh	r2, [r0, #14]
 800ff76:	6183      	str	r3, [r0, #24]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	2208      	movs	r2, #8
 800ff7c:	305c      	adds	r0, #92	; 0x5c
 800ff7e:	f7ff fd09 	bl	800f994 <memset>
 800ff82:	4b05      	ldr	r3, [pc, #20]	; (800ff98 <std+0x38>)
 800ff84:	6263      	str	r3, [r4, #36]	; 0x24
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <std+0x3c>)
 800ff88:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff8a:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <std+0x40>)
 800ff8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff8e:	4b05      	ldr	r3, [pc, #20]	; (800ffa4 <std+0x44>)
 800ff90:	6224      	str	r4, [r4, #32]
 800ff92:	6323      	str	r3, [r4, #48]	; 0x30
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	bf00      	nop
 800ff98:	08010d55 	.word	0x08010d55
 800ff9c:	08010d77 	.word	0x08010d77
 800ffa0:	08010daf 	.word	0x08010daf
 800ffa4:	08010dd3 	.word	0x08010dd3

0800ffa8 <_cleanup_r>:
 800ffa8:	4901      	ldr	r1, [pc, #4]	; (800ffb0 <_cleanup_r+0x8>)
 800ffaa:	f000 b8c1 	b.w	8010130 <_fwalk_reent>
 800ffae:	bf00      	nop
 800ffb0:	0800fee9 	.word	0x0800fee9

0800ffb4 <__sfmoreglue>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	2268      	movs	r2, #104	; 0x68
 800ffb8:	1e4d      	subs	r5, r1, #1
 800ffba:	4355      	muls	r5, r2
 800ffbc:	460e      	mov	r6, r1
 800ffbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffc2:	f000 f9b1 	bl	8010328 <_malloc_r>
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	b140      	cbz	r0, 800ffdc <__sfmoreglue+0x28>
 800ffca:	2100      	movs	r1, #0
 800ffcc:	e9c0 1600 	strd	r1, r6, [r0]
 800ffd0:	300c      	adds	r0, #12
 800ffd2:	60a0      	str	r0, [r4, #8]
 800ffd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffd8:	f7ff fcdc 	bl	800f994 <memset>
 800ffdc:	4620      	mov	r0, r4
 800ffde:	bd70      	pop	{r4, r5, r6, pc}

0800ffe0 <__sfp_lock_acquire>:
 800ffe0:	4801      	ldr	r0, [pc, #4]	; (800ffe8 <__sfp_lock_acquire+0x8>)
 800ffe2:	f000 b8c5 	b.w	8010170 <__retarget_lock_acquire_recursive>
 800ffe6:	bf00      	nop
 800ffe8:	20008b1d 	.word	0x20008b1d

0800ffec <__sfp_lock_release>:
 800ffec:	4801      	ldr	r0, [pc, #4]	; (800fff4 <__sfp_lock_release+0x8>)
 800ffee:	f000 b8c0 	b.w	8010172 <__retarget_lock_release_recursive>
 800fff2:	bf00      	nop
 800fff4:	20008b1d 	.word	0x20008b1d

0800fff8 <__sinit_lock_acquire>:
 800fff8:	4801      	ldr	r0, [pc, #4]	; (8010000 <__sinit_lock_acquire+0x8>)
 800fffa:	f000 b8b9 	b.w	8010170 <__retarget_lock_acquire_recursive>
 800fffe:	bf00      	nop
 8010000:	20008b1e 	.word	0x20008b1e

08010004 <__sinit_lock_release>:
 8010004:	4801      	ldr	r0, [pc, #4]	; (801000c <__sinit_lock_release+0x8>)
 8010006:	f000 b8b4 	b.w	8010172 <__retarget_lock_release_recursive>
 801000a:	bf00      	nop
 801000c:	20008b1e 	.word	0x20008b1e

08010010 <__sinit>:
 8010010:	b510      	push	{r4, lr}
 8010012:	4604      	mov	r4, r0
 8010014:	f7ff fff0 	bl	800fff8 <__sinit_lock_acquire>
 8010018:	69a3      	ldr	r3, [r4, #24]
 801001a:	b11b      	cbz	r3, 8010024 <__sinit+0x14>
 801001c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010020:	f7ff bff0 	b.w	8010004 <__sinit_lock_release>
 8010024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010028:	6523      	str	r3, [r4, #80]	; 0x50
 801002a:	4b13      	ldr	r3, [pc, #76]	; (8010078 <__sinit+0x68>)
 801002c:	4a13      	ldr	r2, [pc, #76]	; (801007c <__sinit+0x6c>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	62a2      	str	r2, [r4, #40]	; 0x28
 8010032:	42a3      	cmp	r3, r4
 8010034:	bf04      	itt	eq
 8010036:	2301      	moveq	r3, #1
 8010038:	61a3      	streq	r3, [r4, #24]
 801003a:	4620      	mov	r0, r4
 801003c:	f000 f820 	bl	8010080 <__sfp>
 8010040:	6060      	str	r0, [r4, #4]
 8010042:	4620      	mov	r0, r4
 8010044:	f000 f81c 	bl	8010080 <__sfp>
 8010048:	60a0      	str	r0, [r4, #8]
 801004a:	4620      	mov	r0, r4
 801004c:	f000 f818 	bl	8010080 <__sfp>
 8010050:	2200      	movs	r2, #0
 8010052:	60e0      	str	r0, [r4, #12]
 8010054:	2104      	movs	r1, #4
 8010056:	6860      	ldr	r0, [r4, #4]
 8010058:	f7ff ff82 	bl	800ff60 <std>
 801005c:	68a0      	ldr	r0, [r4, #8]
 801005e:	2201      	movs	r2, #1
 8010060:	2109      	movs	r1, #9
 8010062:	f7ff ff7d 	bl	800ff60 <std>
 8010066:	68e0      	ldr	r0, [r4, #12]
 8010068:	2202      	movs	r2, #2
 801006a:	2112      	movs	r1, #18
 801006c:	f7ff ff78 	bl	800ff60 <std>
 8010070:	2301      	movs	r3, #1
 8010072:	61a3      	str	r3, [r4, #24]
 8010074:	e7d2      	b.n	801001c <__sinit+0xc>
 8010076:	bf00      	nop
 8010078:	080147e4 	.word	0x080147e4
 801007c:	0800ffa9 	.word	0x0800ffa9

08010080 <__sfp>:
 8010080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010082:	4607      	mov	r7, r0
 8010084:	f7ff ffac 	bl	800ffe0 <__sfp_lock_acquire>
 8010088:	4b1e      	ldr	r3, [pc, #120]	; (8010104 <__sfp+0x84>)
 801008a:	681e      	ldr	r6, [r3, #0]
 801008c:	69b3      	ldr	r3, [r6, #24]
 801008e:	b913      	cbnz	r3, 8010096 <__sfp+0x16>
 8010090:	4630      	mov	r0, r6
 8010092:	f7ff ffbd 	bl	8010010 <__sinit>
 8010096:	3648      	adds	r6, #72	; 0x48
 8010098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801009c:	3b01      	subs	r3, #1
 801009e:	d503      	bpl.n	80100a8 <__sfp+0x28>
 80100a0:	6833      	ldr	r3, [r6, #0]
 80100a2:	b30b      	cbz	r3, 80100e8 <__sfp+0x68>
 80100a4:	6836      	ldr	r6, [r6, #0]
 80100a6:	e7f7      	b.n	8010098 <__sfp+0x18>
 80100a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100ac:	b9d5      	cbnz	r5, 80100e4 <__sfp+0x64>
 80100ae:	4b16      	ldr	r3, [pc, #88]	; (8010108 <__sfp+0x88>)
 80100b0:	60e3      	str	r3, [r4, #12]
 80100b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100b6:	6665      	str	r5, [r4, #100]	; 0x64
 80100b8:	f000 f859 	bl	801016e <__retarget_lock_init_recursive>
 80100bc:	f7ff ff96 	bl	800ffec <__sfp_lock_release>
 80100c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100c8:	6025      	str	r5, [r4, #0]
 80100ca:	61a5      	str	r5, [r4, #24]
 80100cc:	2208      	movs	r2, #8
 80100ce:	4629      	mov	r1, r5
 80100d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100d4:	f7ff fc5e 	bl	800f994 <memset>
 80100d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100e0:	4620      	mov	r0, r4
 80100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e4:	3468      	adds	r4, #104	; 0x68
 80100e6:	e7d9      	b.n	801009c <__sfp+0x1c>
 80100e8:	2104      	movs	r1, #4
 80100ea:	4638      	mov	r0, r7
 80100ec:	f7ff ff62 	bl	800ffb4 <__sfmoreglue>
 80100f0:	4604      	mov	r4, r0
 80100f2:	6030      	str	r0, [r6, #0]
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d1d5      	bne.n	80100a4 <__sfp+0x24>
 80100f8:	f7ff ff78 	bl	800ffec <__sfp_lock_release>
 80100fc:	230c      	movs	r3, #12
 80100fe:	603b      	str	r3, [r7, #0]
 8010100:	e7ee      	b.n	80100e0 <__sfp+0x60>
 8010102:	bf00      	nop
 8010104:	080147e4 	.word	0x080147e4
 8010108:	ffff0001 	.word	0xffff0001

0801010c <fiprintf>:
 801010c:	b40e      	push	{r1, r2, r3}
 801010e:	b503      	push	{r0, r1, lr}
 8010110:	4601      	mov	r1, r0
 8010112:	ab03      	add	r3, sp, #12
 8010114:	4805      	ldr	r0, [pc, #20]	; (801012c <fiprintf+0x20>)
 8010116:	f853 2b04 	ldr.w	r2, [r3], #4
 801011a:	6800      	ldr	r0, [r0, #0]
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	f000 fafd 	bl	801071c <_vfiprintf_r>
 8010122:	b002      	add	sp, #8
 8010124:	f85d eb04 	ldr.w	lr, [sp], #4
 8010128:	b003      	add	sp, #12
 801012a:	4770      	bx	lr
 801012c:	20000014 	.word	0x20000014

08010130 <_fwalk_reent>:
 8010130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010134:	4606      	mov	r6, r0
 8010136:	4688      	mov	r8, r1
 8010138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801013c:	2700      	movs	r7, #0
 801013e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010142:	f1b9 0901 	subs.w	r9, r9, #1
 8010146:	d505      	bpl.n	8010154 <_fwalk_reent+0x24>
 8010148:	6824      	ldr	r4, [r4, #0]
 801014a:	2c00      	cmp	r4, #0
 801014c:	d1f7      	bne.n	801013e <_fwalk_reent+0xe>
 801014e:	4638      	mov	r0, r7
 8010150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010154:	89ab      	ldrh	r3, [r5, #12]
 8010156:	2b01      	cmp	r3, #1
 8010158:	d907      	bls.n	801016a <_fwalk_reent+0x3a>
 801015a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801015e:	3301      	adds	r3, #1
 8010160:	d003      	beq.n	801016a <_fwalk_reent+0x3a>
 8010162:	4629      	mov	r1, r5
 8010164:	4630      	mov	r0, r6
 8010166:	47c0      	blx	r8
 8010168:	4307      	orrs	r7, r0
 801016a:	3568      	adds	r5, #104	; 0x68
 801016c:	e7e9      	b.n	8010142 <_fwalk_reent+0x12>

0801016e <__retarget_lock_init_recursive>:
 801016e:	4770      	bx	lr

08010170 <__retarget_lock_acquire_recursive>:
 8010170:	4770      	bx	lr

08010172 <__retarget_lock_release_recursive>:
 8010172:	4770      	bx	lr

08010174 <__swhatbuf_r>:
 8010174:	b570      	push	{r4, r5, r6, lr}
 8010176:	460e      	mov	r6, r1
 8010178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017c:	2900      	cmp	r1, #0
 801017e:	b096      	sub	sp, #88	; 0x58
 8010180:	4614      	mov	r4, r2
 8010182:	461d      	mov	r5, r3
 8010184:	da08      	bge.n	8010198 <__swhatbuf_r+0x24>
 8010186:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801018a:	2200      	movs	r2, #0
 801018c:	602a      	str	r2, [r5, #0]
 801018e:	061a      	lsls	r2, r3, #24
 8010190:	d410      	bmi.n	80101b4 <__swhatbuf_r+0x40>
 8010192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010196:	e00e      	b.n	80101b6 <__swhatbuf_r+0x42>
 8010198:	466a      	mov	r2, sp
 801019a:	f000 fe49 	bl	8010e30 <_fstat_r>
 801019e:	2800      	cmp	r0, #0
 80101a0:	dbf1      	blt.n	8010186 <__swhatbuf_r+0x12>
 80101a2:	9a01      	ldr	r2, [sp, #4]
 80101a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101ac:	425a      	negs	r2, r3
 80101ae:	415a      	adcs	r2, r3
 80101b0:	602a      	str	r2, [r5, #0]
 80101b2:	e7ee      	b.n	8010192 <__swhatbuf_r+0x1e>
 80101b4:	2340      	movs	r3, #64	; 0x40
 80101b6:	2000      	movs	r0, #0
 80101b8:	6023      	str	r3, [r4, #0]
 80101ba:	b016      	add	sp, #88	; 0x58
 80101bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080101c0 <__smakebuf_r>:
 80101c0:	898b      	ldrh	r3, [r1, #12]
 80101c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101c4:	079d      	lsls	r5, r3, #30
 80101c6:	4606      	mov	r6, r0
 80101c8:	460c      	mov	r4, r1
 80101ca:	d507      	bpl.n	80101dc <__smakebuf_r+0x1c>
 80101cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	6123      	str	r3, [r4, #16]
 80101d4:	2301      	movs	r3, #1
 80101d6:	6163      	str	r3, [r4, #20]
 80101d8:	b002      	add	sp, #8
 80101da:	bd70      	pop	{r4, r5, r6, pc}
 80101dc:	ab01      	add	r3, sp, #4
 80101de:	466a      	mov	r2, sp
 80101e0:	f7ff ffc8 	bl	8010174 <__swhatbuf_r>
 80101e4:	9900      	ldr	r1, [sp, #0]
 80101e6:	4605      	mov	r5, r0
 80101e8:	4630      	mov	r0, r6
 80101ea:	f000 f89d 	bl	8010328 <_malloc_r>
 80101ee:	b948      	cbnz	r0, 8010204 <__smakebuf_r+0x44>
 80101f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101f4:	059a      	lsls	r2, r3, #22
 80101f6:	d4ef      	bmi.n	80101d8 <__smakebuf_r+0x18>
 80101f8:	f023 0303 	bic.w	r3, r3, #3
 80101fc:	f043 0302 	orr.w	r3, r3, #2
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	e7e3      	b.n	80101cc <__smakebuf_r+0xc>
 8010204:	4b0d      	ldr	r3, [pc, #52]	; (801023c <__smakebuf_r+0x7c>)
 8010206:	62b3      	str	r3, [r6, #40]	; 0x28
 8010208:	89a3      	ldrh	r3, [r4, #12]
 801020a:	6020      	str	r0, [r4, #0]
 801020c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	9b00      	ldr	r3, [sp, #0]
 8010214:	6163      	str	r3, [r4, #20]
 8010216:	9b01      	ldr	r3, [sp, #4]
 8010218:	6120      	str	r0, [r4, #16]
 801021a:	b15b      	cbz	r3, 8010234 <__smakebuf_r+0x74>
 801021c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010220:	4630      	mov	r0, r6
 8010222:	f000 fe17 	bl	8010e54 <_isatty_r>
 8010226:	b128      	cbz	r0, 8010234 <__smakebuf_r+0x74>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	f023 0303 	bic.w	r3, r3, #3
 801022e:	f043 0301 	orr.w	r3, r3, #1
 8010232:	81a3      	strh	r3, [r4, #12]
 8010234:	89a0      	ldrh	r0, [r4, #12]
 8010236:	4305      	orrs	r5, r0
 8010238:	81a5      	strh	r5, [r4, #12]
 801023a:	e7cd      	b.n	80101d8 <__smakebuf_r+0x18>
 801023c:	0800ffa9 	.word	0x0800ffa9

08010240 <malloc>:
 8010240:	4b02      	ldr	r3, [pc, #8]	; (801024c <malloc+0xc>)
 8010242:	4601      	mov	r1, r0
 8010244:	6818      	ldr	r0, [r3, #0]
 8010246:	f000 b86f 	b.w	8010328 <_malloc_r>
 801024a:	bf00      	nop
 801024c:	20000014 	.word	0x20000014

08010250 <_free_r>:
 8010250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010252:	2900      	cmp	r1, #0
 8010254:	d044      	beq.n	80102e0 <_free_r+0x90>
 8010256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801025a:	9001      	str	r0, [sp, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	f1a1 0404 	sub.w	r4, r1, #4
 8010262:	bfb8      	it	lt
 8010264:	18e4      	addlt	r4, r4, r3
 8010266:	f000 fe17 	bl	8010e98 <__malloc_lock>
 801026a:	4a1e      	ldr	r2, [pc, #120]	; (80102e4 <_free_r+0x94>)
 801026c:	9801      	ldr	r0, [sp, #4]
 801026e:	6813      	ldr	r3, [r2, #0]
 8010270:	b933      	cbnz	r3, 8010280 <_free_r+0x30>
 8010272:	6063      	str	r3, [r4, #4]
 8010274:	6014      	str	r4, [r2, #0]
 8010276:	b003      	add	sp, #12
 8010278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801027c:	f000 be12 	b.w	8010ea4 <__malloc_unlock>
 8010280:	42a3      	cmp	r3, r4
 8010282:	d908      	bls.n	8010296 <_free_r+0x46>
 8010284:	6825      	ldr	r5, [r4, #0]
 8010286:	1961      	adds	r1, r4, r5
 8010288:	428b      	cmp	r3, r1
 801028a:	bf01      	itttt	eq
 801028c:	6819      	ldreq	r1, [r3, #0]
 801028e:	685b      	ldreq	r3, [r3, #4]
 8010290:	1949      	addeq	r1, r1, r5
 8010292:	6021      	streq	r1, [r4, #0]
 8010294:	e7ed      	b.n	8010272 <_free_r+0x22>
 8010296:	461a      	mov	r2, r3
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	b10b      	cbz	r3, 80102a0 <_free_r+0x50>
 801029c:	42a3      	cmp	r3, r4
 801029e:	d9fa      	bls.n	8010296 <_free_r+0x46>
 80102a0:	6811      	ldr	r1, [r2, #0]
 80102a2:	1855      	adds	r5, r2, r1
 80102a4:	42a5      	cmp	r5, r4
 80102a6:	d10b      	bne.n	80102c0 <_free_r+0x70>
 80102a8:	6824      	ldr	r4, [r4, #0]
 80102aa:	4421      	add	r1, r4
 80102ac:	1854      	adds	r4, r2, r1
 80102ae:	42a3      	cmp	r3, r4
 80102b0:	6011      	str	r1, [r2, #0]
 80102b2:	d1e0      	bne.n	8010276 <_free_r+0x26>
 80102b4:	681c      	ldr	r4, [r3, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	6053      	str	r3, [r2, #4]
 80102ba:	4421      	add	r1, r4
 80102bc:	6011      	str	r1, [r2, #0]
 80102be:	e7da      	b.n	8010276 <_free_r+0x26>
 80102c0:	d902      	bls.n	80102c8 <_free_r+0x78>
 80102c2:	230c      	movs	r3, #12
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	e7d6      	b.n	8010276 <_free_r+0x26>
 80102c8:	6825      	ldr	r5, [r4, #0]
 80102ca:	1961      	adds	r1, r4, r5
 80102cc:	428b      	cmp	r3, r1
 80102ce:	bf04      	itt	eq
 80102d0:	6819      	ldreq	r1, [r3, #0]
 80102d2:	685b      	ldreq	r3, [r3, #4]
 80102d4:	6063      	str	r3, [r4, #4]
 80102d6:	bf04      	itt	eq
 80102d8:	1949      	addeq	r1, r1, r5
 80102da:	6021      	streq	r1, [r4, #0]
 80102dc:	6054      	str	r4, [r2, #4]
 80102de:	e7ca      	b.n	8010276 <_free_r+0x26>
 80102e0:	b003      	add	sp, #12
 80102e2:	bd30      	pop	{r4, r5, pc}
 80102e4:	20008b20 	.word	0x20008b20

080102e8 <sbrk_aligned>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	4e0e      	ldr	r6, [pc, #56]	; (8010324 <sbrk_aligned+0x3c>)
 80102ec:	460c      	mov	r4, r1
 80102ee:	6831      	ldr	r1, [r6, #0]
 80102f0:	4605      	mov	r5, r0
 80102f2:	b911      	cbnz	r1, 80102fa <sbrk_aligned+0x12>
 80102f4:	f000 fd1e 	bl	8010d34 <_sbrk_r>
 80102f8:	6030      	str	r0, [r6, #0]
 80102fa:	4621      	mov	r1, r4
 80102fc:	4628      	mov	r0, r5
 80102fe:	f000 fd19 	bl	8010d34 <_sbrk_r>
 8010302:	1c43      	adds	r3, r0, #1
 8010304:	d00a      	beq.n	801031c <sbrk_aligned+0x34>
 8010306:	1cc4      	adds	r4, r0, #3
 8010308:	f024 0403 	bic.w	r4, r4, #3
 801030c:	42a0      	cmp	r0, r4
 801030e:	d007      	beq.n	8010320 <sbrk_aligned+0x38>
 8010310:	1a21      	subs	r1, r4, r0
 8010312:	4628      	mov	r0, r5
 8010314:	f000 fd0e 	bl	8010d34 <_sbrk_r>
 8010318:	3001      	adds	r0, #1
 801031a:	d101      	bne.n	8010320 <sbrk_aligned+0x38>
 801031c:	f04f 34ff 	mov.w	r4, #4294967295
 8010320:	4620      	mov	r0, r4
 8010322:	bd70      	pop	{r4, r5, r6, pc}
 8010324:	20008b24 	.word	0x20008b24

08010328 <_malloc_r>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	1ccd      	adds	r5, r1, #3
 801032e:	f025 0503 	bic.w	r5, r5, #3
 8010332:	3508      	adds	r5, #8
 8010334:	2d0c      	cmp	r5, #12
 8010336:	bf38      	it	cc
 8010338:	250c      	movcc	r5, #12
 801033a:	2d00      	cmp	r5, #0
 801033c:	4607      	mov	r7, r0
 801033e:	db01      	blt.n	8010344 <_malloc_r+0x1c>
 8010340:	42a9      	cmp	r1, r5
 8010342:	d905      	bls.n	8010350 <_malloc_r+0x28>
 8010344:	230c      	movs	r3, #12
 8010346:	603b      	str	r3, [r7, #0]
 8010348:	2600      	movs	r6, #0
 801034a:	4630      	mov	r0, r6
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	4e2e      	ldr	r6, [pc, #184]	; (801040c <_malloc_r+0xe4>)
 8010352:	f000 fda1 	bl	8010e98 <__malloc_lock>
 8010356:	6833      	ldr	r3, [r6, #0]
 8010358:	461c      	mov	r4, r3
 801035a:	bb34      	cbnz	r4, 80103aa <_malloc_r+0x82>
 801035c:	4629      	mov	r1, r5
 801035e:	4638      	mov	r0, r7
 8010360:	f7ff ffc2 	bl	80102e8 <sbrk_aligned>
 8010364:	1c43      	adds	r3, r0, #1
 8010366:	4604      	mov	r4, r0
 8010368:	d14d      	bne.n	8010406 <_malloc_r+0xde>
 801036a:	6834      	ldr	r4, [r6, #0]
 801036c:	4626      	mov	r6, r4
 801036e:	2e00      	cmp	r6, #0
 8010370:	d140      	bne.n	80103f4 <_malloc_r+0xcc>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	4631      	mov	r1, r6
 8010376:	4638      	mov	r0, r7
 8010378:	eb04 0803 	add.w	r8, r4, r3
 801037c:	f000 fcda 	bl	8010d34 <_sbrk_r>
 8010380:	4580      	cmp	r8, r0
 8010382:	d13a      	bne.n	80103fa <_malloc_r+0xd2>
 8010384:	6821      	ldr	r1, [r4, #0]
 8010386:	3503      	adds	r5, #3
 8010388:	1a6d      	subs	r5, r5, r1
 801038a:	f025 0503 	bic.w	r5, r5, #3
 801038e:	3508      	adds	r5, #8
 8010390:	2d0c      	cmp	r5, #12
 8010392:	bf38      	it	cc
 8010394:	250c      	movcc	r5, #12
 8010396:	4629      	mov	r1, r5
 8010398:	4638      	mov	r0, r7
 801039a:	f7ff ffa5 	bl	80102e8 <sbrk_aligned>
 801039e:	3001      	adds	r0, #1
 80103a0:	d02b      	beq.n	80103fa <_malloc_r+0xd2>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	442b      	add	r3, r5
 80103a6:	6023      	str	r3, [r4, #0]
 80103a8:	e00e      	b.n	80103c8 <_malloc_r+0xa0>
 80103aa:	6822      	ldr	r2, [r4, #0]
 80103ac:	1b52      	subs	r2, r2, r5
 80103ae:	d41e      	bmi.n	80103ee <_malloc_r+0xc6>
 80103b0:	2a0b      	cmp	r2, #11
 80103b2:	d916      	bls.n	80103e2 <_malloc_r+0xba>
 80103b4:	1961      	adds	r1, r4, r5
 80103b6:	42a3      	cmp	r3, r4
 80103b8:	6025      	str	r5, [r4, #0]
 80103ba:	bf18      	it	ne
 80103bc:	6059      	strne	r1, [r3, #4]
 80103be:	6863      	ldr	r3, [r4, #4]
 80103c0:	bf08      	it	eq
 80103c2:	6031      	streq	r1, [r6, #0]
 80103c4:	5162      	str	r2, [r4, r5]
 80103c6:	604b      	str	r3, [r1, #4]
 80103c8:	4638      	mov	r0, r7
 80103ca:	f104 060b 	add.w	r6, r4, #11
 80103ce:	f000 fd69 	bl	8010ea4 <__malloc_unlock>
 80103d2:	f026 0607 	bic.w	r6, r6, #7
 80103d6:	1d23      	adds	r3, r4, #4
 80103d8:	1af2      	subs	r2, r6, r3
 80103da:	d0b6      	beq.n	801034a <_malloc_r+0x22>
 80103dc:	1b9b      	subs	r3, r3, r6
 80103de:	50a3      	str	r3, [r4, r2]
 80103e0:	e7b3      	b.n	801034a <_malloc_r+0x22>
 80103e2:	6862      	ldr	r2, [r4, #4]
 80103e4:	42a3      	cmp	r3, r4
 80103e6:	bf0c      	ite	eq
 80103e8:	6032      	streq	r2, [r6, #0]
 80103ea:	605a      	strne	r2, [r3, #4]
 80103ec:	e7ec      	b.n	80103c8 <_malloc_r+0xa0>
 80103ee:	4623      	mov	r3, r4
 80103f0:	6864      	ldr	r4, [r4, #4]
 80103f2:	e7b2      	b.n	801035a <_malloc_r+0x32>
 80103f4:	4634      	mov	r4, r6
 80103f6:	6876      	ldr	r6, [r6, #4]
 80103f8:	e7b9      	b.n	801036e <_malloc_r+0x46>
 80103fa:	230c      	movs	r3, #12
 80103fc:	603b      	str	r3, [r7, #0]
 80103fe:	4638      	mov	r0, r7
 8010400:	f000 fd50 	bl	8010ea4 <__malloc_unlock>
 8010404:	e7a1      	b.n	801034a <_malloc_r+0x22>
 8010406:	6025      	str	r5, [r4, #0]
 8010408:	e7de      	b.n	80103c8 <_malloc_r+0xa0>
 801040a:	bf00      	nop
 801040c:	20008b20 	.word	0x20008b20

08010410 <__ssputs_r>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	688e      	ldr	r6, [r1, #8]
 8010416:	429e      	cmp	r6, r3
 8010418:	4682      	mov	sl, r0
 801041a:	460c      	mov	r4, r1
 801041c:	4690      	mov	r8, r2
 801041e:	461f      	mov	r7, r3
 8010420:	d838      	bhi.n	8010494 <__ssputs_r+0x84>
 8010422:	898a      	ldrh	r2, [r1, #12]
 8010424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010428:	d032      	beq.n	8010490 <__ssputs_r+0x80>
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	6909      	ldr	r1, [r1, #16]
 801042e:	eba5 0901 	sub.w	r9, r5, r1
 8010432:	6965      	ldr	r5, [r4, #20]
 8010434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801043c:	3301      	adds	r3, #1
 801043e:	444b      	add	r3, r9
 8010440:	106d      	asrs	r5, r5, #1
 8010442:	429d      	cmp	r5, r3
 8010444:	bf38      	it	cc
 8010446:	461d      	movcc	r5, r3
 8010448:	0553      	lsls	r3, r2, #21
 801044a:	d531      	bpl.n	80104b0 <__ssputs_r+0xa0>
 801044c:	4629      	mov	r1, r5
 801044e:	f7ff ff6b 	bl	8010328 <_malloc_r>
 8010452:	4606      	mov	r6, r0
 8010454:	b950      	cbnz	r0, 801046c <__ssputs_r+0x5c>
 8010456:	230c      	movs	r3, #12
 8010458:	f8ca 3000 	str.w	r3, [sl]
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010462:	81a3      	strh	r3, [r4, #12]
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046c:	6921      	ldr	r1, [r4, #16]
 801046e:	464a      	mov	r2, r9
 8010470:	f7ff fa68 	bl	800f944 <memcpy>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	6126      	str	r6, [r4, #16]
 8010482:	6165      	str	r5, [r4, #20]
 8010484:	444e      	add	r6, r9
 8010486:	eba5 0509 	sub.w	r5, r5, r9
 801048a:	6026      	str	r6, [r4, #0]
 801048c:	60a5      	str	r5, [r4, #8]
 801048e:	463e      	mov	r6, r7
 8010490:	42be      	cmp	r6, r7
 8010492:	d900      	bls.n	8010496 <__ssputs_r+0x86>
 8010494:	463e      	mov	r6, r7
 8010496:	6820      	ldr	r0, [r4, #0]
 8010498:	4632      	mov	r2, r6
 801049a:	4641      	mov	r1, r8
 801049c:	f7ff fa60 	bl	800f960 <memmove>
 80104a0:	68a3      	ldr	r3, [r4, #8]
 80104a2:	1b9b      	subs	r3, r3, r6
 80104a4:	60a3      	str	r3, [r4, #8]
 80104a6:	6823      	ldr	r3, [r4, #0]
 80104a8:	4433      	add	r3, r6
 80104aa:	6023      	str	r3, [r4, #0]
 80104ac:	2000      	movs	r0, #0
 80104ae:	e7db      	b.n	8010468 <__ssputs_r+0x58>
 80104b0:	462a      	mov	r2, r5
 80104b2:	f000 fcfd 	bl	8010eb0 <_realloc_r>
 80104b6:	4606      	mov	r6, r0
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d1e1      	bne.n	8010480 <__ssputs_r+0x70>
 80104bc:	6921      	ldr	r1, [r4, #16]
 80104be:	4650      	mov	r0, sl
 80104c0:	f7ff fec6 	bl	8010250 <_free_r>
 80104c4:	e7c7      	b.n	8010456 <__ssputs_r+0x46>
	...

080104c8 <_svfiprintf_r>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	4698      	mov	r8, r3
 80104ce:	898b      	ldrh	r3, [r1, #12]
 80104d0:	061b      	lsls	r3, r3, #24
 80104d2:	b09d      	sub	sp, #116	; 0x74
 80104d4:	4607      	mov	r7, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	4614      	mov	r4, r2
 80104da:	d50e      	bpl.n	80104fa <_svfiprintf_r+0x32>
 80104dc:	690b      	ldr	r3, [r1, #16]
 80104de:	b963      	cbnz	r3, 80104fa <_svfiprintf_r+0x32>
 80104e0:	2140      	movs	r1, #64	; 0x40
 80104e2:	f7ff ff21 	bl	8010328 <_malloc_r>
 80104e6:	6028      	str	r0, [r5, #0]
 80104e8:	6128      	str	r0, [r5, #16]
 80104ea:	b920      	cbnz	r0, 80104f6 <_svfiprintf_r+0x2e>
 80104ec:	230c      	movs	r3, #12
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	f04f 30ff 	mov.w	r0, #4294967295
 80104f4:	e0d1      	b.n	801069a <_svfiprintf_r+0x1d2>
 80104f6:	2340      	movs	r3, #64	; 0x40
 80104f8:	616b      	str	r3, [r5, #20]
 80104fa:	2300      	movs	r3, #0
 80104fc:	9309      	str	r3, [sp, #36]	; 0x24
 80104fe:	2320      	movs	r3, #32
 8010500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010504:	f8cd 800c 	str.w	r8, [sp, #12]
 8010508:	2330      	movs	r3, #48	; 0x30
 801050a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80106b4 <_svfiprintf_r+0x1ec>
 801050e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010512:	f04f 0901 	mov.w	r9, #1
 8010516:	4623      	mov	r3, r4
 8010518:	469a      	mov	sl, r3
 801051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801051e:	b10a      	cbz	r2, 8010524 <_svfiprintf_r+0x5c>
 8010520:	2a25      	cmp	r2, #37	; 0x25
 8010522:	d1f9      	bne.n	8010518 <_svfiprintf_r+0x50>
 8010524:	ebba 0b04 	subs.w	fp, sl, r4
 8010528:	d00b      	beq.n	8010542 <_svfiprintf_r+0x7a>
 801052a:	465b      	mov	r3, fp
 801052c:	4622      	mov	r2, r4
 801052e:	4629      	mov	r1, r5
 8010530:	4638      	mov	r0, r7
 8010532:	f7ff ff6d 	bl	8010410 <__ssputs_r>
 8010536:	3001      	adds	r0, #1
 8010538:	f000 80aa 	beq.w	8010690 <_svfiprintf_r+0x1c8>
 801053c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801053e:	445a      	add	r2, fp
 8010540:	9209      	str	r2, [sp, #36]	; 0x24
 8010542:	f89a 3000 	ldrb.w	r3, [sl]
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 80a2 	beq.w	8010690 <_svfiprintf_r+0x1c8>
 801054c:	2300      	movs	r3, #0
 801054e:	f04f 32ff 	mov.w	r2, #4294967295
 8010552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010556:	f10a 0a01 	add.w	sl, sl, #1
 801055a:	9304      	str	r3, [sp, #16]
 801055c:	9307      	str	r3, [sp, #28]
 801055e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010562:	931a      	str	r3, [sp, #104]	; 0x68
 8010564:	4654      	mov	r4, sl
 8010566:	2205      	movs	r2, #5
 8010568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801056c:	4851      	ldr	r0, [pc, #324]	; (80106b4 <_svfiprintf_r+0x1ec>)
 801056e:	f7ef fe57 	bl	8000220 <memchr>
 8010572:	9a04      	ldr	r2, [sp, #16]
 8010574:	b9d8      	cbnz	r0, 80105ae <_svfiprintf_r+0xe6>
 8010576:	06d0      	lsls	r0, r2, #27
 8010578:	bf44      	itt	mi
 801057a:	2320      	movmi	r3, #32
 801057c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010580:	0711      	lsls	r1, r2, #28
 8010582:	bf44      	itt	mi
 8010584:	232b      	movmi	r3, #43	; 0x2b
 8010586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801058a:	f89a 3000 	ldrb.w	r3, [sl]
 801058e:	2b2a      	cmp	r3, #42	; 0x2a
 8010590:	d015      	beq.n	80105be <_svfiprintf_r+0xf6>
 8010592:	9a07      	ldr	r2, [sp, #28]
 8010594:	4654      	mov	r4, sl
 8010596:	2000      	movs	r0, #0
 8010598:	f04f 0c0a 	mov.w	ip, #10
 801059c:	4621      	mov	r1, r4
 801059e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105a2:	3b30      	subs	r3, #48	; 0x30
 80105a4:	2b09      	cmp	r3, #9
 80105a6:	d94e      	bls.n	8010646 <_svfiprintf_r+0x17e>
 80105a8:	b1b0      	cbz	r0, 80105d8 <_svfiprintf_r+0x110>
 80105aa:	9207      	str	r2, [sp, #28]
 80105ac:	e014      	b.n	80105d8 <_svfiprintf_r+0x110>
 80105ae:	eba0 0308 	sub.w	r3, r0, r8
 80105b2:	fa09 f303 	lsl.w	r3, r9, r3
 80105b6:	4313      	orrs	r3, r2
 80105b8:	9304      	str	r3, [sp, #16]
 80105ba:	46a2      	mov	sl, r4
 80105bc:	e7d2      	b.n	8010564 <_svfiprintf_r+0x9c>
 80105be:	9b03      	ldr	r3, [sp, #12]
 80105c0:	1d19      	adds	r1, r3, #4
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	9103      	str	r1, [sp, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	bfbb      	ittet	lt
 80105ca:	425b      	neglt	r3, r3
 80105cc:	f042 0202 	orrlt.w	r2, r2, #2
 80105d0:	9307      	strge	r3, [sp, #28]
 80105d2:	9307      	strlt	r3, [sp, #28]
 80105d4:	bfb8      	it	lt
 80105d6:	9204      	strlt	r2, [sp, #16]
 80105d8:	7823      	ldrb	r3, [r4, #0]
 80105da:	2b2e      	cmp	r3, #46	; 0x2e
 80105dc:	d10c      	bne.n	80105f8 <_svfiprintf_r+0x130>
 80105de:	7863      	ldrb	r3, [r4, #1]
 80105e0:	2b2a      	cmp	r3, #42	; 0x2a
 80105e2:	d135      	bne.n	8010650 <_svfiprintf_r+0x188>
 80105e4:	9b03      	ldr	r3, [sp, #12]
 80105e6:	1d1a      	adds	r2, r3, #4
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	9203      	str	r2, [sp, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	bfb8      	it	lt
 80105f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80105f4:	3402      	adds	r4, #2
 80105f6:	9305      	str	r3, [sp, #20]
 80105f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80106c4 <_svfiprintf_r+0x1fc>
 80105fc:	7821      	ldrb	r1, [r4, #0]
 80105fe:	2203      	movs	r2, #3
 8010600:	4650      	mov	r0, sl
 8010602:	f7ef fe0d 	bl	8000220 <memchr>
 8010606:	b140      	cbz	r0, 801061a <_svfiprintf_r+0x152>
 8010608:	2340      	movs	r3, #64	; 0x40
 801060a:	eba0 000a 	sub.w	r0, r0, sl
 801060e:	fa03 f000 	lsl.w	r0, r3, r0
 8010612:	9b04      	ldr	r3, [sp, #16]
 8010614:	4303      	orrs	r3, r0
 8010616:	3401      	adds	r4, #1
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801061e:	4826      	ldr	r0, [pc, #152]	; (80106b8 <_svfiprintf_r+0x1f0>)
 8010620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010624:	2206      	movs	r2, #6
 8010626:	f7ef fdfb 	bl	8000220 <memchr>
 801062a:	2800      	cmp	r0, #0
 801062c:	d038      	beq.n	80106a0 <_svfiprintf_r+0x1d8>
 801062e:	4b23      	ldr	r3, [pc, #140]	; (80106bc <_svfiprintf_r+0x1f4>)
 8010630:	bb1b      	cbnz	r3, 801067a <_svfiprintf_r+0x1b2>
 8010632:	9b03      	ldr	r3, [sp, #12]
 8010634:	3307      	adds	r3, #7
 8010636:	f023 0307 	bic.w	r3, r3, #7
 801063a:	3308      	adds	r3, #8
 801063c:	9303      	str	r3, [sp, #12]
 801063e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010640:	4433      	add	r3, r6
 8010642:	9309      	str	r3, [sp, #36]	; 0x24
 8010644:	e767      	b.n	8010516 <_svfiprintf_r+0x4e>
 8010646:	fb0c 3202 	mla	r2, ip, r2, r3
 801064a:	460c      	mov	r4, r1
 801064c:	2001      	movs	r0, #1
 801064e:	e7a5      	b.n	801059c <_svfiprintf_r+0xd4>
 8010650:	2300      	movs	r3, #0
 8010652:	3401      	adds	r4, #1
 8010654:	9305      	str	r3, [sp, #20]
 8010656:	4619      	mov	r1, r3
 8010658:	f04f 0c0a 	mov.w	ip, #10
 801065c:	4620      	mov	r0, r4
 801065e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010662:	3a30      	subs	r2, #48	; 0x30
 8010664:	2a09      	cmp	r2, #9
 8010666:	d903      	bls.n	8010670 <_svfiprintf_r+0x1a8>
 8010668:	2b00      	cmp	r3, #0
 801066a:	d0c5      	beq.n	80105f8 <_svfiprintf_r+0x130>
 801066c:	9105      	str	r1, [sp, #20]
 801066e:	e7c3      	b.n	80105f8 <_svfiprintf_r+0x130>
 8010670:	fb0c 2101 	mla	r1, ip, r1, r2
 8010674:	4604      	mov	r4, r0
 8010676:	2301      	movs	r3, #1
 8010678:	e7f0      	b.n	801065c <_svfiprintf_r+0x194>
 801067a:	ab03      	add	r3, sp, #12
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	462a      	mov	r2, r5
 8010680:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <_svfiprintf_r+0x1f8>)
 8010682:	a904      	add	r1, sp, #16
 8010684:	4638      	mov	r0, r7
 8010686:	f3af 8000 	nop.w
 801068a:	1c42      	adds	r2, r0, #1
 801068c:	4606      	mov	r6, r0
 801068e:	d1d6      	bne.n	801063e <_svfiprintf_r+0x176>
 8010690:	89ab      	ldrh	r3, [r5, #12]
 8010692:	065b      	lsls	r3, r3, #25
 8010694:	f53f af2c 	bmi.w	80104f0 <_svfiprintf_r+0x28>
 8010698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801069a:	b01d      	add	sp, #116	; 0x74
 801069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a0:	ab03      	add	r3, sp, #12
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	462a      	mov	r2, r5
 80106a6:	4b06      	ldr	r3, [pc, #24]	; (80106c0 <_svfiprintf_r+0x1f8>)
 80106a8:	a904      	add	r1, sp, #16
 80106aa:	4638      	mov	r0, r7
 80106ac:	f000 f9d4 	bl	8010a58 <_printf_i>
 80106b0:	e7eb      	b.n	801068a <_svfiprintf_r+0x1c2>
 80106b2:	bf00      	nop
 80106b4:	080148f8 	.word	0x080148f8
 80106b8:	08014902 	.word	0x08014902
 80106bc:	00000000 	.word	0x00000000
 80106c0:	08010411 	.word	0x08010411
 80106c4:	080148fe 	.word	0x080148fe

080106c8 <__sfputc_r>:
 80106c8:	6893      	ldr	r3, [r2, #8]
 80106ca:	3b01      	subs	r3, #1
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	b410      	push	{r4}
 80106d0:	6093      	str	r3, [r2, #8]
 80106d2:	da08      	bge.n	80106e6 <__sfputc_r+0x1e>
 80106d4:	6994      	ldr	r4, [r2, #24]
 80106d6:	42a3      	cmp	r3, r4
 80106d8:	db01      	blt.n	80106de <__sfputc_r+0x16>
 80106da:	290a      	cmp	r1, #10
 80106dc:	d103      	bne.n	80106e6 <__sfputc_r+0x1e>
 80106de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106e2:	f7ff ba9d 	b.w	800fc20 <__swbuf_r>
 80106e6:	6813      	ldr	r3, [r2, #0]
 80106e8:	1c58      	adds	r0, r3, #1
 80106ea:	6010      	str	r0, [r2, #0]
 80106ec:	7019      	strb	r1, [r3, #0]
 80106ee:	4608      	mov	r0, r1
 80106f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <__sfputs_r>:
 80106f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f8:	4606      	mov	r6, r0
 80106fa:	460f      	mov	r7, r1
 80106fc:	4614      	mov	r4, r2
 80106fe:	18d5      	adds	r5, r2, r3
 8010700:	42ac      	cmp	r4, r5
 8010702:	d101      	bne.n	8010708 <__sfputs_r+0x12>
 8010704:	2000      	movs	r0, #0
 8010706:	e007      	b.n	8010718 <__sfputs_r+0x22>
 8010708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801070c:	463a      	mov	r2, r7
 801070e:	4630      	mov	r0, r6
 8010710:	f7ff ffda 	bl	80106c8 <__sfputc_r>
 8010714:	1c43      	adds	r3, r0, #1
 8010716:	d1f3      	bne.n	8010700 <__sfputs_r+0xa>
 8010718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801071c <_vfiprintf_r>:
 801071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010720:	460d      	mov	r5, r1
 8010722:	b09d      	sub	sp, #116	; 0x74
 8010724:	4614      	mov	r4, r2
 8010726:	4698      	mov	r8, r3
 8010728:	4606      	mov	r6, r0
 801072a:	b118      	cbz	r0, 8010734 <_vfiprintf_r+0x18>
 801072c:	6983      	ldr	r3, [r0, #24]
 801072e:	b90b      	cbnz	r3, 8010734 <_vfiprintf_r+0x18>
 8010730:	f7ff fc6e 	bl	8010010 <__sinit>
 8010734:	4b89      	ldr	r3, [pc, #548]	; (801095c <_vfiprintf_r+0x240>)
 8010736:	429d      	cmp	r5, r3
 8010738:	d11b      	bne.n	8010772 <_vfiprintf_r+0x56>
 801073a:	6875      	ldr	r5, [r6, #4]
 801073c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801073e:	07d9      	lsls	r1, r3, #31
 8010740:	d405      	bmi.n	801074e <_vfiprintf_r+0x32>
 8010742:	89ab      	ldrh	r3, [r5, #12]
 8010744:	059a      	lsls	r2, r3, #22
 8010746:	d402      	bmi.n	801074e <_vfiprintf_r+0x32>
 8010748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801074a:	f7ff fd11 	bl	8010170 <__retarget_lock_acquire_recursive>
 801074e:	89ab      	ldrh	r3, [r5, #12]
 8010750:	071b      	lsls	r3, r3, #28
 8010752:	d501      	bpl.n	8010758 <_vfiprintf_r+0x3c>
 8010754:	692b      	ldr	r3, [r5, #16]
 8010756:	b9eb      	cbnz	r3, 8010794 <_vfiprintf_r+0x78>
 8010758:	4629      	mov	r1, r5
 801075a:	4630      	mov	r0, r6
 801075c:	f7ff fab2 	bl	800fcc4 <__swsetup_r>
 8010760:	b1c0      	cbz	r0, 8010794 <_vfiprintf_r+0x78>
 8010762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010764:	07dc      	lsls	r4, r3, #31
 8010766:	d50e      	bpl.n	8010786 <_vfiprintf_r+0x6a>
 8010768:	f04f 30ff 	mov.w	r0, #4294967295
 801076c:	b01d      	add	sp, #116	; 0x74
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	4b7b      	ldr	r3, [pc, #492]	; (8010960 <_vfiprintf_r+0x244>)
 8010774:	429d      	cmp	r5, r3
 8010776:	d101      	bne.n	801077c <_vfiprintf_r+0x60>
 8010778:	68b5      	ldr	r5, [r6, #8]
 801077a:	e7df      	b.n	801073c <_vfiprintf_r+0x20>
 801077c:	4b79      	ldr	r3, [pc, #484]	; (8010964 <_vfiprintf_r+0x248>)
 801077e:	429d      	cmp	r5, r3
 8010780:	bf08      	it	eq
 8010782:	68f5      	ldreq	r5, [r6, #12]
 8010784:	e7da      	b.n	801073c <_vfiprintf_r+0x20>
 8010786:	89ab      	ldrh	r3, [r5, #12]
 8010788:	0598      	lsls	r0, r3, #22
 801078a:	d4ed      	bmi.n	8010768 <_vfiprintf_r+0x4c>
 801078c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801078e:	f7ff fcf0 	bl	8010172 <__retarget_lock_release_recursive>
 8010792:	e7e9      	b.n	8010768 <_vfiprintf_r+0x4c>
 8010794:	2300      	movs	r3, #0
 8010796:	9309      	str	r3, [sp, #36]	; 0x24
 8010798:	2320      	movs	r3, #32
 801079a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801079e:	f8cd 800c 	str.w	r8, [sp, #12]
 80107a2:	2330      	movs	r3, #48	; 0x30
 80107a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010968 <_vfiprintf_r+0x24c>
 80107a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107ac:	f04f 0901 	mov.w	r9, #1
 80107b0:	4623      	mov	r3, r4
 80107b2:	469a      	mov	sl, r3
 80107b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107b8:	b10a      	cbz	r2, 80107be <_vfiprintf_r+0xa2>
 80107ba:	2a25      	cmp	r2, #37	; 0x25
 80107bc:	d1f9      	bne.n	80107b2 <_vfiprintf_r+0x96>
 80107be:	ebba 0b04 	subs.w	fp, sl, r4
 80107c2:	d00b      	beq.n	80107dc <_vfiprintf_r+0xc0>
 80107c4:	465b      	mov	r3, fp
 80107c6:	4622      	mov	r2, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	4630      	mov	r0, r6
 80107cc:	f7ff ff93 	bl	80106f6 <__sfputs_r>
 80107d0:	3001      	adds	r0, #1
 80107d2:	f000 80aa 	beq.w	801092a <_vfiprintf_r+0x20e>
 80107d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107d8:	445a      	add	r2, fp
 80107da:	9209      	str	r2, [sp, #36]	; 0x24
 80107dc:	f89a 3000 	ldrb.w	r3, [sl]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f000 80a2 	beq.w	801092a <_vfiprintf_r+0x20e>
 80107e6:	2300      	movs	r3, #0
 80107e8:	f04f 32ff 	mov.w	r2, #4294967295
 80107ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107f0:	f10a 0a01 	add.w	sl, sl, #1
 80107f4:	9304      	str	r3, [sp, #16]
 80107f6:	9307      	str	r3, [sp, #28]
 80107f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107fc:	931a      	str	r3, [sp, #104]	; 0x68
 80107fe:	4654      	mov	r4, sl
 8010800:	2205      	movs	r2, #5
 8010802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010806:	4858      	ldr	r0, [pc, #352]	; (8010968 <_vfiprintf_r+0x24c>)
 8010808:	f7ef fd0a 	bl	8000220 <memchr>
 801080c:	9a04      	ldr	r2, [sp, #16]
 801080e:	b9d8      	cbnz	r0, 8010848 <_vfiprintf_r+0x12c>
 8010810:	06d1      	lsls	r1, r2, #27
 8010812:	bf44      	itt	mi
 8010814:	2320      	movmi	r3, #32
 8010816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081a:	0713      	lsls	r3, r2, #28
 801081c:	bf44      	itt	mi
 801081e:	232b      	movmi	r3, #43	; 0x2b
 8010820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010824:	f89a 3000 	ldrb.w	r3, [sl]
 8010828:	2b2a      	cmp	r3, #42	; 0x2a
 801082a:	d015      	beq.n	8010858 <_vfiprintf_r+0x13c>
 801082c:	9a07      	ldr	r2, [sp, #28]
 801082e:	4654      	mov	r4, sl
 8010830:	2000      	movs	r0, #0
 8010832:	f04f 0c0a 	mov.w	ip, #10
 8010836:	4621      	mov	r1, r4
 8010838:	f811 3b01 	ldrb.w	r3, [r1], #1
 801083c:	3b30      	subs	r3, #48	; 0x30
 801083e:	2b09      	cmp	r3, #9
 8010840:	d94e      	bls.n	80108e0 <_vfiprintf_r+0x1c4>
 8010842:	b1b0      	cbz	r0, 8010872 <_vfiprintf_r+0x156>
 8010844:	9207      	str	r2, [sp, #28]
 8010846:	e014      	b.n	8010872 <_vfiprintf_r+0x156>
 8010848:	eba0 0308 	sub.w	r3, r0, r8
 801084c:	fa09 f303 	lsl.w	r3, r9, r3
 8010850:	4313      	orrs	r3, r2
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	46a2      	mov	sl, r4
 8010856:	e7d2      	b.n	80107fe <_vfiprintf_r+0xe2>
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	1d19      	adds	r1, r3, #4
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	9103      	str	r1, [sp, #12]
 8010860:	2b00      	cmp	r3, #0
 8010862:	bfbb      	ittet	lt
 8010864:	425b      	neglt	r3, r3
 8010866:	f042 0202 	orrlt.w	r2, r2, #2
 801086a:	9307      	strge	r3, [sp, #28]
 801086c:	9307      	strlt	r3, [sp, #28]
 801086e:	bfb8      	it	lt
 8010870:	9204      	strlt	r2, [sp, #16]
 8010872:	7823      	ldrb	r3, [r4, #0]
 8010874:	2b2e      	cmp	r3, #46	; 0x2e
 8010876:	d10c      	bne.n	8010892 <_vfiprintf_r+0x176>
 8010878:	7863      	ldrb	r3, [r4, #1]
 801087a:	2b2a      	cmp	r3, #42	; 0x2a
 801087c:	d135      	bne.n	80108ea <_vfiprintf_r+0x1ce>
 801087e:	9b03      	ldr	r3, [sp, #12]
 8010880:	1d1a      	adds	r2, r3, #4
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	9203      	str	r2, [sp, #12]
 8010886:	2b00      	cmp	r3, #0
 8010888:	bfb8      	it	lt
 801088a:	f04f 33ff 	movlt.w	r3, #4294967295
 801088e:	3402      	adds	r4, #2
 8010890:	9305      	str	r3, [sp, #20]
 8010892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010978 <_vfiprintf_r+0x25c>
 8010896:	7821      	ldrb	r1, [r4, #0]
 8010898:	2203      	movs	r2, #3
 801089a:	4650      	mov	r0, sl
 801089c:	f7ef fcc0 	bl	8000220 <memchr>
 80108a0:	b140      	cbz	r0, 80108b4 <_vfiprintf_r+0x198>
 80108a2:	2340      	movs	r3, #64	; 0x40
 80108a4:	eba0 000a 	sub.w	r0, r0, sl
 80108a8:	fa03 f000 	lsl.w	r0, r3, r0
 80108ac:	9b04      	ldr	r3, [sp, #16]
 80108ae:	4303      	orrs	r3, r0
 80108b0:	3401      	adds	r4, #1
 80108b2:	9304      	str	r3, [sp, #16]
 80108b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b8:	482c      	ldr	r0, [pc, #176]	; (801096c <_vfiprintf_r+0x250>)
 80108ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108be:	2206      	movs	r2, #6
 80108c0:	f7ef fcae 	bl	8000220 <memchr>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d03f      	beq.n	8010948 <_vfiprintf_r+0x22c>
 80108c8:	4b29      	ldr	r3, [pc, #164]	; (8010970 <_vfiprintf_r+0x254>)
 80108ca:	bb1b      	cbnz	r3, 8010914 <_vfiprintf_r+0x1f8>
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	3307      	adds	r3, #7
 80108d0:	f023 0307 	bic.w	r3, r3, #7
 80108d4:	3308      	adds	r3, #8
 80108d6:	9303      	str	r3, [sp, #12]
 80108d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108da:	443b      	add	r3, r7
 80108dc:	9309      	str	r3, [sp, #36]	; 0x24
 80108de:	e767      	b.n	80107b0 <_vfiprintf_r+0x94>
 80108e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80108e4:	460c      	mov	r4, r1
 80108e6:	2001      	movs	r0, #1
 80108e8:	e7a5      	b.n	8010836 <_vfiprintf_r+0x11a>
 80108ea:	2300      	movs	r3, #0
 80108ec:	3401      	adds	r4, #1
 80108ee:	9305      	str	r3, [sp, #20]
 80108f0:	4619      	mov	r1, r3
 80108f2:	f04f 0c0a 	mov.w	ip, #10
 80108f6:	4620      	mov	r0, r4
 80108f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108fc:	3a30      	subs	r2, #48	; 0x30
 80108fe:	2a09      	cmp	r2, #9
 8010900:	d903      	bls.n	801090a <_vfiprintf_r+0x1ee>
 8010902:	2b00      	cmp	r3, #0
 8010904:	d0c5      	beq.n	8010892 <_vfiprintf_r+0x176>
 8010906:	9105      	str	r1, [sp, #20]
 8010908:	e7c3      	b.n	8010892 <_vfiprintf_r+0x176>
 801090a:	fb0c 2101 	mla	r1, ip, r1, r2
 801090e:	4604      	mov	r4, r0
 8010910:	2301      	movs	r3, #1
 8010912:	e7f0      	b.n	80108f6 <_vfiprintf_r+0x1da>
 8010914:	ab03      	add	r3, sp, #12
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	462a      	mov	r2, r5
 801091a:	4b16      	ldr	r3, [pc, #88]	; (8010974 <_vfiprintf_r+0x258>)
 801091c:	a904      	add	r1, sp, #16
 801091e:	4630      	mov	r0, r6
 8010920:	f3af 8000 	nop.w
 8010924:	4607      	mov	r7, r0
 8010926:	1c78      	adds	r0, r7, #1
 8010928:	d1d6      	bne.n	80108d8 <_vfiprintf_r+0x1bc>
 801092a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801092c:	07d9      	lsls	r1, r3, #31
 801092e:	d405      	bmi.n	801093c <_vfiprintf_r+0x220>
 8010930:	89ab      	ldrh	r3, [r5, #12]
 8010932:	059a      	lsls	r2, r3, #22
 8010934:	d402      	bmi.n	801093c <_vfiprintf_r+0x220>
 8010936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010938:	f7ff fc1b 	bl	8010172 <__retarget_lock_release_recursive>
 801093c:	89ab      	ldrh	r3, [r5, #12]
 801093e:	065b      	lsls	r3, r3, #25
 8010940:	f53f af12 	bmi.w	8010768 <_vfiprintf_r+0x4c>
 8010944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010946:	e711      	b.n	801076c <_vfiprintf_r+0x50>
 8010948:	ab03      	add	r3, sp, #12
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	462a      	mov	r2, r5
 801094e:	4b09      	ldr	r3, [pc, #36]	; (8010974 <_vfiprintf_r+0x258>)
 8010950:	a904      	add	r1, sp, #16
 8010952:	4630      	mov	r0, r6
 8010954:	f000 f880 	bl	8010a58 <_printf_i>
 8010958:	e7e4      	b.n	8010924 <_vfiprintf_r+0x208>
 801095a:	bf00      	nop
 801095c:	080148b8 	.word	0x080148b8
 8010960:	080148d8 	.word	0x080148d8
 8010964:	08014898 	.word	0x08014898
 8010968:	080148f8 	.word	0x080148f8
 801096c:	08014902 	.word	0x08014902
 8010970:	00000000 	.word	0x00000000
 8010974:	080106f7 	.word	0x080106f7
 8010978:	080148fe 	.word	0x080148fe

0801097c <_printf_common>:
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	4616      	mov	r6, r2
 8010982:	4699      	mov	r9, r3
 8010984:	688a      	ldr	r2, [r1, #8]
 8010986:	690b      	ldr	r3, [r1, #16]
 8010988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801098c:	4293      	cmp	r3, r2
 801098e:	bfb8      	it	lt
 8010990:	4613      	movlt	r3, r2
 8010992:	6033      	str	r3, [r6, #0]
 8010994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010998:	4607      	mov	r7, r0
 801099a:	460c      	mov	r4, r1
 801099c:	b10a      	cbz	r2, 80109a2 <_printf_common+0x26>
 801099e:	3301      	adds	r3, #1
 80109a0:	6033      	str	r3, [r6, #0]
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	0699      	lsls	r1, r3, #26
 80109a6:	bf42      	ittt	mi
 80109a8:	6833      	ldrmi	r3, [r6, #0]
 80109aa:	3302      	addmi	r3, #2
 80109ac:	6033      	strmi	r3, [r6, #0]
 80109ae:	6825      	ldr	r5, [r4, #0]
 80109b0:	f015 0506 	ands.w	r5, r5, #6
 80109b4:	d106      	bne.n	80109c4 <_printf_common+0x48>
 80109b6:	f104 0a19 	add.w	sl, r4, #25
 80109ba:	68e3      	ldr	r3, [r4, #12]
 80109bc:	6832      	ldr	r2, [r6, #0]
 80109be:	1a9b      	subs	r3, r3, r2
 80109c0:	42ab      	cmp	r3, r5
 80109c2:	dc26      	bgt.n	8010a12 <_printf_common+0x96>
 80109c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109c8:	1e13      	subs	r3, r2, #0
 80109ca:	6822      	ldr	r2, [r4, #0]
 80109cc:	bf18      	it	ne
 80109ce:	2301      	movne	r3, #1
 80109d0:	0692      	lsls	r2, r2, #26
 80109d2:	d42b      	bmi.n	8010a2c <_printf_common+0xb0>
 80109d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109d8:	4649      	mov	r1, r9
 80109da:	4638      	mov	r0, r7
 80109dc:	47c0      	blx	r8
 80109de:	3001      	adds	r0, #1
 80109e0:	d01e      	beq.n	8010a20 <_printf_common+0xa4>
 80109e2:	6823      	ldr	r3, [r4, #0]
 80109e4:	68e5      	ldr	r5, [r4, #12]
 80109e6:	6832      	ldr	r2, [r6, #0]
 80109e8:	f003 0306 	and.w	r3, r3, #6
 80109ec:	2b04      	cmp	r3, #4
 80109ee:	bf08      	it	eq
 80109f0:	1aad      	subeq	r5, r5, r2
 80109f2:	68a3      	ldr	r3, [r4, #8]
 80109f4:	6922      	ldr	r2, [r4, #16]
 80109f6:	bf0c      	ite	eq
 80109f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109fc:	2500      	movne	r5, #0
 80109fe:	4293      	cmp	r3, r2
 8010a00:	bfc4      	itt	gt
 8010a02:	1a9b      	subgt	r3, r3, r2
 8010a04:	18ed      	addgt	r5, r5, r3
 8010a06:	2600      	movs	r6, #0
 8010a08:	341a      	adds	r4, #26
 8010a0a:	42b5      	cmp	r5, r6
 8010a0c:	d11a      	bne.n	8010a44 <_printf_common+0xc8>
 8010a0e:	2000      	movs	r0, #0
 8010a10:	e008      	b.n	8010a24 <_printf_common+0xa8>
 8010a12:	2301      	movs	r3, #1
 8010a14:	4652      	mov	r2, sl
 8010a16:	4649      	mov	r1, r9
 8010a18:	4638      	mov	r0, r7
 8010a1a:	47c0      	blx	r8
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	d103      	bne.n	8010a28 <_printf_common+0xac>
 8010a20:	f04f 30ff 	mov.w	r0, #4294967295
 8010a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a28:	3501      	adds	r5, #1
 8010a2a:	e7c6      	b.n	80109ba <_printf_common+0x3e>
 8010a2c:	18e1      	adds	r1, r4, r3
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	2030      	movs	r0, #48	; 0x30
 8010a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a36:	4422      	add	r2, r4
 8010a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a40:	3302      	adds	r3, #2
 8010a42:	e7c7      	b.n	80109d4 <_printf_common+0x58>
 8010a44:	2301      	movs	r3, #1
 8010a46:	4622      	mov	r2, r4
 8010a48:	4649      	mov	r1, r9
 8010a4a:	4638      	mov	r0, r7
 8010a4c:	47c0      	blx	r8
 8010a4e:	3001      	adds	r0, #1
 8010a50:	d0e6      	beq.n	8010a20 <_printf_common+0xa4>
 8010a52:	3601      	adds	r6, #1
 8010a54:	e7d9      	b.n	8010a0a <_printf_common+0x8e>
	...

08010a58 <_printf_i>:
 8010a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	7e0f      	ldrb	r7, [r1, #24]
 8010a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a60:	2f78      	cmp	r7, #120	; 0x78
 8010a62:	4691      	mov	r9, r2
 8010a64:	4680      	mov	r8, r0
 8010a66:	460c      	mov	r4, r1
 8010a68:	469a      	mov	sl, r3
 8010a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a6e:	d807      	bhi.n	8010a80 <_printf_i+0x28>
 8010a70:	2f62      	cmp	r7, #98	; 0x62
 8010a72:	d80a      	bhi.n	8010a8a <_printf_i+0x32>
 8010a74:	2f00      	cmp	r7, #0
 8010a76:	f000 80d8 	beq.w	8010c2a <_printf_i+0x1d2>
 8010a7a:	2f58      	cmp	r7, #88	; 0x58
 8010a7c:	f000 80a3 	beq.w	8010bc6 <_printf_i+0x16e>
 8010a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a88:	e03a      	b.n	8010b00 <_printf_i+0xa8>
 8010a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a8e:	2b15      	cmp	r3, #21
 8010a90:	d8f6      	bhi.n	8010a80 <_printf_i+0x28>
 8010a92:	a101      	add	r1, pc, #4	; (adr r1, 8010a98 <_printf_i+0x40>)
 8010a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a98:	08010af1 	.word	0x08010af1
 8010a9c:	08010b05 	.word	0x08010b05
 8010aa0:	08010a81 	.word	0x08010a81
 8010aa4:	08010a81 	.word	0x08010a81
 8010aa8:	08010a81 	.word	0x08010a81
 8010aac:	08010a81 	.word	0x08010a81
 8010ab0:	08010b05 	.word	0x08010b05
 8010ab4:	08010a81 	.word	0x08010a81
 8010ab8:	08010a81 	.word	0x08010a81
 8010abc:	08010a81 	.word	0x08010a81
 8010ac0:	08010a81 	.word	0x08010a81
 8010ac4:	08010c11 	.word	0x08010c11
 8010ac8:	08010b35 	.word	0x08010b35
 8010acc:	08010bf3 	.word	0x08010bf3
 8010ad0:	08010a81 	.word	0x08010a81
 8010ad4:	08010a81 	.word	0x08010a81
 8010ad8:	08010c33 	.word	0x08010c33
 8010adc:	08010a81 	.word	0x08010a81
 8010ae0:	08010b35 	.word	0x08010b35
 8010ae4:	08010a81 	.word	0x08010a81
 8010ae8:	08010a81 	.word	0x08010a81
 8010aec:	08010bfb 	.word	0x08010bfb
 8010af0:	682b      	ldr	r3, [r5, #0]
 8010af2:	1d1a      	adds	r2, r3, #4
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	602a      	str	r2, [r5, #0]
 8010af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b00:	2301      	movs	r3, #1
 8010b02:	e0a3      	b.n	8010c4c <_printf_i+0x1f4>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	6829      	ldr	r1, [r5, #0]
 8010b08:	0606      	lsls	r6, r0, #24
 8010b0a:	f101 0304 	add.w	r3, r1, #4
 8010b0e:	d50a      	bpl.n	8010b26 <_printf_i+0xce>
 8010b10:	680e      	ldr	r6, [r1, #0]
 8010b12:	602b      	str	r3, [r5, #0]
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	da03      	bge.n	8010b20 <_printf_i+0xc8>
 8010b18:	232d      	movs	r3, #45	; 0x2d
 8010b1a:	4276      	negs	r6, r6
 8010b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b20:	485e      	ldr	r0, [pc, #376]	; (8010c9c <_printf_i+0x244>)
 8010b22:	230a      	movs	r3, #10
 8010b24:	e019      	b.n	8010b5a <_printf_i+0x102>
 8010b26:	680e      	ldr	r6, [r1, #0]
 8010b28:	602b      	str	r3, [r5, #0]
 8010b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b2e:	bf18      	it	ne
 8010b30:	b236      	sxthne	r6, r6
 8010b32:	e7ef      	b.n	8010b14 <_printf_i+0xbc>
 8010b34:	682b      	ldr	r3, [r5, #0]
 8010b36:	6820      	ldr	r0, [r4, #0]
 8010b38:	1d19      	adds	r1, r3, #4
 8010b3a:	6029      	str	r1, [r5, #0]
 8010b3c:	0601      	lsls	r1, r0, #24
 8010b3e:	d501      	bpl.n	8010b44 <_printf_i+0xec>
 8010b40:	681e      	ldr	r6, [r3, #0]
 8010b42:	e002      	b.n	8010b4a <_printf_i+0xf2>
 8010b44:	0646      	lsls	r6, r0, #25
 8010b46:	d5fb      	bpl.n	8010b40 <_printf_i+0xe8>
 8010b48:	881e      	ldrh	r6, [r3, #0]
 8010b4a:	4854      	ldr	r0, [pc, #336]	; (8010c9c <_printf_i+0x244>)
 8010b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8010b4e:	bf0c      	ite	eq
 8010b50:	2308      	moveq	r3, #8
 8010b52:	230a      	movne	r3, #10
 8010b54:	2100      	movs	r1, #0
 8010b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b5a:	6865      	ldr	r5, [r4, #4]
 8010b5c:	60a5      	str	r5, [r4, #8]
 8010b5e:	2d00      	cmp	r5, #0
 8010b60:	bfa2      	ittt	ge
 8010b62:	6821      	ldrge	r1, [r4, #0]
 8010b64:	f021 0104 	bicge.w	r1, r1, #4
 8010b68:	6021      	strge	r1, [r4, #0]
 8010b6a:	b90e      	cbnz	r6, 8010b70 <_printf_i+0x118>
 8010b6c:	2d00      	cmp	r5, #0
 8010b6e:	d04d      	beq.n	8010c0c <_printf_i+0x1b4>
 8010b70:	4615      	mov	r5, r2
 8010b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b76:	fb03 6711 	mls	r7, r3, r1, r6
 8010b7a:	5dc7      	ldrb	r7, [r0, r7]
 8010b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b80:	4637      	mov	r7, r6
 8010b82:	42bb      	cmp	r3, r7
 8010b84:	460e      	mov	r6, r1
 8010b86:	d9f4      	bls.n	8010b72 <_printf_i+0x11a>
 8010b88:	2b08      	cmp	r3, #8
 8010b8a:	d10b      	bne.n	8010ba4 <_printf_i+0x14c>
 8010b8c:	6823      	ldr	r3, [r4, #0]
 8010b8e:	07de      	lsls	r6, r3, #31
 8010b90:	d508      	bpl.n	8010ba4 <_printf_i+0x14c>
 8010b92:	6923      	ldr	r3, [r4, #16]
 8010b94:	6861      	ldr	r1, [r4, #4]
 8010b96:	4299      	cmp	r1, r3
 8010b98:	bfde      	ittt	le
 8010b9a:	2330      	movle	r3, #48	; 0x30
 8010b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ba4:	1b52      	subs	r2, r2, r5
 8010ba6:	6122      	str	r2, [r4, #16]
 8010ba8:	f8cd a000 	str.w	sl, [sp]
 8010bac:	464b      	mov	r3, r9
 8010bae:	aa03      	add	r2, sp, #12
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	4640      	mov	r0, r8
 8010bb4:	f7ff fee2 	bl	801097c <_printf_common>
 8010bb8:	3001      	adds	r0, #1
 8010bba:	d14c      	bne.n	8010c56 <_printf_i+0x1fe>
 8010bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc0:	b004      	add	sp, #16
 8010bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc6:	4835      	ldr	r0, [pc, #212]	; (8010c9c <_printf_i+0x244>)
 8010bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010bcc:	6829      	ldr	r1, [r5, #0]
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8010bd4:	6029      	str	r1, [r5, #0]
 8010bd6:	061d      	lsls	r5, r3, #24
 8010bd8:	d514      	bpl.n	8010c04 <_printf_i+0x1ac>
 8010bda:	07df      	lsls	r7, r3, #31
 8010bdc:	bf44      	itt	mi
 8010bde:	f043 0320 	orrmi.w	r3, r3, #32
 8010be2:	6023      	strmi	r3, [r4, #0]
 8010be4:	b91e      	cbnz	r6, 8010bee <_printf_i+0x196>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	f023 0320 	bic.w	r3, r3, #32
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	2310      	movs	r3, #16
 8010bf0:	e7b0      	b.n	8010b54 <_printf_i+0xfc>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	f043 0320 	orr.w	r3, r3, #32
 8010bf8:	6023      	str	r3, [r4, #0]
 8010bfa:	2378      	movs	r3, #120	; 0x78
 8010bfc:	4828      	ldr	r0, [pc, #160]	; (8010ca0 <_printf_i+0x248>)
 8010bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c02:	e7e3      	b.n	8010bcc <_printf_i+0x174>
 8010c04:	0659      	lsls	r1, r3, #25
 8010c06:	bf48      	it	mi
 8010c08:	b2b6      	uxthmi	r6, r6
 8010c0a:	e7e6      	b.n	8010bda <_printf_i+0x182>
 8010c0c:	4615      	mov	r5, r2
 8010c0e:	e7bb      	b.n	8010b88 <_printf_i+0x130>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	6826      	ldr	r6, [r4, #0]
 8010c14:	6961      	ldr	r1, [r4, #20]
 8010c16:	1d18      	adds	r0, r3, #4
 8010c18:	6028      	str	r0, [r5, #0]
 8010c1a:	0635      	lsls	r5, r6, #24
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	d501      	bpl.n	8010c24 <_printf_i+0x1cc>
 8010c20:	6019      	str	r1, [r3, #0]
 8010c22:	e002      	b.n	8010c2a <_printf_i+0x1d2>
 8010c24:	0670      	lsls	r0, r6, #25
 8010c26:	d5fb      	bpl.n	8010c20 <_printf_i+0x1c8>
 8010c28:	8019      	strh	r1, [r3, #0]
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	6123      	str	r3, [r4, #16]
 8010c2e:	4615      	mov	r5, r2
 8010c30:	e7ba      	b.n	8010ba8 <_printf_i+0x150>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	1d1a      	adds	r2, r3, #4
 8010c36:	602a      	str	r2, [r5, #0]
 8010c38:	681d      	ldr	r5, [r3, #0]
 8010c3a:	6862      	ldr	r2, [r4, #4]
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f7ef faee 	bl	8000220 <memchr>
 8010c44:	b108      	cbz	r0, 8010c4a <_printf_i+0x1f2>
 8010c46:	1b40      	subs	r0, r0, r5
 8010c48:	6060      	str	r0, [r4, #4]
 8010c4a:	6863      	ldr	r3, [r4, #4]
 8010c4c:	6123      	str	r3, [r4, #16]
 8010c4e:	2300      	movs	r3, #0
 8010c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c54:	e7a8      	b.n	8010ba8 <_printf_i+0x150>
 8010c56:	6923      	ldr	r3, [r4, #16]
 8010c58:	462a      	mov	r2, r5
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	4640      	mov	r0, r8
 8010c5e:	47d0      	blx	sl
 8010c60:	3001      	adds	r0, #1
 8010c62:	d0ab      	beq.n	8010bbc <_printf_i+0x164>
 8010c64:	6823      	ldr	r3, [r4, #0]
 8010c66:	079b      	lsls	r3, r3, #30
 8010c68:	d413      	bmi.n	8010c92 <_printf_i+0x23a>
 8010c6a:	68e0      	ldr	r0, [r4, #12]
 8010c6c:	9b03      	ldr	r3, [sp, #12]
 8010c6e:	4298      	cmp	r0, r3
 8010c70:	bfb8      	it	lt
 8010c72:	4618      	movlt	r0, r3
 8010c74:	e7a4      	b.n	8010bc0 <_printf_i+0x168>
 8010c76:	2301      	movs	r3, #1
 8010c78:	4632      	mov	r2, r6
 8010c7a:	4649      	mov	r1, r9
 8010c7c:	4640      	mov	r0, r8
 8010c7e:	47d0      	blx	sl
 8010c80:	3001      	adds	r0, #1
 8010c82:	d09b      	beq.n	8010bbc <_printf_i+0x164>
 8010c84:	3501      	adds	r5, #1
 8010c86:	68e3      	ldr	r3, [r4, #12]
 8010c88:	9903      	ldr	r1, [sp, #12]
 8010c8a:	1a5b      	subs	r3, r3, r1
 8010c8c:	42ab      	cmp	r3, r5
 8010c8e:	dcf2      	bgt.n	8010c76 <_printf_i+0x21e>
 8010c90:	e7eb      	b.n	8010c6a <_printf_i+0x212>
 8010c92:	2500      	movs	r5, #0
 8010c94:	f104 0619 	add.w	r6, r4, #25
 8010c98:	e7f5      	b.n	8010c86 <_printf_i+0x22e>
 8010c9a:	bf00      	nop
 8010c9c:	08014909 	.word	0x08014909
 8010ca0:	0801491a 	.word	0x0801491a

08010ca4 <_putc_r>:
 8010ca4:	b570      	push	{r4, r5, r6, lr}
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	4614      	mov	r4, r2
 8010caa:	4606      	mov	r6, r0
 8010cac:	b118      	cbz	r0, 8010cb6 <_putc_r+0x12>
 8010cae:	6983      	ldr	r3, [r0, #24]
 8010cb0:	b90b      	cbnz	r3, 8010cb6 <_putc_r+0x12>
 8010cb2:	f7ff f9ad 	bl	8010010 <__sinit>
 8010cb6:	4b1c      	ldr	r3, [pc, #112]	; (8010d28 <_putc_r+0x84>)
 8010cb8:	429c      	cmp	r4, r3
 8010cba:	d124      	bne.n	8010d06 <_putc_r+0x62>
 8010cbc:	6874      	ldr	r4, [r6, #4]
 8010cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cc0:	07d8      	lsls	r0, r3, #31
 8010cc2:	d405      	bmi.n	8010cd0 <_putc_r+0x2c>
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	0599      	lsls	r1, r3, #22
 8010cc8:	d402      	bmi.n	8010cd0 <_putc_r+0x2c>
 8010cca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ccc:	f7ff fa50 	bl	8010170 <__retarget_lock_acquire_recursive>
 8010cd0:	68a3      	ldr	r3, [r4, #8]
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	60a3      	str	r3, [r4, #8]
 8010cd8:	da05      	bge.n	8010ce6 <_putc_r+0x42>
 8010cda:	69a2      	ldr	r2, [r4, #24]
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	db1c      	blt.n	8010d1a <_putc_r+0x76>
 8010ce0:	b2eb      	uxtb	r3, r5
 8010ce2:	2b0a      	cmp	r3, #10
 8010ce4:	d019      	beq.n	8010d1a <_putc_r+0x76>
 8010ce6:	6823      	ldr	r3, [r4, #0]
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	6022      	str	r2, [r4, #0]
 8010cec:	701d      	strb	r5, [r3, #0]
 8010cee:	b2ed      	uxtb	r5, r5
 8010cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cf2:	07da      	lsls	r2, r3, #31
 8010cf4:	d405      	bmi.n	8010d02 <_putc_r+0x5e>
 8010cf6:	89a3      	ldrh	r3, [r4, #12]
 8010cf8:	059b      	lsls	r3, r3, #22
 8010cfa:	d402      	bmi.n	8010d02 <_putc_r+0x5e>
 8010cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cfe:	f7ff fa38 	bl	8010172 <__retarget_lock_release_recursive>
 8010d02:	4628      	mov	r0, r5
 8010d04:	bd70      	pop	{r4, r5, r6, pc}
 8010d06:	4b09      	ldr	r3, [pc, #36]	; (8010d2c <_putc_r+0x88>)
 8010d08:	429c      	cmp	r4, r3
 8010d0a:	d101      	bne.n	8010d10 <_putc_r+0x6c>
 8010d0c:	68b4      	ldr	r4, [r6, #8]
 8010d0e:	e7d6      	b.n	8010cbe <_putc_r+0x1a>
 8010d10:	4b07      	ldr	r3, [pc, #28]	; (8010d30 <_putc_r+0x8c>)
 8010d12:	429c      	cmp	r4, r3
 8010d14:	bf08      	it	eq
 8010d16:	68f4      	ldreq	r4, [r6, #12]
 8010d18:	e7d1      	b.n	8010cbe <_putc_r+0x1a>
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7fe ff7e 	bl	800fc20 <__swbuf_r>
 8010d24:	4605      	mov	r5, r0
 8010d26:	e7e3      	b.n	8010cf0 <_putc_r+0x4c>
 8010d28:	080148b8 	.word	0x080148b8
 8010d2c:	080148d8 	.word	0x080148d8
 8010d30:	08014898 	.word	0x08014898

08010d34 <_sbrk_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d06      	ldr	r5, [pc, #24]	; (8010d50 <_sbrk_r+0x1c>)
 8010d38:	2300      	movs	r3, #0
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	4608      	mov	r0, r1
 8010d3e:	602b      	str	r3, [r5, #0]
 8010d40:	f7ef ff5a 	bl	8000bf8 <_sbrk>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	d102      	bne.n	8010d4e <_sbrk_r+0x1a>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b103      	cbz	r3, 8010d4e <_sbrk_r+0x1a>
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd38      	pop	{r3, r4, r5, pc}
 8010d50:	20008b18 	.word	0x20008b18

08010d54 <__sread>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	460c      	mov	r4, r1
 8010d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d5c:	f000 f8d8 	bl	8010f10 <_read_r>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	bfab      	itete	ge
 8010d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d66:	89a3      	ldrhlt	r3, [r4, #12]
 8010d68:	181b      	addge	r3, r3, r0
 8010d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d6e:	bfac      	ite	ge
 8010d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d72:	81a3      	strhlt	r3, [r4, #12]
 8010d74:	bd10      	pop	{r4, pc}

08010d76 <__swrite>:
 8010d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7a:	461f      	mov	r7, r3
 8010d7c:	898b      	ldrh	r3, [r1, #12]
 8010d7e:	05db      	lsls	r3, r3, #23
 8010d80:	4605      	mov	r5, r0
 8010d82:	460c      	mov	r4, r1
 8010d84:	4616      	mov	r6, r2
 8010d86:	d505      	bpl.n	8010d94 <__swrite+0x1e>
 8010d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d8c:	2302      	movs	r3, #2
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f000 f870 	bl	8010e74 <_lseek_r>
 8010d94:	89a3      	ldrh	r3, [r4, #12]
 8010d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d9e:	81a3      	strh	r3, [r4, #12]
 8010da0:	4632      	mov	r2, r6
 8010da2:	463b      	mov	r3, r7
 8010da4:	4628      	mov	r0, r5
 8010da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010daa:	f000 b817 	b.w	8010ddc <_write_r>

08010dae <__sseek>:
 8010dae:	b510      	push	{r4, lr}
 8010db0:	460c      	mov	r4, r1
 8010db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db6:	f000 f85d 	bl	8010e74 <_lseek_r>
 8010dba:	1c43      	adds	r3, r0, #1
 8010dbc:	89a3      	ldrh	r3, [r4, #12]
 8010dbe:	bf15      	itete	ne
 8010dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dca:	81a3      	strheq	r3, [r4, #12]
 8010dcc:	bf18      	it	ne
 8010dce:	81a3      	strhne	r3, [r4, #12]
 8010dd0:	bd10      	pop	{r4, pc}

08010dd2 <__sclose>:
 8010dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd6:	f000 b81b 	b.w	8010e10 <_close_r>
	...

08010ddc <_write_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d07      	ldr	r5, [pc, #28]	; (8010dfc <_write_r+0x20>)
 8010de0:	4604      	mov	r4, r0
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	2200      	movs	r2, #0
 8010de8:	602a      	str	r2, [r5, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	f7ef feb3 	bl	8000b56 <_write>
 8010df0:	1c43      	adds	r3, r0, #1
 8010df2:	d102      	bne.n	8010dfa <_write_r+0x1e>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	b103      	cbz	r3, 8010dfa <_write_r+0x1e>
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	20008b18 	.word	0x20008b18

08010e00 <abort>:
 8010e00:	b508      	push	{r3, lr}
 8010e02:	2006      	movs	r0, #6
 8010e04:	f000 f8be 	bl	8010f84 <raise>
 8010e08:	2001      	movs	r0, #1
 8010e0a:	f7ef fe7d 	bl	8000b08 <_exit>
	...

08010e10 <_close_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4d06      	ldr	r5, [pc, #24]	; (8010e2c <_close_r+0x1c>)
 8010e14:	2300      	movs	r3, #0
 8010e16:	4604      	mov	r4, r0
 8010e18:	4608      	mov	r0, r1
 8010e1a:	602b      	str	r3, [r5, #0]
 8010e1c:	f7ef feb7 	bl	8000b8e <_close>
 8010e20:	1c43      	adds	r3, r0, #1
 8010e22:	d102      	bne.n	8010e2a <_close_r+0x1a>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	b103      	cbz	r3, 8010e2a <_close_r+0x1a>
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	20008b18 	.word	0x20008b18

08010e30 <_fstat_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d07      	ldr	r5, [pc, #28]	; (8010e50 <_fstat_r+0x20>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	602b      	str	r3, [r5, #0]
 8010e3e:	f7ef feb2 	bl	8000ba6 <_fstat>
 8010e42:	1c43      	adds	r3, r0, #1
 8010e44:	d102      	bne.n	8010e4c <_fstat_r+0x1c>
 8010e46:	682b      	ldr	r3, [r5, #0]
 8010e48:	b103      	cbz	r3, 8010e4c <_fstat_r+0x1c>
 8010e4a:	6023      	str	r3, [r4, #0]
 8010e4c:	bd38      	pop	{r3, r4, r5, pc}
 8010e4e:	bf00      	nop
 8010e50:	20008b18 	.word	0x20008b18

08010e54 <_isatty_r>:
 8010e54:	b538      	push	{r3, r4, r5, lr}
 8010e56:	4d06      	ldr	r5, [pc, #24]	; (8010e70 <_isatty_r+0x1c>)
 8010e58:	2300      	movs	r3, #0
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	602b      	str	r3, [r5, #0]
 8010e60:	f7ef feb1 	bl	8000bc6 <_isatty>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d102      	bne.n	8010e6e <_isatty_r+0x1a>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	b103      	cbz	r3, 8010e6e <_isatty_r+0x1a>
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	20008b18 	.word	0x20008b18

08010e74 <_lseek_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d07      	ldr	r5, [pc, #28]	; (8010e94 <_lseek_r+0x20>)
 8010e78:	4604      	mov	r4, r0
 8010e7a:	4608      	mov	r0, r1
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	602a      	str	r2, [r5, #0]
 8010e82:	461a      	mov	r2, r3
 8010e84:	f7ef feaa 	bl	8000bdc <_lseek>
 8010e88:	1c43      	adds	r3, r0, #1
 8010e8a:	d102      	bne.n	8010e92 <_lseek_r+0x1e>
 8010e8c:	682b      	ldr	r3, [r5, #0]
 8010e8e:	b103      	cbz	r3, 8010e92 <_lseek_r+0x1e>
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	bd38      	pop	{r3, r4, r5, pc}
 8010e94:	20008b18 	.word	0x20008b18

08010e98 <__malloc_lock>:
 8010e98:	4801      	ldr	r0, [pc, #4]	; (8010ea0 <__malloc_lock+0x8>)
 8010e9a:	f7ff b969 	b.w	8010170 <__retarget_lock_acquire_recursive>
 8010e9e:	bf00      	nop
 8010ea0:	20008b1c 	.word	0x20008b1c

08010ea4 <__malloc_unlock>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	; (8010eac <__malloc_unlock+0x8>)
 8010ea6:	f7ff b964 	b.w	8010172 <__retarget_lock_release_recursive>
 8010eaa:	bf00      	nop
 8010eac:	20008b1c 	.word	0x20008b1c

08010eb0 <_realloc_r>:
 8010eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb4:	4680      	mov	r8, r0
 8010eb6:	4614      	mov	r4, r2
 8010eb8:	460e      	mov	r6, r1
 8010eba:	b921      	cbnz	r1, 8010ec6 <_realloc_r+0x16>
 8010ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	f7ff ba31 	b.w	8010328 <_malloc_r>
 8010ec6:	b92a      	cbnz	r2, 8010ed4 <_realloc_r+0x24>
 8010ec8:	f7ff f9c2 	bl	8010250 <_free_r>
 8010ecc:	4625      	mov	r5, r4
 8010ece:	4628      	mov	r0, r5
 8010ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed4:	f000 f872 	bl	8010fbc <_malloc_usable_size_r>
 8010ed8:	4284      	cmp	r4, r0
 8010eda:	4607      	mov	r7, r0
 8010edc:	d802      	bhi.n	8010ee4 <_realloc_r+0x34>
 8010ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ee2:	d812      	bhi.n	8010f0a <_realloc_r+0x5a>
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	f7ff fa1e 	bl	8010328 <_malloc_r>
 8010eec:	4605      	mov	r5, r0
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d0ed      	beq.n	8010ece <_realloc_r+0x1e>
 8010ef2:	42bc      	cmp	r4, r7
 8010ef4:	4622      	mov	r2, r4
 8010ef6:	4631      	mov	r1, r6
 8010ef8:	bf28      	it	cs
 8010efa:	463a      	movcs	r2, r7
 8010efc:	f7fe fd22 	bl	800f944 <memcpy>
 8010f00:	4631      	mov	r1, r6
 8010f02:	4640      	mov	r0, r8
 8010f04:	f7ff f9a4 	bl	8010250 <_free_r>
 8010f08:	e7e1      	b.n	8010ece <_realloc_r+0x1e>
 8010f0a:	4635      	mov	r5, r6
 8010f0c:	e7df      	b.n	8010ece <_realloc_r+0x1e>
	...

08010f10 <_read_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d07      	ldr	r5, [pc, #28]	; (8010f30 <_read_r+0x20>)
 8010f14:	4604      	mov	r4, r0
 8010f16:	4608      	mov	r0, r1
 8010f18:	4611      	mov	r1, r2
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	602a      	str	r2, [r5, #0]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	f7ef fdfc 	bl	8000b1c <_read>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d102      	bne.n	8010f2e <_read_r+0x1e>
 8010f28:	682b      	ldr	r3, [r5, #0]
 8010f2a:	b103      	cbz	r3, 8010f2e <_read_r+0x1e>
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	20008b18 	.word	0x20008b18

08010f34 <_raise_r>:
 8010f34:	291f      	cmp	r1, #31
 8010f36:	b538      	push	{r3, r4, r5, lr}
 8010f38:	4604      	mov	r4, r0
 8010f3a:	460d      	mov	r5, r1
 8010f3c:	d904      	bls.n	8010f48 <_raise_r+0x14>
 8010f3e:	2316      	movs	r3, #22
 8010f40:	6003      	str	r3, [r0, #0]
 8010f42:	f04f 30ff 	mov.w	r0, #4294967295
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f4a:	b112      	cbz	r2, 8010f52 <_raise_r+0x1e>
 8010f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f50:	b94b      	cbnz	r3, 8010f66 <_raise_r+0x32>
 8010f52:	4620      	mov	r0, r4
 8010f54:	f000 f830 	bl	8010fb8 <_getpid_r>
 8010f58:	462a      	mov	r2, r5
 8010f5a:	4601      	mov	r1, r0
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f62:	f000 b817 	b.w	8010f94 <_kill_r>
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d00a      	beq.n	8010f80 <_raise_r+0x4c>
 8010f6a:	1c59      	adds	r1, r3, #1
 8010f6c:	d103      	bne.n	8010f76 <_raise_r+0x42>
 8010f6e:	2316      	movs	r3, #22
 8010f70:	6003      	str	r3, [r0, #0]
 8010f72:	2001      	movs	r0, #1
 8010f74:	e7e7      	b.n	8010f46 <_raise_r+0x12>
 8010f76:	2400      	movs	r4, #0
 8010f78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	4798      	blx	r3
 8010f80:	2000      	movs	r0, #0
 8010f82:	e7e0      	b.n	8010f46 <_raise_r+0x12>

08010f84 <raise>:
 8010f84:	4b02      	ldr	r3, [pc, #8]	; (8010f90 <raise+0xc>)
 8010f86:	4601      	mov	r1, r0
 8010f88:	6818      	ldr	r0, [r3, #0]
 8010f8a:	f7ff bfd3 	b.w	8010f34 <_raise_r>
 8010f8e:	bf00      	nop
 8010f90:	20000014 	.word	0x20000014

08010f94 <_kill_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d07      	ldr	r5, [pc, #28]	; (8010fb4 <_kill_r+0x20>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	602b      	str	r3, [r5, #0]
 8010fa2:	f7ef fd9f 	bl	8000ae4 <_kill>
 8010fa6:	1c43      	adds	r3, r0, #1
 8010fa8:	d102      	bne.n	8010fb0 <_kill_r+0x1c>
 8010faa:	682b      	ldr	r3, [r5, #0]
 8010fac:	b103      	cbz	r3, 8010fb0 <_kill_r+0x1c>
 8010fae:	6023      	str	r3, [r4, #0]
 8010fb0:	bd38      	pop	{r3, r4, r5, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20008b18 	.word	0x20008b18

08010fb8 <_getpid_r>:
 8010fb8:	f7ef bd8b 	b.w	8000ad2 <_getpid>

08010fbc <_malloc_usable_size_r>:
 8010fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fc0:	1f18      	subs	r0, r3, #4
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	bfbc      	itt	lt
 8010fc6:	580b      	ldrlt	r3, [r1, r0]
 8010fc8:	18c0      	addlt	r0, r0, r3
 8010fca:	4770      	bx	lr

08010fcc <_init>:
 8010fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fce:	bf00      	nop
 8010fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fd2:	bc08      	pop	{r3}
 8010fd4:	469e      	mov	lr, r3
 8010fd6:	4770      	bx	lr

08010fd8 <_fini>:
 8010fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fda:	bf00      	nop
 8010fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fde:	bc08      	pop	{r3}
 8010fe0:	469e      	mov	lr, r3
 8010fe2:	4770      	bx	lr
