
002_STM32F746_UDP_Raw_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  0800f570  0800f570  0001f570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121e0  080121e0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080121e0  080121e0  000221e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121e8  080121e8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121e8  080121e8  000221e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121ec  080121ec  000221ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080121f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000596c  20000078  08012268  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059e4  08012268  000359e4  2**0
                  ALLOC
 11 .lwip_sec     0000d0b8  20005fe8  08012268  00035fe8  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018308  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae1  00000000  00000000  000483b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  0004ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  0004df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000309b2  00000000  00000000  0004eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb88  00000000  00000000  0007f8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faa5a  00000000  00000000  0009f432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00199e8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ab8  00000000  00000000  00199edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f558 	.word	0x0800f558

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f558 	.word	0x0800f558

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <udpServer_init>:
#include "netif.h"

extern struct netif gnetif;

void udpServer_init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 80005ba:	f00b f9c7 	bl	800b94c <udp_new>
 80005be:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 29, 123);
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <udpServer_init+0x44>)
 80005c2:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2207      	movs	r2, #7
 80005c8:	4619      	mov	r1, r3
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f00b f83e 	bl	800b64c <udp_bind>
 80005d0:	4603      	mov	r3, r0
 80005d2:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 80005d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 80005dc:	2200      	movs	r2, #0
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <udpServer_init+0x48>)
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f00b f951 	bl	800b888 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 80005e6:	e002      	b.n	80005ee <udpServer_init+0x3a>
	   udp_remove(upcb);
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f00b f96d 	bl	800b8c8 <udp_remove>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	7b1da8c0 	.word	0x7b1da8c0
 80005fc:	08000601 	.word	0x08000601

08000600 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b0f1      	sub	sp, #452	; 0x1c4
 8000604:	af04      	add	r7, sp, #16
 8000606:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 800060a:	f5a4 74d2 	sub.w	r4, r4, #420	; 0x1a4
 800060e:	6020      	str	r0, [r4, #0]
 8000610:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8000614:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
 8000618:	6001      	str	r1, [r0, #0]
 800061a:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800061e:	f5a1 71d6 	sub.w	r1, r1, #428	; 0x1ac
 8000622:	600a      	str	r2, [r1, #0]
 8000624:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000628:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 800062c:	6013      	str	r3, [r2, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = (char *) ipaddr_ntoa(addr);
 800062e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000632:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	f00c fd82 	bl	800d140 <ip4addr_ntoa>
 800063c:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
	//	if(port)
	//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	char buf[200];
	char Rxbuf[200];
	int len = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	if(p->len < 200)
 8000646:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800064a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	895b      	ldrh	r3, [r3, #10]
 8000652:	2bc7      	cmp	r3, #199	; 0xc7
 8000654:	d85c      	bhi.n	8000710 <udp_receive_callback+0x110>
		len = sprintf (buf, "Payload = %s\n"
							"IP Address = %s\n"
							"Port Used = %d\n"
							"Payload Length = %d\n"
							"Total Length = %d\n",
							(char*)p->payload,
 8000656:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800065a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6859      	ldr	r1, [r3, #4]
		len = sprintf (buf, "Payload = %s\n"
 8000662:	f8b7 31c0 	ldrh.w	r3, [r7, #448]	; 0x1c0
							remoteIP,
							port,
							p->len,
 8000666:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800066a:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	8952      	ldrh	r2, [r2, #10]
		len = sprintf (buf, "Payload = %s\n"
 8000672:	4614      	mov	r4, r2
							p->tot_len);
 8000674:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8000678:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	8912      	ldrh	r2, [r2, #8]
		len = sprintf (buf, "Payload = %s\n"
 8000680:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	9401      	str	r4, [sp, #4]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800068e:	460a      	mov	r2, r1
 8000690:	4945      	ldr	r1, [pc, #276]	; (80007a8 <udp_receive_callback+0x1a8>)
 8000692:	f00d fdb3 	bl	800e1fc <siprintf>
 8000696:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac

		// This is just how data can be retrieved
		for(int i = 0; i < p->len; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80006a0:	e017      	b.n	80006d2 <udp_receive_callback+0xd2>
			Rxbuf[i] = *((char*) (p->payload + i));
 80006a2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006ba:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80006be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006c2:	4413      	add	r3, r2
 80006c4:	460a      	mov	r2, r1
 80006c6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < p->len; i++)
 80006c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006cc:	3301      	adds	r3, #1
 80006ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80006d2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	895b      	ldrh	r3, [r3, #10]
 80006de:	461a      	mov	r2, r3
 80006e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006e4:	4293      	cmp	r3, r2
 80006e6:	dbdc      	blt.n	80006a2 <udp_receive_callback+0xa2>

		if((Rxbuf[0] == 0xAA) && (Rxbuf[1] == 0x55))
 80006e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006ec:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2baa      	cmp	r3, #170	; 0xaa
 80006f4:	d10f      	bne.n	8000716 <udp_receive_callback+0x116>
 80006f6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006fa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b55      	cmp	r3, #85	; 0x55
 8000702:	d108      	bne.n	8000716 <udp_receive_callback+0x116>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4828      	ldr	r0, [pc, #160]	; (80007ac <udp_receive_callback+0x1ac>)
 800070a:	f002 f8d9 	bl	80028c0 <HAL_GPIO_WritePin>
 800070e:	e002      	b.n	8000716 <udp_receive_callback+0x116>
	}
	else
		len = 200;
 8000710:	23c8      	movs	r3, #200	; 0xc8
 8000712:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000716:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800071a:	b29b      	uxth	r3, r3
 800071c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000720:	4619      	mov	r1, r3
 8000722:	2036      	movs	r0, #54	; 0x36
 8000724:	f004 fb2c 	bl	8004d80 <pbuf_alloc>
 8000728:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 800072c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000730:	b29a      	uxth	r2, r3
 8000732:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000736:	4619      	mov	r1, r3
 8000738:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800073c:	f005 f870 	bl	8005820 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000740:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	; 0x1c0
 8000744:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000748:	f5a3 71d8 	sub.w	r1, r3, #432	; 0x1b0
 800074c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000750:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000754:	6809      	ldr	r1, [r1, #0]
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f00b f800 	bl	800b75c <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 800075c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000760:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000764:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f00a fd85 	bl	800b278 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 800076e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000772:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	f00b f85e 	bl	800b838 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 800077c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8000780:	f004 fde2 	bl	8005348 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000784:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000788:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	f004 fddb 	bl	8005348 <pbuf_free>

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <udp_receive_callback+0x1ac>)
 8000798:	f002 f892 	bl	80028c0 <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	bf00      	nop
 80007a8:	0800f570 	.word	0x0800f570
 80007ac:	40020400 	.word	0x40020400

080007b0 <ethernetif_notify_conn_changed>:

void ethernetif_notify_conn_changed(struct netif *netif)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if(netif_is_link_up(&gnetif))
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ethernetif_notify_conn_changed+0x48>)
 80007ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d009      	beq.n	80007de <ethernetif_notify_conn_changed+0x2e>
	{
		netif_set_up(&gnetif);
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <ethernetif_notify_conn_changed+0x48>)
 80007cc:	f004 f93a 	bl	8004a44 <netif_set_up>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <ethernetif_notify_conn_changed+0x4c>)
 80007d8:	f002 f872 	bl	80028c0 <HAL_GPIO_WritePin>
	else
	{
		netif_set_down(&gnetif);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 80007dc:	e008      	b.n	80007f0 <ethernetif_notify_conn_changed+0x40>
		netif_set_down(&gnetif);
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <ethernetif_notify_conn_changed+0x48>)
 80007e0:	f004 f99c 	bl	8004b1c <netif_set_down>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ethernetif_notify_conn_changed+0x4c>)
 80007ec:	f002 f868 	bl	80028c0 <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000a0 	.word	0x200000a0
 80007fc:	40020400 	.word	0x40020400

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000804:	f000 f96c 	bl	8000ae0 <MPU_Config>


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fb24 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f828 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f892 	bl	8000938 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000814:	f002 fd7a 	bl	800330c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init ();
 8000818:	f7ff fecc 	bl	80005b4 <udpServer_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input((struct netif *)&gnetif);
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <main+0x54>)
 800081e:	f003 f965 	bl	8003aec <ethernetif_input>

	  sys_check_timeouts();
 8000822:	f00a fb25 	bl	800ae70 <sys_check_timeouts>

	  // UDP Server does not need link to be setup as it is always listening
	  // Whenever valid packet is received it answers otherwise not
	  // This function is kept just to check link status from client, it glows red LED when is link down
	  ethernetif_set_link((struct netif *) &gnetif);
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <main+0x54>)
 8000828:	f003 f9b6 	bl	8003b98 <ethernetif_set_link>

	  if (HAL_GetTick() - LEDBlinkTimer >= 1000)
 800082c:	f000 fb6c 	bl	8000f08 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <main+0x58>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800083c:	d3ee      	bcc.n	800081c <main+0x1c>
	  {
	      LEDBlinkTimer = HAL_GetTick();
 800083e:	f000 fb63 	bl	8000f08 <HAL_GetTick>
 8000842:	4603      	mov	r3, r0
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <main+0x58>)
 8000846:	6013      	str	r3, [r2, #0]
	      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000848:	2101      	movs	r1, #1
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <main+0x5c>)
 800084c:	f002 f851 	bl	80028f2 <HAL_GPIO_TogglePin>
	  ethernetif_input((struct netif *)&gnetif);
 8000850:	e7e4      	b.n	800081c <main+0x1c>
 8000852:	bf00      	nop
 8000854:	200000a0 	.word	0x200000a0
 8000858:	20000094 	.word	0x20000094
 800085c:	40020400 	.word	0x40020400

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00d fc66 	bl	800e140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a29      	ldr	r2, [pc, #164]	; (8000930 <SystemClock_Config+0xd0>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xd0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xd4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a24      	ldr	r2, [pc, #144]	; (8000934 <SystemClock_Config+0xd4>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80008cc:	23c8      	movs	r3, #200	; 0xc8
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 f873 	bl	80029c8 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f928 	bl	8000b3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ec:	f002 f81c 	bl	8002928 <HAL_PWREx_EnableOverDrive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f6:	f000 f921 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2106      	movs	r1, #6
 8000918:	4618      	mov	r0, r3
 800091a:	f002 faf9 	bl	8002f10 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000924:	f000 f90a 	bl	8000b3c <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b5e      	ldr	r3, [pc, #376]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a5d      	ldr	r2, [pc, #372]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x190>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b58      	ldr	r3, [pc, #352]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a57      	ldr	r2, [pc, #348]	; (8000ac8 <MX_GPIO_Init+0x190>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a51      	ldr	r2, [pc, #324]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <MX_GPIO_Init+0x190>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <MX_GPIO_Init+0x190>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <MX_GPIO_Init+0x190>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b49      	ldr	r3, [pc, #292]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a3f      	ldr	r2, [pc, #252]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <MX_GPIO_Init+0x190>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <MX_GPIO_Init+0x194>)
 80009e6:	f001 ff6b 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x198>)
 80009f0:	f001 ff66 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4832      	ldr	r0, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x19c>)
 8000a0c:	f001 fdac 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4828      	ldr	r0, [pc, #160]	; (8000acc <MX_GPIO_Init+0x194>)
 8000a2a:	f001 fd9d 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a40:	2307      	movs	r3, #7
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f001 fd8c 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a50:	2340      	movs	r3, #64	; 0x40
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <MX_GPIO_Init+0x198>)
 8000a68:	f001 fd7e 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <MX_GPIO_Init+0x198>)
 8000a80:	f001 fd72 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a96:	230a      	movs	r3, #10
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x1a4>)
 8000aa2:	f001 fd61 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_GPIO_Init+0x1a4>)
 8000abc:	f001 fd54 	bl	8002568 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020000 	.word	0x40020000

08000ae0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000af2:	f000 fb4b 	bl	800118c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MPU_Config+0x58>)
 8000b00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b02:	230d      	movs	r3, #13
 8000b04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b22:	463b      	mov	r3, r7
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fb69 	bl	80011fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b2a:	2004      	movs	r0, #4
 8000b2c:	f000 fb46 	bl	80011bc <HAL_MPU_Enable>

}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20010000 	.word	0x20010000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f980 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <ETH_IRQHandler+0x10>)
 8000bea:	f000 ff25 	bl	8001a38 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000ec 	.word	0x200000ec

08000bf8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c04:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d013      	beq.n	8000c38 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c14:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c18:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00b      	beq.n	8000c38 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c20:	e000      	b.n	8000c24 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c22:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f9      	beq.n	8000c22 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <_kill+0x20>)
 8000c64:	2216      	movs	r2, #22
 8000c66:	601a      	str	r2, [r3, #0]
	return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	200059d4 	.word	0x200059d4

08000c7c <_exit>:

void _exit (int status)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffe5 	bl	8000c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c8e:	e7fe      	b.n	8000c8e <_exit+0x12>

08000c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
		//*ptr++ = ITM_ReceiveChar();
	}

return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff87 	bl	8000bf8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
	}
	return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d205      	bcs.n	8000da8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <_sbrk+0x6c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20050000 	.word	0x20050000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000098 	.word	0x20000098
 8000dd4:	200059e8 	.word	0x200059e8
 8000dd8:	200059d4 	.word	0x200059d4

08000ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f00d f92b 	bl	800e088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fce5 	bl	8000800 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e44:	080121f0 	.word	0x080121f0
  ldr r2, =_sbss
 8000e48:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e4c:	200059e4 	.word	0x200059e4

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x28>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe6a 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	2000009c 	.word	0x2000009c

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2000009c 	.word	0x2000009c

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	05fa0000 	.word	0x05fa0000

08000fb0 <__NVIC_GetPriorityGrouping>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001190:	f3bf 8f5f 	dmb	sy
}
 8001194:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_MPU_Disable+0x28>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_MPU_Disable+0x28>)
 800119c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_MPU_Disable+0x2c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	e000ed90 	.word	0xe000ed90

080011bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_MPU_Enable+0x38>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_MPU_Enable+0x3c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_MPU_Enable+0x3c>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
}
 80011de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e0:	f3bf 8f6f 	isb	sy
}
 80011e4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed90 	.word	0xe000ed90
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	785a      	ldrb	r2, [r3, #1]
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_MPU_ConfigRegion+0x84>)
 800120a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d029      	beq.n	8001268 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001214:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_MPU_ConfigRegion+0x84>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7b1b      	ldrb	r3, [r3, #12]
 8001220:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7adb      	ldrb	r3, [r3, #11]
 8001226:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001228:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7a9b      	ldrb	r3, [r3, #10]
 800122e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001230:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b5b      	ldrb	r3, [r3, #13]
 8001236:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001238:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7b9b      	ldrb	r3, [r3, #14]
 800123e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001240:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7bdb      	ldrb	r3, [r3, #15]
 8001246:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001248:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7a5b      	ldrb	r3, [r3, #9]
 800124e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001250:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7a1b      	ldrb	r3, [r3, #8]
 8001256:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001258:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001262:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001264:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001266:	e005      	b.n	8001274 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_MPU_ConfigRegion+0x84>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_MPU_ConfigRegion+0x84>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed90 	.word	0xe000ed90

08001284 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001294:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_ETH_Init+0x294>)
 8001296:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e180      	b.n	80015ac <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 f956 	bl	8003570 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b95      	ldr	r3, [pc, #596]	; (800151c <HAL_ETH_Init+0x298>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a94      	ldr	r2, [pc, #592]	; (800151c <HAL_ETH_Init+0x298>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_ETH_Init+0x298>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012dc:	4b90      	ldr	r3, [pc, #576]	; (8001520 <HAL_ETH_Init+0x29c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a8f      	ldr	r2, [pc, #572]	; (8001520 <HAL_ETH_Init+0x29c>)
 80012e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012e8:	4b8d      	ldr	r3, [pc, #564]	; (8001520 <HAL_ETH_Init+0x29c>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	498b      	ldr	r1, [pc, #556]	; (8001520 <HAL_ETH_Init+0x29c>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800130e:	f7ff fdfb 	bl	8000f08 <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001314:	e011      	b.n	800133a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001316:	f7ff fdf7 	bl	8000f08 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001324:	d909      	bls.n	800133a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e138      	b.n	80015ac <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e4      	bne.n	8001316 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f023 031c 	bic.w	r3, r3, #28
 800135a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800135c:	f001 ffca 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8001360:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <HAL_ETH_Init+0x2a0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d908      	bls.n	800137c <HAL_ETH_Init+0xf8>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4a6e      	ldr	r2, [pc, #440]	; (8001528 <HAL_ETH_Init+0x2a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d804      	bhi.n	800137c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e027      	b.n	80013cc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4a6a      	ldr	r2, [pc, #424]	; (8001528 <HAL_ETH_Init+0x2a4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d908      	bls.n	8001396 <HAL_ETH_Init+0x112>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	4a64      	ldr	r2, [pc, #400]	; (8001518 <HAL_ETH_Init+0x294>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d204      	bcs.n	8001396 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f043 030c 	orr.w	r3, r3, #12
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e01a      	b.n	80013cc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4a5f      	ldr	r2, [pc, #380]	; (8001518 <HAL_ETH_Init+0x294>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d303      	bcc.n	80013a6 <HAL_ETH_Init+0x122>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4a62      	ldr	r2, [pc, #392]	; (800152c <HAL_ETH_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d911      	bls.n	80013ca <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_ETH_Init+0x2a8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d908      	bls.n	80013c0 <HAL_ETH_Init+0x13c>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4a5f      	ldr	r2, [pc, #380]	; (8001530 <HAL_ETH_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d804      	bhi.n	80013c0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e005      	b.n	80013cc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	e000      	b.n	80013cc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fc16 	bl	8001c0c <HAL_ETH_WritePHYRegister>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fdcb 	bl	8001f88 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0d6      	b.n	80015ac <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013fe:	20ff      	movs	r0, #255	; 0xff
 8001400:	f7ff fd8e 	bl	8000f20 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a4 	beq.w	8001556 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff fd7b 	bl	8000f08 <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	461a      	mov	r2, r3
 800141a:	2101      	movs	r1, #1
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fb8d 	bl	8001b3c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001422:	f7ff fd71 	bl	8000f08 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d90f      	bls.n	8001454 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fda4 	bl	8001f88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0ab      	b.n	80015ac <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0da      	beq.n	8001414 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800145e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fbd1 	bl	8001c0c <HAL_ETH_WritePHYRegister>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001474:	6939      	ldr	r1, [r7, #16]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fd86 	bl	8001f88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001484:	2301      	movs	r3, #1
 8001486:	e091      	b.n	80015ac <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff fd3e 	bl	8000f08 <HAL_GetTick>
 800148c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	461a      	mov	r2, r3
 8001494:	2101      	movs	r1, #1
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fb50 	bl	8001b3c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800149c:	f7ff fd34 	bl	8000f08 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d90f      	bls.n	80014ce <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fd67 	bl	8001f88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e06e      	b.n	80015ac <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0da      	beq.n	800148e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	461a      	mov	r2, r3
 80014de:	2110      	movs	r1, #16
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fb2b 	bl	8001b3c <HAL_ETH_ReadPHYRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014f0:	6939      	ldr	r1, [r7, #16]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fd48 	bl	8001f88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001500:	2301      	movs	r3, #1
 8001502:	e053      	b.n	80015ac <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d012      	beq.n	8001534 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e010      	b.n	800153a <HAL_ETH_Init+0x2b6>
 8001518:	03938700 	.word	0x03938700
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	01312cff 	.word	0x01312cff
 8001528:	02160ebf 	.word	0x02160ebf
 800152c:	05f5e0ff 	.word	0x05f5e0ff
 8001530:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	e026      	b.n	800159a <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e021      	b.n	800159a <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001566:	4313      	orrs	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fb4c 	bl	8001c0c <HAL_ETH_WritePHYRegister>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800157e:	6939      	ldr	r1, [r7, #16]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fd01 	bl	8001f88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001592:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001596:	f7ff fcc3 	bl	8000f20 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800159a:	6939      	ldr	r1, [r7, #16]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fcf3 	bl	8001f88 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ETH_DMATxDescListInit+0x20>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e051      	b.n	8001678 <HAL_ETH_DMATxDescListInit+0xc4>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e030      	b.n	8001652 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001600:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d208      	bcs.n	8001646 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	461a      	mov	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	e002      	b.n	800164c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3ca      	bcc.n	80015f0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001664:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ETH_DMARxDescListInit+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e055      	b.n	8001750 <HAL_ETH_DMARxDescListInit+0xcc>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e034      	b.n	800172a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016d8:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	015b      	lsls	r3, r3, #5
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	461a      	mov	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	e002      	b.n	8001724 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3c6      	bcc.n	80016c0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800173c:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ETH_TransmitFrame+0x24>
 800177c:	2302      	movs	r3, #2
 800177e:	e0cc      	b.n	800191a <HAL_ETH_TransmitFrame+0x1be>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0b7      	b.n	800191a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da09      	bge.n	80017c8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2212      	movs	r2, #18
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0a8      	b.n	800191a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d915      	bls.n	80017fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_ETH_TransmitFrame+0x1cc>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a9b      	lsrs	r3, r3, #10
 80017dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_ETH_TransmitFrame+0x1cc>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	0a9b      	lsrs	r3, r3, #10
 80017e8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e001      	b.n	8001802 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d11c      	bne.n	8001842 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001816:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001822:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001832:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001840:	e04b      	b.n	80018da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e044      	b.n	80018d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001856:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800186c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001876:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3b01      	subs	r3, #1
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	429a      	cmp	r2, r3
 8001880:	d116      	bne.n	80018b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001890:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_ETH_TransmitFrame+0x1d0>)
 8001896:	fb03 f202 	mul.w	r2, r3, r2
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018ae:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3b6      	bcc.n	8001848 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f4:	461a      	mov	r2, r3
 80018f6:	2304      	movs	r3, #4
 80018f8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	ac02b00b 	.word	0xac02b00b
 800192c:	fffffa0c 	.word	0xfffffa0c

08001930 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ETH_GetReceivedFrame+0x1a>
 8001946:	2302      	movs	r3, #2
 8001948:	e070      	b.n	8001a2c <HAL_ETH_GetReceivedFrame+0xfc>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db5a      	blt.n	8001a1a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d030      	beq.n	80019d4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	2b01      	cmp	r3, #1
 8001982:	d103      	bne.n	800198c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019a0:	3b04      	subs	r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e02b      	b.n	8001a2c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
 8001a02:	e00a      	b.n	8001a1a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d112      	bne.n	8001a78 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f85e 	bl	8001b14 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	461a      	mov	r2, r3
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a76:	e01a      	b.n	8001aae <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d111      	bne.n	8001aae <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f838 	bl	8001b00 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001abc:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d112      	bne.n	8001af8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f828 	bl	8001b28 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	460b      	mov	r3, r1
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b82      	cmp	r3, #130	; 0x82
 8001b5c:	d101      	bne.n	8001b62 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e050      	b.n	8001c04 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2282      	movs	r2, #130	; 0x82
 8001b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 031c 	and.w	r3, r3, #28
 8001b78:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8a1b      	ldrh	r3, [r3, #16]
 8001b7e:	02db      	lsls	r3, r3, #11
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b88:	897b      	ldrh	r3, [r7, #10]
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bae:	f7ff f9ab 	bl	8000f08 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bb4:	e015      	b.n	8001be2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bb6:	f7ff f9a7 	bl	8000f08 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d309      	bcc.n	8001bda <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e014      	b.n	8001c04 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e4      	bne.n	8001bb6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	460b      	mov	r3, r1
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b42      	cmp	r3, #66	; 0x42
 8001c2c:	d101      	bne.n	8001c32 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e04e      	b.n	8001cd0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2242      	movs	r2, #66	; 0x42
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 031c 	and.w	r3, r3, #28
 8001c48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8a1b      	ldrh	r3, [r3, #16]
 8001c4e:	02db      	lsls	r3, r3, #11
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	019b      	lsls	r3, r3, #6
 8001c5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff f93e 	bl	8000f08 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c8e:	e015      	b.n	8001cbc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c90:	f7ff f93a 	bl	8000f08 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9e:	d309      	bcc.n	8001cb4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e00d      	b.n	8001cd0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1e4      	bne.n	8001c90 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_ETH_Start+0x16>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e01f      	b.n	8001d2e <HAL_ETH_Start+0x56>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fb40 	bl	8002384 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fb77 	bl	80023f8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fc06 	bl	800251c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fbab 	bl	800246c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fbd4 	bl	80024c4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ETH_Stop+0x16>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e01f      	b.n	8001d8c <HAL_ETH_Stop+0x56>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fb9b 	bl	8002498 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fbc4 	bl	80024f0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb62 	bl	8002432 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fbd4 	bl	800251c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb22 	bl	80023be <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_ETH_ConfigMAC+0x1c>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0e4      	b.n	8001f7a <HAL_ETH_ConfigMAC+0x1e6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80b1 	beq.w	8001f2a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_ETH_ConfigMAC+0x1f0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001de0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001de6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001dec:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001df2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001df8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001dfe:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e04:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e0a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e10:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e16:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e1c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e22:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff f870 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e50:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e56:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e5c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e62:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e68:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e6e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e7a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e7c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff f84a 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e9c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ec4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001eca:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ed0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ed6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001edc:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff f813 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff f800 	bl	8000f20 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	61da      	str	r2, [r3, #28]
 8001f28:	e01e      	b.n	8001f68 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f38:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe ffe0 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	ff20810f 	.word	0xff20810f

08001f88 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0b0      	sub	sp, #192	; 0xc0
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd4:	e001      	b.n	8001fda <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800205c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002060:	4ba9      	ldr	r3, [pc, #676]	; (8002308 <ETH_MACDMAConfig+0x380>)
 8002062:	4013      	ands	r3, r2
 8002064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002068:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800206c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800206e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002070:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002074:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800207a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800207c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800207e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002082:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002088:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800208a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800208c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800208e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002090:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002094:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002098:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800209a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800209c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800209e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7fe ff2f 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80020ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020d0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80020d4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80020d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80020da:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80020e0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80020e6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020f8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020fa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe ff0a 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002114:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800211e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002128:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002134:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002138:	f64f 7341 	movw	r3, #65345	; 0xff41
 800213c:	4013      	ands	r3, r2
 800213e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002142:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002146:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800214c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800214e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002152:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002158:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800215a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800215e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002164:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002166:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002178:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002184:	2001      	movs	r0, #1
 8002186:	f7fe fecb 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002192:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002194:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002198:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe feb6 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80021cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021e2:	2304      	movs	r3, #4
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002202:	2300      	movs	r3, #0
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002206:	2300      	movs	r3, #0
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <ETH_MACDMAConfig+0x384>)
 800221e:	4013      	ands	r3, r2
 8002220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002224:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002226:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002228:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800222a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800222c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800222e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002230:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002232:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002234:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002236:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002238:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800223a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800223c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002240:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002244:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002258:	461a      	mov	r2, r3
 800225a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800225e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800226e:	2001      	movs	r0, #1
 8002270:	f7fe fe56 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227c:	461a      	mov	r2, r3
 800227e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002282:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002288:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800228c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002290:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002294:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002298:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800229a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800229c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800229e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022ac:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe fe2f 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ca:	461a      	mov	r2, r3
 80022cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022d0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10b      	bne.n	80022f2 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <ETH_MACDMAConfig+0x388>)
 80022ea:	430b      	orrs	r3, r1
 80022ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022f0:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	461a      	mov	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f80a 	bl	8002314 <ETH_MACAddressConfig>
}
 8002300:	bf00      	nop
 8002302:	37c0      	adds	r7, #192	; 0xc0
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ff20810f 	.word	0xff20810f
 800230c:	f8de3f23 	.word	0xf8de3f23
 8002310:	00010040 	.word	0x00010040

08002314 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3305      	adds	r3, #5
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	3204      	adds	r2, #4
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <ETH_MACAddressConfig+0x68>)
 8002336:	4413      	add	r3, r2
 8002338:	461a      	mov	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3303      	adds	r3, #3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3302      	adds	r3, #2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3301      	adds	r3, #1
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	4313      	orrs	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <ETH_MACAddressConfig+0x6c>)
 8002366:	4413      	add	r3, r2
 8002368:	461a      	mov	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40028040 	.word	0x40028040
 8002380:	40028044 	.word	0x40028044

08002384 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0208 	orr.w	r2, r2, #8
 800239e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fe fdb9 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0208 	bic.w	r2, r2, #8
 80023d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7fe fd9c 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0204 	orr.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241c:	2001      	movs	r0, #1
 800241e:	f7fe fd7f 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0204 	bic.w	r2, r2, #4
 800244c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fd62 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800248a:	6193      	str	r3, [r2, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b6:	6193      	str	r3, [r2, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024e2:	6193      	str	r3, [r2, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f023 0302 	bic.w	r3, r3, #2
 800250a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250e:	6193      	str	r3, [r2, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800253e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe fce7 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800255c:	6193      	str	r3, [r2, #24]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e175      	b.n	8002874 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f040 8164 	bne.w	800286e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <HAL_GPIO_Init+0x56>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d130      	bne.n	8002620 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d017      	beq.n	800265c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d123      	bne.n	80026b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	69b9      	ldr	r1, [r7, #24]
 80026ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80be 	beq.w	800286e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_GPIO_Init+0x324>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_GPIO_Init+0x324>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_GPIO_Init+0x324>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800270a:	4a61      	ldr	r2, [pc, #388]	; (8002890 <HAL_GPIO_Init+0x328>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_GPIO_Init+0x32c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d037      	beq.n	80027a6 <HAL_GPIO_Init+0x23e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_GPIO_Init+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d031      	beq.n	80027a2 <HAL_GPIO_Init+0x23a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a56      	ldr	r2, [pc, #344]	; (800289c <HAL_GPIO_Init+0x334>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <HAL_GPIO_Init+0x236>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_GPIO_Init+0x338>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x232>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a54      	ldr	r2, [pc, #336]	; (80028a4 <HAL_GPIO_Init+0x33c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_GPIO_Init+0x340>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x22a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_GPIO_Init+0x344>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_GPIO_Init+0x348>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_GPIO_Init+0x34c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4f      	ldr	r2, [pc, #316]	; (80028b8 <HAL_GPIO_Init+0x350>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x21a>
 800277e:	2309      	movs	r3, #9
 8002780:	e012      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002782:	230a      	movs	r3, #10
 8002784:	e010      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002786:	2308      	movs	r3, #8
 8002788:	e00e      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278a:	2307      	movs	r3, #7
 800278c:	e00c      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278e:	2306      	movs	r3, #6
 8002790:	e00a      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002792:	2305      	movs	r3, #5
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002796:	2304      	movs	r3, #4
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027b8:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_GPIO_Init+0x328>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ea:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_GPIO_Init+0x354>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_GPIO_Init+0x354>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_GPIO_Init+0x354>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f ae86 	bls.w	8002588 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021800 	.word	0x40021800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40022400 	.word	0x40022400
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002904:	887a      	ldrh	r2, [r7, #2]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	041a      	lsls	r2, r3, #16
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43d9      	mvns	r1, r3
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	400b      	ands	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002956:	f7fe fad7 	bl	8000f08 <HAL_GetTick>
 800295a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800295c:	e009      	b.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800295e:	f7fe fad3 	bl	8000f08 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296c:	d901      	bls.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e022      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d1ee      	bne.n	800295e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fe fabc 	bl	8000f08 <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fe fab8 	bl	8000f08 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e291      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ec:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f8:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
 8002a04:	4b90      	ldr	r3, [pc, #576]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x130>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d168      	bne.n	8002af8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e26b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x7a>
 8002a34:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a83      	ldr	r2, [pc, #524]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x9c>
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7b      	ldr	r2, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b6c      	ldr	r3, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fa2e 	bl	8000f08 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fa2a 	bl	8000f08 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e21f      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa1a 	bl	8000f08 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fa16 	bl	8000f08 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e20b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x110>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d069      	beq.n	8002bda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1df      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	493d      	ldr	r1, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e040      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe f9cc 	bl	8000f08 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe f9c8 	bl	8000f08 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1bd      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4929      	ldr	r1, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f9a8 	bl	8000f08 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f9a4 	bl	8000f08 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e199      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d038      	beq.n	8002c58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe f985 	bl	8000f08 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe f981 	bl	8000f08 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e176      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x23a>
 8002c20:	e01a      	b.n	8002c58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe f96b 	bl	8000f08 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe f967 	bl	8000f08 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d903      	bls.n	8002c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e15c      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
 8002c48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b91      	ldr	r3, [pc, #580]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ee      	bne.n	8002c36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a4 	beq.w	8002dae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a87      	ldr	r2, [pc, #540]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f92f 	bl	8000f08 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe f92b 	bl	8000f08 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e120      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x31a>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x33c>
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b67      	ldr	r3, [pc, #412]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x35e>
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a60      	ldr	r2, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5a      	ldr	r2, [pc, #360]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe f8df 	bl	8000f08 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe f8db 	bl	8000f08 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ce      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x386>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe f8c9 	bl	8000f08 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f8c5 	bl	8000f08 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a4 	beq.w	8002f00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d06b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d149      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f896 	bl	8000f08 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f892 	bl	8000f08 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f866 	bl	8000f08 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f862 	bl	8000f08 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e057      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x478>
 8002e5e:	e04f      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f84c 	bl	8000f08 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe f848 	bl	8000f08 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e03d      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4ac>
 8002e92:	e035      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fd ff80 	bl	8000f08 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fd ff7c 	bl	8000f08 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fedc 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08011fa4 	.word	0x08011fa4
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b094      	sub	sp, #80	; 0x50
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	647b      	str	r3, [r7, #68]	; 0x44
 80030f4:	2300      	movs	r3, #0
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f8:	2300      	movs	r3, #0
 80030fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003100:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 800310c:	2b08      	cmp	r3, #8
 800310e:	f200 80e1 	bhi.w	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x3a>
 800311a:	e0db      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003120:	e0db      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003126:	e0d8      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003130:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003132:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
 8003148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
 8003152:	2300      	movs	r3, #0
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
 8003156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	6139      	str	r1, [r7, #16]
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800318c:	4659      	mov	r1, fp
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4651      	mov	r1, sl
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4651      	mov	r1, sl
 800319c:	ebb2 0801 	subs.w	r8, r2, r1
 80031a0:	4659      	mov	r1, fp
 80031a2:	eb63 0901 	sbc.w	r9, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ba:	4690      	mov	r8, r2
 80031bc:	4699      	mov	r9, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb18 0303 	adds.w	r3, r8, r3
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	462b      	mov	r3, r5
 80031c8:	eb49 0303 	adc.w	r3, r9, r3
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031da:	4629      	mov	r1, r5
 80031dc:	024b      	lsls	r3, r1, #9
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e4:	4621      	mov	r1, r4
 80031e6:	024a      	lsls	r2, r1, #9
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f8:	f7fd f85a 	bl	80002b0 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003204:	e058      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	4618      	mov	r0, r3
 8003210:	4611      	mov	r1, r2
 8003212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	f04f 0000 	mov.w	r0, #0
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	0159      	lsls	r1, r3, #5
 800322e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003232:	0150      	lsls	r0, r2, #5
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4641      	mov	r1, r8
 800323a:	ebb2 0a01 	subs.w	sl, r2, r1
 800323e:	4649      	mov	r1, r9
 8003240:	eb63 0b01 	sbc.w	fp, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003258:	ebb2 040a 	subs.w	r4, r2, sl
 800325c:	eb63 050b 	sbc.w	r5, r3, fp
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	00eb      	lsls	r3, r5, #3
 800326a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326e:	00e2      	lsls	r2, r4, #3
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	4643      	mov	r3, r8
 8003276:	18e3      	adds	r3, r4, r3
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	464b      	mov	r3, r9
 800327c:	eb45 0303 	adc.w	r3, r5, r3
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328e:	4629      	mov	r1, r5
 8003290:	028b      	lsls	r3, r1, #10
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003298:	4621      	mov	r1, r4
 800329a:	028a      	lsls	r2, r1, #10
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	61fa      	str	r2, [r7, #28]
 80032a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ac:	f7fd f800 	bl	80002b0 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3750      	adds	r7, #80	; 0x50
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	007a1200 	.word	0x007a1200

080032f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_RCC_GetHCLKFreq+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003314:	22c0      	movs	r2, #192	; 0xc0
 8003316:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <MX_LWIP_Init+0x23c>)
 800331a:	22a8      	movs	r2, #168	; 0xa8
 800331c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 29;
 800331e:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003320:	221d      	movs	r2, #29
 8003322:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003326:	227b      	movs	r2, #123	; 0x7b
 8003328:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <MX_LWIP_Init+0x240>)
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003330:	4b86      	ldr	r3, [pc, #536]	; (800354c <MX_LWIP_Init+0x240>)
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <MX_LWIP_Init+0x240>)
 8003338:	22ff      	movs	r2, #255	; 0xff
 800333a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800333c:	4b83      	ldr	r3, [pc, #524]	; (800354c <MX_LWIP_Init+0x240>)
 800333e:	2200      	movs	r2, #0
 8003340:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003342:	4b83      	ldr	r3, [pc, #524]	; (8003550 <MX_LWIP_Init+0x244>)
 8003344:	22c0      	movs	r2, #192	; 0xc0
 8003346:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003348:	4b81      	ldr	r3, [pc, #516]	; (8003550 <MX_LWIP_Init+0x244>)
 800334a:	22a8      	movs	r2, #168	; 0xa8
 800334c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 29;
 800334e:	4b80      	ldr	r3, [pc, #512]	; (8003550 <MX_LWIP_Init+0x244>)
 8003350:	221d      	movs	r2, #29
 8003352:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <MX_LWIP_Init+0x244>)
 8003356:	2201      	movs	r2, #1
 8003358:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800335a:	f000 fd0b 	bl	8003d74 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800335e:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	061a      	lsls	r2, r3, #24
 8003364:	4b78      	ldr	r3, [pc, #480]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	4b76      	ldr	r3, [pc, #472]	; (8003548 <MX_LWIP_Init+0x23c>)
 800336e:	789b      	ldrb	r3, [r3, #2]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	4313      	orrs	r3, r2
 8003374:	4a74      	ldr	r2, [pc, #464]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003376:	78d2      	ldrb	r2, [r2, #3]
 8003378:	4313      	orrs	r3, r2
 800337a:	061a      	lsls	r2, r3, #24
 800337c:	4b72      	ldr	r3, [pc, #456]	; (8003548 <MX_LWIP_Init+0x23c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0619      	lsls	r1, r3, #24
 8003382:	4b71      	ldr	r3, [pc, #452]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	4319      	orrs	r1, r3
 800338a:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <MX_LWIP_Init+0x23c>)
 800338c:	789b      	ldrb	r3, [r3, #2]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	430b      	orrs	r3, r1
 8003392:	496d      	ldr	r1, [pc, #436]	; (8003548 <MX_LWIP_Init+0x23c>)
 8003394:	78c9      	ldrb	r1, [r1, #3]
 8003396:	430b      	orrs	r3, r1
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800339e:	431a      	orrs	r2, r3
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	0619      	lsls	r1, r3, #24
 80033a6:	4b68      	ldr	r3, [pc, #416]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	4319      	orrs	r1, r3
 80033ae:	4b66      	ldr	r3, [pc, #408]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033b0:	789b      	ldrb	r3, [r3, #2]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	430b      	orrs	r3, r1
 80033b6:	4964      	ldr	r1, [pc, #400]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033b8:	78c9      	ldrb	r1, [r1, #3]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033c2:	431a      	orrs	r2, r3
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	0619      	lsls	r1, r3, #24
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4319      	orrs	r1, r3
 80033d2:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033d4:	789b      	ldrb	r3, [r3, #2]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	430b      	orrs	r3, r1
 80033da:	495b      	ldr	r1, [pc, #364]	; (8003548 <MX_LWIP_Init+0x23c>)
 80033dc:	78c9      	ldrb	r1, [r1, #3]
 80033de:	430b      	orrs	r3, r1
 80033e0:	0e1b      	lsrs	r3, r3, #24
 80033e2:	4313      	orrs	r3, r2
 80033e4:	4a5b      	ldr	r2, [pc, #364]	; (8003554 <MX_LWIP_Init+0x248>)
 80033e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <MX_LWIP_Init+0x240>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	061a      	lsls	r2, r3, #24
 80033ee:	4b57      	ldr	r3, [pc, #348]	; (800354c <MX_LWIP_Init+0x240>)
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <MX_LWIP_Init+0x240>)
 80033f8:	789b      	ldrb	r3, [r3, #2]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	4313      	orrs	r3, r2
 80033fe:	4a53      	ldr	r2, [pc, #332]	; (800354c <MX_LWIP_Init+0x240>)
 8003400:	78d2      	ldrb	r2, [r2, #3]
 8003402:	4313      	orrs	r3, r2
 8003404:	061a      	lsls	r2, r3, #24
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <MX_LWIP_Init+0x240>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0619      	lsls	r1, r3, #24
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <MX_LWIP_Init+0x240>)
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	4319      	orrs	r1, r3
 8003414:	4b4d      	ldr	r3, [pc, #308]	; (800354c <MX_LWIP_Init+0x240>)
 8003416:	789b      	ldrb	r3, [r3, #2]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	430b      	orrs	r3, r1
 800341c:	494b      	ldr	r1, [pc, #300]	; (800354c <MX_LWIP_Init+0x240>)
 800341e:	78c9      	ldrb	r1, [r1, #3]
 8003420:	430b      	orrs	r3, r1
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003428:	431a      	orrs	r2, r3
 800342a:	4b48      	ldr	r3, [pc, #288]	; (800354c <MX_LWIP_Init+0x240>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0619      	lsls	r1, r3, #24
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <MX_LWIP_Init+0x240>)
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	4319      	orrs	r1, r3
 8003438:	4b44      	ldr	r3, [pc, #272]	; (800354c <MX_LWIP_Init+0x240>)
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	430b      	orrs	r3, r1
 8003440:	4942      	ldr	r1, [pc, #264]	; (800354c <MX_LWIP_Init+0x240>)
 8003442:	78c9      	ldrb	r1, [r1, #3]
 8003444:	430b      	orrs	r3, r1
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800344c:	431a      	orrs	r2, r3
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <MX_LWIP_Init+0x240>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0619      	lsls	r1, r3, #24
 8003454:	4b3d      	ldr	r3, [pc, #244]	; (800354c <MX_LWIP_Init+0x240>)
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	4319      	orrs	r1, r3
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <MX_LWIP_Init+0x240>)
 800345e:	789b      	ldrb	r3, [r3, #2]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	430b      	orrs	r3, r1
 8003464:	4939      	ldr	r1, [pc, #228]	; (800354c <MX_LWIP_Init+0x240>)
 8003466:	78c9      	ldrb	r1, [r1, #3]
 8003468:	430b      	orrs	r3, r1
 800346a:	0e1b      	lsrs	r3, r3, #24
 800346c:	4313      	orrs	r3, r2
 800346e:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <MX_LWIP_Init+0x24c>)
 8003470:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <MX_LWIP_Init+0x244>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	061a      	lsls	r2, r3, #24
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <MX_LWIP_Init+0x244>)
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <MX_LWIP_Init+0x244>)
 8003482:	789b      	ldrb	r3, [r3, #2]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	4313      	orrs	r3, r2
 8003488:	4a31      	ldr	r2, [pc, #196]	; (8003550 <MX_LWIP_Init+0x244>)
 800348a:	78d2      	ldrb	r2, [r2, #3]
 800348c:	4313      	orrs	r3, r2
 800348e:	061a      	lsls	r2, r3, #24
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <MX_LWIP_Init+0x244>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	0619      	lsls	r1, r3, #24
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <MX_LWIP_Init+0x244>)
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4319      	orrs	r1, r3
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <MX_LWIP_Init+0x244>)
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	430b      	orrs	r3, r1
 80034a6:	492a      	ldr	r1, [pc, #168]	; (8003550 <MX_LWIP_Init+0x244>)
 80034a8:	78c9      	ldrb	r1, [r1, #3]
 80034aa:	430b      	orrs	r3, r1
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034b2:	431a      	orrs	r2, r3
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <MX_LWIP_Init+0x244>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	0619      	lsls	r1, r3, #24
 80034ba:	4b25      	ldr	r3, [pc, #148]	; (8003550 <MX_LWIP_Init+0x244>)
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	4319      	orrs	r1, r3
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <MX_LWIP_Init+0x244>)
 80034c4:	789b      	ldrb	r3, [r3, #2]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	430b      	orrs	r3, r1
 80034ca:	4921      	ldr	r1, [pc, #132]	; (8003550 <MX_LWIP_Init+0x244>)
 80034cc:	78c9      	ldrb	r1, [r1, #3]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034d6:	431a      	orrs	r2, r3
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <MX_LWIP_Init+0x244>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	0619      	lsls	r1, r3, #24
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <MX_LWIP_Init+0x244>)
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	4319      	orrs	r1, r3
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <MX_LWIP_Init+0x244>)
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	430b      	orrs	r3, r1
 80034ee:	4918      	ldr	r1, [pc, #96]	; (8003550 <MX_LWIP_Init+0x244>)
 80034f0:	78c9      	ldrb	r1, [r1, #3]
 80034f2:	430b      	orrs	r3, r1
 80034f4:	0e1b      	lsrs	r3, r3, #24
 80034f6:	4313      	orrs	r3, r2
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <MX_LWIP_Init+0x250>)
 80034fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <MX_LWIP_Init+0x254>)
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <MX_LWIP_Init+0x258>)
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <MX_LWIP_Init+0x250>)
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <MX_LWIP_Init+0x24c>)
 800350c:	4911      	ldr	r1, [pc, #68]	; (8003554 <MX_LWIP_Init+0x248>)
 800350e:	4816      	ldr	r0, [pc, #88]	; (8003568 <MX_LWIP_Init+0x25c>)
 8003510:	f001 f8d6 	bl	80046c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003514:	4814      	ldr	r0, [pc, #80]	; (8003568 <MX_LWIP_Init+0x25c>)
 8003516:	f001 fa85 	bl	8004a24 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <MX_LWIP_Init+0x25c>)
 800351c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800352c:	480e      	ldr	r0, [pc, #56]	; (8003568 <MX_LWIP_Init+0x25c>)
 800352e:	f001 fa89 	bl	8004a44 <netif_set_up>
 8003532:	e002      	b.n	800353a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <MX_LWIP_Init+0x25c>)
 8003536:	f001 faf1 	bl	8004b1c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800353a:	490c      	ldr	r1, [pc, #48]	; (800356c <MX_LWIP_Init+0x260>)
 800353c:	480a      	ldr	r0, [pc, #40]	; (8003568 <MX_LWIP_Init+0x25c>)
 800353e:	f001 fb83 	bl	8004c48 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200000e0 	.word	0x200000e0
 800354c:	200000e4 	.word	0x200000e4
 8003550:	200000e8 	.word	0x200000e8
 8003554:	200000d4 	.word	0x200000d4
 8003558:	200000d8 	.word	0x200000d8
 800355c:	200000dc 	.word	0x200000dc
 8003560:	0800dedd 	.word	0x0800dedd
 8003564:	08003b2d 	.word	0x08003b2d
 8003568:	200000a0 	.word	0x200000a0
 800356c:	08003c21 	.word	0x08003c21

08003570 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	; 0x38
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_ETH_MspInit+0x168>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 809e 	bne.w	80036d0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003594:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	4a50      	ldr	r2, [pc, #320]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 800359a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800359e:	6313      	str	r3, [r2, #48]	; 0x30
 80035a0:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b6:	6313      	str	r3, [r2, #48]	; 0x30
 80035b8:	4b48      	ldr	r3, [pc, #288]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a44      	ldr	r2, [pc, #272]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ce:	6313      	str	r3, [r2, #48]	; 0x30
 80035d0:	4b42      	ldr	r3, [pc, #264]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035dc:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4a3e      	ldr	r2, [pc, #248]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6313      	str	r3, [r2, #48]	; 0x30
 80035e8:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	4b39      	ldr	r3, [pc, #228]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	4a38      	ldr	r2, [pc, #224]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4a32      	ldr	r2, [pc, #200]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	6313      	str	r3, [r2, #48]	; 0x30
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 800362a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362e:	6313      	str	r3, [r2, #48]	; 0x30
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <HAL_ETH_MspInit+0x16c>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800363c:	2332      	movs	r3, #50	; 0x32
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003648:	2303      	movs	r3, #3
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800364c:	230b      	movs	r3, #11
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003654:	4619      	mov	r1, r3
 8003656:	4822      	ldr	r0, [pc, #136]	; (80036e0 <HAL_ETH_MspInit+0x170>)
 8003658:	f7fe ff86 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800365c:	2386      	movs	r3, #134	; 0x86
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800366c:	230b      	movs	r3, #11
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003674:	4619      	mov	r1, r3
 8003676:	481b      	ldr	r0, [pc, #108]	; (80036e4 <HAL_ETH_MspInit+0x174>)
 8003678:	f7fe ff76 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800367c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2303      	movs	r3, #3
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800368e:	230b      	movs	r3, #11
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	4619      	mov	r1, r3
 8003698:	4813      	ldr	r0, [pc, #76]	; (80036e8 <HAL_ETH_MspInit+0x178>)
 800369a:	f7fe ff65 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800369e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ac:	2303      	movs	r3, #3
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036b0:	230b      	movs	r3, #11
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	480c      	ldr	r0, [pc, #48]	; (80036ec <HAL_ETH_MspInit+0x17c>)
 80036bc:	f7fe ff54 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2106      	movs	r1, #6
 80036c4:	203d      	movs	r0, #61	; 0x3d
 80036c6:	f7fd fd2a 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80036ca:	203d      	movs	r0, #61	; 0x3d
 80036cc:	f7fd fd43 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3738      	adds	r7, #56	; 0x38
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40028000 	.word	0x40028000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020000 	.word	0x40020000
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40021800 	.word	0x40021800

080036f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80036fc:	4b4d      	ldr	r3, [pc, #308]	; (8003834 <low_level_init+0x144>)
 80036fe:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <low_level_init+0x148>)
 8003700:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <low_level_init+0x144>)
 8003704:	2201      	movs	r2, #1
 8003706:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <low_level_init+0x144>)
 800370a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800370e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003710:	4b48      	ldr	r3, [pc, #288]	; (8003834 <low_level_init+0x144>)
 8003712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003716:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <low_level_init+0x144>)
 800371a:	2200      	movs	r2, #0
 800371c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800371e:	2300      	movs	r3, #0
 8003720:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003726:	23e1      	movs	r3, #225	; 0xe1
 8003728:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800372a:	2300      	movs	r3, #0
 800372c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800372e:	2300      	movs	r3, #0
 8003730:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003732:	2300      	movs	r3, #0
 8003734:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003736:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <low_level_init+0x144>)
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <low_level_init+0x144>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <low_level_init+0x144>)
 8003746:	2200      	movs	r2, #0
 8003748:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <low_level_init+0x144>)
 800374c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003750:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003752:	4838      	ldr	r0, [pc, #224]	; (8003834 <low_level_init+0x144>)
 8003754:	f7fd fd96 	bl	8001284 <HAL_ETH_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	b2da      	uxtb	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003774:	2304      	movs	r3, #4
 8003776:	4a31      	ldr	r2, [pc, #196]	; (800383c <low_level_init+0x14c>)
 8003778:	4931      	ldr	r1, [pc, #196]	; (8003840 <low_level_init+0x150>)
 800377a:	482e      	ldr	r0, [pc, #184]	; (8003834 <low_level_init+0x144>)
 800377c:	f7fd ff1a 	bl	80015b4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003780:	2304      	movs	r3, #4
 8003782:	4a30      	ldr	r2, [pc, #192]	; (8003844 <low_level_init+0x154>)
 8003784:	4930      	ldr	r1, [pc, #192]	; (8003848 <low_level_init+0x158>)
 8003786:	482b      	ldr	r0, [pc, #172]	; (8003834 <low_level_init+0x144>)
 8003788:	f7fd ff7c 	bl	8001684 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2206      	movs	r2, #6
 8003790:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <low_level_init+0x144>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <low_level_init+0x144>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	785a      	ldrb	r2, [r3, #1]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <low_level_init+0x144>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	789a      	ldrb	r2, [r3, #2]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <low_level_init+0x144>)
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	78da      	ldrb	r2, [r3, #3]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <low_level_init+0x144>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	791a      	ldrb	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80037d0:	4b18      	ldr	r3, [pc, #96]	; (8003834 <low_level_init+0x144>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	795a      	ldrb	r2, [r3, #5]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80037e2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80037ea:	f043 030a 	orr.w	r3, r3, #10
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80037f6:	480f      	ldr	r0, [pc, #60]	; (8003834 <low_level_init+0x144>)
 80037f8:	f7fe fa6e 	bl	8001cd8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	461a      	mov	r2, r3
 8003802:	211d      	movs	r1, #29
 8003804:	480b      	ldr	r0, [pc, #44]	; (8003834 <low_level_init+0x144>)
 8003806:	f7fe f999 	bl	8001b3c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f043 030b 	orr.w	r3, r3, #11
 8003810:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	461a      	mov	r2, r3
 8003816:	211d      	movs	r1, #29
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <low_level_init+0x144>)
 800381a:	f7fe f9f7 	bl	8001c0c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	461a      	mov	r2, r3
 8003824:	211d      	movs	r1, #29
 8003826:	4803      	ldr	r0, [pc, #12]	; (8003834 <low_level_init+0x144>)
 8003828:	f7fe f988 	bl	8001b3c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200000ec 	.word	0x200000ec
 8003838:	40028000 	.word	0x40028000
 800383c:	200118d0 	.word	0x200118d0
 8003840:	20010080 	.word	0x20010080
 8003844:	20010100 	.word	0x20010100
 8003848:	20010000 	.word	0x20010000

0800384c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003856:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <low_level_output+0x138>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800386e:	4b45      	ldr	r3, [pc, #276]	; (8003984 <low_level_output+0x138>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	e05a      	b.n	8003934 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da03      	bge.n	800388e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003886:	23f8      	movs	r3, #248	; 0xf8
 8003888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800388c:	e05c      	b.n	8003948 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	895b      	ldrh	r3, [r3, #10]
 8003892:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003898:	e02f      	b.n	80038fa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	18d0      	adds	r0, r2, r3
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	18d1      	adds	r1, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	f00a fc1d 	bl	800e0f0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da03      	bge.n	80038cc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80038c4:	23f8      	movs	r3, #248	; 0xf8
 80038c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80038ca:	e03d      	b.n	8003948 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80038dc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80038e8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80038f4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003904:	4293      	cmp	r3, r2
 8003906:	d8c8      	bhi.n	800389a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	18d0      	adds	r0, r2, r3
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4413      	add	r3, r2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4619      	mov	r1, r3
 800391a:	f00a fbe9 	bl	800e0f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1a1      	bne.n	800387e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	4811      	ldr	r0, [pc, #68]	; (8003984 <low_level_output+0x138>)
 800393e:	f7fd ff0d 	bl	800175c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <low_level_output+0x138>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <low_level_output+0x138>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003962:	461a      	mov	r2, r3
 8003964:	2320      	movs	r3, #32
 8003966:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <low_level_output+0x138>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003970:	461a      	mov	r2, r3
 8003972:	2300      	movs	r3, #0
 8003974:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003976:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800397a:	4618      	mov	r0, r3
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200000ec 	.word	0x200000ec

08003988 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80039ac:	484e      	ldr	r0, [pc, #312]	; (8003ae8 <low_level_input+0x160>)
 80039ae:	f7fd ffbf 	bl	8001930 <HAL_ETH_GetReceivedFrame>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <low_level_input+0x34>

    return NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e091      	b.n	8003ae0 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80039bc:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <low_level_input+0x160>)
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <low_level_input+0x160>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80039c8:	89fb      	ldrh	r3, [r7, #14]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80039d4:	4619      	mov	r1, r3
 80039d6:	2000      	movs	r0, #0
 80039d8:	f001 f9d2 	bl	8004d80 <pbuf_alloc>
 80039dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04b      	beq.n	8003a7c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <low_level_input+0x160>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f2:	e040      	b.n	8003a76 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	895b      	ldrh	r3, [r3, #10]
 80039f8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80039fe:	e021      	b.n	8003a44 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	18d0      	adds	r0, r2, r3
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	18d1      	adds	r1, r2, r3
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	461a      	mov	r2, r3
 8003a18:	f00a fb6a 	bl	800e0f0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a32:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a3e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d8d6      	bhi.n	8003a00 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	18d0      	adds	r0, r2, r3
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f00a fb44 	bl	800e0f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1bb      	bne.n	80039f4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <low_level_input+0x160>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e00b      	b.n	8003aa0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <low_level_input+0x160>)
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d3ee      	bcc.n	8003a88 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <low_level_input+0x160>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <low_level_input+0x160>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <low_level_input+0x160>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aca:	461a      	mov	r2, r3
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <low_level_input+0x160>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	; 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200000ec 	.word	0x200000ec

08003aec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff47 	bl	8003988 <low_level_input>
 8003afa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d010      	beq.n	8003b24 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	4798      	blx	r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 fc15 	bl	8005348 <pbuf_free>
    p = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e000      	b.n	8003b26 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003b24:	bf00      	nop
  }
}
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <ethernetif_init+0x1c>
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <ethernetif_init+0x48>)
 8003b3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003b40:	490d      	ldr	r1, [pc, #52]	; (8003b78 <ethernetif_init+0x4c>)
 8003b42:	480e      	ldr	r0, [pc, #56]	; (8003b7c <ethernetif_init+0x50>)
 8003b44:	f00a fb04 	bl	800e150 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2273      	movs	r2, #115	; 0x73
 8003b4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2274      	movs	r2, #116	; 0x74
 8003b54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <ethernetif_init+0x54>)
 8003b5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <ethernetif_init+0x58>)
 8003b62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fdc3 	bl	80036f0 <low_level_init>

  return ERR_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	0800f5c4 	.word	0x0800f5c4
 8003b78:	0800f5e0 	.word	0x0800f5e0
 8003b7c:	0800f5f0 	.word	0x0800f5f0
 8003b80:	0800c275 	.word	0x0800c275
 8003b84:	0800384d 	.word	0x0800384d

08003b88 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b8c:	f7fd f9bc 	bl	8000f08 <HAL_GetTick>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8003ba4:	f7fd f9b0 	bl	8000f08 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <ethernetif_set_link+0x80>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2bc7      	cmp	r3, #199	; 0xc7
 8003bb2:	d92c      	bls.n	8003c0e <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003bb4:	f7fd f9a8 	bl	8000f08 <HAL_GetTick>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <ethernetif_set_link+0x80>)
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4815      	ldr	r0, [pc, #84]	; (8003c1c <ethernetif_set_link+0x84>)
 8003bc8:	f7fd ffb8 	bl	8001b3c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <ethernetif_set_link+0x58>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 ffc9 	bl	8004b80 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 8003bee:	e00e      	b.n	8003c0e <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <ethernetif_set_link+0x76>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 ffed 	bl	8004be8 <netif_set_link_down>
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000134 	.word	0x20000134
 8003c1c:	200000ec 	.word	0x200000ec

08003c20 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d05d      	beq.n	8003cfe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d03f      	beq.n	8003cca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4830      	ldr	r0, [pc, #192]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003c52:	f7fd ffdb 	bl	8001c0c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fd f957 	bl	8000f08 <HAL_GetTick>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	461a      	mov	r2, r3
 8003c64:	2101      	movs	r1, #1
 8003c66:	482b      	ldr	r0, [pc, #172]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003c68:	f7fd ff68 	bl	8001b3c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c6c:	f7fd f94c 	bl	8000f08 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c7a:	d828      	bhi.n	8003cce <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0eb      	beq.n	8003c5e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	4821      	ldr	r0, [pc, #132]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003c90:	f7fd ff54 	bl	8001b3c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e002      	b.n	8003cae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	e016      	b.n	8003cee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e011      	b.n	8003cee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <ethernetif_update_config+0xb0>
          goto error;
 8003cce:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	480a      	ldr	r0, [pc, #40]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cea:	f7fd ff8f 	bl	8001c0c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4808      	ldr	r0, [pc, #32]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cf2:	f7fe f84f 	bl	8001d94 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003cf6:	4807      	ldr	r0, [pc, #28]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003cf8:	f7fd ffee 	bl	8001cd8 <HAL_ETH_Start>
 8003cfc:	e002      	b.n	8003d04 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003cfe:	4805      	ldr	r0, [pc, #20]	; (8003d14 <ethernetif_update_config+0xf4>)
 8003d00:	f7fe f819 	bl	8001d36 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fc fd53 	bl	80007b0 <ethernetif_notify_conn_changed>
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200000ec 	.word	0x200000ec

08003d18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b21b      	sxth	r3, r3
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	b29b      	uxth	r3, r3
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	061a      	lsls	r2, r3, #24
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0e1b      	lsrs	r3, r3, #24
 8003d66:	4313      	orrs	r3, r2
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d7e:	f000 f8d5 	bl	8003f2c <mem_init>
  memp_init();
 8003d82:	f000 fbdb 	bl	800453c <memp_init>
  pbuf_init();
  netif_init();
 8003d86:	f000 fc93 	bl	80046b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d8a:	f007 f8b3 	bl	800aef4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003d8e:	f001 fe0b 	bl	80059a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003d92:	f007 f825 	bl	800ade0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <ptr_to_mem+0x20>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	4413      	add	r3, r2
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20002964 	.word	0x20002964

08003dc4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <mem_to_ptr+0x20>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	b29b      	uxth	r3, r3
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20002964 	.word	0x20002964

08003de8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003df0:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <plug_holes+0x120>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d206      	bcs.n	8003e08 <plug_holes+0x20>
 8003dfa:	4b44      	ldr	r3, [pc, #272]	; (8003f0c <plug_holes+0x124>)
 8003dfc:	f240 12df 	movw	r2, #479	; 0x1df
 8003e00:	4943      	ldr	r1, [pc, #268]	; (8003f10 <plug_holes+0x128>)
 8003e02:	4844      	ldr	r0, [pc, #272]	; (8003f14 <plug_holes+0x12c>)
 8003e04:	f00a f9a4 	bl	800e150 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003e08:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <plug_holes+0x130>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d306      	bcc.n	8003e20 <plug_holes+0x38>
 8003e12:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <plug_holes+0x124>)
 8003e14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e18:	4940      	ldr	r1, [pc, #256]	; (8003f1c <plug_holes+0x134>)
 8003e1a:	483e      	ldr	r0, [pc, #248]	; (8003f14 <plug_holes+0x12c>)
 8003e1c:	f00a f998 	bl	800e150 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <plug_holes+0x4e>
 8003e28:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <plug_holes+0x124>)
 8003e2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003e2e:	493c      	ldr	r1, [pc, #240]	; (8003f20 <plug_holes+0x138>)
 8003e30:	4838      	ldr	r0, [pc, #224]	; (8003f14 <plug_holes+0x12c>)
 8003e32:	f00a f98d 	bl	800e150 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e3e:	d906      	bls.n	8003e4e <plug_holes+0x66>
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <plug_holes+0x124>)
 8003e42:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003e46:	4937      	ldr	r1, [pc, #220]	; (8003f24 <plug_holes+0x13c>)
 8003e48:	4832      	ldr	r0, [pc, #200]	; (8003f14 <plug_holes+0x12c>)
 8003e4a:	f00a f981 	bl	800e150 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ffa4 	bl	8003da0 <ptr_to_mem>
 8003e58:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d024      	beq.n	8003eac <plug_holes+0xc4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	791b      	ldrb	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d120      	bne.n	8003eac <plug_holes+0xc4>
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <plug_holes+0x130>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d01b      	beq.n	8003eac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003e74:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <plug_holes+0x140>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d102      	bne.n	8003e84 <plug_holes+0x9c>
      lfree = mem;
 8003e7e:	4a2a      	ldr	r2, [pc, #168]	; (8003f28 <plug_holes+0x140>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	881a      	ldrh	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e94:	d00a      	beq.n	8003eac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff80 	bl	8003da0 <ptr_to_mem>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ff8e 	bl	8003dc4 <mem_to_ptr>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	885b      	ldrh	r3, [r3, #2]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff75 	bl	8003da0 <ptr_to_mem>
 8003eb6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d01f      	beq.n	8003f00 <plug_holes+0x118>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11b      	bne.n	8003f00 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <plug_holes+0x140>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d102      	bne.n	8003ed8 <plug_holes+0xf0>
      lfree = pmem;
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <plug_holes+0x140>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ee8:	d00a      	beq.n	8003f00 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff56 	bl	8003da0 <ptr_to_mem>
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7ff ff64 	bl	8003dc4 <mem_to_ptr>
 8003efc:	4603      	mov	r3, r0
 8003efe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}
 8003f08:	20002964 	.word	0x20002964
 8003f0c:	0800f618 	.word	0x0800f618
 8003f10:	0800f648 	.word	0x0800f648
 8003f14:	0800f660 	.word	0x0800f660
 8003f18:	20002968 	.word	0x20002968
 8003f1c:	0800f688 	.word	0x0800f688
 8003f20:	0800f6a4 	.word	0x0800f6a4
 8003f24:	0800f6c0 	.word	0x0800f6c0
 8003f28:	2000296c 	.word	0x2000296c

08003f2c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <mem_init+0x68>)
 8003f34:	3303      	adds	r3, #3
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <mem_init+0x6c>)
 8003f3e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <mem_init+0x6c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f4c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003f5a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003f5e:	f7ff ff1f 	bl	8003da0 <ptr_to_mem>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <mem_init+0x70>)
 8003f66:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <mem_init+0x70>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <mem_init+0x70>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f78:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <mem_init+0x70>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f82:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <mem_init+0x6c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <mem_init+0x74>)
 8003f8a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000150 	.word	0x20000150
 8003f98:	20002964 	.word	0x20002964
 8003f9c:	20002968 	.word	0x20002968
 8003fa0:	2000296c 	.word	0x2000296c

08003fa4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff09 	bl	8003dc4 <mem_to_ptr>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef0 	bl	8003da0 <ptr_to_mem>
 8003fc0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	885b      	ldrh	r3, [r3, #2]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff feea 	bl	8003da0 <ptr_to_mem>
 8003fcc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fd6:	d818      	bhi.n	800400a <mem_link_valid+0x66>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	885b      	ldrh	r3, [r3, #2]
 8003fdc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fe0:	d813      	bhi.n	800400a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fe6:	8afa      	ldrh	r2, [r7, #22]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d004      	beq.n	8003ff6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	8afa      	ldrh	r2, [r7, #22]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d109      	bne.n	800400a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <mem_link_valid+0x74>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d006      	beq.n	800400e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	885b      	ldrh	r3, [r3, #2]
 8004004:	8afa      	ldrh	r2, [r7, #22]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <mem_link_valid+0x6a>
    return 0;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <mem_link_valid+0x6c>
  }
  return 1;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20002968 	.word	0x20002968

0800401c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04c      	beq.n	80040c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <mem_free+0xb0>)
 8004036:	f240 2273 	movw	r2, #627	; 0x273
 800403a:	4925      	ldr	r1, [pc, #148]	; (80040d0 <mem_free+0xb4>)
 800403c:	4825      	ldr	r0, [pc, #148]	; (80040d4 <mem_free+0xb8>)
 800403e:	f00a f887 	bl	800e150 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004042:	e040      	b.n	80040c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b08      	subs	r3, #8
 8004048:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <mem_free+0xbc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d306      	bcc.n	8004062 <mem_free+0x46>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f103 020c 	add.w	r2, r3, #12
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <mem_free+0xc0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d907      	bls.n	8004072 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <mem_free+0xb0>)
 8004064:	f240 227f 	movw	r2, #639	; 0x27f
 8004068:	491d      	ldr	r1, [pc, #116]	; (80040e0 <mem_free+0xc4>)
 800406a:	481a      	ldr	r0, [pc, #104]	; (80040d4 <mem_free+0xb8>)
 800406c:	f00a f870 	bl	800e150 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004070:	e029      	b.n	80040c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	791b      	ldrb	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <mem_free+0xb0>)
 800407c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004080:	4918      	ldr	r1, [pc, #96]	; (80040e4 <mem_free+0xc8>)
 8004082:	4814      	ldr	r0, [pc, #80]	; (80040d4 <mem_free+0xb8>)
 8004084:	f00a f864 	bl	800e150 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004088:	e01d      	b.n	80040c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff ff8a 	bl	8003fa4 <mem_link_valid>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <mem_free+0xb0>)
 8004098:	f240 2295 	movw	r2, #661	; 0x295
 800409c:	4912      	ldr	r1, [pc, #72]	; (80040e8 <mem_free+0xcc>)
 800409e:	480d      	ldr	r0, [pc, #52]	; (80040d4 <mem_free+0xb8>)
 80040a0:	f00a f856 	bl	800e150 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040a4:	e00f      	b.n	80040c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <mem_free+0xd0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d202      	bcs.n	80040bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80040b6:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <mem_free+0xd0>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff fe93 	bl	8003de8 <plug_holes>
 80040c2:	e000      	b.n	80040c6 <mem_free+0xaa>
    return;
 80040c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	0800f618 	.word	0x0800f618
 80040d0:	0800f6ec 	.word	0x0800f6ec
 80040d4:	0800f660 	.word	0x0800f660
 80040d8:	20002964 	.word	0x20002964
 80040dc:	20002968 	.word	0x20002968
 80040e0:	0800f710 	.word	0x0800f710
 80040e4:	0800f72c 	.word	0x0800f72c
 80040e8:	0800f754 	.word	0x0800f754
 80040ec:	2000296c 	.word	0x2000296c

080040f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	3303      	adds	r3, #3
 8004100:	b29b      	uxth	r3, r3
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004108:	8bfb      	ldrh	r3, [r7, #30]
 800410a:	2b0b      	cmp	r3, #11
 800410c:	d801      	bhi.n	8004112 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800410e:	230c      	movs	r3, #12
 8004110:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004112:	8bfb      	ldrh	r3, [r7, #30]
 8004114:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004118:	d803      	bhi.n	8004122 <mem_trim+0x32>
 800411a:	8bfa      	ldrh	r2, [r7, #30]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	429a      	cmp	r2, r3
 8004120:	d201      	bcs.n	8004126 <mem_trim+0x36>
    return NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	e0cc      	b.n	80042c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004126:	4b68      	ldr	r3, [pc, #416]	; (80042c8 <mem_trim+0x1d8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d304      	bcc.n	800413a <mem_trim+0x4a>
 8004130:	4b66      	ldr	r3, [pc, #408]	; (80042cc <mem_trim+0x1dc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d306      	bcc.n	8004148 <mem_trim+0x58>
 800413a:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <mem_trim+0x1e0>)
 800413c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004140:	4964      	ldr	r1, [pc, #400]	; (80042d4 <mem_trim+0x1e4>)
 8004142:	4865      	ldr	r0, [pc, #404]	; (80042d8 <mem_trim+0x1e8>)
 8004144:	f00a f804 	bl	800e150 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004148:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <mem_trim+0x1d8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d304      	bcc.n	800415c <mem_trim+0x6c>
 8004152:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <mem_trim+0x1dc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d301      	bcc.n	8004160 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	e0af      	b.n	80042c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b08      	subs	r3, #8
 8004164:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004166:	69b8      	ldr	r0, [r7, #24]
 8004168:	f7ff fe2c 	bl	8003dc4 <mem_to_ptr>
 800416c:	4603      	mov	r3, r0
 800416e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b08      	subs	r3, #8
 800417c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800417e:	8bfa      	ldrh	r2, [r7, #30]
 8004180:	8abb      	ldrh	r3, [r7, #20]
 8004182:	429a      	cmp	r2, r3
 8004184:	d906      	bls.n	8004194 <mem_trim+0xa4>
 8004186:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <mem_trim+0x1e0>)
 8004188:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800418c:	4953      	ldr	r1, [pc, #332]	; (80042dc <mem_trim+0x1ec>)
 800418e:	4852      	ldr	r0, [pc, #328]	; (80042d8 <mem_trim+0x1e8>)
 8004190:	f009 ffde 	bl	800e150 <iprintf>
  if (newsize > size) {
 8004194:	8bfa      	ldrh	r2, [r7, #30]
 8004196:	8abb      	ldrh	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d901      	bls.n	80041a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	e08f      	b.n	80042c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80041a0:	8bfa      	ldrh	r2, [r7, #30]
 80041a2:	8abb      	ldrh	r3, [r7, #20]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d101      	bne.n	80041ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	e089      	b.n	80042c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fdf5 	bl	8003da0 <ptr_to_mem>
 80041b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	791b      	ldrb	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d13f      	bne.n	8004240 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041c8:	d106      	bne.n	80041d8 <mem_trim+0xe8>
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <mem_trim+0x1e0>)
 80041cc:	f240 22f5 	movw	r2, #757	; 0x2f5
 80041d0:	4943      	ldr	r1, [pc, #268]	; (80042e0 <mem_trim+0x1f0>)
 80041d2:	4841      	ldr	r0, [pc, #260]	; (80042d8 <mem_trim+0x1e8>)
 80041d4:	f009 ffbc 	bl	800e150 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80041de:	8afa      	ldrh	r2, [r7, #22]
 80041e0:	8bfb      	ldrh	r3, [r7, #30]
 80041e2:	4413      	add	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3308      	adds	r3, #8
 80041e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <mem_trim+0x1f4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d106      	bne.n	8004202 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80041f4:	89fb      	ldrh	r3, [r7, #14]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fdd2 	bl	8003da0 <ptr_to_mem>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4a39      	ldr	r2, [pc, #228]	; (80042e4 <mem_trim+0x1f4>)
 8004200:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004202:	89fb      	ldrh	r3, [r7, #14]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fdcb 	bl	8003da0 <ptr_to_mem>
 800420a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2200      	movs	r2, #0
 8004210:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	89ba      	ldrh	r2, [r7, #12]
 8004216:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	8afa      	ldrh	r2, [r7, #22]
 800421c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	89fa      	ldrh	r2, [r7, #14]
 8004222:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800422c:	d047      	beq.n	80042be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fdb4 	bl	8003da0 <ptr_to_mem>
 8004238:	4602      	mov	r2, r0
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	8053      	strh	r3, [r2, #2]
 800423e:	e03e      	b.n	80042be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004240:	8bfb      	ldrh	r3, [r7, #30]
 8004242:	f103 0214 	add.w	r2, r3, #20
 8004246:	8abb      	ldrh	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	d838      	bhi.n	80042be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800424c:	8afa      	ldrh	r2, [r7, #22]
 800424e:	8bfb      	ldrh	r3, [r7, #30]
 8004250:	4413      	add	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	3308      	adds	r3, #8
 8004256:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004260:	d106      	bne.n	8004270 <mem_trim+0x180>
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <mem_trim+0x1e0>)
 8004264:	f240 3216 	movw	r2, #790	; 0x316
 8004268:	491d      	ldr	r1, [pc, #116]	; (80042e0 <mem_trim+0x1f0>)
 800426a:	481b      	ldr	r0, [pc, #108]	; (80042d8 <mem_trim+0x1e8>)
 800426c:	f009 ff70 	bl	800e150 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004270:	89fb      	ldrh	r3, [r7, #14]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fd94 	bl	8003da0 <ptr_to_mem>
 8004278:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <mem_trim+0x1f4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d202      	bcs.n	800428a <mem_trim+0x19a>
      lfree = mem2;
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <mem_trim+0x1f4>)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2200      	movs	r2, #0
 800428e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	8afa      	ldrh	r2, [r7, #22]
 800429c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	89fa      	ldrh	r2, [r7, #14]
 80042a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042ac:	d007      	beq.n	80042be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fd74 	bl	8003da0 <ptr_to_mem>
 80042b8:	4602      	mov	r2, r0
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80042be:	687b      	ldr	r3, [r7, #4]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20002964 	.word	0x20002964
 80042cc:	20002968 	.word	0x20002968
 80042d0:	0800f618 	.word	0x0800f618
 80042d4:	0800f788 	.word	0x0800f788
 80042d8:	0800f660 	.word	0x0800f660
 80042dc:	0800f7a0 	.word	0x0800f7a0
 80042e0:	0800f7c0 	.word	0x0800f7c0
 80042e4:	2000296c 	.word	0x2000296c

080042e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <mem_malloc+0x14>
    return NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e0d9      	b.n	80044b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	3303      	adds	r3, #3
 8004300:	b29b      	uxth	r3, r3
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004308:	8bbb      	ldrh	r3, [r7, #28]
 800430a:	2b0b      	cmp	r3, #11
 800430c:	d801      	bhi.n	8004312 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800430e:	230c      	movs	r3, #12
 8004310:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004312:	8bbb      	ldrh	r3, [r7, #28]
 8004314:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004318:	d803      	bhi.n	8004322 <mem_malloc+0x3a>
 800431a:	8bba      	ldrh	r2, [r7, #28]
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	429a      	cmp	r2, r3
 8004320:	d201      	bcs.n	8004326 <mem_malloc+0x3e>
    return NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	e0c4      	b.n	80044b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004326:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <mem_malloc+0x1d0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fd4a 	bl	8003dc4 <mem_to_ptr>
 8004330:	4603      	mov	r3, r0
 8004332:	83fb      	strh	r3, [r7, #30]
 8004334:	e0b4      	b.n	80044a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004336:	8bfb      	ldrh	r3, [r7, #30]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fd31 	bl	8003da0 <ptr_to_mem>
 800433e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 80a4 	bne.w	8004492 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	8bfb      	ldrh	r3, [r7, #30]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f1a3 0208 	sub.w	r2, r3, #8
 8004358:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800435a:	429a      	cmp	r2, r3
 800435c:	f0c0 8099 	bcc.w	8004492 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	8bfb      	ldrh	r3, [r7, #30]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f1a3 0208 	sub.w	r2, r3, #8
 800436e:	8bbb      	ldrh	r3, [r7, #28]
 8004370:	3314      	adds	r3, #20
 8004372:	429a      	cmp	r2, r3
 8004374:	d333      	bcc.n	80043de <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004376:	8bfa      	ldrh	r2, [r7, #30]
 8004378:	8bbb      	ldrh	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	3308      	adds	r3, #8
 8004380:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004382:	8a7b      	ldrh	r3, [r7, #18]
 8004384:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004388:	d106      	bne.n	8004398 <mem_malloc+0xb0>
 800438a:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <mem_malloc+0x1d4>)
 800438c:	f240 3287 	movw	r2, #903	; 0x387
 8004390:	494b      	ldr	r1, [pc, #300]	; (80044c0 <mem_malloc+0x1d8>)
 8004392:	484c      	ldr	r0, [pc, #304]	; (80044c4 <mem_malloc+0x1dc>)
 8004394:	f009 fedc 	bl	800e150 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004398:	8a7b      	ldrh	r3, [r7, #18]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fd00 	bl	8003da0 <ptr_to_mem>
 80043a0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8bfa      	ldrh	r2, [r7, #30]
 80043b4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	8a7a      	ldrh	r2, [r7, #18]
 80043ba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2201      	movs	r2, #1
 80043c0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043ca:	d00b      	beq.n	80043e4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fce5 	bl	8003da0 <ptr_to_mem>
 80043d6:	4602      	mov	r2, r0
 80043d8:	8a7b      	ldrh	r3, [r7, #18]
 80043da:	8053      	strh	r3, [r2, #2]
 80043dc:	e002      	b.n	80043e4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2201      	movs	r2, #1
 80043e2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <mem_malloc+0x1d0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d127      	bne.n	800443e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <mem_malloc+0x1d0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80043f4:	e005      	b.n	8004402 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fcd0 	bl	8003da0 <ptr_to_mem>
 8004400:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	791b      	ldrb	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <mem_malloc+0x12c>
 800440a:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <mem_malloc+0x1e0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d1f0      	bne.n	80043f6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004414:	4a28      	ldr	r2, [pc, #160]	; (80044b8 <mem_malloc+0x1d0>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <mem_malloc+0x1d0>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <mem_malloc+0x1e0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d00b      	beq.n	800443e <mem_malloc+0x156>
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <mem_malloc+0x1d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <mem_malloc+0x156>
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <mem_malloc+0x1d4>)
 8004432:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004436:	4925      	ldr	r1, [pc, #148]	; (80044cc <mem_malloc+0x1e4>)
 8004438:	4822      	ldr	r0, [pc, #136]	; (80044c4 <mem_malloc+0x1dc>)
 800443a:	f009 fe89 	bl	800e150 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800443e:	8bba      	ldrh	r2, [r7, #28]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	3308      	adds	r3, #8
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <mem_malloc+0x1e0>)
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	4293      	cmp	r3, r2
 800444c:	d906      	bls.n	800445c <mem_malloc+0x174>
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <mem_malloc+0x1d4>)
 8004450:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004454:	491e      	ldr	r1, [pc, #120]	; (80044d0 <mem_malloc+0x1e8>)
 8004456:	481b      	ldr	r0, [pc, #108]	; (80044c4 <mem_malloc+0x1dc>)
 8004458:	f009 fe7a 	bl	800e150 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <mem_malloc+0x18c>
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <mem_malloc+0x1d4>)
 8004468:	f240 32bb 	movw	r2, #955	; 0x3bb
 800446c:	4919      	ldr	r1, [pc, #100]	; (80044d4 <mem_malloc+0x1ec>)
 800446e:	4815      	ldr	r0, [pc, #84]	; (80044c4 <mem_malloc+0x1dc>)
 8004470:	f009 fe6e 	bl	800e150 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <mem_malloc+0x1a4>
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <mem_malloc+0x1d4>)
 8004480:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004484:	4914      	ldr	r1, [pc, #80]	; (80044d8 <mem_malloc+0x1f0>)
 8004486:	480f      	ldr	r0, [pc, #60]	; (80044c4 <mem_malloc+0x1dc>)
 8004488:	f009 fe62 	bl	800e150 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3308      	adds	r3, #8
 8004490:	e00e      	b.n	80044b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004492:	8bfb      	ldrh	r3, [r7, #30]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fc83 	bl	8003da0 <ptr_to_mem>
 800449a:	4603      	mov	r3, r0
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80044a0:	8bfa      	ldrh	r2, [r7, #30]
 80044a2:	8bbb      	ldrh	r3, [r7, #28]
 80044a4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f4ff af44 	bcc.w	8004336 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	2000296c 	.word	0x2000296c
 80044bc:	0800f618 	.word	0x0800f618
 80044c0:	0800f7c0 	.word	0x0800f7c0
 80044c4:	0800f660 	.word	0x0800f660
 80044c8:	20002968 	.word	0x20002968
 80044cc:	0800f7d4 	.word	0x0800f7d4
 80044d0:	0800f7f0 	.word	0x0800f7f0
 80044d4:	0800f820 	.word	0x0800f820
 80044d8:	0800f850 	.word	0x0800f850

080044dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	3303      	adds	r3, #3
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e011      	b.n	8004522 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	885b      	ldrh	r3, [r3, #2]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4293      	cmp	r3, r2
 800452c:	dbe7      	blt.n	80044fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004542:	2300      	movs	r3, #0
 8004544:	80fb      	strh	r3, [r7, #6]
 8004546:	e009      	b.n	800455c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <memp_init+0x30>)
 800454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ffc3 	bl	80044dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	3301      	adds	r3, #1
 800455a:	80fb      	strh	r3, [r7, #6]
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d9f2      	bls.n	8004548 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	08012020 	.word	0x08012020

08004570 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d012      	beq.n	80045ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <do_memp_malloc_pool+0x38>
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <do_memp_malloc_pool+0x48>)
 800459c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <do_memp_malloc_pool+0x4c>)
 80045a2:	4807      	ldr	r0, [pc, #28]	; (80045c0 <do_memp_malloc_pool+0x50>)
 80045a4:	f009 fdd4 	bl	800e150 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e000      	b.n	80045ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	0800f874 	.word	0x0800f874
 80045bc:	0800f8a4 	.word	0x0800f8a4
 80045c0:	0800f8c8 	.word	0x0800f8c8

080045c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d908      	bls.n	80045e6 <memp_malloc+0x22>
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <memp_malloc+0x3c>)
 80045d6:	f240 1257 	movw	r2, #343	; 0x157
 80045da:	490a      	ldr	r1, [pc, #40]	; (8004604 <memp_malloc+0x40>)
 80045dc:	480a      	ldr	r0, [pc, #40]	; (8004608 <memp_malloc+0x44>)
 80045de:	f009 fdb7 	bl	800e150 <iprintf>
 80045e2:	2300      	movs	r3, #0
 80045e4:	e008      	b.n	80045f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <memp_malloc+0x48>)
 80045ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ffbe 	bl	8004570 <do_memp_malloc_pool>
 80045f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0800f874 	.word	0x0800f874
 8004604:	0800f904 	.word	0x0800f904
 8004608:	0800f8c8 	.word	0x0800f8c8
 800460c:	08012020 	.word	0x08012020

08004610 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <do_memp_free_pool+0x22>
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <do_memp_free_pool+0x40>)
 8004626:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800462a:	490a      	ldr	r1, [pc, #40]	; (8004654 <do_memp_free_pool+0x44>)
 800462c:	480a      	ldr	r0, [pc, #40]	; (8004658 <do_memp_free_pool+0x48>)
 800462e:	f009 fd8f 	bl	800e150 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0800f874 	.word	0x0800f874
 8004654:	0800f924 	.word	0x0800f924
 8004658:	0800f8c8 	.word	0x0800f8c8

0800465c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d907      	bls.n	800467e <memp_free+0x22>
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <memp_free+0x44>)
 8004670:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004674:	490b      	ldr	r1, [pc, #44]	; (80046a4 <memp_free+0x48>)
 8004676:	480c      	ldr	r0, [pc, #48]	; (80046a8 <memp_free+0x4c>)
 8004678:	f009 fd6a 	bl	800e150 <iprintf>
 800467c:	e00c      	b.n	8004698 <memp_free+0x3c>

  if (mem == NULL) {
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <memp_free+0x50>)
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ffbe 	bl	8004610 <do_memp_free_pool>
 8004694:	e000      	b.n	8004698 <memp_free+0x3c>
    return;
 8004696:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	0800f874 	.word	0x0800f874
 80046a4:	0800f944 	.word	0x0800f944
 80046a8:	0800f8c8 	.word	0x0800f8c8
 80046ac:	08012020 	.word	0x08012020

080046b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <netif_add+0x26>
 80046d4:	4b57      	ldr	r3, [pc, #348]	; (8004834 <netif_add+0x174>)
 80046d6:	f240 1227 	movw	r2, #295	; 0x127
 80046da:	4957      	ldr	r1, [pc, #348]	; (8004838 <netif_add+0x178>)
 80046dc:	4857      	ldr	r0, [pc, #348]	; (800483c <netif_add+0x17c>)
 80046de:	f009 fd37 	bl	800e150 <iprintf>
 80046e2:	2300      	movs	r3, #0
 80046e4:	e0a2      	b.n	800482c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <netif_add+0x3e>
 80046ec:	4b51      	ldr	r3, [pc, #324]	; (8004834 <netif_add+0x174>)
 80046ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80046f2:	4953      	ldr	r1, [pc, #332]	; (8004840 <netif_add+0x180>)
 80046f4:	4851      	ldr	r0, [pc, #324]	; (800483c <netif_add+0x17c>)
 80046f6:	f009 fd2b 	bl	800e150 <iprintf>
 80046fa:	2300      	movs	r3, #0
 80046fc:	e096      	b.n	800482c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004704:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <netif_add+0x184>)
 8004706:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800470e:	4b4d      	ldr	r3, [pc, #308]	; (8004844 <netif_add+0x184>)
 8004710:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004718:	4b4a      	ldr	r3, [pc, #296]	; (8004844 <netif_add+0x184>)
 800471a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a45      	ldr	r2, [pc, #276]	; (8004848 <netif_add+0x188>)
 8004732:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a3a      	ldr	r2, [r7, #32]
 800474c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <netif_add+0x18c>)
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f913 	bl	8004990 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	4798      	blx	r3
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <netif_add+0xba>
    return NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	e058      	b.n	800482c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004780:	2bff      	cmp	r3, #255	; 0xff
 8004782:	d103      	bne.n	800478c <netif_add+0xcc>
        netif->num = 0;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <netif_add+0x190>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e02b      	b.n	80047f0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	429a      	cmp	r2, r3
 800479e:	d106      	bne.n	80047ae <netif_add+0xee>
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <netif_add+0x174>)
 80047a2:	f240 128b 	movw	r2, #395	; 0x18b
 80047a6:	492b      	ldr	r1, [pc, #172]	; (8004854 <netif_add+0x194>)
 80047a8:	4824      	ldr	r0, [pc, #144]	; (800483c <netif_add+0x17c>)
 80047aa:	f009 fcd1 	bl	800e150 <iprintf>
        num_netifs++;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3301      	adds	r3, #1
 80047b2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2bff      	cmp	r3, #255	; 0xff
 80047b8:	dd06      	ble.n	80047c8 <netif_add+0x108>
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <netif_add+0x174>)
 80047bc:	f240 128d 	movw	r2, #397	; 0x18d
 80047c0:	4925      	ldr	r1, [pc, #148]	; (8004858 <netif_add+0x198>)
 80047c2:	481e      	ldr	r0, [pc, #120]	; (800483c <netif_add+0x17c>)
 80047c4:	f009 fcc4 	bl	800e150 <iprintf>
        if (netif2->num == netif->num) {
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d108      	bne.n	80047ea <netif_add+0x12a>
          netif->num++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047de:	3301      	adds	r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80047e8:	e005      	b.n	80047f6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1d0      	bne.n	8004798 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1be      	bne.n	800477a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004802:	2bfe      	cmp	r3, #254	; 0xfe
 8004804:	d103      	bne.n	800480e <netif_add+0x14e>
    netif_num = 0;
 8004806:	4b11      	ldr	r3, [pc, #68]	; (800484c <netif_add+0x18c>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e006      	b.n	800481c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004814:	3301      	adds	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <netif_add+0x18c>)
 800481a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <netif_add+0x190>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <netif_add+0x190>)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0800f960 	.word	0x0800f960
 8004838:	0800f9f4 	.word	0x0800f9f4
 800483c:	0800f9b0 	.word	0x0800f9b0
 8004840:	0800fa10 	.word	0x0800fa10
 8004844:	08012084 	.word	0x08012084
 8004848:	08004c6b 	.word	0x08004c6b
 800484c:	20005864 	.word	0x20005864
 8004850:	2000585c 	.word	0x2000585c
 8004854:	0800fa34 	.word	0x0800fa34
 8004858:	0800fa48 	.word	0x0800fa48

0800485c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 fbe5 	bl	8007038 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f007 f883 	bl	800b97c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <netif_do_set_ipaddr+0x20>
 8004892:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <netif_do_set_ipaddr+0x88>)
 8004894:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004898:	491c      	ldr	r1, [pc, #112]	; (800490c <netif_do_set_ipaddr+0x8c>)
 800489a:	481d      	ldr	r0, [pc, #116]	; (8004910 <netif_do_set_ipaddr+0x90>)
 800489c:	f009 fc58 	bl	800e150 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <netif_do_set_ipaddr+0x34>
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <netif_do_set_ipaddr+0x88>)
 80048a8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80048ac:	4917      	ldr	r1, [pc, #92]	; (800490c <netif_do_set_ipaddr+0x8c>)
 80048ae:	4818      	ldr	r0, [pc, #96]	; (8004910 <netif_do_set_ipaddr+0x90>)
 80048b0:	f009 fc4e 	bl	800e150 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d01c      	beq.n	80048fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3304      	adds	r3, #4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ffbf 	bl	800485c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <netif_do_set_ipaddr+0x6a>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	e000      	b.n	80048ec <netif_do_set_ipaddr+0x6c>
 80048ea:	2300      	movs	r3, #0
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80048f0:	2101      	movs	r1, #1
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8d2 	bl	8004a9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	0800f960 	.word	0x0800f960
 800490c:	0800fa78 	.word	0x0800fa78
 8004910:	0800f9b0 	.word	0x0800f9b0

08004914 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3308      	adds	r3, #8
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d00a      	beq.n	8004944 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <netif_do_set_netmask+0x26>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	e000      	b.n	800493c <netif_do_set_netmask+0x28>
 800493a:	2300      	movs	r3, #0
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	330c      	adds	r3, #12
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d00a      	beq.n	8004982 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <netif_do_set_gw+0x26>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	e000      	b.n	800497a <netif_do_set_gw+0x28>
 8004978:	2300      	movs	r3, #0
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <netif_set_addr+0x90>)
 80049ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <netif_set_addr+0x90>)
 80049b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <netif_set_addr+0x90>)
 80049c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <netif_set_addr+0x42>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <netif_set_addr+0x46>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <netif_set_addr+0x48>
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	461a      	mov	r2, r3
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ff49 	bl	8004880 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff ff8e 	bl	8004914 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff ffa8 	bl	8004952 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a08:	f107 0310 	add.w	r3, r7, #16
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff35 	bl	8004880 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004a16:	bf00      	nop
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	08012084 	.word	0x08012084

08004a24 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <netif_set_default+0x1c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20005860 	.word	0x20005860

08004a44 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d107      	bne.n	8004a62 <netif_set_up+0x1e>
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <netif_set_up+0x4c>)
 8004a54:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <netif_set_up+0x50>)
 8004a5a:	480f      	ldr	r0, [pc, #60]	; (8004a98 <netif_set_up+0x54>)
 8004a5c:	f009 fb78 	bl	800e150 <iprintf>
 8004a60:	e013      	b.n	8004a8a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10c      	bne.n	8004a8a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004a82:	2103      	movs	r1, #3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f809 	bl	8004a9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	0800f960 	.word	0x0800f960
 8004a94:	0800fae8 	.word	0x0800fae8
 8004a98:	0800f9b0 	.word	0x0800f9b0

08004a9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <netif_issue_reports+0x20>
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <netif_issue_reports+0x74>)
 8004ab0:	f240 326d 	movw	r2, #877	; 0x36d
 8004ab4:	4917      	ldr	r1, [pc, #92]	; (8004b14 <netif_issue_reports+0x78>)
 8004ab6:	4818      	ldr	r0, [pc, #96]	; (8004b18 <netif_issue_reports+0x7c>)
 8004ab8:	f009 fb4a 	bl	800e150 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01e      	beq.n	8004b08 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ad0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d017      	beq.n	8004b08 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f007 fea5 	bl	800c850 <etharp_request>
 8004b06:	e000      	b.n	8004b0a <netif_issue_reports+0x6e>
    return;
 8004b08:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800f960 	.word	0x0800f960
 8004b14:	0800fb04 	.word	0x0800fb04
 8004b18:	0800f9b0 	.word	0x0800f9b0

08004b1c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <netif_set_down+0x1e>
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <netif_set_down+0x58>)
 8004b2c:	f240 329b 	movw	r2, #923	; 0x39b
 8004b30:	4911      	ldr	r1, [pc, #68]	; (8004b78 <netif_set_down+0x5c>)
 8004b32:	4812      	ldr	r0, [pc, #72]	; (8004b7c <netif_set_down+0x60>)
 8004b34:	f009 fb0c 	bl	800e150 <iprintf>
 8004b38:	e019      	b.n	8004b6e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f007 fa2f 	bl	800bfcc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	0800f960 	.word	0x0800f960
 8004b78:	0800fb28 	.word	0x0800fb28
 8004b7c:	0800f9b0 	.word	0x0800f9b0

08004b80 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <netif_set_link_up+0x1e>
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <netif_set_link_up+0x5c>)
 8004b90:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004b94:	4912      	ldr	r1, [pc, #72]	; (8004be0 <netif_set_link_up+0x60>)
 8004b96:	4813      	ldr	r0, [pc, #76]	; (8004be4 <netif_set_link_up+0x64>)
 8004b98:	f009 fada 	bl	800e150 <iprintf>
 8004b9c:	e01b      	b.n	8004bd6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff6b 	bl	8004a9c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <netif_set_link_up+0x56>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	0800f960 	.word	0x0800f960
 8004be0:	0800fb48 	.word	0x0800fb48
 8004be4:	0800f9b0 	.word	0x0800f9b0

08004be8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d107      	bne.n	8004c06 <netif_set_link_down+0x1e>
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <netif_set_link_down+0x54>)
 8004bf8:	f240 4206 	movw	r2, #1030	; 0x406
 8004bfc:	4910      	ldr	r1, [pc, #64]	; (8004c40 <netif_set_link_down+0x58>)
 8004bfe:	4811      	ldr	r0, [pc, #68]	; (8004c44 <netif_set_link_down+0x5c>)
 8004c00:	f009 faa6 	bl	800e150 <iprintf>
 8004c04:	e017      	b.n	8004c36 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <netif_set_link_down+0x4e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0800f960 	.word	0x0800f960
 8004c40:	0800fb6c 	.word	0x0800fb6c
 8004c44:	0800f9b0 	.word	0x0800f9b0

08004c48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	61da      	str	r2, [r3, #28]
  }
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004c76:	f06f 030b 	mvn.w	r3, #11
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <netif_get_by_index+0x48>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e00c      	b.n	8004cba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	79fa      	ldrb	r2, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d101      	bne.n	8004cb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e006      	b.n	8004cc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ef      	bne.n	8004ca0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000585c 	.word	0x2000585c

08004cd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <pbuf_free_ooseq+0x38>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <pbuf_free_ooseq+0x3c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	e00a      	b.n	8004cfe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f002 f9df 	bl	80070b4 <tcp_free_ooseq>
      return;
 8004cf6:	e005      	b.n	8004d04 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f1      	bne.n	8004ce8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20005865 	.word	0x20005865
 8004d10:	20005874 	.word	0x20005874

08004d14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <pbuf_pool_is_empty+0x14>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d1e:	bf00      	nop
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20005865 	.word	0x20005865

08004d2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	80fb      	strh	r3, [r7, #6]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88ba      	ldrh	r2, [r7, #4]
 8004d58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004d5a:	8b3b      	ldrh	r3, [r7, #24]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	7f3a      	ldrb	r2, [r7, #28]
 8004d66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	73da      	strb	r2, [r3, #15]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004d9c:	d07f      	beq.n	8004e9e <pbuf_alloc+0x11e>
 8004d9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004da2:	f300 80c8 	bgt.w	8004f36 <pbuf_alloc+0x1b6>
 8004da6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004daa:	d010      	beq.n	8004dce <pbuf_alloc+0x4e>
 8004dac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004db0:	f300 80c1 	bgt.w	8004f36 <pbuf_alloc+0x1b6>
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d002      	beq.n	8004dbe <pbuf_alloc+0x3e>
 8004db8:	2b41      	cmp	r3, #65	; 0x41
 8004dba:	f040 80bc 	bne.w	8004f36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	88bb      	ldrh	r3, [r7, #4]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f000 f8d1 	bl	8004f6c <pbuf_alloc_reference>
 8004dca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004dcc:	e0bd      	b.n	8004f4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004dd6:	88bb      	ldrh	r3, [r7, #4]
 8004dd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004dda:	2008      	movs	r0, #8
 8004ddc:	f7ff fbf2 	bl	80045c4 <memp_malloc>
 8004de0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004de8:	f7ff ff94 	bl	8004d14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df4:	f000 faa8 	bl	8005348 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e0a7      	b.n	8004f4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dfe:	3303      	adds	r3, #3
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8b7a      	ldrh	r2, [r7, #26]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bf28      	it	cs
 8004e14:	4613      	movcs	r3, r2
 8004e16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3303      	adds	r3, #3
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	4618      	mov	r0, r3
 8004e28:	89f9      	ldrh	r1, [r7, #14]
 8004e2a:	8b7a      	ldrh	r2, [r7, #26]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	460b      	mov	r3, r1
 8004e36:	4601      	mov	r1, r0
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f7ff ff77 	bl	8004d2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <pbuf_alloc+0xd8>
 8004e4a:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <pbuf_alloc+0x1d4>)
 8004e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e50:	4941      	ldr	r1, [pc, #260]	; (8004f58 <pbuf_alloc+0x1d8>)
 8004e52:	4842      	ldr	r0, [pc, #264]	; (8004f5c <pbuf_alloc+0x1dc>)
 8004e54:	f009 f97c 	bl	800e150 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e5a:	3303      	adds	r3, #3
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004e64:	d106      	bne.n	8004e74 <pbuf_alloc+0xf4>
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <pbuf_alloc+0x1d4>)
 8004e68:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004e6c:	493c      	ldr	r1, [pc, #240]	; (8004f60 <pbuf_alloc+0x1e0>)
 8004e6e:	483b      	ldr	r0, [pc, #236]	; (8004f5c <pbuf_alloc+0x1dc>)
 8004e70:	f009 f96e 	bl	800e150 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	e002      	b.n	8004e86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004e8a:	8b7a      	ldrh	r2, [r7, #26]
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004e96:	8b7b      	ldrh	r3, [r7, #26]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d19e      	bne.n	8004dda <pbuf_alloc+0x5a>
      break;
 8004e9c:	e055      	b.n	8004f4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ea0:	3303      	adds	r3, #3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f023 0303 	bic.w	r3, r3, #3
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	88bb      	ldrh	r3, [r7, #4]
 8004eac:	3303      	adds	r3, #3
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004eba:	8b3b      	ldrh	r3, [r7, #24]
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ec0:	8b3a      	ldrh	r2, [r7, #24]
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d306      	bcc.n	8004edc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004ece:	8afa      	ldrh	r2, [r7, #22]
 8004ed0:	88bb      	ldrh	r3, [r7, #4]
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d201      	bcs.n	8004ee0 <pbuf_alloc+0x160>
        return NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e035      	b.n	8004f4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004ee0:	8afb      	ldrh	r3, [r7, #22]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fa00 	bl	80042e8 <mem_malloc>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <pbuf_alloc+0x174>
        return NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e02b      	b.n	8004f4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	4413      	add	r3, r2
 8004efc:	3303      	adds	r3, #3
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	4618      	mov	r0, r3
 8004f04:	88b9      	ldrh	r1, [r7, #4]
 8004f06:	88ba      	ldrh	r2, [r7, #4]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	887b      	ldrh	r3, [r7, #2]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	460b      	mov	r3, r1
 8004f12:	4601      	mov	r1, r0
 8004f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f16:	f7ff ff09 	bl	8004d2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <pbuf_alloc+0x1c8>
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <pbuf_alloc+0x1d4>)
 8004f28:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004f2c:	490d      	ldr	r1, [pc, #52]	; (8004f64 <pbuf_alloc+0x1e4>)
 8004f2e:	480b      	ldr	r0, [pc, #44]	; (8004f5c <pbuf_alloc+0x1dc>)
 8004f30:	f009 f90e 	bl	800e150 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004f34:	e008      	b.n	8004f48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004f36:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <pbuf_alloc+0x1d4>)
 8004f38:	f240 1227 	movw	r2, #295	; 0x127
 8004f3c:	490a      	ldr	r1, [pc, #40]	; (8004f68 <pbuf_alloc+0x1e8>)
 8004f3e:	4807      	ldr	r0, [pc, #28]	; (8004f5c <pbuf_alloc+0x1dc>)
 8004f40:	f009 f906 	bl	800e150 <iprintf>
      return NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e001      	b.n	8004f4c <pbuf_alloc+0x1cc>
      break;
 8004f48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3728      	adds	r7, #40	; 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	0800fb90 	.word	0x0800fb90
 8004f58:	0800fbc0 	.word	0x0800fbc0
 8004f5c:	0800fbf0 	.word	0x0800fbf0
 8004f60:	0800fc18 	.word	0x0800fc18
 8004f64:	0800fc4c 	.word	0x0800fc4c
 8004f68:	0800fc78 	.word	0x0800fc78

08004f6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004f7c:	883b      	ldrh	r3, [r7, #0]
 8004f7e:	2b41      	cmp	r3, #65	; 0x41
 8004f80:	d009      	beq.n	8004f96 <pbuf_alloc_reference+0x2a>
 8004f82:	883b      	ldrh	r3, [r7, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d006      	beq.n	8004f96 <pbuf_alloc_reference+0x2a>
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <pbuf_alloc_reference+0x5c>)
 8004f8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004f8e:	490f      	ldr	r1, [pc, #60]	; (8004fcc <pbuf_alloc_reference+0x60>)
 8004f90:	480f      	ldr	r0, [pc, #60]	; (8004fd0 <pbuf_alloc_reference+0x64>)
 8004f92:	f009 f8dd 	bl	800e150 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004f96:	2007      	movs	r0, #7
 8004f98:	f7ff fb14 	bl	80045c4 <memp_malloc>
 8004f9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e00b      	b.n	8004fc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004fa8:	8879      	ldrh	r1, [r7, #2]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	2300      	movs	r3, #0
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	883b      	ldrh	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff feb7 	bl	8004d2c <pbuf_init_alloced_pbuf>
  return p;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	0800fb90 	.word	0x0800fb90
 8004fcc:	0800fc94 	.word	0x0800fc94
 8004fd0:	0800fbf0 	.word	0x0800fbf0

08004fd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	81bb      	strh	r3, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004fec:	8a7b      	ldrh	r3, [r7, #18]
 8004fee:	3303      	adds	r3, #3
 8004ff0:	f023 0203 	bic.w	r2, r3, #3
 8004ff4:	89bb      	ldrh	r3, [r7, #12]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d901      	bls.n	8005002 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e018      	b.n	8005034 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	3303      	adds	r3, #3
 800500c:	f023 0303 	bic.w	r3, r3, #3
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	4413      	add	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e001      	b.n	800501c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	89b9      	ldrh	r1, [r7, #12]
 8005020:	89ba      	ldrh	r2, [r7, #12]
 8005022:	2302      	movs	r3, #2
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	460b      	mov	r3, r1
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	f7ff fe7d 	bl	8004d2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005032:	687b      	ldr	r3, [r7, #4]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <pbuf_realloc+0x20>
 800504e:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <pbuf_realloc+0xfc>)
 8005050:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005054:	4939      	ldr	r1, [pc, #228]	; (800513c <pbuf_realloc+0x100>)
 8005056:	483a      	ldr	r0, [pc, #232]	; (8005140 <pbuf_realloc+0x104>)
 8005058:	f009 f87a 	bl	800e150 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	891b      	ldrh	r3, [r3, #8]
 8005060:	887a      	ldrh	r2, [r7, #2]
 8005062:	429a      	cmp	r2, r3
 8005064:	d263      	bcs.n	800512e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	891a      	ldrh	r2, [r3, #8]
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	817b      	strh	r3, [r7, #10]
  q = p;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005078:	e018      	b.n	80050ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	895b      	ldrh	r3, [r3, #10]
 800507e:	897a      	ldrh	r2, [r7, #10]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	891a      	ldrh	r2, [r3, #8]
 8005088:	893b      	ldrh	r3, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <pbuf_realloc+0x70>
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <pbuf_realloc+0xfc>)
 80050a0:	f240 12af 	movw	r2, #431	; 0x1af
 80050a4:	4927      	ldr	r1, [pc, #156]	; (8005144 <pbuf_realloc+0x108>)
 80050a6:	4826      	ldr	r0, [pc, #152]	; (8005140 <pbuf_realloc+0x104>)
 80050a8:	f009 f852 	bl	800e150 <iprintf>
  while (rem_len > q->len) {
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	895b      	ldrh	r3, [r3, #10]
 80050b0:	897a      	ldrh	r2, [r7, #10]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d8e1      	bhi.n	800507a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	7b1b      	ldrb	r3, [r3, #12]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d121      	bne.n	8005106 <pbuf_realloc+0xca>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	895b      	ldrh	r3, [r3, #10]
 80050c6:	897a      	ldrh	r2, [r7, #10]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d01c      	beq.n	8005106 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	7b5b      	ldrb	r3, [r3, #13]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	4413      	add	r3, r2
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff f800 	bl	80040f0 <mem_trim>
 80050f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <pbuf_realloc+0xca>
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <pbuf_realloc+0xfc>)
 80050fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80050fe:	4912      	ldr	r1, [pc, #72]	; (8005148 <pbuf_realloc+0x10c>)
 8005100:	480f      	ldr	r0, [pc, #60]	; (8005140 <pbuf_realloc+0x104>)
 8005102:	f009 f825 	bl	800e150 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	897a      	ldrh	r2, [r7, #10]
 800510a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	895a      	ldrh	r2, [r3, #10]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 f911 	bl	8005348 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e000      	b.n	8005130 <pbuf_realloc+0xf4>
    return;
 800512e:	bf00      	nop

}
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	0800fb90 	.word	0x0800fb90
 800513c:	0800fca8 	.word	0x0800fca8
 8005140:	0800fbf0 	.word	0x0800fbf0
 8005144:	0800fcc0 	.word	0x0800fcc0
 8005148:	0800fcd8 	.word	0x0800fcd8

0800514c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <pbuf_add_header_impl+0x22>
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <pbuf_add_header_impl+0xc4>)
 8005162:	f240 12df 	movw	r2, #479	; 0x1df
 8005166:	492b      	ldr	r1, [pc, #172]	; (8005214 <pbuf_add_header_impl+0xc8>)
 8005168:	482b      	ldr	r0, [pc, #172]	; (8005218 <pbuf_add_header_impl+0xcc>)
 800516a:	f008 fff1 	bl	800e150 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <pbuf_add_header_impl+0x30>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517a:	d301      	bcc.n	8005180 <pbuf_add_header_impl+0x34>
    return 1;
 800517c:	2301      	movs	r3, #1
 800517e:	e043      	b.n	8005208 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <pbuf_add_header_impl+0x3e>
    return 0;
 8005186:	2300      	movs	r3, #0
 8005188:	e03e      	b.n	8005208 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	891a      	ldrh	r2, [r3, #8]
 8005192:	8a7b      	ldrh	r3, [r7, #18]
 8005194:	4413      	add	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	8a7a      	ldrh	r2, [r7, #18]
 800519a:	429a      	cmp	r2, r3
 800519c:	d901      	bls.n	80051a2 <pbuf_add_header_impl+0x56>
    return 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	e032      	b.n	8005208 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	7b1b      	ldrb	r3, [r3, #12]
 80051a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80051a8:	8a3b      	ldrh	r3, [r7, #16]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	425b      	negs	r3, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3310      	adds	r3, #16
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d20d      	bcs.n	80051e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e01d      	b.n	8005208 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	425b      	negs	r3, r3
 80051da:	4413      	add	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e001      	b.n	80051e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e011      	b.n	8005208 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	895a      	ldrh	r2, [r3, #10]
 80051ee:	8a7b      	ldrh	r3, [r7, #18]
 80051f0:	4413      	add	r3, r2
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	891a      	ldrh	r2, [r3, #8]
 80051fc:	8a7b      	ldrh	r3, [r7, #18]
 80051fe:	4413      	add	r3, r2
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	811a      	strh	r2, [r3, #8]


  return 0;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0800fb90 	.word	0x0800fb90
 8005214:	0800fcf4 	.word	0x0800fcf4
 8005218:	0800fbf0 	.word	0x0800fbf0

0800521c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff ff8e 	bl	800514c <pbuf_add_header_impl>
 8005230:	4603      	mov	r3, r0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <pbuf_remove_header+0x1e>
 800524c:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <pbuf_remove_header+0x94>)
 800524e:	f240 224b 	movw	r2, #587	; 0x24b
 8005252:	4920      	ldr	r1, [pc, #128]	; (80052d4 <pbuf_remove_header+0x98>)
 8005254:	4820      	ldr	r0, [pc, #128]	; (80052d8 <pbuf_remove_header+0x9c>)
 8005256:	f008 ff7b 	bl	800e150 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <pbuf_remove_header+0x2c>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d301      	bcc.n	800526c <pbuf_remove_header+0x30>
    return 1;
 8005268:	2301      	movs	r3, #1
 800526a:	e02c      	b.n	80052c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <pbuf_remove_header+0x3a>
    return 0;
 8005272:	2300      	movs	r3, #0
 8005274:	e027      	b.n	80052c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	895b      	ldrh	r3, [r3, #10]
 800527e:	89fa      	ldrh	r2, [r7, #14]
 8005280:	429a      	cmp	r2, r3
 8005282:	d908      	bls.n	8005296 <pbuf_remove_header+0x5a>
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <pbuf_remove_header+0x94>)
 8005286:	f240 2255 	movw	r2, #597	; 0x255
 800528a:	4914      	ldr	r1, [pc, #80]	; (80052dc <pbuf_remove_header+0xa0>)
 800528c:	4812      	ldr	r0, [pc, #72]	; (80052d8 <pbuf_remove_header+0x9c>)
 800528e:	f008 ff5f 	bl	800e150 <iprintf>
 8005292:	2301      	movs	r3, #1
 8005294:	e017      	b.n	80052c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	441a      	add	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	895a      	ldrh	r2, [r3, #10]
 80052ac:	89fb      	ldrh	r3, [r7, #14]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	891a      	ldrh	r2, [r3, #8]
 80052ba:	89fb      	ldrh	r3, [r7, #14]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	0800fb90 	.word	0x0800fb90
 80052d4:	0800fcf4 	.word	0x0800fcf4
 80052d8:	0800fbf0 	.word	0x0800fbf0
 80052dc:	0800fd00 	.word	0x0800fd00

080052e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
 80052ec:	4613      	mov	r3, r2
 80052ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80052f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da08      	bge.n	800530a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80052f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052fc:	425b      	negs	r3, r3
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff9b 	bl	800523c <pbuf_remove_header>
 8005306:	4603      	mov	r3, r0
 8005308:	e007      	b.n	800531a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800530a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800530e:	787a      	ldrb	r2, [r7, #1]
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff ff1a 	bl	800514c <pbuf_add_header_impl>
 8005318:	4603      	mov	r3, r0
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800532e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005332:	2201      	movs	r2, #1
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ffd2 	bl	80052e0 <pbuf_header_impl>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <pbuf_free+0x22>
 800535c:	4b38      	ldr	r3, [pc, #224]	; (8005440 <pbuf_free+0xf8>)
 800535e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005362:	4938      	ldr	r1, [pc, #224]	; (8005444 <pbuf_free+0xfc>)
 8005364:	4838      	ldr	r0, [pc, #224]	; (8005448 <pbuf_free+0x100>)
 8005366:	f008 fef3 	bl	800e150 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800536a:	2300      	movs	r3, #0
 800536c:	e063      	b.n	8005436 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005372:	e05c      	b.n	800542e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7b9b      	ldrb	r3, [r3, #14]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <pbuf_free+0x42>
 800537c:	4b30      	ldr	r3, [pc, #192]	; (8005440 <pbuf_free+0xf8>)
 800537e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005382:	4932      	ldr	r1, [pc, #200]	; (800544c <pbuf_free+0x104>)
 8005384:	4830      	ldr	r0, [pc, #192]	; (8005448 <pbuf_free+0x100>)
 8005386:	f008 fee3 	bl	800e150 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7b9b      	ldrb	r3, [r3, #14]
 800538e:	3b01      	subs	r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	739a      	strb	r2, [r3, #14]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	7b9b      	ldrb	r3, [r3, #14]
 800539a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800539c:	7dbb      	ldrb	r3, [r7, #22]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d143      	bne.n	800542a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7b1b      	ldrb	r3, [r3, #12]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7b5b      	ldrb	r3, [r3, #13]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d011      	beq.n	80053e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <pbuf_free+0x90>
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <pbuf_free+0xf8>)
 80053cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80053d0:	491f      	ldr	r1, [pc, #124]	; (8005450 <pbuf_free+0x108>)
 80053d2:	481d      	ldr	r0, [pc, #116]	; (8005448 <pbuf_free+0x100>)
 80053d4:	f008 febc 	bl	800e150 <iprintf>
        pc->custom_free_function(p);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	e01d      	b.n	800541e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d104      	bne.n	80053f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	2008      	movs	r0, #8
 80053ec:	f7ff f936 	bl	800465c <memp_free>
 80053f0:	e015      	b.n	800541e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d104      	bne.n	8005402 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	2007      	movs	r0, #7
 80053fc:	f7ff f92e 	bl	800465c <memp_free>
 8005400:	e00d      	b.n	800541e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d103      	bne.n	8005410 <pbuf_free+0xc8>
          mem_free(p);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fe fe07 	bl	800401c <mem_free>
 800540e:	e006      	b.n	800541e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <pbuf_free+0xf8>)
 8005412:	f240 320f 	movw	r2, #783	; 0x30f
 8005416:	490f      	ldr	r1, [pc, #60]	; (8005454 <pbuf_free+0x10c>)
 8005418:	480b      	ldr	r0, [pc, #44]	; (8005448 <pbuf_free+0x100>)
 800541a:	f008 fe99 	bl	800e150 <iprintf>
        }
      }
      count++;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	3301      	adds	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e001      	b.n	800542e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d19f      	bne.n	8005374 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	0800fb90 	.word	0x0800fb90
 8005444:	0800fcf4 	.word	0x0800fcf4
 8005448:	0800fbf0 	.word	0x0800fbf0
 800544c:	0800fd20 	.word	0x0800fd20
 8005450:	0800fd38 	.word	0x0800fd38
 8005454:	0800fd5c 	.word	0x0800fd5c

08005458 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005464:	e005      	b.n	8005472 <pbuf_clen+0x1a>
    ++len;
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	3301      	adds	r3, #1
 800546a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f6      	bne.n	8005466 <pbuf_clen+0xe>
  }
  return len;
 8005478:	89fb      	ldrh	r3, [r7, #14]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d010      	beq.n	80054b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7b9b      	ldrb	r3, [r3, #14]
 800549a:	3301      	adds	r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7b9b      	ldrb	r3, [r3, #14]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <pbuf_ref+0x30>
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <pbuf_ref+0x38>)
 80054ac:	f240 3242 	movw	r2, #834	; 0x342
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <pbuf_ref+0x3c>)
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <pbuf_ref+0x40>)
 80054b4:	f008 fe4c 	bl	800e150 <iprintf>
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	0800fb90 	.word	0x0800fb90
 80054c4:	0800fd70 	.word	0x0800fd70
 80054c8:	0800fbf0 	.word	0x0800fbf0

080054cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <pbuf_cat+0x16>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <pbuf_cat+0x26>
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <pbuf_cat+0x98>)
 80054e4:	f240 3259 	movw	r2, #857	; 0x359
 80054e8:	491f      	ldr	r1, [pc, #124]	; (8005568 <pbuf_cat+0x9c>)
 80054ea:	4820      	ldr	r0, [pc, #128]	; (800556c <pbuf_cat+0xa0>)
 80054ec:	f008 fe30 	bl	800e150 <iprintf>
 80054f0:	e034      	b.n	800555c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e00a      	b.n	800550e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	891a      	ldrh	r2, [r3, #8]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	891b      	ldrh	r3, [r3, #8]
 8005500:	4413      	add	r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	891a      	ldrh	r2, [r3, #8]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	895b      	ldrh	r3, [r3, #10]
 800551e:	429a      	cmp	r2, r3
 8005520:	d006      	beq.n	8005530 <pbuf_cat+0x64>
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <pbuf_cat+0x98>)
 8005524:	f240 3262 	movw	r2, #866	; 0x362
 8005528:	4911      	ldr	r1, [pc, #68]	; (8005570 <pbuf_cat+0xa4>)
 800552a:	4810      	ldr	r0, [pc, #64]	; (800556c <pbuf_cat+0xa0>)
 800552c:	f008 fe10 	bl	800e150 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <pbuf_cat+0x7a>
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <pbuf_cat+0x98>)
 800553a:	f240 3263 	movw	r2, #867	; 0x363
 800553e:	490d      	ldr	r1, [pc, #52]	; (8005574 <pbuf_cat+0xa8>)
 8005540:	480a      	ldr	r0, [pc, #40]	; (800556c <pbuf_cat+0xa0>)
 8005542:	f008 fe05 	bl	800e150 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	891a      	ldrh	r2, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	891b      	ldrh	r3, [r3, #8]
 800554e:	4413      	add	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0800fb90 	.word	0x0800fb90
 8005568:	0800fd84 	.word	0x0800fd84
 800556c:	0800fbf0 	.word	0x0800fbf0
 8005570:	0800fdbc 	.word	0x0800fdbc
 8005574:	0800fdec 	.word	0x0800fdec

08005578 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ffa1 	bl	80054cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800558a:	6838      	ldr	r0, [r7, #0]
 800558c:	f7ff ff7c 	bl	8005488 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <pbuf_copy+0x2a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <pbuf_copy+0x2a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	891a      	ldrh	r2, [r3, #8]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	891b      	ldrh	r3, [r3, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d209      	bcs.n	80055d6 <pbuf_copy+0x3e>
 80055c2:	4b57      	ldr	r3, [pc, #348]	; (8005720 <pbuf_copy+0x188>)
 80055c4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80055c8:	4956      	ldr	r1, [pc, #344]	; (8005724 <pbuf_copy+0x18c>)
 80055ca:	4857      	ldr	r0, [pc, #348]	; (8005728 <pbuf_copy+0x190>)
 80055cc:	f008 fdc0 	bl	800e150 <iprintf>
 80055d0:	f06f 030f 	mvn.w	r3, #15
 80055d4:	e09f      	b.n	8005716 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	895b      	ldrh	r3, [r3, #10]
 80055da:	461a      	mov	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	895b      	ldrh	r3, [r3, #10]
 80055e4:	4619      	mov	r1, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1acb      	subs	r3, r1, r3
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d306      	bcc.n	80055fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	895b      	ldrh	r3, [r3, #10]
 80055f2:	461a      	mov	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e005      	b.n	8005608 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	895b      	ldrh	r3, [r3, #10]
 8005600:	461a      	mov	r2, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	18d0      	adds	r0, r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4619      	mov	r1, r3
 800561c:	f008 fd68 	bl	800e0f0 <memcpy>
    offset_to += len;
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	895b      	ldrh	r3, [r3, #10]
 8005634:	461a      	mov	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4293      	cmp	r3, r2
 800563a:	d906      	bls.n	800564a <pbuf_copy+0xb2>
 800563c:	4b38      	ldr	r3, [pc, #224]	; (8005720 <pbuf_copy+0x188>)
 800563e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005642:	493a      	ldr	r1, [pc, #232]	; (800572c <pbuf_copy+0x194>)
 8005644:	4838      	ldr	r0, [pc, #224]	; (8005728 <pbuf_copy+0x190>)
 8005646:	f008 fd83 	bl	800e150 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	895b      	ldrh	r3, [r3, #10]
 800564e:	461a      	mov	r2, r3
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4293      	cmp	r3, r2
 8005654:	d906      	bls.n	8005664 <pbuf_copy+0xcc>
 8005656:	4b32      	ldr	r3, [pc, #200]	; (8005720 <pbuf_copy+0x188>)
 8005658:	f240 32da 	movw	r2, #986	; 0x3da
 800565c:	4934      	ldr	r1, [pc, #208]	; (8005730 <pbuf_copy+0x198>)
 800565e:	4832      	ldr	r0, [pc, #200]	; (8005728 <pbuf_copy+0x190>)
 8005660:	f008 fd76 	bl	800e150 <iprintf>
    if (offset_from >= p_from->len) {
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	895b      	ldrh	r3, [r3, #10]
 8005668:	461a      	mov	r2, r3
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4293      	cmp	r3, r2
 800566e:	d304      	bcc.n	800567a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	895b      	ldrh	r3, [r3, #10]
 800567e:	461a      	mov	r2, r3
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4293      	cmp	r3, r2
 8005684:	d114      	bne.n	80056b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <pbuf_copy+0x118>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <pbuf_copy+0x118>
 800569c:	4b20      	ldr	r3, [pc, #128]	; (8005720 <pbuf_copy+0x188>)
 800569e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80056a2:	4924      	ldr	r1, [pc, #144]	; (8005734 <pbuf_copy+0x19c>)
 80056a4:	4820      	ldr	r0, [pc, #128]	; (8005728 <pbuf_copy+0x190>)
 80056a6:	f008 fd53 	bl	800e150 <iprintf>
 80056aa:	f06f 030f 	mvn.w	r3, #15
 80056ae:	e032      	b.n	8005716 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d013      	beq.n	80056de <pbuf_copy+0x146>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	895a      	ldrh	r2, [r3, #10]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	891b      	ldrh	r3, [r3, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d10d      	bne.n	80056de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <pbuf_copy+0x146>
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <pbuf_copy+0x188>)
 80056cc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80056d0:	4919      	ldr	r1, [pc, #100]	; (8005738 <pbuf_copy+0x1a0>)
 80056d2:	4815      	ldr	r0, [pc, #84]	; (8005728 <pbuf_copy+0x190>)
 80056d4:	f008 fd3c 	bl	800e150 <iprintf>
 80056d8:	f06f 0305 	mvn.w	r3, #5
 80056dc:	e01b      	b.n	8005716 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <pbuf_copy+0x174>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	895a      	ldrh	r2, [r3, #10]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	891b      	ldrh	r3, [r3, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d10d      	bne.n	800570c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <pbuf_copy+0x174>
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <pbuf_copy+0x188>)
 80056fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80056fe:	490e      	ldr	r1, [pc, #56]	; (8005738 <pbuf_copy+0x1a0>)
 8005700:	4809      	ldr	r0, [pc, #36]	; (8005728 <pbuf_copy+0x190>)
 8005702:	f008 fd25 	bl	800e150 <iprintf>
 8005706:	f06f 0305 	mvn.w	r3, #5
 800570a:	e004      	b.n	8005716 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f af61 	bne.w	80055d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	0800fb90 	.word	0x0800fb90
 8005724:	0800fe38 	.word	0x0800fe38
 8005728:	0800fbf0 	.word	0x0800fbf0
 800572c:	0800fe68 	.word	0x0800fe68
 8005730:	0800fe80 	.word	0x0800fe80
 8005734:	0800fe9c 	.word	0x0800fe9c
 8005738:	0800feac 	.word	0x0800feac

0800573c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4611      	mov	r1, r2
 8005748:	461a      	mov	r2, r3
 800574a:	460b      	mov	r3, r1
 800574c:	80fb      	strh	r3, [r7, #6]
 800574e:	4613      	mov	r3, r2
 8005750:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d108      	bne.n	8005772 <pbuf_copy_partial+0x36>
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <pbuf_copy_partial+0xd4>)
 8005762:	f240 420a 	movw	r2, #1034	; 0x40a
 8005766:	492b      	ldr	r1, [pc, #172]	; (8005814 <pbuf_copy_partial+0xd8>)
 8005768:	482b      	ldr	r0, [pc, #172]	; (8005818 <pbuf_copy_partial+0xdc>)
 800576a:	f008 fcf1 	bl	800e150 <iprintf>
 800576e:	2300      	movs	r3, #0
 8005770:	e04a      	b.n	8005808 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d108      	bne.n	800578a <pbuf_copy_partial+0x4e>
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <pbuf_copy_partial+0xd4>)
 800577a:	f240 420b 	movw	r2, #1035	; 0x40b
 800577e:	4927      	ldr	r1, [pc, #156]	; (800581c <pbuf_copy_partial+0xe0>)
 8005780:	4825      	ldr	r0, [pc, #148]	; (8005818 <pbuf_copy_partial+0xdc>)
 8005782:	f008 fce5 	bl	800e150 <iprintf>
 8005786:	2300      	movs	r3, #0
 8005788:	e03e      	b.n	8005808 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e034      	b.n	80057fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005790:	88bb      	ldrh	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <pbuf_copy_partial+0x70>
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	895b      	ldrh	r3, [r3, #10]
 800579a:	88ba      	ldrh	r2, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d305      	bcc.n	80057ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	895b      	ldrh	r3, [r3, #10]
 80057a4:	88ba      	ldrh	r2, [r7, #4]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	80bb      	strh	r3, [r7, #4]
 80057aa:	e023      	b.n	80057f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	895a      	ldrh	r2, [r3, #10]
 80057b0:	88bb      	ldrh	r3, [r7, #4]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80057b6:	8b3a      	ldrh	r2, [r7, #24]
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d901      	bls.n	80057c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80057c2:	8b7b      	ldrh	r3, [r7, #26]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	18d0      	adds	r0, r2, r3
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	88bb      	ldrh	r3, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	8b3a      	ldrh	r2, [r7, #24]
 80057d2:	4619      	mov	r1, r3
 80057d4:	f008 fc8c 	bl	800e0f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80057d8:	8afa      	ldrh	r2, [r7, #22]
 80057da:	8b3b      	ldrh	r3, [r7, #24]
 80057dc:	4413      	add	r3, r2
 80057de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80057e0:	8b7a      	ldrh	r2, [r7, #26]
 80057e2:	8b3b      	ldrh	r3, [r7, #24]
 80057e4:	4413      	add	r3, r2
 80057e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	8b3b      	ldrh	r3, [r7, #24]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <pbuf_copy_partial+0xca>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1c4      	bne.n	8005790 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005806:	8afb      	ldrh	r3, [r7, #22]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0800fb90 	.word	0x0800fb90
 8005814:	0800fed8 	.word	0x0800fed8
 8005818:	0800fbf0 	.word	0x0800fbf0
 800581c:	0800fef8 	.word	0x0800fef8

08005820 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <pbuf_take+0x30>
 800583c:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <pbuf_take+0x108>)
 800583e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005842:	493a      	ldr	r1, [pc, #232]	; (800592c <pbuf_take+0x10c>)
 8005844:	483a      	ldr	r0, [pc, #232]	; (8005930 <pbuf_take+0x110>)
 8005846:	f008 fc83 	bl	800e150 <iprintf>
 800584a:	f06f 030f 	mvn.w	r3, #15
 800584e:	e067      	b.n	8005920 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <pbuf_take+0x4a>
 8005856:	4b34      	ldr	r3, [pc, #208]	; (8005928 <pbuf_take+0x108>)
 8005858:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800585c:	4935      	ldr	r1, [pc, #212]	; (8005934 <pbuf_take+0x114>)
 800585e:	4834      	ldr	r0, [pc, #208]	; (8005930 <pbuf_take+0x110>)
 8005860:	f008 fc76 	bl	800e150 <iprintf>
 8005864:	f06f 030f 	mvn.w	r3, #15
 8005868:	e05a      	b.n	8005920 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	891b      	ldrh	r3, [r3, #8]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	429a      	cmp	r2, r3
 8005872:	d909      	bls.n	8005888 <pbuf_take+0x68>
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <pbuf_take+0x108>)
 8005876:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800587a:	492f      	ldr	r1, [pc, #188]	; (8005938 <pbuf_take+0x118>)
 800587c:	482c      	ldr	r0, [pc, #176]	; (8005930 <pbuf_take+0x110>)
 800587e:	f008 fc67 	bl	800e150 <iprintf>
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	e04b      	b.n	8005920 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <pbuf_take+0x7e>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <pbuf_take+0x7e>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	891b      	ldrh	r3, [r3, #8]
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	429a      	cmp	r2, r3
 800589c:	d902      	bls.n	80058a4 <pbuf_take+0x84>
    return ERR_ARG;
 800589e:	f06f 030f 	mvn.w	r3, #15
 80058a2:	e03d      	b.n	8005920 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e028      	b.n	80058fc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <pbuf_take+0x9e>
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <pbuf_take+0x108>)
 80058b2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80058b6:	4921      	ldr	r1, [pc, #132]	; (800593c <pbuf_take+0x11c>)
 80058b8:	481d      	ldr	r0, [pc, #116]	; (8005930 <pbuf_take+0x110>)
 80058ba:	f008 fc49 	bl	800e150 <iprintf>
    buf_copy_len = total_copy_len;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	895b      	ldrh	r3, [r3, #10]
 80058c6:	461a      	mov	r2, r3
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d902      	bls.n	80058d4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	895b      	ldrh	r3, [r3, #10]
 80058d2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	6858      	ldr	r0, [r3, #4]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f008 fc05 	bl	800e0f0 <memcpy>
    total_copy_len -= buf_copy_len;
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	4413      	add	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1d3      	bne.n	80058aa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <pbuf_take+0xf0>
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d006      	beq.n	800591e <pbuf_take+0xfe>
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <pbuf_take+0x108>)
 8005912:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005916:	490a      	ldr	r1, [pc, #40]	; (8005940 <pbuf_take+0x120>)
 8005918:	4805      	ldr	r0, [pc, #20]	; (8005930 <pbuf_take+0x110>)
 800591a:	f008 fc19 	bl	800e150 <iprintf>
  return ERR_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	0800fb90 	.word	0x0800fb90
 800592c:	0800ff68 	.word	0x0800ff68
 8005930:	0800fbf0 	.word	0x0800fbf0
 8005934:	0800ff80 	.word	0x0800ff80
 8005938:	0800ff9c 	.word	0x0800ff9c
 800593c:	0800ffbc 	.word	0x0800ffbc
 8005940:	0800ffd4 	.word	0x0800ffd4

08005944 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	603a      	str	r2, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
 8005950:	460b      	mov	r3, r1
 8005952:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	8919      	ldrh	r1, [r3, #8]
 8005958:	88ba      	ldrh	r2, [r7, #4]
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fa0f 	bl	8004d80 <pbuf_alloc>
 8005962:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <pbuf_clone+0x2a>
    return NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	e011      	b.n	8005992 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fe11 	bl	8005598 <pbuf_copy>
 8005976:	4603      	mov	r3, r0
 8005978:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800597a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <pbuf_clone+0x4c>
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <pbuf_clone+0x58>)
 8005984:	f240 5224 	movw	r2, #1316	; 0x524
 8005988:	4905      	ldr	r1, [pc, #20]	; (80059a0 <pbuf_clone+0x5c>)
 800598a:	4806      	ldr	r0, [pc, #24]	; (80059a4 <pbuf_clone+0x60>)
 800598c:	f008 fbe0 	bl	800e150 <iprintf>
  return q;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	0800fb90 	.word	0x0800fb90
 80059a0:	08010004 	.word	0x08010004
 80059a4:	0800fbf0 	.word	0x0800fbf0

080059a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80059ac:	f008 fbe8 	bl	800e180 <rand>
 80059b0:	4603      	mov	r3, r0
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <tcp_init+0x20>)
 80059c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000000a 	.word	0x2000000a

080059cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7d1b      	ldrb	r3, [r3, #20]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <tcp_free+0x1c>
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <tcp_free+0x2c>)
 80059de:	22d4      	movs	r2, #212	; 0xd4
 80059e0:	4906      	ldr	r1, [pc, #24]	; (80059fc <tcp_free+0x30>)
 80059e2:	4807      	ldr	r0, [pc, #28]	; (8005a00 <tcp_free+0x34>)
 80059e4:	f008 fbb4 	bl	800e150 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	2001      	movs	r0, #1
 80059ec:	f7fe fe36 	bl	800465c <memp_free>
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08010090 	.word	0x08010090
 80059fc:	080100c0 	.word	0x080100c0
 8005a00:	080100d4 	.word	0x080100d4

08005a04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7d1b      	ldrb	r3, [r3, #20]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d105      	bne.n	8005a20 <tcp_free_listen+0x1c>
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <tcp_free_listen+0x2c>)
 8005a16:	22df      	movs	r2, #223	; 0xdf
 8005a18:	4906      	ldr	r1, [pc, #24]	; (8005a34 <tcp_free_listen+0x30>)
 8005a1a:	4807      	ldr	r0, [pc, #28]	; (8005a38 <tcp_free_listen+0x34>)
 8005a1c:	f008 fb98 	bl	800e150 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	2002      	movs	r0, #2
 8005a24:	f7fe fe1a 	bl	800465c <memp_free>
}
 8005a28:	bf00      	nop
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	08010090 	.word	0x08010090
 8005a34:	080100fc 	.word	0x080100fc
 8005a38:	080100d4 	.word	0x080100d4

08005a3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005a40:	f000 fea2 	bl	8006788 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <tcp_tmr+0x28>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <tcp_tmr+0x28>)
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <tcp_tmr+0x28>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005a5c:	f000 fb54 	bl	8006108 <tcp_slowtmr>
  }
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	2000587d 	.word	0x2000587d

08005a68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <tcp_remove_listener+0x1c>
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <tcp_remove_listener+0x48>)
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	490d      	ldr	r1, [pc, #52]	; (8005ab4 <tcp_remove_listener+0x4c>)
 8005a7e:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <tcp_remove_listener+0x50>)
 8005a80:	f008 fb66 	bl	800e150 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e00a      	b.n	8005aa0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d102      	bne.n	8005a9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f1      	bne.n	8005a8a <tcp_remove_listener+0x22>
    }
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08010090 	.word	0x08010090
 8005ab4:	08010118 	.word	0x08010118
 8005ab8:	080100d4 	.word	0x080100d4

08005abc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <tcp_listen_closed+0x1c>
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <tcp_listen_closed+0x60>)
 8005acc:	f240 1211 	movw	r2, #273	; 0x111
 8005ad0:	4913      	ldr	r1, [pc, #76]	; (8005b20 <tcp_listen_closed+0x64>)
 8005ad2:	4814      	ldr	r0, [pc, #80]	; (8005b24 <tcp_listen_closed+0x68>)
 8005ad4:	f008 fb3c 	bl	800e150 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7d1b      	ldrb	r3, [r3, #20]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d006      	beq.n	8005aee <tcp_listen_closed+0x32>
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <tcp_listen_closed+0x60>)
 8005ae2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005ae6:	4910      	ldr	r1, [pc, #64]	; (8005b28 <tcp_listen_closed+0x6c>)
 8005ae8:	480e      	ldr	r0, [pc, #56]	; (8005b24 <tcp_listen_closed+0x68>)
 8005aea:	f008 fb31 	bl	800e150 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005aee:	2301      	movs	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e00b      	b.n	8005b0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <tcp_listen_closed+0x70>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ffb1 	bl	8005a68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d9f0      	bls.n	8005af4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	08010090 	.word	0x08010090
 8005b20:	08010140 	.word	0x08010140
 8005b24:	080100d4 	.word	0x080100d4
 8005b28:	0801014c 	.word	0x0801014c
 8005b2c:	0801205c 	.word	0x0801205c

08005b30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005b30:	b5b0      	push	{r4, r5, r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af04      	add	r7, sp, #16
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <tcp_close_shutdown+0x20>
 8005b42:	4b63      	ldr	r3, [pc, #396]	; (8005cd0 <tcp_close_shutdown+0x1a0>)
 8005b44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005b48:	4962      	ldr	r1, [pc, #392]	; (8005cd4 <tcp_close_shutdown+0x1a4>)
 8005b4a:	4863      	ldr	r0, [pc, #396]	; (8005cd8 <tcp_close_shutdown+0x1a8>)
 8005b4c:	f008 fb00 	bl	800e150 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d066      	beq.n	8005c24 <tcp_close_shutdown+0xf4>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	7d1b      	ldrb	r3, [r3, #20]
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d003      	beq.n	8005b66 <tcp_close_shutdown+0x36>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7d1b      	ldrb	r3, [r3, #20]
 8005b62:	2b07      	cmp	r3, #7
 8005b64:	d15e      	bne.n	8005c24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <tcp_close_shutdown+0x48>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005b76:	d055      	beq.n	8005c24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8b5b      	ldrh	r3, [r3, #26]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <tcp_close_shutdown+0x62>
 8005b84:	4b52      	ldr	r3, [pc, #328]	; (8005cd0 <tcp_close_shutdown+0x1a0>)
 8005b86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005b8a:	4954      	ldr	r1, [pc, #336]	; (8005cdc <tcp_close_shutdown+0x1ac>)
 8005b8c:	4852      	ldr	r0, [pc, #328]	; (8005cd8 <tcp_close_shutdown+0x1a8>)
 8005b8e:	f008 fadf 	bl	800e150 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005b9a:	687d      	ldr	r5, [r7, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	8ad2      	ldrh	r2, [r2, #22]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	8b09      	ldrh	r1, [r1, #24]
 8005ba8:	9102      	str	r1, [sp, #8]
 8005baa:	9201      	str	r2, [sp, #4]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	462b      	mov	r3, r5
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f004 fe91 	bl	800a8dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 f8c6 	bl	8006d4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <tcp_close_shutdown+0x1b0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d105      	bne.n	8005bd6 <tcp_close_shutdown+0xa6>
 8005bca:	4b45      	ldr	r3, [pc, #276]	; (8005ce0 <tcp_close_shutdown+0x1b0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a43      	ldr	r2, [pc, #268]	; (8005ce0 <tcp_close_shutdown+0x1b0>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e013      	b.n	8005bfe <tcp_close_shutdown+0xce>
 8005bd6:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <tcp_close_shutdown+0x1b0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e00c      	b.n	8005bf8 <tcp_close_shutdown+0xc8>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d104      	bne.n	8005bf2 <tcp_close_shutdown+0xc2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e005      	b.n	8005bfe <tcp_close_shutdown+0xce>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ef      	bne.n	8005bde <tcp_close_shutdown+0xae>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <tcp_close_shutdown+0x1b4>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <tcp_close_shutdown+0x1b8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d102      	bne.n	8005c1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005c14:	f003 fd5e 	bl	80096d4 <tcp_trigger_input_pcb_close>
 8005c18:	e002      	b.n	8005c20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fed6 	bl	80059cc <tcp_free>
      }
      return ERR_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e050      	b.n	8005cc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7d1b      	ldrb	r3, [r3, #20]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d03b      	beq.n	8005ca4 <tcp_close_shutdown+0x174>
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	dc44      	bgt.n	8005cba <tcp_close_shutdown+0x18a>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <tcp_close_shutdown+0x10a>
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d02a      	beq.n	8005c8e <tcp_close_shutdown+0x15e>
 8005c38:	e03f      	b.n	8005cba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8adb      	ldrh	r3, [r3, #22]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d021      	beq.n	8005c86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c42:	4b2a      	ldr	r3, [pc, #168]	; (8005cec <tcp_close_shutdown+0x1bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d105      	bne.n	8005c58 <tcp_close_shutdown+0x128>
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <tcp_close_shutdown+0x1bc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4a26      	ldr	r2, [pc, #152]	; (8005cec <tcp_close_shutdown+0x1bc>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e013      	b.n	8005c80 <tcp_close_shutdown+0x150>
 8005c58:	4b24      	ldr	r3, [pc, #144]	; (8005cec <tcp_close_shutdown+0x1bc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	e00c      	b.n	8005c7a <tcp_close_shutdown+0x14a>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d104      	bne.n	8005c74 <tcp_close_shutdown+0x144>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	60da      	str	r2, [r3, #12]
 8005c72:	e005      	b.n	8005c80 <tcp_close_shutdown+0x150>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ef      	bne.n	8005c60 <tcp_close_shutdown+0x130>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fea0 	bl	80059cc <tcp_free>
      break;
 8005c8c:	e01a      	b.n	8005cc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ff14 	bl	8005abc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4816      	ldr	r0, [pc, #88]	; (8005cf0 <tcp_close_shutdown+0x1c0>)
 8005c98:	f001 f8a8 	bl	8006dec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff feb1 	bl	8005a04 <tcp_free_listen>
      break;
 8005ca2:	e00f      	b.n	8005cc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	480e      	ldr	r0, [pc, #56]	; (8005ce0 <tcp_close_shutdown+0x1b0>)
 8005ca8:	f001 f8a0 	bl	8006dec <tcp_pcb_remove>
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <tcp_close_shutdown+0x1b4>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fe8a 	bl	80059cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005cb8:	e004      	b.n	8005cc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f81a 	bl	8005cf4 <tcp_close_shutdown_fin>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	e000      	b.n	8005cc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	08010090 	.word	0x08010090
 8005cd4:	08010164 	.word	0x08010164
 8005cd8:	080100d4 	.word	0x080100d4
 8005cdc:	08010184 	.word	0x08010184
 8005ce0:	20005874 	.word	0x20005874
 8005ce4:	2000587c 	.word	0x2000587c
 8005ce8:	200058b4 	.word	0x200058b4
 8005cec:	2000586c 	.word	0x2000586c
 8005cf0:	20005870 	.word	0x20005870

08005cf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <tcp_close_shutdown_fin+0x1c>
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <tcp_close_shutdown_fin+0xc8>)
 8005d04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005d08:	492d      	ldr	r1, [pc, #180]	; (8005dc0 <tcp_close_shutdown_fin+0xcc>)
 8005d0a:	482e      	ldr	r0, [pc, #184]	; (8005dc4 <tcp_close_shutdown_fin+0xd0>)
 8005d0c:	f008 fa20 	bl	800e150 <iprintf>

  switch (pcb->state) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	7d1b      	ldrb	r3, [r3, #20]
 8005d14:	2b07      	cmp	r3, #7
 8005d16:	d020      	beq.n	8005d5a <tcp_close_shutdown_fin+0x66>
 8005d18:	2b07      	cmp	r3, #7
 8005d1a:	dc2b      	bgt.n	8005d74 <tcp_close_shutdown_fin+0x80>
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d002      	beq.n	8005d26 <tcp_close_shutdown_fin+0x32>
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d00d      	beq.n	8005d40 <tcp_close_shutdown_fin+0x4c>
 8005d24:	e026      	b.n	8005d74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f003 fee6 	bl	8009af8 <tcp_send_fin>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11f      	bne.n	8005d78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2205      	movs	r2, #5
 8005d3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d3e:	e01b      	b.n	8005d78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f003 fed9 	bl	8009af8 <tcp_send_fin>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d114      	bne.n	8005d7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2205      	movs	r2, #5
 8005d56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d58:	e010      	b.n	8005d7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f003 fecc 	bl	8009af8 <tcp_send_fin>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2209      	movs	r2, #9
 8005d70:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005d72:	e005      	b.n	8005d80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e01c      	b.n	8005db2 <tcp_close_shutdown_fin+0xbe>
      break;
 8005d78:	bf00      	nop
 8005d7a:	e002      	b.n	8005d82 <tcp_close_shutdown_fin+0x8e>
      break;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <tcp_close_shutdown_fin+0x8e>
      break;
 8005d80:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f003 fff2 	bl	8009d74 <tcp_output>
 8005d90:	e00d      	b.n	8005dae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d108      	bne.n	8005dae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8b5b      	ldrh	r3, [r3, #26]
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e001      	b.n	8005db2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	08010090 	.word	0x08010090
 8005dc0:	08010140 	.word	0x08010140
 8005dc4:	080100d4 	.word	0x080100d4

08005dc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <tcp_close+0x22>
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <tcp_close+0x4c>)
 8005dd8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005ddc:	490e      	ldr	r1, [pc, #56]	; (8005e18 <tcp_close+0x50>)
 8005dde:	480f      	ldr	r0, [pc, #60]	; (8005e1c <tcp_close+0x54>)
 8005de0:	f008 f9b6 	bl	800e150 <iprintf>
 8005de4:	f06f 030f 	mvn.w	r3, #15
 8005de8:	e00f      	b.n	8005e0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7d1b      	ldrb	r3, [r3, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d006      	beq.n	8005e00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8b5b      	ldrh	r3, [r3, #26]
 8005df6:	f043 0310 	orr.w	r3, r3, #16
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005e00:	2101      	movs	r1, #1
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fe94 	bl	8005b30 <tcp_close_shutdown>
 8005e08:	4603      	mov	r3, r0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08010090 	.word	0x08010090
 8005e18:	080101a0 	.word	0x080101a0
 8005e1c:	080100d4 	.word	0x080100d4

08005e20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08e      	sub	sp, #56	; 0x38
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <tcp_abandon+0x20>
 8005e30:	4b52      	ldr	r3, [pc, #328]	; (8005f7c <tcp_abandon+0x15c>)
 8005e32:	f240 223d 	movw	r2, #573	; 0x23d
 8005e36:	4952      	ldr	r1, [pc, #328]	; (8005f80 <tcp_abandon+0x160>)
 8005e38:	4852      	ldr	r0, [pc, #328]	; (8005f84 <tcp_abandon+0x164>)
 8005e3a:	f008 f989 	bl	800e150 <iprintf>
 8005e3e:	e099      	b.n	8005f74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7d1b      	ldrb	r3, [r3, #20]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d106      	bne.n	8005e56 <tcp_abandon+0x36>
 8005e48:	4b4c      	ldr	r3, [pc, #304]	; (8005f7c <tcp_abandon+0x15c>)
 8005e4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005e4e:	494e      	ldr	r1, [pc, #312]	; (8005f88 <tcp_abandon+0x168>)
 8005e50:	484c      	ldr	r0, [pc, #304]	; (8005f84 <tcp_abandon+0x164>)
 8005e52:	f008 f97d 	bl	800e150 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7d1b      	ldrb	r3, [r3, #20]
 8005e5a:	2b0a      	cmp	r3, #10
 8005e5c:	d107      	bne.n	8005e6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	484a      	ldr	r0, [pc, #296]	; (8005f8c <tcp_abandon+0x16c>)
 8005e62:	f000 ffc3 	bl	8006dec <tcp_pcb_remove>
    tcp_free(pcb);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fdb0 	bl	80059cc <tcp_free>
 8005e6c:	e082      	b.n	8005f74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	7d1b      	ldrb	r3, [r3, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d126      	bne.n	8005ee6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8adb      	ldrh	r3, [r3, #22]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02e      	beq.n	8005efe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <tcp_abandon+0x170>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d105      	bne.n	8005eb6 <tcp_abandon+0x96>
 8005eaa:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <tcp_abandon+0x170>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a37      	ldr	r2, [pc, #220]	; (8005f90 <tcp_abandon+0x170>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e013      	b.n	8005ede <tcp_abandon+0xbe>
 8005eb6:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <tcp_abandon+0x170>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e00c      	b.n	8005ed8 <tcp_abandon+0xb8>
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d104      	bne.n	8005ed2 <tcp_abandon+0xb2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e005      	b.n	8005ede <tcp_abandon+0xbe>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ef      	bne.n	8005ebe <tcp_abandon+0x9e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	60da      	str	r2, [r3, #12]
 8005ee4:	e00b      	b.n	8005efe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8adb      	ldrh	r3, [r3, #22]
 8005eee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4828      	ldr	r0, [pc, #160]	; (8005f94 <tcp_abandon+0x174>)
 8005ef4:	f000 ff7a 	bl	8006dec <tcp_pcb_remove>
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <tcp_abandon+0x178>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fd1c 	bl	8006948 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fd13 	bl	8006948 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fd0a 	bl	8006948 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	8b12      	ldrh	r2, [r2, #24]
 8005f44:	9202      	str	r2, [sp, #8]
 8005f46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005f48:	9201      	str	r2, [sp, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f004 fcc2 	bl	800a8dc <tcp_rst>
    }
    last_state = pcb->state;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7d1b      	ldrb	r3, [r3, #20]
 8005f5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fd34 	bl	80059cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <tcp_abandon+0x154>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f06f 010c 	mvn.w	r1, #12
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	4798      	blx	r3
  }
}
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	08010090 	.word	0x08010090
 8005f80:	080101d4 	.word	0x080101d4
 8005f84:	080100d4 	.word	0x080100d4
 8005f88:	080101f0 	.word	0x080101f0
 8005f8c:	20005878 	.word	0x20005878
 8005f90:	2000586c 	.word	0x2000586c
 8005f94:	20005874 	.word	0x20005874
 8005f98:	2000587c 	.word	0x2000587c

08005f9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ff3a 	bl	8005e20 <tcp_abandon>
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <tcp_update_rcv_ann_wnd+0x1c>
 8005fc2:	4b25      	ldr	r3, [pc, #148]	; (8006058 <tcp_update_rcv_ann_wnd+0xa4>)
 8005fc4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005fc8:	4924      	ldr	r1, [pc, #144]	; (800605c <tcp_update_rcv_ann_wnd+0xa8>)
 8005fca:	4825      	ldr	r0, [pc, #148]	; (8006060 <tcp_update_rcv_ann_wnd+0xac>)
 8005fcc:	f008 f8c0 	bl	800e150 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005fd8:	4413      	add	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005fe4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005fe8:	bf28      	it	cs
 8005fea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db08      	blt.n	800600c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	e020      	b.n	800604e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	dd03      	ble.n	8006022 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006020:	e014      	b.n	800604c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d306      	bcc.n	8006044 <tcp_update_rcv_ann_wnd+0x90>
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <tcp_update_rcv_ann_wnd+0xa4>)
 8006038:	f240 32b6 	movw	r2, #950	; 0x3b6
 800603c:	4909      	ldr	r1, [pc, #36]	; (8006064 <tcp_update_rcv_ann_wnd+0xb0>)
 800603e:	4808      	ldr	r0, [pc, #32]	; (8006060 <tcp_update_rcv_ann_wnd+0xac>)
 8006040:	f008 f886 	bl	800e150 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	b29a      	uxth	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800604c:	2300      	movs	r3, #0
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08010090 	.word	0x08010090
 800605c:	080102ec 	.word	0x080102ec
 8006060:	080100d4 	.word	0x080100d4
 8006064:	08010310 	.word	0x08010310

08006068 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <tcp_recved+0x22>
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <tcp_recved+0x90>)
 800607c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006080:	491e      	ldr	r1, [pc, #120]	; (80060fc <tcp_recved+0x94>)
 8006082:	481f      	ldr	r0, [pc, #124]	; (8006100 <tcp_recved+0x98>)
 8006084:	f008 f864 	bl	800e150 <iprintf>
 8006088:	e032      	b.n	80060f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7d1b      	ldrb	r3, [r3, #20]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d106      	bne.n	80060a0 <tcp_recved+0x38>
 8006092:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <tcp_recved+0x90>)
 8006094:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006098:	491a      	ldr	r1, [pc, #104]	; (8006104 <tcp_recved+0x9c>)
 800609a:	4819      	ldr	r0, [pc, #100]	; (8006100 <tcp_recved+0x98>)
 800609c:	f008 f858 	bl	800e150 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	4413      	add	r3, r2
 80060a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060b0:	d804      	bhi.n	80060bc <tcp_recved+0x54>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d204      	bcs.n	80060c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80060c4:	e002      	b.n	80060cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	89fa      	ldrh	r2, [r7, #14]
 80060ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff71 	bl	8005fb4 <tcp_update_rcv_ann_wnd>
 80060d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80060da:	d309      	bcc.n	80060f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8b5b      	ldrh	r3, [r3, #26]
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f003 fe42 	bl	8009d74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	08010090 	.word	0x08010090
 80060fc:	0801032c 	.word	0x0801032c
 8006100:	080100d4 	.word	0x080100d4
 8006104:	08010344 	.word	0x08010344

08006108 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006108:	b5b0      	push	{r4, r5, r7, lr}
 800610a:	b090      	sub	sp, #64	; 0x40
 800610c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006114:	4b94      	ldr	r3, [pc, #592]	; (8006368 <tcp_slowtmr+0x260>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	4a93      	ldr	r2, [pc, #588]	; (8006368 <tcp_slowtmr+0x260>)
 800611c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800611e:	4b93      	ldr	r3, [pc, #588]	; (800636c <tcp_slowtmr+0x264>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	4b91      	ldr	r3, [pc, #580]	; (800636c <tcp_slowtmr+0x264>)
 8006128:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800612e:	4b90      	ldr	r3, [pc, #576]	; (8006370 <tcp_slowtmr+0x268>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006134:	e29d      	b.n	8006672 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	7d1b      	ldrb	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <tcp_slowtmr+0x44>
 800613e:	4b8d      	ldr	r3, [pc, #564]	; (8006374 <tcp_slowtmr+0x26c>)
 8006140:	f240 42be 	movw	r2, #1214	; 0x4be
 8006144:	498c      	ldr	r1, [pc, #560]	; (8006378 <tcp_slowtmr+0x270>)
 8006146:	488d      	ldr	r0, [pc, #564]	; (800637c <tcp_slowtmr+0x274>)
 8006148:	f008 f802 	bl	800e150 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	7d1b      	ldrb	r3, [r3, #20]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d106      	bne.n	8006162 <tcp_slowtmr+0x5a>
 8006154:	4b87      	ldr	r3, [pc, #540]	; (8006374 <tcp_slowtmr+0x26c>)
 8006156:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800615a:	4989      	ldr	r1, [pc, #548]	; (8006380 <tcp_slowtmr+0x278>)
 800615c:	4887      	ldr	r0, [pc, #540]	; (800637c <tcp_slowtmr+0x274>)
 800615e:	f007 fff7 	bl	800e150 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	7d1b      	ldrb	r3, [r3, #20]
 8006166:	2b0a      	cmp	r3, #10
 8006168:	d106      	bne.n	8006178 <tcp_slowtmr+0x70>
 800616a:	4b82      	ldr	r3, [pc, #520]	; (8006374 <tcp_slowtmr+0x26c>)
 800616c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006170:	4984      	ldr	r1, [pc, #528]	; (8006384 <tcp_slowtmr+0x27c>)
 8006172:	4882      	ldr	r0, [pc, #520]	; (800637c <tcp_slowtmr+0x274>)
 8006174:	f007 ffec 	bl	800e150 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	7f9a      	ldrb	r2, [r3, #30]
 800617c:	4b7b      	ldr	r3, [pc, #492]	; (800636c <tcp_slowtmr+0x264>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d105      	bne.n	8006190 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800618e:	e270      	b.n	8006672 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006190:	4b76      	ldr	r3, [pc, #472]	; (800636c <tcp_slowtmr+0x264>)
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	7d1b      	ldrb	r3, [r3, #20]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d10a      	bne.n	80061c2 <tcp_slowtmr+0xba>
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d905      	bls.n	80061c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80061b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ba:	3301      	adds	r3, #1
 80061bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061c0:	e11e      	b.n	8006400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061c8:	2b0b      	cmp	r3, #11
 80061ca:	d905      	bls.n	80061d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80061cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d0:	3301      	adds	r3, #1
 80061d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061d6:	e113      	b.n	8006400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <tcp_slowtmr+0xf0>
 80061ea:	4b62      	ldr	r3, [pc, #392]	; (8006374 <tcp_slowtmr+0x26c>)
 80061ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80061f0:	4965      	ldr	r1, [pc, #404]	; (8006388 <tcp_slowtmr+0x280>)
 80061f2:	4862      	ldr	r0, [pc, #392]	; (800637c <tcp_slowtmr+0x274>)
 80061f4:	f007 ffac 	bl	800e150 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <tcp_slowtmr+0x106>
 8006200:	4b5c      	ldr	r3, [pc, #368]	; (8006374 <tcp_slowtmr+0x26c>)
 8006202:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006206:	4961      	ldr	r1, [pc, #388]	; (800638c <tcp_slowtmr+0x284>)
 8006208:	485c      	ldr	r0, [pc, #368]	; (800637c <tcp_slowtmr+0x274>)
 800620a:	f007 ffa1 	bl	800e150 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006214:	2b0b      	cmp	r3, #11
 8006216:	d905      	bls.n	8006224 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800621c:	3301      	adds	r3, #1
 800621e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006222:	e0ed      	b.n	8006400 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800622a:	3b01      	subs	r3, #1
 800622c:	4a58      	ldr	r2, [pc, #352]	; (8006390 <tcp_slowtmr+0x288>)
 800622e:	5cd3      	ldrb	r3, [r2, r3]
 8006230:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006238:	7c7a      	ldrb	r2, [r7, #17]
 800623a:	429a      	cmp	r2, r3
 800623c:	d907      	bls.n	800624e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006244:	3301      	adds	r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006254:	7c7a      	ldrb	r2, [r7, #17]
 8006256:	429a      	cmp	r2, r3
 8006258:	f200 80d2 	bhi.w	8006400 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800625c:	2301      	movs	r3, #1
 800625e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800626a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800626c:	f004 fc2a 	bl	800aac4 <tcp_zero_window_probe>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d014      	beq.n	80062a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006276:	2300      	movs	r3, #0
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	e011      	b.n	80062a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006282:	4619      	mov	r1, r3
 8006284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006286:	f003 faef 	bl	8009868 <tcp_split_unsent_seg>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006292:	f003 fd6f 	bl	8009d74 <tcp_output>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80ac 	beq.w	8006400 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	f200 80a2 	bhi.w	8006400 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062c2:	3301      	adds	r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80062cc:	e098      	b.n	8006400 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0f      	blt.n	80062f8 <tcp_slowtmr+0x1f0>
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80062de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d008      	beq.n	80062f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3301      	adds	r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b21a      	sxth	r2, r3
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006304:	429a      	cmp	r2, r3
 8006306:	db7b      	blt.n	8006400 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800630a:	f004 f825 	bl	800a358 <tcp_rexmit_rto_prepare>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <tcp_slowtmr+0x21c>
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	2b00      	cmp	r3, #0
 800631a:	d171      	bne.n	8006400 <tcp_slowtmr+0x2f8>
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d06d      	beq.n	8006400 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	7d1b      	ldrb	r3, [r3, #20]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d03a      	beq.n	80063a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006332:	2b0c      	cmp	r3, #12
 8006334:	bf28      	it	cs
 8006336:	230c      	movcs	r3, #12
 8006338:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006340:	10db      	asrs	r3, r3, #3
 8006342:	b21b      	sxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800634c:	4413      	add	r3, r2
 800634e:	7efa      	ldrb	r2, [r7, #27]
 8006350:	4910      	ldr	r1, [pc, #64]	; (8006394 <tcp_slowtmr+0x28c>)
 8006352:	5c8a      	ldrb	r2, [r1, r2]
 8006354:	4093      	lsls	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800635e:	4293      	cmp	r3, r2
 8006360:	dc1a      	bgt.n	8006398 <tcp_slowtmr+0x290>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	b21a      	sxth	r2, r3
 8006366:	e019      	b.n	800639c <tcp_slowtmr+0x294>
 8006368:	20005868 	.word	0x20005868
 800636c:	2000587e 	.word	0x2000587e
 8006370:	20005874 	.word	0x20005874
 8006374:	08010090 	.word	0x08010090
 8006378:	080103d4 	.word	0x080103d4
 800637c:	080100d4 	.word	0x080100d4
 8006380:	08010400 	.word	0x08010400
 8006384:	0801042c 	.word	0x0801042c
 8006388:	0801045c 	.word	0x0801045c
 800638c:	08010490 	.word	0x08010490
 8006390:	08012054 	.word	0x08012054
 8006394:	08012044 	.word	0x08012044
 8006398:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	2200      	movs	r2, #0
 80063a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf28      	it	cs
 80063b8:	4613      	movcs	r3, r2
 80063ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d206      	bcs.n	80063e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80063fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fc:	f004 f81c 	bl	800a438 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	7d1b      	ldrb	r3, [r3, #20]
 8006404:	2b06      	cmp	r3, #6
 8006406:	d111      	bne.n	800642c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	8b5b      	ldrh	r3, [r3, #26]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006414:	4b9c      	ldr	r3, [pc, #624]	; (8006688 <tcp_slowtmr+0x580>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b28      	cmp	r3, #40	; 0x28
 8006420:	d904      	bls.n	800642c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006426:	3301      	adds	r3, #1
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	7a5b      	ldrb	r3, [r3, #9]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d04a      	beq.n	80064ce <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800643c:	2b04      	cmp	r3, #4
 800643e:	d003      	beq.n	8006448 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006444:	2b07      	cmp	r3, #7
 8006446:	d142      	bne.n	80064ce <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006448:	4b8f      	ldr	r3, [pc, #572]	; (8006688 <tcp_slowtmr+0x580>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006458:	4b8c      	ldr	r3, [pc, #560]	; (800668c <tcp_slowtmr+0x584>)
 800645a:	440b      	add	r3, r1
 800645c:	498c      	ldr	r1, [pc, #560]	; (8006690 <tcp_slowtmr+0x588>)
 800645e:	fba1 1303 	umull	r1, r3, r1, r3
 8006462:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006464:	429a      	cmp	r2, r3
 8006466:	d90a      	bls.n	800647e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800646c:	3301      	adds	r3, #1
 800646e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006476:	3301      	adds	r3, #1
 8006478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800647c:	e027      	b.n	80064ce <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800647e:	4b82      	ldr	r3, [pc, #520]	; (8006688 <tcp_slowtmr+0x580>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006494:	4618      	mov	r0, r3
 8006496:	4b7f      	ldr	r3, [pc, #508]	; (8006694 <tcp_slowtmr+0x58c>)
 8006498:	fb00 f303 	mul.w	r3, r0, r3
 800649c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800649e:	497c      	ldr	r1, [pc, #496]	; (8006690 <tcp_slowtmr+0x588>)
 80064a0:	fba1 1303 	umull	r1, r3, r1, r3
 80064a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d911      	bls.n	80064ce <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80064aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ac:	f004 faca 	bl	800aa44 <tcp_keepalive>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80064b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d107      	bne.n	80064ce <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80064d6:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <tcp_slowtmr+0x580>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80064e6:	4619      	mov	r1, r3
 80064e8:	460b      	mov	r3, r1
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	440b      	add	r3, r1
 80064ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80064f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f6:	f000 fddd 	bl	80070b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	7d1b      	ldrb	r3, [r3, #20]
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d10b      	bne.n	800651a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006502:	4b61      	ldr	r3, [pc, #388]	; (8006688 <tcp_slowtmr+0x580>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b28      	cmp	r3, #40	; 0x28
 800650e:	d904      	bls.n	800651a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006514:	3301      	adds	r3, #1
 8006516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	7d1b      	ldrb	r3, [r3, #20]
 800651e:	2b09      	cmp	r3, #9
 8006520:	d10b      	bne.n	800653a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006522:	4b59      	ldr	r3, [pc, #356]	; (8006688 <tcp_slowtmr+0x580>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2bf0      	cmp	r3, #240	; 0xf0
 800652e:	d904      	bls.n	800653a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006534:	3301      	adds	r3, #1
 8006536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800653a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653e:	2b00      	cmp	r3, #0
 8006540:	d060      	beq.n	8006604 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800654a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654c:	f000 fbfe 	bl	8006d4c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006556:	4b50      	ldr	r3, [pc, #320]	; (8006698 <tcp_slowtmr+0x590>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d106      	bne.n	800656e <tcp_slowtmr+0x466>
 8006560:	4b4e      	ldr	r3, [pc, #312]	; (800669c <tcp_slowtmr+0x594>)
 8006562:	f240 526d 	movw	r2, #1389	; 0x56d
 8006566:	494e      	ldr	r1, [pc, #312]	; (80066a0 <tcp_slowtmr+0x598>)
 8006568:	484e      	ldr	r0, [pc, #312]	; (80066a4 <tcp_slowtmr+0x59c>)
 800656a:	f007 fdf1 	bl	800e150 <iprintf>
        prev->next = pcb->next;
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e00f      	b.n	8006598 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006578:	4b47      	ldr	r3, [pc, #284]	; (8006698 <tcp_slowtmr+0x590>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657e:	429a      	cmp	r2, r3
 8006580:	d006      	beq.n	8006590 <tcp_slowtmr+0x488>
 8006582:	4b46      	ldr	r3, [pc, #280]	; (800669c <tcp_slowtmr+0x594>)
 8006584:	f240 5271 	movw	r2, #1393	; 0x571
 8006588:	4947      	ldr	r1, [pc, #284]	; (80066a8 <tcp_slowtmr+0x5a0>)
 800658a:	4846      	ldr	r0, [pc, #280]	; (80066a4 <tcp_slowtmr+0x59c>)
 800658c:	f007 fde0 	bl	800e150 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a40      	ldr	r2, [pc, #256]	; (8006698 <tcp_slowtmr+0x590>)
 8006596:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800659c:	2b00      	cmp	r3, #0
 800659e:	d013      	beq.n	80065c8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80065a8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	3304      	adds	r3, #4
 80065ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b0:	8ad2      	ldrh	r2, [r2, #22]
 80065b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b4:	8b09      	ldrh	r1, [r1, #24]
 80065b6:	9102      	str	r1, [sp, #8]
 80065b8:	9201      	str	r2, [sp, #4]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	462b      	mov	r3, r5
 80065be:	4622      	mov	r2, r4
 80065c0:	4601      	mov	r1, r0
 80065c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065c4:	f004 f98a 	bl	800a8dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	7d1b      	ldrb	r3, [r3, #20]
 80065d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80065de:	6838      	ldr	r0, [r7, #0]
 80065e0:	f7ff f9f4 	bl	80059cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <tcp_slowtmr+0x5a4>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <tcp_slowtmr+0x4f2>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f06f 010c 	mvn.w	r1, #12
 80065f6:	68b8      	ldr	r0, [r7, #8]
 80065f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80065fa:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <tcp_slowtmr+0x5a4>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d037      	beq.n	8006672 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006602:	e592      	b.n	800612a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	7f1b      	ldrb	r3, [r3, #28]
 8006612:	3301      	adds	r3, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	7f1a      	ldrb	r2, [r3, #28]
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	7f5b      	ldrb	r3, [r3, #29]
 8006622:	429a      	cmp	r2, r3
 8006624:	d325      	bcc.n	8006672 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <tcp_slowtmr+0x5a4>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <tcp_slowtmr+0x54c>
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006644:	6912      	ldr	r2, [r2, #16]
 8006646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006652:	e002      	b.n	800665a <tcp_slowtmr+0x552>
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <tcp_slowtmr+0x5a4>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d000      	beq.n	8006664 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006662:	e562      	b.n	800612a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006664:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800666c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666e:	f003 fb81 	bl	8009d74 <tcp_output>
  while (pcb != NULL) {
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	f47f ad5e 	bne.w	8006136 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <tcp_slowtmr+0x5a8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006684:	e069      	b.n	800675a <tcp_slowtmr+0x652>
 8006686:	bf00      	nop
 8006688:	20005868 	.word	0x20005868
 800668c:	000a4cb8 	.word	0x000a4cb8
 8006690:	10624dd3 	.word	0x10624dd3
 8006694:	000124f8 	.word	0x000124f8
 8006698:	20005874 	.word	0x20005874
 800669c:	08010090 	.word	0x08010090
 80066a0:	080104c8 	.word	0x080104c8
 80066a4:	080100d4 	.word	0x080100d4
 80066a8:	080104f4 	.word	0x080104f4
 80066ac:	2000587c 	.word	0x2000587c
 80066b0:	20005878 	.word	0x20005878
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	7d1b      	ldrb	r3, [r3, #20]
 80066b8:	2b0a      	cmp	r3, #10
 80066ba:	d006      	beq.n	80066ca <tcp_slowtmr+0x5c2>
 80066bc:	4b2b      	ldr	r3, [pc, #172]	; (800676c <tcp_slowtmr+0x664>)
 80066be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80066c2:	492b      	ldr	r1, [pc, #172]	; (8006770 <tcp_slowtmr+0x668>)
 80066c4:	482b      	ldr	r0, [pc, #172]	; (8006774 <tcp_slowtmr+0x66c>)
 80066c6:	f007 fd43 	bl	800e150 <iprintf>
    pcb_remove = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80066d0:	4b29      	ldr	r3, [pc, #164]	; (8006778 <tcp_slowtmr+0x670>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2bf0      	cmp	r3, #240	; 0xf0
 80066dc:	d904      	bls.n	80066e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80066de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e2:	3301      	adds	r3, #1
 80066e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02f      	beq.n	8006750 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80066f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f2:	f000 fb2b 	bl	8006d4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d010      	beq.n	800671e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80066fc:	4b1f      	ldr	r3, [pc, #124]	; (800677c <tcp_slowtmr+0x674>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	429a      	cmp	r2, r3
 8006704:	d106      	bne.n	8006714 <tcp_slowtmr+0x60c>
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <tcp_slowtmr+0x664>)
 8006708:	f240 52af 	movw	r2, #1455	; 0x5af
 800670c:	491c      	ldr	r1, [pc, #112]	; (8006780 <tcp_slowtmr+0x678>)
 800670e:	4819      	ldr	r0, [pc, #100]	; (8006774 <tcp_slowtmr+0x66c>)
 8006710:	f007 fd1e 	bl	800e150 <iprintf>
        prev->next = pcb->next;
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	e00f      	b.n	800673e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800671e:	4b17      	ldr	r3, [pc, #92]	; (800677c <tcp_slowtmr+0x674>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006724:	429a      	cmp	r2, r3
 8006726:	d006      	beq.n	8006736 <tcp_slowtmr+0x62e>
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <tcp_slowtmr+0x664>)
 800672a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800672e:	4915      	ldr	r1, [pc, #84]	; (8006784 <tcp_slowtmr+0x67c>)
 8006730:	4810      	ldr	r0, [pc, #64]	; (8006774 <tcp_slowtmr+0x66c>)
 8006732:	f007 fd0d 	bl	800e150 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4a10      	ldr	r2, [pc, #64]	; (800677c <tcp_slowtmr+0x674>)
 800673c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006748:	69f8      	ldr	r0, [r7, #28]
 800674a:	f7ff f93f 	bl	80059cc <tcp_free>
 800674e:	e004      	b.n	800675a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1a9      	bne.n	80066b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	3730      	adds	r7, #48	; 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	bdb0      	pop	{r4, r5, r7, pc}
 800676a:	bf00      	nop
 800676c:	08010090 	.word	0x08010090
 8006770:	08010520 	.word	0x08010520
 8006774:	080100d4 	.word	0x080100d4
 8006778:	20005868 	.word	0x20005868
 800677c:	20005878 	.word	0x20005878
 8006780:	08010550 	.word	0x08010550
 8006784:	08010578 	.word	0x08010578

08006788 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800678e:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <tcp_fasttmr+0xbc>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	b2da      	uxtb	r2, r3
 8006796:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <tcp_fasttmr+0xbc>)
 8006798:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800679a:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <tcp_fasttmr+0xc0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80067a0:	e048      	b.n	8006834 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7f9a      	ldrb	r2, [r3, #30]
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <tcp_fasttmr+0xbc>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d03f      	beq.n	800682e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <tcp_fasttmr+0xbc>)
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8b5b      	ldrh	r3, [r3, #26]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8b5b      	ldrh	r3, [r3, #26]
 80067c6:	f043 0302 	orr.w	r3, r3, #2
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f003 facf 	bl	8009d74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8b5b      	ldrh	r3, [r3, #26]
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	b29a      	uxth	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8b5b      	ldrh	r3, [r3, #26]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8b5b      	ldrh	r3, [r3, #26]
 80067f4:	f023 0308 	bic.w	r3, r3, #8
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fa78 	bl	8005cf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006812:	4b0e      	ldr	r3, [pc, #56]	; (800684c <tcp_fasttmr+0xc4>)
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f819 	bl	8006850 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <tcp_fasttmr+0xc4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d000      	beq.n	8006828 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006826:	e7b8      	b.n	800679a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	e002      	b.n	8006834 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1b3      	bne.n	80067a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	2000587e 	.word	0x2000587e
 8006848:	20005874 	.word	0x20005874
 800684c:	2000587c 	.word	0x2000587c

08006850 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <tcp_process_refused_data+0x22>
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <tcp_process_refused_data+0xec>)
 8006860:	f240 6209 	movw	r2, #1545	; 0x609
 8006864:	4936      	ldr	r1, [pc, #216]	; (8006940 <tcp_process_refused_data+0xf0>)
 8006866:	4837      	ldr	r0, [pc, #220]	; (8006944 <tcp_process_refused_data+0xf4>)
 8006868:	f007 fc72 	bl	800e150 <iprintf>
 800686c:	f06f 030f 	mvn.w	r3, #15
 8006870:	e060      	b.n	8006934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006876:	7b5b      	ldrb	r3, [r3, #13]
 8006878:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800687e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <tcp_process_refused_data+0x58>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	2300      	movs	r3, #0
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	47a0      	blx	r4
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	e007      	b.n	80068b8 <tcp_process_refused_data+0x68>
 80068a8:	2300      	movs	r3, #0
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	2000      	movs	r0, #0
 80068b0:	f000 f8a4 	bl	80069fc <tcp_recv_null>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80068b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d12a      	bne.n	8006916 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d033      	beq.n	8006932 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068d2:	d005      	beq.n	80068e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3301      	adds	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <tcp_process_refused_data+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6918      	ldr	r0, [r3, #16]
 80068f4:	2300      	movs	r3, #0
 80068f6:	2200      	movs	r2, #0
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	47a0      	blx	r4
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e001      	b.n	8006906 <tcp_process_refused_data+0xb6>
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800690a:	f113 0f0d 	cmn.w	r3, #13
 800690e:	d110      	bne.n	8006932 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006910:	f06f 030c 	mvn.w	r3, #12
 8006914:	e00e      	b.n	8006934 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800691a:	f113 0f0d 	cmn.w	r3, #13
 800691e:	d102      	bne.n	8006926 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006920:	f06f 030c 	mvn.w	r3, #12
 8006924:	e006      	b.n	8006934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800692c:	f06f 0304 	mvn.w	r3, #4
 8006930:	e000      	b.n	8006934 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bd90      	pop	{r4, r7, pc}
 800693c:	08010090 	.word	0x08010090
 8006940:	080105a0 	.word	0x080105a0
 8006944:	080100d4 	.word	0x080100d4

08006948 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006950:	e007      	b.n	8006962 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f80a 	bl	8006972 <tcp_seg_free>
    seg = next;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f4      	bne.n	8006952 <tcp_segs_free+0xa>
  }
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00c      	beq.n	800699a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fcdb 	bl	8005348 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	2003      	movs	r0, #3
 8006996:	f7fd fe61 	bl	800465c <memp_free>
  }
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <tcp_seg_copy+0x1c>
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <tcp_seg_copy+0x4c>)
 80069b4:	f240 6282 	movw	r2, #1666	; 0x682
 80069b8:	490e      	ldr	r1, [pc, #56]	; (80069f4 <tcp_seg_copy+0x50>)
 80069ba:	480f      	ldr	r0, [pc, #60]	; (80069f8 <tcp_seg_copy+0x54>)
 80069bc:	f007 fbc8 	bl	800e150 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80069c0:	2003      	movs	r0, #3
 80069c2:	f7fd fdff 	bl	80045c4 <memp_malloc>
 80069c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <tcp_seg_copy+0x2e>
    return NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e00a      	b.n	80069e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80069d2:	2210      	movs	r2, #16
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f007 fb8a 	bl	800e0f0 <memcpy>
  pbuf_ref(cseg->p);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fd51 	bl	8005488 <pbuf_ref>
  return cseg;
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	08010090 	.word	0x08010090
 80069f4:	080105e4 	.word	0x080105e4
 80069f8:	080100d4 	.word	0x080100d4

080069fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <tcp_recv_null+0x28>
 8006a10:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <tcp_recv_null+0x60>)
 8006a12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006a16:	4912      	ldr	r1, [pc, #72]	; (8006a60 <tcp_recv_null+0x64>)
 8006a18:	4812      	ldr	r0, [pc, #72]	; (8006a64 <tcp_recv_null+0x68>)
 8006a1a:	f007 fb99 	bl	800e150 <iprintf>
 8006a1e:	f06f 030f 	mvn.w	r3, #15
 8006a22:	e016      	b.n	8006a52 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	891b      	ldrh	r3, [r3, #8]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	68b8      	ldr	r0, [r7, #8]
 8006a32:	f7ff fb19 	bl	8006068 <tcp_recved>
    pbuf_free(p);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fe fc86 	bl	8005348 <pbuf_free>
 8006a3c:	e008      	b.n	8006a50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f7ff f9be 	bl	8005dc8 <tcp_close>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	e000      	b.n	8006a52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08010090 	.word	0x08010090
 8006a60:	08010600 	.word	0x08010600
 8006a64:	080100d4 	.word	0x080100d4

08006a68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db01      	blt.n	8006a7e <tcp_kill_prio+0x16>
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	e000      	b.n	8006a80 <tcp_kill_prio+0x18>
 8006a7e:	237f      	movs	r3, #127	; 0x7f
 8006a80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006a82:	7afb      	ldrb	r3, [r7, #11]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d034      	beq.n	8006af2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006a88:	7afb      	ldrb	r3, [r7, #11]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <tcp_kill_prio+0x94>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e01f      	b.n	8006ade <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	7d5b      	ldrb	r3, [r3, #21]
 8006aa2:	7afa      	ldrb	r2, [r7, #11]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d80c      	bhi.n	8006ac2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006aac:	7afa      	ldrb	r2, [r7, #11]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d112      	bne.n	8006ad8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <tcp_kill_prio+0x98>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d80a      	bhi.n	8006ad8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <tcp_kill_prio+0x98>)
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	7d5b      	ldrb	r3, [r3, #21]
 8006ad6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1dc      	bne.n	8006a9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f7ff fa56 	bl	8005f9c <tcp_abort>
 8006af0:	e000      	b.n	8006af4 <tcp_kill_prio+0x8c>
    return;
 8006af2:	bf00      	nop
  }
}
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20005874 	.word	0x20005874
 8006b00:	20005868 	.word	0x20005868

08006b04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d009      	beq.n	8006b28 <tcp_kill_state+0x24>
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	2b09      	cmp	r3, #9
 8006b18:	d006      	beq.n	8006b28 <tcp_kill_state+0x24>
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <tcp_kill_state+0x80>)
 8006b1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006b20:	4919      	ldr	r1, [pc, #100]	; (8006b88 <tcp_kill_state+0x84>)
 8006b22:	481a      	ldr	r0, [pc, #104]	; (8006b8c <tcp_kill_state+0x88>)
 8006b24:	f007 fb14 	bl	800e150 <iprintf>

  inactivity = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <tcp_kill_state+0x8c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e017      	b.n	8006b68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	79fa      	ldrb	r2, [r7, #7]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d10f      	bne.n	8006b62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <tcp_kill_state+0x90>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d807      	bhi.n	8006b62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <tcp_kill_state+0x90>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e4      	bne.n	8006b38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006b74:	2100      	movs	r1, #0
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff f952 	bl	8005e20 <tcp_abandon>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	08010090 	.word	0x08010090
 8006b88:	0801061c 	.word	0x0801061c
 8006b8c:	080100d4 	.word	0x080100d4
 8006b90:	20005874 	.word	0x20005874
 8006b94:	20005868 	.word	0x20005868

08006b98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <tcp_kill_timewait+0x58>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e012      	b.n	8006bd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <tcp_kill_timewait+0x5c>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d807      	bhi.n	8006bce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <tcp_kill_timewait+0x5c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e9      	bne.n	8006bae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006be0:	68b8      	ldr	r0, [r7, #8]
 8006be2:	f7ff f9db 	bl	8005f9c <tcp_abort>
  }
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20005878 	.word	0x20005878
 8006bf4:	20005868 	.word	0x20005868

08006bf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006bfe:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <tcp_handle_closepend+0x48>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c04:	e014      	b.n	8006c30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8b5b      	ldrh	r3, [r3, #26]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8b5b      	ldrh	r3, [r3, #26]
 8006c1c:	f023 0308 	bic.w	r3, r3, #8
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff f864 	bl	8005cf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e7      	bne.n	8006c06 <tcp_handle_closepend+0xe>
  }
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20005874 	.word	0x20005874

08006c44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f7fd fcb8 	bl	80045c4 <memp_malloc>
 8006c54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d126      	bne.n	8006caa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006c5c:	f7ff ffcc 	bl	8006bf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006c60:	f7ff ff9a 	bl	8006b98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7fd fcad 	bl	80045c4 <memp_malloc>
 8006c6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11b      	bne.n	8006caa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006c72:	2009      	movs	r0, #9
 8006c74:	f7ff ff46 	bl	8006b04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c78:	2001      	movs	r0, #1
 8006c7a:	f7fd fca3 	bl	80045c4 <memp_malloc>
 8006c7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d111      	bne.n	8006caa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006c86:	2008      	movs	r0, #8
 8006c88:	f7ff ff3c 	bl	8006b04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f7fd fc99 	bl	80045c4 <memp_malloc>
 8006c92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fee3 	bl	8006a68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7fd fc8e 	bl	80045c4 <memp_malloc>
 8006ca8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d03f      	beq.n	8006d30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006cb0:	229c      	movs	r2, #156	; 0x9c
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f007 fa43 	bl	800e140 <memset>
    pcb->prio = prio;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006cc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006ce6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2206      	movs	r2, #6
 8006cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2206      	movs	r2, #6
 8006cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006d06:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <tcp_alloc+0xf8>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <tcp_alloc+0xfc>)
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006d1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <tcp_alloc+0x100>)
 8006d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a07      	ldr	r2, [pc, #28]	; (8006d48 <tcp_alloc+0x104>)
 8006d2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20005868 	.word	0x20005868
 8006d40:	2000587e 	.word	0x2000587e
 8006d44:	080069fd 	.word	0x080069fd
 8006d48:	006ddd00 	.word	0x006ddd00

08006d4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d107      	bne.n	8006d6a <tcp_pcb_purge+0x1e>
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <tcp_pcb_purge+0x94>)
 8006d5c:	f640 0251 	movw	r2, #2129	; 0x851
 8006d60:	4920      	ldr	r1, [pc, #128]	; (8006de4 <tcp_pcb_purge+0x98>)
 8006d62:	4821      	ldr	r0, [pc, #132]	; (8006de8 <tcp_pcb_purge+0x9c>)
 8006d64:	f007 f9f4 	bl	800e150 <iprintf>
 8006d68:	e037      	b.n	8006dda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7d1b      	ldrb	r3, [r3, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d033      	beq.n	8006dda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006d76:	2b0a      	cmp	r3, #10
 8006d78:	d02f      	beq.n	8006dda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d02b      	beq.n	8006dda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fada 	bl	8005348 <pbuf_free>
      pcb->refused_data = NULL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f986 	bl	80070b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fdc7 	bl	8006948 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fdc2 	bl	8006948 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	66da      	str	r2, [r3, #108]	; 0x6c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08010090 	.word	0x08010090
 8006de4:	080106dc 	.word	0x080106dc
 8006de8:	080100d4 	.word	0x080100d4

08006dec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <tcp_pcb_remove+0x1e>
 8006dfc:	4b3e      	ldr	r3, [pc, #248]	; (8006ef8 <tcp_pcb_remove+0x10c>)
 8006dfe:	f640 0283 	movw	r2, #2179	; 0x883
 8006e02:	493e      	ldr	r1, [pc, #248]	; (8006efc <tcp_pcb_remove+0x110>)
 8006e04:	483e      	ldr	r0, [pc, #248]	; (8006f00 <tcp_pcb_remove+0x114>)
 8006e06:	f007 f9a3 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <tcp_pcb_remove+0x32>
 8006e10:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <tcp_pcb_remove+0x10c>)
 8006e12:	f640 0284 	movw	r2, #2180	; 0x884
 8006e16:	493b      	ldr	r1, [pc, #236]	; (8006f04 <tcp_pcb_remove+0x118>)
 8006e18:	4839      	ldr	r0, [pc, #228]	; (8006f00 <tcp_pcb_remove+0x114>)
 8006e1a:	f007 f999 	bl	800e150 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d105      	bne.n	8006e34 <tcp_pcb_remove+0x48>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e013      	b.n	8006e5c <tcp_pcb_remove+0x70>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e00c      	b.n	8006e56 <tcp_pcb_remove+0x6a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d104      	bne.n	8006e50 <tcp_pcb_remove+0x64>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	e005      	b.n	8006e5c <tcp_pcb_remove+0x70>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1ef      	bne.n	8006e3c <tcp_pcb_remove+0x50>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	f7ff ff72 	bl	8006d4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	7d1b      	ldrb	r3, [r3, #20]
 8006e6c:	2b0a      	cmp	r3, #10
 8006e6e:	d013      	beq.n	8006e98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d00f      	beq.n	8006e98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	8b5b      	ldrh	r3, [r3, #26]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	8b5b      	ldrh	r3, [r3, #26]
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006e92:	6838      	ldr	r0, [r7, #0]
 8006e94:	f002 ff6e 	bl	8009d74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	7d1b      	ldrb	r3, [r3, #20]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d020      	beq.n	8006ee2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <tcp_pcb_remove+0xca>
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <tcp_pcb_remove+0x10c>)
 8006eaa:	f640 0293 	movw	r2, #2195	; 0x893
 8006eae:	4916      	ldr	r1, [pc, #88]	; (8006f08 <tcp_pcb_remove+0x11c>)
 8006eb0:	4813      	ldr	r0, [pc, #76]	; (8006f00 <tcp_pcb_remove+0x114>)
 8006eb2:	f007 f94d 	bl	800e150 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <tcp_pcb_remove+0xe0>
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <tcp_pcb_remove+0x10c>)
 8006ec0:	f640 0294 	movw	r2, #2196	; 0x894
 8006ec4:	4911      	ldr	r1, [pc, #68]	; (8006f0c <tcp_pcb_remove+0x120>)
 8006ec6:	480e      	ldr	r0, [pc, #56]	; (8006f00 <tcp_pcb_remove+0x114>)
 8006ec8:	f007 f942 	bl	800e150 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <tcp_pcb_remove+0xf6>
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <tcp_pcb_remove+0x10c>)
 8006ed6:	f640 0296 	movw	r2, #2198	; 0x896
 8006eda:	490d      	ldr	r1, [pc, #52]	; (8006f10 <tcp_pcb_remove+0x124>)
 8006edc:	4808      	ldr	r0, [pc, #32]	; (8006f00 <tcp_pcb_remove+0x114>)
 8006ede:	f007 f937 	bl	800e150 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	08010090 	.word	0x08010090
 8006efc:	080106f8 	.word	0x080106f8
 8006f00:	080100d4 	.word	0x080100d4
 8006f04:	08010714 	.word	0x08010714
 8006f08:	08010734 	.word	0x08010734
 8006f0c:	0801074c 	.word	0x0801074c
 8006f10:	08010768 	.word	0x08010768

08006f14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <tcp_next_iss+0x1c>
 8006f22:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <tcp_next_iss+0x38>)
 8006f24:	f640 02af 	movw	r2, #2223	; 0x8af
 8006f28:	4909      	ldr	r1, [pc, #36]	; (8006f50 <tcp_next_iss+0x3c>)
 8006f2a:	480a      	ldr	r0, [pc, #40]	; (8006f54 <tcp_next_iss+0x40>)
 8006f2c:	f007 f910 	bl	800e150 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006f30:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <tcp_next_iss+0x44>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <tcp_next_iss+0x48>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4413      	add	r3, r2
 8006f3a:	4a07      	ldr	r2, [pc, #28]	; (8006f58 <tcp_next_iss+0x44>)
 8006f3c:	6013      	str	r3, [r2, #0]
  return iss;
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <tcp_next_iss+0x44>)
 8006f40:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08010090 	.word	0x08010090
 8006f50:	08010780 	.word	0x08010780
 8006f54:	080100d4 	.word	0x080100d4
 8006f58:	2000000c 	.word	0x2000000c
 8006f5c:	20005868 	.word	0x20005868

08006f60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d106      	bne.n	8006f82 <tcp_eff_send_mss_netif+0x22>
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <tcp_eff_send_mss_netif+0x68>)
 8006f76:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006f7a:	4914      	ldr	r1, [pc, #80]	; (8006fcc <tcp_eff_send_mss_netif+0x6c>)
 8006f7c:	4814      	ldr	r0, [pc, #80]	; (8006fd0 <tcp_eff_send_mss_netif+0x70>)
 8006f7e:	f007 f8e7 	bl	800e150 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006f88:	89fb      	ldrh	r3, [r7, #14]
 8006f8a:	e019      	b.n	8006fc0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006f92:	8afb      	ldrh	r3, [r7, #22]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006f98:	2328      	movs	r3, #40	; 0x28
 8006f9a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006f9c:	8afa      	ldrh	r2, [r7, #22]
 8006f9e:	8abb      	ldrh	r3, [r7, #20]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d904      	bls.n	8006fae <tcp_eff_send_mss_netif+0x4e>
 8006fa4:	8afa      	ldrh	r2, [r7, #22]
 8006fa6:	8abb      	ldrh	r3, [r7, #20]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	e000      	b.n	8006fb0 <tcp_eff_send_mss_netif+0x50>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006fb2:	8a7a      	ldrh	r2, [r7, #18]
 8006fb4:	89fb      	ldrh	r3, [r7, #14]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	bf28      	it	cs
 8006fba:	4613      	movcs	r3, r2
 8006fbc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	08010090 	.word	0x08010090
 8006fcc:	0801079c 	.word	0x0801079c
 8006fd0:	080100d4 	.word	0x080100d4

08006fd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d119      	bne.n	800701c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006fea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006fee:	4910      	ldr	r1, [pc, #64]	; (8007030 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006ff0:	4810      	ldr	r0, [pc, #64]	; (8007034 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006ff2:	f007 f8ad 	bl	800e150 <iprintf>

  while (pcb != NULL) {
 8006ff6:	e011      	b.n	800701c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d108      	bne.n	8007016 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7fe ffc6 	bl	8005f9c <tcp_abort>
      pcb = next;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e002      	b.n	800701c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1ea      	bne.n	8006ff8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	08010090 	.word	0x08010090
 8007030:	080107c4 	.word	0x080107c4
 8007034:	080100d4 	.word	0x080100d4

08007038 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02a      	beq.n	800709e <tcp_netif_ip_addr_changed+0x66>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d026      	beq.n	800709e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007050:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <tcp_netif_ip_addr_changed+0x70>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff ffbc 	bl	8006fd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <tcp_netif_ip_addr_changed+0x74>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff ffb6 	bl	8006fd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d017      	beq.n	800709e <tcp_netif_ip_addr_changed+0x66>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d013      	beq.n	800709e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007076:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <tcp_netif_ip_addr_changed+0x78>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e00c      	b.n	8007098 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d103      	bne.n	8007092 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1ef      	bne.n	800707e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20005874 	.word	0x20005874
 80070ac:	2000586c 	.word	0x2000586c
 80070b0:	20005870 	.word	0x20005870

080070b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fc3d 	bl	8006948 <tcp_segs_free>
    pcb->ooseq = NULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b08d      	sub	sp, #52	; 0x34
 80070e0:	af04      	add	r7, sp, #16
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <tcp_input+0x1c>
 80070ec:	4b9b      	ldr	r3, [pc, #620]	; (800735c <tcp_input+0x280>)
 80070ee:	2283      	movs	r2, #131	; 0x83
 80070f0:	499b      	ldr	r1, [pc, #620]	; (8007360 <tcp_input+0x284>)
 80070f2:	489c      	ldr	r0, [pc, #624]	; (8007364 <tcp_input+0x288>)
 80070f4:	f007 f82c 	bl	800e150 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4a9a      	ldr	r2, [pc, #616]	; (8007368 <tcp_input+0x28c>)
 80070fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	895b      	ldrh	r3, [r3, #10]
 8007104:	2b13      	cmp	r3, #19
 8007106:	f240 83d1 	bls.w	80078ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800710a:	4b98      	ldr	r3, [pc, #608]	; (800736c <tcp_input+0x290>)
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	4a97      	ldr	r2, [pc, #604]	; (800736c <tcp_input+0x290>)
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f005 ffd1 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 83c7 	bne.w	80078b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007122:	4b92      	ldr	r3, [pc, #584]	; (800736c <tcp_input+0x290>)
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800712a:	2be0      	cmp	r3, #224	; 0xe0
 800712c:	f000 83c0 	beq.w	80078b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007130:	4b8d      	ldr	r3, [pc, #564]	; (8007368 <tcp_input+0x28c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	899b      	ldrh	r3, [r3, #12]
 8007136:	b29b      	uxth	r3, r3
 8007138:	4618      	mov	r0, r3
 800713a:	f7fc fded 	bl	8003d18 <lwip_htons>
 800713e:	4603      	mov	r3, r0
 8007140:	0b1b      	lsrs	r3, r3, #12
 8007142:	b29b      	uxth	r3, r3
 8007144:	b2db      	uxtb	r3, r3
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800714a:	7cbb      	ldrb	r3, [r7, #18]
 800714c:	2b13      	cmp	r3, #19
 800714e:	f240 83b1 	bls.w	80078b4 <tcp_input+0x7d8>
 8007152:	7cbb      	ldrb	r3, [r7, #18]
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	891b      	ldrh	r3, [r3, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	f200 83aa 	bhi.w	80078b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007160:	7cbb      	ldrb	r3, [r7, #18]
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b14      	subs	r3, #20
 8007166:	b29a      	uxth	r2, r3
 8007168:	4b81      	ldr	r3, [pc, #516]	; (8007370 <tcp_input+0x294>)
 800716a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800716c:	4b81      	ldr	r3, [pc, #516]	; (8007374 <tcp_input+0x298>)
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	895a      	ldrh	r2, [r3, #10]
 8007176:	7cbb      	ldrb	r3, [r7, #18]
 8007178:	b29b      	uxth	r3, r3
 800717a:	429a      	cmp	r2, r3
 800717c:	d309      	bcc.n	8007192 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800717e:	4b7c      	ldr	r3, [pc, #496]	; (8007370 <tcp_input+0x294>)
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	4b7d      	ldr	r3, [pc, #500]	; (8007378 <tcp_input+0x29c>)
 8007184:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007186:	7cbb      	ldrb	r3, [r7, #18]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fe f856 	bl	800523c <pbuf_remove_header>
 8007190:	e04e      	b.n	8007230 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <tcp_input+0xca>
 800719a:	4b70      	ldr	r3, [pc, #448]	; (800735c <tcp_input+0x280>)
 800719c:	22c2      	movs	r2, #194	; 0xc2
 800719e:	4977      	ldr	r1, [pc, #476]	; (800737c <tcp_input+0x2a0>)
 80071a0:	4870      	ldr	r0, [pc, #448]	; (8007364 <tcp_input+0x288>)
 80071a2:	f006 ffd5 	bl	800e150 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80071a6:	2114      	movs	r1, #20
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fe f847 	bl	800523c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	895a      	ldrh	r2, [r3, #10]
 80071b2:	4b71      	ldr	r3, [pc, #452]	; (8007378 <tcp_input+0x29c>)
 80071b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80071b6:	4b6e      	ldr	r3, [pc, #440]	; (8007370 <tcp_input+0x294>)
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	4b6f      	ldr	r3, [pc, #444]	; (8007378 <tcp_input+0x29c>)
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80071c2:	4b6d      	ldr	r3, [pc, #436]	; (8007378 <tcp_input+0x29c>)
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fe f837 	bl	800523c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	8a3a      	ldrh	r2, [r7, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	f200 836e 	bhi.w	80078b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4a64      	ldr	r2, [pc, #400]	; (8007374 <tcp_input+0x298>)
 80071e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	8a3a      	ldrh	r2, [r7, #16]
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe f824 	bl	800523c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	891a      	ldrh	r2, [r3, #8]
 80071f8:	8a3b      	ldrh	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	895b      	ldrh	r3, [r3, #10]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <tcp_input+0x13a>
 800720a:	4b54      	ldr	r3, [pc, #336]	; (800735c <tcp_input+0x280>)
 800720c:	22df      	movs	r2, #223	; 0xdf
 800720e:	495c      	ldr	r1, [pc, #368]	; (8007380 <tcp_input+0x2a4>)
 8007210:	4854      	ldr	r0, [pc, #336]	; (8007364 <tcp_input+0x288>)
 8007212:	f006 ff9d 	bl	800e150 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	891a      	ldrh	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	891b      	ldrh	r3, [r3, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d005      	beq.n	8007230 <tcp_input+0x154>
 8007224:	4b4d      	ldr	r3, [pc, #308]	; (800735c <tcp_input+0x280>)
 8007226:	22e0      	movs	r2, #224	; 0xe0
 8007228:	4956      	ldr	r1, [pc, #344]	; (8007384 <tcp_input+0x2a8>)
 800722a:	484e      	ldr	r0, [pc, #312]	; (8007364 <tcp_input+0x288>)
 800722c:	f006 ff90 	bl	800e150 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007230:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <tcp_input+0x28c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4a4b      	ldr	r2, [pc, #300]	; (8007368 <tcp_input+0x28c>)
 800723a:	6814      	ldr	r4, [r2, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7fc fd6b 	bl	8003d18 <lwip_htons>
 8007242:	4603      	mov	r3, r0
 8007244:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007246:	4b48      	ldr	r3, [pc, #288]	; (8007368 <tcp_input+0x28c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	b29b      	uxth	r3, r3
 800724e:	4a46      	ldr	r2, [pc, #280]	; (8007368 <tcp_input+0x28c>)
 8007250:	6814      	ldr	r4, [r2, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7fc fd60 	bl	8003d18 <lwip_htons>
 8007258:	4603      	mov	r3, r0
 800725a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800725c:	4b42      	ldr	r3, [pc, #264]	; (8007368 <tcp_input+0x28c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	4a41      	ldr	r2, [pc, #260]	; (8007368 <tcp_input+0x28c>)
 8007264:	6814      	ldr	r4, [r2, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fc fd6b 	bl	8003d42 <lwip_htonl>
 800726c:	4603      	mov	r3, r0
 800726e:	6063      	str	r3, [r4, #4]
 8007270:	6863      	ldr	r3, [r4, #4]
 8007272:	4a45      	ldr	r2, [pc, #276]	; (8007388 <tcp_input+0x2ac>)
 8007274:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007276:	4b3c      	ldr	r3, [pc, #240]	; (8007368 <tcp_input+0x28c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a3a      	ldr	r2, [pc, #232]	; (8007368 <tcp_input+0x28c>)
 800727e:	6814      	ldr	r4, [r2, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f7fc fd5e 	bl	8003d42 <lwip_htonl>
 8007286:	4603      	mov	r3, r0
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	4a3f      	ldr	r2, [pc, #252]	; (800738c <tcp_input+0x2b0>)
 800728e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007290:	4b35      	ldr	r3, [pc, #212]	; (8007368 <tcp_input+0x28c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	89db      	ldrh	r3, [r3, #14]
 8007296:	b29b      	uxth	r3, r3
 8007298:	4a33      	ldr	r2, [pc, #204]	; (8007368 <tcp_input+0x28c>)
 800729a:	6814      	ldr	r4, [r2, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f7fc fd3b 	bl	8003d18 <lwip_htons>
 80072a2:	4603      	mov	r3, r0
 80072a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80072a6:	4b30      	ldr	r3, [pc, #192]	; (8007368 <tcp_input+0x28c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	899b      	ldrh	r3, [r3, #12]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fc fd32 	bl	8003d18 <lwip_htons>
 80072b4:	4603      	mov	r3, r0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	4b34      	ldr	r3, [pc, #208]	; (8007390 <tcp_input+0x2b4>)
 80072c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	891a      	ldrh	r2, [r3, #8]
 80072c6:	4b33      	ldr	r3, [pc, #204]	; (8007394 <tcp_input+0x2b8>)
 80072c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <tcp_input+0x2b4>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <tcp_input+0x214>
    tcplen++;
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <tcp_input+0x2b8>)
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <tcp_input+0x2b8>)
 80072e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	891a      	ldrh	r2, [r3, #8]
 80072e6:	4b2b      	ldr	r3, [pc, #172]	; (8007394 <tcp_input+0x2b8>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	f200 82e6 	bhi.w	80078bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072f4:	4b28      	ldr	r3, [pc, #160]	; (8007398 <tcp_input+0x2bc>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	e09d      	b.n	8007438 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	7d1b      	ldrb	r3, [r3, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <tcp_input+0x234>
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <tcp_input+0x280>)
 8007306:	22fb      	movs	r2, #251	; 0xfb
 8007308:	4924      	ldr	r1, [pc, #144]	; (800739c <tcp_input+0x2c0>)
 800730a:	4816      	ldr	r0, [pc, #88]	; (8007364 <tcp_input+0x288>)
 800730c:	f006 ff20 	bl	800e150 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	7d1b      	ldrb	r3, [r3, #20]
 8007314:	2b0a      	cmp	r3, #10
 8007316:	d105      	bne.n	8007324 <tcp_input+0x248>
 8007318:	4b10      	ldr	r3, [pc, #64]	; (800735c <tcp_input+0x280>)
 800731a:	22fc      	movs	r2, #252	; 0xfc
 800731c:	4920      	ldr	r1, [pc, #128]	; (80073a0 <tcp_input+0x2c4>)
 800731e:	4811      	ldr	r0, [pc, #68]	; (8007364 <tcp_input+0x288>)
 8007320:	f006 ff16 	bl	800e150 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	7d1b      	ldrb	r3, [r3, #20]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d105      	bne.n	8007338 <tcp_input+0x25c>
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <tcp_input+0x280>)
 800732e:	22fd      	movs	r2, #253	; 0xfd
 8007330:	491c      	ldr	r1, [pc, #112]	; (80073a4 <tcp_input+0x2c8>)
 8007332:	480c      	ldr	r0, [pc, #48]	; (8007364 <tcp_input+0x288>)
 8007334:	f006 ff0c 	bl	800e150 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	7a1b      	ldrb	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d033      	beq.n	80073a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	7a1a      	ldrb	r2, [r3, #8]
 8007344:	4b09      	ldr	r3, [pc, #36]	; (800736c <tcp_input+0x290>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800734c:	3301      	adds	r3, #1
 800734e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007350:	429a      	cmp	r2, r3
 8007352:	d029      	beq.n	80073a8 <tcp_input+0x2cc>
      prev = pcb;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	61bb      	str	r3, [r7, #24]
      continue;
 8007358:	e06b      	b.n	8007432 <tcp_input+0x356>
 800735a:	bf00      	nop
 800735c:	080107f8 	.word	0x080107f8
 8007360:	0801082c 	.word	0x0801082c
 8007364:	08010844 	.word	0x08010844
 8007368:	20005890 	.word	0x20005890
 800736c:	20000138 	.word	0x20000138
 8007370:	20005894 	.word	0x20005894
 8007374:	20005898 	.word	0x20005898
 8007378:	20005896 	.word	0x20005896
 800737c:	0801086c 	.word	0x0801086c
 8007380:	0801087c 	.word	0x0801087c
 8007384:	08010888 	.word	0x08010888
 8007388:	200058a0 	.word	0x200058a0
 800738c:	200058a4 	.word	0x200058a4
 8007390:	200058ac 	.word	0x200058ac
 8007394:	200058aa 	.word	0x200058aa
 8007398:	20005874 	.word	0x20005874
 800739c:	080108a8 	.word	0x080108a8
 80073a0:	080108d0 	.word	0x080108d0
 80073a4:	080108fc 	.word	0x080108fc
    }

    if (pcb->remote_port == tcphdr->src &&
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	8b1a      	ldrh	r2, [r3, #24]
 80073ac:	4b72      	ldr	r3, [pc, #456]	; (8007578 <tcp_input+0x49c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d13a      	bne.n	800742e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	8ada      	ldrh	r2, [r3, #22]
 80073bc:	4b6e      	ldr	r3, [pc, #440]	; (8007578 <tcp_input+0x49c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	885b      	ldrh	r3, [r3, #2]
 80073c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d132      	bne.n	800742e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4b6b      	ldr	r3, [pc, #428]	; (800757c <tcp_input+0x4a0>)
 80073ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d12c      	bne.n	800742e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	4b68      	ldr	r3, [pc, #416]	; (800757c <tcp_input+0x4a0>)
 80073da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073dc:	429a      	cmp	r2, r3
 80073de:	d126      	bne.n	800742e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d106      	bne.n	80073f8 <tcp_input+0x31c>
 80073ea:	4b65      	ldr	r3, [pc, #404]	; (8007580 <tcp_input+0x4a4>)
 80073ec:	f240 120d 	movw	r2, #269	; 0x10d
 80073f0:	4964      	ldr	r1, [pc, #400]	; (8007584 <tcp_input+0x4a8>)
 80073f2:	4865      	ldr	r0, [pc, #404]	; (8007588 <tcp_input+0x4ac>)
 80073f4:	f006 feac 	bl	800e150 <iprintf>
      if (prev != NULL) {
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <tcp_input+0x338>
        prev->next = pcb->next;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007406:	4b61      	ldr	r3, [pc, #388]	; (800758c <tcp_input+0x4b0>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800740e:	4a5f      	ldr	r2, [pc, #380]	; (800758c <tcp_input+0x4b0>)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	429a      	cmp	r2, r3
 800741c:	d111      	bne.n	8007442 <tcp_input+0x366>
 800741e:	4b58      	ldr	r3, [pc, #352]	; (8007580 <tcp_input+0x4a4>)
 8007420:	f240 1215 	movw	r2, #277	; 0x115
 8007424:	495a      	ldr	r1, [pc, #360]	; (8007590 <tcp_input+0x4b4>)
 8007426:	4858      	ldr	r0, [pc, #352]	; (8007588 <tcp_input+0x4ac>)
 8007428:	f006 fe92 	bl	800e150 <iprintf>
      break;
 800742c:	e009      	b.n	8007442 <tcp_input+0x366>
    }
    prev = pcb;
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f47f af5e 	bne.w	80072fc <tcp_input+0x220>
 8007440:	e000      	b.n	8007444 <tcp_input+0x368>
      break;
 8007442:	bf00      	nop
  }

  if (pcb == NULL) {
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 80aa 	bne.w	80075a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800744c:	4b51      	ldr	r3, [pc, #324]	; (8007594 <tcp_input+0x4b8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e03f      	b.n	80074d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	7d1b      	ldrb	r3, [r3, #20]
 8007458:	2b0a      	cmp	r3, #10
 800745a:	d006      	beq.n	800746a <tcp_input+0x38e>
 800745c:	4b48      	ldr	r3, [pc, #288]	; (8007580 <tcp_input+0x4a4>)
 800745e:	f240 121f 	movw	r2, #287	; 0x11f
 8007462:	494d      	ldr	r1, [pc, #308]	; (8007598 <tcp_input+0x4bc>)
 8007464:	4848      	ldr	r0, [pc, #288]	; (8007588 <tcp_input+0x4ac>)
 8007466:	f006 fe73 	bl	800e150 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	7a1b      	ldrb	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	7a1a      	ldrb	r2, [r3, #8]
 8007476:	4b41      	ldr	r3, [pc, #260]	; (800757c <tcp_input+0x4a0>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800747e:	3301      	adds	r3, #1
 8007480:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007482:	429a      	cmp	r2, r3
 8007484:	d122      	bne.n	80074cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	8b1a      	ldrh	r2, [r3, #24]
 800748a:	4b3b      	ldr	r3, [pc, #236]	; (8007578 <tcp_input+0x49c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	429a      	cmp	r2, r3
 8007494:	d11b      	bne.n	80074ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	8ada      	ldrh	r2, [r3, #22]
 800749a:	4b37      	ldr	r3, [pc, #220]	; (8007578 <tcp_input+0x49c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d113      	bne.n	80074ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	4b34      	ldr	r3, [pc, #208]	; (800757c <tcp_input+0x4a0>)
 80074ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d10d      	bne.n	80074ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b31      	ldr	r3, [pc, #196]	; (800757c <tcp_input+0x4a0>)
 80074b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d107      	bne.n	80074ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80074be:	69f8      	ldr	r0, [r7, #28]
 80074c0:	f000 fb56 	bl	8007b70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fd ff3f 	bl	8005348 <pbuf_free>
        return;
 80074ca:	e1fd      	b.n	80078c8 <tcp_input+0x7ec>
        continue;
 80074cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1bc      	bne.n	8007454 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <tcp_input+0x4c0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	e02a      	b.n	800753c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	7a1b      	ldrb	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	7a1a      	ldrb	r2, [r3, #8]
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <tcp_input+0x4a0>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074fa:	3301      	adds	r3, #1
 80074fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80074fe:	429a      	cmp	r2, r3
 8007500:	d002      	beq.n	8007508 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	61bb      	str	r3, [r7, #24]
        continue;
 8007506:	e016      	b.n	8007536 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	8ada      	ldrh	r2, [r3, #22]
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <tcp_input+0x49c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	885b      	ldrh	r3, [r3, #2]
 8007512:	b29b      	uxth	r3, r3
 8007514:	429a      	cmp	r2, r3
 8007516:	d10c      	bne.n	8007532 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b17      	ldr	r3, [pc, #92]	; (800757c <tcp_input+0x4a0>)
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	429a      	cmp	r2, r3
 8007522:	d00f      	beq.n	8007544 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <tcp_input+0x46a>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d1      	bne.n	80074e6 <tcp_input+0x40a>
 8007542:	e000      	b.n	8007546 <tcp_input+0x46a>
            break;
 8007544:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d029      	beq.n	80075a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <tcp_input+0x4c0>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007562:	4a0e      	ldr	r2, [pc, #56]	; (800759c <tcp_input+0x4c0>)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	f000 fa03 	bl	8007974 <tcp_listen_input>
      }
      pbuf_free(p);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fd feea 	bl	8005348 <pbuf_free>
      return;
 8007574:	e1a8      	b.n	80078c8 <tcp_input+0x7ec>
 8007576:	bf00      	nop
 8007578:	20005890 	.word	0x20005890
 800757c:	20000138 	.word	0x20000138
 8007580:	080107f8 	.word	0x080107f8
 8007584:	08010924 	.word	0x08010924
 8007588:	08010844 	.word	0x08010844
 800758c:	20005874 	.word	0x20005874
 8007590:	08010950 	.word	0x08010950
 8007594:	20005878 	.word	0x20005878
 8007598:	0801097c 	.word	0x0801097c
 800759c:	20005870 	.word	0x20005870
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8158 	beq.w	8007858 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80075a8:	4b95      	ldr	r3, [pc, #596]	; (8007800 <tcp_input+0x724>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	891a      	ldrh	r2, [r3, #8]
 80075b2:	4b93      	ldr	r3, [pc, #588]	; (8007800 <tcp_input+0x724>)
 80075b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80075b6:	4a92      	ldr	r2, [pc, #584]	; (8007800 <tcp_input+0x724>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80075bc:	4b91      	ldr	r3, [pc, #580]	; (8007804 <tcp_input+0x728>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a8f      	ldr	r2, [pc, #572]	; (8007800 <tcp_input+0x724>)
 80075c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80075c4:	4b90      	ldr	r3, [pc, #576]	; (8007808 <tcp_input+0x72c>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80075ca:	4b90      	ldr	r3, [pc, #576]	; (800780c <tcp_input+0x730>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80075d0:	4b8f      	ldr	r3, [pc, #572]	; (8007810 <tcp_input+0x734>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80075d6:	4b8f      	ldr	r3, [pc, #572]	; (8007814 <tcp_input+0x738>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7b5b      	ldrb	r3, [r3, #13]
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d017      	beq.n	8007628 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80075f8:	69f8      	ldr	r0, [r7, #28]
 80075fa:	f7ff f929 	bl	8006850 <tcp_process_refused_data>
 80075fe:	4603      	mov	r3, r0
 8007600:	f113 0f0d 	cmn.w	r3, #13
 8007604:	d007      	beq.n	8007616 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800760e:	4b82      	ldr	r3, [pc, #520]	; (8007818 <tcp_input+0x73c>)
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 80e3 	bne.w	80077e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007620:	69f8      	ldr	r0, [r7, #28]
 8007622:	f003 f9ad 	bl	800a980 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007626:	e0de      	b.n	80077e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007628:	4a7c      	ldr	r2, [pc, #496]	; (800781c <tcp_input+0x740>)
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800762e:	69f8      	ldr	r0, [r7, #28]
 8007630:	f000 fb18 	bl	8007c64 <tcp_process>
 8007634:	4603      	mov	r3, r0
 8007636:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800763c:	f113 0f0d 	cmn.w	r3, #13
 8007640:	f000 80d3 	beq.w	80077ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007644:	4b71      	ldr	r3, [pc, #452]	; (800780c <tcp_input+0x730>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <tcp_input+0x590>
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	6912      	ldr	r2, [r2, #16]
 8007664:	f06f 010d 	mvn.w	r1, #13
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	486c      	ldr	r0, [pc, #432]	; (8007820 <tcp_input+0x744>)
 8007670:	f7ff fbbc 	bl	8006dec <tcp_pcb_remove>
        tcp_free(pcb);
 8007674:	69f8      	ldr	r0, [r7, #28]
 8007676:	f7fe f9a9 	bl	80059cc <tcp_free>
 800767a:	e0da      	b.n	8007832 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007680:	4b63      	ldr	r3, [pc, #396]	; (8007810 <tcp_input+0x734>)
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01d      	beq.n	80076c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007688:	4b61      	ldr	r3, [pc, #388]	; (8007810 <tcp_input+0x734>)
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <tcp_input+0x5d2>
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	6910      	ldr	r0, [r2, #16]
 80076a2:	89fa      	ldrh	r2, [r7, #14]
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	4798      	blx	r3
 80076a8:	4603      	mov	r3, r0
 80076aa:	74fb      	strb	r3, [r7, #19]
 80076ac:	e001      	b.n	80076b2 <tcp_input+0x5d6>
 80076ae:	2300      	movs	r3, #0
 80076b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076b6:	f113 0f0d 	cmn.w	r3, #13
 80076ba:	f000 8098 	beq.w	80077ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80076be:	4b54      	ldr	r3, [pc, #336]	; (8007810 <tcp_input+0x734>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80076c4:	69f8      	ldr	r0, [r7, #28]
 80076c6:	f000 f915 	bl	80078f4 <tcp_input_delayed_close>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8090 	bne.w	80077f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80076d2:	4b4d      	ldr	r3, [pc, #308]	; (8007808 <tcp_input+0x72c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d041      	beq.n	800775e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d006      	beq.n	80076f0 <tcp_input+0x614>
 80076e2:	4b50      	ldr	r3, [pc, #320]	; (8007824 <tcp_input+0x748>)
 80076e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80076e8:	494f      	ldr	r1, [pc, #316]	; (8007828 <tcp_input+0x74c>)
 80076ea:	4850      	ldr	r0, [pc, #320]	; (800782c <tcp_input+0x750>)
 80076ec:	f006 fd30 	bl	800e150 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	8b5b      	ldrh	r3, [r3, #26]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80076fc:	4b42      	ldr	r3, [pc, #264]	; (8007808 <tcp_input+0x72c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fe21 	bl	8005348 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007706:	69f8      	ldr	r0, [r7, #28]
 8007708:	f7fe fc48 	bl	8005f9c <tcp_abort>
            goto aborted;
 800770c:	e091      	b.n	8007832 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <tcp_input+0x656>
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	6918      	ldr	r0, [r3, #16]
 8007722:	4b39      	ldr	r3, [pc, #228]	; (8007808 <tcp_input+0x72c>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	47a0      	blx	r4
 800772c:	4603      	mov	r3, r0
 800772e:	74fb      	strb	r3, [r7, #19]
 8007730:	e008      	b.n	8007744 <tcp_input+0x668>
 8007732:	4b35      	ldr	r3, [pc, #212]	; (8007808 <tcp_input+0x72c>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	2000      	movs	r0, #0
 800773c:	f7ff f95e 	bl	80069fc <tcp_recv_null>
 8007740:	4603      	mov	r3, r0
 8007742:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007744:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007748:	f113 0f0d 	cmn.w	r3, #13
 800774c:	d053      	beq.n	80077f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800774e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007756:	4b2c      	ldr	r3, [pc, #176]	; (8007808 <tcp_input+0x72c>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800775e:	4b2b      	ldr	r3, [pc, #172]	; (800780c <tcp_input+0x730>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d030      	beq.n	80077cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007776:	7b5a      	ldrb	r2, [r3, #13]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777c:	f042 0220 	orr.w	r2, r2, #32
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	735a      	strb	r2, [r3, #13]
 8007784:	e022      	b.n	80077cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800778e:	d005      	beq.n	800779c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007794:	3301      	adds	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <tcp_input+0x6e2>
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	6918      	ldr	r0, [r3, #16]
 80077b0:	2300      	movs	r3, #0
 80077b2:	2200      	movs	r2, #0
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	47a0      	blx	r4
 80077b8:	4603      	mov	r3, r0
 80077ba:	74fb      	strb	r3, [r7, #19]
 80077bc:	e001      	b.n	80077c2 <tcp_input+0x6e6>
 80077be:	2300      	movs	r3, #0
 80077c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80077c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077c6:	f113 0f0d 	cmn.w	r3, #13
 80077ca:	d016      	beq.n	80077fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80077cc:	4b13      	ldr	r3, [pc, #76]	; (800781c <tcp_input+0x740>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80077d2:	69f8      	ldr	r0, [r7, #28]
 80077d4:	f000 f88e 	bl	80078f4 <tcp_input_delayed_close>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d128      	bne.n	8007830 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80077de:	69f8      	ldr	r0, [r7, #28]
 80077e0:	f002 fac8 	bl	8009d74 <tcp_output>
 80077e4:	e025      	b.n	8007832 <tcp_input+0x756>
        goto aborted;
 80077e6:	bf00      	nop
 80077e8:	e023      	b.n	8007832 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80077ea:	bf00      	nop
 80077ec:	e021      	b.n	8007832 <tcp_input+0x756>
              goto aborted;
 80077ee:	bf00      	nop
 80077f0:	e01f      	b.n	8007832 <tcp_input+0x756>
          goto aborted;
 80077f2:	bf00      	nop
 80077f4:	e01d      	b.n	8007832 <tcp_input+0x756>
            goto aborted;
 80077f6:	bf00      	nop
 80077f8:	e01b      	b.n	8007832 <tcp_input+0x756>
              goto aborted;
 80077fa:	bf00      	nop
 80077fc:	e019      	b.n	8007832 <tcp_input+0x756>
 80077fe:	bf00      	nop
 8007800:	20005880 	.word	0x20005880
 8007804:	20005890 	.word	0x20005890
 8007808:	200058b0 	.word	0x200058b0
 800780c:	200058ad 	.word	0x200058ad
 8007810:	200058a8 	.word	0x200058a8
 8007814:	200058ac 	.word	0x200058ac
 8007818:	200058aa 	.word	0x200058aa
 800781c:	200058b4 	.word	0x200058b4
 8007820:	20005874 	.word	0x20005874
 8007824:	080107f8 	.word	0x080107f8
 8007828:	080109ac 	.word	0x080109ac
 800782c:	08010844 	.word	0x08010844
          goto aborted;
 8007830:	bf00      	nop
    tcp_input_pcb = NULL;
 8007832:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <tcp_input+0x7f4>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007838:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <tcp_input+0x7f8>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800783e:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <tcp_input+0x7fc>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d03f      	beq.n	80078c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007846:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <tcp_input+0x7fc>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd fd7c 	bl	8005348 <pbuf_free>
      inseg.p = NULL;
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <tcp_input+0x7fc>)
 8007852:	2200      	movs	r2, #0
 8007854:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007856:	e036      	b.n	80078c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007858:	4b20      	ldr	r3, [pc, #128]	; (80078dc <tcp_input+0x800>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	899b      	ldrh	r3, [r3, #12]
 800785e:	b29b      	uxth	r3, r3
 8007860:	4618      	mov	r0, r3
 8007862:	f7fc fa59 	bl	8003d18 <lwip_htons>
 8007866:	4603      	mov	r3, r0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d118      	bne.n	80078a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <tcp_input+0x804>)
 8007874:	6819      	ldr	r1, [r3, #0]
 8007876:	4b1b      	ldr	r3, [pc, #108]	; (80078e4 <tcp_input+0x808>)
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <tcp_input+0x80c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007882:	4b16      	ldr	r3, [pc, #88]	; (80078dc <tcp_input+0x800>)
 8007884:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007886:	885b      	ldrh	r3, [r3, #2]
 8007888:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800788a:	4a14      	ldr	r2, [pc, #80]	; (80078dc <tcp_input+0x800>)
 800788c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800788e:	8812      	ldrh	r2, [r2, #0]
 8007890:	b292      	uxth	r2, r2
 8007892:	9202      	str	r2, [sp, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <tcp_input+0x810>)
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <tcp_input+0x814>)
 800789c:	4602      	mov	r2, r0
 800789e:	2000      	movs	r0, #0
 80078a0:	f003 f81c 	bl	800a8dc <tcp_rst>
    pbuf_free(p);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7fd fd4f 	bl	8005348 <pbuf_free>
  return;
 80078aa:	e00c      	b.n	80078c6 <tcp_input+0x7ea>
    goto dropped;
 80078ac:	bf00      	nop
 80078ae:	e006      	b.n	80078be <tcp_input+0x7e2>
    goto dropped;
 80078b0:	bf00      	nop
 80078b2:	e004      	b.n	80078be <tcp_input+0x7e2>
    goto dropped;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <tcp_input+0x7e2>
      goto dropped;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <tcp_input+0x7e2>
      goto dropped;
 80078bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fd fd42 	bl	8005348 <pbuf_free>
 80078c4:	e000      	b.n	80078c8 <tcp_input+0x7ec>
  return;
 80078c6:	bf00      	nop
}
 80078c8:	3724      	adds	r7, #36	; 0x24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200058b4 	.word	0x200058b4
 80078d4:	200058b0 	.word	0x200058b0
 80078d8:	20005880 	.word	0x20005880
 80078dc:	20005890 	.word	0x20005890
 80078e0:	200058a4 	.word	0x200058a4
 80078e4:	200058aa 	.word	0x200058aa
 80078e8:	200058a0 	.word	0x200058a0
 80078ec:	20000148 	.word	0x20000148
 80078f0:	2000014c 	.word	0x2000014c

080078f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <tcp_input_delayed_close+0x1c>
 8007902:	4b17      	ldr	r3, [pc, #92]	; (8007960 <tcp_input_delayed_close+0x6c>)
 8007904:	f240 225a 	movw	r2, #602	; 0x25a
 8007908:	4916      	ldr	r1, [pc, #88]	; (8007964 <tcp_input_delayed_close+0x70>)
 800790a:	4817      	ldr	r0, [pc, #92]	; (8007968 <tcp_input_delayed_close+0x74>)
 800790c:	f006 fc20 	bl	800e150 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007910:	4b16      	ldr	r3, [pc, #88]	; (800796c <tcp_input_delayed_close+0x78>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01c      	beq.n	8007956 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8b5b      	ldrh	r3, [r3, #26]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <tcp_input_delayed_close+0x50>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6912      	ldr	r2, [r2, #16]
 800793c:	f06f 010e 	mvn.w	r1, #14
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	480a      	ldr	r0, [pc, #40]	; (8007970 <tcp_input_delayed_close+0x7c>)
 8007948:	f7ff fa50 	bl	8006dec <tcp_pcb_remove>
    tcp_free(pcb);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fe f83d 	bl	80059cc <tcp_free>
    return 1;
 8007952:	2301      	movs	r3, #1
 8007954:	e000      	b.n	8007958 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	080107f8 	.word	0x080107f8
 8007964:	080109c8 	.word	0x080109c8
 8007968:	08010844 	.word	0x08010844
 800796c:	200058ad 	.word	0x200058ad
 8007970:	20005874 	.word	0x20005874

08007974 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007974:	b590      	push	{r4, r7, lr}
 8007976:	b08b      	sub	sp, #44	; 0x2c
 8007978:	af04      	add	r7, sp, #16
 800797a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800797c:	4b6f      	ldr	r3, [pc, #444]	; (8007b3c <tcp_listen_input+0x1c8>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 80d2 	bne.w	8007b2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d106      	bne.n	800799e <tcp_listen_input+0x2a>
 8007990:	4b6b      	ldr	r3, [pc, #428]	; (8007b40 <tcp_listen_input+0x1cc>)
 8007992:	f240 2281 	movw	r2, #641	; 0x281
 8007996:	496b      	ldr	r1, [pc, #428]	; (8007b44 <tcp_listen_input+0x1d0>)
 8007998:	486b      	ldr	r0, [pc, #428]	; (8007b48 <tcp_listen_input+0x1d4>)
 800799a:	f006 fbd9 	bl	800e150 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800799e:	4b67      	ldr	r3, [pc, #412]	; (8007b3c <tcp_listen_input+0x1c8>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f003 0310 	and.w	r3, r3, #16
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d019      	beq.n	80079de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079aa:	4b68      	ldr	r3, [pc, #416]	; (8007b4c <tcp_listen_input+0x1d8>)
 80079ac:	6819      	ldr	r1, [r3, #0]
 80079ae:	4b68      	ldr	r3, [pc, #416]	; (8007b50 <tcp_listen_input+0x1dc>)
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	4b67      	ldr	r3, [pc, #412]	; (8007b54 <tcp_listen_input+0x1e0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079ba:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <tcp_listen_input+0x1e4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079be:	885b      	ldrh	r3, [r3, #2]
 80079c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079c2:	4a65      	ldr	r2, [pc, #404]	; (8007b58 <tcp_listen_input+0x1e4>)
 80079c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079c6:	8812      	ldrh	r2, [r2, #0]
 80079c8:	b292      	uxth	r2, r2
 80079ca:	9202      	str	r2, [sp, #8]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	4b63      	ldr	r3, [pc, #396]	; (8007b5c <tcp_listen_input+0x1e8>)
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	4b63      	ldr	r3, [pc, #396]	; (8007b60 <tcp_listen_input+0x1ec>)
 80079d4:	4602      	mov	r2, r0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f002 ff80 	bl	800a8dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80079dc:	e0a9      	b.n	8007b32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80079de:	4b57      	ldr	r3, [pc, #348]	; (8007b3c <tcp_listen_input+0x1c8>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80a3 	beq.w	8007b32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7d5b      	ldrb	r3, [r3, #21]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff f927 	bl	8006c44 <tcp_alloc>
 80079f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d111      	bne.n	8007a22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <tcp_listen_input+0xa8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6910      	ldr	r0, [r2, #16]
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	2100      	movs	r1, #0
 8007a14:	4798      	blx	r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]
      return;
 8007a1a:	e08b      	b.n	8007b34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007a1c:	23f0      	movs	r3, #240	; 0xf0
 8007a1e:	73bb      	strb	r3, [r7, #14]
      return;
 8007a20:	e088      	b.n	8007b34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007a22:	4b50      	ldr	r3, [pc, #320]	; (8007b64 <tcp_listen_input+0x1f0>)
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007a2a:	4b4e      	ldr	r3, [pc, #312]	; (8007b64 <tcp_listen_input+0x1f0>)
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8ada      	ldrh	r2, [r3, #22]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007a3a:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <tcp_listen_input+0x1e4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007a4c:	4b41      	ldr	r3, [pc, #260]	; (8007b54 <tcp_listen_input+0x1e0>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7ff fa58 	bl	8006f14 <tcp_next_iss>
 8007a64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007a7e:	4b35      	ldr	r3, [pc, #212]	; (8007b54 <tcp_listen_input+0x1e0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	1e5a      	subs	r2, r3, #1
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7a5b      	ldrb	r3, [r3, #9]
 8007a9a:	f003 030c 	and.w	r3, r3, #12
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7a1a      	ldrb	r2, [r3, #8]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007aac:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <tcp_listen_input+0x1f4>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	60da      	str	r2, [r3, #12]
 8007ab4:	4a2c      	ldr	r2, [pc, #176]	; (8007b68 <tcp_listen_input+0x1f4>)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	f003 f8d1 	bl	800ac60 <tcp_timer_needed>
 8007abe:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <tcp_listen_input+0x1f8>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ac4:	6978      	ldr	r0, [r7, #20]
 8007ac6:	f001 fd8f 	bl	80095e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007aca:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <tcp_listen_input+0x1e4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	89db      	ldrh	r3, [r3, #14]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f005 f84f 	bl	800cb90 <ip4_route>
 8007af2:	4601      	mov	r1, r0
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	3304      	adds	r3, #4
 8007af8:	461a      	mov	r2, r3
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff fa30 	bl	8006f60 <tcp_eff_send_mss_netif>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b08:	2112      	movs	r1, #18
 8007b0a:	6978      	ldr	r0, [r7, #20]
 8007b0c:	f002 f844 	bl	8009b98 <tcp_enqueue_flags>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6978      	ldr	r0, [r7, #20]
 8007b20:	f7fe f97e 	bl	8005e20 <tcp_abandon>
      return;
 8007b24:	e006      	b.n	8007b34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f002 f924 	bl	8009d74 <tcp_output>
  return;
 8007b2c:	e001      	b.n	8007b32 <tcp_listen_input+0x1be>
    return;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <tcp_listen_input+0x1c0>
  return;
 8007b32:	bf00      	nop
}
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd90      	pop	{r4, r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200058ac 	.word	0x200058ac
 8007b40:	080107f8 	.word	0x080107f8
 8007b44:	080109f0 	.word	0x080109f0
 8007b48:	08010844 	.word	0x08010844
 8007b4c:	200058a4 	.word	0x200058a4
 8007b50:	200058aa 	.word	0x200058aa
 8007b54:	200058a0 	.word	0x200058a0
 8007b58:	20005890 	.word	0x20005890
 8007b5c:	20000148 	.word	0x20000148
 8007b60:	2000014c 	.word	0x2000014c
 8007b64:	20000138 	.word	0x20000138
 8007b68:	20005874 	.word	0x20005874
 8007b6c:	2000587c 	.word	0x2000587c

08007b70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af04      	add	r7, sp, #16
 8007b76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007b78:	4b2f      	ldr	r3, [pc, #188]	; (8007c38 <tcp_timewait_input+0xc8>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d153      	bne.n	8007c2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <tcp_timewait_input+0x28>
 8007b8a:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <tcp_timewait_input+0xcc>)
 8007b8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007b90:	492b      	ldr	r1, [pc, #172]	; (8007c40 <tcp_timewait_input+0xd0>)
 8007b92:	482c      	ldr	r0, [pc, #176]	; (8007c44 <tcp_timewait_input+0xd4>)
 8007b94:	f006 fadc 	bl	800e150 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <tcp_timewait_input+0xc8>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02a      	beq.n	8007bfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <tcp_timewait_input+0xd8>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db2d      	blt.n	8007c0e <tcp_timewait_input+0x9e>
 8007bb2:	4b25      	ldr	r3, [pc, #148]	; (8007c48 <tcp_timewait_input+0xd8>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007bbe:	440b      	add	r3, r1
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc23      	bgt.n	8007c0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <tcp_timewait_input+0xdc>)
 8007bc8:	6819      	ldr	r1, [r3, #0]
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <tcp_timewait_input+0xe0>)
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <tcp_timewait_input+0xd8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bd6:	4b1f      	ldr	r3, [pc, #124]	; (8007c54 <tcp_timewait_input+0xe4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <tcp_timewait_input+0xe4>)
 8007be0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be2:	8812      	ldrh	r2, [r2, #0]
 8007be4:	b292      	uxth	r2, r2
 8007be6:	9202      	str	r2, [sp, #8]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <tcp_timewait_input+0xe8>)
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <tcp_timewait_input+0xec>)
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f002 fe72 	bl	800a8dc <tcp_rst>
      return;
 8007bf8:	e01b      	b.n	8007c32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <tcp_timewait_input+0xc8>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <tcp_timewait_input+0xf0>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007c0e:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <tcp_timewait_input+0xe0>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8b5b      	ldrh	r3, [r3, #26]
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f002 f8a5 	bl	8009d74 <tcp_output>
  }
  return;
 8007c2a:	e001      	b.n	8007c30 <tcp_timewait_input+0xc0>
    return;
 8007c2c:	bf00      	nop
 8007c2e:	e000      	b.n	8007c32 <tcp_timewait_input+0xc2>
  return;
 8007c30:	bf00      	nop
}
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	200058ac 	.word	0x200058ac
 8007c3c:	080107f8 	.word	0x080107f8
 8007c40:	08010a10 	.word	0x08010a10
 8007c44:	08010844 	.word	0x08010844
 8007c48:	200058a0 	.word	0x200058a0
 8007c4c:	200058a4 	.word	0x200058a4
 8007c50:	200058aa 	.word	0x200058aa
 8007c54:	20005890 	.word	0x20005890
 8007c58:	20000148 	.word	0x20000148
 8007c5c:	2000014c 	.word	0x2000014c
 8007c60:	20005868 	.word	0x20005868

08007c64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b08d      	sub	sp, #52	; 0x34
 8007c68:	af04      	add	r7, sp, #16
 8007c6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <tcp_process+0x24>
 8007c7a:	4b9d      	ldr	r3, [pc, #628]	; (8007ef0 <tcp_process+0x28c>)
 8007c7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007c80:	499c      	ldr	r1, [pc, #624]	; (8007ef4 <tcp_process+0x290>)
 8007c82:	489d      	ldr	r0, [pc, #628]	; (8007ef8 <tcp_process+0x294>)
 8007c84:	f006 fa64 	bl	800e150 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007c88:	4b9c      	ldr	r3, [pc, #624]	; (8007efc <tcp_process+0x298>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d04e      	beq.n	8007d32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7d1b      	ldrb	r3, [r3, #20]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d108      	bne.n	8007cae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ca0:	4b97      	ldr	r3, [pc, #604]	; (8007f00 <tcp_process+0x29c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d123      	bne.n	8007cf0 <tcp_process+0x8c>
        acceptable = 1;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	76fb      	strb	r3, [r7, #27]
 8007cac:	e020      	b.n	8007cf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cb2:	4b94      	ldr	r3, [pc, #592]	; (8007f04 <tcp_process+0x2a0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d102      	bne.n	8007cc0 <tcp_process+0x5c>
        acceptable = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	76fb      	strb	r3, [r7, #27]
 8007cbe:	e017      	b.n	8007cf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007cc0:	4b90      	ldr	r3, [pc, #576]	; (8007f04 <tcp_process+0x2a0>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	db10      	blt.n	8007cf0 <tcp_process+0x8c>
 8007cce:	4b8d      	ldr	r3, [pc, #564]	; (8007f04 <tcp_process+0x2a0>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007cda:	440b      	add	r3, r1
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dc06      	bgt.n	8007cf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8b5b      	ldrh	r3, [r3, #26]
 8007ce6:	f043 0302 	orr.w	r3, r3, #2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007cf0:	7efb      	ldrb	r3, [r7, #27]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01b      	beq.n	8007d2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7d1b      	ldrb	r3, [r3, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <tcp_process+0xa8>
 8007cfe:	4b7c      	ldr	r3, [pc, #496]	; (8007ef0 <tcp_process+0x28c>)
 8007d00:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007d04:	4980      	ldr	r1, [pc, #512]	; (8007f08 <tcp_process+0x2a4>)
 8007d06:	487c      	ldr	r0, [pc, #496]	; (8007ef8 <tcp_process+0x294>)
 8007d08:	f006 fa22 	bl	800e150 <iprintf>
      recv_flags |= TF_RESET;
 8007d0c:	4b7f      	ldr	r3, [pc, #508]	; (8007f0c <tcp_process+0x2a8>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	4b7d      	ldr	r3, [pc, #500]	; (8007f0c <tcp_process+0x2a8>)
 8007d18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	8b5b      	ldrh	r3, [r3, #26]
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007d28:	f06f 030d 	mvn.w	r3, #13
 8007d2c:	e37a      	b.n	8008424 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e378      	b.n	8008424 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007d32:	4b72      	ldr	r3, [pc, #456]	; (8007efc <tcp_process+0x298>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d010      	beq.n	8007d60 <tcp_process+0xfc>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7d1b      	ldrb	r3, [r3, #20]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d00c      	beq.n	8007d60 <tcp_process+0xfc>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7d1b      	ldrb	r3, [r3, #20]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d008      	beq.n	8007d60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8b5b      	ldrh	r3, [r3, #26]
 8007d52:	f043 0302 	orr.w	r3, r3, #2
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e361      	b.n	8008424 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8b5b      	ldrh	r3, [r3, #26]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d103      	bne.n	8007d74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007d6c:	4b68      	ldr	r3, [pc, #416]	; (8007f10 <tcp_process+0x2ac>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fc2f 	bl	80095e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7d1b      	ldrb	r3, [r3, #20]
 8007d8e:	3b02      	subs	r3, #2
 8007d90:	2b07      	cmp	r3, #7
 8007d92:	f200 8337 	bhi.w	8008404 <tcp_process+0x7a0>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <tcp_process+0x138>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dbd 	.word	0x08007dbd
 8007da0:	08007fed 	.word	0x08007fed
 8007da4:	08008165 	.word	0x08008165
 8007da8:	0800818f 	.word	0x0800818f
 8007dac:	080082b3 	.word	0x080082b3
 8007db0:	08008165 	.word	0x08008165
 8007db4:	0800833f 	.word	0x0800833f
 8007db8:	080083cf 	.word	0x080083cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007dbc:	4b4f      	ldr	r3, [pc, #316]	; (8007efc <tcp_process+0x298>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80e4 	beq.w	8007f92 <tcp_process+0x32e>
 8007dca:	4b4c      	ldr	r3, [pc, #304]	; (8007efc <tcp_process+0x298>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80dd 	beq.w	8007f92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	4b48      	ldr	r3, [pc, #288]	; (8007f00 <tcp_process+0x29c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	f040 80d5 	bne.w	8007f92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007de8:	4b46      	ldr	r3, [pc, #280]	; (8007f04 <tcp_process+0x2a0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007dfa:	4b41      	ldr	r3, [pc, #260]	; (8007f00 <tcp_process+0x29c>)
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007e02:	4b44      	ldr	r3, [pc, #272]	; (8007f14 <tcp_process+0x2b0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	89db      	ldrh	r3, [r3, #14]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007e1c:	4b39      	ldr	r3, [pc, #228]	; (8007f04 <tcp_process+0x2a0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	1e5a      	subs	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3304      	adds	r3, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f004 feab 	bl	800cb90 <ip4_route>
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	461a      	mov	r2, r3
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7ff f88c 	bl	8006f60 <tcp_eff_send_mss_netif>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e54:	009a      	lsls	r2, r3, #2
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf38      	it	cc
 8007e64:	460b      	movcc	r3, r1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d204      	bcs.n	8007e74 <tcp_process+0x210>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	e00d      	b.n	8007e90 <tcp_process+0x22c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d904      	bls.n	8007e8c <tcp_process+0x228>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	e001      	b.n	8007e90 <tcp_process+0x22c>
 8007e8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d106      	bne.n	8007eae <tcp_process+0x24a>
 8007ea0:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <tcp_process+0x28c>)
 8007ea2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007ea6:	491c      	ldr	r1, [pc, #112]	; (8007f18 <tcp_process+0x2b4>)
 8007ea8:	4813      	ldr	r0, [pc, #76]	; (8007ef8 <tcp_process+0x294>)
 8007eaa:	f006 f951 	bl	800e150 <iprintf>
        --pcb->snd_queuelen;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12a      	bne.n	8007f20 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ece:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <tcp_process+0x280>
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <tcp_process+0x28c>)
 8007ed8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007edc:	490f      	ldr	r1, [pc, #60]	; (8007f1c <tcp_process+0x2b8>)
 8007ede:	4806      	ldr	r0, [pc, #24]	; (8007ef8 <tcp_process+0x294>)
 8007ee0:	f006 f936 	bl	800e150 <iprintf>
          pcb->unsent = rseg->next;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	66da      	str	r2, [r3, #108]	; 0x6c
 8007eec:	e01c      	b.n	8007f28 <tcp_process+0x2c4>
 8007eee:	bf00      	nop
 8007ef0:	080107f8 	.word	0x080107f8
 8007ef4:	08010a30 	.word	0x08010a30
 8007ef8:	08010844 	.word	0x08010844
 8007efc:	200058ac 	.word	0x200058ac
 8007f00:	200058a4 	.word	0x200058a4
 8007f04:	200058a0 	.word	0x200058a0
 8007f08:	08010a4c 	.word	0x08010a4c
 8007f0c:	200058ad 	.word	0x200058ad
 8007f10:	20005868 	.word	0x20005868
 8007f14:	20005890 	.word	0x20005890
 8007f18:	08010a6c 	.word	0x08010a6c
 8007f1c:	08010a84 	.word	0x08010a84
        } else {
          pcb->unacked = rseg->next;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007f28:	69f8      	ldr	r0, [r7, #28]
 8007f2a:	f7fe fd22 	bl	8006972 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f3c:	861a      	strh	r2, [r3, #48]	; 0x30
 8007f3e:	e006      	b.n	8007f4e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <tcp_process+0x30a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6910      	ldr	r0, [r2, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4798      	blx	r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	76bb      	strb	r3, [r7, #26]
 8007f6c:	e001      	b.n	8007f72 <tcp_process+0x30e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007f72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f76:	f113 0f0d 	cmn.w	r3, #13
 8007f7a:	d102      	bne.n	8007f82 <tcp_process+0x31e>
          return ERR_ABRT;
 8007f7c:	f06f 030c 	mvn.w	r3, #12
 8007f80:	e250      	b.n	8008424 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8b5b      	ldrh	r3, [r3, #26]
 8007f86:	f043 0302 	orr.w	r3, r3, #2
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007f90:	e23a      	b.n	8008408 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007f92:	4b98      	ldr	r3, [pc, #608]	; (80081f4 <tcp_process+0x590>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8234 	beq.w	8008408 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fa0:	4b95      	ldr	r3, [pc, #596]	; (80081f8 <tcp_process+0x594>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	4b95      	ldr	r3, [pc, #596]	; (80081fc <tcp_process+0x598>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4b95      	ldr	r3, [pc, #596]	; (8008200 <tcp_process+0x59c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fb0:	4b94      	ldr	r3, [pc, #592]	; (8008204 <tcp_process+0x5a0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fb8:	4a92      	ldr	r2, [pc, #584]	; (8008204 <tcp_process+0x5a0>)
 8007fba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fbc:	8812      	ldrh	r2, [r2, #0]
 8007fbe:	b292      	uxth	r2, r2
 8007fc0:	9202      	str	r2, [sp, #8]
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	4b90      	ldr	r3, [pc, #576]	; (8008208 <tcp_process+0x5a4>)
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4b90      	ldr	r3, [pc, #576]	; (800820c <tcp_process+0x5a8>)
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fc85 	bl	800a8dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	f200 8215 	bhi.w	8008408 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f002 fa4f 	bl	800a488 <tcp_rexmit_rto>
      break;
 8007fea:	e20d      	b.n	8008408 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007fec:	4b81      	ldr	r3, [pc, #516]	; (80081f4 <tcp_process+0x590>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80a1 	beq.w	800813c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007ffa:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <tcp_process+0x594>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	db7e      	blt.n	8008108 <tcp_process+0x4a4>
 800800a:	4b7b      	ldr	r3, [pc, #492]	; (80081f8 <tcp_process+0x594>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	dc77      	bgt.n	8008108 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2204      	movs	r2, #4
 800801c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008026:	23fa      	movs	r3, #250	; 0xfa
 8008028:	76bb      	strb	r3, [r7, #26]
 800802a:	e01d      	b.n	8008068 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <tcp_process+0x3e0>
 8008036:	4b76      	ldr	r3, [pc, #472]	; (8008210 <tcp_process+0x5ac>)
 8008038:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800803c:	4975      	ldr	r1, [pc, #468]	; (8008214 <tcp_process+0x5b0>)
 800803e:	4876      	ldr	r0, [pc, #472]	; (8008218 <tcp_process+0x5b4>)
 8008040:	f006 f886 	bl	800e150 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <tcp_process+0x400>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6910      	ldr	r0, [r2, #16]
 8008058:	2200      	movs	r2, #0
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4798      	blx	r3
 800805e:	4603      	mov	r3, r0
 8008060:	76bb      	strb	r3, [r7, #26]
 8008062:	e001      	b.n	8008068 <tcp_process+0x404>
 8008064:	23f0      	movs	r3, #240	; 0xf0
 8008066:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008074:	f113 0f0d 	cmn.w	r3, #13
 8008078:	d002      	beq.n	8008080 <tcp_process+0x41c>
              tcp_abort(pcb);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fd ff8e 	bl	8005f9c <tcp_abort>
            }
            return ERR_ABRT;
 8008080:	f06f 030c 	mvn.w	r3, #12
 8008084:	e1ce      	b.n	8008424 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fae0 	bl	800864c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800808c:	4b63      	ldr	r3, [pc, #396]	; (800821c <tcp_process+0x5b8>)
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <tcp_process+0x43c>
            recv_acked--;
 8008094:	4b61      	ldr	r3, [pc, #388]	; (800821c <tcp_process+0x5b8>)
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	4b5f      	ldr	r3, [pc, #380]	; (800821c <tcp_process+0x5b8>)
 800809e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080a4:	009a      	lsls	r2, r3, #2
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf38      	it	cc
 80080b4:	460b      	movcc	r3, r1
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d204      	bcs.n	80080c4 <tcp_process+0x460>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	e00d      	b.n	80080e0 <tcp_process+0x47c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d904      	bls.n	80080dc <tcp_process+0x478>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	b29b      	uxth	r3, r3
 80080da:	e001      	b.n	80080e0 <tcp_process+0x47c>
 80080dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80080e6:	4b4e      	ldr	r3, [pc, #312]	; (8008220 <tcp_process+0x5bc>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d037      	beq.n	8008162 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8b5b      	ldrh	r3, [r3, #26]
 80080f6:	f043 0302 	orr.w	r3, r3, #2
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2207      	movs	r2, #7
 8008104:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008106:	e02c      	b.n	8008162 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008108:	4b3b      	ldr	r3, [pc, #236]	; (80081f8 <tcp_process+0x594>)
 800810a:	6819      	ldr	r1, [r3, #0]
 800810c:	4b3b      	ldr	r3, [pc, #236]	; (80081fc <tcp_process+0x598>)
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	4b3b      	ldr	r3, [pc, #236]	; (8008200 <tcp_process+0x59c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008118:	4b3a      	ldr	r3, [pc, #232]	; (8008204 <tcp_process+0x5a0>)
 800811a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800811c:	885b      	ldrh	r3, [r3, #2]
 800811e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008120:	4a38      	ldr	r2, [pc, #224]	; (8008204 <tcp_process+0x5a0>)
 8008122:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008124:	8812      	ldrh	r2, [r2, #0]
 8008126:	b292      	uxth	r2, r2
 8008128:	9202      	str	r2, [sp, #8]
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	4b36      	ldr	r3, [pc, #216]	; (8008208 <tcp_process+0x5a4>)
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4b36      	ldr	r3, [pc, #216]	; (800820c <tcp_process+0x5a8>)
 8008132:	4602      	mov	r2, r0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f002 fbd1 	bl	800a8dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800813a:	e167      	b.n	800840c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800813c:	4b2d      	ldr	r3, [pc, #180]	; (80081f4 <tcp_process+0x590>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8161 	beq.w	800840c <tcp_process+0x7a8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	1e5a      	subs	r2, r3, #1
 8008150:	4b2b      	ldr	r3, [pc, #172]	; (8008200 <tcp_process+0x59c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	f040 8159 	bne.w	800840c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f002 f9b6 	bl	800a4cc <tcp_rexmit>
      break;
 8008160:	e154      	b.n	800840c <tcp_process+0x7a8>
 8008162:	e153      	b.n	800840c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa71 	bl	800864c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800816a:	4b2d      	ldr	r3, [pc, #180]	; (8008220 <tcp_process+0x5bc>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 814c 	beq.w	8008410 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8b5b      	ldrh	r3, [r3, #26]
 800817c:	f043 0302 	orr.w	r3, r3, #2
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2207      	movs	r2, #7
 800818a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800818c:	e140      	b.n	8008410 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa5c 	bl	800864c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008194:	4b22      	ldr	r3, [pc, #136]	; (8008220 <tcp_process+0x5bc>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d071      	beq.n	8008284 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081a0:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <tcp_process+0x590>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d060      	beq.n	800826e <tcp_process+0x60a>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <tcp_process+0x594>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d15a      	bne.n	800826e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d156      	bne.n	800826e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8b5b      	ldrh	r3, [r3, #26]
 80081c4:	f043 0302 	orr.w	r3, r3, #2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7fe fdbc 	bl	8006d4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <tcp_process+0x5c0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d105      	bne.n	80081ea <tcp_process+0x586>
 80081de:	4b11      	ldr	r3, [pc, #68]	; (8008224 <tcp_process+0x5c0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <tcp_process+0x5c0>)
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	e02e      	b.n	8008248 <tcp_process+0x5e4>
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <tcp_process+0x5c0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e027      	b.n	8008242 <tcp_process+0x5de>
 80081f2:	bf00      	nop
 80081f4:	200058ac 	.word	0x200058ac
 80081f8:	200058a4 	.word	0x200058a4
 80081fc:	200058aa 	.word	0x200058aa
 8008200:	200058a0 	.word	0x200058a0
 8008204:	20005890 	.word	0x20005890
 8008208:	20000148 	.word	0x20000148
 800820c:	2000014c 	.word	0x2000014c
 8008210:	080107f8 	.word	0x080107f8
 8008214:	08010a98 	.word	0x08010a98
 8008218:	08010844 	.word	0x08010844
 800821c:	200058a8 	.word	0x200058a8
 8008220:	200058ad 	.word	0x200058ad
 8008224:	20005874 	.word	0x20005874
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d104      	bne.n	800823c <tcp_process+0x5d8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e005      	b.n	8008248 <tcp_process+0x5e4>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ef      	bne.n	8008228 <tcp_process+0x5c4>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	4b77      	ldr	r3, [pc, #476]	; (800842c <tcp_process+0x7c8>)
 8008250:	2201      	movs	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220a      	movs	r2, #10
 8008258:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800825a:	4b75      	ldr	r3, [pc, #468]	; (8008430 <tcp_process+0x7cc>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]
 8008262:	4a73      	ldr	r2, [pc, #460]	; (8008430 <tcp_process+0x7cc>)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f002 fcfa 	bl	800ac60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800826c:	e0d2      	b.n	8008414 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8b5b      	ldrh	r3, [r3, #26]
 8008272:	f043 0302 	orr.w	r3, r3, #2
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2208      	movs	r2, #8
 8008280:	751a      	strb	r2, [r3, #20]
      break;
 8008282:	e0c7      	b.n	8008414 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008284:	4b6b      	ldr	r3, [pc, #428]	; (8008434 <tcp_process+0x7d0>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80c1 	beq.w	8008414 <tcp_process+0x7b0>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008296:	4b68      	ldr	r3, [pc, #416]	; (8008438 <tcp_process+0x7d4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	f040 80ba 	bne.w	8008414 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 80b5 	bne.w	8008414 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2206      	movs	r2, #6
 80082ae:	751a      	strb	r2, [r3, #20]
      break;
 80082b0:	e0b0      	b.n	8008414 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9ca 	bl	800864c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80082b8:	4b60      	ldr	r3, [pc, #384]	; (800843c <tcp_process+0x7d8>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a9 	beq.w	8008418 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8b5b      	ldrh	r3, [r3, #26]
 80082ca:	f043 0302 	orr.w	r3, r3, #2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fe fd39 	bl	8006d4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80082da:	4b59      	ldr	r3, [pc, #356]	; (8008440 <tcp_process+0x7dc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d105      	bne.n	80082f0 <tcp_process+0x68c>
 80082e4:	4b56      	ldr	r3, [pc, #344]	; (8008440 <tcp_process+0x7dc>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	4a55      	ldr	r2, [pc, #340]	; (8008440 <tcp_process+0x7dc>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	e013      	b.n	8008318 <tcp_process+0x6b4>
 80082f0:	4b53      	ldr	r3, [pc, #332]	; (8008440 <tcp_process+0x7dc>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	e00c      	b.n	8008312 <tcp_process+0x6ae>
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d104      	bne.n	800830c <tcp_process+0x6a8>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	60da      	str	r2, [r3, #12]
 800830a:	e005      	b.n	8008318 <tcp_process+0x6b4>
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ef      	bne.n	80082f8 <tcp_process+0x694>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	4b43      	ldr	r3, [pc, #268]	; (800842c <tcp_process+0x7c8>)
 8008320:	2201      	movs	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	220a      	movs	r2, #10
 8008328:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800832a:	4b41      	ldr	r3, [pc, #260]	; (8008430 <tcp_process+0x7cc>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <tcp_process+0x7cc>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f002 fc92 	bl	800ac60 <tcp_timer_needed>
      }
      break;
 800833c:	e06c      	b.n	8008418 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f984 	bl	800864c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008344:	4b3b      	ldr	r3, [pc, #236]	; (8008434 <tcp_process+0x7d0>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d065      	beq.n	800841c <tcp_process+0x7b8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008354:	4b38      	ldr	r3, [pc, #224]	; (8008438 <tcp_process+0x7d4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d15f      	bne.n	800841c <tcp_process+0x7b8>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d15b      	bne.n	800841c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fe fcf1 	bl	8006d4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800836a:	4b35      	ldr	r3, [pc, #212]	; (8008440 <tcp_process+0x7dc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d105      	bne.n	8008380 <tcp_process+0x71c>
 8008374:	4b32      	ldr	r3, [pc, #200]	; (8008440 <tcp_process+0x7dc>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	4a31      	ldr	r2, [pc, #196]	; (8008440 <tcp_process+0x7dc>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	e013      	b.n	80083a8 <tcp_process+0x744>
 8008380:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <tcp_process+0x7dc>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e00c      	b.n	80083a2 <tcp_process+0x73e>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d104      	bne.n	800839c <tcp_process+0x738>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	60da      	str	r2, [r3, #12]
 800839a:	e005      	b.n	80083a8 <tcp_process+0x744>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1ef      	bne.n	8008388 <tcp_process+0x724>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	4b1f      	ldr	r3, [pc, #124]	; (800842c <tcp_process+0x7c8>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	220a      	movs	r2, #10
 80083b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80083ba:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <tcp_process+0x7cc>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	60da      	str	r2, [r3, #12]
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <tcp_process+0x7cc>)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	f002 fc4a 	bl	800ac60 <tcp_timer_needed>
      }
      break;
 80083cc:	e026      	b.n	800841c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f93c 	bl	800864c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <tcp_process+0x7d0>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01f      	beq.n	8008420 <tcp_process+0x7bc>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083e4:	4b14      	ldr	r3, [pc, #80]	; (8008438 <tcp_process+0x7d4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d119      	bne.n	8008420 <tcp_process+0x7bc>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d115      	bne.n	8008420 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <tcp_process+0x7d8>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f043 0310 	orr.w	r3, r3, #16
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <tcp_process+0x7d8>)
 8008400:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008402:	e00d      	b.n	8008420 <tcp_process+0x7bc>
    default:
      break;
 8008404:	bf00      	nop
 8008406:	e00c      	b.n	8008422 <tcp_process+0x7be>
      break;
 8008408:	bf00      	nop
 800840a:	e00a      	b.n	8008422 <tcp_process+0x7be>
      break;
 800840c:	bf00      	nop
 800840e:	e008      	b.n	8008422 <tcp_process+0x7be>
      break;
 8008410:	bf00      	nop
 8008412:	e006      	b.n	8008422 <tcp_process+0x7be>
      break;
 8008414:	bf00      	nop
 8008416:	e004      	b.n	8008422 <tcp_process+0x7be>
      break;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <tcp_process+0x7be>
      break;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <tcp_process+0x7be>
      break;
 8008420:	bf00      	nop
  }
  return ERR_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3724      	adds	r7, #36	; 0x24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd90      	pop	{r4, r7, pc}
 800842c:	2000587c 	.word	0x2000587c
 8008430:	20005878 	.word	0x20005878
 8008434:	200058ac 	.word	0x200058ac
 8008438:	200058a4 	.word	0x200058a4
 800843c:	200058ad 	.word	0x200058ad
 8008440:	20005874 	.word	0x20005874

08008444 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <tcp_oos_insert_segment+0x1e>
 8008454:	4b3b      	ldr	r3, [pc, #236]	; (8008544 <tcp_oos_insert_segment+0x100>)
 8008456:	f240 421f 	movw	r2, #1055	; 0x41f
 800845a:	493b      	ldr	r1, [pc, #236]	; (8008548 <tcp_oos_insert_segment+0x104>)
 800845c:	483b      	ldr	r0, [pc, #236]	; (800854c <tcp_oos_insert_segment+0x108>)
 800845e:	f005 fe77 	bl	800e150 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	899b      	ldrh	r3, [r3, #12]
 8008468:	b29b      	uxth	r3, r3
 800846a:	4618      	mov	r0, r3
 800846c:	f7fb fc54 	bl	8003d18 <lwip_htons>
 8008470:	4603      	mov	r3, r0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d028      	beq.n	80084ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800847c:	6838      	ldr	r0, [r7, #0]
 800847e:	f7fe fa63 	bl	8006948 <tcp_segs_free>
    next = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
 8008486:	e056      	b.n	8008536 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	899b      	ldrh	r3, [r3, #12]
 800848e:	b29b      	uxth	r3, r3
 8008490:	4618      	mov	r0, r3
 8008492:	f7fb fc41 	bl	8003d18 <lwip_htons>
 8008496:	4603      	mov	r3, r0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	899b      	ldrh	r3, [r3, #12]
 80084a8:	b29c      	uxth	r4, r3
 80084aa:	2001      	movs	r0, #1
 80084ac:	f7fb fc34 	bl	8003d18 <lwip_htons>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4322      	orrs	r2, r4
 80084ba:	b292      	uxth	r2, r2
 80084bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7fe fa52 	bl	8006972 <tcp_seg_free>
    while (next &&
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00e      	beq.n	80084f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	891b      	ldrh	r3, [r3, #8]
 80084d8:	461a      	mov	r2, r3
 80084da:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <tcp_oos_insert_segment+0x10c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	441a      	add	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	8909      	ldrh	r1, [r1, #8]
 80084ea:	440b      	add	r3, r1
 80084ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	daca      	bge.n	8008488 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01e      	beq.n	8008536 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	891b      	ldrh	r3, [r3, #8]
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <tcp_oos_insert_segment+0x10c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	441a      	add	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800850c:	2b00      	cmp	r3, #0
 800850e:	dd12      	ble.n	8008536 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	b29a      	uxth	r2, r3
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <tcp_oos_insert_segment+0x10c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	891b      	ldrh	r3, [r3, #8]
 800852e:	4619      	mov	r1, r3
 8008530:	4610      	mov	r0, r2
 8008532:	f7fc fd83 	bl	800503c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	601a      	str	r2, [r3, #0]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bd90      	pop	{r4, r7, pc}
 8008544:	080107f8 	.word	0x080107f8
 8008548:	08010ab8 	.word	0x08010ab8
 800854c:	08010844 	.word	0x08010844
 8008550:	200058a0 	.word	0x200058a0

08008554 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008554:	b5b0      	push	{r4, r5, r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008562:	e03e      	b.n	80085e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fc ff70 	bl	8005458 <pbuf_clen>
 8008578:	4603      	mov	r3, r0
 800857a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008582:	8a7a      	ldrh	r2, [r7, #18]
 8008584:	429a      	cmp	r2, r3
 8008586:	d906      	bls.n	8008596 <tcp_free_acked_segments+0x42>
 8008588:	4b2a      	ldr	r3, [pc, #168]	; (8008634 <tcp_free_acked_segments+0xe0>)
 800858a:	f240 4257 	movw	r2, #1111	; 0x457
 800858e:	492a      	ldr	r1, [pc, #168]	; (8008638 <tcp_free_acked_segments+0xe4>)
 8008590:	482a      	ldr	r0, [pc, #168]	; (800863c <tcp_free_acked_segments+0xe8>)
 8008592:	f005 fddd 	bl	800e150 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800859c:	8a7b      	ldrh	r3, [r7, #18]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	891a      	ldrh	r2, [r3, #8]
 80085ac:	4b24      	ldr	r3, [pc, #144]	; (8008640 <tcp_free_acked_segments+0xec>)
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	4413      	add	r3, r2
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	4b22      	ldr	r3, [pc, #136]	; (8008640 <tcp_free_acked_segments+0xec>)
 80085b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	f7fe f9da 	bl	8006972 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00c      	beq.n	80085e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <tcp_free_acked_segments+0x8e>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <tcp_free_acked_segments+0x8e>
 80085d4:	4b17      	ldr	r3, [pc, #92]	; (8008634 <tcp_free_acked_segments+0xe0>)
 80085d6:	f240 4261 	movw	r2, #1121	; 0x461
 80085da:	491a      	ldr	r1, [pc, #104]	; (8008644 <tcp_free_acked_segments+0xf0>)
 80085dc:	4817      	ldr	r0, [pc, #92]	; (800863c <tcp_free_acked_segments+0xe8>)
 80085de:	f005 fdb7 	bl	800e150 <iprintf>
  while (seg_list != NULL &&
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fb fba7 	bl	8003d42 <lwip_htonl>
 80085f4:	4604      	mov	r4, r0
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	891b      	ldrh	r3, [r3, #8]
 80085fa:	461d      	mov	r5, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	899b      	ldrh	r3, [r3, #12]
 8008602:	b29b      	uxth	r3, r3
 8008604:	4618      	mov	r0, r3
 8008606:	f7fb fb87 	bl	8003d18 <lwip_htons>
 800860a:	4603      	mov	r3, r0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <tcp_free_acked_segments+0xc6>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <tcp_free_acked_segments+0xc8>
 800861a:	2300      	movs	r3, #0
 800861c:	442b      	add	r3, r5
 800861e:	18e2      	adds	r2, r4, r3
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <tcp_free_acked_segments+0xf4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd9c      	ble.n	8008564 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800862a:	68bb      	ldr	r3, [r7, #8]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bdb0      	pop	{r4, r5, r7, pc}
 8008634:	080107f8 	.word	0x080107f8
 8008638:	08010ae0 	.word	0x08010ae0
 800863c:	08010844 	.word	0x08010844
 8008640:	200058a8 	.word	0x200058a8
 8008644:	08010b08 	.word	0x08010b08
 8008648:	200058a4 	.word	0x200058a4

0800864c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800864c:	b5b0      	push	{r4, r5, r7, lr}
 800864e:	b094      	sub	sp, #80	; 0x50
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <tcp_receive+0x20>
 800865e:	4b91      	ldr	r3, [pc, #580]	; (80088a4 <tcp_receive+0x258>)
 8008660:	f240 427b 	movw	r2, #1147	; 0x47b
 8008664:	4990      	ldr	r1, [pc, #576]	; (80088a8 <tcp_receive+0x25c>)
 8008666:	4891      	ldr	r0, [pc, #580]	; (80088ac <tcp_receive+0x260>)
 8008668:	f005 fd72 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d806      	bhi.n	8008682 <tcp_receive+0x36>
 8008674:	4b8b      	ldr	r3, [pc, #556]	; (80088a4 <tcp_receive+0x258>)
 8008676:	f240 427c 	movw	r2, #1148	; 0x47c
 800867a:	498d      	ldr	r1, [pc, #564]	; (80088b0 <tcp_receive+0x264>)
 800867c:	488b      	ldr	r0, [pc, #556]	; (80088ac <tcp_receive+0x260>)
 800867e:	f005 fd67 	bl	800e150 <iprintf>

  if (flags & TCP_ACK) {
 8008682:	4b8c      	ldr	r3, [pc, #560]	; (80088b4 <tcp_receive+0x268>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 0310 	and.w	r3, r3, #16
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8264 	beq.w	8008b58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	4413      	add	r3, r2
 800869e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086a4:	4b84      	ldr	r3, [pc, #528]	; (80088b8 <tcp_receive+0x26c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	db1b      	blt.n	80086e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086b2:	4b81      	ldr	r3, [pc, #516]	; (80088b8 <tcp_receive+0x26c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d106      	bne.n	80086c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086be:	4b7f      	ldr	r3, [pc, #508]	; (80088bc <tcp_receive+0x270>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	db0e      	blt.n	80086e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086cc:	4b7b      	ldr	r3, [pc, #492]	; (80088bc <tcp_receive+0x270>)
 80086ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d125      	bne.n	8008720 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80086d4:	4b7a      	ldr	r3, [pc, #488]	; (80088c0 <tcp_receive+0x274>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	89db      	ldrh	r3, [r3, #14]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d91c      	bls.n	8008720 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80086e6:	4b76      	ldr	r3, [pc, #472]	; (80088c0 <tcp_receive+0x274>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	89db      	ldrh	r3, [r3, #14]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008700:	429a      	cmp	r2, r3
 8008702:	d205      	bcs.n	8008710 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008710:	4b69      	ldr	r3, [pc, #420]	; (80088b8 <tcp_receive+0x26c>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008718:	4b68      	ldr	r3, [pc, #416]	; (80088bc <tcp_receive+0x270>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008720:	4b66      	ldr	r3, [pc, #408]	; (80088bc <tcp_receive+0x270>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	dc58      	bgt.n	80087e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800872e:	4b65      	ldr	r3, [pc, #404]	; (80088c4 <tcp_receive+0x278>)
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d14b      	bne.n	80087ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008740:	4413      	add	r3, r2
 8008742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008744:	429a      	cmp	r2, r3
 8008746:	d142      	bne.n	80087ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800874e:	2b00      	cmp	r3, #0
 8008750:	db3d      	blt.n	80087ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008756:	4b59      	ldr	r3, [pc, #356]	; (80088bc <tcp_receive+0x270>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d137      	bne.n	80087ce <tcp_receive+0x182>
              found_dupack = 1;
 800875e:	2301      	movs	r3, #1
 8008760:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008768:	2bff      	cmp	r3, #255	; 0xff
 800876a:	d007      	beq.n	800877c <tcp_receive+0x130>
                ++pcb->dupacks;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008772:	3301      	adds	r3, #1
 8008774:	b2da      	uxtb	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008782:	2b03      	cmp	r3, #3
 8008784:	d91b      	bls.n	80087be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008790:	4413      	add	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800879a:	429a      	cmp	r2, r3
 800879c:	d30a      	bcc.n	80087b4 <tcp_receive+0x168>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087a8:	4413      	add	r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80087b2:	e004      	b.n	80087be <tcp_receive+0x172>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d902      	bls.n	80087ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 feeb 	bl	800a5a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80087ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f040 8161 	bne.w	8008a98 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087de:	e15b      	b.n	8008a98 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80087e0:	4b36      	ldr	r3, [pc, #216]	; (80088bc <tcp_receive+0x270>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f2c0 814e 	blt.w	8008a8e <tcp_receive+0x442>
 80087f2:	4b32      	ldr	r3, [pc, #200]	; (80088bc <tcp_receive+0x270>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f300 8146 	bgt.w	8008a8e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8b5b      	ldrh	r3, [r3, #26]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8b5b      	ldrh	r3, [r3, #26]
 8008812:	f023 0304 	bic.w	r3, r3, #4
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800883e:	10db      	asrs	r3, r3, #3
 8008840:	b21b      	sxth	r3, r3
 8008842:	b29a      	uxth	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	4413      	add	r3, r2
 800884e:	b29b      	uxth	r3, r3
 8008850:	b21a      	sxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008858:	4b18      	ldr	r3, [pc, #96]	; (80088bc <tcp_receive+0x270>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	b29b      	uxth	r3, r3
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <tcp_receive+0x270>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7d1b      	ldrb	r3, [r3, #20]
 800887c:	2b03      	cmp	r3, #3
 800887e:	f240 8097 	bls.w	80089b0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800888e:	429a      	cmp	r2, r3
 8008890:	d245      	bcs.n	800891e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	8b5b      	ldrh	r3, [r3, #26]
 8008896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800889a:	2b00      	cmp	r3, #0
 800889c:	d014      	beq.n	80088c8 <tcp_receive+0x27c>
 800889e:	2301      	movs	r3, #1
 80088a0:	e013      	b.n	80088ca <tcp_receive+0x27e>
 80088a2:	bf00      	nop
 80088a4:	080107f8 	.word	0x080107f8
 80088a8:	08010b28 	.word	0x08010b28
 80088ac:	08010844 	.word	0x08010844
 80088b0:	08010b44 	.word	0x08010b44
 80088b4:	200058ac 	.word	0x200058ac
 80088b8:	200058a0 	.word	0x200058a0
 80088bc:	200058a4 	.word	0x200058a4
 80088c0:	20005890 	.word	0x20005890
 80088c4:	200058aa 	.word	0x200058aa
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80088ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088d8:	fb12 f303 	smulbb	r3, r2, r3
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088e0:	4293      	cmp	r3, r2
 80088e2:	bf28      	it	cs
 80088e4:	4613      	movcs	r3, r2
 80088e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80088f0:	4413      	add	r3, r2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d309      	bcc.n	8008912 <tcp_receive+0x2c6>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008906:	4413      	add	r3, r2
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008910:	e04e      	b.n	80089b0 <tcp_receive+0x364>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800891c:	e048      	b.n	80089b0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008926:	4413      	add	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008930:	429a      	cmp	r2, r3
 8008932:	d309      	bcc.n	8008948 <tcp_receive+0x2fc>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800893a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800893c:	4413      	add	r3, r2
 800893e:	b29a      	uxth	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008946:	e004      	b.n	8008952 <tcp_receive+0x306>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800894e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800895e:	429a      	cmp	r2, r3
 8008960:	d326      	bcc.n	80089b0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008982:	4413      	add	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800898c:	429a      	cmp	r2, r3
 800898e:	d30a      	bcc.n	80089a6 <tcp_receive+0x35a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800899a:	4413      	add	r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089a4:	e004      	b.n	80089b0 <tcp_receive+0x364>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b8:	4a98      	ldr	r2, [pc, #608]	; (8008c1c <tcp_receive+0x5d0>)
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fdca 	bl	8008554 <tcp_free_acked_segments>
 80089c0:	4602      	mov	r2, r0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ce:	4a94      	ldr	r2, [pc, #592]	; (8008c20 <tcp_receive+0x5d4>)
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fdbf 	bl	8008554 <tcp_free_acked_segments>
 80089d6:	4602      	mov	r2, r0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089ea:	861a      	strh	r2, [r3, #48]	; 0x30
 80089ec:	e002      	b.n	80089f4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008a10:	4b84      	ldr	r3, [pc, #528]	; (8008c24 <tcp_receive+0x5d8>)
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8b5b      	ldrh	r3, [r3, #26]
 8008a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d035      	beq.n	8008a96 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d118      	bne.n	8008a64 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fb f97b 	bl	8003d42 <lwip_htonl>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	dc20      	bgt.n	8008a96 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8b5b      	ldrh	r3, [r3, #26]
 8008a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a62:	e018      	b.n	8008a96 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fb f966 	bl	8003d42 <lwip_htonl>
 8008a76:	4603      	mov	r3, r0
 8008a78:	1ae3      	subs	r3, r4, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dc0b      	bgt.n	8008a96 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8b5b      	ldrh	r3, [r3, #26]
 8008a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a8c:	e003      	b.n	8008a96 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 ff76 	bl	800a980 <tcp_send_empty_ack>
 8008a94:	e000      	b.n	8008a98 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a96:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05b      	beq.n	8008b58 <tcp_receive+0x50c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa4:	4b60      	ldr	r3, [pc, #384]	; (8008c28 <tcp_receive+0x5dc>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	da54      	bge.n	8008b58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008aae:	4b5f      	ldr	r3, [pc, #380]	; (8008c2c <tcp_receive+0x5e0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008ac2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008acc:	10db      	asrs	r3, r3, #3
 8008ace:	b21b      	sxth	r3, r3
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ae6:	4413      	add	r3, r2
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	b21a      	sxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008af0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da05      	bge.n	8008b04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008af8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008afc:	425b      	negs	r3, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008b04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b0e:	109b      	asrs	r3, r3, #2
 8008b10:	b21b      	sxth	r3, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b28:	4413      	add	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	b21a      	sxth	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008b38:	10db      	asrs	r3, r3, #3
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	b21a      	sxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008b58:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <tcp_receive+0x5e4>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 84e2 	beq.w	8009526 <tcp_receive+0xeda>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7d1b      	ldrb	r3, [r3, #20]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	f200 84dd 	bhi.w	8009526 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b70:	4b30      	ldr	r3, [pc, #192]	; (8008c34 <tcp_receive+0x5e8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f2c0 808f 	blt.w	8008c9c <tcp_receive+0x650>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b82:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <tcp_receive+0x5e4>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <tcp_receive+0x5e8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	440b      	add	r3, r1
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	3301      	adds	r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f300 8082 	bgt.w	8008c9c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008b98:	4b27      	ldr	r3, [pc, #156]	; (8008c38 <tcp_receive+0x5ec>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <tcp_receive+0x5e8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008baa:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <tcp_receive+0x5ec>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <tcp_receive+0x574>
 8008bb2:	4b22      	ldr	r3, [pc, #136]	; (8008c3c <tcp_receive+0x5f0>)
 8008bb4:	f240 5294 	movw	r2, #1428	; 0x594
 8008bb8:	4921      	ldr	r1, [pc, #132]	; (8008c40 <tcp_receive+0x5f4>)
 8008bba:	4822      	ldr	r0, [pc, #136]	; (8008c44 <tcp_receive+0x5f8>)
 8008bbc:	f005 fac8 	bl	800e150 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d906      	bls.n	8008bd8 <tcp_receive+0x58c>
 8008bca:	4b1c      	ldr	r3, [pc, #112]	; (8008c3c <tcp_receive+0x5f0>)
 8008bcc:	f240 5295 	movw	r2, #1429	; 0x595
 8008bd0:	491d      	ldr	r1, [pc, #116]	; (8008c48 <tcp_receive+0x5fc>)
 8008bd2:	481c      	ldr	r0, [pc, #112]	; (8008c44 <tcp_receive+0x5f8>)
 8008bd4:	f005 fabc 	bl	800e150 <iprintf>
      off = (u16_t)off32;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <tcp_receive+0x5ec>)
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	891b      	ldrh	r3, [r3, #8]
 8008be4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d906      	bls.n	8008bfa <tcp_receive+0x5ae>
 8008bec:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <tcp_receive+0x5f0>)
 8008bee:	f240 5297 	movw	r2, #1431	; 0x597
 8008bf2:	4916      	ldr	r1, [pc, #88]	; (8008c4c <tcp_receive+0x600>)
 8008bf4:	4813      	ldr	r0, [pc, #76]	; (8008c44 <tcp_receive+0x5f8>)
 8008bf6:	f005 faab 	bl	800e150 <iprintf>
      inseg.len -= off;
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <tcp_receive+0x5ec>)
 8008bfc:	891a      	ldrh	r2, [r3, #8]
 8008bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <tcp_receive+0x5ec>)
 8008c08:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008c0a:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <tcp_receive+0x5ec>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	891a      	ldrh	r2, [r3, #8]
 8008c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008c18:	e02a      	b.n	8008c70 <tcp_receive+0x624>
 8008c1a:	bf00      	nop
 8008c1c:	08010b60 	.word	0x08010b60
 8008c20:	08010b68 	.word	0x08010b68
 8008c24:	200058a8 	.word	0x200058a8
 8008c28:	200058a4 	.word	0x200058a4
 8008c2c:	20005868 	.word	0x20005868
 8008c30:	200058aa 	.word	0x200058aa
 8008c34:	200058a0 	.word	0x200058a0
 8008c38:	20005880 	.word	0x20005880
 8008c3c:	080107f8 	.word	0x080107f8
 8008c40:	08010b70 	.word	0x08010b70
 8008c44:	08010844 	.word	0x08010844
 8008c48:	08010b80 	.word	0x08010b80
 8008c4c:	08010b90 	.word	0x08010b90
        off -= p->len;
 8008c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c52:	895b      	ldrh	r3, [r3, #10]
 8008c54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c66:	2200      	movs	r2, #0
 8008c68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c72:	895b      	ldrh	r3, [r3, #10]
 8008c74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d8e9      	bhi.n	8008c50 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008c7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c80:	4619      	mov	r1, r3
 8008c82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008c84:	f7fc fada 	bl	800523c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	4a91      	ldr	r2, [pc, #580]	; (8008ed4 <tcp_receive+0x888>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4b91      	ldr	r3, [pc, #580]	; (8008ed8 <tcp_receive+0x88c>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	4a8f      	ldr	r2, [pc, #572]	; (8008ed4 <tcp_receive+0x888>)
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008c9a:	e00d      	b.n	8008cb8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008c9c:	4b8d      	ldr	r3, [pc, #564]	; (8008ed4 <tcp_receive+0x888>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da06      	bge.n	8008cb8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8b5b      	ldrh	r3, [r3, #26]
 8008cae:	f043 0302 	orr.w	r3, r3, #2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008cb8:	4b86      	ldr	r3, [pc, #536]	; (8008ed4 <tcp_receive+0x888>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f2c0 842a 	blt.w	800951c <tcp_receive+0xed0>
 8008cc8:	4b82      	ldr	r3, [pc, #520]	; (8008ed4 <tcp_receive+0x888>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008cd4:	440b      	add	r3, r1
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	3301      	adds	r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f300 841e 	bgt.w	800951c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ce4:	4b7b      	ldr	r3, [pc, #492]	; (8008ed4 <tcp_receive+0x888>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	f040 829a 	bne.w	8009222 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008cee:	4b7a      	ldr	r3, [pc, #488]	; (8008ed8 <tcp_receive+0x88c>)
 8008cf0:	891c      	ldrh	r4, [r3, #8]
 8008cf2:	4b79      	ldr	r3, [pc, #484]	; (8008ed8 <tcp_receive+0x88c>)
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	899b      	ldrh	r3, [r3, #12]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fb f80c 	bl	8003d18 <lwip_htons>
 8008d00:	4603      	mov	r3, r0
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <tcp_receive+0x6c4>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <tcp_receive+0x6c6>
 8008d10:	2300      	movs	r3, #0
 8008d12:	4423      	add	r3, r4
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	4b71      	ldr	r3, [pc, #452]	; (8008edc <tcp_receive+0x890>)
 8008d18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008d1e:	4b6f      	ldr	r3, [pc, #444]	; (8008edc <tcp_receive+0x890>)
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d275      	bcs.n	8008e12 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d26:	4b6c      	ldr	r3, [pc, #432]	; (8008ed8 <tcp_receive+0x88c>)
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	899b      	ldrh	r3, [r3, #12]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fa fff2 	bl	8003d18 <lwip_htons>
 8008d34:	4603      	mov	r3, r0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01f      	beq.n	8008d80 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008d40:	4b65      	ldr	r3, [pc, #404]	; (8008ed8 <tcp_receive+0x88c>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	899b      	ldrh	r3, [r3, #12]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	b21b      	sxth	r3, r3
 8008d4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d4e:	b21c      	sxth	r4, r3
 8008d50:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <tcp_receive+0x88c>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	899b      	ldrh	r3, [r3, #12]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fa ffdd 	bl	8003d18 <lwip_htons>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fa ffd4 	bl	8003d18 <lwip_htons>
 8008d70:	4603      	mov	r3, r0
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	4323      	orrs	r3, r4
 8008d76:	b21a      	sxth	r2, r3
 8008d78:	4b57      	ldr	r3, [pc, #348]	; (8008ed8 <tcp_receive+0x88c>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	b292      	uxth	r2, r2
 8008d7e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008d84:	4b54      	ldr	r3, [pc, #336]	; (8008ed8 <tcp_receive+0x88c>)
 8008d86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008d88:	4b53      	ldr	r3, [pc, #332]	; (8008ed8 <tcp_receive+0x88c>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	899b      	ldrh	r3, [r3, #12]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fa ffc1 	bl	8003d18 <lwip_htons>
 8008d96:	4603      	mov	r3, r0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <tcp_receive+0x762>
            inseg.len -= 1;
 8008da2:	4b4d      	ldr	r3, [pc, #308]	; (8008ed8 <tcp_receive+0x88c>)
 8008da4:	891b      	ldrh	r3, [r3, #8]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	4b4b      	ldr	r3, [pc, #300]	; (8008ed8 <tcp_receive+0x88c>)
 8008dac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008dae:	4b4a      	ldr	r3, [pc, #296]	; (8008ed8 <tcp_receive+0x88c>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4a49      	ldr	r2, [pc, #292]	; (8008ed8 <tcp_receive+0x88c>)
 8008db4:	8912      	ldrh	r2, [r2, #8]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fc f93f 	bl	800503c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008dbe:	4b46      	ldr	r3, [pc, #280]	; (8008ed8 <tcp_receive+0x88c>)
 8008dc0:	891c      	ldrh	r4, [r3, #8]
 8008dc2:	4b45      	ldr	r3, [pc, #276]	; (8008ed8 <tcp_receive+0x88c>)
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	899b      	ldrh	r3, [r3, #12]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fa ffa4 	bl	8003d18 <lwip_htons>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <tcp_receive+0x794>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <tcp_receive+0x796>
 8008de0:	2300      	movs	r3, #0
 8008de2:	4423      	add	r3, r4
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	4b3d      	ldr	r3, [pc, #244]	; (8008edc <tcp_receive+0x890>)
 8008de8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008dea:	4b3c      	ldr	r3, [pc, #240]	; (8008edc <tcp_receive+0x890>)
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	4b38      	ldr	r3, [pc, #224]	; (8008ed4 <tcp_receive+0x888>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dfe:	440b      	add	r3, r1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d006      	beq.n	8008e12 <tcp_receive+0x7c6>
 8008e04:	4b36      	ldr	r3, [pc, #216]	; (8008ee0 <tcp_receive+0x894>)
 8008e06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008e0a:	4936      	ldr	r1, [pc, #216]	; (8008ee4 <tcp_receive+0x898>)
 8008e0c:	4836      	ldr	r0, [pc, #216]	; (8008ee8 <tcp_receive+0x89c>)
 8008e0e:	f005 f99f 	bl	800e150 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80e7 	beq.w	8008fea <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e1c:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <tcp_receive+0x88c>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	899b      	ldrh	r3, [r3, #12]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fa ff77 	bl	8003d18 <lwip_htons>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d010      	beq.n	8008e58 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008e36:	e00a      	b.n	8008e4e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7fd fd92 	bl	8006972 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <tcp_receive+0x7ec>
 8008e56:	e0c8      	b.n	8008fea <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008e5e:	e052      	b.n	8008f06 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	899b      	ldrh	r3, [r3, #12]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fa ff55 	bl	8003d18 <lwip_htons>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d03d      	beq.n	8008ef6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008e7a:	4b17      	ldr	r3, [pc, #92]	; (8008ed8 <tcp_receive+0x88c>)
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	899b      	ldrh	r3, [r3, #12]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fa ff48 	bl	8003d18 <lwip_htons>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d130      	bne.n	8008ef6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008e94:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <tcp_receive+0x88c>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	899b      	ldrh	r3, [r3, #12]
 8008e9a:	b29c      	uxth	r4, r3
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f7fa ff3b 	bl	8003d18 <lwip_htons>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <tcp_receive+0x88c>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	4322      	orrs	r2, r4
 8008eac:	b292      	uxth	r2, r2
 8008eae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <tcp_receive+0x88c>)
 8008eb2:	891c      	ldrh	r4, [r3, #8]
 8008eb4:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <tcp_receive+0x88c>)
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	899b      	ldrh	r3, [r3, #12]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fa ff2b 	bl	8003d18 <lwip_htons>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <tcp_receive+0x8a0>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e00d      	b.n	8008eee <tcp_receive+0x8a2>
 8008ed2:	bf00      	nop
 8008ed4:	200058a0 	.word	0x200058a0
 8008ed8:	20005880 	.word	0x20005880
 8008edc:	200058aa 	.word	0x200058aa
 8008ee0:	080107f8 	.word	0x080107f8
 8008ee4:	08010ba0 	.word	0x08010ba0
 8008ee8:	08010844 	.word	0x08010844
 8008eec:	2300      	movs	r3, #0
 8008eee:	4423      	add	r3, r4
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	4b98      	ldr	r3, [pc, #608]	; (8009154 <tcp_receive+0xb08>)
 8008ef4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008f00:	6938      	ldr	r0, [r7, #16]
 8008f02:	f7fd fd36 	bl	8006972 <tcp_seg_free>
            while (next &&
 8008f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00e      	beq.n	8008f2a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008f0c:	4b91      	ldr	r3, [pc, #580]	; (8009154 <tcp_receive+0xb08>)
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b91      	ldr	r3, [pc, #580]	; (8009158 <tcp_receive+0xb0c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	441a      	add	r2, r3
 8008f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f20:	8909      	ldrh	r1, [r1, #8]
 8008f22:	440b      	add	r3, r1
 8008f24:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da9a      	bge.n	8008e60 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d059      	beq.n	8008fe4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008f30:	4b88      	ldr	r3, [pc, #544]	; (8009154 <tcp_receive+0xb08>)
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	4b88      	ldr	r3, [pc, #544]	; (8009158 <tcp_receive+0xb0c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	441a      	add	r2, r3
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd4d      	ble.n	8008fe4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	4b81      	ldr	r3, [pc, #516]	; (8009158 <tcp_receive+0xb0c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	4b80      	ldr	r3, [pc, #512]	; (800915c <tcp_receive+0xb10>)
 8008f5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f5e:	4b7f      	ldr	r3, [pc, #508]	; (800915c <tcp_receive+0xb10>)
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	899b      	ldrh	r3, [r3, #12]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fa fed6 	bl	8003d18 <lwip_htons>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d005      	beq.n	8008f84 <tcp_receive+0x938>
                inseg.len -= 1;
 8008f78:	4b78      	ldr	r3, [pc, #480]	; (800915c <tcp_receive+0xb10>)
 8008f7a:	891b      	ldrh	r3, [r3, #8]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	4b76      	ldr	r3, [pc, #472]	; (800915c <tcp_receive+0xb10>)
 8008f82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008f84:	4b75      	ldr	r3, [pc, #468]	; (800915c <tcp_receive+0xb10>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4a74      	ldr	r2, [pc, #464]	; (800915c <tcp_receive+0xb10>)
 8008f8a:	8912      	ldrh	r2, [r2, #8]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fc f854 	bl	800503c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008f94:	4b71      	ldr	r3, [pc, #452]	; (800915c <tcp_receive+0xb10>)
 8008f96:	891c      	ldrh	r4, [r3, #8]
 8008f98:	4b70      	ldr	r3, [pc, #448]	; (800915c <tcp_receive+0xb10>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fa feb9 	bl	8003d18 <lwip_htons>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <tcp_receive+0x96a>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <tcp_receive+0x96c>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4423      	add	r3, r4
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	4b65      	ldr	r3, [pc, #404]	; (8009154 <tcp_receive+0xb08>)
 8008fbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008fc0:	4b64      	ldr	r3, [pc, #400]	; (8009154 <tcp_receive+0xb08>)
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b64      	ldr	r3, [pc, #400]	; (8009158 <tcp_receive+0xb0c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	441a      	add	r2, r3
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d006      	beq.n	8008fe4 <tcp_receive+0x998>
 8008fd6:	4b62      	ldr	r3, [pc, #392]	; (8009160 <tcp_receive+0xb14>)
 8008fd8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008fdc:	4961      	ldr	r1, [pc, #388]	; (8009164 <tcp_receive+0xb18>)
 8008fde:	4862      	ldr	r0, [pc, #392]	; (8009168 <tcp_receive+0xb1c>)
 8008fe0:	f005 f8b6 	bl	800e150 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fe8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008fea:	4b5a      	ldr	r3, [pc, #360]	; (8009154 <tcp_receive+0xb08>)
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b59      	ldr	r3, [pc, #356]	; (8009158 <tcp_receive+0xb0c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ffe:	4b55      	ldr	r3, [pc, #340]	; (8009154 <tcp_receive+0xb08>)
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d206      	bcs.n	8009014 <tcp_receive+0x9c8>
 8009006:	4b56      	ldr	r3, [pc, #344]	; (8009160 <tcp_receive+0xb14>)
 8009008:	f240 6207 	movw	r2, #1543	; 0x607
 800900c:	4957      	ldr	r1, [pc, #348]	; (800916c <tcp_receive+0xb20>)
 800900e:	4856      	ldr	r0, [pc, #344]	; (8009168 <tcp_receive+0xb1c>)
 8009010:	f005 f89e 	bl	800e150 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009018:	4b4e      	ldr	r3, [pc, #312]	; (8009154 <tcp_receive+0xb08>)
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fc ffc5 	bl	8005fb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800902a:	4b4c      	ldr	r3, [pc, #304]	; (800915c <tcp_receive+0xb10>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	891b      	ldrh	r3, [r3, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009034:	4b49      	ldr	r3, [pc, #292]	; (800915c <tcp_receive+0xb10>)
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	4a4d      	ldr	r2, [pc, #308]	; (8009170 <tcp_receive+0xb24>)
 800903a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800903c:	4b47      	ldr	r3, [pc, #284]	; (800915c <tcp_receive+0xb10>)
 800903e:	2200      	movs	r2, #0
 8009040:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009042:	4b46      	ldr	r3, [pc, #280]	; (800915c <tcp_receive+0xb10>)
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	899b      	ldrh	r3, [r3, #12]
 8009048:	b29b      	uxth	r3, r3
 800904a:	4618      	mov	r0, r3
 800904c:	f7fa fe64 	bl	8003d18 <lwip_htons>
 8009050:	4603      	mov	r3, r0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80b8 	beq.w	80091ce <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800905e:	4b45      	ldr	r3, [pc, #276]	; (8009174 <tcp_receive+0xb28>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f043 0320 	orr.w	r3, r3, #32
 8009066:	b2da      	uxtb	r2, r3
 8009068:	4b42      	ldr	r3, [pc, #264]	; (8009174 <tcp_receive+0xb28>)
 800906a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800906c:	e0af      	b.n	80091ce <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009072:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4a36      	ldr	r2, [pc, #216]	; (8009158 <tcp_receive+0xb0c>)
 800907e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	891b      	ldrh	r3, [r3, #8]
 8009084:	461c      	mov	r4, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	899b      	ldrh	r3, [r3, #12]
 800908c:	b29b      	uxth	r3, r3
 800908e:	4618      	mov	r0, r3
 8009090:	f7fa fe42 	bl	8003d18 <lwip_htons>
 8009094:	4603      	mov	r3, r0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <tcp_receive+0xa58>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <tcp_receive+0xa5a>
 80090a4:	2300      	movs	r3, #0
 80090a6:	191a      	adds	r2, r3, r4
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	441a      	add	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	461c      	mov	r4, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	891b      	ldrh	r3, [r3, #8]
 80090bc:	461d      	mov	r5, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	899b      	ldrh	r3, [r3, #12]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fa fe26 	bl	8003d18 <lwip_htons>
 80090cc:	4603      	mov	r3, r0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <tcp_receive+0xa90>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <tcp_receive+0xa92>
 80090dc:	2300      	movs	r3, #0
 80090de:	442b      	add	r3, r5
 80090e0:	429c      	cmp	r4, r3
 80090e2:	d206      	bcs.n	80090f2 <tcp_receive+0xaa6>
 80090e4:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <tcp_receive+0xb14>)
 80090e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80090ea:	4923      	ldr	r1, [pc, #140]	; (8009178 <tcp_receive+0xb2c>)
 80090ec:	481e      	ldr	r0, [pc, #120]	; (8009168 <tcp_receive+0xb1c>)
 80090ee:	f005 f82f 	bl	800e150 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	891b      	ldrh	r3, [r3, #8]
 80090f6:	461c      	mov	r4, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	899b      	ldrh	r3, [r3, #12]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa fe09 	bl	8003d18 <lwip_htons>
 8009106:	4603      	mov	r3, r0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <tcp_receive+0xaca>
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <tcp_receive+0xacc>
 8009116:	2300      	movs	r3, #0
 8009118:	1919      	adds	r1, r3, r4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800911e:	b28b      	uxth	r3, r1
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7fc ff43 	bl	8005fb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	891b      	ldrh	r3, [r3, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d028      	beq.n	800918a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009138:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <tcp_receive+0xb24>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01d      	beq.n	800917c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <tcp_receive+0xb24>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7fc f9be 	bl	80054cc <pbuf_cat>
 8009150:	e018      	b.n	8009184 <tcp_receive+0xb38>
 8009152:	bf00      	nop
 8009154:	200058aa 	.word	0x200058aa
 8009158:	200058a0 	.word	0x200058a0
 800915c:	20005880 	.word	0x20005880
 8009160:	080107f8 	.word	0x080107f8
 8009164:	08010bd8 	.word	0x08010bd8
 8009168:	08010844 	.word	0x08010844
 800916c:	08010c14 	.word	0x08010c14
 8009170:	200058b0 	.word	0x200058b0
 8009174:	200058ad 	.word	0x200058ad
 8009178:	08010c34 	.word	0x08010c34
            } else {
              recv_data = cseg->p;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	4a70      	ldr	r2, [pc, #448]	; (8009344 <tcp_receive+0xcf8>)
 8009182:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	899b      	ldrh	r3, [r3, #12]
 8009190:	b29b      	uxth	r3, r3
 8009192:	4618      	mov	r0, r3
 8009194:	f7fa fdc0 	bl	8003d18 <lwip_htons>
 8009198:	4603      	mov	r3, r0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80091a4:	4b68      	ldr	r3, [pc, #416]	; (8009348 <tcp_receive+0xcfc>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f043 0320 	orr.w	r3, r3, #32
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b66      	ldr	r3, [pc, #408]	; (8009348 <tcp_receive+0xcfc>)
 80091b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7d1b      	ldrb	r3, [r3, #20]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d102      	bne.n	80091c0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2207      	movs	r2, #7
 80091be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80091c8:	68b8      	ldr	r0, [r7, #8]
 80091ca:	f7fd fbd2 	bl	8006972 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f43f af43 	beq.w	800906e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	8b5b      	ldrh	r3, [r3, #26]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <tcp_receive+0xbc6>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	8b5b      	ldrh	r3, [r3, #26]
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	835a      	strh	r2, [r3, #26]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8b5b      	ldrh	r3, [r3, #26]
 8009206:	f043 0302 	orr.w	r3, r3, #2
 800920a:	b29a      	uxth	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009210:	e188      	b.n	8009524 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009220:	e180      	b.n	8009524 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800922a:	4848      	ldr	r0, [pc, #288]	; (800934c <tcp_receive+0xd00>)
 800922c:	f7fd fbba 	bl	80069a4 <tcp_seg_copy>
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	675a      	str	r2, [r3, #116]	; 0x74
 8009236:	e16d      	b.n	8009514 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009238:	2300      	movs	r3, #0
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009240:	63bb      	str	r3, [r7, #56]	; 0x38
 8009242:	e157      	b.n	80094f4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	4b41      	ldr	r3, [pc, #260]	; (8009350 <tcp_receive+0xd04>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d11d      	bne.n	800928e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009252:	4b3e      	ldr	r3, [pc, #248]	; (800934c <tcp_receive+0xd00>)
 8009254:	891a      	ldrh	r2, [r3, #8]
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	891b      	ldrh	r3, [r3, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	f240 814f 	bls.w	80094fe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009260:	483a      	ldr	r0, [pc, #232]	; (800934c <tcp_receive+0xd00>)
 8009262:	f7fd fb9f 	bl	80069a4 <tcp_seg_copy>
 8009266:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8149 	beq.w	8009502 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <tcp_receive+0xc32>
                    prev->next = cseg;
 8009276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e002      	b.n	8009284 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009286:	6978      	ldr	r0, [r7, #20]
 8009288:	f7ff f8dc 	bl	8008444 <tcp_oos_insert_segment>
                }
                break;
 800928c:	e139      	b.n	8009502 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	2b00      	cmp	r3, #0
 8009292:	d117      	bne.n	80092c4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009294:	4b2e      	ldr	r3, [pc, #184]	; (8009350 <tcp_receive+0xd04>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da57      	bge.n	8009354 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80092a4:	4829      	ldr	r0, [pc, #164]	; (800934c <tcp_receive+0xd00>)
 80092a6:	f7fd fb7d 	bl	80069a4 <tcp_seg_copy>
 80092aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 8129 	beq.w	8009506 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80092ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092bc:	69b8      	ldr	r0, [r7, #24]
 80092be:	f7ff f8c1 	bl	8008444 <tcp_oos_insert_segment>
                  }
                  break;
 80092c2:	e120      	b.n	8009506 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80092c4:	4b22      	ldr	r3, [pc, #136]	; (8009350 <tcp_receive+0xd04>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db3e      	blt.n	8009354 <tcp_receive+0xd08>
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <tcp_receive+0xd04>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	3301      	adds	r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dc35      	bgt.n	8009354 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80092e8:	4818      	ldr	r0, [pc, #96]	; (800934c <tcp_receive+0xd00>)
 80092ea:	f7fd fb5b 	bl	80069a4 <tcp_seg_copy>
 80092ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8109 	beq.w	800950a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009300:	8912      	ldrh	r2, [r2, #8]
 8009302:	441a      	add	r2, r3
 8009304:	4b12      	ldr	r3, [pc, #72]	; (8009350 <tcp_receive+0xd04>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	dd12      	ble.n	8009334 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <tcp_receive+0xd04>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	b29a      	uxth	r2, r3
 8009314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b29b      	uxth	r3, r3
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	b29a      	uxth	r2, r3
 8009320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009322:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932a:	891b      	ldrh	r3, [r3, #8]
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fb fe84 	bl	800503c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800933a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800933c:	69f8      	ldr	r0, [r7, #28]
 800933e:	f7ff f881 	bl	8008444 <tcp_oos_insert_segment>
                  }
                  break;
 8009342:	e0e2      	b.n	800950a <tcp_receive+0xebe>
 8009344:	200058b0 	.word	0x200058b0
 8009348:	200058ad 	.word	0x200058ad
 800934c:	20005880 	.word	0x20005880
 8009350:	200058a0 	.word	0x200058a0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 80c6 	bne.w	80094ee <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009362:	4b80      	ldr	r3, [pc, #512]	; (8009564 <tcp_receive+0xf18>)
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800936e:	2b00      	cmp	r3, #0
 8009370:	f340 80bd 	ble.w	80094ee <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	899b      	ldrh	r3, [r3, #12]
 800937a:	b29b      	uxth	r3, r3
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fccb 	bl	8003d18 <lwip_htons>
 8009382:	4603      	mov	r3, r0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	f040 80bf 	bne.w	800950e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009390:	4875      	ldr	r0, [pc, #468]	; (8009568 <tcp_receive+0xf1c>)
 8009392:	f7fd fb07 	bl	80069a4 <tcp_seg_copy>
 8009396:	4602      	mov	r2, r0
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80b6 	beq.w	8009512 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ae:	8912      	ldrh	r2, [r2, #8]
 80093b0:	441a      	add	r2, r3
 80093b2:	4b6c      	ldr	r3, [pc, #432]	; (8009564 <tcp_receive+0xf18>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dd12      	ble.n	80093e2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80093bc:	4b69      	ldr	r3, [pc, #420]	; (8009564 <tcp_receive+0xf18>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	891b      	ldrh	r3, [r3, #8]
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fb fe2d 	bl	800503c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80093e2:	4b62      	ldr	r3, [pc, #392]	; (800956c <tcp_receive+0xf20>)
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	4b5e      	ldr	r3, [pc, #376]	; (8009564 <tcp_receive+0xf18>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093f6:	440b      	add	r3, r1
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f340 8089 	ble.w	8009512 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	899b      	ldrh	r3, [r3, #12]
 8009408:	b29b      	uxth	r3, r3
 800940a:	4618      	mov	r0, r3
 800940c:	f7fa fc84 	bl	8003d18 <lwip_htons>
 8009410:	4603      	mov	r3, r0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d022      	beq.n	8009462 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	899b      	ldrh	r3, [r3, #12]
 8009424:	b29b      	uxth	r3, r3
 8009426:	b21b      	sxth	r3, r3
 8009428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800942c:	b21c      	sxth	r4, r3
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	899b      	ldrh	r3, [r3, #12]
 8009436:	b29b      	uxth	r3, r3
 8009438:	4618      	mov	r0, r3
 800943a:	f7fa fc6d 	bl	8003d18 <lwip_htons>
 800943e:	4603      	mov	r3, r0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	b29b      	uxth	r3, r3
 8009444:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009448:	b29b      	uxth	r3, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f7fa fc64 	bl	8003d18 <lwip_htons>
 8009450:	4603      	mov	r3, r0
 8009452:	b21b      	sxth	r3, r3
 8009454:	4323      	orrs	r3, r4
 8009456:	b21a      	sxth	r2, r3
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	b292      	uxth	r2, r2
 8009460:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	b29a      	uxth	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	4413      	add	r3, r2
 800946e:	b299      	uxth	r1, r3
 8009470:	4b3c      	ldr	r3, [pc, #240]	; (8009564 <tcp_receive+0xf18>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b29a      	uxth	r2, r3
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	1a8a      	subs	r2, r1, r2
 800947c:	b292      	uxth	r2, r2
 800947e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	891b      	ldrh	r3, [r3, #8]
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fb fdd4 	bl	800503c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	891c      	ldrh	r4, [r3, #8]
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	899b      	ldrh	r3, [r3, #12]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fa fc37 	bl	8003d18 <lwip_htons>
 80094aa:	4603      	mov	r3, r0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <tcp_receive+0xe6e>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <tcp_receive+0xe70>
 80094ba:	2300      	movs	r3, #0
 80094bc:	4423      	add	r3, r4
 80094be:	b29a      	uxth	r2, r3
 80094c0:	4b2a      	ldr	r3, [pc, #168]	; (800956c <tcp_receive+0xf20>)
 80094c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80094c4:	4b29      	ldr	r3, [pc, #164]	; (800956c <tcp_receive+0xf20>)
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b26      	ldr	r3, [pc, #152]	; (8009564 <tcp_receive+0xf18>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	441a      	add	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094d8:	440b      	add	r3, r1
 80094da:	429a      	cmp	r2, r3
 80094dc:	d019      	beq.n	8009512 <tcp_receive+0xec6>
 80094de:	4b24      	ldr	r3, [pc, #144]	; (8009570 <tcp_receive+0xf24>)
 80094e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80094e4:	4923      	ldr	r1, [pc, #140]	; (8009574 <tcp_receive+0xf28>)
 80094e6:	4824      	ldr	r0, [pc, #144]	; (8009578 <tcp_receive+0xf2c>)
 80094e8:	f004 fe32 	bl	800e150 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80094ec:	e011      	b.n	8009512 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f47f aea4 	bne.w	8009244 <tcp_receive+0xbf8>
 80094fc:	e00a      	b.n	8009514 <tcp_receive+0xec8>
                break;
 80094fe:	bf00      	nop
 8009500:	e008      	b.n	8009514 <tcp_receive+0xec8>
                break;
 8009502:	bf00      	nop
 8009504:	e006      	b.n	8009514 <tcp_receive+0xec8>
                  break;
 8009506:	bf00      	nop
 8009508:	e004      	b.n	8009514 <tcp_receive+0xec8>
                  break;
 800950a:	bf00      	nop
 800950c:	e002      	b.n	8009514 <tcp_receive+0xec8>
                  break;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <tcp_receive+0xec8>
                break;
 8009512:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 fa33 	bl	800a980 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800951a:	e003      	b.n	8009524 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fa2f 	bl	800a980 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009522:	e01a      	b.n	800955a <tcp_receive+0xf0e>
 8009524:	e019      	b.n	800955a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009526:	4b0f      	ldr	r3, [pc, #60]	; (8009564 <tcp_receive+0xf18>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	db0a      	blt.n	800954a <tcp_receive+0xefe>
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <tcp_receive+0xf18>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009540:	440b      	add	r3, r1
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	3301      	adds	r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd07      	ble.n	800955a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	8b5b      	ldrh	r3, [r3, #26]
 800954e:	f043 0302 	orr.w	r3, r3, #2
 8009552:	b29a      	uxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009558:	e7ff      	b.n	800955a <tcp_receive+0xf0e>
 800955a:	bf00      	nop
 800955c:	3750      	adds	r7, #80	; 0x50
 800955e:	46bd      	mov	sp, r7
 8009560:	bdb0      	pop	{r4, r5, r7, pc}
 8009562:	bf00      	nop
 8009564:	200058a0 	.word	0x200058a0
 8009568:	20005880 	.word	0x20005880
 800956c:	200058aa 	.word	0x200058aa
 8009570:	080107f8 	.word	0x080107f8
 8009574:	08010ba0 	.word	0x08010ba0
 8009578:	08010844 	.word	0x08010844

0800957c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <tcp_get_next_optbyte+0x5c>)
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	b291      	uxth	r1, r2
 800958a:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <tcp_get_next_optbyte+0x5c>)
 800958c:	8011      	strh	r1, [r2, #0]
 800958e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009590:	4b12      	ldr	r3, [pc, #72]	; (80095dc <tcp_get_next_optbyte+0x60>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <tcp_get_next_optbyte+0x26>
 8009598:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <tcp_get_next_optbyte+0x64>)
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	88fa      	ldrh	r2, [r7, #6]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d208      	bcs.n	80095b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80095a2:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <tcp_get_next_optbyte+0x68>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3314      	adds	r3, #20
 80095a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80095aa:	88fb      	ldrh	r3, [r7, #6]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	4413      	add	r3, r2
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	e00b      	b.n	80095cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <tcp_get_next_optbyte+0x64>)
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <tcp_get_next_optbyte+0x60>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	797b      	ldrb	r3, [r7, #5]
 80095c8:	4413      	add	r3, r2
 80095ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	2000589c 	.word	0x2000589c
 80095dc:	20005898 	.word	0x20005898
 80095e0:	20005896 	.word	0x20005896
 80095e4:	20005890 	.word	0x20005890

080095e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <tcp_parseopt+0x1c>
 80095f6:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <tcp_parseopt+0xd8>)
 80095f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80095fc:	4931      	ldr	r1, [pc, #196]	; (80096c4 <tcp_parseopt+0xdc>)
 80095fe:	4832      	ldr	r0, [pc, #200]	; (80096c8 <tcp_parseopt+0xe0>)
 8009600:	f004 fda6 	bl	800e150 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009604:	4b31      	ldr	r3, [pc, #196]	; (80096cc <tcp_parseopt+0xe4>)
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d055      	beq.n	80096b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800960c:	4b30      	ldr	r3, [pc, #192]	; (80096d0 <tcp_parseopt+0xe8>)
 800960e:	2200      	movs	r2, #0
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	e045      	b.n	80096a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009614:	f7ff ffb2 	bl	800957c <tcp_get_next_optbyte>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d006      	beq.n	8009630 <tcp_parseopt+0x48>
 8009622:	2b02      	cmp	r3, #2
 8009624:	dc2b      	bgt.n	800967e <tcp_parseopt+0x96>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d041      	beq.n	80096ae <tcp_parseopt+0xc6>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d127      	bne.n	800967e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800962e:	e037      	b.n	80096a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009630:	f7ff ffa4 	bl	800957c <tcp_get_next_optbyte>
 8009634:	4603      	mov	r3, r0
 8009636:	2b04      	cmp	r3, #4
 8009638:	d13b      	bne.n	80096b2 <tcp_parseopt+0xca>
 800963a:	4b25      	ldr	r3, [pc, #148]	; (80096d0 <tcp_parseopt+0xe8>)
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	4a22      	ldr	r2, [pc, #136]	; (80096cc <tcp_parseopt+0xe4>)
 8009642:	8812      	ldrh	r2, [r2, #0]
 8009644:	4293      	cmp	r3, r2
 8009646:	da34      	bge.n	80096b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009648:	f7ff ff98 	bl	800957c <tcp_get_next_optbyte>
 800964c:	4603      	mov	r3, r0
 800964e:	b29b      	uxth	r3, r3
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009654:	f7ff ff92 	bl	800957c <tcp_get_next_optbyte>
 8009658:	4603      	mov	r3, r0
 800965a:	b29a      	uxth	r2, r3
 800965c:	89bb      	ldrh	r3, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009662:	89bb      	ldrh	r3, [r7, #12]
 8009664:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009668:	d804      	bhi.n	8009674 <tcp_parseopt+0x8c>
 800966a:	89bb      	ldrh	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <tcp_parseopt+0x8c>
 8009670:	89ba      	ldrh	r2, [r7, #12]
 8009672:	e001      	b.n	8009678 <tcp_parseopt+0x90>
 8009674:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800967c:	e010      	b.n	80096a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800967e:	f7ff ff7d 	bl	800957c <tcp_get_next_optbyte>
 8009682:	4603      	mov	r3, r0
 8009684:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d914      	bls.n	80096b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	b29a      	uxth	r2, r3
 8009690:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <tcp_parseopt+0xe8>)
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b02      	subs	r3, #2
 800969a:	b29a      	uxth	r2, r3
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <tcp_parseopt+0xe8>)
 800969e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <tcp_parseopt+0xe8>)
 80096a2:	881a      	ldrh	r2, [r3, #0]
 80096a4:	4b09      	ldr	r3, [pc, #36]	; (80096cc <tcp_parseopt+0xe4>)
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d3b3      	bcc.n	8009614 <tcp_parseopt+0x2c>
 80096ac:	e004      	b.n	80096b8 <tcp_parseopt+0xd0>
          return;
 80096ae:	bf00      	nop
 80096b0:	e002      	b.n	80096b8 <tcp_parseopt+0xd0>
            return;
 80096b2:	bf00      	nop
 80096b4:	e000      	b.n	80096b8 <tcp_parseopt+0xd0>
            return;
 80096b6:	bf00      	nop
      }
    }
  }
}
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	080107f8 	.word	0x080107f8
 80096c4:	08010c5c 	.word	0x08010c5c
 80096c8:	08010844 	.word	0x08010844
 80096cc:	20005894 	.word	0x20005894
 80096d0:	2000589c 	.word	0x2000589c

080096d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <tcp_trigger_input_pcb_close+0x1c>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f043 0310 	orr.w	r3, r3, #16
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <tcp_trigger_input_pcb_close+0x1c>)
 80096e4:	701a      	strb	r2, [r3, #0]
}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	200058ad 	.word	0x200058ad

080096f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <tcp_route+0x28>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7a1b      	ldrb	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d006      	beq.n	800971c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	7a1b      	ldrb	r3, [r3, #8]
 8009712:	4618      	mov	r0, r3
 8009714:	f7fb fab8 	bl	8004c88 <netif_get_by_index>
 8009718:	4603      	mov	r3, r0
 800971a:	e003      	b.n	8009724 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f003 fa37 	bl	800cb90 <ip4_route>
 8009722:	4603      	mov	r3, r0
  }
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4613      	mov	r3, r2
 800973a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <tcp_create_segment+0x22>
 8009742:	4b44      	ldr	r3, [pc, #272]	; (8009854 <tcp_create_segment+0x128>)
 8009744:	22a3      	movs	r2, #163	; 0xa3
 8009746:	4944      	ldr	r1, [pc, #272]	; (8009858 <tcp_create_segment+0x12c>)
 8009748:	4844      	ldr	r0, [pc, #272]	; (800985c <tcp_create_segment+0x130>)
 800974a:	f004 fd01 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <tcp_create_segment+0x34>
 8009754:	4b3f      	ldr	r3, [pc, #252]	; (8009854 <tcp_create_segment+0x128>)
 8009756:	22a4      	movs	r2, #164	; 0xa4
 8009758:	4941      	ldr	r1, [pc, #260]	; (8009860 <tcp_create_segment+0x134>)
 800975a:	4840      	ldr	r0, [pc, #256]	; (800985c <tcp_create_segment+0x130>)
 800975c:	f004 fcf8 	bl	800e150 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009760:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800976e:	2003      	movs	r0, #3
 8009770:	f7fa ff28 	bl	80045c4 <memp_malloc>
 8009774:	6138      	str	r0, [r7, #16]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800977c:	68b8      	ldr	r0, [r7, #8]
 800977e:	f7fb fde3 	bl	8005348 <pbuf_free>
    return NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	e061      	b.n	800984a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800978c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	891a      	ldrh	r2, [r3, #8]
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d205      	bcs.n	80097b2 <tcp_create_segment+0x86>
 80097a6:	4b2b      	ldr	r3, [pc, #172]	; (8009854 <tcp_create_segment+0x128>)
 80097a8:	22b0      	movs	r2, #176	; 0xb0
 80097aa:	492e      	ldr	r1, [pc, #184]	; (8009864 <tcp_create_segment+0x138>)
 80097ac:	482b      	ldr	r0, [pc, #172]	; (800985c <tcp_create_segment+0x130>)
 80097ae:	f004 fccf 	bl	800e150 <iprintf>
  seg->len = p->tot_len - optlen;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	891a      	ldrh	r2, [r3, #8]
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	b29a      	uxth	r2, r3
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80097c2:	2114      	movs	r1, #20
 80097c4:	68b8      	ldr	r0, [r7, #8]
 80097c6:	f7fb fd29 	bl	800521c <pbuf_add_header>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d004      	beq.n	80097da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80097d0:	6938      	ldr	r0, [r7, #16]
 80097d2:	f7fd f8ce 	bl	8006972 <tcp_seg_free>
    return NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e037      	b.n	800984a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8ada      	ldrh	r2, [r3, #22]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	68dc      	ldr	r4, [r3, #12]
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7fa fa93 	bl	8003d18 <lwip_htons>
 80097f2:	4603      	mov	r3, r0
 80097f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8b1a      	ldrh	r2, [r3, #24]
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	68dc      	ldr	r4, [r3, #12]
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fa fa8a 	bl	8003d18 <lwip_htons>
 8009804:	4603      	mov	r3, r0
 8009806:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	68dc      	ldr	r4, [r3, #12]
 800980c:	6838      	ldr	r0, [r7, #0]
 800980e:	f7fa fa98 	bl	8003d42 <lwip_htonl>
 8009812:	4603      	mov	r3, r0
 8009814:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	089b      	lsrs	r3, r3, #2
 800981a:	b2db      	uxtb	r3, r3
 800981c:	b29b      	uxth	r3, r3
 800981e:	3305      	adds	r3, #5
 8009820:	b29b      	uxth	r3, r3
 8009822:	031b      	lsls	r3, r3, #12
 8009824:	b29a      	uxth	r2, r3
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	b29b      	uxth	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	b29a      	uxth	r2, r3
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	68dc      	ldr	r4, [r3, #12]
 8009832:	4610      	mov	r0, r2
 8009834:	f7fa fa70 	bl	8003d18 <lwip_htons>
 8009838:	4603      	mov	r3, r0
 800983a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	749a      	strb	r2, [r3, #18]
 8009844:	2200      	movs	r2, #0
 8009846:	74da      	strb	r2, [r3, #19]
  return seg;
 8009848:	693b      	ldr	r3, [r7, #16]
}
 800984a:	4618      	mov	r0, r3
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd90      	pop	{r4, r7, pc}
 8009852:	bf00      	nop
 8009854:	08010c78 	.word	0x08010c78
 8009858:	08010cac 	.word	0x08010cac
 800985c:	08010ccc 	.word	0x08010ccc
 8009860:	08010cf4 	.word	0x08010cf4
 8009864:	08010d18 	.word	0x08010d18

08009868 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b08b      	sub	sp, #44	; 0x2c
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <tcp_split_unsent_seg+0x2c>
 8009886:	4b95      	ldr	r3, [pc, #596]	; (8009adc <tcp_split_unsent_seg+0x274>)
 8009888:	f240 324b 	movw	r2, #843	; 0x34b
 800988c:	4994      	ldr	r1, [pc, #592]	; (8009ae0 <tcp_split_unsent_seg+0x278>)
 800988e:	4895      	ldr	r0, [pc, #596]	; (8009ae4 <tcp_split_unsent_seg+0x27c>)
 8009890:	f004 fc5e 	bl	800e150 <iprintf>

  useg = pcb->unsent;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	e116      	b.n	8009ad4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80098a6:	887b      	ldrh	r3, [r7, #2]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80098ac:	4b8b      	ldr	r3, [pc, #556]	; (8009adc <tcp_split_unsent_seg+0x274>)
 80098ae:	f240 3253 	movw	r2, #851	; 0x353
 80098b2:	498d      	ldr	r1, [pc, #564]	; (8009ae8 <tcp_split_unsent_seg+0x280>)
 80098b4:	488b      	ldr	r0, [pc, #556]	; (8009ae4 <tcp_split_unsent_seg+0x27c>)
 80098b6:	f004 fc4b 	bl	800e150 <iprintf>
    return ERR_VAL;
 80098ba:	f06f 0305 	mvn.w	r3, #5
 80098be:	e109      	b.n	8009ad4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	891b      	ldrh	r3, [r3, #8]
 80098c4:	887a      	ldrh	r2, [r7, #2]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d301      	bcc.n	80098ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e102      	b.n	8009ad4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098d2:	887a      	ldrh	r2, [r7, #2]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d906      	bls.n	80098e6 <tcp_split_unsent_seg+0x7e>
 80098d8:	4b80      	ldr	r3, [pc, #512]	; (8009adc <tcp_split_unsent_seg+0x274>)
 80098da:	f240 325b 	movw	r2, #859	; 0x35b
 80098de:	4983      	ldr	r1, [pc, #524]	; (8009aec <tcp_split_unsent_seg+0x284>)
 80098e0:	4880      	ldr	r0, [pc, #512]	; (8009ae4 <tcp_split_unsent_seg+0x27c>)
 80098e2:	f004 fc35 	bl	800e150 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <tcp_split_unsent_seg+0x94>
 80098ee:	4b7b      	ldr	r3, [pc, #492]	; (8009adc <tcp_split_unsent_seg+0x274>)
 80098f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80098f4:	497e      	ldr	r1, [pc, #504]	; (8009af0 <tcp_split_unsent_seg+0x288>)
 80098f6:	487b      	ldr	r0, [pc, #492]	; (8009ae4 <tcp_split_unsent_seg+0x27c>)
 80098f8:	f004 fc2a 	bl	800e150 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	7a9b      	ldrb	r3, [r3, #10]
 8009900:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	891a      	ldrh	r2, [r3, #8]
 8009912:	887b      	ldrh	r3, [r7, #2]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	b29a      	uxth	r2, r3
 800991c:	89bb      	ldrh	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	b29b      	uxth	r3, r3
 8009922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009926:	4619      	mov	r1, r3
 8009928:	2036      	movs	r0, #54	; 0x36
 800992a:	f7fb fa29 	bl	8004d80 <pbuf_alloc>
 800992e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80b7 	beq.w	8009aa6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	891a      	ldrh	r2, [r3, #8]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	891b      	ldrh	r3, [r3, #8]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	b29a      	uxth	r2, r3
 8009946:	887b      	ldrh	r3, [r7, #2]
 8009948:	4413      	add	r3, r2
 800994a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	6858      	ldr	r0, [r3, #4]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	18d1      	adds	r1, r2, r3
 8009958:	897b      	ldrh	r3, [r7, #10]
 800995a:	89ba      	ldrh	r2, [r7, #12]
 800995c:	f7fb feee 	bl	800573c <pbuf_copy_partial>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	89bb      	ldrh	r3, [r7, #12]
 8009966:	4293      	cmp	r3, r2
 8009968:	f040 809f 	bne.w	8009aaa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	899b      	ldrh	r3, [r3, #12]
 8009972:	b29b      	uxth	r3, r3
 8009974:	4618      	mov	r0, r3
 8009976:	f7fa f9cf 	bl	8003d18 <lwip_htons>
 800997a:	4603      	mov	r3, r0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009982:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009984:	2300      	movs	r3, #0
 8009986:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009988:	7efb      	ldrb	r3, [r7, #27]
 800998a:	f003 0308 	and.w	r3, r3, #8
 800998e:	2b00      	cmp	r3, #0
 8009990:	d007      	beq.n	80099a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009992:	7efb      	ldrb	r3, [r7, #27]
 8009994:	f023 0308 	bic.w	r3, r3, #8
 8009998:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800999a:	7ebb      	ldrb	r3, [r7, #26]
 800999c:	f043 0308 	orr.w	r3, r3, #8
 80099a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80099a2:	7efb      	ldrb	r3, [r7, #27]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d007      	beq.n	80099bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80099ac:	7efb      	ldrb	r3, [r7, #27]
 80099ae:	f023 0301 	bic.w	r3, r3, #1
 80099b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80099b4:	7ebb      	ldrb	r3, [r7, #26]
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fa f9bd 	bl	8003d42 <lwip_htonl>
 80099c8:	4602      	mov	r2, r0
 80099ca:	887b      	ldrh	r3, [r7, #2]
 80099cc:	18d1      	adds	r1, r2, r3
 80099ce:	7eba      	ldrb	r2, [r7, #26]
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	460b      	mov	r3, r1
 80099d6:	6939      	ldr	r1, [r7, #16]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fea7 	bl	800972c <tcp_create_segment>
 80099de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d063      	beq.n	8009aae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fb fd34 	bl	8005458 <pbuf_clen>
 80099f0:	4603      	mov	r3, r0
 80099f2:	461a      	mov	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	6858      	ldr	r0, [r3, #4]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	891a      	ldrh	r2, [r3, #8]
 8009a0e:	89bb      	ldrh	r3, [r7, #12]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4619      	mov	r1, r3
 8009a16:	f7fb fb11 	bl	800503c <pbuf_realloc>
  useg->len -= remainder;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	891a      	ldrh	r2, [r3, #8]
 8009a1e:	89bb      	ldrh	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	899b      	ldrh	r3, [r3, #12]
 8009a2e:	b29c      	uxth	r4, r3
 8009a30:	7efb      	ldrb	r3, [r7, #27]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fa f96f 	bl	8003d18 <lwip_htons>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	4322      	orrs	r2, r4
 8009a44:	b292      	uxth	r2, r2
 8009a46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fb fd03 	bl	8005458 <pbuf_clen>
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a5c:	4413      	add	r3, r2
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fb fcf4 	bl	8005458 <pbuf_clen>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a7a:	4413      	add	r3, r2
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e016      	b.n	8009ad4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009aa6:	bf00      	nop
 8009aa8:	e002      	b.n	8009ab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009aaa:	bf00      	nop
 8009aac:	e000      	b.n	8009ab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009aae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d006      	beq.n	8009ac4 <tcp_split_unsent_seg+0x25c>
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <tcp_split_unsent_seg+0x274>)
 8009ab8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009abc:	490d      	ldr	r1, [pc, #52]	; (8009af4 <tcp_split_unsent_seg+0x28c>)
 8009abe:	4809      	ldr	r0, [pc, #36]	; (8009ae4 <tcp_split_unsent_seg+0x27c>)
 8009ac0:	f004 fb46 	bl	800e150 <iprintf>
  if (p != NULL) {
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009aca:	6938      	ldr	r0, [r7, #16]
 8009acc:	f7fb fc3c 	bl	8005348 <pbuf_free>
  }

  return ERR_MEM;
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3724      	adds	r7, #36	; 0x24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd90      	pop	{r4, r7, pc}
 8009adc:	08010c78 	.word	0x08010c78
 8009ae0:	0801100c 	.word	0x0801100c
 8009ae4:	08010ccc 	.word	0x08010ccc
 8009ae8:	08011030 	.word	0x08011030
 8009aec:	08011054 	.word	0x08011054
 8009af0:	08011064 	.word	0x08011064
 8009af4:	08011074 	.word	0x08011074

08009af8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <tcp_send_fin+0x1c>
 8009b06:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <tcp_send_fin+0x94>)
 8009b08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009b0c:	4920      	ldr	r1, [pc, #128]	; (8009b90 <tcp_send_fin+0x98>)
 8009b0e:	4821      	ldr	r0, [pc, #132]	; (8009b94 <tcp_send_fin+0x9c>)
 8009b10:	f004 fb1e 	bl	800e150 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02e      	beq.n	8009b7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e002      	b.n	8009b2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f8      	bne.n	8009b24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	899b      	ldrh	r3, [r3, #12]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fa f8ec 	bl	8003d18 <lwip_htons>
 8009b40:	4603      	mov	r3, r0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d116      	bne.n	8009b7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	b29c      	uxth	r4, r3
 8009b54:	2001      	movs	r0, #1
 8009b56:	f7fa f8df 	bl	8003d18 <lwip_htons>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	4322      	orrs	r2, r4
 8009b64:	b292      	uxth	r2, r2
 8009b66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	8b5b      	ldrh	r3, [r3, #26]
 8009b6c:	f043 0320 	orr.w	r3, r3, #32
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e004      	b.n	8009b84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f80b 	bl	8009b98 <tcp_enqueue_flags>
 8009b82:	4603      	mov	r3, r0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd90      	pop	{r4, r7, pc}
 8009b8c:	08010c78 	.word	0x08010c78
 8009b90:	08011080 	.word	0x08011080
 8009b94:	08010ccc 	.word	0x08010ccc

08009b98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <tcp_enqueue_flags+0x2c>
 8009bb6:	4b67      	ldr	r3, [pc, #412]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009bb8:	f240 4211 	movw	r2, #1041	; 0x411
 8009bbc:	4966      	ldr	r1, [pc, #408]	; (8009d58 <tcp_enqueue_flags+0x1c0>)
 8009bbe:	4867      	ldr	r0, [pc, #412]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009bc0:	f004 fac6 	bl	800e150 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <tcp_enqueue_flags+0x40>
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009bcc:	f240 4213 	movw	r2, #1043	; 0x413
 8009bd0:	4963      	ldr	r1, [pc, #396]	; (8009d60 <tcp_enqueue_flags+0x1c8>)
 8009bd2:	4862      	ldr	r0, [pc, #392]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009bd4:	f004 fabc 	bl	800e150 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009be6:	7ffb      	ldrb	r3, [r7, #31]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	2036      	movs	r0, #54	; 0x36
 8009bfe:	f7fb f8bf 	bl	8004d80 <pbuf_alloc>
 8009c02:	6138      	str	r0, [r7, #16]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	8b5b      	ldrh	r3, [r3, #26]
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	e095      	b.n	8009d4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	895a      	ldrh	r2, [r3, #10]
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d206      	bcs.n	8009c38 <tcp_enqueue_flags+0xa0>
 8009c2a:	4b4a      	ldr	r3, [pc, #296]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009c2c:	f240 4239 	movw	r2, #1081	; 0x439
 8009c30:	494c      	ldr	r1, [pc, #304]	; (8009d64 <tcp_enqueue_flags+0x1cc>)
 8009c32:	484a      	ldr	r0, [pc, #296]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009c34:	f004 fa8c 	bl	800e150 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	7ffb      	ldrb	r3, [r7, #31]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	460b      	mov	r3, r1
 8009c44:	6939      	ldr	r1, [r7, #16]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fd70 	bl	800972c <tcp_create_segment>
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8b5b      	ldrh	r3, [r3, #26]
 8009c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c62:	f04f 33ff 	mov.w	r3, #4294967295
 8009c66:	e070      	b.n	8009d4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f003 0303 	and.w	r3, r3, #3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <tcp_enqueue_flags+0xea>
 8009c74:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009c76:	f240 4242 	movw	r2, #1090	; 0x442
 8009c7a:	493b      	ldr	r1, [pc, #236]	; (8009d68 <tcp_enqueue_flags+0x1d0>)
 8009c7c:	4837      	ldr	r0, [pc, #220]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009c7e:	f004 fa67 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	891b      	ldrh	r3, [r3, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <tcp_enqueue_flags+0x100>
 8009c8a:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009c8c:	f240 4243 	movw	r2, #1091	; 0x443
 8009c90:	4936      	ldr	r1, [pc, #216]	; (8009d6c <tcp_enqueue_flags+0x1d4>)
 8009c92:	4832      	ldr	r0, [pc, #200]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009c94:	f004 fa5c 	bl	800e150 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ca6:	e00d      	b.n	8009cc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	e002      	b.n	8009cb6 <tcp_enqueue_flags+0x11e>
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f8      	bne.n	8009cb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <tcp_enqueue_flags+0x148>
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8b5b      	ldrh	r3, [r3, #26]
 8009cf8:	f043 0320 	orr.w	r3, r3, #32
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fb fba6 	bl	8005458 <pbuf_clen>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d16:	4413      	add	r3, r2
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00e      	beq.n	8009d48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <tcp_enqueue_flags+0x1b0>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <tcp_enqueue_flags+0x1b0>
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <tcp_enqueue_flags+0x1bc>)
 8009d3c:	f240 4265 	movw	r2, #1125	; 0x465
 8009d40:	490b      	ldr	r1, [pc, #44]	; (8009d70 <tcp_enqueue_flags+0x1d8>)
 8009d42:	4806      	ldr	r0, [pc, #24]	; (8009d5c <tcp_enqueue_flags+0x1c4>)
 8009d44:	f004 fa04 	bl	800e150 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	08010c78 	.word	0x08010c78
 8009d58:	0801109c 	.word	0x0801109c
 8009d5c:	08010ccc 	.word	0x08010ccc
 8009d60:	080110f4 	.word	0x080110f4
 8009d64:	08011114 	.word	0x08011114
 8009d68:	08011150 	.word	0x08011150
 8009d6c:	08011168 	.word	0x08011168
 8009d70:	08011194 	.word	0x08011194

08009d74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009d74:	b5b0      	push	{r4, r5, r7, lr}
 8009d76:	b08a      	sub	sp, #40	; 0x28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <tcp_output+0x1c>
 8009d82:	4b8a      	ldr	r3, [pc, #552]	; (8009fac <tcp_output+0x238>)
 8009d84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009d88:	4989      	ldr	r1, [pc, #548]	; (8009fb0 <tcp_output+0x23c>)
 8009d8a:	488a      	ldr	r0, [pc, #552]	; (8009fb4 <tcp_output+0x240>)
 8009d8c:	f004 f9e0 	bl	800e150 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7d1b      	ldrb	r3, [r3, #20]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d106      	bne.n	8009da6 <tcp_output+0x32>
 8009d98:	4b84      	ldr	r3, [pc, #528]	; (8009fac <tcp_output+0x238>)
 8009d9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009d9e:	4986      	ldr	r1, [pc, #536]	; (8009fb8 <tcp_output+0x244>)
 8009da0:	4884      	ldr	r0, [pc, #528]	; (8009fb4 <tcp_output+0x240>)
 8009da2:	f004 f9d5 	bl	800e150 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009da6:	4b85      	ldr	r3, [pc, #532]	; (8009fbc <tcp_output+0x248>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d101      	bne.n	8009db4 <tcp_output+0x40>
    return ERR_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e1ce      	b.n	800a152 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	bf28      	it	cs
 8009dc4:	4613      	movcs	r3, r2
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10b      	bne.n	8009dee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8b5b      	ldrh	r3, [r3, #26]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 81aa 	beq.w	800a138 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fdcb 	bl	800a980 <tcp_send_empty_ack>
 8009dea:	4603      	mov	r3, r0
 8009dec:	e1b1      	b.n	800a152 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	461a      	mov	r2, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff fc7c 	bl	80096f4 <tcp_route>
 8009dfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <tcp_output+0x96>
    return ERR_RTE;
 8009e04:	f06f 0303 	mvn.w	r3, #3
 8009e08:	e1a3      	b.n	800a152 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <tcp_output+0xa4>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d111      	bne.n	8009e3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <tcp_output+0xb0>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	3304      	adds	r3, #4
 8009e22:	e000      	b.n	8009e26 <tcp_output+0xb2>
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <tcp_output+0xc0>
      return ERR_RTE;
 8009e2e:	f06f 0303 	mvn.w	r3, #3
 8009e32:	e18e      	b.n	800a152 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f9 ff7d 	bl	8003d42 <lwip_htonl>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e52:	8912      	ldrh	r2, [r2, #8]
 8009e54:	4413      	add	r3, r2
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d227      	bcs.n	8009eac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e62:	461a      	mov	r2, r3
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d114      	bne.n	8009e94 <tcp_output+0x120>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d110      	bne.n	8009e94 <tcp_output+0x120>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8b5b      	ldrh	r3, [r3, #26]
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 814d 	beq.w	800a13c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fd6c 	bl	800a980 <tcp_send_empty_ack>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	e152      	b.n	800a152 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 811c 	beq.w	800a0fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009ec2:	e002      	b.n	8009eca <tcp_output+0x156>
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	623b      	str	r3, [r7, #32]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f8      	bne.n	8009ec4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009ed2:	e112      	b.n	800a0fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	899b      	ldrh	r3, [r3, #12]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f9 ff1b 	bl	8003d18 <lwip_htons>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <tcp_output+0x188>
 8009eee:	4b2f      	ldr	r3, [pc, #188]	; (8009fac <tcp_output+0x238>)
 8009ef0:	f240 5236 	movw	r2, #1334	; 0x536
 8009ef4:	4932      	ldr	r1, [pc, #200]	; (8009fc0 <tcp_output+0x24c>)
 8009ef6:	482f      	ldr	r0, [pc, #188]	; (8009fb4 <tcp_output+0x240>)
 8009ef8:	f004 f92a 	bl	800e150 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01f      	beq.n	8009f44 <tcp_output+0x1d0>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8b5b      	ldrh	r3, [r3, #26]
 8009f08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d119      	bne.n	8009f44 <tcp_output+0x1d0>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <tcp_output+0x1bc>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d110      	bne.n	8009f44 <tcp_output+0x1d0>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f26:	891a      	ldrh	r2, [r3, #8]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d209      	bcs.n	8009f44 <tcp_output+0x1d0>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <tcp_output+0x1d0>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d901      	bls.n	8009f48 <tcp_output+0x1d4>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <tcp_output+0x1d6>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	8b5b      	ldrh	r3, [r3, #26]
 8009f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80e4 	beq.w	800a124 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7d1b      	ldrb	r3, [r3, #20]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d00d      	beq.n	8009f80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	899b      	ldrh	r3, [r3, #12]
 8009f6a:	b29c      	uxth	r4, r3
 8009f6c:	2010      	movs	r0, #16
 8009f6e:	f7f9 fed3 	bl	8003d18 <lwip_htons>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461a      	mov	r2, r3
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	4322      	orrs	r2, r4
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f86:	f000 f909 	bl	800a19c <tcp_output_segment>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d016      	beq.n	8009fc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	8b5b      	ldrh	r3, [r3, #26]
 8009f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	835a      	strh	r2, [r3, #26]
      return err;
 8009fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa8:	e0d3      	b.n	800a152 <tcp_output+0x3de>
 8009faa:	bf00      	nop
 8009fac:	08010c78 	.word	0x08010c78
 8009fb0:	080111bc 	.word	0x080111bc
 8009fb4:	08010ccc 	.word	0x08010ccc
 8009fb8:	080111d4 	.word	0x080111d4
 8009fbc:	200058b4 	.word	0x200058b4
 8009fc0:	080111fc 	.word	0x080111fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7d1b      	ldrb	r3, [r3, #20]
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d006      	beq.n	8009fe2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	8b5b      	ldrh	r3, [r3, #26]
 8009fd8:	f023 0303 	bic.w	r3, r3, #3
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7f9 feaa 	bl	8003d42 <lwip_htonl>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	891b      	ldrh	r3, [r3, #8]
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	899b      	ldrh	r3, [r3, #12]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f9 fe8a 	bl	8003d18 <lwip_htons>
 800a004:	4603      	mov	r3, r0
 800a006:	b2db      	uxtb	r3, r3
 800a008:	f003 0303 	and.w	r3, r3, #3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <tcp_output+0x2a0>
 800a010:	2301      	movs	r3, #1
 800a012:	e000      	b.n	800a016 <tcp_output+0x2a2>
 800a014:	2300      	movs	r3, #0
 800a016:	442b      	add	r3, r5
 800a018:	4423      	add	r3, r4
 800a01a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	da02      	bge.n	800a02e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	891b      	ldrh	r3, [r3, #8]
 800a032:	461c      	mov	r4, r3
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	899b      	ldrh	r3, [r3, #12]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f9 fe6b 	bl	8003d18 <lwip_htons>
 800a042:	4603      	mov	r3, r0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <tcp_output+0x2de>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <tcp_output+0x2e0>
 800a052:	2300      	movs	r3, #0
 800a054:	4423      	add	r3, r4
 800a056:	2b00      	cmp	r3, #0
 800a058:	d049      	beq.n	800a0ee <tcp_output+0x37a>
      seg->next = NULL;
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	2b00      	cmp	r3, #0
 800a066:	d105      	bne.n	800a074 <tcp_output+0x300>
        pcb->unacked = seg;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	623b      	str	r3, [r7, #32]
 800a072:	e03f      	b.n	800a0f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f9 fe61 	bl	8003d42 <lwip_htonl>
 800a080:	4604      	mov	r4, r0
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f9 fe5a 	bl	8003d42 <lwip_htonl>
 800a08e:	4603      	mov	r3, r0
 800a090:	1ae3      	subs	r3, r4, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	da24      	bge.n	800a0e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3370      	adds	r3, #112	; 0x70
 800a09a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a09c:	e002      	b.n	800a0a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d011      	beq.n	800a0d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7f9 fe44 	bl	8003d42 <lwip_htonl>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f9 fe3d 	bl	8003d42 <lwip_htonl>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dbe6      	blt.n	800a09e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e009      	b.n	800a0f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	623b      	str	r3, [r7, #32]
 800a0ec:	e002      	b.n	800a0f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0f0:	f7fc fc3f 	bl	8006972 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d012      	beq.n	800a126 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4618      	mov	r0, r3
 800a108:	f7f9 fe1b 	bl	8003d42 <lwip_htonl>
 800a10c:	4602      	mov	r2, r0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a116:	8912      	ldrh	r2, [r2, #8]
 800a118:	4413      	add	r3, r2
  while (seg != NULL &&
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	f4bf aed9 	bcs.w	8009ed4 <tcp_output+0x160>
 800a122:	e000      	b.n	800a126 <tcp_output+0x3b2>
      break;
 800a124:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a136:	e004      	b.n	800a142 <tcp_output+0x3ce>
    goto output_done;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <tcp_output+0x3ce>
    goto output_done;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a140:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8b5b      	ldrh	r3, [r3, #26]
 800a146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3728      	adds	r7, #40	; 0x28
 800a156:	46bd      	mov	sp, r7
 800a158:	bdb0      	pop	{r4, r5, r7, pc}
 800a15a:	bf00      	nop

0800a15c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <tcp_output_segment_busy+0x1c>
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <tcp_output_segment_busy+0x34>)
 800a16c:	f240 529a 	movw	r2, #1434	; 0x59a
 800a170:	4908      	ldr	r1, [pc, #32]	; (800a194 <tcp_output_segment_busy+0x38>)
 800a172:	4809      	ldr	r0, [pc, #36]	; (800a198 <tcp_output_segment_busy+0x3c>)
 800a174:	f003 ffec 	bl	800e150 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	7b9b      	ldrb	r3, [r3, #14]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d001      	beq.n	800a186 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	08010c78 	.word	0x08010c78
 800a194:	08011214 	.word	0x08011214
 800a198:	08010ccc 	.word	0x08010ccc

0800a19c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a19c:	b5b0      	push	{r4, r5, r7, lr}
 800a19e:	b08c      	sub	sp, #48	; 0x30
 800a1a0:	af04      	add	r7, sp, #16
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <tcp_output_segment+0x20>
 800a1ae:	4b63      	ldr	r3, [pc, #396]	; (800a33c <tcp_output_segment+0x1a0>)
 800a1b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a1b4:	4962      	ldr	r1, [pc, #392]	; (800a340 <tcp_output_segment+0x1a4>)
 800a1b6:	4863      	ldr	r0, [pc, #396]	; (800a344 <tcp_output_segment+0x1a8>)
 800a1b8:	f003 ffca 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d106      	bne.n	800a1d0 <tcp_output_segment+0x34>
 800a1c2:	4b5e      	ldr	r3, [pc, #376]	; (800a33c <tcp_output_segment+0x1a0>)
 800a1c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a1c8:	495f      	ldr	r1, [pc, #380]	; (800a348 <tcp_output_segment+0x1ac>)
 800a1ca:	485e      	ldr	r0, [pc, #376]	; (800a344 <tcp_output_segment+0x1a8>)
 800a1cc:	f003 ffc0 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <tcp_output_segment+0x48>
 800a1d6:	4b59      	ldr	r3, [pc, #356]	; (800a33c <tcp_output_segment+0x1a0>)
 800a1d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a1dc:	495b      	ldr	r1, [pc, #364]	; (800a34c <tcp_output_segment+0x1b0>)
 800a1de:	4859      	ldr	r0, [pc, #356]	; (800a344 <tcp_output_segment+0x1a8>)
 800a1e0:	f003 ffb6 	bl	800e150 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff ffb9 	bl	800a15c <tcp_output_segment_busy>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e09f      	b.n	800a334 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68dc      	ldr	r4, [r3, #12]
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f7f9 fda0 	bl	8003d42 <lwip_htonl>
 800a202:	4603      	mov	r3, r0
 800a204:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	68dc      	ldr	r4, [r3, #12]
 800a20e:	4610      	mov	r0, r2
 800a210:	f7f9 fd82 	bl	8003d18 <lwip_htons>
 800a214:	4603      	mov	r3, r0
 800a216:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a220:	441a      	add	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	3314      	adds	r3, #20
 800a22c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	7a9b      	ldrb	r3, [r3, #10]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d015      	beq.n	800a266 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	3304      	adds	r3, #4
 800a23e:	461a      	mov	r2, r3
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a246:	f7fc fe8b 	bl	8006f60 <tcp_eff_send_mss_netif>
 800a24a:	4603      	mov	r3, r0
 800a24c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a24e:	8b7b      	ldrh	r3, [r7, #26]
 800a250:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a254:	4618      	mov	r0, r3
 800a256:	f7f9 fd74 	bl	8003d42 <lwip_htonl>
 800a25a:	4602      	mov	r2, r0
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	3304      	adds	r3, #4
 800a264:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da02      	bge.n	800a276 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2200      	movs	r2, #0
 800a274:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10c      	bne.n	800a298 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a27e:	4b34      	ldr	r3, [pc, #208]	; (800a350 <tcp_output_segment+0x1b4>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7f9 fd58 	bl	8003d42 <lwip_htonl>
 800a292:	4602      	mov	r2, r0
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	8959      	ldrh	r1, [r3, #10]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	8b3a      	ldrh	r2, [r7, #24]
 800a2b2:	1a8a      	subs	r2, r1, r2
 800a2b4:	b292      	uxth	r2, r2
 800a2b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	8919      	ldrh	r1, [r3, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	8b3a      	ldrh	r2, [r7, #24]
 800a2c4:	1a8a      	subs	r2, r1, r2
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	68d2      	ldr	r2, [r2, #12]
 800a2d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	741a      	strb	r2, [r3, #16]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f103 0214 	add.w	r2, r3, #20
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	7a9b      	ldrb	r3, [r3, #10]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	4413      	add	r3, r2
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d006      	beq.n	800a308 <tcp_output_segment+0x16c>
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <tcp_output_segment+0x1a0>)
 800a2fc:	f240 621c 	movw	r2, #1564	; 0x61c
 800a300:	4914      	ldr	r1, [pc, #80]	; (800a354 <tcp_output_segment+0x1b8>)
 800a302:	4810      	ldr	r0, [pc, #64]	; (800a344 <tcp_output_segment+0x1a8>)
 800a304:	f003 ff24 	bl	800e150 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6858      	ldr	r0, [r3, #4]
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	1d1c      	adds	r4, r3, #4
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	7add      	ldrb	r5, [r3, #11]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	7a9b      	ldrb	r3, [r3, #10]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	9202      	str	r2, [sp, #8]
 800a31e:	2206      	movs	r2, #6
 800a320:	9201      	str	r2, [sp, #4]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	462b      	mov	r3, r5
 800a326:	4622      	mov	r2, r4
 800a328:	f002 fdf0 	bl	800cf0c <ip4_output_if>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a330:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bdb0      	pop	{r4, r5, r7, pc}
 800a33c:	08010c78 	.word	0x08010c78
 800a340:	0801123c 	.word	0x0801123c
 800a344:	08010ccc 	.word	0x08010ccc
 800a348:	0801125c 	.word	0x0801125c
 800a34c:	0801127c 	.word	0x0801127c
 800a350:	20005868 	.word	0x20005868
 800a354:	080112a0 	.word	0x080112a0

0800a358 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a358:	b5b0      	push	{r4, r5, r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <tcp_rexmit_rto_prepare+0x1c>
 800a366:	4b31      	ldr	r3, [pc, #196]	; (800a42c <tcp_rexmit_rto_prepare+0xd4>)
 800a368:	f240 6263 	movw	r2, #1635	; 0x663
 800a36c:	4930      	ldr	r1, [pc, #192]	; (800a430 <tcp_rexmit_rto_prepare+0xd8>)
 800a36e:	4831      	ldr	r0, [pc, #196]	; (800a434 <tcp_rexmit_rto_prepare+0xdc>)
 800a370:	f003 feee 	bl	800e150 <iprintf>

  if (pcb->unacked == NULL) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a37c:	f06f 0305 	mvn.w	r3, #5
 800a380:	e050      	b.n	800a424 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	e00b      	b.n	800a3a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fee6 	bl	800a15c <tcp_output_segment_busy>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a396:	f06f 0305 	mvn.w	r3, #5
 800a39a:	e043      	b.n	800a424 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1ef      	bne.n	800a38a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff fed6 	bl	800a15c <tcp_output_segment_busy>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a3b6:	f06f 0305 	mvn.w	r3, #5
 800a3ba:	e033      	b.n	800a424 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	8b5b      	ldrh	r3, [r3, #26]
 800a3d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7f9 fcab 	bl	8003d42 <lwip_htonl>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	891b      	ldrh	r3, [r3, #8]
 800a3f2:	461d      	mov	r5, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	899b      	ldrh	r3, [r3, #12]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f9 fc8b 	bl	8003d18 <lwip_htons>
 800a402:	4603      	mov	r3, r0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <tcp_rexmit_rto_prepare+0xba>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <tcp_rexmit_rto_prepare+0xbc>
 800a412:	2300      	movs	r3, #0
 800a414:	442b      	add	r3, r5
 800a416:	18e2      	adds	r2, r4, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bdb0      	pop	{r4, r5, r7, pc}
 800a42c:	08010c78 	.word	0x08010c78
 800a430:	080112b4 	.word	0x080112b4
 800a434:	08010ccc 	.word	0x08010ccc

0800a438 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_rexmit_rto_commit+0x1c>
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <tcp_rexmit_rto_commit+0x44>)
 800a448:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a44c:	490c      	ldr	r1, [pc, #48]	; (800a480 <tcp_rexmit_rto_commit+0x48>)
 800a44e:	480d      	ldr	r0, [pc, #52]	; (800a484 <tcp_rexmit_rto_commit+0x4c>)
 800a450:	f003 fe7e 	bl	800e150 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a45a:	2bff      	cmp	r3, #255	; 0xff
 800a45c:	d007      	beq.n	800a46e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a464:	3301      	adds	r3, #1
 800a466:	b2da      	uxtb	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fc80 	bl	8009d74 <tcp_output>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	08010c78 	.word	0x08010c78
 800a480:	080112d8 	.word	0x080112d8
 800a484:	08010ccc 	.word	0x08010ccc

0800a488 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <tcp_rexmit_rto+0x1c>
 800a496:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <tcp_rexmit_rto+0x38>)
 800a498:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a49c:	4909      	ldr	r1, [pc, #36]	; (800a4c4 <tcp_rexmit_rto+0x3c>)
 800a49e:	480a      	ldr	r0, [pc, #40]	; (800a4c8 <tcp_rexmit_rto+0x40>)
 800a4a0:	f003 fe56 	bl	800e150 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff ff57 	bl	800a358 <tcp_rexmit_rto_prepare>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff ffc1 	bl	800a438 <tcp_rexmit_rto_commit>
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	08010c78 	.word	0x08010c78
 800a4c4:	080112fc 	.word	0x080112fc
 800a4c8:	08010ccc 	.word	0x08010ccc

0800a4cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <tcp_rexmit+0x1c>
 800a4da:	4b2f      	ldr	r3, [pc, #188]	; (800a598 <tcp_rexmit+0xcc>)
 800a4dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a4e0:	492e      	ldr	r1, [pc, #184]	; (800a59c <tcp_rexmit+0xd0>)
 800a4e2:	482f      	ldr	r0, [pc, #188]	; (800a5a0 <tcp_rexmit+0xd4>)
 800a4e4:	f003 fe34 	bl	800e150 <iprintf>

  if (pcb->unacked == NULL) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a4f0:	f06f 0305 	mvn.w	r3, #5
 800a4f4:	e04c      	b.n	800a590 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a4fc:	68b8      	ldr	r0, [r7, #8]
 800a4fe:	f7ff fe2d 	bl	800a15c <tcp_output_segment_busy>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a508:	f06f 0305 	mvn.w	r3, #5
 800a50c:	e040      	b.n	800a590 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	336c      	adds	r3, #108	; 0x6c
 800a51a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a51c:	e002      	b.n	800a524 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d011      	beq.n	800a550 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4618      	mov	r0, r3
 800a536:	f7f9 fc04 	bl	8003d42 <lwip_htonl>
 800a53a:	4604      	mov	r4, r0
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4618      	mov	r0, r3
 800a544:	f7f9 fbfd 	bl	8003d42 <lwip_htonl>
 800a548:	4603      	mov	r3, r0
 800a54a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dbe6      	blt.n	800a51e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d103      	bne.n	800a56e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a574:	2bff      	cmp	r3, #255	; 0xff
 800a576:	d007      	beq.n	800a588 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a57e:	3301      	adds	r3, #1
 800a580:	b2da      	uxtb	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	bd90      	pop	{r4, r7, pc}
 800a598:	08010c78 	.word	0x08010c78
 800a59c:	08011318 	.word	0x08011318
 800a5a0:	08010ccc 	.word	0x08010ccc

0800a5a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <tcp_rexmit_fast+0x1c>
 800a5b2:	4b2a      	ldr	r3, [pc, #168]	; (800a65c <tcp_rexmit_fast+0xb8>)
 800a5b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a5b8:	4929      	ldr	r1, [pc, #164]	; (800a660 <tcp_rexmit_fast+0xbc>)
 800a5ba:	482a      	ldr	r0, [pc, #168]	; (800a664 <tcp_rexmit_fast+0xc0>)
 800a5bc:	f003 fdc8 	bl	800e150 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d045      	beq.n	800a654 <tcp_rexmit_fast+0xb0>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8b5b      	ldrh	r3, [r3, #26]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d13f      	bne.n	800a654 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff ff79 	bl	800a4cc <tcp_rexmit>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d139      	bne.n	800a654 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bf28      	it	cs
 800a5f0:	4613      	movcs	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da00      	bge.n	800a5fa <tcp_rexmit_fast+0x56>
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	105b      	asrs	r3, r3, #1
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a60a:	461a      	mov	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	429a      	cmp	r2, r3
 800a614:	d206      	bcs.n	800a624 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a62e:	4619      	mov	r1, r3
 800a630:	0049      	lsls	r1, r1, #1
 800a632:	440b      	add	r3, r1
 800a634:	b29b      	uxth	r3, r3
 800a636:	4413      	add	r3, r2
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	8b5b      	ldrh	r3, [r3, #26]
 800a644:	f043 0304 	orr.w	r3, r3, #4
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	08010c78 	.word	0x08010c78
 800a660:	08011330 	.word	0x08011330
 800a664:	08010ccc 	.word	0x08010ccc

0800a668 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	607b      	str	r3, [r7, #4]
 800a672:	460b      	mov	r3, r1
 800a674:	817b      	strh	r3, [r7, #10]
 800a676:	4613      	mov	r3, r2
 800a678:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a67a:	897a      	ldrh	r2, [r7, #10]
 800a67c:	893b      	ldrh	r3, [r7, #8]
 800a67e:	4413      	add	r3, r2
 800a680:	b29b      	uxth	r3, r3
 800a682:	3314      	adds	r3, #20
 800a684:	b29b      	uxth	r3, r3
 800a686:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a68a:	4619      	mov	r1, r3
 800a68c:	2022      	movs	r0, #34	; 0x22
 800a68e:	f7fa fb77 	bl	8004d80 <pbuf_alloc>
 800a692:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d04d      	beq.n	800a736 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a69a:	897b      	ldrh	r3, [r7, #10]
 800a69c:	3313      	adds	r3, #19
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	8952      	ldrh	r2, [r2, #10]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	db06      	blt.n	800a6b4 <tcp_output_alloc_header_common+0x4c>
 800a6a6:	4b26      	ldr	r3, [pc, #152]	; (800a740 <tcp_output_alloc_header_common+0xd8>)
 800a6a8:	f240 7223 	movw	r2, #1827	; 0x723
 800a6ac:	4925      	ldr	r1, [pc, #148]	; (800a744 <tcp_output_alloc_header_common+0xdc>)
 800a6ae:	4826      	ldr	r0, [pc, #152]	; (800a748 <tcp_output_alloc_header_common+0xe0>)
 800a6b0:	f003 fd4e 	bl	800e150 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a6ba:	8c3b      	ldrh	r3, [r7, #32]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f9 fb2b 	bl	8003d18 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a6ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7f9 fb23 	bl	8003d18 <lwip_htons>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7f9 fb2e 	bl	8003d42 <lwip_htonl>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a6ec:	897b      	ldrh	r3, [r7, #10]
 800a6ee:	089b      	lsrs	r3, r3, #2
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	3305      	adds	r3, #5
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	031b      	lsls	r3, r3, #12
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4313      	orrs	r3, r2
 800a702:	b29b      	uxth	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7f9 fb07 	bl	8003d18 <lwip_htons>
 800a70a:	4603      	mov	r3, r0
 800a70c:	461a      	mov	r2, r3
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a712:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a714:	4618      	mov	r0, r3
 800a716:	f7f9 faff 	bl	8003d18 <lwip_htons>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2200      	movs	r2, #0
 800a726:	741a      	strb	r2, [r3, #16]
 800a728:	2200      	movs	r2, #0
 800a72a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2200      	movs	r2, #0
 800a730:	749a      	strb	r2, [r3, #18]
 800a732:	2200      	movs	r2, #0
 800a734:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a736:	697b      	ldr	r3, [r7, #20]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	08010c78 	.word	0x08010c78
 800a744:	08011350 	.word	0x08011350
 800a748:	08010ccc 	.word	0x08010ccc

0800a74c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a74c:	b5b0      	push	{r4, r5, r7, lr}
 800a74e:	b08a      	sub	sp, #40	; 0x28
 800a750:	af04      	add	r7, sp, #16
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	817b      	strh	r3, [r7, #10]
 800a75a:	4613      	mov	r3, r2
 800a75c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <tcp_output_alloc_header+0x26>
 800a764:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <tcp_output_alloc_header+0x70>)
 800a766:	f240 7242 	movw	r2, #1858	; 0x742
 800a76a:	4915      	ldr	r1, [pc, #84]	; (800a7c0 <tcp_output_alloc_header+0x74>)
 800a76c:	4815      	ldr	r0, [pc, #84]	; (800a7c4 <tcp_output_alloc_header+0x78>)
 800a76e:	f003 fcef 	bl	800e150 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8adb      	ldrh	r3, [r3, #22]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	8b12      	ldrh	r2, [r2, #24]
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a782:	893d      	ldrh	r5, [r7, #8]
 800a784:	897c      	ldrh	r4, [r7, #10]
 800a786:	9103      	str	r1, [sp, #12]
 800a788:	2110      	movs	r1, #16
 800a78a:	9102      	str	r1, [sp, #8]
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	462a      	mov	r2, r5
 800a794:	4621      	mov	r1, r4
 800a796:	f7ff ff67 	bl	800a668 <tcp_output_alloc_header_common>
 800a79a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d006      	beq.n	800a7b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a7aa:	441a      	add	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a7b0:	697b      	ldr	r3, [r7, #20]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	08010c78 	.word	0x08010c78
 800a7c0:	08011380 	.word	0x08011380
 800a7c4:	08010ccc 	.word	0x08010ccc

0800a7c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	71fb      	strb	r3, [r7, #7]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <tcp_output_fill_options+0x2e>
 800a7e8:	4b13      	ldr	r3, [pc, #76]	; (800a838 <tcp_output_fill_options+0x70>)
 800a7ea:	f240 7256 	movw	r2, #1878	; 0x756
 800a7ee:	4913      	ldr	r1, [pc, #76]	; (800a83c <tcp_output_fill_options+0x74>)
 800a7f0:	4813      	ldr	r0, [pc, #76]	; (800a840 <tcp_output_fill_options+0x78>)
 800a7f2:	f003 fcad 	bl	800e150 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	3314      	adds	r3, #20
 800a800:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f103 0214 	add.w	r2, r3, #20
 800a808:	8bfb      	ldrh	r3, [r7, #30]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4619      	mov	r1, r3
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	440b      	add	r3, r1
 800a818:	4413      	add	r3, r2
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d006      	beq.n	800a82e <tcp_output_fill_options+0x66>
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <tcp_output_fill_options+0x70>)
 800a822:	f240 7275 	movw	r2, #1909	; 0x775
 800a826:	4907      	ldr	r1, [pc, #28]	; (800a844 <tcp_output_fill_options+0x7c>)
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <tcp_output_fill_options+0x78>)
 800a82a:	f003 fc91 	bl	800e150 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a82e:	bf00      	nop
 800a830:	3720      	adds	r7, #32
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	08010c78 	.word	0x08010c78
 800a83c:	080113a8 	.word	0x080113a8
 800a840:	08010ccc 	.word	0x08010ccc
 800a844:	080112a0 	.word	0x080112a0

0800a848 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08a      	sub	sp, #40	; 0x28
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <tcp_output_control_segment+0x22>
 800a85c:	4b1c      	ldr	r3, [pc, #112]	; (800a8d0 <tcp_output_control_segment+0x88>)
 800a85e:	f240 7287 	movw	r2, #1927	; 0x787
 800a862:	491c      	ldr	r1, [pc, #112]	; (800a8d4 <tcp_output_control_segment+0x8c>)
 800a864:	481c      	ldr	r0, [pc, #112]	; (800a8d8 <tcp_output_control_segment+0x90>)
 800a866:	f003 fc73 	bl	800e150 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7fe ff40 	bl	80096f4 <tcp_route>
 800a874:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a87c:	23fc      	movs	r3, #252	; 0xfc
 800a87e:	75fb      	strb	r3, [r7, #23]
 800a880:	e01c      	b.n	800a8bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d006      	beq.n	800a896 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7adb      	ldrb	r3, [r3, #11]
 800a88c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	7a9b      	ldrb	r3, [r3, #10]
 800a892:	757b      	strb	r3, [r7, #21]
 800a894:	e003      	b.n	800a89e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a896:	23ff      	movs	r3, #255	; 0xff
 800a898:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a89e:	7dba      	ldrb	r2, [r7, #22]
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	9302      	str	r3, [sp, #8]
 800a8a4:	2306      	movs	r3, #6
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	7d7b      	ldrb	r3, [r7, #21]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f002 fb2a 	bl	800cf0c <ip4_output_if>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	f7fa fd43 	bl	8005348 <pbuf_free>
  return err;
 800a8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08010c78 	.word	0x08010c78
 800a8d4:	080113d0 	.word	0x080113d0
 800a8d8:	08010ccc 	.word	0x08010ccc

0800a8dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b08b      	sub	sp, #44	; 0x2c
 800a8e0:	af04      	add	r7, sp, #16
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d106      	bne.n	800a8fe <tcp_rst+0x22>
 800a8f0:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <tcp_rst+0x94>)
 800a8f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a8f6:	491f      	ldr	r1, [pc, #124]	; (800a974 <tcp_rst+0x98>)
 800a8f8:	481f      	ldr	r0, [pc, #124]	; (800a978 <tcp_rst+0x9c>)
 800a8fa:	f003 fc29 	bl	800e150 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <tcp_rst+0x36>
 800a904:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <tcp_rst+0x94>)
 800a906:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a90a:	491c      	ldr	r1, [pc, #112]	; (800a97c <tcp_rst+0xa0>)
 800a90c:	481a      	ldr	r0, [pc, #104]	; (800a978 <tcp_rst+0x9c>)
 800a90e:	f003 fc1f 	bl	800e150 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a916:	f246 0308 	movw	r3, #24584	; 0x6008
 800a91a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	b29c      	uxth	r4, r3
 800a920:	68b8      	ldr	r0, [r7, #8]
 800a922:	f7f9 fa0e 	bl	8003d42 <lwip_htonl>
 800a926:	4602      	mov	r2, r0
 800a928:	8abb      	ldrh	r3, [r7, #20]
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	2314      	movs	r3, #20
 800a92e:	9302      	str	r3, [sp, #8]
 800a930:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4613      	mov	r3, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	4621      	mov	r1, r4
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fe92 	bl	800a668 <tcp_output_alloc_header_common>
 800a944:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00c      	beq.n	800a966 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	2200      	movs	r2, #0
 800a950:	6939      	ldr	r1, [r7, #16]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff ff38 	bl	800a7c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	6939      	ldr	r1, [r7, #16]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff ff72 	bl	800a848 <tcp_output_control_segment>
 800a964:	e000      	b.n	800a968 <tcp_rst+0x8c>
    return;
 800a966:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}
 800a96e:	bf00      	nop
 800a970:	08010c78 	.word	0x08010c78
 800a974:	080113fc 	.word	0x080113fc
 800a978:	08010ccc 	.word	0x08010ccc
 800a97c:	08011418 	.word	0x08011418

0800a980 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a980:	b590      	push	{r4, r7, lr}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <tcp_send_empty_ack+0x24>
 800a996:	4b28      	ldr	r3, [pc, #160]	; (800aa38 <tcp_send_empty_ack+0xb8>)
 800a998:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a99c:	4927      	ldr	r1, [pc, #156]	; (800aa3c <tcp_send_empty_ack+0xbc>)
 800a99e:	4828      	ldr	r0, [pc, #160]	; (800aa40 <tcp_send_empty_ack+0xc0>)
 800a9a0:	f003 fbd6 	bl	800e150 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a9b0:	7d7b      	ldrb	r3, [r7, #21]
 800a9b2:	b29c      	uxth	r4, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f9 f9c2 	bl	8003d42 <lwip_htonl>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fec1 	bl	800a74c <tcp_output_alloc_header>
 800a9ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8b5b      	ldrh	r3, [r3, #26]
 800a9d6:	f043 0303 	orr.w	r3, r3, #3
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a9e0:	f06f 0301 	mvn.w	r3, #1
 800a9e4:	e023      	b.n	800aa2e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a9e6:	7dbb      	ldrb	r3, [r7, #22]
 800a9e8:	7dfa      	ldrb	r2, [r7, #23]
 800a9ea:	6939      	ldr	r1, [r7, #16]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff feeb 	bl	800a7c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	6939      	ldr	r1, [r7, #16]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff ff24 	bl	800a848 <tcp_output_control_segment>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aa04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d007      	beq.n	800aa1c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8b5b      	ldrh	r3, [r3, #26]
 800aa10:	f043 0303 	orr.w	r3, r3, #3
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	835a      	strh	r2, [r3, #26]
 800aa1a:	e006      	b.n	800aa2a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	8b5b      	ldrh	r3, [r3, #26]
 800aa20:	f023 0303 	bic.w	r3, r3, #3
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800aa2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd90      	pop	{r4, r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08010c78 	.word	0x08010c78
 800aa3c:	08011434 	.word	0x08011434
 800aa40:	08010ccc 	.word	0x08010ccc

0800aa44 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <tcp_keepalive+0x20>
 800aa56:	4b18      	ldr	r3, [pc, #96]	; (800aab8 <tcp_keepalive+0x74>)
 800aa58:	f640 0224 	movw	r2, #2084	; 0x824
 800aa5c:	4917      	ldr	r1, [pc, #92]	; (800aabc <tcp_keepalive+0x78>)
 800aa5e:	4818      	ldr	r0, [pc, #96]	; (800aac0 <tcp_keepalive+0x7c>)
 800aa60:	f003 fb76 	bl	800e150 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	b29c      	uxth	r4, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f9 f967 	bl	8003d42 <lwip_htonl>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2200      	movs	r2, #0
 800aa78:	4621      	mov	r1, r4
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff fe66 	bl	800a74c <tcp_output_alloc_header>
 800aa80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800aa88:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8c:	e010      	b.n	800aab0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2200      	movs	r2, #0
 800aa92:	6939      	ldr	r1, [r7, #16]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff fe97 	bl	800a7c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	6939      	ldr	r1, [r7, #16]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff fed0 	bl	800a848 <tcp_output_control_segment>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aaac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd90      	pop	{r4, r7, pc}
 800aab8:	08010c78 	.word	0x08010c78
 800aabc:	08011454 	.word	0x08011454
 800aac0:	08010ccc 	.word	0x08010ccc

0800aac4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b08b      	sub	sp, #44	; 0x2c
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <tcp_zero_window_probe+0x22>
 800aad8:	4b4c      	ldr	r3, [pc, #304]	; (800ac0c <tcp_zero_window_probe+0x148>)
 800aada:	f640 024f 	movw	r2, #2127	; 0x84f
 800aade:	494c      	ldr	r1, [pc, #304]	; (800ac10 <tcp_zero_window_probe+0x14c>)
 800aae0:	484c      	ldr	r0, [pc, #304]	; (800ac14 <tcp_zero_window_probe+0x150>)
 800aae2:	f003 fb35 	bl	800e150 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e086      	b.n	800ac04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aafc:	2bff      	cmp	r3, #255	; 0xff
 800aafe:	d007      	beq.n	800ab10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ab06:	3301      	adds	r3, #1
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7f9 f8fd 	bl	8003d18 <lwip_htons>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <tcp_zero_window_probe+0x72>
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	891b      	ldrh	r3, [r3, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <tcp_zero_window_probe+0x72>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <tcp_zero_window_probe+0x74>
 800ab36:	2300      	movs	r3, #0
 800ab38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ab3a:	7ffb      	ldrb	r3, [r7, #31]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bf0c      	ite	eq
 800ab40:	2301      	moveq	r3, #1
 800ab42:	2300      	movne	r3, #0
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ab48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab4c:	b299      	uxth	r1, r3
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	8bba      	ldrh	r2, [r7, #28]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff fdf8 	bl	800a74c <tcp_output_alloc_header>
 800ab5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d102      	bne.n	800ab6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295
 800ab68:	e04c      	b.n	800ac04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ab70:	7ffb      	ldrb	r3, [r7, #31]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d011      	beq.n	800ab9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	899b      	ldrh	r3, [r3, #12]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	b21b      	sxth	r3, r3
 800ab7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab82:	b21c      	sxth	r4, r3
 800ab84:	2011      	movs	r0, #17
 800ab86:	f7f9 f8c7 	bl	8003d18 <lwip_htons>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	b21b      	sxth	r3, r3
 800ab8e:	4323      	orrs	r3, r4
 800ab90:	b21b      	sxth	r3, r3
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	819a      	strh	r2, [r3, #12]
 800ab98:	e010      	b.n	800abbc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	3314      	adds	r3, #20
 800aba0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	6858      	ldr	r0, [r3, #4]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	891a      	ldrh	r2, [r3, #8]
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	891b      	ldrh	r3, [r3, #8]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2201      	movs	r2, #1
 800abb6:	6939      	ldr	r1, [r7, #16]
 800abb8:	f7fa fdc0 	bl	800573c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f9 f8bd 	bl	8003d42 <lwip_htonl>
 800abc8:	4603      	mov	r3, r0
 800abca:	3301      	adds	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	da02      	bge.n	800abe0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800abe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe4:	2200      	movs	r2, #0
 800abe6:	69b9      	ldr	r1, [r7, #24]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fded 	bl	800a7c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3304      	adds	r3, #4
 800abf4:	69b9      	ldr	r1, [r7, #24]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff fe26 	bl	800a848 <tcp_output_control_segment>
 800abfc:	4603      	mov	r3, r0
 800abfe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ac00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	372c      	adds	r7, #44	; 0x2c
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd90      	pop	{r4, r7, pc}
 800ac0c:	08010c78 	.word	0x08010c78
 800ac10:	08011470 	.word	0x08011470
 800ac14:	08010ccc 	.word	0x08010ccc

0800ac18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ac20:	f7fa ff0c 	bl	8005a3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ac24:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <tcpip_tcp_timer+0x38>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d103      	bne.n	800ac34 <tcpip_tcp_timer+0x1c>
 800ac2c:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <tcpip_tcp_timer+0x3c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ac34:	2200      	movs	r2, #0
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <tcpip_tcp_timer+0x40>)
 800ac38:	20fa      	movs	r0, #250	; 0xfa
 800ac3a:	f000 f8f3 	bl	800ae24 <sys_timeout>
 800ac3e:	e003      	b.n	800ac48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ac40:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <tcpip_tcp_timer+0x44>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
  }
}
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20005874 	.word	0x20005874
 800ac54:	20005878 	.word	0x20005878
 800ac58:	0800ac19 	.word	0x0800ac19
 800ac5c:	200058c0 	.word	0x200058c0

0800ac60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ac64:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <tcp_timer_needed+0x30>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10f      	bne.n	800ac8c <tcp_timer_needed+0x2c>
 800ac6c:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <tcp_timer_needed+0x34>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d103      	bne.n	800ac7c <tcp_timer_needed+0x1c>
 800ac74:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <tcp_timer_needed+0x38>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d007      	beq.n	800ac8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <tcp_timer_needed+0x30>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ac82:	2200      	movs	r2, #0
 800ac84:	4905      	ldr	r1, [pc, #20]	; (800ac9c <tcp_timer_needed+0x3c>)
 800ac86:	20fa      	movs	r0, #250	; 0xfa
 800ac88:	f000 f8cc 	bl	800ae24 <sys_timeout>
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	200058c0 	.word	0x200058c0
 800ac94:	20005874 	.word	0x20005874
 800ac98:	20005878 	.word	0x20005878
 800ac9c:	0800ac19 	.word	0x0800ac19

0800aca0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800acac:	2006      	movs	r0, #6
 800acae:	f7f9 fc89 	bl	80045c4 <memp_malloc>
 800acb2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d109      	bne.n	800acce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d151      	bne.n	800ad64 <sys_timeout_abs+0xc4>
 800acc0:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <sys_timeout_abs+0xcc>)
 800acc2:	22be      	movs	r2, #190	; 0xbe
 800acc4:	492a      	ldr	r1, [pc, #168]	; (800ad70 <sys_timeout_abs+0xd0>)
 800acc6:	482b      	ldr	r0, [pc, #172]	; (800ad74 <sys_timeout_abs+0xd4>)
 800acc8:	f003 fa42 	bl	800e150 <iprintf>
    return;
 800accc:	e04a      	b.n	800ad64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ace6:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <sys_timeout_abs+0xd8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d103      	bne.n	800acf6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800acee:	4a22      	ldr	r2, [pc, #136]	; (800ad78 <sys_timeout_abs+0xd8>)
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	6013      	str	r3, [r2, #0]
    return;
 800acf4:	e037      	b.n	800ad66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	4b1f      	ldr	r3, [pc, #124]	; (800ad78 <sys_timeout_abs+0xd8>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	0fdb      	lsrs	r3, r3, #31
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d007      	beq.n	800ad1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ad0e:	4b1a      	ldr	r3, [pc, #104]	; (800ad78 <sys_timeout_abs+0xd8>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ad16:	4a18      	ldr	r2, [pc, #96]	; (800ad78 <sys_timeout_abs+0xd8>)
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	e023      	b.n	800ad66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ad1e:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <sys_timeout_abs+0xd8>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	e01a      	b.n	800ad5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <sys_timeout_abs+0xa6>
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	0fdb      	lsrs	r3, r3, #31
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	601a      	str	r2, [r3, #0]
        break;
 800ad54:	e007      	b.n	800ad66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e1      	bne.n	800ad26 <sys_timeout_abs+0x86>
 800ad62:	e000      	b.n	800ad66 <sys_timeout_abs+0xc6>
    return;
 800ad64:	bf00      	nop
      }
    }
  }
}
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	08011494 	.word	0x08011494
 800ad70:	080114c8 	.word	0x080114c8
 800ad74:	08011508 	.word	0x08011508
 800ad78:	200058b8 	.word	0x200058b8

0800ad7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4798      	blx	r3

  now = sys_now();
 800ad8e:	f7f8 fefb 	bl	8003b88 <sys_now>
 800ad92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <lwip_cyclic_timer+0x5c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	0fdb      	lsrs	r3, r3, #31
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	4413      	add	r3, r2
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <lwip_cyclic_timer+0x60>)
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff ff6e 	bl	800aca0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800adc4:	e004      	b.n	800add0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4904      	ldr	r1, [pc, #16]	; (800addc <lwip_cyclic_timer+0x60>)
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f7ff ff68 	bl	800aca0 <sys_timeout_abs>
}
 800add0:	bf00      	nop
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	200058bc 	.word	0x200058bc
 800addc:	0800ad7d 	.word	0x0800ad7d

0800ade0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ade6:	2301      	movs	r3, #1
 800ade8:	607b      	str	r3, [r7, #4]
 800adea:	e00e      	b.n	800ae0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800adec:	4a0b      	ldr	r2, [pc, #44]	; (800ae1c <sys_timeouts_init+0x3c>)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	4a08      	ldr	r2, [pc, #32]	; (800ae1c <sys_timeouts_init+0x3c>)
 800adfa:	4413      	add	r3, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	4908      	ldr	r1, [pc, #32]	; (800ae20 <sys_timeouts_init+0x40>)
 800ae00:	f000 f810 	bl	800ae24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3301      	adds	r3, #1
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d9ed      	bls.n	800adec <sys_timeouts_init+0xc>
  }
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0801206c 	.word	0x0801206c
 800ae20:	0800ad7d 	.word	0x0800ad7d

0800ae24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae36:	d306      	bcc.n	800ae46 <sys_timeout+0x22>
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <sys_timeout+0x40>)
 800ae3a:	f240 1229 	movw	r2, #297	; 0x129
 800ae3e:	490a      	ldr	r1, [pc, #40]	; (800ae68 <sys_timeout+0x44>)
 800ae40:	480a      	ldr	r0, [pc, #40]	; (800ae6c <sys_timeout+0x48>)
 800ae42:	f003 f985 	bl	800e150 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ae46:	f7f8 fe9f 	bl	8003b88 <sys_now>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	6978      	ldr	r0, [r7, #20]
 800ae58:	f7ff ff22 	bl	800aca0 <sys_timeout_abs>
#endif
}
 800ae5c:	bf00      	nop
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	08011494 	.word	0x08011494
 800ae68:	08011530 	.word	0x08011530
 800ae6c:	08011508 	.word	0x08011508

0800ae70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ae76:	f7f8 fe87 	bl	8003b88 <sys_now>
 800ae7a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ae7c:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <sys_check_timeouts+0x78>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <sys_check_timeouts+0x1a>
 800ae86:	f7f9 ff25 	bl	8004cd4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ae8a:	4b18      	ldr	r3, [pc, #96]	; (800aeec <sys_check_timeouts+0x7c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d022      	beq.n	800aedc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	0fdb      	lsrs	r3, r3, #31
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11a      	bne.n	800aee0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <sys_check_timeouts+0x7c>)
 800aeb0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	4a0b      	ldr	r2, [pc, #44]	; (800aef0 <sys_check_timeouts+0x80>)
 800aec4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	2006      	movs	r0, #6
 800aeca:	f7f9 fbc7 	bl	800465c <memp_free>
    if (handler != NULL) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0d3      	beq.n	800ae7c <sys_check_timeouts+0xc>
      handler(arg);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6838      	ldr	r0, [r7, #0]
 800aed8:	4798      	blx	r3
  do {
 800aeda:	e7cf      	b.n	800ae7c <sys_check_timeouts+0xc>
      return;
 800aedc:	bf00      	nop
 800aede:	e000      	b.n	800aee2 <sys_check_timeouts+0x72>
      return;
 800aee0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20005865 	.word	0x20005865
 800aeec:	200058b8 	.word	0x200058b8
 800aef0:	200058bc 	.word	0x200058bc

0800aef4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aef8:	f003 f942 	bl	800e180 <rand>
 800aefc:	4603      	mov	r3, r0
 800aefe:	b29b      	uxth	r3, r3
 800af00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800af04:	b29b      	uxth	r3, r3
 800af06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	4b01      	ldr	r3, [pc, #4]	; (800af14 <udp_init+0x20>)
 800af0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800af10:	bf00      	nop
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20000010 	.word	0x20000010

0800af18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800af22:	4b17      	ldr	r3, [pc, #92]	; (800af80 <udp_new_port+0x68>)
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	b291      	uxth	r1, r2
 800af2a:	4a15      	ldr	r2, [pc, #84]	; (800af80 <udp_new_port+0x68>)
 800af2c:	8011      	strh	r1, [r2, #0]
 800af2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af32:	4293      	cmp	r3, r2
 800af34:	d103      	bne.n	800af3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <udp_new_port+0x68>)
 800af38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800af3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af3e:	4b11      	ldr	r3, [pc, #68]	; (800af84 <udp_new_port+0x6c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	e011      	b.n	800af6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	8a5a      	ldrh	r2, [r3, #18]
 800af4a:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <udp_new_port+0x68>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d108      	bne.n	800af64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	3301      	adds	r3, #1
 800af56:	80fb      	strh	r3, [r7, #6]
 800af58:	88fb      	ldrh	r3, [r7, #6]
 800af5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af5e:	d3e0      	bcc.n	800af22 <udp_new_port+0xa>
        return 0;
 800af60:	2300      	movs	r3, #0
 800af62:	e007      	b.n	800af74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	603b      	str	r3, [r7, #0]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1ea      	bne.n	800af46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <udp_new_port+0x68>)
 800af72:	881b      	ldrh	r3, [r3, #0]
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20000010 	.word	0x20000010
 800af84:	200058c4 	.word	0x200058c4

0800af88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	4613      	mov	r3, r2
 800af94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d105      	bne.n	800afa8 <udp_input_local_match+0x20>
 800af9c:	4b27      	ldr	r3, [pc, #156]	; (800b03c <udp_input_local_match+0xb4>)
 800af9e:	2287      	movs	r2, #135	; 0x87
 800afa0:	4927      	ldr	r1, [pc, #156]	; (800b040 <udp_input_local_match+0xb8>)
 800afa2:	4828      	ldr	r0, [pc, #160]	; (800b044 <udp_input_local_match+0xbc>)
 800afa4:	f003 f8d4 	bl	800e150 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <udp_input_local_match+0x32>
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <udp_input_local_match+0xb4>)
 800afb0:	2288      	movs	r2, #136	; 0x88
 800afb2:	4925      	ldr	r1, [pc, #148]	; (800b048 <udp_input_local_match+0xc0>)
 800afb4:	4823      	ldr	r0, [pc, #140]	; (800b044 <udp_input_local_match+0xbc>)
 800afb6:	f003 f8cb 	bl	800e150 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	7a1b      	ldrb	r3, [r3, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	7a1a      	ldrb	r2, [r3, #8]
 800afc6:	4b21      	ldr	r3, [pc, #132]	; (800b04c <udp_input_local_match+0xc4>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afce:	3301      	adds	r3, #1
 800afd0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d001      	beq.n	800afda <udp_input_local_match+0x52>
    return 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	e02b      	b.n	800b032 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800afda:	79fb      	ldrb	r3, [r7, #7]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d018      	beq.n	800b012 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d013      	beq.n	800b00e <udp_input_local_match+0x86>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00f      	beq.n	800b00e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800afee:	4b17      	ldr	r3, [pc, #92]	; (800b04c <udp_input_local_match+0xc4>)
 800aff0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff6:	d00a      	beq.n	800b00e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	4b13      	ldr	r3, [pc, #76]	; (800b04c <udp_input_local_match+0xc4>)
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	405a      	eors	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	3308      	adds	r3, #8
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d110      	bne.n	800b030 <udp_input_local_match+0xa8>
          return 1;
 800b00e:	2301      	movs	r3, #1
 800b010:	e00f      	b.n	800b032 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <udp_input_local_match+0xa4>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <udp_input_local_match+0xa4>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	4b09      	ldr	r3, [pc, #36]	; (800b04c <udp_input_local_match+0xc4>)
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d101      	bne.n	800b030 <udp_input_local_match+0xa8>
        return 1;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e000      	b.n	800b032 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0801157c 	.word	0x0801157c
 800b040:	080115ac 	.word	0x080115ac
 800b044:	080115d0 	.word	0x080115d0
 800b048:	080115f8 	.word	0x080115f8
 800b04c:	20000138 	.word	0x20000138

0800b050 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b08d      	sub	sp, #52	; 0x34
 800b054:	af02      	add	r7, sp, #8
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <udp_input+0x20>
 800b064:	4b7c      	ldr	r3, [pc, #496]	; (800b258 <udp_input+0x208>)
 800b066:	22cf      	movs	r2, #207	; 0xcf
 800b068:	497c      	ldr	r1, [pc, #496]	; (800b25c <udp_input+0x20c>)
 800b06a:	487d      	ldr	r0, [pc, #500]	; (800b260 <udp_input+0x210>)
 800b06c:	f003 f870 	bl	800e150 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d105      	bne.n	800b082 <udp_input+0x32>
 800b076:	4b78      	ldr	r3, [pc, #480]	; (800b258 <udp_input+0x208>)
 800b078:	22d0      	movs	r2, #208	; 0xd0
 800b07a:	497a      	ldr	r1, [pc, #488]	; (800b264 <udp_input+0x214>)
 800b07c:	4878      	ldr	r0, [pc, #480]	; (800b260 <udp_input+0x210>)
 800b07e:	f003 f867 	bl	800e150 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	895b      	ldrh	r3, [r3, #10]
 800b086:	2b07      	cmp	r3, #7
 800b088:	d803      	bhi.n	800b092 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fa f95c 	bl	8005348 <pbuf_free>
    goto end;
 800b090:	e0de      	b.n	800b250 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b098:	4b73      	ldr	r3, [pc, #460]	; (800b268 <udp_input+0x218>)
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	4a72      	ldr	r2, [pc, #456]	; (800b268 <udp_input+0x218>)
 800b09e:	6812      	ldr	r2, [r2, #0]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f002 f80a 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7f8 fe30 	bl	8003d18 <lwip_htons>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	885b      	ldrh	r3, [r3, #2]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7f8 fe28 	bl	8003d18 <lwip_htons>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0d8:	4b64      	ldr	r3, [pc, #400]	; (800b26c <udp_input+0x21c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0de:	e054      	b.n	800b18a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	8a5b      	ldrh	r3, [r3, #18]
 800b0e4:	89fa      	ldrh	r2, [r7, #14]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d14a      	bne.n	800b180 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b0ea:	7cfb      	ldrb	r3, [r7, #19]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0f2:	f7ff ff49 	bl	800af88 <udp_input_local_match>
 800b0f6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d041      	beq.n	800b180 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	7c1b      	ldrb	r3, [r3, #16]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	d11d      	bne.n	800b144 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	e017      	b.n	800b144 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b114:	7cfb      	ldrb	r3, [r7, #19]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d014      	beq.n	800b144 <udp_input+0xf4>
 800b11a:	4b53      	ldr	r3, [pc, #332]	; (800b268 <udp_input+0x218>)
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b122:	d10f      	bne.n	800b144 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	3304      	adds	r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d008      	beq.n	800b144 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	3304      	adds	r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d101      	bne.n	800b144 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	8a9b      	ldrh	r3, [r3, #20]
 800b148:	8a3a      	ldrh	r2, [r7, #16]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d118      	bne.n	800b180 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	4b43      	ldr	r3, [pc, #268]	; (800b268 <udp_input+0x218>)
 800b15c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b15e:	429a      	cmp	r2, r3
 800b160:	d10e      	bne.n	800b180 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d014      	beq.n	800b192 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b170:	4b3e      	ldr	r3, [pc, #248]	; (800b26c <udp_input+0x21c>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b178:	4a3c      	ldr	r2, [pc, #240]	; (800b26c <udp_input+0x21c>)
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b17e:	e008      	b.n	800b192 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1a7      	bne.n	800b0e0 <udp_input+0x90>
 800b190:	e000      	b.n	800b194 <udp_input+0x144>
        break;
 800b192:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <udp_input+0x14e>
    pcb = uncon_pcb;
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <udp_input+0x15a>
    for_us = 1;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	76fb      	strb	r3, [r7, #27]
 800b1a8:	e00a      	b.n	800b1c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	4b2d      	ldr	r3, [pc, #180]	; (800b268 <udp_input+0x218>)
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	bf0c      	ite	eq
 800b1b8:	2301      	moveq	r3, #1
 800b1ba:	2300      	movne	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b1c0:	7efb      	ldrb	r3, [r7, #27]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d041      	beq.n	800b24a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b1c6:	2108      	movs	r1, #8
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7fa f837 	bl	800523c <pbuf_remove_header>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b1d4:	4b20      	ldr	r3, [pc, #128]	; (800b258 <udp_input+0x208>)
 800b1d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b1da:	4925      	ldr	r1, [pc, #148]	; (800b270 <udp_input+0x220>)
 800b1dc:	4820      	ldr	r0, [pc, #128]	; (800b260 <udp_input+0x210>)
 800b1de:	f002 ffb7 	bl	800e150 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7fa f8b0 	bl	8005348 <pbuf_free>
      goto end;
 800b1e8:	e032      	b.n	800b250 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d012      	beq.n	800b216 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	699c      	ldr	r4, [r3, #24]
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	69d8      	ldr	r0, [r3, #28]
 800b200:	8a3b      	ldrh	r3, [r7, #16]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	4b1b      	ldr	r3, [pc, #108]	; (800b274 <udp_input+0x224>)
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b20a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b20c:	e021      	b.n	800b252 <udp_input+0x202>
        pbuf_free(p);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7fa f89a 	bl	8005348 <pbuf_free>
        goto end;
 800b214:	e01c      	b.n	800b250 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b216:	7cfb      	ldrb	r3, [r7, #19]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d112      	bne.n	800b242 <udp_input+0x1f2>
 800b21c:	4b12      	ldr	r3, [pc, #72]	; (800b268 <udp_input+0x218>)
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b224:	2be0      	cmp	r3, #224	; 0xe0
 800b226:	d00c      	beq.n	800b242 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b228:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <udp_input+0x218>)
 800b22a:	899b      	ldrh	r3, [r3, #12]
 800b22c:	3308      	adds	r3, #8
 800b22e:	b29b      	uxth	r3, r3
 800b230:	b21b      	sxth	r3, r3
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7fa f874 	bl	8005322 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b23a:	2103      	movs	r1, #3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 fc1d 	bl	800ca7c <icmp_dest_unreach>
      pbuf_free(p);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7fa f880 	bl	8005348 <pbuf_free>
  return;
 800b248:	e003      	b.n	800b252 <udp_input+0x202>
    pbuf_free(p);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7fa f87c 	bl	8005348 <pbuf_free>
  return;
 800b250:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b252:	372c      	adds	r7, #44	; 0x2c
 800b254:	46bd      	mov	sp, r7
 800b256:	bd90      	pop	{r4, r7, pc}
 800b258:	0801157c 	.word	0x0801157c
 800b25c:	08011620 	.word	0x08011620
 800b260:	080115d0 	.word	0x080115d0
 800b264:	08011638 	.word	0x08011638
 800b268:	20000138 	.word	0x20000138
 800b26c:	200058c4 	.word	0x200058c4
 800b270:	08011654 	.word	0x08011654
 800b274:	20000148 	.word	0x20000148

0800b278 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <udp_send+0x24>
 800b288:	4b11      	ldr	r3, [pc, #68]	; (800b2d0 <udp_send+0x58>)
 800b28a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b28e:	4911      	ldr	r1, [pc, #68]	; (800b2d4 <udp_send+0x5c>)
 800b290:	4811      	ldr	r0, [pc, #68]	; (800b2d8 <udp_send+0x60>)
 800b292:	f002 ff5d 	bl	800e150 <iprintf>
 800b296:	f06f 030f 	mvn.w	r3, #15
 800b29a:	e015      	b.n	800b2c8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d109      	bne.n	800b2b6 <udp_send+0x3e>
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <udp_send+0x58>)
 800b2a4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b2a8:	490c      	ldr	r1, [pc, #48]	; (800b2dc <udp_send+0x64>)
 800b2aa:	480b      	ldr	r0, [pc, #44]	; (800b2d8 <udp_send+0x60>)
 800b2ac:	f002 ff50 	bl	800e150 <iprintf>
 800b2b0:	f06f 030f 	mvn.w	r3, #15
 800b2b4:	e008      	b.n	800b2c8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	8a9b      	ldrh	r3, [r3, #20]
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f80d 	bl	800b2e0 <udp_sendto>
 800b2c6:	4603      	mov	r3, r0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0801157c 	.word	0x0801157c
 800b2d4:	08011670 	.word	0x08011670
 800b2d8:	080115d0 	.word	0x080115d0
 800b2dc:	08011688 	.word	0x08011688

0800b2e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d109      	bne.n	800b308 <udp_sendto+0x28>
 800b2f4:	4b23      	ldr	r3, [pc, #140]	; (800b384 <udp_sendto+0xa4>)
 800b2f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b2fa:	4923      	ldr	r1, [pc, #140]	; (800b388 <udp_sendto+0xa8>)
 800b2fc:	4823      	ldr	r0, [pc, #140]	; (800b38c <udp_sendto+0xac>)
 800b2fe:	f002 ff27 	bl	800e150 <iprintf>
 800b302:	f06f 030f 	mvn.w	r3, #15
 800b306:	e038      	b.n	800b37a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <udp_sendto+0x42>
 800b30e:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <udp_sendto+0xa4>)
 800b310:	f240 2219 	movw	r2, #537	; 0x219
 800b314:	491e      	ldr	r1, [pc, #120]	; (800b390 <udp_sendto+0xb0>)
 800b316:	481d      	ldr	r0, [pc, #116]	; (800b38c <udp_sendto+0xac>)
 800b318:	f002 ff1a 	bl	800e150 <iprintf>
 800b31c:	f06f 030f 	mvn.w	r3, #15
 800b320:	e02b      	b.n	800b37a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d109      	bne.n	800b33c <udp_sendto+0x5c>
 800b328:	4b16      	ldr	r3, [pc, #88]	; (800b384 <udp_sendto+0xa4>)
 800b32a:	f240 221a 	movw	r2, #538	; 0x21a
 800b32e:	4919      	ldr	r1, [pc, #100]	; (800b394 <udp_sendto+0xb4>)
 800b330:	4816      	ldr	r0, [pc, #88]	; (800b38c <udp_sendto+0xac>)
 800b332:	f002 ff0d 	bl	800e150 <iprintf>
 800b336:	f06f 030f 	mvn.w	r3, #15
 800b33a:	e01e      	b.n	800b37a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	7a1b      	ldrb	r3, [r3, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d006      	beq.n	800b352 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	7a1b      	ldrb	r3, [r3, #8]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7f9 fc9d 	bl	8004c88 <netif_get_by_index>
 800b34e:	6178      	str	r0, [r7, #20]
 800b350:	e003      	b.n	800b35a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f001 fc1c 	bl	800cb90 <ip4_route>
 800b358:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b360:	f06f 0303 	mvn.w	r3, #3
 800b364:	e009      	b.n	800b37a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b366:	887a      	ldrh	r2, [r7, #2]
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4613      	mov	r3, r2
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 f810 	bl	800b398 <udp_sendto_if>
 800b378:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	0801157c 	.word	0x0801157c
 800b388:	080116a0 	.word	0x080116a0
 800b38c:	080115d0 	.word	0x080115d0
 800b390:	080116b8 	.word	0x080116b8
 800b394:	080116d4 	.word	0x080116d4

0800b398 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d109      	bne.n	800b3c0 <udp_sendto_if+0x28>
 800b3ac:	4b2e      	ldr	r3, [pc, #184]	; (800b468 <udp_sendto_if+0xd0>)
 800b3ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3b2:	492e      	ldr	r1, [pc, #184]	; (800b46c <udp_sendto_if+0xd4>)
 800b3b4:	482e      	ldr	r0, [pc, #184]	; (800b470 <udp_sendto_if+0xd8>)
 800b3b6:	f002 fecb 	bl	800e150 <iprintf>
 800b3ba:	f06f 030f 	mvn.w	r3, #15
 800b3be:	e04f      	b.n	800b460 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d109      	bne.n	800b3da <udp_sendto_if+0x42>
 800b3c6:	4b28      	ldr	r3, [pc, #160]	; (800b468 <udp_sendto_if+0xd0>)
 800b3c8:	f240 2281 	movw	r2, #641	; 0x281
 800b3cc:	4929      	ldr	r1, [pc, #164]	; (800b474 <udp_sendto_if+0xdc>)
 800b3ce:	4828      	ldr	r0, [pc, #160]	; (800b470 <udp_sendto_if+0xd8>)
 800b3d0:	f002 febe 	bl	800e150 <iprintf>
 800b3d4:	f06f 030f 	mvn.w	r3, #15
 800b3d8:	e042      	b.n	800b460 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <udp_sendto_if+0x5c>
 800b3e0:	4b21      	ldr	r3, [pc, #132]	; (800b468 <udp_sendto_if+0xd0>)
 800b3e2:	f240 2282 	movw	r2, #642	; 0x282
 800b3e6:	4924      	ldr	r1, [pc, #144]	; (800b478 <udp_sendto_if+0xe0>)
 800b3e8:	4821      	ldr	r0, [pc, #132]	; (800b470 <udp_sendto_if+0xd8>)
 800b3ea:	f002 feb1 	bl	800e150 <iprintf>
 800b3ee:	f06f 030f 	mvn.w	r3, #15
 800b3f2:	e035      	b.n	800b460 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <udp_sendto_if+0x76>
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <udp_sendto_if+0xd0>)
 800b3fc:	f240 2283 	movw	r2, #643	; 0x283
 800b400:	491e      	ldr	r1, [pc, #120]	; (800b47c <udp_sendto_if+0xe4>)
 800b402:	481b      	ldr	r0, [pc, #108]	; (800b470 <udp_sendto_if+0xd8>)
 800b404:	f002 fea4 	bl	800e150 <iprintf>
 800b408:	f06f 030f 	mvn.w	r3, #15
 800b40c:	e028      	b.n	800b460 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d009      	beq.n	800b428 <udp_sendto_if+0x90>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b424:	2be0      	cmp	r3, #224	; 0xe0
 800b426:	d103      	bne.n	800b430 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	3304      	adds	r3, #4
 800b42c:	617b      	str	r3, [r7, #20]
 800b42e:	e00b      	b.n	800b448 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	3304      	adds	r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d002      	beq.n	800b444 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b43e:	f06f 0303 	mvn.w	r3, #3
 800b442:	e00d      	b.n	800b460 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b448:	887a      	ldrh	r2, [r7, #2]
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4613      	mov	r3, r2
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f811 	bl	800b480 <udp_sendto_if_src>
 800b45e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	0801157c 	.word	0x0801157c
 800b46c:	080116f0 	.word	0x080116f0
 800b470:	080115d0 	.word	0x080115d0
 800b474:	0801170c 	.word	0x0801170c
 800b478:	08011728 	.word	0x08011728
 800b47c:	08011748 	.word	0x08011748

0800b480 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08c      	sub	sp, #48	; 0x30
 800b484:	af04      	add	r7, sp, #16
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <udp_sendto_if_src+0x28>
 800b494:	4b65      	ldr	r3, [pc, #404]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b496:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b49a:	4965      	ldr	r1, [pc, #404]	; (800b630 <udp_sendto_if_src+0x1b0>)
 800b49c:	4865      	ldr	r0, [pc, #404]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b49e:	f002 fe57 	bl	800e150 <iprintf>
 800b4a2:	f06f 030f 	mvn.w	r3, #15
 800b4a6:	e0bc      	b.n	800b622 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d109      	bne.n	800b4c2 <udp_sendto_if_src+0x42>
 800b4ae:	4b5f      	ldr	r3, [pc, #380]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b4b0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b4b4:	4960      	ldr	r1, [pc, #384]	; (800b638 <udp_sendto_if_src+0x1b8>)
 800b4b6:	485f      	ldr	r0, [pc, #380]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b4b8:	f002 fe4a 	bl	800e150 <iprintf>
 800b4bc:	f06f 030f 	mvn.w	r3, #15
 800b4c0:	e0af      	b.n	800b622 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d109      	bne.n	800b4dc <udp_sendto_if_src+0x5c>
 800b4c8:	4b58      	ldr	r3, [pc, #352]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b4ca:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b4ce:	495b      	ldr	r1, [pc, #364]	; (800b63c <udp_sendto_if_src+0x1bc>)
 800b4d0:	4858      	ldr	r0, [pc, #352]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b4d2:	f002 fe3d 	bl	800e150 <iprintf>
 800b4d6:	f06f 030f 	mvn.w	r3, #15
 800b4da:	e0a2      	b.n	800b622 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <udp_sendto_if_src+0x76>
 800b4e2:	4b52      	ldr	r3, [pc, #328]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b4e4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b4e8:	4955      	ldr	r1, [pc, #340]	; (800b640 <udp_sendto_if_src+0x1c0>)
 800b4ea:	4852      	ldr	r0, [pc, #328]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b4ec:	f002 fe30 	bl	800e150 <iprintf>
 800b4f0:	f06f 030f 	mvn.w	r3, #15
 800b4f4:	e095      	b.n	800b622 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d109      	bne.n	800b510 <udp_sendto_if_src+0x90>
 800b4fc:	4b4b      	ldr	r3, [pc, #300]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b4fe:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b502:	4950      	ldr	r1, [pc, #320]	; (800b644 <udp_sendto_if_src+0x1c4>)
 800b504:	484b      	ldr	r0, [pc, #300]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b506:	f002 fe23 	bl	800e150 <iprintf>
 800b50a:	f06f 030f 	mvn.w	r3, #15
 800b50e:	e088      	b.n	800b622 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8a5b      	ldrh	r3, [r3, #18]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10f      	bne.n	800b538 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b518:	68f9      	ldr	r1, [r7, #12]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8a5b      	ldrh	r3, [r3, #18]
 800b51e:	461a      	mov	r2, r3
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f893 	bl	800b64c <udp_bind>
 800b526:	4603      	mov	r3, r0
 800b528:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b52a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b532:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b536:	e074      	b.n	800b622 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	891b      	ldrh	r3, [r3, #8]
 800b53c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b540:	4293      	cmp	r3, r2
 800b542:	d902      	bls.n	800b54a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b544:	f04f 33ff 	mov.w	r3, #4294967295
 800b548:	e06b      	b.n	800b622 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b54a:	2108      	movs	r1, #8
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f7f9 fe65 	bl	800521c <pbuf_add_header>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d015      	beq.n	800b584 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b558:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b55c:	2108      	movs	r1, #8
 800b55e:	2022      	movs	r0, #34	; 0x22
 800b560:	f7f9 fc0e 	bl	8004d80 <pbuf_alloc>
 800b564:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	e057      	b.n	800b622 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	891b      	ldrh	r3, [r3, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	69f8      	ldr	r0, [r7, #28]
 800b57e:	f7f9 fffb 	bl	8005578 <pbuf_chain>
 800b582:	e001      	b.n	800b588 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	895b      	ldrh	r3, [r3, #10]
 800b58c:	2b07      	cmp	r3, #7
 800b58e:	d806      	bhi.n	800b59e <udp_sendto_if_src+0x11e>
 800b590:	4b26      	ldr	r3, [pc, #152]	; (800b62c <udp_sendto_if_src+0x1ac>)
 800b592:	f240 320d 	movw	r2, #781	; 0x30d
 800b596:	492c      	ldr	r1, [pc, #176]	; (800b648 <udp_sendto_if_src+0x1c8>)
 800b598:	4826      	ldr	r0, [pc, #152]	; (800b634 <udp_sendto_if_src+0x1b4>)
 800b59a:	f002 fdd9 	bl	800e150 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8a5b      	ldrh	r3, [r3, #18]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7f8 fbb5 	bl	8003d18 <lwip_htons>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b5b6:	887b      	ldrh	r3, [r7, #2]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f8 fbad 	bl	8003d18 <lwip_htons>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	719a      	strb	r2, [r3, #6]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	891b      	ldrh	r3, [r3, #8]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7f8 fb9f 	bl	8003d18 <lwip_htons>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	461a      	mov	r2, r3
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b5e2:	2311      	movs	r3, #17
 800b5e4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	7adb      	ldrb	r3, [r3, #11]
 800b5ea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	7a9b      	ldrb	r3, [r3, #10]
 800b5f0:	7cb9      	ldrb	r1, [r7, #18]
 800b5f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5f4:	9202      	str	r2, [sp, #8]
 800b5f6:	7cfa      	ldrb	r2, [r7, #19]
 800b5f8:	9201      	str	r2, [sp, #4]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b602:	69f8      	ldr	r0, [r7, #28]
 800b604:	f001 fcac 	bl	800cf60 <ip4_output_if_src>
 800b608:	4603      	mov	r3, r0
 800b60a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	429a      	cmp	r2, r3
 800b612:	d004      	beq.n	800b61e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b614:	69f8      	ldr	r0, [r7, #28]
 800b616:	f7f9 fe97 	bl	8005348 <pbuf_free>
    q = NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b61e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3720      	adds	r7, #32
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	0801157c 	.word	0x0801157c
 800b630:	08011768 	.word	0x08011768
 800b634:	080115d0 	.word	0x080115d0
 800b638:	08011788 	.word	0x08011788
 800b63c:	080117a8 	.word	0x080117a8
 800b640:	080117cc 	.word	0x080117cc
 800b644:	080117f0 	.word	0x080117f0
 800b648:	08011814 	.word	0x08011814

0800b64c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b660:	4b39      	ldr	r3, [pc, #228]	; (800b748 <udp_bind+0xfc>)
 800b662:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <udp_bind+0x32>
 800b66a:	4b38      	ldr	r3, [pc, #224]	; (800b74c <udp_bind+0x100>)
 800b66c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b670:	4937      	ldr	r1, [pc, #220]	; (800b750 <udp_bind+0x104>)
 800b672:	4838      	ldr	r0, [pc, #224]	; (800b754 <udp_bind+0x108>)
 800b674:	f002 fd6c 	bl	800e150 <iprintf>
 800b678:	f06f 030f 	mvn.w	r3, #15
 800b67c:	e060      	b.n	800b740 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b682:	4b35      	ldr	r3, [pc, #212]	; (800b758 <udp_bind+0x10c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e009      	b.n	800b69e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d102      	bne.n	800b698 <udp_bind+0x4c>
      rebind = 1;
 800b692:	2301      	movs	r3, #1
 800b694:	74fb      	strb	r3, [r7, #19]
      break;
 800b696:	e005      	b.n	800b6a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f2      	bne.n	800b68a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b6a4:	88fb      	ldrh	r3, [r7, #6]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <udp_bind+0x72>
    port = udp_new_port();
 800b6aa:	f7ff fc35 	bl	800af18 <udp_new_port>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d12c      	bne.n	800b712 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b6b8:	f06f 0307 	mvn.w	r3, #7
 800b6bc:	e040      	b.n	800b740 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b6be:	4b26      	ldr	r3, [pc, #152]	; (800b758 <udp_bind+0x10c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	e022      	b.n	800b70c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d01b      	beq.n	800b706 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	8a5b      	ldrh	r3, [r3, #18]
 800b6d2:	88fa      	ldrh	r2, [r7, #6]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d116      	bne.n	800b706 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d00d      	beq.n	800b700 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <udp_bind+0xb4>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b6f2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b700:	f06f 0307 	mvn.w	r3, #7
 800b704:	e01c      	b.n	800b740 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1d9      	bne.n	800b6c6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <udp_bind+0xd2>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	e000      	b.n	800b720 <udp_bind+0xd4>
 800b71e:	2300      	movs	r3, #0
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	88fa      	ldrh	r2, [r7, #6]
 800b728:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b72a:	7cfb      	ldrb	r3, [r7, #19]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <udp_bind+0x10c>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b738:	4a07      	ldr	r2, [pc, #28]	; (800b758 <udp_bind+0x10c>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	08012084 	.word	0x08012084
 800b74c:	0801157c 	.word	0x0801157c
 800b750:	08011844 	.word	0x08011844
 800b754:	080115d0 	.word	0x080115d0
 800b758:	200058c4 	.word	0x200058c4

0800b75c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d109      	bne.n	800b784 <udp_connect+0x28>
 800b770:	4b2c      	ldr	r3, [pc, #176]	; (800b824 <udp_connect+0xc8>)
 800b772:	f240 4235 	movw	r2, #1077	; 0x435
 800b776:	492c      	ldr	r1, [pc, #176]	; (800b828 <udp_connect+0xcc>)
 800b778:	482c      	ldr	r0, [pc, #176]	; (800b82c <udp_connect+0xd0>)
 800b77a:	f002 fce9 	bl	800e150 <iprintf>
 800b77e:	f06f 030f 	mvn.w	r3, #15
 800b782:	e04b      	b.n	800b81c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d109      	bne.n	800b79e <udp_connect+0x42>
 800b78a:	4b26      	ldr	r3, [pc, #152]	; (800b824 <udp_connect+0xc8>)
 800b78c:	f240 4236 	movw	r2, #1078	; 0x436
 800b790:	4927      	ldr	r1, [pc, #156]	; (800b830 <udp_connect+0xd4>)
 800b792:	4826      	ldr	r0, [pc, #152]	; (800b82c <udp_connect+0xd0>)
 800b794:	f002 fcdc 	bl	800e150 <iprintf>
 800b798:	f06f 030f 	mvn.w	r3, #15
 800b79c:	e03e      	b.n	800b81c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8a5b      	ldrh	r3, [r3, #18]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10f      	bne.n	800b7c6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b7a6:	68f9      	ldr	r1, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8a5b      	ldrh	r3, [r3, #18]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff ff4c 	bl	800b64c <udp_bind>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b7b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <udp_connect+0x6a>
      return err;
 800b7c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7c4:	e02a      	b.n	800b81c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <udp_connect+0x76>
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	e000      	b.n	800b7d4 <udp_connect+0x78>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	88fa      	ldrh	r2, [r7, #6]
 800b7dc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	7c1b      	ldrb	r3, [r3, #16]
 800b7e2:	f043 0304 	orr.w	r3, r3, #4
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7ec:	4b11      	ldr	r3, [pc, #68]	; (800b834 <udp_connect+0xd8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	e008      	b.n	800b806 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d101      	bne.n	800b800 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e00d      	b.n	800b81c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1f3      	bne.n	800b7f4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <udp_connect+0xd8>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b814:	4a07      	ldr	r2, [pc, #28]	; (800b834 <udp_connect+0xd8>)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	0801157c 	.word	0x0801157c
 800b828:	0801185c 	.word	0x0801185c
 800b82c:	080115d0 	.word	0x080115d0
 800b830:	08011878 	.word	0x08011878
 800b834:	200058c4 	.word	0x200058c4

0800b838 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <udp_disconnect+0x1e>
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <udp_disconnect+0x44>)
 800b848:	f240 426a 	movw	r2, #1130	; 0x46a
 800b84c:	490c      	ldr	r1, [pc, #48]	; (800b880 <udp_disconnect+0x48>)
 800b84e:	480d      	ldr	r0, [pc, #52]	; (800b884 <udp_disconnect+0x4c>)
 800b850:	f002 fc7e 	bl	800e150 <iprintf>
 800b854:	e00f      	b.n	800b876 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7c1b      	ldrb	r3, [r3, #16]
 800b86c:	f023 0304 	bic.w	r3, r3, #4
 800b870:	b2da      	uxtb	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	741a      	strb	r2, [r3, #16]
}
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	0801157c 	.word	0x0801157c
 800b880:	08011894 	.word	0x08011894
 800b884:	080115d0 	.word	0x080115d0

0800b888 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d107      	bne.n	800b8aa <udp_recv+0x22>
 800b89a:	4b08      	ldr	r3, [pc, #32]	; (800b8bc <udp_recv+0x34>)
 800b89c:	f240 428a 	movw	r2, #1162	; 0x48a
 800b8a0:	4907      	ldr	r1, [pc, #28]	; (800b8c0 <udp_recv+0x38>)
 800b8a2:	4808      	ldr	r0, [pc, #32]	; (800b8c4 <udp_recv+0x3c>)
 800b8a4:	f002 fc54 	bl	800e150 <iprintf>
 800b8a8:	e005      	b.n	800b8b6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	61da      	str	r2, [r3, #28]
}
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	0801157c 	.word	0x0801157c
 800b8c0:	080118b0 	.word	0x080118b0
 800b8c4:	080115d0 	.word	0x080115d0

0800b8c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d107      	bne.n	800b8e6 <udp_remove+0x1e>
 800b8d6:	4b19      	ldr	r3, [pc, #100]	; (800b93c <udp_remove+0x74>)
 800b8d8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b8dc:	4918      	ldr	r1, [pc, #96]	; (800b940 <udp_remove+0x78>)
 800b8de:	4819      	ldr	r0, [pc, #100]	; (800b944 <udp_remove+0x7c>)
 800b8e0:	f002 fc36 	bl	800e150 <iprintf>
 800b8e4:	e026      	b.n	800b934 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b8e6:	4b18      	ldr	r3, [pc, #96]	; (800b948 <udp_remove+0x80>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d105      	bne.n	800b8fc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b8f0:	4b15      	ldr	r3, [pc, #84]	; (800b948 <udp_remove+0x80>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4a14      	ldr	r2, [pc, #80]	; (800b948 <udp_remove+0x80>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	e017      	b.n	800b92c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b8fc:	4b12      	ldr	r3, [pc, #72]	; (800b948 <udp_remove+0x80>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e010      	b.n	800b926 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <udp_remove+0x58>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d104      	bne.n	800b920 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	60da      	str	r2, [r3, #12]
        break;
 800b91e:	e005      	b.n	800b92c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1eb      	bne.n	800b904 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	2000      	movs	r0, #0
 800b930:	f7f8 fe94 	bl	800465c <memp_free>
}
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	0801157c 	.word	0x0801157c
 800b940:	080118c8 	.word	0x080118c8
 800b944:	080115d0 	.word	0x080115d0
 800b948:	200058c4 	.word	0x200058c4

0800b94c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b952:	2000      	movs	r0, #0
 800b954:	f7f8 fe36 	bl	80045c4 <memp_malloc>
 800b958:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b960:	2220      	movs	r2, #32
 800b962:	2100      	movs	r1, #0
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f002 fbeb 	bl	800e140 <memset>
    pcb->ttl = UDP_TTL;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	22ff      	movs	r2, #255	; 0xff
 800b96e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b970:	687b      	ldr	r3, [r7, #4]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01e      	beq.n	800b9ca <udp_netif_ip_addr_changed+0x4e>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01a      	beq.n	800b9ca <udp_netif_ip_addr_changed+0x4e>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d017      	beq.n	800b9ca <udp_netif_ip_addr_changed+0x4e>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d013      	beq.n	800b9ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <udp_netif_ip_addr_changed+0x5c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e00c      	b.n	800b9c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d103      	bne.n	800b9be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1ef      	bne.n	800b9aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	200058c4 	.word	0x200058c4

0800b9dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b9e4:	4915      	ldr	r1, [pc, #84]	; (800ba3c <etharp_free_entry+0x60>)
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	440b      	add	r3, r1
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d013      	beq.n	800ba20 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b9f8:	4910      	ldr	r1, [pc, #64]	; (800ba3c <etharp_free_entry+0x60>)
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	4413      	add	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	440b      	add	r3, r1
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f9 fc9d 	bl	8005348 <pbuf_free>
    arp_table[i].q = NULL;
 800ba0e:	490b      	ldr	r1, [pc, #44]	; (800ba3c <etharp_free_entry+0x60>)
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4613      	mov	r3, r2
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	4413      	add	r3, r2
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	440b      	add	r3, r1
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ba20:	4906      	ldr	r1, [pc, #24]	; (800ba3c <etharp_free_entry+0x60>)
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4613      	mov	r3, r2
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4413      	add	r3, r2
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	440b      	add	r3, r1
 800ba2e:	3314      	adds	r3, #20
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	200058c8 	.word	0x200058c8

0800ba40 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba46:	2300      	movs	r3, #0
 800ba48:	607b      	str	r3, [r7, #4]
 800ba4a:	e096      	b.n	800bb7a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ba4c:	494f      	ldr	r1, [pc, #316]	; (800bb8c <etharp_tmr+0x14c>)
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	4613      	mov	r3, r2
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	4413      	add	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	440b      	add	r3, r1
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 8086 	beq.w	800bb74 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ba68:	4948      	ldr	r1, [pc, #288]	; (800bb8c <etharp_tmr+0x14c>)
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	4413      	add	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	440b      	add	r3, r1
 800ba76:	3312      	adds	r3, #18
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	b298      	uxth	r0, r3
 800ba7e:	4943      	ldr	r1, [pc, #268]	; (800bb8c <etharp_tmr+0x14c>)
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4413      	add	r3, r2
 800ba88:	00db      	lsls	r3, r3, #3
 800ba8a:	440b      	add	r3, r1
 800ba8c:	3312      	adds	r3, #18
 800ba8e:	4602      	mov	r2, r0
 800ba90:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ba92:	493e      	ldr	r1, [pc, #248]	; (800bb8c <etharp_tmr+0x14c>)
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	4413      	add	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	440b      	add	r3, r1
 800baa0:	3312      	adds	r3, #18
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800baa8:	d215      	bcs.n	800bad6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800baaa:	4938      	ldr	r1, [pc, #224]	; (800bb8c <etharp_tmr+0x14c>)
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4613      	mov	r3, r2
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	4413      	add	r3, r2
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	440b      	add	r3, r1
 800bab8:	3314      	adds	r3, #20
 800baba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800babc:	2b01      	cmp	r3, #1
 800babe:	d10e      	bne.n	800bade <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bac0:	4932      	ldr	r1, [pc, #200]	; (800bb8c <etharp_tmr+0x14c>)
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4613      	mov	r3, r2
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	4413      	add	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	440b      	add	r3, r1
 800bace:	3312      	adds	r3, #18
 800bad0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d903      	bls.n	800bade <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7ff ff80 	bl	800b9dc <etharp_free_entry>
 800badc:	e04a      	b.n	800bb74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bade:	492b      	ldr	r1, [pc, #172]	; (800bb8c <etharp_tmr+0x14c>)
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4613      	mov	r3, r2
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4413      	add	r3, r2
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	440b      	add	r3, r1
 800baec:	3314      	adds	r3, #20
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d10a      	bne.n	800bb0a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800baf4:	4925      	ldr	r1, [pc, #148]	; (800bb8c <etharp_tmr+0x14c>)
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	4613      	mov	r3, r2
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	4413      	add	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	440b      	add	r3, r1
 800bb02:	3314      	adds	r3, #20
 800bb04:	2204      	movs	r2, #4
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	e034      	b.n	800bb74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bb0a:	4920      	ldr	r1, [pc, #128]	; (800bb8c <etharp_tmr+0x14c>)
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	4413      	add	r3, r2
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	440b      	add	r3, r1
 800bb18:	3314      	adds	r3, #20
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d10a      	bne.n	800bb36 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bb20:	491a      	ldr	r1, [pc, #104]	; (800bb8c <etharp_tmr+0x14c>)
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3314      	adds	r3, #20
 800bb30:	2202      	movs	r2, #2
 800bb32:	701a      	strb	r2, [r3, #0]
 800bb34:	e01e      	b.n	800bb74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bb36:	4915      	ldr	r1, [pc, #84]	; (800bb8c <etharp_tmr+0x14c>)
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4413      	add	r3, r2
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	440b      	add	r3, r1
 800bb44:	3314      	adds	r3, #20
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d113      	bne.n	800bb74 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bb4c:	490f      	ldr	r1, [pc, #60]	; (800bb8c <etharp_tmr+0x14c>)
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	4613      	mov	r3, r2
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	4413      	add	r3, r2
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	440b      	add	r3, r1
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4613      	mov	r3, r2
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	4413      	add	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <etharp_tmr+0x14c>)
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4619      	mov	r1, r3
 800bb70:	f000 fe6e 	bl	800c850 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3301      	adds	r3, #1
 800bb78:	607b      	str	r3, [r7, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b09      	cmp	r3, #9
 800bb7e:	f77f af65 	ble.w	800ba4c <etharp_tmr+0xc>
      }
    }
  }
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	200058c8 	.word	0x200058c8

0800bb90 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08a      	sub	sp, #40	; 0x28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bb9e:	230a      	movs	r3, #10
 800bba0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bba2:	230a      	movs	r3, #10
 800bba4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bba6:	230a      	movs	r3, #10
 800bba8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bbae:	230a      	movs	r3, #10
 800bbb0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	83bb      	strh	r3, [r7, #28]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	837b      	strh	r3, [r7, #26]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	843b      	strh	r3, [r7, #32]
 800bbc2:	e0ae      	b.n	800bd22 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bbc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbc8:	49a6      	ldr	r1, [pc, #664]	; (800be64 <etharp_find_entry+0x2d4>)
 800bbca:	4613      	mov	r3, r2
 800bbcc:	005b      	lsls	r3, r3, #1
 800bbce:	4413      	add	r3, r2
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	440b      	add	r3, r1
 800bbd4:	3314      	adds	r3, #20
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bbda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bbde:	2b0a      	cmp	r3, #10
 800bbe0:	d105      	bne.n	800bbee <etharp_find_entry+0x5e>
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bbe8:	8c3b      	ldrh	r3, [r7, #32]
 800bbea:	847b      	strh	r3, [r7, #34]	; 0x22
 800bbec:	e095      	b.n	800bd1a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8092 	beq.w	800bd1a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d009      	beq.n	800bc10 <etharp_find_entry+0x80>
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d806      	bhi.n	800bc10 <etharp_find_entry+0x80>
 800bc02:	4b99      	ldr	r3, [pc, #612]	; (800be68 <etharp_find_entry+0x2d8>)
 800bc04:	f240 1223 	movw	r2, #291	; 0x123
 800bc08:	4998      	ldr	r1, [pc, #608]	; (800be6c <etharp_find_entry+0x2dc>)
 800bc0a:	4899      	ldr	r0, [pc, #612]	; (800be70 <etharp_find_entry+0x2e0>)
 800bc0c:	f002 faa0 	bl	800e150 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d020      	beq.n	800bc58 <etharp_find_entry+0xc8>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6819      	ldr	r1, [r3, #0]
 800bc1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc1e:	4891      	ldr	r0, [pc, #580]	; (800be64 <etharp_find_entry+0x2d4>)
 800bc20:	4613      	mov	r3, r2
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	4413      	add	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4403      	add	r3, r0
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4299      	cmp	r1, r3
 800bc30:	d112      	bne.n	800bc58 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00c      	beq.n	800bc52 <etharp_find_entry+0xc2>
 800bc38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc3c:	4989      	ldr	r1, [pc, #548]	; (800be64 <etharp_find_entry+0x2d4>)
 800bc3e:	4613      	mov	r3, r2
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	4413      	add	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	440b      	add	r3, r1
 800bc48:	3308      	adds	r3, #8
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d102      	bne.n	800bc58 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bc52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc56:	e100      	b.n	800be5a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d140      	bne.n	800bce0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bc5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc62:	4980      	ldr	r1, [pc, #512]	; (800be64 <etharp_find_entry+0x2d4>)
 800bc64:	4613      	mov	r3, r2
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	4413      	add	r3, r2
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	440b      	add	r3, r1
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d01a      	beq.n	800bcaa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bc74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc78:	497a      	ldr	r1, [pc, #488]	; (800be64 <etharp_find_entry+0x2d4>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	3312      	adds	r3, #18
 800bc86:	881b      	ldrh	r3, [r3, #0]
 800bc88:	8bba      	ldrh	r2, [r7, #28]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d845      	bhi.n	800bd1a <etharp_find_entry+0x18a>
            old_queue = i;
 800bc8e:	8c3b      	ldrh	r3, [r7, #32]
 800bc90:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bc92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc96:	4973      	ldr	r1, [pc, #460]	; (800be64 <etharp_find_entry+0x2d4>)
 800bc98:	4613      	mov	r3, r2
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	4413      	add	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	440b      	add	r3, r1
 800bca2:	3312      	adds	r3, #18
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	83bb      	strh	r3, [r7, #28]
 800bca8:	e037      	b.n	800bd1a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bcaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcae:	496d      	ldr	r1, [pc, #436]	; (800be64 <etharp_find_entry+0x2d4>)
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	4413      	add	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	440b      	add	r3, r1
 800bcba:	3312      	adds	r3, #18
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	8b7a      	ldrh	r2, [r7, #26]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d82a      	bhi.n	800bd1a <etharp_find_entry+0x18a>
            old_pending = i;
 800bcc4:	8c3b      	ldrh	r3, [r7, #32]
 800bcc6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bcc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bccc:	4965      	ldr	r1, [pc, #404]	; (800be64 <etharp_find_entry+0x2d4>)
 800bcce:	4613      	mov	r3, r2
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3312      	adds	r3, #18
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	837b      	strh	r3, [r7, #26]
 800bcde:	e01c      	b.n	800bd1a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d919      	bls.n	800bd1a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcea:	495e      	ldr	r1, [pc, #376]	; (800be64 <etharp_find_entry+0x2d4>)
 800bcec:	4613      	mov	r3, r2
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	440b      	add	r3, r1
 800bcf6:	3312      	adds	r3, #18
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	8b3a      	ldrh	r2, [r7, #24]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d80c      	bhi.n	800bd1a <etharp_find_entry+0x18a>
            old_stable = i;
 800bd00:	8c3b      	ldrh	r3, [r7, #32]
 800bd02:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bd04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd08:	4956      	ldr	r1, [pc, #344]	; (800be64 <etharp_find_entry+0x2d4>)
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	440b      	add	r3, r1
 800bd14:	3312      	adds	r3, #18
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd1a:	8c3b      	ldrh	r3, [r7, #32]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	843b      	strh	r3, [r7, #32]
 800bd22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	f77f af4c 	ble.w	800bbc4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	f003 0302 	and.w	r3, r3, #2
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d108      	bne.n	800bd48 <etharp_find_entry+0x1b8>
 800bd36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd3a:	2b0a      	cmp	r3, #10
 800bd3c:	d107      	bne.n	800bd4e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bd48:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4c:	e085      	b.n	800be5a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bd4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd52:	2b09      	cmp	r3, #9
 800bd54:	dc02      	bgt.n	800bd5c <etharp_find_entry+0x1cc>
    i = empty;
 800bd56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd58:	843b      	strh	r3, [r7, #32]
 800bd5a:	e039      	b.n	800bdd0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bd5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	dc14      	bgt.n	800bd8e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bd64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd66:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bd68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd6c:	493d      	ldr	r1, [pc, #244]	; (800be64 <etharp_find_entry+0x2d4>)
 800bd6e:	4613      	mov	r3, r2
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	4413      	add	r3, r2
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	440b      	add	r3, r1
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d018      	beq.n	800bdb0 <etharp_find_entry+0x220>
 800bd7e:	4b3a      	ldr	r3, [pc, #232]	; (800be68 <etharp_find_entry+0x2d8>)
 800bd80:	f240 126d 	movw	r2, #365	; 0x16d
 800bd84:	493b      	ldr	r1, [pc, #236]	; (800be74 <etharp_find_entry+0x2e4>)
 800bd86:	483a      	ldr	r0, [pc, #232]	; (800be70 <etharp_find_entry+0x2e0>)
 800bd88:	f002 f9e2 	bl	800e150 <iprintf>
 800bd8c:	e010      	b.n	800bdb0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bd8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bd92:	2b09      	cmp	r3, #9
 800bd94:	dc02      	bgt.n	800bd9c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bd96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd98:	843b      	strh	r3, [r7, #32]
 800bd9a:	e009      	b.n	800bdb0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bd9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bda0:	2b09      	cmp	r3, #9
 800bda2:	dc02      	bgt.n	800bdaa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bda4:	8bfb      	ldrh	r3, [r7, #30]
 800bda6:	843b      	strh	r3, [r7, #32]
 800bda8:	e002      	b.n	800bdb0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800bdae:	e054      	b.n	800be5a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bdb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdb4:	2b09      	cmp	r3, #9
 800bdb6:	dd06      	ble.n	800bdc6 <etharp_find_entry+0x236>
 800bdb8:	4b2b      	ldr	r3, [pc, #172]	; (800be68 <etharp_find_entry+0x2d8>)
 800bdba:	f240 127f 	movw	r2, #383	; 0x17f
 800bdbe:	492e      	ldr	r1, [pc, #184]	; (800be78 <etharp_find_entry+0x2e8>)
 800bdc0:	482b      	ldr	r0, [pc, #172]	; (800be70 <etharp_find_entry+0x2e0>)
 800bdc2:	f002 f9c5 	bl	800e150 <iprintf>
    etharp_free_entry(i);
 800bdc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff fe06 	bl	800b9dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bdd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdd4:	2b09      	cmp	r3, #9
 800bdd6:	dd06      	ble.n	800bde6 <etharp_find_entry+0x256>
 800bdd8:	4b23      	ldr	r3, [pc, #140]	; (800be68 <etharp_find_entry+0x2d8>)
 800bdda:	f240 1283 	movw	r2, #387	; 0x183
 800bdde:	4926      	ldr	r1, [pc, #152]	; (800be78 <etharp_find_entry+0x2e8>)
 800bde0:	4823      	ldr	r0, [pc, #140]	; (800be70 <etharp_find_entry+0x2e0>)
 800bde2:	f002 f9b5 	bl	800e150 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bde6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdea:	491e      	ldr	r1, [pc, #120]	; (800be64 <etharp_find_entry+0x2d4>)
 800bdec:	4613      	mov	r3, r2
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	4413      	add	r3, r2
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	440b      	add	r3, r1
 800bdf6:	3314      	adds	r3, #20
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <etharp_find_entry+0x27c>
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <etharp_find_entry+0x2d8>)
 800be00:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800be04:	491d      	ldr	r1, [pc, #116]	; (800be7c <etharp_find_entry+0x2ec>)
 800be06:	481a      	ldr	r0, [pc, #104]	; (800be70 <etharp_find_entry+0x2e0>)
 800be08:	f002 f9a2 	bl	800e150 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00b      	beq.n	800be2a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800be12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	4812      	ldr	r0, [pc, #72]	; (800be64 <etharp_find_entry+0x2d4>)
 800be1c:	4613      	mov	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	4403      	add	r3, r0
 800be26:	3304      	adds	r3, #4
 800be28:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800be2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be2e:	490d      	ldr	r1, [pc, #52]	; (800be64 <etharp_find_entry+0x2d4>)
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	440b      	add	r3, r1
 800be3a:	3312      	adds	r3, #18
 800be3c:	2200      	movs	r2, #0
 800be3e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800be40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be44:	4907      	ldr	r1, [pc, #28]	; (800be64 <etharp_find_entry+0x2d4>)
 800be46:	4613      	mov	r3, r2
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	4413      	add	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	440b      	add	r3, r1
 800be50:	3308      	adds	r3, #8
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800be56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3728      	adds	r7, #40	; 0x28
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200058c8 	.word	0x200058c8
 800be68:	080118e0 	.word	0x080118e0
 800be6c:	08011918 	.word	0x08011918
 800be70:	08011958 	.word	0x08011958
 800be74:	08011980 	.word	0x08011980
 800be78:	08011998 	.word	0x08011998
 800be7c:	080119ac 	.word	0x080119ac

0800be80 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be94:	2b06      	cmp	r3, #6
 800be96:	d006      	beq.n	800bea6 <etharp_update_arp_entry+0x26>
 800be98:	4b48      	ldr	r3, [pc, #288]	; (800bfbc <etharp_update_arp_entry+0x13c>)
 800be9a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800be9e:	4948      	ldr	r1, [pc, #288]	; (800bfc0 <etharp_update_arp_entry+0x140>)
 800bea0:	4848      	ldr	r0, [pc, #288]	; (800bfc4 <etharp_update_arp_entry+0x144>)
 800bea2:	f002 f955 	bl	800e150 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d012      	beq.n	800bed2 <etharp_update_arp_entry+0x52>
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00e      	beq.n	800bed2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	4618      	mov	r0, r3
 800bebc:	f001 f8fe 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800bec0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d105      	bne.n	800bed2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bece:	2be0      	cmp	r3, #224	; 0xe0
 800bed0:	d102      	bne.n	800bed8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bed2:	f06f 030f 	mvn.w	r3, #15
 800bed6:	e06c      	b.n	800bfb2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bed8:	78fb      	ldrb	r3, [r7, #3]
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4619      	mov	r1, r3
 800bede:	68b8      	ldr	r0, [r7, #8]
 800bee0:	f7ff fe56 	bl	800bb90 <etharp_find_entry>
 800bee4:	4603      	mov	r3, r0
 800bee6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bee8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800beec:	2b00      	cmp	r3, #0
 800beee:	da02      	bge.n	800bef6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bef0:	8afb      	ldrh	r3, [r7, #22]
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	e05d      	b.n	800bfb2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800befa:	4933      	ldr	r1, [pc, #204]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800befc:	4613      	mov	r3, r2
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	4413      	add	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	440b      	add	r3, r1
 800bf06:	3314      	adds	r3, #20
 800bf08:	2202      	movs	r2, #2
 800bf0a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bf0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf10:	492d      	ldr	r1, [pc, #180]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf12:	4613      	mov	r3, r2
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	4413      	add	r3, r2
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	440b      	add	r3, r1
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bf22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	3308      	adds	r3, #8
 800bf30:	4a25      	ldr	r2, [pc, #148]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf32:	4413      	add	r3, r2
 800bf34:	3304      	adds	r3, #4
 800bf36:	2206      	movs	r2, #6
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f002 f8d8 	bl	800e0f0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bf40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf44:	4920      	ldr	r1, [pc, #128]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf46:	4613      	mov	r3, r2
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	440b      	add	r3, r1
 800bf50:	3312      	adds	r3, #18
 800bf52:	2200      	movs	r2, #0
 800bf54:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bf56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf5a:	491b      	ldr	r1, [pc, #108]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	440b      	add	r3, r1
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d021      	beq.n	800bfb0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bf6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf70:	4915      	ldr	r1, [pc, #84]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	440b      	add	r3, r1
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bf80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf84:	4910      	ldr	r1, [pc, #64]	; (800bfc8 <etharp_update_arp_entry+0x148>)
 800bf86:	4613      	mov	r3, r2
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4413      	add	r3, r2
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	440b      	add	r3, r1
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bf9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6939      	ldr	r1, [r7, #16]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f002 f827 	bl	800dff8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f7f9 f9cc 	bl	8005348 <pbuf_free>
  }
  return ERR_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	080118e0 	.word	0x080118e0
 800bfc0:	080119d8 	.word	0x080119d8
 800bfc4:	08011958 	.word	0x08011958
 800bfc8:	200058c8 	.word	0x200058c8

0800bfcc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	e01e      	b.n	800c018 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bfda:	4913      	ldr	r1, [pc, #76]	; (800c028 <etharp_cleanup_netif+0x5c>)
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3314      	adds	r3, #20
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00e      	beq.n	800c012 <etharp_cleanup_netif+0x46>
 800bff4:	490c      	ldr	r1, [pc, #48]	; (800c028 <etharp_cleanup_netif+0x5c>)
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	4613      	mov	r3, r2
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	4413      	add	r3, r2
 800bffe:	00db      	lsls	r3, r3, #3
 800c000:	440b      	add	r3, r1
 800c002:	3308      	adds	r3, #8
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d102      	bne.n	800c012 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f7ff fce5 	bl	800b9dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3301      	adds	r3, #1
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b09      	cmp	r3, #9
 800c01c:	dddd      	ble.n	800bfda <etharp_cleanup_netif+0xe>
    }
  }
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	200058c8 	.word	0x200058c8

0800c02c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c02c:	b5b0      	push	{r4, r5, r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af04      	add	r7, sp, #16
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d107      	bne.n	800c04c <etharp_input+0x20>
 800c03c:	4b3d      	ldr	r3, [pc, #244]	; (800c134 <etharp_input+0x108>)
 800c03e:	f240 228a 	movw	r2, #650	; 0x28a
 800c042:	493d      	ldr	r1, [pc, #244]	; (800c138 <etharp_input+0x10c>)
 800c044:	483d      	ldr	r0, [pc, #244]	; (800c13c <etharp_input+0x110>)
 800c046:	f002 f883 	bl	800e150 <iprintf>
 800c04a:	e06f      	b.n	800c12c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c05c:	d10c      	bne.n	800c078 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c062:	2b06      	cmp	r3, #6
 800c064:	d108      	bne.n	800c078 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	d104      	bne.n	800c078 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c074:	2b08      	cmp	r3, #8
 800c076:	d003      	beq.n	800c080 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7f9 f965 	bl	8005348 <pbuf_free>
    return;
 800c07e:	e055      	b.n	800c12c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	330e      	adds	r3, #14
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3318      	adds	r3, #24
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	3304      	adds	r3, #4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <etharp_input+0x74>
    for_us = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
 800c09e:	e009      	b.n	800c0b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	bf0c      	ite	eq
 800c0ac:	2301      	moveq	r3, #1
 800c0ae:	2300      	movne	r3, #0
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	f103 0208 	add.w	r2, r3, #8
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <etharp_input+0x98>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e000      	b.n	800c0c6 <etharp_input+0x9a>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	f107 010c 	add.w	r1, r7, #12
 800c0ca:	6838      	ldr	r0, [r7, #0]
 800c0cc:	f7ff fed8 	bl	800be80 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	88db      	ldrh	r3, [r3, #6]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0da:	d003      	beq.n	800c0e4 <etharp_input+0xb8>
 800c0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e0:	d01e      	beq.n	800c120 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c0e2:	e020      	b.n	800c126 <etharp_input+0xfa>
      if (for_us) {
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d01c      	beq.n	800c124 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c104:	2102      	movs	r1, #2
 800c106:	9103      	str	r1, [sp, #12]
 800c108:	f107 010c 	add.w	r1, r7, #12
 800c10c:	9102      	str	r1, [sp, #8]
 800c10e:	9201      	str	r2, [sp, #4]
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	462b      	mov	r3, r5
 800c114:	4622      	mov	r2, r4
 800c116:	4601      	mov	r1, r0
 800c118:	6838      	ldr	r0, [r7, #0]
 800c11a:	f000 faeb 	bl	800c6f4 <etharp_raw>
      break;
 800c11e:	e001      	b.n	800c124 <etharp_input+0xf8>
      break;
 800c120:	bf00      	nop
 800c122:	e000      	b.n	800c126 <etharp_input+0xfa>
      break;
 800c124:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7f9 f90e 	bl	8005348 <pbuf_free>
}
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bdb0      	pop	{r4, r5, r7, pc}
 800c132:	bf00      	nop
 800c134:	080118e0 	.word	0x080118e0
 800c138:	08011a30 	.word	0x08011a30
 800c13c:	08011958 	.word	0x08011958

0800c140 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4613      	mov	r3, r2
 800c14c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c14e:	79fa      	ldrb	r2, [r7, #7]
 800c150:	4944      	ldr	r1, [pc, #272]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	440b      	add	r3, r1
 800c15c:	3314      	adds	r3, #20
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d806      	bhi.n	800c172 <etharp_output_to_arp_index+0x32>
 800c164:	4b40      	ldr	r3, [pc, #256]	; (800c268 <etharp_output_to_arp_index+0x128>)
 800c166:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c16a:	4940      	ldr	r1, [pc, #256]	; (800c26c <etharp_output_to_arp_index+0x12c>)
 800c16c:	4840      	ldr	r0, [pc, #256]	; (800c270 <etharp_output_to_arp_index+0x130>)
 800c16e:	f001 ffef 	bl	800e150 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c172:	79fa      	ldrb	r2, [r7, #7]
 800c174:	493b      	ldr	r1, [pc, #236]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c176:	4613      	mov	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	3314      	adds	r3, #20
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b02      	cmp	r3, #2
 800c186:	d153      	bne.n	800c230 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c188:	79fa      	ldrb	r2, [r7, #7]
 800c18a:	4936      	ldr	r1, [pc, #216]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	3312      	adds	r3, #18
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c19e:	d919      	bls.n	800c1d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c1a0:	79fa      	ldrb	r2, [r7, #7]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	4a2e      	ldr	r2, [pc, #184]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c1ac:	4413      	add	r3, r2
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 fb4c 	bl	800c850 <etharp_request>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d138      	bne.n	800c230 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c1be:	79fa      	ldrb	r2, [r7, #7]
 800c1c0:	4928      	ldr	r1, [pc, #160]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	4413      	add	r3, r2
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	440b      	add	r3, r1
 800c1cc:	3314      	adds	r3, #20
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e02d      	b.n	800c230 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4923      	ldr	r1, [pc, #140]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c1d8:	4613      	mov	r3, r2
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	4413      	add	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	440b      	add	r3, r1
 800c1e2:	3312      	adds	r3, #18
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c1ea:	d321      	bcc.n	800c230 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c1ec:	79fa      	ldrb	r2, [r7, #7]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4413      	add	r3, r2
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	4a1b      	ldr	r2, [pc, #108]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c1f8:	4413      	add	r3, r2
 800c1fa:	1d19      	adds	r1, r3, #4
 800c1fc:	79fa      	ldrb	r2, [r7, #7]
 800c1fe:	4613      	mov	r3, r2
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	4413      	add	r3, r2
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	3308      	adds	r3, #8
 800c208:	4a16      	ldr	r2, [pc, #88]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c20a:	4413      	add	r3, r2
 800c20c:	3304      	adds	r3, #4
 800c20e:	461a      	mov	r2, r3
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 fafb 	bl	800c80c <etharp_request_dst>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d109      	bne.n	800c230 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	4911      	ldr	r1, [pc, #68]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c220:	4613      	mov	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	3314      	adds	r3, #20
 800c22c:	2203      	movs	r2, #3
 800c22e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c236:	79fa      	ldrb	r2, [r7, #7]
 800c238:	4613      	mov	r3, r2
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	3308      	adds	r3, #8
 800c242:	4a08      	ldr	r2, [pc, #32]	; (800c264 <etharp_output_to_arp_index+0x124>)
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c24c:	9200      	str	r2, [sp, #0]
 800c24e:	460a      	mov	r2, r1
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f001 fed0 	bl	800dff8 <ethernet_output>
 800c258:	4603      	mov	r3, r0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	200058c8 	.word	0x200058c8
 800c268:	080118e0 	.word	0x080118e0
 800c26c:	08011a50 	.word	0x08011a50
 800c270:	08011958 	.word	0x08011958

0800c274 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08a      	sub	sp, #40	; 0x28
 800c278:	af02      	add	r7, sp, #8
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <etharp_output+0x24>
 800c28a:	4b73      	ldr	r3, [pc, #460]	; (800c458 <etharp_output+0x1e4>)
 800c28c:	f240 321e 	movw	r2, #798	; 0x31e
 800c290:	4972      	ldr	r1, [pc, #456]	; (800c45c <etharp_output+0x1e8>)
 800c292:	4873      	ldr	r0, [pc, #460]	; (800c460 <etharp_output+0x1ec>)
 800c294:	f001 ff5c 	bl	800e150 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <etharp_output+0x38>
 800c29e:	4b6e      	ldr	r3, [pc, #440]	; (800c458 <etharp_output+0x1e4>)
 800c2a0:	f240 321f 	movw	r2, #799	; 0x31f
 800c2a4:	496f      	ldr	r1, [pc, #444]	; (800c464 <etharp_output+0x1f0>)
 800c2a6:	486e      	ldr	r0, [pc, #440]	; (800c460 <etharp_output+0x1ec>)
 800c2a8:	f001 ff52 	bl	800e150 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <etharp_output+0x4c>
 800c2b2:	4b69      	ldr	r3, [pc, #420]	; (800c458 <etharp_output+0x1e4>)
 800c2b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c2b8:	496b      	ldr	r1, [pc, #428]	; (800c468 <etharp_output+0x1f4>)
 800c2ba:	4869      	ldr	r0, [pc, #420]	; (800c460 <etharp_output+0x1ec>)
 800c2bc:	f001 ff48 	bl	800e150 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68f9      	ldr	r1, [r7, #12]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fef8 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c2d2:	4b66      	ldr	r3, [pc, #408]	; (800c46c <etharp_output+0x1f8>)
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e0af      	b.n	800c438 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2e0:	2be0      	cmp	r3, #224	; 0xe0
 800c2e2:	d118      	bne.n	800c316 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c2ec:	235e      	movs	r3, #94	; 0x5e
 800c2ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3302      	adds	r3, #2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3303      	adds	r3, #3
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c30e:	f107 0310 	add.w	r3, r7, #16
 800c312:	61fb      	str	r3, [r7, #28]
 800c314:	e090      	b.n	800c438 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3304      	adds	r3, #4
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	405a      	eors	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3308      	adds	r3, #8
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4013      	ands	r3, r2
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d012      	beq.n	800c354 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c334:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c338:	4293      	cmp	r3, r2
 800c33a:	d00b      	beq.n	800c354 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	330c      	adds	r3, #12
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	330c      	adds	r3, #12
 800c34a:	61bb      	str	r3, [r7, #24]
 800c34c:	e002      	b.n	800c354 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c34e:	f06f 0303 	mvn.w	r3, #3
 800c352:	e07d      	b.n	800c450 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c354:	4b46      	ldr	r3, [pc, #280]	; (800c470 <etharp_output+0x1fc>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	4619      	mov	r1, r3
 800c35a:	4a46      	ldr	r2, [pc, #280]	; (800c474 <etharp_output+0x200>)
 800c35c:	460b      	mov	r3, r1
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	440b      	add	r3, r1
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4413      	add	r3, r2
 800c366:	3314      	adds	r3, #20
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d925      	bls.n	800c3ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c36e:	4b40      	ldr	r3, [pc, #256]	; (800c470 <etharp_output+0x1fc>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	4619      	mov	r1, r3
 800c374:	4a3f      	ldr	r2, [pc, #252]	; (800c474 <etharp_output+0x200>)
 800c376:	460b      	mov	r3, r1
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	440b      	add	r3, r1
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	4413      	add	r3, r2
 800c380:	3308      	adds	r3, #8
 800c382:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	429a      	cmp	r2, r3
 800c388:	d117      	bne.n	800c3ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b38      	ldr	r3, [pc, #224]	; (800c470 <etharp_output+0x1fc>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	4937      	ldr	r1, [pc, #220]	; (800c474 <etharp_output+0x200>)
 800c396:	4603      	mov	r3, r0
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4403      	add	r3, r0
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	440b      	add	r3, r1
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d108      	bne.n	800c3ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c3a8:	4b31      	ldr	r3, [pc, #196]	; (800c470 <etharp_output+0x1fc>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fec5 	bl	800c140 <etharp_output_to_arp_index>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	e04a      	b.n	800c450 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	75fb      	strb	r3, [r7, #23]
 800c3be:	e031      	b.n	800c424 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3c0:	7dfa      	ldrb	r2, [r7, #23]
 800c3c2:	492c      	ldr	r1, [pc, #176]	; (800c474 <etharp_output+0x200>)
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	4413      	add	r3, r2
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	440b      	add	r3, r1
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d923      	bls.n	800c41e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c3d6:	7dfa      	ldrb	r2, [r7, #23]
 800c3d8:	4926      	ldr	r1, [pc, #152]	; (800c474 <etharp_output+0x200>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	440b      	add	r3, r1
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d117      	bne.n	800c41e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	6819      	ldr	r1, [r3, #0]
 800c3f2:	7dfa      	ldrb	r2, [r7, #23]
 800c3f4:	481f      	ldr	r0, [pc, #124]	; (800c474 <etharp_output+0x200>)
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	4403      	add	r3, r0
 800c400:	3304      	adds	r3, #4
 800c402:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c404:	4299      	cmp	r1, r3
 800c406:	d10a      	bne.n	800c41e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c408:	4a19      	ldr	r2, [pc, #100]	; (800c470 <etharp_output+0x1fc>)
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	461a      	mov	r2, r3
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff fe93 	bl	800c140 <etharp_output_to_arp_index>
 800c41a:	4603      	mov	r3, r0
 800c41c:	e018      	b.n	800c450 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	3301      	adds	r3, #1
 800c422:	75fb      	strb	r3, [r7, #23]
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b09      	cmp	r3, #9
 800c428:	d9ca      	bls.n	800c3c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	69b9      	ldr	r1, [r7, #24]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 f822 	bl	800c478 <etharp_query>
 800c434:	4603      	mov	r3, r0
 800c436:	e00b      	b.n	800c450 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c43e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f001 fdd5 	bl	800dff8 <ethernet_output>
 800c44e:	4603      	mov	r3, r0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3720      	adds	r7, #32
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	080118e0 	.word	0x080118e0
 800c45c:	08011a30 	.word	0x08011a30
 800c460:	08011958 	.word	0x08011958
 800c464:	08011a80 	.word	0x08011a80
 800c468:	08011a20 	.word	0x08011a20
 800c46c:	08012088 	.word	0x08012088
 800c470:	200059b8 	.word	0x200059b8
 800c474:	200058c8 	.word	0x200058c8

0800c478 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08c      	sub	sp, #48	; 0x30
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	3326      	adds	r3, #38	; 0x26
 800c488:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c48a:	23ff      	movs	r3, #255	; 0xff
 800c48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c490:	2300      	movs	r3, #0
 800c492:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68f9      	ldr	r1, [r7, #12]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 fe0e 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10c      	bne.n	800c4c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4ae:	2be0      	cmp	r3, #224	; 0xe0
 800c4b0:	d006      	beq.n	800c4c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4c0:	f06f 030f 	mvn.w	r3, #15
 800c4c4:	e101      	b.n	800c6ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	68b8      	ldr	r0, [r7, #8]
 800c4cc:	f7ff fb60 	bl	800bb90 <etharp_find_entry>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c4d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	da02      	bge.n	800c4e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c4dc:	8a7b      	ldrh	r3, [r7, #18]
 800c4de:	b25b      	sxtb	r3, r3
 800c4e0:	e0f3      	b.n	800c6ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c4e2:	8a7b      	ldrh	r3, [r7, #18]
 800c4e4:	2b7e      	cmp	r3, #126	; 0x7e
 800c4e6:	d906      	bls.n	800c4f6 <etharp_query+0x7e>
 800c4e8:	4b7a      	ldr	r3, [pc, #488]	; (800c6d4 <etharp_query+0x25c>)
 800c4ea:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c4ee:	497a      	ldr	r1, [pc, #488]	; (800c6d8 <etharp_query+0x260>)
 800c4f0:	487a      	ldr	r0, [pc, #488]	; (800c6dc <etharp_query+0x264>)
 800c4f2:	f001 fe2d 	bl	800e150 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c4f6:	8a7b      	ldrh	r3, [r7, #18]
 800c4f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c4fa:	7c7a      	ldrb	r2, [r7, #17]
 800c4fc:	4978      	ldr	r1, [pc, #480]	; (800c6e0 <etharp_query+0x268>)
 800c4fe:	4613      	mov	r3, r2
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	4413      	add	r3, r2
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	440b      	add	r3, r1
 800c508:	3314      	adds	r3, #20
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d115      	bne.n	800c53c <etharp_query+0xc4>
    is_new_entry = 1;
 800c510:	2301      	movs	r3, #1
 800c512:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c514:	7c7a      	ldrb	r2, [r7, #17]
 800c516:	4972      	ldr	r1, [pc, #456]	; (800c6e0 <etharp_query+0x268>)
 800c518:	4613      	mov	r3, r2
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	4413      	add	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	440b      	add	r3, r1
 800c522:	3314      	adds	r3, #20
 800c524:	2201      	movs	r2, #1
 800c526:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c528:	7c7a      	ldrb	r2, [r7, #17]
 800c52a:	496d      	ldr	r1, [pc, #436]	; (800c6e0 <etharp_query+0x268>)
 800c52c:	4613      	mov	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	4413      	add	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	440b      	add	r3, r1
 800c536:	3308      	adds	r3, #8
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c53c:	7c7a      	ldrb	r2, [r7, #17]
 800c53e:	4968      	ldr	r1, [pc, #416]	; (800c6e0 <etharp_query+0x268>)
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	440b      	add	r3, r1
 800c54a:	3314      	adds	r3, #20
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d011      	beq.n	800c576 <etharp_query+0xfe>
 800c552:	7c7a      	ldrb	r2, [r7, #17]
 800c554:	4962      	ldr	r1, [pc, #392]	; (800c6e0 <etharp_query+0x268>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3314      	adds	r3, #20
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d806      	bhi.n	800c576 <etharp_query+0xfe>
 800c568:	4b5a      	ldr	r3, [pc, #360]	; (800c6d4 <etharp_query+0x25c>)
 800c56a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c56e:	495d      	ldr	r1, [pc, #372]	; (800c6e4 <etharp_query+0x26c>)
 800c570:	485a      	ldr	r0, [pc, #360]	; (800c6dc <etharp_query+0x264>)
 800c572:	f001 fded 	bl	800e150 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d102      	bne.n	800c582 <etharp_query+0x10a>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10c      	bne.n	800c59c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 f963 	bl	800c850 <etharp_request>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <etharp_query+0x124>
      return result;
 800c596:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c59a:	e096      	b.n	800c6ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <etharp_query+0x138>
 800c5a2:	4b4c      	ldr	r3, [pc, #304]	; (800c6d4 <etharp_query+0x25c>)
 800c5a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c5a8:	494f      	ldr	r1, [pc, #316]	; (800c6e8 <etharp_query+0x270>)
 800c5aa:	484c      	ldr	r0, [pc, #304]	; (800c6dc <etharp_query+0x264>)
 800c5ac:	f001 fdd0 	bl	800e150 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c5b0:	7c7a      	ldrb	r2, [r7, #17]
 800c5b2:	494b      	ldr	r1, [pc, #300]	; (800c6e0 <etharp_query+0x268>)
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	4413      	add	r3, r2
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	440b      	add	r3, r1
 800c5be:	3314      	adds	r3, #20
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d917      	bls.n	800c5f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c5c6:	4a49      	ldr	r2, [pc, #292]	; (800c6ec <etharp_query+0x274>)
 800c5c8:	7c7b      	ldrb	r3, [r7, #17]
 800c5ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c5cc:	7c7a      	ldrb	r2, [r7, #17]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	4a41      	ldr	r2, [pc, #260]	; (800c6e0 <etharp_query+0x268>)
 800c5da:	4413      	add	r3, r2
 800c5dc:	3304      	adds	r3, #4
 800c5de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5e2:	9200      	str	r2, [sp, #0]
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f001 fd05 	bl	800dff8 <ethernet_output>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5f4:	e067      	b.n	800c6c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c5f6:	7c7a      	ldrb	r2, [r7, #17]
 800c5f8:	4939      	ldr	r1, [pc, #228]	; (800c6e0 <etharp_query+0x268>)
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	4413      	add	r3, r2
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	440b      	add	r3, r1
 800c604:	3314      	adds	r3, #20
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d15c      	bne.n	800c6c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c614:	e01c      	b.n	800c650 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	895a      	ldrh	r2, [r3, #10]
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	891b      	ldrh	r3, [r3, #8]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d10a      	bne.n	800c638 <etharp_query+0x1c0>
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d006      	beq.n	800c638 <etharp_query+0x1c0>
 800c62a:	4b2a      	ldr	r3, [pc, #168]	; (800c6d4 <etharp_query+0x25c>)
 800c62c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c630:	492f      	ldr	r1, [pc, #188]	; (800c6f0 <etharp_query+0x278>)
 800c632:	482a      	ldr	r0, [pc, #168]	; (800c6dc <etharp_query+0x264>)
 800c634:	f001 fd8c 	bl	800e150 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	7b1b      	ldrb	r3, [r3, #12]
 800c63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <etharp_query+0x1d2>
        copy_needed = 1;
 800c644:	2301      	movs	r3, #1
 800c646:	61bb      	str	r3, [r7, #24]
        break;
 800c648:	e005      	b.n	800c656 <etharp_query+0x1de>
      }
      p = p->next;
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1df      	bne.n	800c616 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d007      	beq.n	800c66c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c662:	200e      	movs	r0, #14
 800c664:	f7f9 f96e 	bl	8005944 <pbuf_clone>
 800c668:	61f8      	str	r0, [r7, #28]
 800c66a:	e004      	b.n	800c676 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	f7f8 ff09 	bl	8005488 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d021      	beq.n	800c6c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c67c:	7c7a      	ldrb	r2, [r7, #17]
 800c67e:	4918      	ldr	r1, [pc, #96]	; (800c6e0 <etharp_query+0x268>)
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	440b      	add	r3, r1
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00a      	beq.n	800c6a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c690:	7c7a      	ldrb	r2, [r7, #17]
 800c692:	4913      	ldr	r1, [pc, #76]	; (800c6e0 <etharp_query+0x268>)
 800c694:	4613      	mov	r3, r2
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	4413      	add	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	440b      	add	r3, r1
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f8 fe51 	bl	8005348 <pbuf_free>
      }
      arp_table[i].q = p;
 800c6a6:	7c7a      	ldrb	r2, [r7, #17]
 800c6a8:	490d      	ldr	r1, [pc, #52]	; (800c6e0 <etharp_query+0x268>)
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	4413      	add	r3, r2
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	440b      	add	r3, r1
 800c6b4:	69fa      	ldr	r2, [r7, #28]
 800c6b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6be:	e002      	b.n	800c6c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c6c0:	23ff      	movs	r3, #255	; 0xff
 800c6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c6c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3728      	adds	r7, #40	; 0x28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	080118e0 	.word	0x080118e0
 800c6d8:	08011a8c 	.word	0x08011a8c
 800c6dc:	08011958 	.word	0x08011958
 800c6e0:	200058c8 	.word	0x200058c8
 800c6e4:	08011a9c 	.word	0x08011a9c
 800c6e8:	08011a80 	.word	0x08011a80
 800c6ec:	200059b8 	.word	0x200059b8
 800c6f0:	08011ac4 	.word	0x08011ac4

0800c6f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af02      	add	r7, sp, #8
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <etharp_raw+0x26>
 800c70c:	4b3a      	ldr	r3, [pc, #232]	; (800c7f8 <etharp_raw+0x104>)
 800c70e:	f240 4257 	movw	r2, #1111	; 0x457
 800c712:	493a      	ldr	r1, [pc, #232]	; (800c7fc <etharp_raw+0x108>)
 800c714:	483a      	ldr	r0, [pc, #232]	; (800c800 <etharp_raw+0x10c>)
 800c716:	f001 fd1b 	bl	800e150 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c71a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c71e:	211c      	movs	r1, #28
 800c720:	200e      	movs	r0, #14
 800c722:	f7f8 fb2d 	bl	8004d80 <pbuf_alloc>
 800c726:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c72e:	f04f 33ff 	mov.w	r3, #4294967295
 800c732:	e05d      	b.n	800c7f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	895b      	ldrh	r3, [r3, #10]
 800c738:	2b1b      	cmp	r3, #27
 800c73a:	d806      	bhi.n	800c74a <etharp_raw+0x56>
 800c73c:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <etharp_raw+0x104>)
 800c73e:	f240 4262 	movw	r2, #1122	; 0x462
 800c742:	4930      	ldr	r1, [pc, #192]	; (800c804 <etharp_raw+0x110>)
 800c744:	482e      	ldr	r0, [pc, #184]	; (800c800 <etharp_raw+0x10c>)
 800c746:	f001 fd03 	bl	800e150 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c750:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c752:	4618      	mov	r0, r3
 800c754:	f7f7 fae0 	bl	8003d18 <lwip_htons>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c766:	2b06      	cmp	r3, #6
 800c768:	d006      	beq.n	800c778 <etharp_raw+0x84>
 800c76a:	4b23      	ldr	r3, [pc, #140]	; (800c7f8 <etharp_raw+0x104>)
 800c76c:	f240 4269 	movw	r2, #1129	; 0x469
 800c770:	4925      	ldr	r1, [pc, #148]	; (800c808 <etharp_raw+0x114>)
 800c772:	4823      	ldr	r0, [pc, #140]	; (800c800 <etharp_raw+0x10c>)
 800c774:	f001 fcec 	bl	800e150 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	3308      	adds	r3, #8
 800c77c:	2206      	movs	r2, #6
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	4618      	mov	r0, r3
 800c782:	f001 fcb5 	bl	800e0f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	3312      	adds	r3, #18
 800c78a:	2206      	movs	r2, #6
 800c78c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c78e:	4618      	mov	r0, r3
 800c790:	f001 fcae 	bl	800e0f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	330e      	adds	r3, #14
 800c798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79a:	6812      	ldr	r2, [r2, #0]
 800c79c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	3318      	adds	r3, #24
 800c7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a4:	6812      	ldr	r2, [r2, #0]
 800c7a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f042 0201 	orr.w	r2, r2, #1
 800c7b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f042 0208 	orr.w	r2, r2, #8
 800c7be:	709a      	strb	r2, [r3, #2]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2206      	movs	r2, #6
 800c7c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2204      	movs	r2, #4
 800c7ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c7d0:	f640 0306 	movw	r3, #2054	; 0x806
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	69b9      	ldr	r1, [r7, #24]
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f001 fc0b 	bl	800dff8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c7e2:	69b8      	ldr	r0, [r7, #24]
 800c7e4:	f7f8 fdb0 	bl	8005348 <pbuf_free>
  p = NULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c7ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3720      	adds	r7, #32
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	080118e0 	.word	0x080118e0
 800c7fc:	08011a30 	.word	0x08011a30
 800c800:	08011958 	.word	0x08011958
 800c804:	08011ae0 	.word	0x08011ae0
 800c808:	08011b14 	.word	0x08011b14

0800c80c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af04      	add	r7, sp, #16
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c828:	2201      	movs	r2, #1
 800c82a:	9203      	str	r2, [sp, #12]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	9202      	str	r2, [sp, #8]
 800c830:	4a06      	ldr	r2, [pc, #24]	; (800c84c <etharp_request_dst+0x40>)
 800c832:	9201      	str	r2, [sp, #4]
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	4603      	mov	r3, r0
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff ff5a 	bl	800c6f4 <etharp_raw>
 800c840:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	08012090 	.word	0x08012090

0800c850 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c85a:	4a05      	ldr	r2, [pc, #20]	; (800c870 <etharp_request+0x20>)
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7ff ffd4 	bl	800c80c <etharp_request_dst>
 800c864:	4603      	mov	r3, r0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	08012088 	.word	0x08012088

0800c874 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08e      	sub	sp, #56	; 0x38
 800c878:	af04      	add	r7, sp, #16
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c87e:	4b79      	ldr	r3, [pc, #484]	; (800ca64 <icmp_input+0x1f0>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	b2db      	uxtb	r3, r3
 800c892:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c896:	2b13      	cmp	r3, #19
 800c898:	f240 80cd 	bls.w	800ca36 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	895b      	ldrh	r3, [r3, #10]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	f240 80ca 	bls.w	800ca3a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c8b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 80b7 	beq.w	800ca28 <icmp_input+0x1b4>
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	f040 80b7 	bne.w	800ca2e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c8c0:	4b69      	ldr	r3, [pc, #420]	; (800ca68 <icmp_input+0x1f4>)
 800c8c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c8c4:	4b67      	ldr	r3, [pc, #412]	; (800ca64 <icmp_input+0x1f0>)
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8cc:	2be0      	cmp	r3, #224	; 0xe0
 800c8ce:	f000 80bb 	beq.w	800ca48 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c8d2:	4b64      	ldr	r3, [pc, #400]	; (800ca64 <icmp_input+0x1f0>)
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	4a63      	ldr	r2, [pc, #396]	; (800ca64 <icmp_input+0x1f0>)
 800c8d8:	6812      	ldr	r2, [r2, #0]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 fbed 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 80b1 	bne.w	800ca4c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	891b      	ldrh	r3, [r3, #8]
 800c8ee:	2b07      	cmp	r3, #7
 800c8f0:	f240 80a5 	bls.w	800ca3e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c8f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8f6:	330e      	adds	r3, #14
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7f8 fc8e 	bl	800521c <pbuf_add_header>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d04b      	beq.n	800c99e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	891a      	ldrh	r2, [r3, #8]
 800c90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c90c:	4413      	add	r3, r2
 800c90e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	891b      	ldrh	r3, [r3, #8]
 800c914:	8b7a      	ldrh	r2, [r7, #26]
 800c916:	429a      	cmp	r2, r3
 800c918:	f0c0 809a 	bcc.w	800ca50 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c91c:	8b7b      	ldrh	r3, [r7, #26]
 800c91e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c922:	4619      	mov	r1, r3
 800c924:	200e      	movs	r0, #14
 800c926:	f7f8 fa2b 	bl	8004d80 <pbuf_alloc>
 800c92a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 8090 	beq.w	800ca54 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	895b      	ldrh	r3, [r3, #10]
 800c938:	461a      	mov	r2, r3
 800c93a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c93c:	3308      	adds	r3, #8
 800c93e:	429a      	cmp	r2, r3
 800c940:	d203      	bcs.n	800c94a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f7f8 fd00 	bl	8005348 <pbuf_free>
          goto icmperr;
 800c948:	e085      	b.n	800ca56 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c952:	4618      	mov	r0, r3
 800c954:	f001 fbcc 	bl	800e0f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c95a:	4619      	mov	r1, r3
 800c95c:	6978      	ldr	r0, [r7, #20]
 800c95e:	f7f8 fc6d 	bl	800523c <pbuf_remove_header>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c968:	4b40      	ldr	r3, [pc, #256]	; (800ca6c <icmp_input+0x1f8>)
 800c96a:	22b6      	movs	r2, #182	; 0xb6
 800c96c:	4940      	ldr	r1, [pc, #256]	; (800ca70 <icmp_input+0x1fc>)
 800c96e:	4841      	ldr	r0, [pc, #260]	; (800ca74 <icmp_input+0x200>)
 800c970:	f001 fbee 	bl	800e150 <iprintf>
          pbuf_free(r);
 800c974:	6978      	ldr	r0, [r7, #20]
 800c976:	f7f8 fce7 	bl	8005348 <pbuf_free>
          goto icmperr;
 800c97a:	e06c      	b.n	800ca56 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c97c:	6879      	ldr	r1, [r7, #4]
 800c97e:	6978      	ldr	r0, [r7, #20]
 800c980:	f7f8 fe0a 	bl	8005598 <pbuf_copy>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c98a:	6978      	ldr	r0, [r7, #20]
 800c98c:	f7f8 fcdc 	bl	8005348 <pbuf_free>
          goto icmperr;
 800c990:	e061      	b.n	800ca56 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7f8 fcd8 	bl	8005348 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	607b      	str	r3, [r7, #4]
 800c99c:	e00f      	b.n	800c9be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c99e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9a0:	330e      	adds	r3, #14
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7f8 fc49 	bl	800523c <pbuf_remove_header>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d006      	beq.n	800c9be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c9b0:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <icmp_input+0x1f8>)
 800c9b2:	22c7      	movs	r2, #199	; 0xc7
 800c9b4:	4930      	ldr	r1, [pc, #192]	; (800ca78 <icmp_input+0x204>)
 800c9b6:	482f      	ldr	r0, [pc, #188]	; (800ca74 <icmp_input+0x200>)
 800c9b8:	f001 fbca 	bl	800e150 <iprintf>
          goto icmperr;
 800c9bc:	e04b      	b.n	800ca56 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c9c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f8 fc27 	bl	800521c <pbuf_add_header>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d12b      	bne.n	800ca2c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c9e2:	4b20      	ldr	r3, [pc, #128]	; (800ca64 <icmp_input+0x1f0>)
 800c9e4:	691a      	ldr	r2, [r3, #16]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	709a      	strb	r2, [r3, #2]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	22ff      	movs	r2, #255	; 0xff
 800c9fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	729a      	strb	r2, [r3, #10]
 800ca06:	2200      	movs	r2, #0
 800ca08:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	2300      	movs	r3, #0
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	23ff      	movs	r3, #255	; 0xff
 800ca18:	2200      	movs	r2, #0
 800ca1a:	69f9      	ldr	r1, [r7, #28]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fa75 	bl	800cf0c <ip4_output_if>
 800ca22:	4603      	mov	r3, r0
 800ca24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ca26:	e001      	b.n	800ca2c <icmp_input+0x1b8>
      break;
 800ca28:	bf00      	nop
 800ca2a:	e000      	b.n	800ca2e <icmp_input+0x1ba>
      break;
 800ca2c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7f8 fc8a 	bl	8005348 <pbuf_free>
  return;
 800ca34:	e013      	b.n	800ca5e <icmp_input+0x1ea>
    goto lenerr;
 800ca36:	bf00      	nop
 800ca38:	e002      	b.n	800ca40 <icmp_input+0x1cc>
    goto lenerr;
 800ca3a:	bf00      	nop
 800ca3c:	e000      	b.n	800ca40 <icmp_input+0x1cc>
        goto lenerr;
 800ca3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7f8 fc81 	bl	8005348 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ca46:	e00a      	b.n	800ca5e <icmp_input+0x1ea>
        goto icmperr;
 800ca48:	bf00      	nop
 800ca4a:	e004      	b.n	800ca56 <icmp_input+0x1e2>
        goto icmperr;
 800ca4c:	bf00      	nop
 800ca4e:	e002      	b.n	800ca56 <icmp_input+0x1e2>
          goto icmperr;
 800ca50:	bf00      	nop
 800ca52:	e000      	b.n	800ca56 <icmp_input+0x1e2>
          goto icmperr;
 800ca54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7f8 fc76 	bl	8005348 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ca5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ca5e:	3728      	adds	r7, #40	; 0x28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20000138 	.word	0x20000138
 800ca68:	2000014c 	.word	0x2000014c
 800ca6c:	08011b58 	.word	0x08011b58
 800ca70:	08011b90 	.word	0x08011b90
 800ca74:	08011bc8 	.word	0x08011bc8
 800ca78:	08011bf0 	.word	0x08011bf0

0800ca7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2103      	movs	r1, #3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f814 	bl	800cabc <icmp_send_response>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800caa8:	78fb      	ldrb	r3, [r7, #3]
 800caaa:	461a      	mov	r2, r3
 800caac:	210b      	movs	r1, #11
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f804 	bl	800cabc <icmp_send_response>
}
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	; 0x30
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
 800cac8:	4613      	mov	r3, r2
 800caca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cacc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cad0:	2124      	movs	r1, #36	; 0x24
 800cad2:	2022      	movs	r0, #34	; 0x22
 800cad4:	f7f8 f954 	bl	8004d80 <pbuf_alloc>
 800cad8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d04c      	beq.n	800cb7a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	895b      	ldrh	r3, [r3, #10]
 800cae4:	2b23      	cmp	r3, #35	; 0x23
 800cae6:	d806      	bhi.n	800caf6 <icmp_send_response+0x3a>
 800cae8:	4b26      	ldr	r3, [pc, #152]	; (800cb84 <icmp_send_response+0xc8>)
 800caea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800caee:	4926      	ldr	r1, [pc, #152]	; (800cb88 <icmp_send_response+0xcc>)
 800caf0:	4826      	ldr	r0, [pc, #152]	; (800cb8c <icmp_send_response+0xd0>)
 800caf2:	f001 fb2d 	bl	800e150 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	78fa      	ldrb	r2, [r7, #3]
 800cb06:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	78ba      	ldrb	r2, [r7, #2]
 800cb0c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2200      	movs	r2, #0
 800cb12:	711a      	strb	r2, [r3, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	719a      	strb	r2, [r3, #6]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f103 0008 	add.w	r0, r3, #8
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	221c      	movs	r2, #28
 800cb30:	4619      	mov	r1, r3
 800cb32:	f001 fadd 	bl	800e0f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cb3c:	f107 030c 	add.w	r3, r7, #12
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 f825 	bl	800cb90 <ip4_route>
 800cb46:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d011      	beq.n	800cb72 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2200      	movs	r2, #0
 800cb52:	709a      	strb	r2, [r3, #2]
 800cb54:	2200      	movs	r2, #0
 800cb56:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cb58:	f107 020c 	add.w	r2, r7, #12
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	9302      	str	r3, [sp, #8]
 800cb60:	2301      	movs	r3, #1
 800cb62:	9301      	str	r3, [sp, #4]
 800cb64:	2300      	movs	r3, #0
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	23ff      	movs	r3, #255	; 0xff
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	69f8      	ldr	r0, [r7, #28]
 800cb6e:	f000 f9cd 	bl	800cf0c <ip4_output_if>
  }
  pbuf_free(q);
 800cb72:	69f8      	ldr	r0, [r7, #28]
 800cb74:	f7f8 fbe8 	bl	8005348 <pbuf_free>
 800cb78:	e000      	b.n	800cb7c <icmp_send_response+0xc0>
    return;
 800cb7a:	bf00      	nop
}
 800cb7c:	3720      	adds	r7, #32
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	08011b58 	.word	0x08011b58
 800cb88:	08011c24 	.word	0x08011c24
 800cb8c:	08011bc8 	.word	0x08011bc8

0800cb90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cb98:	4b33      	ldr	r3, [pc, #204]	; (800cc68 <ip4_route+0xd8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e036      	b.n	800cc0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d02b      	beq.n	800cc08 <ip4_route+0x78>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbb6:	089b      	lsrs	r3, r3, #2
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d022      	beq.n	800cc08 <ip4_route+0x78>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01d      	beq.n	800cc08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	405a      	eors	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4013      	ands	r3, r2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	e038      	b.n	800cc5a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d108      	bne.n	800cc08 <ip4_route+0x78>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d101      	bne.n	800cc08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	e028      	b.n	800cc5a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1c5      	bne.n	800cba0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc14:	4b15      	ldr	r3, [pc, #84]	; (800cc6c <ip4_route+0xdc>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d01a      	beq.n	800cc52 <ip4_route+0xc2>
 800cc1c:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <ip4_route+0xdc>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d012      	beq.n	800cc52 <ip4_route+0xc2>
 800cc2c:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <ip4_route+0xdc>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00a      	beq.n	800cc52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cc3c:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <ip4_route+0xdc>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3304      	adds	r3, #4
 800cc42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc50:	d101      	bne.n	800cc56 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e001      	b.n	800cc5a <ip4_route+0xca>
  }

  return netif_default;
 800cc56:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <ip4_route+0xdc>)
 800cc58:	681b      	ldr	r3, [r3, #0]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	2000585c 	.word	0x2000585c
 800cc6c:	20005860 	.word	0x20005860

0800cc70 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d016      	beq.n	800ccb6 <ip4_input_accept+0x46>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d011      	beq.n	800ccb6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc92:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <ip4_input_accept+0x50>)
 800cc94:	695a      	ldr	r2, [r3, #20]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3304      	adds	r3, #4
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d008      	beq.n	800ccb2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <ip4_input_accept+0x50>)
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	6879      	ldr	r1, [r7, #4]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fa08 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800ccac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e000      	b.n	800ccb8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20000138 	.word	0x20000138

0800ccc4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	091b      	lsrs	r3, r3, #4
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d004      	beq.n	800ccea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7f8 fb31 	bl	8005348 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	e107      	b.n	800cefa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f003 030f 	and.w	r3, r3, #15
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7f7 f809 	bl	8003d18 <lwip_htons>
 800cd06:	4603      	mov	r3, r0
 800cd08:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	891b      	ldrh	r3, [r3, #8]
 800cd0e:	89ba      	ldrh	r2, [r7, #12]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d204      	bcs.n	800cd1e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cd14:	89bb      	ldrh	r3, [r7, #12]
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7f8 f98f 	bl	800503c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	895b      	ldrh	r3, [r3, #10]
 800cd22:	89fa      	ldrh	r2, [r7, #14]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d807      	bhi.n	800cd38 <ip4_input+0x74>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	891b      	ldrh	r3, [r3, #8]
 800cd2c:	89ba      	ldrh	r2, [r7, #12]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d802      	bhi.n	800cd38 <ip4_input+0x74>
 800cd32:	89fb      	ldrh	r3, [r7, #14]
 800cd34:	2b13      	cmp	r3, #19
 800cd36:	d804      	bhi.n	800cd42 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7f8 fb05 	bl	8005348 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e0db      	b.n	800cefa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	4a6f      	ldr	r2, [pc, #444]	; (800cf04 <ip4_input+0x240>)
 800cd48:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	4a6d      	ldr	r2, [pc, #436]	; (800cf04 <ip4_input+0x240>)
 800cd50:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd52:	4b6c      	ldr	r3, [pc, #432]	; (800cf04 <ip4_input+0x240>)
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd5a:	2be0      	cmp	r3, #224	; 0xe0
 800cd5c:	d112      	bne.n	800cd84 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd64:	f003 0301 	and.w	r3, r3, #1
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d007      	beq.n	800cd7e <ip4_input+0xba>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	3304      	adds	r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <ip4_input+0xba>
      netif = inp;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	613b      	str	r3, [r7, #16]
 800cd7c:	e02a      	b.n	800cdd4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	613b      	str	r3, [r7, #16]
 800cd82:	e027      	b.n	800cdd4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cd84:	6838      	ldr	r0, [r7, #0]
 800cd86:	f7ff ff73 	bl	800cc70 <ip4_input_accept>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <ip4_input+0xd2>
      netif = inp;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	613b      	str	r3, [r7, #16]
 800cd94:	e01e      	b.n	800cdd4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cd9a:	4b5a      	ldr	r3, [pc, #360]	; (800cf04 <ip4_input+0x240>)
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b7f      	cmp	r3, #127	; 0x7f
 800cda2:	d017      	beq.n	800cdd4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cda4:	4b58      	ldr	r3, [pc, #352]	; (800cf08 <ip4_input+0x244>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	613b      	str	r3, [r7, #16]
 800cdaa:	e00e      	b.n	800cdca <ip4_input+0x106>
          if (netif == inp) {
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d006      	beq.n	800cdc2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cdb4:	6938      	ldr	r0, [r7, #16]
 800cdb6:	f7ff ff5b 	bl	800cc70 <ip4_input_accept>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d108      	bne.n	800cdd2 <ip4_input+0x10e>
 800cdc0:	e000      	b.n	800cdc4 <ip4_input+0x100>
            continue;
 800cdc2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	613b      	str	r3, [r7, #16]
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1ed      	bne.n	800cdac <ip4_input+0xe8>
 800cdd0:	e000      	b.n	800cdd4 <ip4_input+0x110>
            break;
 800cdd2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cdd4:	4b4b      	ldr	r3, [pc, #300]	; (800cf04 <ip4_input+0x240>)
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f96e 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d105      	bne.n	800cdf2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cde6:	4b47      	ldr	r3, [pc, #284]	; (800cf04 <ip4_input+0x240>)
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cdee:	2be0      	cmp	r3, #224	; 0xe0
 800cdf0:	d104      	bne.n	800cdfc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7f8 faa8 	bl	8005348 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	e07e      	b.n	800cefa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d104      	bne.n	800ce0c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7f8 faa0 	bl	8005348 <pbuf_free>
    return ERR_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	e076      	b.n	800cefa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	88db      	ldrh	r3, [r3, #6]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	461a      	mov	r2, r3
 800ce14:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ce18:	4013      	ands	r3, r2
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fd22 	bl	800d868 <ip4_reass>
 800ce24:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <ip4_input+0x16c>
      return ERR_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e064      	b.n	800cefa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ce36:	4a33      	ldr	r2, [pc, #204]	; (800cf04 <ip4_input+0x240>)
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ce3c:	4a31      	ldr	r2, [pc, #196]	; (800cf04 <ip4_input+0x240>)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ce42:	4a30      	ldr	r2, [pc, #192]	; (800cf04 <ip4_input+0x240>)
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	f003 030f 	and.w	r3, r3, #15
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	4b2a      	ldr	r3, [pc, #168]	; (800cf04 <ip4_input+0x240>)
 800ce5a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ce5c:	89fb      	ldrh	r3, [r7, #14]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f8 f9eb 	bl	800523c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	7a5b      	ldrb	r3, [r3, #9]
 800ce6a:	2b11      	cmp	r3, #17
 800ce6c:	d006      	beq.n	800ce7c <ip4_input+0x1b8>
 800ce6e:	2b11      	cmp	r3, #17
 800ce70:	dc13      	bgt.n	800ce9a <ip4_input+0x1d6>
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d00c      	beq.n	800ce90 <ip4_input+0x1cc>
 800ce76:	2b06      	cmp	r3, #6
 800ce78:	d005      	beq.n	800ce86 <ip4_input+0x1c2>
 800ce7a:	e00e      	b.n	800ce9a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7fe f8e6 	bl	800b050 <udp_input>
        break;
 800ce84:	e026      	b.n	800ced4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7fa f927 	bl	80070dc <tcp_input>
        break;
 800ce8e:	e021      	b.n	800ced4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fcee 	bl	800c874 <icmp_input>
        break;
 800ce98:	e01c      	b.n	800ced4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	; (800cf04 <ip4_input+0x240>)
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	6939      	ldr	r1, [r7, #16]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f000 f90b 	bl	800d0bc <ip4_addr_isbroadcast_u32>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10f      	bne.n	800cecc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ceac:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <ip4_input+0x240>)
 800ceae:	695b      	ldr	r3, [r3, #20]
 800ceb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ceb4:	2be0      	cmp	r3, #224	; 0xe0
 800ceb6:	d009      	beq.n	800cecc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ceb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7f8 fa2f 	bl	8005322 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cec4:	2102      	movs	r1, #2
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fdd8 	bl	800ca7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7f8 fa3b 	bl	8005348 <pbuf_free>
        break;
 800ced2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ced4:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <ip4_input+0x240>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <ip4_input+0x240>)
 800cedc:	2200      	movs	r2, #0
 800cede:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cee0:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <ip4_input+0x240>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cee6:	4b07      	ldr	r3, [pc, #28]	; (800cf04 <ip4_input+0x240>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ceec:	4b05      	ldr	r3, [pc, #20]	; (800cf04 <ip4_input+0x240>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cef2:	4b04      	ldr	r3, [pc, #16]	; (800cf04 <ip4_input+0x240>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000138 	.word	0x20000138
 800cf08:	2000585c 	.word	0x2000585c

0800cf0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08a      	sub	sp, #40	; 0x28
 800cf10:	af04      	add	r7, sp, #16
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d009      	beq.n	800cf38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <ip4_output_if+0x26>
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	3304      	adds	r3, #4
 800cf36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cf38:	78fa      	ldrb	r2, [r7, #3]
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	9302      	str	r3, [sp, #8]
 800cf3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf42:	9301      	str	r3, [sp, #4]
 800cf44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	6979      	ldr	r1, [r7, #20]
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f805 	bl	800cf60 <ip4_output_if_src>
 800cf56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	7b9b      	ldrb	r3, [r3, #14]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d006      	beq.n	800cf84 <ip4_output_if_src+0x24>
 800cf76:	4b4b      	ldr	r3, [pc, #300]	; (800d0a4 <ip4_output_if_src+0x144>)
 800cf78:	f44f 7255 	mov.w	r2, #852	; 0x354
 800cf7c:	494a      	ldr	r1, [pc, #296]	; (800d0a8 <ip4_output_if_src+0x148>)
 800cf7e:	484b      	ldr	r0, [pc, #300]	; (800d0ac <ip4_output_if_src+0x14c>)
 800cf80:	f001 f8e6 	bl	800e150 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d060      	beq.n	800d04c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cf8a:	2314      	movs	r3, #20
 800cf8c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cf8e:	2114      	movs	r1, #20
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7f8 f943 	bl	800521c <pbuf_add_header>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cf9c:	f06f 0301 	mvn.w	r3, #1
 800cfa0:	e07c      	b.n	800d09c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	895b      	ldrh	r3, [r3, #10]
 800cfac:	2b13      	cmp	r3, #19
 800cfae:	d806      	bhi.n	800cfbe <ip4_output_if_src+0x5e>
 800cfb0:	4b3c      	ldr	r3, [pc, #240]	; (800d0a4 <ip4_output_if_src+0x144>)
 800cfb2:	f44f 7262 	mov.w	r2, #904	; 0x388
 800cfb6:	493e      	ldr	r1, [pc, #248]	; (800d0b0 <ip4_output_if_src+0x150>)
 800cfb8:	483c      	ldr	r0, [pc, #240]	; (800d0ac <ip4_output_if_src+0x14c>)
 800cfba:	f001 f8c9 	bl	800e150 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	78fa      	ldrb	r2, [r7, #3]
 800cfc2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cfca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cfd4:	8b7b      	ldrh	r3, [r7, #26]
 800cfd6:	089b      	lsrs	r3, r3, #2
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cfec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	891b      	ldrh	r3, [r3, #8]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7f6 fe90 	bl	8003d18 <lwip_htons>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	2200      	movs	r2, #0
 800d004:	719a      	strb	r2, [r3, #6]
 800d006:	2200      	movs	r2, #0
 800d008:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d00a:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <ip4_output_if_src+0x154>)
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f6 fe82 	bl	8003d18 <lwip_htons>
 800d014:	4603      	mov	r3, r0
 800d016:	461a      	mov	r2, r3
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d01c:	4b25      	ldr	r3, [pc, #148]	; (800d0b4 <ip4_output_if_src+0x154>)
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	3301      	adds	r3, #1
 800d022:	b29a      	uxth	r2, r3
 800d024:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <ip4_output_if_src+0x154>)
 800d026:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d104      	bne.n	800d038 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d02e:	4b22      	ldr	r3, [pc, #136]	; (800d0b8 <ip4_output_if_src+0x158>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	60da      	str	r2, [r3, #12]
 800d036:	e003      	b.n	800d040 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	2200      	movs	r2, #0
 800d044:	729a      	strb	r2, [r3, #10]
 800d046:	2200      	movs	r2, #0
 800d048:	72da      	strb	r2, [r3, #11]
 800d04a:	e00f      	b.n	800d06c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	2b13      	cmp	r3, #19
 800d052:	d802      	bhi.n	800d05a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d054:	f06f 0301 	mvn.w	r3, #1
 800d058:	e020      	b.n	800d09c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d066:	f107 0314 	add.w	r3, r7, #20
 800d06a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <ip4_output_if_src+0x12e>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	891a      	ldrh	r2, [r3, #8]
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d906      	bls.n	800d08e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 fde3 	bl	800dc50 <ip4_frag>
 800d08a:	4603      	mov	r3, r0
 800d08c:	e006      	b.n	800d09c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	68f9      	ldr	r1, [r7, #12]
 800d096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d098:	4798      	blx	r3
 800d09a:	4603      	mov	r3, r0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3720      	adds	r7, #32
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	08011c50 	.word	0x08011c50
 800d0a8:	08011c84 	.word	0x08011c84
 800d0ac:	08011c90 	.word	0x08011c90
 800d0b0:	08011cb8 	.word	0x08011cb8
 800d0b4:	200059ba 	.word	0x200059ba
 800d0b8:	08012084 	.word	0x08012084

0800d0bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d0:	d002      	beq.n	800d0d8 <ip4_addr_isbroadcast_u32+0x1c>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e02a      	b.n	800d132 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0e2:	f003 0302 	and.w	r3, r3, #2
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e021      	b.n	800d132 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d101      	bne.n	800d0fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e019      	b.n	800d132 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	3304      	adds	r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	405a      	eors	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	3308      	adds	r3, #8
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4013      	ands	r3, r2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10d      	bne.n	800d130 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	3308      	adds	r3, #8
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	43da      	mvns	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d128:	429a      	cmp	r2, r3
 800d12a:	d101      	bne.n	800d130 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d12c:	2301      	movs	r3, #1
 800d12e:	e000      	b.n	800d132 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d130:	2300      	movs	r3, #0
  }
}
 800d132:	4618      	mov	r0, r3
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
	...

0800d140 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d148:	2210      	movs	r2, #16
 800d14a:	4904      	ldr	r1, [pc, #16]	; (800d15c <ip4addr_ntoa+0x1c>)
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f807 	bl	800d160 <ip4addr_ntoa_r>
 800d152:	4603      	mov	r3, r0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200059bc 	.word	0x200059bc

0800d160 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d160:	b480      	push	{r7}
 800d162:	b08d      	sub	sp, #52	; 0x34
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800d17a:	f107 0318 	add.w	r3, r7, #24
 800d17e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d180:	2300      	movs	r3, #0
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d186:	e058      	b.n	800d23a <ip4addr_ntoa_r+0xda>
    i = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	781a      	ldrb	r2, [r3, #0]
 800d192:	4b32      	ldr	r3, [pc, #200]	; (800d25c <ip4addr_ntoa_r+0xfc>)
 800d194:	fba3 1302 	umull	r1, r3, r3, r2
 800d198:	08d9      	lsrs	r1, r3, #3
 800d19a:	460b      	mov	r3, r1
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	440b      	add	r3, r1
 800d1a0:	005b      	lsls	r3, r3, #1
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	4a2c      	ldr	r2, [pc, #176]	; (800d25c <ip4addr_ntoa_r+0xfc>)
 800d1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b0:	08db      	lsrs	r3, r3, #3
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800d1b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	7ffb      	ldrb	r3, [r7, #31]
 800d1c6:	3330      	adds	r3, #48	; 0x30
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800d1ce:	443b      	add	r3, r7
 800d1d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1d8      	bne.n	800d18e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800d1dc:	e011      	b.n	800d202 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	623a      	str	r2, [r7, #32]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	dc01      	bgt.n	800d1ee <ip4addr_ntoa_r+0x8e>
        return NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e030      	b.n	800d250 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800d1ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	1c59      	adds	r1, r3, #1
 800d1f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d1f8:	3230      	adds	r2, #48	; 0x30
 800d1fa:	443a      	add	r2, r7
 800d1fc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800d200:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800d202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d206:	1e5a      	subs	r2, r3, #1
 800d208:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e6      	bne.n	800d1de <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	623a      	str	r2, [r7, #32]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	dc01      	bgt.n	800d220 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	e017      	b.n	800d250 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d226:	222e      	movs	r2, #46	; 0x2e
 800d228:	701a      	strb	r2, [r3, #0]
    ap++;
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	3301      	adds	r3, #1
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d234:	3301      	adds	r3, #1
 800d236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d9a2      	bls.n	800d188 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	3b01      	subs	r3, #1
 800d246:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	2200      	movs	r2, #0
 800d24c:	701a      	strb	r2, [r3, #0]
  return buf;
 800d24e:	68bb      	ldr	r3, [r7, #8]
}
 800d250:	4618      	mov	r0, r3
 800d252:	3734      	adds	r7, #52	; 0x34
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	cccccccd 	.word	0xcccccccd

0800d260 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d26a:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <ip_reass_tmr+0x54>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d270:	e018      	b.n	800d2a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	7fdb      	ldrb	r3, [r3, #31]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00b      	beq.n	800d292 <ip_reass_tmr+0x32>
      r->timer--;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	7fdb      	ldrb	r3, [r3, #31]
 800d27e:	3b01      	subs	r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e008      	b.n	800d2a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f80a 	bl	800d2b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1e3      	bne.n	800d272 <ip_reass_tmr+0x12>
    }
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	bf00      	nop
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	200059cc 	.word	0x200059cc

0800d2b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d105      	bne.n	800d2da <ip_reass_free_complete_datagram+0x22>
 800d2ce:	4b45      	ldr	r3, [pc, #276]	; (800d3e4 <ip_reass_free_complete_datagram+0x12c>)
 800d2d0:	22ab      	movs	r2, #171	; 0xab
 800d2d2:	4945      	ldr	r1, [pc, #276]	; (800d3e8 <ip_reass_free_complete_datagram+0x130>)
 800d2d4:	4845      	ldr	r0, [pc, #276]	; (800d3ec <ip_reass_free_complete_datagram+0x134>)
 800d2d6:	f000 ff3b 	bl	800e150 <iprintf>
  if (prev != NULL) {
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d005      	beq.n	800d2f6 <ip_reass_free_complete_datagram+0x3e>
 800d2ea:	4b3e      	ldr	r3, [pc, #248]	; (800d3e4 <ip_reass_free_complete_datagram+0x12c>)
 800d2ec:	22ad      	movs	r2, #173	; 0xad
 800d2ee:	4940      	ldr	r1, [pc, #256]	; (800d3f0 <ip_reass_free_complete_datagram+0x138>)
 800d2f0:	483e      	ldr	r0, [pc, #248]	; (800d3ec <ip_reass_free_complete_datagram+0x134>)
 800d2f2:	f000 ff2d 	bl	800e150 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	889b      	ldrh	r3, [r3, #4]
 800d302:	b29b      	uxth	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d12a      	bne.n	800d35e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	6858      	ldr	r0, [r3, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3308      	adds	r3, #8
 800d31e:	2214      	movs	r2, #20
 800d320:	4619      	mov	r1, r3
 800d322:	f000 fee5 	bl	800e0f0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d326:	2101      	movs	r1, #1
 800d328:	69b8      	ldr	r0, [r7, #24]
 800d32a:	f7ff fbb7 	bl	800ca9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d32e:	69b8      	ldr	r0, [r7, #24]
 800d330:	f7f8 f892 	bl	8005458 <pbuf_clen>
 800d334:	4603      	mov	r3, r0
 800d336:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d338:	8bfa      	ldrh	r2, [r7, #30]
 800d33a:	8a7b      	ldrh	r3, [r7, #18]
 800d33c:	4413      	add	r3, r2
 800d33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d342:	db05      	blt.n	800d350 <ip_reass_free_complete_datagram+0x98>
 800d344:	4b27      	ldr	r3, [pc, #156]	; (800d3e4 <ip_reass_free_complete_datagram+0x12c>)
 800d346:	22bc      	movs	r2, #188	; 0xbc
 800d348:	492a      	ldr	r1, [pc, #168]	; (800d3f4 <ip_reass_free_complete_datagram+0x13c>)
 800d34a:	4828      	ldr	r0, [pc, #160]	; (800d3ec <ip_reass_free_complete_datagram+0x134>)
 800d34c:	f000 ff00 	bl	800e150 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d350:	8bfa      	ldrh	r2, [r7, #30]
 800d352:	8a7b      	ldrh	r3, [r7, #18]
 800d354:	4413      	add	r3, r2
 800d356:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d358:	69b8      	ldr	r0, [r7, #24]
 800d35a:	f7f7 fff5 	bl	8005348 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d364:	e01f      	b.n	800d3a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7f8 f86e 	bl	8005458 <pbuf_clen>
 800d37c:	4603      	mov	r3, r0
 800d37e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d380:	8bfa      	ldrh	r2, [r7, #30]
 800d382:	8a7b      	ldrh	r3, [r7, #18]
 800d384:	4413      	add	r3, r2
 800d386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d38a:	db05      	blt.n	800d398 <ip_reass_free_complete_datagram+0xe0>
 800d38c:	4b15      	ldr	r3, [pc, #84]	; (800d3e4 <ip_reass_free_complete_datagram+0x12c>)
 800d38e:	22cc      	movs	r2, #204	; 0xcc
 800d390:	4918      	ldr	r1, [pc, #96]	; (800d3f4 <ip_reass_free_complete_datagram+0x13c>)
 800d392:	4816      	ldr	r0, [pc, #88]	; (800d3ec <ip_reass_free_complete_datagram+0x134>)
 800d394:	f000 fedc 	bl	800e150 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d398:	8bfa      	ldrh	r2, [r7, #30]
 800d39a:	8a7b      	ldrh	r3, [r7, #18]
 800d39c:	4413      	add	r3, r2
 800d39e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f7f7 ffd1 	bl	8005348 <pbuf_free>
  while (p != NULL) {
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1dc      	bne.n	800d366 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f8c2 	bl	800d538 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d3b4:	4b10      	ldr	r3, [pc, #64]	; (800d3f8 <ip_reass_free_complete_datagram+0x140>)
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	8bfa      	ldrh	r2, [r7, #30]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d905      	bls.n	800d3ca <ip_reass_free_complete_datagram+0x112>
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <ip_reass_free_complete_datagram+0x12c>)
 800d3c0:	22d2      	movs	r2, #210	; 0xd2
 800d3c2:	490e      	ldr	r1, [pc, #56]	; (800d3fc <ip_reass_free_complete_datagram+0x144>)
 800d3c4:	4809      	ldr	r0, [pc, #36]	; (800d3ec <ip_reass_free_complete_datagram+0x134>)
 800d3c6:	f000 fec3 	bl	800e150 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <ip_reass_free_complete_datagram+0x140>)
 800d3cc:	881a      	ldrh	r2, [r3, #0]
 800d3ce:	8bfb      	ldrh	r3, [r7, #30]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <ip_reass_free_complete_datagram+0x140>)
 800d3d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d3d8:	8bfb      	ldrh	r3, [r7, #30]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3720      	adds	r7, #32
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	08011ce8 	.word	0x08011ce8
 800d3e8:	08011d24 	.word	0x08011d24
 800d3ec:	08011d30 	.word	0x08011d30
 800d3f0:	08011d58 	.word	0x08011d58
 800d3f4:	08011d6c 	.word	0x08011d6c
 800d3f8:	200059d0 	.word	0x200059d0
 800d3fc:	08011d8c 	.word	0x08011d8c

0800d400 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d412:	2300      	movs	r3, #0
 800d414:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d416:	2300      	movs	r3, #0
 800d418:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d41e:	4b28      	ldr	r3, [pc, #160]	; (800d4c0 <ip_reass_remove_oldest_datagram+0xc0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d424:	e030      	b.n	800d488 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	695a      	ldr	r2, [r3, #20]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d10c      	bne.n	800d44c <ip_reass_remove_oldest_datagram+0x4c>
 800d432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d106      	bne.n	800d44c <ip_reass_remove_oldest_datagram+0x4c>
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	899a      	ldrh	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	889b      	ldrh	r3, [r3, #4]
 800d446:	b29b      	uxth	r3, r3
 800d448:	429a      	cmp	r2, r3
 800d44a:	d014      	beq.n	800d476 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3301      	adds	r3, #1
 800d450:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d104      	bne.n	800d462 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	61bb      	str	r3, [r7, #24]
 800d460:	e009      	b.n	800d476 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	7fda      	ldrb	r2, [r3, #31]
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	7fdb      	ldrb	r3, [r3, #31]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d803      	bhi.n	800d476 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d470:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d480:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1cb      	bne.n	800d426 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d008      	beq.n	800d4a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d494:	69b9      	ldr	r1, [r7, #24]
 800d496:	6a38      	ldr	r0, [r7, #32]
 800d498:	f7ff ff0e 	bl	800d2b8 <ip_reass_free_complete_datagram>
 800d49c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	da02      	bge.n	800d4b4 <ip_reass_remove_oldest_datagram+0xb4>
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	dcac      	bgt.n	800d40e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d4b4:	697b      	ldr	r3, [r7, #20]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3728      	adds	r7, #40	; 0x28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	200059cc 	.word	0x200059cc

0800d4c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d4ce:	2004      	movs	r0, #4
 800d4d0:	f7f7 f878 	bl	80045c4 <memp_malloc>
 800d4d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d110      	bne.n	800d4fe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff ff8e 	bl	800d400 <ip_reass_remove_oldest_datagram>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	dc03      	bgt.n	800d4f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d4ec:	2004      	movs	r0, #4
 800d4ee:	f7f7 f869 	bl	80045c4 <memp_malloc>
 800d4f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e016      	b.n	800d52c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d4fe:	2220      	movs	r2, #32
 800d500:	2100      	movs	r1, #0
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 fe1c 	bl	800e140 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	220f      	movs	r2, #15
 800d50c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d50e:	4b09      	ldr	r3, [pc, #36]	; (800d534 <ip_reass_enqueue_new_datagram+0x70>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d516:	4a07      	ldr	r2, [pc, #28]	; (800d534 <ip_reass_enqueue_new_datagram+0x70>)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	3308      	adds	r3, #8
 800d520:	2214      	movs	r2, #20
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fde3 	bl	800e0f0 <memcpy>
  return ipr;
 800d52a:	68fb      	ldr	r3, [r7, #12]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	200059cc 	.word	0x200059cc

0800d538 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d542:	4b10      	ldr	r3, [pc, #64]	; (800d584 <ip_reass_dequeue_datagram+0x4c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d104      	bne.n	800d556 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a0c      	ldr	r2, [pc, #48]	; (800d584 <ip_reass_dequeue_datagram+0x4c>)
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	e00d      	b.n	800d572 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <ip_reass_dequeue_datagram+0x32>
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <ip_reass_dequeue_datagram+0x50>)
 800d55e:	f240 1245 	movw	r2, #325	; 0x145
 800d562:	490a      	ldr	r1, [pc, #40]	; (800d58c <ip_reass_dequeue_datagram+0x54>)
 800d564:	480a      	ldr	r0, [pc, #40]	; (800d590 <ip_reass_dequeue_datagram+0x58>)
 800d566:	f000 fdf3 	bl	800e150 <iprintf>
    prev->next = ipr->next;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	2004      	movs	r0, #4
 800d576:	f7f7 f871 	bl	800465c <memp_free>
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200059cc 	.word	0x200059cc
 800d588:	08011ce8 	.word	0x08011ce8
 800d58c:	08011db0 	.word	0x08011db0
 800d590:	08011d30 	.word	0x08011d30

0800d594 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08c      	sub	sp, #48	; 0x30
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7f6 fbaf 	bl	8003d18 <lwip_htons>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f003 030f 	and.w	r3, r3, #15
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d5cc:	7e7b      	ldrb	r3, [r7, #25]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	8b7a      	ldrh	r2, [r7, #26]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d202      	bcs.n	800d5dc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	e135      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d5dc:	7e7b      	ldrb	r3, [r7, #25]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	8b7a      	ldrh	r2, [r7, #26]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	88db      	ldrh	r3, [r3, #6]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7f6 fb93 	bl	8003d18 <lwip_htons>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	2200      	movs	r2, #0
 800d608:	701a      	strb	r2, [r3, #0]
 800d60a:	2200      	movs	r2, #0
 800d60c:	705a      	strb	r2, [r3, #1]
 800d60e:	2200      	movs	r2, #0
 800d610:	709a      	strb	r2, [r3, #2]
 800d612:	2200      	movs	r2, #0
 800d614:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	8afa      	ldrh	r2, [r7, #22]
 800d61a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d61c:	8afa      	ldrh	r2, [r7, #22]
 800d61e:	8b7b      	ldrh	r3, [r7, #26]
 800d620:	4413      	add	r3, r2
 800d622:	b29a      	uxth	r2, r3
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	88db      	ldrh	r3, [r3, #6]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	8afa      	ldrh	r2, [r7, #22]
 800d630:	429a      	cmp	r2, r3
 800d632:	d902      	bls.n	800d63a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295
 800d638:	e106      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	627b      	str	r3, [r7, #36]	; 0x24
 800d640:	e068      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64a:	889b      	ldrh	r3, [r3, #4]
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	889b      	ldrh	r3, [r3, #4]
 800d652:	b29b      	uxth	r3, r3
 800d654:	429a      	cmp	r2, r3
 800d656:	d235      	bcs.n	800d6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	2b00      	cmp	r3, #0
 800d662:	d020      	beq.n	800d6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	889b      	ldrh	r3, [r3, #4]
 800d668:	b29a      	uxth	r2, r3
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66c:	88db      	ldrh	r3, [r3, #6]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	429a      	cmp	r2, r3
 800d672:	d307      	bcc.n	800d684 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	88db      	ldrh	r3, [r3, #6]
 800d678:	b29a      	uxth	r2, r3
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	889b      	ldrh	r3, [r3, #4]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	429a      	cmp	r2, r3
 800d682:	d902      	bls.n	800d68a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d684:	f04f 33ff 	mov.w	r3, #4294967295
 800d688:	e0de      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d692:	88db      	ldrh	r3, [r3, #6]
 800d694:	b29a      	uxth	r2, r3
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	889b      	ldrh	r3, [r3, #4]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d03d      	beq.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d6a4:	e03a      	b.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a8:	88db      	ldrh	r3, [r3, #6]
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	889b      	ldrh	r3, [r3, #4]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d902      	bls.n	800d6bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ba:	e0c5      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	605a      	str	r2, [r3, #4]
      break;
 800d6c2:	e02b      	b.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	889b      	ldrh	r3, [r3, #4]
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	889b      	ldrh	r3, [r3, #4]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d102      	bne.n	800d6da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	e0b6      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	889b      	ldrh	r3, [r3, #4]
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	88db      	ldrh	r3, [r3, #6]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d202      	bcs.n	800d6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ee:	e0ab      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d009      	beq.n	800d70a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	88db      	ldrh	r3, [r3, #6]
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	889b      	ldrh	r3, [r3, #4]
 800d700:	b29b      	uxth	r3, r3
 800d702:	429a      	cmp	r2, r3
 800d704:	d001      	beq.n	800d70a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d193      	bne.n	800d642 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d71a:	e000      	b.n	800d71e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d71c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	2b00      	cmp	r3, #0
 800d722:	d12d      	bne.n	800d780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	2b00      	cmp	r3, #0
 800d728:	d01c      	beq.n	800d764 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	88db      	ldrh	r3, [r3, #6]
 800d72e:	b29a      	uxth	r2, r3
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	889b      	ldrh	r3, [r3, #4]
 800d734:	b29b      	uxth	r3, r3
 800d736:	429a      	cmp	r2, r3
 800d738:	d906      	bls.n	800d748 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d73a:	4b45      	ldr	r3, [pc, #276]	; (800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d73c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d740:	4944      	ldr	r1, [pc, #272]	; (800d854 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d742:	4845      	ldr	r0, [pc, #276]	; (800d858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d744:	f000 fd04 	bl	800e150 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	88db      	ldrh	r3, [r3, #6]
 800d752:	b29a      	uxth	r2, r3
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	889b      	ldrh	r3, [r3, #4]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d010      	beq.n	800d780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	623b      	str	r3, [r7, #32]
 800d762:	e00d      	b.n	800d780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d006      	beq.n	800d77a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d76c:	4b38      	ldr	r3, [pc, #224]	; (800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d76e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d772:	493a      	ldr	r1, [pc, #232]	; (800d85c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d774:	4838      	ldr	r0, [pc, #224]	; (800d858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d776:	f000 fceb 	bl	800e150 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	7f9b      	ldrb	r3, [r3, #30]
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d059      	beq.n	800d846 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d04f      	beq.n	800d838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d006      	beq.n	800d7ae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	889b      	ldrh	r3, [r3, #4]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	623b      	str	r3, [r7, #32]
 800d7b2:	e041      	b.n	800d838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d7be:	e012      	b.n	800d7e6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c8:	88db      	ldrh	r3, [r3, #6]
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ce:	889b      	ldrh	r3, [r3, #4]
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d002      	beq.n	800d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	623b      	str	r3, [r7, #32]
            break;
 800d7da:	e007      	b.n	800d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1e9      	bne.n	800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d022      	beq.n	800d838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d7fa:	4b15      	ldr	r3, [pc, #84]	; (800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7fc:	f240 12df 	movw	r2, #479	; 0x1df
 800d800:	4917      	ldr	r1, [pc, #92]	; (800d860 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d802:	4815      	ldr	r0, [pc, #84]	; (800d858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d804:	f000 fca4 	bl	800e150 <iprintf>
          LWIP_ASSERT("sanity check",
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d810:	429a      	cmp	r2, r3
 800d812:	d106      	bne.n	800d822 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d814:	4b0e      	ldr	r3, [pc, #56]	; (800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d816:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d81a:	4911      	ldr	r1, [pc, #68]	; (800d860 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d81c:	480e      	ldr	r0, [pc, #56]	; (800d858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d81e:	f000 fc97 	bl	800e150 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d006      	beq.n	800d838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d82a:	4b09      	ldr	r3, [pc, #36]	; (800d850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d82c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d830:	490c      	ldr	r1, [pc, #48]	; (800d864 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d832:	4809      	ldr	r0, [pc, #36]	; (800d858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d834:	f000 fc8c 	bl	800e150 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d838:	6a3b      	ldr	r3, [r7, #32]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	bf14      	ite	ne
 800d83e:	2301      	movne	r3, #1
 800d840:	2300      	moveq	r3, #0
 800d842:	b2db      	uxtb	r3, r3
 800d844:	e000      	b.n	800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3730      	adds	r7, #48	; 0x30
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	08011ce8 	.word	0x08011ce8
 800d854:	08011dcc 	.word	0x08011dcc
 800d858:	08011d30 	.word	0x08011d30
 800d85c:	08011dec 	.word	0x08011dec
 800d860:	08011e24 	.word	0x08011e24
 800d864:	08011e34 	.word	0x08011e34

0800d868 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08e      	sub	sp, #56	; 0x38
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 030f 	and.w	r3, r3, #15
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b14      	cmp	r3, #20
 800d886:	f040 8171 	bne.w	800db6c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	88db      	ldrh	r3, [r3, #6]
 800d88e:	b29b      	uxth	r3, r3
 800d890:	4618      	mov	r0, r3
 800d892:	f7f6 fa41 	bl	8003d18 <lwip_htons>
 800d896:	4603      	mov	r3, r0
 800d898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	00db      	lsls	r3, r3, #3
 800d8a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7f6 fa35 	bl	8003d18 <lwip_htons>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	f0c0 8150 	bcc.w	800db70 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d8d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7f7 fdbb 	bl	8005458 <pbuf_clen>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d8e6:	4b8c      	ldr	r3, [pc, #560]	; (800db18 <ip4_reass+0x2b0>)
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	8c3b      	ldrh	r3, [r7, #32]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	2b0a      	cmp	r3, #10
 800d8f2:	dd10      	ble.n	800d916 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d8f4:	8c3b      	ldrh	r3, [r7, #32]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8fa:	f7ff fd81 	bl	800d400 <ip_reass_remove_oldest_datagram>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 8137 	beq.w	800db74 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d906:	4b84      	ldr	r3, [pc, #528]	; (800db18 <ip4_reass+0x2b0>)
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	8c3b      	ldrh	r3, [r7, #32]
 800d90e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d910:	2b0a      	cmp	r3, #10
 800d912:	f300 812f 	bgt.w	800db74 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d916:	4b81      	ldr	r3, [pc, #516]	; (800db1c <ip4_reass+0x2b4>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	633b      	str	r3, [r7, #48]	; 0x30
 800d91c:	e015      	b.n	800d94a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	695a      	ldr	r2, [r3, #20]
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	429a      	cmp	r2, r3
 800d928:	d10c      	bne.n	800d944 <ip4_reass+0xdc>
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	699a      	ldr	r2, [r3, #24]
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	429a      	cmp	r2, r3
 800d934:	d106      	bne.n	800d944 <ip4_reass+0xdc>
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	899a      	ldrh	r2, [r3, #12]
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	889b      	ldrh	r3, [r3, #4]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	429a      	cmp	r2, r3
 800d942:	d006      	beq.n	800d952 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	633b      	str	r3, [r7, #48]	; 0x30
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1e6      	bne.n	800d91e <ip4_reass+0xb6>
 800d950:	e000      	b.n	800d954 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d952:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	2b00      	cmp	r3, #0
 800d958:	d109      	bne.n	800d96e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d95a:	8c3b      	ldrh	r3, [r7, #32]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d960:	f7ff fdb0 	bl	800d4c4 <ip_reass_enqueue_new_datagram>
 800d964:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11c      	bne.n	800d9a6 <ip4_reass+0x13e>
      goto nullreturn;
 800d96c:	e105      	b.n	800db7a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d970:	88db      	ldrh	r3, [r3, #6]
 800d972:	b29b      	uxth	r3, r3
 800d974:	4618      	mov	r0, r3
 800d976:	f7f6 f9cf 	bl	8003d18 <lwip_htons>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d980:	2b00      	cmp	r3, #0
 800d982:	d110      	bne.n	800d9a6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	89db      	ldrh	r3, [r3, #14]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f6 f9c5 	bl	8003d18 <lwip_htons>
 800d98e:	4603      	mov	r3, r0
 800d990:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d994:	2b00      	cmp	r3, #0
 800d996:	d006      	beq.n	800d9a6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99a:	3308      	adds	r3, #8
 800d99c:	2214      	movs	r2, #20
 800d99e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 fba5 	bl	800e0f0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	88db      	ldrh	r3, [r3, #6]
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	f003 0320 	and.w	r3, r3, #32
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2301      	moveq	r3, #1
 800d9b6:	2300      	movne	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00e      	beq.n	800d9e0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d9c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9c6:	4413      	add	r3, r2
 800d9c8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d9ca:	8b7a      	ldrh	r2, [r7, #26]
 800d9cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	f0c0 80a0 	bcc.w	800db14 <ip4_reass+0x2ac>
 800d9d4:	8b7b      	ldrh	r3, [r7, #26]
 800d9d6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	f200 809a 	bhi.w	800db14 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d9e0:	69fa      	ldr	r2, [r7, #28]
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9e6:	f7ff fdd5 	bl	800d594 <ip_reass_chain_frag_into_datagram_and_validate>
 800d9ea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f2:	f000 809b 	beq.w	800db2c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d9f6:	4b48      	ldr	r3, [pc, #288]	; (800db18 <ip4_reass+0x2b0>)
 800d9f8:	881a      	ldrh	r2, [r3, #0]
 800d9fa:	8c3b      	ldrh	r3, [r7, #32]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	4b45      	ldr	r3, [pc, #276]	; (800db18 <ip4_reass+0x2b0>)
 800da02:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00d      	beq.n	800da26 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800da0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da0e:	4413      	add	r3, r2
 800da10:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	8a7a      	ldrh	r2, [r7, #18]
 800da16:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	7f9b      	ldrb	r3, [r3, #30]
 800da1c:	f043 0301 	orr.w	r3, r3, #1
 800da20:	b2da      	uxtb	r2, r3
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d171      	bne.n	800db10 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	8b9b      	ldrh	r3, [r3, #28]
 800da30:	3314      	adds	r3, #20
 800da32:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	3308      	adds	r3, #8
 800da4a:	2214      	movs	r2, #20
 800da4c:	4619      	mov	r1, r3
 800da4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da50:	f000 fb4e 	bl	800e0f0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800da54:	8a3b      	ldrh	r3, [r7, #16]
 800da56:	4618      	mov	r0, r3
 800da58:	f7f6 f95e 	bl	8003d18 <lwip_htons>
 800da5c:	4603      	mov	r3, r0
 800da5e:	461a      	mov	r2, r3
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	2200      	movs	r2, #0
 800da68:	719a      	strb	r2, [r3, #6]
 800da6a:	2200      	movs	r2, #0
 800da6c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	2200      	movs	r2, #0
 800da72:	729a      	strb	r2, [r3, #10]
 800da74:	2200      	movs	r2, #0
 800da76:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800da7e:	e00d      	b.n	800da9c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800da80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800da86:	2114      	movs	r1, #20
 800da88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da8a:	f7f7 fbd7 	bl	800523c <pbuf_remove_header>
      pbuf_cat(p, r);
 800da8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7f7 fd1b 	bl	80054cc <pbuf_cat>
      r = iprh->next_pbuf;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800da9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1ee      	bne.n	800da80 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800daa2:	4b1e      	ldr	r3, [pc, #120]	; (800db1c <ip4_reass+0x2b4>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d102      	bne.n	800dab2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dab0:	e010      	b.n	800dad4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dab2:	4b1a      	ldr	r3, [pc, #104]	; (800db1c <ip4_reass+0x2b4>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dab8:	e007      	b.n	800daca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d006      	beq.n	800dad2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1f4      	bne.n	800daba <ip4_reass+0x252>
 800dad0:	e000      	b.n	800dad4 <ip4_reass+0x26c>
          break;
 800dad2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dad8:	f7ff fd2e 	bl	800d538 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7f7 fcbb 	bl	8005458 <pbuf_clen>
 800dae2:	4603      	mov	r3, r0
 800dae4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dae6:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <ip4_reass+0x2b0>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	8c3a      	ldrh	r2, [r7, #32]
 800daec:	429a      	cmp	r2, r3
 800daee:	d906      	bls.n	800dafe <ip4_reass+0x296>
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <ip4_reass+0x2b8>)
 800daf2:	f240 229b 	movw	r2, #667	; 0x29b
 800daf6:	490b      	ldr	r1, [pc, #44]	; (800db24 <ip4_reass+0x2bc>)
 800daf8:	480b      	ldr	r0, [pc, #44]	; (800db28 <ip4_reass+0x2c0>)
 800dafa:	f000 fb29 	bl	800e150 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dafe:	4b06      	ldr	r3, [pc, #24]	; (800db18 <ip4_reass+0x2b0>)
 800db00:	881a      	ldrh	r2, [r3, #0]
 800db02:	8c3b      	ldrh	r3, [r7, #32]
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	b29a      	uxth	r2, r3
 800db08:	4b03      	ldr	r3, [pc, #12]	; (800db18 <ip4_reass+0x2b0>)
 800db0a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	e038      	b.n	800db82 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	e036      	b.n	800db82 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800db14:	bf00      	nop
 800db16:	e00a      	b.n	800db2e <ip4_reass+0x2c6>
 800db18:	200059d0 	.word	0x200059d0
 800db1c:	200059cc 	.word	0x200059cc
 800db20:	08011ce8 	.word	0x08011ce8
 800db24:	08011e58 	.word	0x08011e58
 800db28:	08011d30 	.word	0x08011d30
    goto nullreturn_ipr;
 800db2c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <ip4_reass+0x2da>
 800db34:	4b15      	ldr	r3, [pc, #84]	; (800db8c <ip4_reass+0x324>)
 800db36:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800db3a:	4915      	ldr	r1, [pc, #84]	; (800db90 <ip4_reass+0x328>)
 800db3c:	4815      	ldr	r0, [pc, #84]	; (800db94 <ip4_reass+0x32c>)
 800db3e:	f000 fb07 	bl	800e150 <iprintf>
  if (ipr->p == NULL) {
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d116      	bne.n	800db78 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800db4a:	4b13      	ldr	r3, [pc, #76]	; (800db98 <ip4_reass+0x330>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db50:	429a      	cmp	r2, r3
 800db52:	d006      	beq.n	800db62 <ip4_reass+0x2fa>
 800db54:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <ip4_reass+0x324>)
 800db56:	f240 22ab 	movw	r2, #683	; 0x2ab
 800db5a:	4910      	ldr	r1, [pc, #64]	; (800db9c <ip4_reass+0x334>)
 800db5c:	480d      	ldr	r0, [pc, #52]	; (800db94 <ip4_reass+0x32c>)
 800db5e:	f000 faf7 	bl	800e150 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800db62:	2100      	movs	r1, #0
 800db64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db66:	f7ff fce7 	bl	800d538 <ip_reass_dequeue_datagram>
 800db6a:	e006      	b.n	800db7a <ip4_reass+0x312>
    goto nullreturn;
 800db6c:	bf00      	nop
 800db6e:	e004      	b.n	800db7a <ip4_reass+0x312>
    goto nullreturn;
 800db70:	bf00      	nop
 800db72:	e002      	b.n	800db7a <ip4_reass+0x312>
      goto nullreturn;
 800db74:	bf00      	nop
 800db76:	e000      	b.n	800db7a <ip4_reass+0x312>
  }

nullreturn:
 800db78:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7f7 fbe4 	bl	8005348 <pbuf_free>
  return NULL;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3738      	adds	r7, #56	; 0x38
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	08011ce8 	.word	0x08011ce8
 800db90:	08011e74 	.word	0x08011e74
 800db94:	08011d30 	.word	0x08011d30
 800db98:	200059cc 	.word	0x200059cc
 800db9c:	08011e80 	.word	0x08011e80

0800dba0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dba4:	2005      	movs	r0, #5
 800dba6:	f7f6 fd0d 	bl	80045c4 <memp_malloc>
 800dbaa:	4603      	mov	r3, r0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <ip_frag_free_pbuf_custom_ref+0x1c>
 800dbbe:	4b07      	ldr	r3, [pc, #28]	; (800dbdc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dbc0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dbc4:	4906      	ldr	r1, [pc, #24]	; (800dbe0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dbc6:	4807      	ldr	r0, [pc, #28]	; (800dbe4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dbc8:	f000 fac2 	bl	800e150 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	2005      	movs	r0, #5
 800dbd0:	f7f6 fd44 	bl	800465c <memp_free>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	08011ce8 	.word	0x08011ce8
 800dbe0:	08011ea0 	.word	0x08011ea0
 800dbe4:	08011d30 	.word	0x08011d30

0800dbe8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d106      	bne.n	800dc08 <ipfrag_free_pbuf_custom+0x20>
 800dbfa:	4b11      	ldr	r3, [pc, #68]	; (800dc40 <ipfrag_free_pbuf_custom+0x58>)
 800dbfc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dc00:	4910      	ldr	r1, [pc, #64]	; (800dc44 <ipfrag_free_pbuf_custom+0x5c>)
 800dc02:	4811      	ldr	r0, [pc, #68]	; (800dc48 <ipfrag_free_pbuf_custom+0x60>)
 800dc04:	f000 faa4 	bl	800e150 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d006      	beq.n	800dc1e <ipfrag_free_pbuf_custom+0x36>
 800dc10:	4b0b      	ldr	r3, [pc, #44]	; (800dc40 <ipfrag_free_pbuf_custom+0x58>)
 800dc12:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dc16:	490d      	ldr	r1, [pc, #52]	; (800dc4c <ipfrag_free_pbuf_custom+0x64>)
 800dc18:	480b      	ldr	r0, [pc, #44]	; (800dc48 <ipfrag_free_pbuf_custom+0x60>)
 800dc1a:	f000 fa99 	bl	800e150 <iprintf>
  if (pcr->original != NULL) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d004      	beq.n	800dc30 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	695b      	ldr	r3, [r3, #20]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f7 fb8c 	bl	8005348 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f7ff ffbd 	bl	800dbb0 <ip_frag_free_pbuf_custom_ref>
}
 800dc36:	bf00      	nop
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	08011ce8 	.word	0x08011ce8
 800dc44:	08011eac 	.word	0x08011eac
 800dc48:	08011d30 	.word	0x08011d30
 800dc4c:	08011eb8 	.word	0x08011eb8

0800dc50 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b094      	sub	sp, #80	; 0x50
 800dc54:	af02      	add	r7, sp, #8
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc66:	3b14      	subs	r3, #20
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	da00      	bge.n	800dc6e <ip4_frag+0x1e>
 800dc6c:	3307      	adds	r3, #7
 800dc6e:	10db      	asrs	r3, r3, #3
 800dc70:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dc72:	2314      	movs	r3, #20
 800dc74:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	f003 030f 	and.w	r3, r3, #15
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b14      	cmp	r3, #20
 800dc90:	d002      	beq.n	800dc98 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dc92:	f06f 0305 	mvn.w	r3, #5
 800dc96:	e110      	b.n	800deba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	895b      	ldrh	r3, [r3, #10]
 800dc9c:	2b13      	cmp	r3, #19
 800dc9e:	d809      	bhi.n	800dcb4 <ip4_frag+0x64>
 800dca0:	4b88      	ldr	r3, [pc, #544]	; (800dec4 <ip4_frag+0x274>)
 800dca2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dca6:	4988      	ldr	r1, [pc, #544]	; (800dec8 <ip4_frag+0x278>)
 800dca8:	4888      	ldr	r0, [pc, #544]	; (800decc <ip4_frag+0x27c>)
 800dcaa:	f000 fa51 	bl	800e150 <iprintf>
 800dcae:	f06f 0305 	mvn.w	r3, #5
 800dcb2:	e102      	b.n	800deba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	88db      	ldrh	r3, [r3, #6]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f6 f82c 	bl	8003d18 <lwip_htons>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dcc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dcc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dcce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dcd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	891b      	ldrh	r3, [r3, #8]
 800dcda:	3b14      	subs	r3, #20
 800dcdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dce0:	e0e1      	b.n	800dea6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dce2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dcec:	4293      	cmp	r3, r2
 800dcee:	bf28      	it	cs
 800dcf0:	4613      	movcs	r3, r2
 800dcf2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dcf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcf8:	2114      	movs	r1, #20
 800dcfa:	200e      	movs	r0, #14
 800dcfc:	f7f7 f840 	bl	8004d80 <pbuf_alloc>
 800dd00:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f000 80d5 	beq.w	800deb4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	895b      	ldrh	r3, [r3, #10]
 800dd0e:	2b13      	cmp	r3, #19
 800dd10:	d806      	bhi.n	800dd20 <ip4_frag+0xd0>
 800dd12:	4b6c      	ldr	r3, [pc, #432]	; (800dec4 <ip4_frag+0x274>)
 800dd14:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dd18:	496d      	ldr	r1, [pc, #436]	; (800ded0 <ip4_frag+0x280>)
 800dd1a:	486c      	ldr	r0, [pc, #432]	; (800decc <ip4_frag+0x27c>)
 800dd1c:	f000 fa18 	bl	800e150 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	2214      	movs	r2, #20
 800dd26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 f9e1 	bl	800e0f0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dd34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dd36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dd3a:	e064      	b.n	800de06 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	895a      	ldrh	r2, [r3, #10]
 800dd40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	895b      	ldrh	r3, [r3, #10]
 800dd4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d906      	bls.n	800dd5e <ip4_frag+0x10e>
 800dd50:	4b5c      	ldr	r3, [pc, #368]	; (800dec4 <ip4_frag+0x274>)
 800dd52:	f240 322d 	movw	r2, #813	; 0x32d
 800dd56:	495f      	ldr	r1, [pc, #380]	; (800ded4 <ip4_frag+0x284>)
 800dd58:	485c      	ldr	r0, [pc, #368]	; (800decc <ip4_frag+0x27c>)
 800dd5a:	f000 f9f9 	bl	800e150 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dd5e:	8bfa      	ldrh	r2, [r7, #30]
 800dd60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dd64:	4293      	cmp	r3, r2
 800dd66:	bf28      	it	cs
 800dd68:	4613      	movcs	r3, r2
 800dd6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dd6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <ip4_frag+0x132>
        poff = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]
        continue;
 800dd80:	e041      	b.n	800de06 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dd82:	f7ff ff0d 	bl	800dba0 <ip_frag_alloc_pbuf_custom_ref>
 800dd86:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d103      	bne.n	800dd96 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dd8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd90:	f7f7 fada 	bl	8005348 <pbuf_free>
        goto memerr;
 800dd94:	e08f      	b.n	800deb6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dd96:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dd9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd9e:	4413      	add	r3, r2
 800dda0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dda4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dda8:	9201      	str	r2, [sp, #4]
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	4603      	mov	r3, r0
 800ddae:	2241      	movs	r2, #65	; 0x41
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f7f7 f90f 	bl	8004fd4 <pbuf_alloced_custom>
 800ddb6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ddbe:	69b8      	ldr	r0, [r7, #24]
 800ddc0:	f7ff fef6 	bl	800dbb0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ddc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc6:	f7f7 fabf 	bl	8005348 <pbuf_free>
        goto memerr;
 800ddca:	e074      	b.n	800deb6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f7f7 fb5b 	bl	8005488 <pbuf_ref>
      pcr->original = p;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	4a3f      	ldr	r2, [pc, #252]	; (800ded8 <ip4_frag+0x288>)
 800dddc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ddde:	6979      	ldr	r1, [r7, #20]
 800dde0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dde2:	f7f7 fb73 	bl	80054cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dde6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ddea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ddf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <ip4_frag+0x1b6>
        poff = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800de06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d196      	bne.n	800dd3c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800de0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800de10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de14:	4413      	add	r3, r2
 800de16:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de1c:	f1a3 0213 	sub.w	r2, r3, #19
 800de20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de24:	429a      	cmp	r2, r3
 800de26:	bfcc      	ite	gt
 800de28:	2301      	movgt	r3, #1
 800de2a:	2300      	movle	r3, #0
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800de30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800de3a:	6a3b      	ldr	r3, [r7, #32]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <ip4_frag+0x1f6>
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800de46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800de4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800de4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de50:	4618      	mov	r0, r3
 800de52:	f7f5 ff61 	bl	8003d18 <lwip_htons>
 800de56:	4603      	mov	r3, r0
 800de58:	461a      	mov	r2, r3
 800de5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800de5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de60:	3314      	adds	r3, #20
 800de62:	b29b      	uxth	r3, r3
 800de64:	4618      	mov	r0, r3
 800de66:	f7f5 ff57 	bl	8003d18 <lwip_htons>
 800de6a:	4603      	mov	r3, r0
 800de6c:	461a      	mov	r2, r3
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	2200      	movs	r2, #0
 800de76:	729a      	strb	r2, [r3, #10]
 800de78:	2200      	movs	r2, #0
 800de7a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de84:	68b8      	ldr	r0, [r7, #8]
 800de86:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800de88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de8a:	f7f7 fa5d 	bl	8005348 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800de8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800de9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800de9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dea0:	4413      	add	r3, r2
 800dea2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800dea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f47f af19 	bne.w	800dce2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	e002      	b.n	800deba <ip4_frag+0x26a>
      goto memerr;
 800deb4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800deb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800deba:	4618      	mov	r0, r3
 800debc:	3748      	adds	r7, #72	; 0x48
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	08011ce8 	.word	0x08011ce8
 800dec8:	08011ec4 	.word	0x08011ec4
 800decc:	08011d30 	.word	0x08011d30
 800ded0:	08011ee0 	.word	0x08011ee0
 800ded4:	08011f00 	.word	0x08011f00
 800ded8:	0800dbe9 	.word	0x0800dbe9

0800dedc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dee6:	230e      	movs	r3, #14
 800dee8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	895b      	ldrh	r3, [r3, #10]
 800deee:	2b0e      	cmp	r3, #14
 800def0:	d96e      	bls.n	800dfd0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7bdb      	ldrb	r3, [r3, #15]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df00:	3301      	adds	r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	7b1a      	ldrb	r2, [r3, #12]
 800df12:	7b5b      	ldrb	r3, [r3, #13]
 800df14:	021b      	lsls	r3, r3, #8
 800df16:	4313      	orrs	r3, r2
 800df18:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	2b00      	cmp	r3, #0
 800df24:	d023      	beq.n	800df6e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d10f      	bne.n	800df4e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	785b      	ldrb	r3, [r3, #1]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d11b      	bne.n	800df6e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800df3a:	2b5e      	cmp	r3, #94	; 0x5e
 800df3c:	d117      	bne.n	800df6e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	7b5b      	ldrb	r3, [r3, #13]
 800df42:	f043 0310 	orr.w	r3, r3, #16
 800df46:	b2da      	uxtb	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	735a      	strb	r2, [r3, #13]
 800df4c:	e00f      	b.n	800df6e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	2206      	movs	r2, #6
 800df52:	4928      	ldr	r1, [pc, #160]	; (800dff4 <ethernet_input+0x118>)
 800df54:	4618      	mov	r0, r3
 800df56:	f000 f8bb 	bl	800e0d0 <memcmp>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d106      	bne.n	800df6e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7b5b      	ldrb	r3, [r3, #13]
 800df64:	f043 0308 	orr.w	r3, r3, #8
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800df6e:	89fb      	ldrh	r3, [r7, #14]
 800df70:	2b08      	cmp	r3, #8
 800df72:	d003      	beq.n	800df7c <ethernet_input+0xa0>
 800df74:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800df78:	d014      	beq.n	800dfa4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800df7a:	e032      	b.n	800dfe2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df82:	f003 0308 	and.w	r3, r3, #8
 800df86:	2b00      	cmp	r3, #0
 800df88:	d024      	beq.n	800dfd4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800df8a:	8afb      	ldrh	r3, [r7, #22]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7f7 f954 	bl	800523c <pbuf_remove_header>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d11e      	bne.n	800dfd8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7fe fe91 	bl	800ccc4 <ip4_input>
      break;
 800dfa2:	e013      	b.n	800dfcc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfaa:	f003 0308 	and.w	r3, r3, #8
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d014      	beq.n	800dfdc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dfb2:	8afb      	ldrh	r3, [r7, #22]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7f7 f940 	bl	800523c <pbuf_remove_header>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10e      	bne.n	800dfe0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7fe f831 	bl	800c02c <etharp_input>
      break;
 800dfca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e00c      	b.n	800dfea <ethernet_input+0x10e>
    goto free_and_return;
 800dfd0:	bf00      	nop
 800dfd2:	e006      	b.n	800dfe2 <ethernet_input+0x106>
        goto free_and_return;
 800dfd4:	bf00      	nop
 800dfd6:	e004      	b.n	800dfe2 <ethernet_input+0x106>
        goto free_and_return;
 800dfd8:	bf00      	nop
 800dfda:	e002      	b.n	800dfe2 <ethernet_input+0x106>
        goto free_and_return;
 800dfdc:	bf00      	nop
 800dfde:	e000      	b.n	800dfe2 <ethernet_input+0x106>
        goto free_and_return;
 800dfe0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7f7 f9b0 	bl	8005348 <pbuf_free>
  return ERR_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	08012088 	.word	0x08012088

0800dff8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
 800e004:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e006:	8c3b      	ldrh	r3, [r7, #32]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f5 fe85 	bl	8003d18 <lwip_htons>
 800e00e:	4603      	mov	r3, r0
 800e010:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e012:	210e      	movs	r1, #14
 800e014:	68b8      	ldr	r0, [r7, #8]
 800e016:	f7f7 f901 	bl	800521c <pbuf_add_header>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d125      	bne.n	800e06c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	8afa      	ldrh	r2, [r7, #22]
 800e02a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2206      	movs	r2, #6
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f85c 	bl	800e0f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	3306      	adds	r3, #6
 800e03c:	2206      	movs	r2, #6
 800e03e:	6879      	ldr	r1, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	f000 f855 	bl	800e0f0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e04c:	2b06      	cmp	r3, #6
 800e04e:	d006      	beq.n	800e05e <ethernet_output+0x66>
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <ethernet_output+0x84>)
 800e052:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e056:	490a      	ldr	r1, [pc, #40]	; (800e080 <ethernet_output+0x88>)
 800e058:	480a      	ldr	r0, [pc, #40]	; (800e084 <ethernet_output+0x8c>)
 800e05a:	f000 f879 	bl	800e150 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	68b9      	ldr	r1, [r7, #8]
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	4798      	blx	r3
 800e068:	4603      	mov	r3, r0
 800e06a:	e002      	b.n	800e072 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e06c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e06e:	f06f 0301 	mvn.w	r3, #1
}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	08011f10 	.word	0x08011f10
 800e080:	08011f48 	.word	0x08011f48
 800e084:	08011f7c 	.word	0x08011f7c

0800e088 <__libc_init_array>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	4d0d      	ldr	r5, [pc, #52]	; (800e0c0 <__libc_init_array+0x38>)
 800e08c:	4c0d      	ldr	r4, [pc, #52]	; (800e0c4 <__libc_init_array+0x3c>)
 800e08e:	1b64      	subs	r4, r4, r5
 800e090:	10a4      	asrs	r4, r4, #2
 800e092:	2600      	movs	r6, #0
 800e094:	42a6      	cmp	r6, r4
 800e096:	d109      	bne.n	800e0ac <__libc_init_array+0x24>
 800e098:	4d0b      	ldr	r5, [pc, #44]	; (800e0c8 <__libc_init_array+0x40>)
 800e09a:	4c0c      	ldr	r4, [pc, #48]	; (800e0cc <__libc_init_array+0x44>)
 800e09c:	f001 fa5c 	bl	800f558 <_init>
 800e0a0:	1b64      	subs	r4, r4, r5
 800e0a2:	10a4      	asrs	r4, r4, #2
 800e0a4:	2600      	movs	r6, #0
 800e0a6:	42a6      	cmp	r6, r4
 800e0a8:	d105      	bne.n	800e0b6 <__libc_init_array+0x2e>
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0b0:	4798      	blx	r3
 800e0b2:	3601      	adds	r6, #1
 800e0b4:	e7ee      	b.n	800e094 <__libc_init_array+0xc>
 800e0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ba:	4798      	blx	r3
 800e0bc:	3601      	adds	r6, #1
 800e0be:	e7f2      	b.n	800e0a6 <__libc_init_array+0x1e>
 800e0c0:	080121e8 	.word	0x080121e8
 800e0c4:	080121e8 	.word	0x080121e8
 800e0c8:	080121e8 	.word	0x080121e8
 800e0cc:	080121ec 	.word	0x080121ec

0800e0d0 <memcmp>:
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	3901      	subs	r1, #1
 800e0d4:	4402      	add	r2, r0
 800e0d6:	4290      	cmp	r0, r2
 800e0d8:	d101      	bne.n	800e0de <memcmp+0xe>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e005      	b.n	800e0ea <memcmp+0x1a>
 800e0de:	7803      	ldrb	r3, [r0, #0]
 800e0e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d001      	beq.n	800e0ec <memcmp+0x1c>
 800e0e8:	1b18      	subs	r0, r3, r4
 800e0ea:	bd10      	pop	{r4, pc}
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	e7f2      	b.n	800e0d6 <memcmp+0x6>

0800e0f0 <memcpy>:
 800e0f0:	440a      	add	r2, r1
 800e0f2:	4291      	cmp	r1, r2
 800e0f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0f8:	d100      	bne.n	800e0fc <memcpy+0xc>
 800e0fa:	4770      	bx	lr
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e106:	4291      	cmp	r1, r2
 800e108:	d1f9      	bne.n	800e0fe <memcpy+0xe>
 800e10a:	bd10      	pop	{r4, pc}

0800e10c <memmove>:
 800e10c:	4288      	cmp	r0, r1
 800e10e:	b510      	push	{r4, lr}
 800e110:	eb01 0402 	add.w	r4, r1, r2
 800e114:	d902      	bls.n	800e11c <memmove+0x10>
 800e116:	4284      	cmp	r4, r0
 800e118:	4623      	mov	r3, r4
 800e11a:	d807      	bhi.n	800e12c <memmove+0x20>
 800e11c:	1e43      	subs	r3, r0, #1
 800e11e:	42a1      	cmp	r1, r4
 800e120:	d008      	beq.n	800e134 <memmove+0x28>
 800e122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e12a:	e7f8      	b.n	800e11e <memmove+0x12>
 800e12c:	4402      	add	r2, r0
 800e12e:	4601      	mov	r1, r0
 800e130:	428a      	cmp	r2, r1
 800e132:	d100      	bne.n	800e136 <memmove+0x2a>
 800e134:	bd10      	pop	{r4, pc}
 800e136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e13a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e13e:	e7f7      	b.n	800e130 <memmove+0x24>

0800e140 <memset>:
 800e140:	4402      	add	r2, r0
 800e142:	4603      	mov	r3, r0
 800e144:	4293      	cmp	r3, r2
 800e146:	d100      	bne.n	800e14a <memset+0xa>
 800e148:	4770      	bx	lr
 800e14a:	f803 1b01 	strb.w	r1, [r3], #1
 800e14e:	e7f9      	b.n	800e144 <memset+0x4>

0800e150 <iprintf>:
 800e150:	b40f      	push	{r0, r1, r2, r3}
 800e152:	4b0a      	ldr	r3, [pc, #40]	; (800e17c <iprintf+0x2c>)
 800e154:	b513      	push	{r0, r1, r4, lr}
 800e156:	681c      	ldr	r4, [r3, #0]
 800e158:	b124      	cbz	r4, 800e164 <iprintf+0x14>
 800e15a:	69a3      	ldr	r3, [r4, #24]
 800e15c:	b913      	cbnz	r3, 800e164 <iprintf+0x14>
 800e15e:	4620      	mov	r0, r4
 800e160:	f000 f8e2 	bl	800e328 <__sinit>
 800e164:	ab05      	add	r3, sp, #20
 800e166:	9a04      	ldr	r2, [sp, #16]
 800e168:	68a1      	ldr	r1, [r4, #8]
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 fbfb 	bl	800e968 <_vfiprintf_r>
 800e172:	b002      	add	sp, #8
 800e174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e178:	b004      	add	sp, #16
 800e17a:	4770      	bx	lr
 800e17c:	20000014 	.word	0x20000014

0800e180 <rand>:
 800e180:	4b16      	ldr	r3, [pc, #88]	; (800e1dc <rand+0x5c>)
 800e182:	b510      	push	{r4, lr}
 800e184:	681c      	ldr	r4, [r3, #0]
 800e186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e188:	b9b3      	cbnz	r3, 800e1b8 <rand+0x38>
 800e18a:	2018      	movs	r0, #24
 800e18c:	f000 f97e 	bl	800e48c <malloc>
 800e190:	63a0      	str	r0, [r4, #56]	; 0x38
 800e192:	b928      	cbnz	r0, 800e1a0 <rand+0x20>
 800e194:	4602      	mov	r2, r0
 800e196:	4b12      	ldr	r3, [pc, #72]	; (800e1e0 <rand+0x60>)
 800e198:	4812      	ldr	r0, [pc, #72]	; (800e1e4 <rand+0x64>)
 800e19a:	214e      	movs	r1, #78	; 0x4e
 800e19c:	f000 f84e 	bl	800e23c <__assert_func>
 800e1a0:	4a11      	ldr	r2, [pc, #68]	; (800e1e8 <rand+0x68>)
 800e1a2:	4b12      	ldr	r3, [pc, #72]	; (800e1ec <rand+0x6c>)
 800e1a4:	e9c0 2300 	strd	r2, r3, [r0]
 800e1a8:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <rand+0x70>)
 800e1aa:	6083      	str	r3, [r0, #8]
 800e1ac:	230b      	movs	r3, #11
 800e1ae:	8183      	strh	r3, [r0, #12]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e1b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e1ba:	4a0e      	ldr	r2, [pc, #56]	; (800e1f4 <rand+0x74>)
 800e1bc:	6920      	ldr	r0, [r4, #16]
 800e1be:	6963      	ldr	r3, [r4, #20]
 800e1c0:	490d      	ldr	r1, [pc, #52]	; (800e1f8 <rand+0x78>)
 800e1c2:	4342      	muls	r2, r0
 800e1c4:	fb01 2203 	mla	r2, r1, r3, r2
 800e1c8:	fba0 0101 	umull	r0, r1, r0, r1
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	eb42 0001 	adc.w	r0, r2, r1
 800e1d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e1d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e1da:	bd10      	pop	{r4, pc}
 800e1dc:	20000014 	.word	0x20000014
 800e1e0:	0801209c 	.word	0x0801209c
 800e1e4:	080120b3 	.word	0x080120b3
 800e1e8:	abcd330e 	.word	0xabcd330e
 800e1ec:	e66d1234 	.word	0xe66d1234
 800e1f0:	0005deec 	.word	0x0005deec
 800e1f4:	5851f42d 	.word	0x5851f42d
 800e1f8:	4c957f2d 	.word	0x4c957f2d

0800e1fc <siprintf>:
 800e1fc:	b40e      	push	{r1, r2, r3}
 800e1fe:	b500      	push	{lr}
 800e200:	b09c      	sub	sp, #112	; 0x70
 800e202:	ab1d      	add	r3, sp, #116	; 0x74
 800e204:	9002      	str	r0, [sp, #8]
 800e206:	9006      	str	r0, [sp, #24]
 800e208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e20c:	4809      	ldr	r0, [pc, #36]	; (800e234 <siprintf+0x38>)
 800e20e:	9107      	str	r1, [sp, #28]
 800e210:	9104      	str	r1, [sp, #16]
 800e212:	4909      	ldr	r1, [pc, #36]	; (800e238 <siprintf+0x3c>)
 800e214:	f853 2b04 	ldr.w	r2, [r3], #4
 800e218:	9105      	str	r1, [sp, #20]
 800e21a:	6800      	ldr	r0, [r0, #0]
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	a902      	add	r1, sp, #8
 800e220:	f000 fa78 	bl	800e714 <_svfiprintf_r>
 800e224:	9b02      	ldr	r3, [sp, #8]
 800e226:	2200      	movs	r2, #0
 800e228:	701a      	strb	r2, [r3, #0]
 800e22a:	b01c      	add	sp, #112	; 0x70
 800e22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e230:	b003      	add	sp, #12
 800e232:	4770      	bx	lr
 800e234:	20000014 	.word	0x20000014
 800e238:	ffff0208 	.word	0xffff0208

0800e23c <__assert_func>:
 800e23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e23e:	4614      	mov	r4, r2
 800e240:	461a      	mov	r2, r3
 800e242:	4b09      	ldr	r3, [pc, #36]	; (800e268 <__assert_func+0x2c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4605      	mov	r5, r0
 800e248:	68d8      	ldr	r0, [r3, #12]
 800e24a:	b14c      	cbz	r4, 800e260 <__assert_func+0x24>
 800e24c:	4b07      	ldr	r3, [pc, #28]	; (800e26c <__assert_func+0x30>)
 800e24e:	9100      	str	r1, [sp, #0]
 800e250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e254:	4906      	ldr	r1, [pc, #24]	; (800e270 <__assert_func+0x34>)
 800e256:	462b      	mov	r3, r5
 800e258:	f000 f8e4 	bl	800e424 <fiprintf>
 800e25c:	f000 ff6e 	bl	800f13c <abort>
 800e260:	4b04      	ldr	r3, [pc, #16]	; (800e274 <__assert_func+0x38>)
 800e262:	461c      	mov	r4, r3
 800e264:	e7f3      	b.n	800e24e <__assert_func+0x12>
 800e266:	bf00      	nop
 800e268:	20000014 	.word	0x20000014
 800e26c:	0801210e 	.word	0x0801210e
 800e270:	0801211b 	.word	0x0801211b
 800e274:	08012149 	.word	0x08012149

0800e278 <std>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b510      	push	{r4, lr}
 800e27c:	4604      	mov	r4, r0
 800e27e:	e9c0 3300 	strd	r3, r3, [r0]
 800e282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e286:	6083      	str	r3, [r0, #8]
 800e288:	8181      	strh	r1, [r0, #12]
 800e28a:	6643      	str	r3, [r0, #100]	; 0x64
 800e28c:	81c2      	strh	r2, [r0, #14]
 800e28e:	6183      	str	r3, [r0, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	2208      	movs	r2, #8
 800e294:	305c      	adds	r0, #92	; 0x5c
 800e296:	f7ff ff53 	bl	800e140 <memset>
 800e29a:	4b05      	ldr	r3, [pc, #20]	; (800e2b0 <std+0x38>)
 800e29c:	6263      	str	r3, [r4, #36]	; 0x24
 800e29e:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <std+0x3c>)
 800e2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2a2:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <std+0x40>)
 800e2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2a6:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <std+0x44>)
 800e2a8:	6224      	str	r4, [r4, #32]
 800e2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	bf00      	nop
 800e2b0:	0800ef11 	.word	0x0800ef11
 800e2b4:	0800ef33 	.word	0x0800ef33
 800e2b8:	0800ef6b 	.word	0x0800ef6b
 800e2bc:	0800ef8f 	.word	0x0800ef8f

0800e2c0 <_cleanup_r>:
 800e2c0:	4901      	ldr	r1, [pc, #4]	; (800e2c8 <_cleanup_r+0x8>)
 800e2c2:	f000 b8c1 	b.w	800e448 <_fwalk_reent>
 800e2c6:	bf00      	nop
 800e2c8:	0800f279 	.word	0x0800f279

0800e2cc <__sfmoreglue>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	2268      	movs	r2, #104	; 0x68
 800e2d0:	1e4d      	subs	r5, r1, #1
 800e2d2:	4355      	muls	r5, r2
 800e2d4:	460e      	mov	r6, r1
 800e2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2da:	f000 f94b 	bl	800e574 <_malloc_r>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	b140      	cbz	r0, 800e2f4 <__sfmoreglue+0x28>
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2e8:	300c      	adds	r0, #12
 800e2ea:	60a0      	str	r0, [r4, #8]
 800e2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2f0:	f7ff ff26 	bl	800e140 <memset>
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}

0800e2f8 <__sfp_lock_acquire>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	; (800e300 <__sfp_lock_acquire+0x8>)
 800e2fa:	f000 b8c5 	b.w	800e488 <__retarget_lock_acquire_recursive>
 800e2fe:	bf00      	nop
 800e300:	200059d9 	.word	0x200059d9

0800e304 <__sfp_lock_release>:
 800e304:	4801      	ldr	r0, [pc, #4]	; (800e30c <__sfp_lock_release+0x8>)
 800e306:	f000 b8c0 	b.w	800e48a <__retarget_lock_release_recursive>
 800e30a:	bf00      	nop
 800e30c:	200059d9 	.word	0x200059d9

0800e310 <__sinit_lock_acquire>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__sinit_lock_acquire+0x8>)
 800e312:	f000 b8b9 	b.w	800e488 <__retarget_lock_acquire_recursive>
 800e316:	bf00      	nop
 800e318:	200059da 	.word	0x200059da

0800e31c <__sinit_lock_release>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__sinit_lock_release+0x8>)
 800e31e:	f000 b8b4 	b.w	800e48a <__retarget_lock_release_recursive>
 800e322:	bf00      	nop
 800e324:	200059da 	.word	0x200059da

0800e328 <__sinit>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4604      	mov	r4, r0
 800e32c:	f7ff fff0 	bl	800e310 <__sinit_lock_acquire>
 800e330:	69a3      	ldr	r3, [r4, #24]
 800e332:	b11b      	cbz	r3, 800e33c <__sinit+0x14>
 800e334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e338:	f7ff bff0 	b.w	800e31c <__sinit_lock_release>
 800e33c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e340:	6523      	str	r3, [r4, #80]	; 0x50
 800e342:	4b13      	ldr	r3, [pc, #76]	; (800e390 <__sinit+0x68>)
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <__sinit+0x6c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	62a2      	str	r2, [r4, #40]	; 0x28
 800e34a:	42a3      	cmp	r3, r4
 800e34c:	bf04      	itt	eq
 800e34e:	2301      	moveq	r3, #1
 800e350:	61a3      	streq	r3, [r4, #24]
 800e352:	4620      	mov	r0, r4
 800e354:	f000 f820 	bl	800e398 <__sfp>
 800e358:	6060      	str	r0, [r4, #4]
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 f81c 	bl	800e398 <__sfp>
 800e360:	60a0      	str	r0, [r4, #8]
 800e362:	4620      	mov	r0, r4
 800e364:	f000 f818 	bl	800e398 <__sfp>
 800e368:	2200      	movs	r2, #0
 800e36a:	60e0      	str	r0, [r4, #12]
 800e36c:	2104      	movs	r1, #4
 800e36e:	6860      	ldr	r0, [r4, #4]
 800e370:	f7ff ff82 	bl	800e278 <std>
 800e374:	68a0      	ldr	r0, [r4, #8]
 800e376:	2201      	movs	r2, #1
 800e378:	2109      	movs	r1, #9
 800e37a:	f7ff ff7d 	bl	800e278 <std>
 800e37e:	68e0      	ldr	r0, [r4, #12]
 800e380:	2202      	movs	r2, #2
 800e382:	2112      	movs	r1, #18
 800e384:	f7ff ff78 	bl	800e278 <std>
 800e388:	2301      	movs	r3, #1
 800e38a:	61a3      	str	r3, [r4, #24]
 800e38c:	e7d2      	b.n	800e334 <__sinit+0xc>
 800e38e:	bf00      	nop
 800e390:	08012098 	.word	0x08012098
 800e394:	0800e2c1 	.word	0x0800e2c1

0800e398 <__sfp>:
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	4607      	mov	r7, r0
 800e39c:	f7ff ffac 	bl	800e2f8 <__sfp_lock_acquire>
 800e3a0:	4b1e      	ldr	r3, [pc, #120]	; (800e41c <__sfp+0x84>)
 800e3a2:	681e      	ldr	r6, [r3, #0]
 800e3a4:	69b3      	ldr	r3, [r6, #24]
 800e3a6:	b913      	cbnz	r3, 800e3ae <__sfp+0x16>
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7ff ffbd 	bl	800e328 <__sinit>
 800e3ae:	3648      	adds	r6, #72	; 0x48
 800e3b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	d503      	bpl.n	800e3c0 <__sfp+0x28>
 800e3b8:	6833      	ldr	r3, [r6, #0]
 800e3ba:	b30b      	cbz	r3, 800e400 <__sfp+0x68>
 800e3bc:	6836      	ldr	r6, [r6, #0]
 800e3be:	e7f7      	b.n	800e3b0 <__sfp+0x18>
 800e3c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3c4:	b9d5      	cbnz	r5, 800e3fc <__sfp+0x64>
 800e3c6:	4b16      	ldr	r3, [pc, #88]	; (800e420 <__sfp+0x88>)
 800e3c8:	60e3      	str	r3, [r4, #12]
 800e3ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3ce:	6665      	str	r5, [r4, #100]	; 0x64
 800e3d0:	f000 f859 	bl	800e486 <__retarget_lock_init_recursive>
 800e3d4:	f7ff ff96 	bl	800e304 <__sfp_lock_release>
 800e3d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3e0:	6025      	str	r5, [r4, #0]
 800e3e2:	61a5      	str	r5, [r4, #24]
 800e3e4:	2208      	movs	r2, #8
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3ec:	f7ff fea8 	bl	800e140 <memset>
 800e3f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3fc:	3468      	adds	r4, #104	; 0x68
 800e3fe:	e7d9      	b.n	800e3b4 <__sfp+0x1c>
 800e400:	2104      	movs	r1, #4
 800e402:	4638      	mov	r0, r7
 800e404:	f7ff ff62 	bl	800e2cc <__sfmoreglue>
 800e408:	4604      	mov	r4, r0
 800e40a:	6030      	str	r0, [r6, #0]
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d1d5      	bne.n	800e3bc <__sfp+0x24>
 800e410:	f7ff ff78 	bl	800e304 <__sfp_lock_release>
 800e414:	230c      	movs	r3, #12
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	e7ee      	b.n	800e3f8 <__sfp+0x60>
 800e41a:	bf00      	nop
 800e41c:	08012098 	.word	0x08012098
 800e420:	ffff0001 	.word	0xffff0001

0800e424 <fiprintf>:
 800e424:	b40e      	push	{r1, r2, r3}
 800e426:	b503      	push	{r0, r1, lr}
 800e428:	4601      	mov	r1, r0
 800e42a:	ab03      	add	r3, sp, #12
 800e42c:	4805      	ldr	r0, [pc, #20]	; (800e444 <fiprintf+0x20>)
 800e42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e432:	6800      	ldr	r0, [r0, #0]
 800e434:	9301      	str	r3, [sp, #4]
 800e436:	f000 fa97 	bl	800e968 <_vfiprintf_r>
 800e43a:	b002      	add	sp, #8
 800e43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e440:	b003      	add	sp, #12
 800e442:	4770      	bx	lr
 800e444:	20000014 	.word	0x20000014

0800e448 <_fwalk_reent>:
 800e448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e44c:	4606      	mov	r6, r0
 800e44e:	4688      	mov	r8, r1
 800e450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e454:	2700      	movs	r7, #0
 800e456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e45a:	f1b9 0901 	subs.w	r9, r9, #1
 800e45e:	d505      	bpl.n	800e46c <_fwalk_reent+0x24>
 800e460:	6824      	ldr	r4, [r4, #0]
 800e462:	2c00      	cmp	r4, #0
 800e464:	d1f7      	bne.n	800e456 <_fwalk_reent+0xe>
 800e466:	4638      	mov	r0, r7
 800e468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e46c:	89ab      	ldrh	r3, [r5, #12]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d907      	bls.n	800e482 <_fwalk_reent+0x3a>
 800e472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e476:	3301      	adds	r3, #1
 800e478:	d003      	beq.n	800e482 <_fwalk_reent+0x3a>
 800e47a:	4629      	mov	r1, r5
 800e47c:	4630      	mov	r0, r6
 800e47e:	47c0      	blx	r8
 800e480:	4307      	orrs	r7, r0
 800e482:	3568      	adds	r5, #104	; 0x68
 800e484:	e7e9      	b.n	800e45a <_fwalk_reent+0x12>

0800e486 <__retarget_lock_init_recursive>:
 800e486:	4770      	bx	lr

0800e488 <__retarget_lock_acquire_recursive>:
 800e488:	4770      	bx	lr

0800e48a <__retarget_lock_release_recursive>:
 800e48a:	4770      	bx	lr

0800e48c <malloc>:
 800e48c:	4b02      	ldr	r3, [pc, #8]	; (800e498 <malloc+0xc>)
 800e48e:	4601      	mov	r1, r0
 800e490:	6818      	ldr	r0, [r3, #0]
 800e492:	f000 b86f 	b.w	800e574 <_malloc_r>
 800e496:	bf00      	nop
 800e498:	20000014 	.word	0x20000014

0800e49c <_free_r>:
 800e49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	d044      	beq.n	800e52c <_free_r+0x90>
 800e4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a6:	9001      	str	r0, [sp, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ae:	bfb8      	it	lt
 800e4b0:	18e4      	addlt	r4, r4, r3
 800e4b2:	f000 ff95 	bl	800f3e0 <__malloc_lock>
 800e4b6:	4a1e      	ldr	r2, [pc, #120]	; (800e530 <_free_r+0x94>)
 800e4b8:	9801      	ldr	r0, [sp, #4]
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	b933      	cbnz	r3, 800e4cc <_free_r+0x30>
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	6014      	str	r4, [r2, #0]
 800e4c2:	b003      	add	sp, #12
 800e4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c8:	f000 bf90 	b.w	800f3ec <__malloc_unlock>
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	d908      	bls.n	800e4e2 <_free_r+0x46>
 800e4d0:	6825      	ldr	r5, [r4, #0]
 800e4d2:	1961      	adds	r1, r4, r5
 800e4d4:	428b      	cmp	r3, r1
 800e4d6:	bf01      	itttt	eq
 800e4d8:	6819      	ldreq	r1, [r3, #0]
 800e4da:	685b      	ldreq	r3, [r3, #4]
 800e4dc:	1949      	addeq	r1, r1, r5
 800e4de:	6021      	streq	r1, [r4, #0]
 800e4e0:	e7ed      	b.n	800e4be <_free_r+0x22>
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	b10b      	cbz	r3, 800e4ec <_free_r+0x50>
 800e4e8:	42a3      	cmp	r3, r4
 800e4ea:	d9fa      	bls.n	800e4e2 <_free_r+0x46>
 800e4ec:	6811      	ldr	r1, [r2, #0]
 800e4ee:	1855      	adds	r5, r2, r1
 800e4f0:	42a5      	cmp	r5, r4
 800e4f2:	d10b      	bne.n	800e50c <_free_r+0x70>
 800e4f4:	6824      	ldr	r4, [r4, #0]
 800e4f6:	4421      	add	r1, r4
 800e4f8:	1854      	adds	r4, r2, r1
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	d1e0      	bne.n	800e4c2 <_free_r+0x26>
 800e500:	681c      	ldr	r4, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	6053      	str	r3, [r2, #4]
 800e506:	4421      	add	r1, r4
 800e508:	6011      	str	r1, [r2, #0]
 800e50a:	e7da      	b.n	800e4c2 <_free_r+0x26>
 800e50c:	d902      	bls.n	800e514 <_free_r+0x78>
 800e50e:	230c      	movs	r3, #12
 800e510:	6003      	str	r3, [r0, #0]
 800e512:	e7d6      	b.n	800e4c2 <_free_r+0x26>
 800e514:	6825      	ldr	r5, [r4, #0]
 800e516:	1961      	adds	r1, r4, r5
 800e518:	428b      	cmp	r3, r1
 800e51a:	bf04      	itt	eq
 800e51c:	6819      	ldreq	r1, [r3, #0]
 800e51e:	685b      	ldreq	r3, [r3, #4]
 800e520:	6063      	str	r3, [r4, #4]
 800e522:	bf04      	itt	eq
 800e524:	1949      	addeq	r1, r1, r5
 800e526:	6021      	streq	r1, [r4, #0]
 800e528:	6054      	str	r4, [r2, #4]
 800e52a:	e7ca      	b.n	800e4c2 <_free_r+0x26>
 800e52c:	b003      	add	sp, #12
 800e52e:	bd30      	pop	{r4, r5, pc}
 800e530:	200059dc 	.word	0x200059dc

0800e534 <sbrk_aligned>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	4e0e      	ldr	r6, [pc, #56]	; (800e570 <sbrk_aligned+0x3c>)
 800e538:	460c      	mov	r4, r1
 800e53a:	6831      	ldr	r1, [r6, #0]
 800e53c:	4605      	mov	r5, r0
 800e53e:	b911      	cbnz	r1, 800e546 <sbrk_aligned+0x12>
 800e540:	f000 fcd6 	bl	800eef0 <_sbrk_r>
 800e544:	6030      	str	r0, [r6, #0]
 800e546:	4621      	mov	r1, r4
 800e548:	4628      	mov	r0, r5
 800e54a:	f000 fcd1 	bl	800eef0 <_sbrk_r>
 800e54e:	1c43      	adds	r3, r0, #1
 800e550:	d00a      	beq.n	800e568 <sbrk_aligned+0x34>
 800e552:	1cc4      	adds	r4, r0, #3
 800e554:	f024 0403 	bic.w	r4, r4, #3
 800e558:	42a0      	cmp	r0, r4
 800e55a:	d007      	beq.n	800e56c <sbrk_aligned+0x38>
 800e55c:	1a21      	subs	r1, r4, r0
 800e55e:	4628      	mov	r0, r5
 800e560:	f000 fcc6 	bl	800eef0 <_sbrk_r>
 800e564:	3001      	adds	r0, #1
 800e566:	d101      	bne.n	800e56c <sbrk_aligned+0x38>
 800e568:	f04f 34ff 	mov.w	r4, #4294967295
 800e56c:	4620      	mov	r0, r4
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	200059e0 	.word	0x200059e0

0800e574 <_malloc_r>:
 800e574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e578:	1ccd      	adds	r5, r1, #3
 800e57a:	f025 0503 	bic.w	r5, r5, #3
 800e57e:	3508      	adds	r5, #8
 800e580:	2d0c      	cmp	r5, #12
 800e582:	bf38      	it	cc
 800e584:	250c      	movcc	r5, #12
 800e586:	2d00      	cmp	r5, #0
 800e588:	4607      	mov	r7, r0
 800e58a:	db01      	blt.n	800e590 <_malloc_r+0x1c>
 800e58c:	42a9      	cmp	r1, r5
 800e58e:	d905      	bls.n	800e59c <_malloc_r+0x28>
 800e590:	230c      	movs	r3, #12
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	2600      	movs	r6, #0
 800e596:	4630      	mov	r0, r6
 800e598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59c:	4e2e      	ldr	r6, [pc, #184]	; (800e658 <_malloc_r+0xe4>)
 800e59e:	f000 ff1f 	bl	800f3e0 <__malloc_lock>
 800e5a2:	6833      	ldr	r3, [r6, #0]
 800e5a4:	461c      	mov	r4, r3
 800e5a6:	bb34      	cbnz	r4, 800e5f6 <_malloc_r+0x82>
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	4638      	mov	r0, r7
 800e5ac:	f7ff ffc2 	bl	800e534 <sbrk_aligned>
 800e5b0:	1c43      	adds	r3, r0, #1
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	d14d      	bne.n	800e652 <_malloc_r+0xde>
 800e5b6:	6834      	ldr	r4, [r6, #0]
 800e5b8:	4626      	mov	r6, r4
 800e5ba:	2e00      	cmp	r6, #0
 800e5bc:	d140      	bne.n	800e640 <_malloc_r+0xcc>
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	eb04 0803 	add.w	r8, r4, r3
 800e5c8:	f000 fc92 	bl	800eef0 <_sbrk_r>
 800e5cc:	4580      	cmp	r8, r0
 800e5ce:	d13a      	bne.n	800e646 <_malloc_r+0xd2>
 800e5d0:	6821      	ldr	r1, [r4, #0]
 800e5d2:	3503      	adds	r5, #3
 800e5d4:	1a6d      	subs	r5, r5, r1
 800e5d6:	f025 0503 	bic.w	r5, r5, #3
 800e5da:	3508      	adds	r5, #8
 800e5dc:	2d0c      	cmp	r5, #12
 800e5de:	bf38      	it	cc
 800e5e0:	250c      	movcc	r5, #12
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f7ff ffa5 	bl	800e534 <sbrk_aligned>
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	d02b      	beq.n	800e646 <_malloc_r+0xd2>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	442b      	add	r3, r5
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	e00e      	b.n	800e614 <_malloc_r+0xa0>
 800e5f6:	6822      	ldr	r2, [r4, #0]
 800e5f8:	1b52      	subs	r2, r2, r5
 800e5fa:	d41e      	bmi.n	800e63a <_malloc_r+0xc6>
 800e5fc:	2a0b      	cmp	r2, #11
 800e5fe:	d916      	bls.n	800e62e <_malloc_r+0xba>
 800e600:	1961      	adds	r1, r4, r5
 800e602:	42a3      	cmp	r3, r4
 800e604:	6025      	str	r5, [r4, #0]
 800e606:	bf18      	it	ne
 800e608:	6059      	strne	r1, [r3, #4]
 800e60a:	6863      	ldr	r3, [r4, #4]
 800e60c:	bf08      	it	eq
 800e60e:	6031      	streq	r1, [r6, #0]
 800e610:	5162      	str	r2, [r4, r5]
 800e612:	604b      	str	r3, [r1, #4]
 800e614:	4638      	mov	r0, r7
 800e616:	f104 060b 	add.w	r6, r4, #11
 800e61a:	f000 fee7 	bl	800f3ec <__malloc_unlock>
 800e61e:	f026 0607 	bic.w	r6, r6, #7
 800e622:	1d23      	adds	r3, r4, #4
 800e624:	1af2      	subs	r2, r6, r3
 800e626:	d0b6      	beq.n	800e596 <_malloc_r+0x22>
 800e628:	1b9b      	subs	r3, r3, r6
 800e62a:	50a3      	str	r3, [r4, r2]
 800e62c:	e7b3      	b.n	800e596 <_malloc_r+0x22>
 800e62e:	6862      	ldr	r2, [r4, #4]
 800e630:	42a3      	cmp	r3, r4
 800e632:	bf0c      	ite	eq
 800e634:	6032      	streq	r2, [r6, #0]
 800e636:	605a      	strne	r2, [r3, #4]
 800e638:	e7ec      	b.n	800e614 <_malloc_r+0xa0>
 800e63a:	4623      	mov	r3, r4
 800e63c:	6864      	ldr	r4, [r4, #4]
 800e63e:	e7b2      	b.n	800e5a6 <_malloc_r+0x32>
 800e640:	4634      	mov	r4, r6
 800e642:	6876      	ldr	r6, [r6, #4]
 800e644:	e7b9      	b.n	800e5ba <_malloc_r+0x46>
 800e646:	230c      	movs	r3, #12
 800e648:	603b      	str	r3, [r7, #0]
 800e64a:	4638      	mov	r0, r7
 800e64c:	f000 fece 	bl	800f3ec <__malloc_unlock>
 800e650:	e7a1      	b.n	800e596 <_malloc_r+0x22>
 800e652:	6025      	str	r5, [r4, #0]
 800e654:	e7de      	b.n	800e614 <_malloc_r+0xa0>
 800e656:	bf00      	nop
 800e658:	200059dc 	.word	0x200059dc

0800e65c <__ssputs_r>:
 800e65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e660:	688e      	ldr	r6, [r1, #8]
 800e662:	429e      	cmp	r6, r3
 800e664:	4682      	mov	sl, r0
 800e666:	460c      	mov	r4, r1
 800e668:	4690      	mov	r8, r2
 800e66a:	461f      	mov	r7, r3
 800e66c:	d838      	bhi.n	800e6e0 <__ssputs_r+0x84>
 800e66e:	898a      	ldrh	r2, [r1, #12]
 800e670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e674:	d032      	beq.n	800e6dc <__ssputs_r+0x80>
 800e676:	6825      	ldr	r5, [r4, #0]
 800e678:	6909      	ldr	r1, [r1, #16]
 800e67a:	eba5 0901 	sub.w	r9, r5, r1
 800e67e:	6965      	ldr	r5, [r4, #20]
 800e680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e688:	3301      	adds	r3, #1
 800e68a:	444b      	add	r3, r9
 800e68c:	106d      	asrs	r5, r5, #1
 800e68e:	429d      	cmp	r5, r3
 800e690:	bf38      	it	cc
 800e692:	461d      	movcc	r5, r3
 800e694:	0553      	lsls	r3, r2, #21
 800e696:	d531      	bpl.n	800e6fc <__ssputs_r+0xa0>
 800e698:	4629      	mov	r1, r5
 800e69a:	f7ff ff6b 	bl	800e574 <_malloc_r>
 800e69e:	4606      	mov	r6, r0
 800e6a0:	b950      	cbnz	r0, 800e6b8 <__ssputs_r+0x5c>
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	f8ca 3000 	str.w	r3, [sl]
 800e6a8:	89a3      	ldrh	r3, [r4, #12]
 800e6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ae:	81a3      	strh	r3, [r4, #12]
 800e6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b8:	6921      	ldr	r1, [r4, #16]
 800e6ba:	464a      	mov	r2, r9
 800e6bc:	f7ff fd18 	bl	800e0f0 <memcpy>
 800e6c0:	89a3      	ldrh	r3, [r4, #12]
 800e6c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ca:	81a3      	strh	r3, [r4, #12]
 800e6cc:	6126      	str	r6, [r4, #16]
 800e6ce:	6165      	str	r5, [r4, #20]
 800e6d0:	444e      	add	r6, r9
 800e6d2:	eba5 0509 	sub.w	r5, r5, r9
 800e6d6:	6026      	str	r6, [r4, #0]
 800e6d8:	60a5      	str	r5, [r4, #8]
 800e6da:	463e      	mov	r6, r7
 800e6dc:	42be      	cmp	r6, r7
 800e6de:	d900      	bls.n	800e6e2 <__ssputs_r+0x86>
 800e6e0:	463e      	mov	r6, r7
 800e6e2:	6820      	ldr	r0, [r4, #0]
 800e6e4:	4632      	mov	r2, r6
 800e6e6:	4641      	mov	r1, r8
 800e6e8:	f7ff fd10 	bl	800e10c <memmove>
 800e6ec:	68a3      	ldr	r3, [r4, #8]
 800e6ee:	1b9b      	subs	r3, r3, r6
 800e6f0:	60a3      	str	r3, [r4, #8]
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	4433      	add	r3, r6
 800e6f6:	6023      	str	r3, [r4, #0]
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	e7db      	b.n	800e6b4 <__ssputs_r+0x58>
 800e6fc:	462a      	mov	r2, r5
 800e6fe:	f000 fe7b 	bl	800f3f8 <_realloc_r>
 800e702:	4606      	mov	r6, r0
 800e704:	2800      	cmp	r0, #0
 800e706:	d1e1      	bne.n	800e6cc <__ssputs_r+0x70>
 800e708:	6921      	ldr	r1, [r4, #16]
 800e70a:	4650      	mov	r0, sl
 800e70c:	f7ff fec6 	bl	800e49c <_free_r>
 800e710:	e7c7      	b.n	800e6a2 <__ssputs_r+0x46>
	...

0800e714 <_svfiprintf_r>:
 800e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	4698      	mov	r8, r3
 800e71a:	898b      	ldrh	r3, [r1, #12]
 800e71c:	061b      	lsls	r3, r3, #24
 800e71e:	b09d      	sub	sp, #116	; 0x74
 800e720:	4607      	mov	r7, r0
 800e722:	460d      	mov	r5, r1
 800e724:	4614      	mov	r4, r2
 800e726:	d50e      	bpl.n	800e746 <_svfiprintf_r+0x32>
 800e728:	690b      	ldr	r3, [r1, #16]
 800e72a:	b963      	cbnz	r3, 800e746 <_svfiprintf_r+0x32>
 800e72c:	2140      	movs	r1, #64	; 0x40
 800e72e:	f7ff ff21 	bl	800e574 <_malloc_r>
 800e732:	6028      	str	r0, [r5, #0]
 800e734:	6128      	str	r0, [r5, #16]
 800e736:	b920      	cbnz	r0, 800e742 <_svfiprintf_r+0x2e>
 800e738:	230c      	movs	r3, #12
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	f04f 30ff 	mov.w	r0, #4294967295
 800e740:	e0d1      	b.n	800e8e6 <_svfiprintf_r+0x1d2>
 800e742:	2340      	movs	r3, #64	; 0x40
 800e744:	616b      	str	r3, [r5, #20]
 800e746:	2300      	movs	r3, #0
 800e748:	9309      	str	r3, [sp, #36]	; 0x24
 800e74a:	2320      	movs	r3, #32
 800e74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e750:	f8cd 800c 	str.w	r8, [sp, #12]
 800e754:	2330      	movs	r3, #48	; 0x30
 800e756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e900 <_svfiprintf_r+0x1ec>
 800e75a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e75e:	f04f 0901 	mov.w	r9, #1
 800e762:	4623      	mov	r3, r4
 800e764:	469a      	mov	sl, r3
 800e766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e76a:	b10a      	cbz	r2, 800e770 <_svfiprintf_r+0x5c>
 800e76c:	2a25      	cmp	r2, #37	; 0x25
 800e76e:	d1f9      	bne.n	800e764 <_svfiprintf_r+0x50>
 800e770:	ebba 0b04 	subs.w	fp, sl, r4
 800e774:	d00b      	beq.n	800e78e <_svfiprintf_r+0x7a>
 800e776:	465b      	mov	r3, fp
 800e778:	4622      	mov	r2, r4
 800e77a:	4629      	mov	r1, r5
 800e77c:	4638      	mov	r0, r7
 800e77e:	f7ff ff6d 	bl	800e65c <__ssputs_r>
 800e782:	3001      	adds	r0, #1
 800e784:	f000 80aa 	beq.w	800e8dc <_svfiprintf_r+0x1c8>
 800e788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e78a:	445a      	add	r2, fp
 800e78c:	9209      	str	r2, [sp, #36]	; 0x24
 800e78e:	f89a 3000 	ldrb.w	r3, [sl]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 80a2 	beq.w	800e8dc <_svfiprintf_r+0x1c8>
 800e798:	2300      	movs	r3, #0
 800e79a:	f04f 32ff 	mov.w	r2, #4294967295
 800e79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7a2:	f10a 0a01 	add.w	sl, sl, #1
 800e7a6:	9304      	str	r3, [sp, #16]
 800e7a8:	9307      	str	r3, [sp, #28]
 800e7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7ae:	931a      	str	r3, [sp, #104]	; 0x68
 800e7b0:	4654      	mov	r4, sl
 800e7b2:	2205      	movs	r2, #5
 800e7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7b8:	4851      	ldr	r0, [pc, #324]	; (800e900 <_svfiprintf_r+0x1ec>)
 800e7ba:	f7f1 fd29 	bl	8000210 <memchr>
 800e7be:	9a04      	ldr	r2, [sp, #16]
 800e7c0:	b9d8      	cbnz	r0, 800e7fa <_svfiprintf_r+0xe6>
 800e7c2:	06d0      	lsls	r0, r2, #27
 800e7c4:	bf44      	itt	mi
 800e7c6:	2320      	movmi	r3, #32
 800e7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7cc:	0711      	lsls	r1, r2, #28
 800e7ce:	bf44      	itt	mi
 800e7d0:	232b      	movmi	r3, #43	; 0x2b
 800e7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7da:	2b2a      	cmp	r3, #42	; 0x2a
 800e7dc:	d015      	beq.n	800e80a <_svfiprintf_r+0xf6>
 800e7de:	9a07      	ldr	r2, [sp, #28]
 800e7e0:	4654      	mov	r4, sl
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	f04f 0c0a 	mov.w	ip, #10
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ee:	3b30      	subs	r3, #48	; 0x30
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	d94e      	bls.n	800e892 <_svfiprintf_r+0x17e>
 800e7f4:	b1b0      	cbz	r0, 800e824 <_svfiprintf_r+0x110>
 800e7f6:	9207      	str	r2, [sp, #28]
 800e7f8:	e014      	b.n	800e824 <_svfiprintf_r+0x110>
 800e7fa:	eba0 0308 	sub.w	r3, r0, r8
 800e7fe:	fa09 f303 	lsl.w	r3, r9, r3
 800e802:	4313      	orrs	r3, r2
 800e804:	9304      	str	r3, [sp, #16]
 800e806:	46a2      	mov	sl, r4
 800e808:	e7d2      	b.n	800e7b0 <_svfiprintf_r+0x9c>
 800e80a:	9b03      	ldr	r3, [sp, #12]
 800e80c:	1d19      	adds	r1, r3, #4
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	9103      	str	r1, [sp, #12]
 800e812:	2b00      	cmp	r3, #0
 800e814:	bfbb      	ittet	lt
 800e816:	425b      	neglt	r3, r3
 800e818:	f042 0202 	orrlt.w	r2, r2, #2
 800e81c:	9307      	strge	r3, [sp, #28]
 800e81e:	9307      	strlt	r3, [sp, #28]
 800e820:	bfb8      	it	lt
 800e822:	9204      	strlt	r2, [sp, #16]
 800e824:	7823      	ldrb	r3, [r4, #0]
 800e826:	2b2e      	cmp	r3, #46	; 0x2e
 800e828:	d10c      	bne.n	800e844 <_svfiprintf_r+0x130>
 800e82a:	7863      	ldrb	r3, [r4, #1]
 800e82c:	2b2a      	cmp	r3, #42	; 0x2a
 800e82e:	d135      	bne.n	800e89c <_svfiprintf_r+0x188>
 800e830:	9b03      	ldr	r3, [sp, #12]
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	9203      	str	r2, [sp, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfb8      	it	lt
 800e83c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e840:	3402      	adds	r4, #2
 800e842:	9305      	str	r3, [sp, #20]
 800e844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e910 <_svfiprintf_r+0x1fc>
 800e848:	7821      	ldrb	r1, [r4, #0]
 800e84a:	2203      	movs	r2, #3
 800e84c:	4650      	mov	r0, sl
 800e84e:	f7f1 fcdf 	bl	8000210 <memchr>
 800e852:	b140      	cbz	r0, 800e866 <_svfiprintf_r+0x152>
 800e854:	2340      	movs	r3, #64	; 0x40
 800e856:	eba0 000a 	sub.w	r0, r0, sl
 800e85a:	fa03 f000 	lsl.w	r0, r3, r0
 800e85e:	9b04      	ldr	r3, [sp, #16]
 800e860:	4303      	orrs	r3, r0
 800e862:	3401      	adds	r4, #1
 800e864:	9304      	str	r3, [sp, #16]
 800e866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86a:	4826      	ldr	r0, [pc, #152]	; (800e904 <_svfiprintf_r+0x1f0>)
 800e86c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e870:	2206      	movs	r2, #6
 800e872:	f7f1 fccd 	bl	8000210 <memchr>
 800e876:	2800      	cmp	r0, #0
 800e878:	d038      	beq.n	800e8ec <_svfiprintf_r+0x1d8>
 800e87a:	4b23      	ldr	r3, [pc, #140]	; (800e908 <_svfiprintf_r+0x1f4>)
 800e87c:	bb1b      	cbnz	r3, 800e8c6 <_svfiprintf_r+0x1b2>
 800e87e:	9b03      	ldr	r3, [sp, #12]
 800e880:	3307      	adds	r3, #7
 800e882:	f023 0307 	bic.w	r3, r3, #7
 800e886:	3308      	adds	r3, #8
 800e888:	9303      	str	r3, [sp, #12]
 800e88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e88c:	4433      	add	r3, r6
 800e88e:	9309      	str	r3, [sp, #36]	; 0x24
 800e890:	e767      	b.n	800e762 <_svfiprintf_r+0x4e>
 800e892:	fb0c 3202 	mla	r2, ip, r2, r3
 800e896:	460c      	mov	r4, r1
 800e898:	2001      	movs	r0, #1
 800e89a:	e7a5      	b.n	800e7e8 <_svfiprintf_r+0xd4>
 800e89c:	2300      	movs	r3, #0
 800e89e:	3401      	adds	r4, #1
 800e8a0:	9305      	str	r3, [sp, #20]
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	f04f 0c0a 	mov.w	ip, #10
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8ae:	3a30      	subs	r2, #48	; 0x30
 800e8b0:	2a09      	cmp	r2, #9
 800e8b2:	d903      	bls.n	800e8bc <_svfiprintf_r+0x1a8>
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d0c5      	beq.n	800e844 <_svfiprintf_r+0x130>
 800e8b8:	9105      	str	r1, [sp, #20]
 800e8ba:	e7c3      	b.n	800e844 <_svfiprintf_r+0x130>
 800e8bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e7f0      	b.n	800e8a8 <_svfiprintf_r+0x194>
 800e8c6:	ab03      	add	r3, sp, #12
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	462a      	mov	r2, r5
 800e8cc:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <_svfiprintf_r+0x1f8>)
 800e8ce:	a904      	add	r1, sp, #16
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	f3af 8000 	nop.w
 800e8d6:	1c42      	adds	r2, r0, #1
 800e8d8:	4606      	mov	r6, r0
 800e8da:	d1d6      	bne.n	800e88a <_svfiprintf_r+0x176>
 800e8dc:	89ab      	ldrh	r3, [r5, #12]
 800e8de:	065b      	lsls	r3, r3, #25
 800e8e0:	f53f af2c 	bmi.w	800e73c <_svfiprintf_r+0x28>
 800e8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8e6:	b01d      	add	sp, #116	; 0x74
 800e8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ec:	ab03      	add	r3, sp, #12
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	4b06      	ldr	r3, [pc, #24]	; (800e90c <_svfiprintf_r+0x1f8>)
 800e8f4:	a904      	add	r1, sp, #16
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f000 f9d4 	bl	800eca4 <_printf_i>
 800e8fc:	e7eb      	b.n	800e8d6 <_svfiprintf_r+0x1c2>
 800e8fe:	bf00      	nop
 800e900:	080121ac 	.word	0x080121ac
 800e904:	080121b6 	.word	0x080121b6
 800e908:	00000000 	.word	0x00000000
 800e90c:	0800e65d 	.word	0x0800e65d
 800e910:	080121b2 	.word	0x080121b2

0800e914 <__sfputc_r>:
 800e914:	6893      	ldr	r3, [r2, #8]
 800e916:	3b01      	subs	r3, #1
 800e918:	2b00      	cmp	r3, #0
 800e91a:	b410      	push	{r4}
 800e91c:	6093      	str	r3, [r2, #8]
 800e91e:	da08      	bge.n	800e932 <__sfputc_r+0x1e>
 800e920:	6994      	ldr	r4, [r2, #24]
 800e922:	42a3      	cmp	r3, r4
 800e924:	db01      	blt.n	800e92a <__sfputc_r+0x16>
 800e926:	290a      	cmp	r1, #10
 800e928:	d103      	bne.n	800e932 <__sfputc_r+0x1e>
 800e92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e92e:	f000 bb33 	b.w	800ef98 <__swbuf_r>
 800e932:	6813      	ldr	r3, [r2, #0]
 800e934:	1c58      	adds	r0, r3, #1
 800e936:	6010      	str	r0, [r2, #0]
 800e938:	7019      	strb	r1, [r3, #0]
 800e93a:	4608      	mov	r0, r1
 800e93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <__sfputs_r>:
 800e942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e944:	4606      	mov	r6, r0
 800e946:	460f      	mov	r7, r1
 800e948:	4614      	mov	r4, r2
 800e94a:	18d5      	adds	r5, r2, r3
 800e94c:	42ac      	cmp	r4, r5
 800e94e:	d101      	bne.n	800e954 <__sfputs_r+0x12>
 800e950:	2000      	movs	r0, #0
 800e952:	e007      	b.n	800e964 <__sfputs_r+0x22>
 800e954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e958:	463a      	mov	r2, r7
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff ffda 	bl	800e914 <__sfputc_r>
 800e960:	1c43      	adds	r3, r0, #1
 800e962:	d1f3      	bne.n	800e94c <__sfputs_r+0xa>
 800e964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e968 <_vfiprintf_r>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	460d      	mov	r5, r1
 800e96e:	b09d      	sub	sp, #116	; 0x74
 800e970:	4614      	mov	r4, r2
 800e972:	4698      	mov	r8, r3
 800e974:	4606      	mov	r6, r0
 800e976:	b118      	cbz	r0, 800e980 <_vfiprintf_r+0x18>
 800e978:	6983      	ldr	r3, [r0, #24]
 800e97a:	b90b      	cbnz	r3, 800e980 <_vfiprintf_r+0x18>
 800e97c:	f7ff fcd4 	bl	800e328 <__sinit>
 800e980:	4b89      	ldr	r3, [pc, #548]	; (800eba8 <_vfiprintf_r+0x240>)
 800e982:	429d      	cmp	r5, r3
 800e984:	d11b      	bne.n	800e9be <_vfiprintf_r+0x56>
 800e986:	6875      	ldr	r5, [r6, #4]
 800e988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e98a:	07d9      	lsls	r1, r3, #31
 800e98c:	d405      	bmi.n	800e99a <_vfiprintf_r+0x32>
 800e98e:	89ab      	ldrh	r3, [r5, #12]
 800e990:	059a      	lsls	r2, r3, #22
 800e992:	d402      	bmi.n	800e99a <_vfiprintf_r+0x32>
 800e994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e996:	f7ff fd77 	bl	800e488 <__retarget_lock_acquire_recursive>
 800e99a:	89ab      	ldrh	r3, [r5, #12]
 800e99c:	071b      	lsls	r3, r3, #28
 800e99e:	d501      	bpl.n	800e9a4 <_vfiprintf_r+0x3c>
 800e9a0:	692b      	ldr	r3, [r5, #16]
 800e9a2:	b9eb      	cbnz	r3, 800e9e0 <_vfiprintf_r+0x78>
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f000 fb5a 	bl	800f060 <__swsetup_r>
 800e9ac:	b1c0      	cbz	r0, 800e9e0 <_vfiprintf_r+0x78>
 800e9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9b0:	07dc      	lsls	r4, r3, #31
 800e9b2:	d50e      	bpl.n	800e9d2 <_vfiprintf_r+0x6a>
 800e9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b8:	b01d      	add	sp, #116	; 0x74
 800e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9be:	4b7b      	ldr	r3, [pc, #492]	; (800ebac <_vfiprintf_r+0x244>)
 800e9c0:	429d      	cmp	r5, r3
 800e9c2:	d101      	bne.n	800e9c8 <_vfiprintf_r+0x60>
 800e9c4:	68b5      	ldr	r5, [r6, #8]
 800e9c6:	e7df      	b.n	800e988 <_vfiprintf_r+0x20>
 800e9c8:	4b79      	ldr	r3, [pc, #484]	; (800ebb0 <_vfiprintf_r+0x248>)
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	bf08      	it	eq
 800e9ce:	68f5      	ldreq	r5, [r6, #12]
 800e9d0:	e7da      	b.n	800e988 <_vfiprintf_r+0x20>
 800e9d2:	89ab      	ldrh	r3, [r5, #12]
 800e9d4:	0598      	lsls	r0, r3, #22
 800e9d6:	d4ed      	bmi.n	800e9b4 <_vfiprintf_r+0x4c>
 800e9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9da:	f7ff fd56 	bl	800e48a <__retarget_lock_release_recursive>
 800e9de:	e7e9      	b.n	800e9b4 <_vfiprintf_r+0x4c>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e4:	2320      	movs	r3, #32
 800e9e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9ee:	2330      	movs	r3, #48	; 0x30
 800e9f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebb4 <_vfiprintf_r+0x24c>
 800e9f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9f8:	f04f 0901 	mov.w	r9, #1
 800e9fc:	4623      	mov	r3, r4
 800e9fe:	469a      	mov	sl, r3
 800ea00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea04:	b10a      	cbz	r2, 800ea0a <_vfiprintf_r+0xa2>
 800ea06:	2a25      	cmp	r2, #37	; 0x25
 800ea08:	d1f9      	bne.n	800e9fe <_vfiprintf_r+0x96>
 800ea0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea0e:	d00b      	beq.n	800ea28 <_vfiprintf_r+0xc0>
 800ea10:	465b      	mov	r3, fp
 800ea12:	4622      	mov	r2, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7ff ff93 	bl	800e942 <__sfputs_r>
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	f000 80aa 	beq.w	800eb76 <_vfiprintf_r+0x20e>
 800ea22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea24:	445a      	add	r2, fp
 800ea26:	9209      	str	r2, [sp, #36]	; 0x24
 800ea28:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f000 80a2 	beq.w	800eb76 <_vfiprintf_r+0x20e>
 800ea32:	2300      	movs	r3, #0
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295
 800ea38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea3c:	f10a 0a01 	add.w	sl, sl, #1
 800ea40:	9304      	str	r3, [sp, #16]
 800ea42:	9307      	str	r3, [sp, #28]
 800ea44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea48:	931a      	str	r3, [sp, #104]	; 0x68
 800ea4a:	4654      	mov	r4, sl
 800ea4c:	2205      	movs	r2, #5
 800ea4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea52:	4858      	ldr	r0, [pc, #352]	; (800ebb4 <_vfiprintf_r+0x24c>)
 800ea54:	f7f1 fbdc 	bl	8000210 <memchr>
 800ea58:	9a04      	ldr	r2, [sp, #16]
 800ea5a:	b9d8      	cbnz	r0, 800ea94 <_vfiprintf_r+0x12c>
 800ea5c:	06d1      	lsls	r1, r2, #27
 800ea5e:	bf44      	itt	mi
 800ea60:	2320      	movmi	r3, #32
 800ea62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea66:	0713      	lsls	r3, r2, #28
 800ea68:	bf44      	itt	mi
 800ea6a:	232b      	movmi	r3, #43	; 0x2b
 800ea6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b2a      	cmp	r3, #42	; 0x2a
 800ea76:	d015      	beq.n	800eaa4 <_vfiprintf_r+0x13c>
 800ea78:	9a07      	ldr	r2, [sp, #28]
 800ea7a:	4654      	mov	r4, sl
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f04f 0c0a 	mov.w	ip, #10
 800ea82:	4621      	mov	r1, r4
 800ea84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea88:	3b30      	subs	r3, #48	; 0x30
 800ea8a:	2b09      	cmp	r3, #9
 800ea8c:	d94e      	bls.n	800eb2c <_vfiprintf_r+0x1c4>
 800ea8e:	b1b0      	cbz	r0, 800eabe <_vfiprintf_r+0x156>
 800ea90:	9207      	str	r2, [sp, #28]
 800ea92:	e014      	b.n	800eabe <_vfiprintf_r+0x156>
 800ea94:	eba0 0308 	sub.w	r3, r0, r8
 800ea98:	fa09 f303 	lsl.w	r3, r9, r3
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	46a2      	mov	sl, r4
 800eaa2:	e7d2      	b.n	800ea4a <_vfiprintf_r+0xe2>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	1d19      	adds	r1, r3, #4
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	9103      	str	r1, [sp, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	bfbb      	ittet	lt
 800eab0:	425b      	neglt	r3, r3
 800eab2:	f042 0202 	orrlt.w	r2, r2, #2
 800eab6:	9307      	strge	r3, [sp, #28]
 800eab8:	9307      	strlt	r3, [sp, #28]
 800eaba:	bfb8      	it	lt
 800eabc:	9204      	strlt	r2, [sp, #16]
 800eabe:	7823      	ldrb	r3, [r4, #0]
 800eac0:	2b2e      	cmp	r3, #46	; 0x2e
 800eac2:	d10c      	bne.n	800eade <_vfiprintf_r+0x176>
 800eac4:	7863      	ldrb	r3, [r4, #1]
 800eac6:	2b2a      	cmp	r3, #42	; 0x2a
 800eac8:	d135      	bne.n	800eb36 <_vfiprintf_r+0x1ce>
 800eaca:	9b03      	ldr	r3, [sp, #12]
 800eacc:	1d1a      	adds	r2, r3, #4
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	9203      	str	r2, [sp, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	bfb8      	it	lt
 800ead6:	f04f 33ff 	movlt.w	r3, #4294967295
 800eada:	3402      	adds	r4, #2
 800eadc:	9305      	str	r3, [sp, #20]
 800eade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ebc4 <_vfiprintf_r+0x25c>
 800eae2:	7821      	ldrb	r1, [r4, #0]
 800eae4:	2203      	movs	r2, #3
 800eae6:	4650      	mov	r0, sl
 800eae8:	f7f1 fb92 	bl	8000210 <memchr>
 800eaec:	b140      	cbz	r0, 800eb00 <_vfiprintf_r+0x198>
 800eaee:	2340      	movs	r3, #64	; 0x40
 800eaf0:	eba0 000a 	sub.w	r0, r0, sl
 800eaf4:	fa03 f000 	lsl.w	r0, r3, r0
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	4303      	orrs	r3, r0
 800eafc:	3401      	adds	r4, #1
 800eafe:	9304      	str	r3, [sp, #16]
 800eb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb04:	482c      	ldr	r0, [pc, #176]	; (800ebb8 <_vfiprintf_r+0x250>)
 800eb06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb0a:	2206      	movs	r2, #6
 800eb0c:	f7f1 fb80 	bl	8000210 <memchr>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d03f      	beq.n	800eb94 <_vfiprintf_r+0x22c>
 800eb14:	4b29      	ldr	r3, [pc, #164]	; (800ebbc <_vfiprintf_r+0x254>)
 800eb16:	bb1b      	cbnz	r3, 800eb60 <_vfiprintf_r+0x1f8>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	3307      	adds	r3, #7
 800eb1c:	f023 0307 	bic.w	r3, r3, #7
 800eb20:	3308      	adds	r3, #8
 800eb22:	9303      	str	r3, [sp, #12]
 800eb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb26:	443b      	add	r3, r7
 800eb28:	9309      	str	r3, [sp, #36]	; 0x24
 800eb2a:	e767      	b.n	800e9fc <_vfiprintf_r+0x94>
 800eb2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb30:	460c      	mov	r4, r1
 800eb32:	2001      	movs	r0, #1
 800eb34:	e7a5      	b.n	800ea82 <_vfiprintf_r+0x11a>
 800eb36:	2300      	movs	r3, #0
 800eb38:	3401      	adds	r4, #1
 800eb3a:	9305      	str	r3, [sp, #20]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	f04f 0c0a 	mov.w	ip, #10
 800eb42:	4620      	mov	r0, r4
 800eb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb48:	3a30      	subs	r2, #48	; 0x30
 800eb4a:	2a09      	cmp	r2, #9
 800eb4c:	d903      	bls.n	800eb56 <_vfiprintf_r+0x1ee>
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0c5      	beq.n	800eade <_vfiprintf_r+0x176>
 800eb52:	9105      	str	r1, [sp, #20]
 800eb54:	e7c3      	b.n	800eade <_vfiprintf_r+0x176>
 800eb56:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e7f0      	b.n	800eb42 <_vfiprintf_r+0x1da>
 800eb60:	ab03      	add	r3, sp, #12
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	462a      	mov	r2, r5
 800eb66:	4b16      	ldr	r3, [pc, #88]	; (800ebc0 <_vfiprintf_r+0x258>)
 800eb68:	a904      	add	r1, sp, #16
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f3af 8000 	nop.w
 800eb70:	4607      	mov	r7, r0
 800eb72:	1c78      	adds	r0, r7, #1
 800eb74:	d1d6      	bne.n	800eb24 <_vfiprintf_r+0x1bc>
 800eb76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb78:	07d9      	lsls	r1, r3, #31
 800eb7a:	d405      	bmi.n	800eb88 <_vfiprintf_r+0x220>
 800eb7c:	89ab      	ldrh	r3, [r5, #12]
 800eb7e:	059a      	lsls	r2, r3, #22
 800eb80:	d402      	bmi.n	800eb88 <_vfiprintf_r+0x220>
 800eb82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb84:	f7ff fc81 	bl	800e48a <__retarget_lock_release_recursive>
 800eb88:	89ab      	ldrh	r3, [r5, #12]
 800eb8a:	065b      	lsls	r3, r3, #25
 800eb8c:	f53f af12 	bmi.w	800e9b4 <_vfiprintf_r+0x4c>
 800eb90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb92:	e711      	b.n	800e9b8 <_vfiprintf_r+0x50>
 800eb94:	ab03      	add	r3, sp, #12
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	462a      	mov	r2, r5
 800eb9a:	4b09      	ldr	r3, [pc, #36]	; (800ebc0 <_vfiprintf_r+0x258>)
 800eb9c:	a904      	add	r1, sp, #16
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f000 f880 	bl	800eca4 <_printf_i>
 800eba4:	e7e4      	b.n	800eb70 <_vfiprintf_r+0x208>
 800eba6:	bf00      	nop
 800eba8:	0801216c 	.word	0x0801216c
 800ebac:	0801218c 	.word	0x0801218c
 800ebb0:	0801214c 	.word	0x0801214c
 800ebb4:	080121ac 	.word	0x080121ac
 800ebb8:	080121b6 	.word	0x080121b6
 800ebbc:	00000000 	.word	0x00000000
 800ebc0:	0800e943 	.word	0x0800e943
 800ebc4:	080121b2 	.word	0x080121b2

0800ebc8 <_printf_common>:
 800ebc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebcc:	4616      	mov	r6, r2
 800ebce:	4699      	mov	r9, r3
 800ebd0:	688a      	ldr	r2, [r1, #8]
 800ebd2:	690b      	ldr	r3, [r1, #16]
 800ebd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	bfb8      	it	lt
 800ebdc:	4613      	movlt	r3, r2
 800ebde:	6033      	str	r3, [r6, #0]
 800ebe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebe4:	4607      	mov	r7, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b10a      	cbz	r2, 800ebee <_printf_common+0x26>
 800ebea:	3301      	adds	r3, #1
 800ebec:	6033      	str	r3, [r6, #0]
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	0699      	lsls	r1, r3, #26
 800ebf2:	bf42      	ittt	mi
 800ebf4:	6833      	ldrmi	r3, [r6, #0]
 800ebf6:	3302      	addmi	r3, #2
 800ebf8:	6033      	strmi	r3, [r6, #0]
 800ebfa:	6825      	ldr	r5, [r4, #0]
 800ebfc:	f015 0506 	ands.w	r5, r5, #6
 800ec00:	d106      	bne.n	800ec10 <_printf_common+0x48>
 800ec02:	f104 0a19 	add.w	sl, r4, #25
 800ec06:	68e3      	ldr	r3, [r4, #12]
 800ec08:	6832      	ldr	r2, [r6, #0]
 800ec0a:	1a9b      	subs	r3, r3, r2
 800ec0c:	42ab      	cmp	r3, r5
 800ec0e:	dc26      	bgt.n	800ec5e <_printf_common+0x96>
 800ec10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec14:	1e13      	subs	r3, r2, #0
 800ec16:	6822      	ldr	r2, [r4, #0]
 800ec18:	bf18      	it	ne
 800ec1a:	2301      	movne	r3, #1
 800ec1c:	0692      	lsls	r2, r2, #26
 800ec1e:	d42b      	bmi.n	800ec78 <_printf_common+0xb0>
 800ec20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec24:	4649      	mov	r1, r9
 800ec26:	4638      	mov	r0, r7
 800ec28:	47c0      	blx	r8
 800ec2a:	3001      	adds	r0, #1
 800ec2c:	d01e      	beq.n	800ec6c <_printf_common+0xa4>
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	68e5      	ldr	r5, [r4, #12]
 800ec32:	6832      	ldr	r2, [r6, #0]
 800ec34:	f003 0306 	and.w	r3, r3, #6
 800ec38:	2b04      	cmp	r3, #4
 800ec3a:	bf08      	it	eq
 800ec3c:	1aad      	subeq	r5, r5, r2
 800ec3e:	68a3      	ldr	r3, [r4, #8]
 800ec40:	6922      	ldr	r2, [r4, #16]
 800ec42:	bf0c      	ite	eq
 800ec44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec48:	2500      	movne	r5, #0
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	bfc4      	itt	gt
 800ec4e:	1a9b      	subgt	r3, r3, r2
 800ec50:	18ed      	addgt	r5, r5, r3
 800ec52:	2600      	movs	r6, #0
 800ec54:	341a      	adds	r4, #26
 800ec56:	42b5      	cmp	r5, r6
 800ec58:	d11a      	bne.n	800ec90 <_printf_common+0xc8>
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	e008      	b.n	800ec70 <_printf_common+0xa8>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	4652      	mov	r2, sl
 800ec62:	4649      	mov	r1, r9
 800ec64:	4638      	mov	r0, r7
 800ec66:	47c0      	blx	r8
 800ec68:	3001      	adds	r0, #1
 800ec6a:	d103      	bne.n	800ec74 <_printf_common+0xac>
 800ec6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec74:	3501      	adds	r5, #1
 800ec76:	e7c6      	b.n	800ec06 <_printf_common+0x3e>
 800ec78:	18e1      	adds	r1, r4, r3
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	2030      	movs	r0, #48	; 0x30
 800ec7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec82:	4422      	add	r2, r4
 800ec84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec8c:	3302      	adds	r3, #2
 800ec8e:	e7c7      	b.n	800ec20 <_printf_common+0x58>
 800ec90:	2301      	movs	r3, #1
 800ec92:	4622      	mov	r2, r4
 800ec94:	4649      	mov	r1, r9
 800ec96:	4638      	mov	r0, r7
 800ec98:	47c0      	blx	r8
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	d0e6      	beq.n	800ec6c <_printf_common+0xa4>
 800ec9e:	3601      	adds	r6, #1
 800eca0:	e7d9      	b.n	800ec56 <_printf_common+0x8e>
	...

0800eca4 <_printf_i>:
 800eca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eca8:	7e0f      	ldrb	r7, [r1, #24]
 800ecaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecac:	2f78      	cmp	r7, #120	; 0x78
 800ecae:	4691      	mov	r9, r2
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	469a      	mov	sl, r3
 800ecb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecba:	d807      	bhi.n	800eccc <_printf_i+0x28>
 800ecbc:	2f62      	cmp	r7, #98	; 0x62
 800ecbe:	d80a      	bhi.n	800ecd6 <_printf_i+0x32>
 800ecc0:	2f00      	cmp	r7, #0
 800ecc2:	f000 80d8 	beq.w	800ee76 <_printf_i+0x1d2>
 800ecc6:	2f58      	cmp	r7, #88	; 0x58
 800ecc8:	f000 80a3 	beq.w	800ee12 <_printf_i+0x16e>
 800eccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecd4:	e03a      	b.n	800ed4c <_printf_i+0xa8>
 800ecd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecda:	2b15      	cmp	r3, #21
 800ecdc:	d8f6      	bhi.n	800eccc <_printf_i+0x28>
 800ecde:	a101      	add	r1, pc, #4	; (adr r1, 800ece4 <_printf_i+0x40>)
 800ece0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ece4:	0800ed3d 	.word	0x0800ed3d
 800ece8:	0800ed51 	.word	0x0800ed51
 800ecec:	0800eccd 	.word	0x0800eccd
 800ecf0:	0800eccd 	.word	0x0800eccd
 800ecf4:	0800eccd 	.word	0x0800eccd
 800ecf8:	0800eccd 	.word	0x0800eccd
 800ecfc:	0800ed51 	.word	0x0800ed51
 800ed00:	0800eccd 	.word	0x0800eccd
 800ed04:	0800eccd 	.word	0x0800eccd
 800ed08:	0800eccd 	.word	0x0800eccd
 800ed0c:	0800eccd 	.word	0x0800eccd
 800ed10:	0800ee5d 	.word	0x0800ee5d
 800ed14:	0800ed81 	.word	0x0800ed81
 800ed18:	0800ee3f 	.word	0x0800ee3f
 800ed1c:	0800eccd 	.word	0x0800eccd
 800ed20:	0800eccd 	.word	0x0800eccd
 800ed24:	0800ee7f 	.word	0x0800ee7f
 800ed28:	0800eccd 	.word	0x0800eccd
 800ed2c:	0800ed81 	.word	0x0800ed81
 800ed30:	0800eccd 	.word	0x0800eccd
 800ed34:	0800eccd 	.word	0x0800eccd
 800ed38:	0800ee47 	.word	0x0800ee47
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	1d1a      	adds	r2, r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	602a      	str	r2, [r5, #0]
 800ed44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e0a3      	b.n	800ee98 <_printf_i+0x1f4>
 800ed50:	6820      	ldr	r0, [r4, #0]
 800ed52:	6829      	ldr	r1, [r5, #0]
 800ed54:	0606      	lsls	r6, r0, #24
 800ed56:	f101 0304 	add.w	r3, r1, #4
 800ed5a:	d50a      	bpl.n	800ed72 <_printf_i+0xce>
 800ed5c:	680e      	ldr	r6, [r1, #0]
 800ed5e:	602b      	str	r3, [r5, #0]
 800ed60:	2e00      	cmp	r6, #0
 800ed62:	da03      	bge.n	800ed6c <_printf_i+0xc8>
 800ed64:	232d      	movs	r3, #45	; 0x2d
 800ed66:	4276      	negs	r6, r6
 800ed68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed6c:	485e      	ldr	r0, [pc, #376]	; (800eee8 <_printf_i+0x244>)
 800ed6e:	230a      	movs	r3, #10
 800ed70:	e019      	b.n	800eda6 <_printf_i+0x102>
 800ed72:	680e      	ldr	r6, [r1, #0]
 800ed74:	602b      	str	r3, [r5, #0]
 800ed76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed7a:	bf18      	it	ne
 800ed7c:	b236      	sxthne	r6, r6
 800ed7e:	e7ef      	b.n	800ed60 <_printf_i+0xbc>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	6820      	ldr	r0, [r4, #0]
 800ed84:	1d19      	adds	r1, r3, #4
 800ed86:	6029      	str	r1, [r5, #0]
 800ed88:	0601      	lsls	r1, r0, #24
 800ed8a:	d501      	bpl.n	800ed90 <_printf_i+0xec>
 800ed8c:	681e      	ldr	r6, [r3, #0]
 800ed8e:	e002      	b.n	800ed96 <_printf_i+0xf2>
 800ed90:	0646      	lsls	r6, r0, #25
 800ed92:	d5fb      	bpl.n	800ed8c <_printf_i+0xe8>
 800ed94:	881e      	ldrh	r6, [r3, #0]
 800ed96:	4854      	ldr	r0, [pc, #336]	; (800eee8 <_printf_i+0x244>)
 800ed98:	2f6f      	cmp	r7, #111	; 0x6f
 800ed9a:	bf0c      	ite	eq
 800ed9c:	2308      	moveq	r3, #8
 800ed9e:	230a      	movne	r3, #10
 800eda0:	2100      	movs	r1, #0
 800eda2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eda6:	6865      	ldr	r5, [r4, #4]
 800eda8:	60a5      	str	r5, [r4, #8]
 800edaa:	2d00      	cmp	r5, #0
 800edac:	bfa2      	ittt	ge
 800edae:	6821      	ldrge	r1, [r4, #0]
 800edb0:	f021 0104 	bicge.w	r1, r1, #4
 800edb4:	6021      	strge	r1, [r4, #0]
 800edb6:	b90e      	cbnz	r6, 800edbc <_printf_i+0x118>
 800edb8:	2d00      	cmp	r5, #0
 800edba:	d04d      	beq.n	800ee58 <_printf_i+0x1b4>
 800edbc:	4615      	mov	r5, r2
 800edbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800edc2:	fb03 6711 	mls	r7, r3, r1, r6
 800edc6:	5dc7      	ldrb	r7, [r0, r7]
 800edc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edcc:	4637      	mov	r7, r6
 800edce:	42bb      	cmp	r3, r7
 800edd0:	460e      	mov	r6, r1
 800edd2:	d9f4      	bls.n	800edbe <_printf_i+0x11a>
 800edd4:	2b08      	cmp	r3, #8
 800edd6:	d10b      	bne.n	800edf0 <_printf_i+0x14c>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	07de      	lsls	r6, r3, #31
 800eddc:	d508      	bpl.n	800edf0 <_printf_i+0x14c>
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	6861      	ldr	r1, [r4, #4]
 800ede2:	4299      	cmp	r1, r3
 800ede4:	bfde      	ittt	le
 800ede6:	2330      	movle	r3, #48	; 0x30
 800ede8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edf0:	1b52      	subs	r2, r2, r5
 800edf2:	6122      	str	r2, [r4, #16]
 800edf4:	f8cd a000 	str.w	sl, [sp]
 800edf8:	464b      	mov	r3, r9
 800edfa:	aa03      	add	r2, sp, #12
 800edfc:	4621      	mov	r1, r4
 800edfe:	4640      	mov	r0, r8
 800ee00:	f7ff fee2 	bl	800ebc8 <_printf_common>
 800ee04:	3001      	adds	r0, #1
 800ee06:	d14c      	bne.n	800eea2 <_printf_i+0x1fe>
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	b004      	add	sp, #16
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	4835      	ldr	r0, [pc, #212]	; (800eee8 <_printf_i+0x244>)
 800ee14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee18:	6829      	ldr	r1, [r5, #0]
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee20:	6029      	str	r1, [r5, #0]
 800ee22:	061d      	lsls	r5, r3, #24
 800ee24:	d514      	bpl.n	800ee50 <_printf_i+0x1ac>
 800ee26:	07df      	lsls	r7, r3, #31
 800ee28:	bf44      	itt	mi
 800ee2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee2e:	6023      	strmi	r3, [r4, #0]
 800ee30:	b91e      	cbnz	r6, 800ee3a <_printf_i+0x196>
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	f023 0320 	bic.w	r3, r3, #32
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	2310      	movs	r3, #16
 800ee3c:	e7b0      	b.n	800eda0 <_printf_i+0xfc>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	f043 0320 	orr.w	r3, r3, #32
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	2378      	movs	r3, #120	; 0x78
 800ee48:	4828      	ldr	r0, [pc, #160]	; (800eeec <_printf_i+0x248>)
 800ee4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee4e:	e7e3      	b.n	800ee18 <_printf_i+0x174>
 800ee50:	0659      	lsls	r1, r3, #25
 800ee52:	bf48      	it	mi
 800ee54:	b2b6      	uxthmi	r6, r6
 800ee56:	e7e6      	b.n	800ee26 <_printf_i+0x182>
 800ee58:	4615      	mov	r5, r2
 800ee5a:	e7bb      	b.n	800edd4 <_printf_i+0x130>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	6826      	ldr	r6, [r4, #0]
 800ee60:	6961      	ldr	r1, [r4, #20]
 800ee62:	1d18      	adds	r0, r3, #4
 800ee64:	6028      	str	r0, [r5, #0]
 800ee66:	0635      	lsls	r5, r6, #24
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	d501      	bpl.n	800ee70 <_printf_i+0x1cc>
 800ee6c:	6019      	str	r1, [r3, #0]
 800ee6e:	e002      	b.n	800ee76 <_printf_i+0x1d2>
 800ee70:	0670      	lsls	r0, r6, #25
 800ee72:	d5fb      	bpl.n	800ee6c <_printf_i+0x1c8>
 800ee74:	8019      	strh	r1, [r3, #0]
 800ee76:	2300      	movs	r3, #0
 800ee78:	6123      	str	r3, [r4, #16]
 800ee7a:	4615      	mov	r5, r2
 800ee7c:	e7ba      	b.n	800edf4 <_printf_i+0x150>
 800ee7e:	682b      	ldr	r3, [r5, #0]
 800ee80:	1d1a      	adds	r2, r3, #4
 800ee82:	602a      	str	r2, [r5, #0]
 800ee84:	681d      	ldr	r5, [r3, #0]
 800ee86:	6862      	ldr	r2, [r4, #4]
 800ee88:	2100      	movs	r1, #0
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f7f1 f9c0 	bl	8000210 <memchr>
 800ee90:	b108      	cbz	r0, 800ee96 <_printf_i+0x1f2>
 800ee92:	1b40      	subs	r0, r0, r5
 800ee94:	6060      	str	r0, [r4, #4]
 800ee96:	6863      	ldr	r3, [r4, #4]
 800ee98:	6123      	str	r3, [r4, #16]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eea0:	e7a8      	b.n	800edf4 <_printf_i+0x150>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	462a      	mov	r2, r5
 800eea6:	4649      	mov	r1, r9
 800eea8:	4640      	mov	r0, r8
 800eeaa:	47d0      	blx	sl
 800eeac:	3001      	adds	r0, #1
 800eeae:	d0ab      	beq.n	800ee08 <_printf_i+0x164>
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	079b      	lsls	r3, r3, #30
 800eeb4:	d413      	bmi.n	800eede <_printf_i+0x23a>
 800eeb6:	68e0      	ldr	r0, [r4, #12]
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	4298      	cmp	r0, r3
 800eebc:	bfb8      	it	lt
 800eebe:	4618      	movlt	r0, r3
 800eec0:	e7a4      	b.n	800ee0c <_printf_i+0x168>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4632      	mov	r2, r6
 800eec6:	4649      	mov	r1, r9
 800eec8:	4640      	mov	r0, r8
 800eeca:	47d0      	blx	sl
 800eecc:	3001      	adds	r0, #1
 800eece:	d09b      	beq.n	800ee08 <_printf_i+0x164>
 800eed0:	3501      	adds	r5, #1
 800eed2:	68e3      	ldr	r3, [r4, #12]
 800eed4:	9903      	ldr	r1, [sp, #12]
 800eed6:	1a5b      	subs	r3, r3, r1
 800eed8:	42ab      	cmp	r3, r5
 800eeda:	dcf2      	bgt.n	800eec2 <_printf_i+0x21e>
 800eedc:	e7eb      	b.n	800eeb6 <_printf_i+0x212>
 800eede:	2500      	movs	r5, #0
 800eee0:	f104 0619 	add.w	r6, r4, #25
 800eee4:	e7f5      	b.n	800eed2 <_printf_i+0x22e>
 800eee6:	bf00      	nop
 800eee8:	080121bd 	.word	0x080121bd
 800eeec:	080121ce 	.word	0x080121ce

0800eef0 <_sbrk_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d06      	ldr	r5, [pc, #24]	; (800ef0c <_sbrk_r+0x1c>)
 800eef4:	2300      	movs	r3, #0
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	602b      	str	r3, [r5, #0]
 800eefc:	f7f1 ff36 	bl	8000d6c <_sbrk>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_sbrk_r+0x1a>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_sbrk_r+0x1a>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	200059d4 	.word	0x200059d4

0800ef10 <__sread>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	460c      	mov	r4, r1
 800ef14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef18:	f000 fa9e 	bl	800f458 <_read_r>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	bfab      	itete	ge
 800ef20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef22:	89a3      	ldrhlt	r3, [r4, #12]
 800ef24:	181b      	addge	r3, r3, r0
 800ef26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef2a:	bfac      	ite	ge
 800ef2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef2e:	81a3      	strhlt	r3, [r4, #12]
 800ef30:	bd10      	pop	{r4, pc}

0800ef32 <__swrite>:
 800ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef36:	461f      	mov	r7, r3
 800ef38:	898b      	ldrh	r3, [r1, #12]
 800ef3a:	05db      	lsls	r3, r3, #23
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	460c      	mov	r4, r1
 800ef40:	4616      	mov	r6, r2
 800ef42:	d505      	bpl.n	800ef50 <__swrite+0x1e>
 800ef44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef48:	2302      	movs	r3, #2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f000 f9d0 	bl	800f2f0 <_lseek_r>
 800ef50:	89a3      	ldrh	r3, [r4, #12]
 800ef52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef5a:	81a3      	strh	r3, [r4, #12]
 800ef5c:	4632      	mov	r2, r6
 800ef5e:	463b      	mov	r3, r7
 800ef60:	4628      	mov	r0, r5
 800ef62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef66:	f000 b869 	b.w	800f03c <_write_r>

0800ef6a <__sseek>:
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef72:	f000 f9bd 	bl	800f2f0 <_lseek_r>
 800ef76:	1c43      	adds	r3, r0, #1
 800ef78:	89a3      	ldrh	r3, [r4, #12]
 800ef7a:	bf15      	itete	ne
 800ef7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef86:	81a3      	strheq	r3, [r4, #12]
 800ef88:	bf18      	it	ne
 800ef8a:	81a3      	strhne	r3, [r4, #12]
 800ef8c:	bd10      	pop	{r4, pc}

0800ef8e <__sclose>:
 800ef8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef92:	f000 b8db 	b.w	800f14c <_close_r>
	...

0800ef98 <__swbuf_r>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	460e      	mov	r6, r1
 800ef9c:	4614      	mov	r4, r2
 800ef9e:	4605      	mov	r5, r0
 800efa0:	b118      	cbz	r0, 800efaa <__swbuf_r+0x12>
 800efa2:	6983      	ldr	r3, [r0, #24]
 800efa4:	b90b      	cbnz	r3, 800efaa <__swbuf_r+0x12>
 800efa6:	f7ff f9bf 	bl	800e328 <__sinit>
 800efaa:	4b21      	ldr	r3, [pc, #132]	; (800f030 <__swbuf_r+0x98>)
 800efac:	429c      	cmp	r4, r3
 800efae:	d12b      	bne.n	800f008 <__swbuf_r+0x70>
 800efb0:	686c      	ldr	r4, [r5, #4]
 800efb2:	69a3      	ldr	r3, [r4, #24]
 800efb4:	60a3      	str	r3, [r4, #8]
 800efb6:	89a3      	ldrh	r3, [r4, #12]
 800efb8:	071a      	lsls	r2, r3, #28
 800efba:	d52f      	bpl.n	800f01c <__swbuf_r+0x84>
 800efbc:	6923      	ldr	r3, [r4, #16]
 800efbe:	b36b      	cbz	r3, 800f01c <__swbuf_r+0x84>
 800efc0:	6923      	ldr	r3, [r4, #16]
 800efc2:	6820      	ldr	r0, [r4, #0]
 800efc4:	1ac0      	subs	r0, r0, r3
 800efc6:	6963      	ldr	r3, [r4, #20]
 800efc8:	b2f6      	uxtb	r6, r6
 800efca:	4283      	cmp	r3, r0
 800efcc:	4637      	mov	r7, r6
 800efce:	dc04      	bgt.n	800efda <__swbuf_r+0x42>
 800efd0:	4621      	mov	r1, r4
 800efd2:	4628      	mov	r0, r5
 800efd4:	f000 f950 	bl	800f278 <_fflush_r>
 800efd8:	bb30      	cbnz	r0, 800f028 <__swbuf_r+0x90>
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	3b01      	subs	r3, #1
 800efde:	60a3      	str	r3, [r4, #8]
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	6022      	str	r2, [r4, #0]
 800efe6:	701e      	strb	r6, [r3, #0]
 800efe8:	6963      	ldr	r3, [r4, #20]
 800efea:	3001      	adds	r0, #1
 800efec:	4283      	cmp	r3, r0
 800efee:	d004      	beq.n	800effa <__swbuf_r+0x62>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	07db      	lsls	r3, r3, #31
 800eff4:	d506      	bpl.n	800f004 <__swbuf_r+0x6c>
 800eff6:	2e0a      	cmp	r6, #10
 800eff8:	d104      	bne.n	800f004 <__swbuf_r+0x6c>
 800effa:	4621      	mov	r1, r4
 800effc:	4628      	mov	r0, r5
 800effe:	f000 f93b 	bl	800f278 <_fflush_r>
 800f002:	b988      	cbnz	r0, 800f028 <__swbuf_r+0x90>
 800f004:	4638      	mov	r0, r7
 800f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f008:	4b0a      	ldr	r3, [pc, #40]	; (800f034 <__swbuf_r+0x9c>)
 800f00a:	429c      	cmp	r4, r3
 800f00c:	d101      	bne.n	800f012 <__swbuf_r+0x7a>
 800f00e:	68ac      	ldr	r4, [r5, #8]
 800f010:	e7cf      	b.n	800efb2 <__swbuf_r+0x1a>
 800f012:	4b09      	ldr	r3, [pc, #36]	; (800f038 <__swbuf_r+0xa0>)
 800f014:	429c      	cmp	r4, r3
 800f016:	bf08      	it	eq
 800f018:	68ec      	ldreq	r4, [r5, #12]
 800f01a:	e7ca      	b.n	800efb2 <__swbuf_r+0x1a>
 800f01c:	4621      	mov	r1, r4
 800f01e:	4628      	mov	r0, r5
 800f020:	f000 f81e 	bl	800f060 <__swsetup_r>
 800f024:	2800      	cmp	r0, #0
 800f026:	d0cb      	beq.n	800efc0 <__swbuf_r+0x28>
 800f028:	f04f 37ff 	mov.w	r7, #4294967295
 800f02c:	e7ea      	b.n	800f004 <__swbuf_r+0x6c>
 800f02e:	bf00      	nop
 800f030:	0801216c 	.word	0x0801216c
 800f034:	0801218c 	.word	0x0801218c
 800f038:	0801214c 	.word	0x0801214c

0800f03c <_write_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4d07      	ldr	r5, [pc, #28]	; (800f05c <_write_r+0x20>)
 800f040:	4604      	mov	r4, r0
 800f042:	4608      	mov	r0, r1
 800f044:	4611      	mov	r1, r2
 800f046:	2200      	movs	r2, #0
 800f048:	602a      	str	r2, [r5, #0]
 800f04a:	461a      	mov	r2, r3
 800f04c:	f7f1 fe3d 	bl	8000cca <_write>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_write_r+0x1e>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_write_r+0x1e>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	200059d4 	.word	0x200059d4

0800f060 <__swsetup_r>:
 800f060:	4b32      	ldr	r3, [pc, #200]	; (800f12c <__swsetup_r+0xcc>)
 800f062:	b570      	push	{r4, r5, r6, lr}
 800f064:	681d      	ldr	r5, [r3, #0]
 800f066:	4606      	mov	r6, r0
 800f068:	460c      	mov	r4, r1
 800f06a:	b125      	cbz	r5, 800f076 <__swsetup_r+0x16>
 800f06c:	69ab      	ldr	r3, [r5, #24]
 800f06e:	b913      	cbnz	r3, 800f076 <__swsetup_r+0x16>
 800f070:	4628      	mov	r0, r5
 800f072:	f7ff f959 	bl	800e328 <__sinit>
 800f076:	4b2e      	ldr	r3, [pc, #184]	; (800f130 <__swsetup_r+0xd0>)
 800f078:	429c      	cmp	r4, r3
 800f07a:	d10f      	bne.n	800f09c <__swsetup_r+0x3c>
 800f07c:	686c      	ldr	r4, [r5, #4]
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f084:	0719      	lsls	r1, r3, #28
 800f086:	d42c      	bmi.n	800f0e2 <__swsetup_r+0x82>
 800f088:	06dd      	lsls	r5, r3, #27
 800f08a:	d411      	bmi.n	800f0b0 <__swsetup_r+0x50>
 800f08c:	2309      	movs	r3, #9
 800f08e:	6033      	str	r3, [r6, #0]
 800f090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f094:	81a3      	strh	r3, [r4, #12]
 800f096:	f04f 30ff 	mov.w	r0, #4294967295
 800f09a:	e03e      	b.n	800f11a <__swsetup_r+0xba>
 800f09c:	4b25      	ldr	r3, [pc, #148]	; (800f134 <__swsetup_r+0xd4>)
 800f09e:	429c      	cmp	r4, r3
 800f0a0:	d101      	bne.n	800f0a6 <__swsetup_r+0x46>
 800f0a2:	68ac      	ldr	r4, [r5, #8]
 800f0a4:	e7eb      	b.n	800f07e <__swsetup_r+0x1e>
 800f0a6:	4b24      	ldr	r3, [pc, #144]	; (800f138 <__swsetup_r+0xd8>)
 800f0a8:	429c      	cmp	r4, r3
 800f0aa:	bf08      	it	eq
 800f0ac:	68ec      	ldreq	r4, [r5, #12]
 800f0ae:	e7e6      	b.n	800f07e <__swsetup_r+0x1e>
 800f0b0:	0758      	lsls	r0, r3, #29
 800f0b2:	d512      	bpl.n	800f0da <__swsetup_r+0x7a>
 800f0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0b6:	b141      	cbz	r1, 800f0ca <__swsetup_r+0x6a>
 800f0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0bc:	4299      	cmp	r1, r3
 800f0be:	d002      	beq.n	800f0c6 <__swsetup_r+0x66>
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f7ff f9eb 	bl	800e49c <_free_r>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0d0:	81a3      	strh	r3, [r4, #12]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	6063      	str	r3, [r4, #4]
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	6023      	str	r3, [r4, #0]
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	f043 0308 	orr.w	r3, r3, #8
 800f0e0:	81a3      	strh	r3, [r4, #12]
 800f0e2:	6923      	ldr	r3, [r4, #16]
 800f0e4:	b94b      	cbnz	r3, 800f0fa <__swsetup_r+0x9a>
 800f0e6:	89a3      	ldrh	r3, [r4, #12]
 800f0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0f0:	d003      	beq.n	800f0fa <__swsetup_r+0x9a>
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f000 f933 	bl	800f360 <__smakebuf_r>
 800f0fa:	89a0      	ldrh	r0, [r4, #12]
 800f0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f100:	f010 0301 	ands.w	r3, r0, #1
 800f104:	d00a      	beq.n	800f11c <__swsetup_r+0xbc>
 800f106:	2300      	movs	r3, #0
 800f108:	60a3      	str	r3, [r4, #8]
 800f10a:	6963      	ldr	r3, [r4, #20]
 800f10c:	425b      	negs	r3, r3
 800f10e:	61a3      	str	r3, [r4, #24]
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	b943      	cbnz	r3, 800f126 <__swsetup_r+0xc6>
 800f114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f118:	d1ba      	bne.n	800f090 <__swsetup_r+0x30>
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	0781      	lsls	r1, r0, #30
 800f11e:	bf58      	it	pl
 800f120:	6963      	ldrpl	r3, [r4, #20]
 800f122:	60a3      	str	r3, [r4, #8]
 800f124:	e7f4      	b.n	800f110 <__swsetup_r+0xb0>
 800f126:	2000      	movs	r0, #0
 800f128:	e7f7      	b.n	800f11a <__swsetup_r+0xba>
 800f12a:	bf00      	nop
 800f12c:	20000014 	.word	0x20000014
 800f130:	0801216c 	.word	0x0801216c
 800f134:	0801218c 	.word	0x0801218c
 800f138:	0801214c 	.word	0x0801214c

0800f13c <abort>:
 800f13c:	b508      	push	{r3, lr}
 800f13e:	2006      	movs	r0, #6
 800f140:	f000 f9c4 	bl	800f4cc <raise>
 800f144:	2001      	movs	r0, #1
 800f146:	f7f1 fd99 	bl	8000c7c <_exit>
	...

0800f14c <_close_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4d06      	ldr	r5, [pc, #24]	; (800f168 <_close_r+0x1c>)
 800f150:	2300      	movs	r3, #0
 800f152:	4604      	mov	r4, r0
 800f154:	4608      	mov	r0, r1
 800f156:	602b      	str	r3, [r5, #0]
 800f158:	f7f1 fdd3 	bl	8000d02 <_close>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_close_r+0x1a>
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	b103      	cbz	r3, 800f166 <_close_r+0x1a>
 800f164:	6023      	str	r3, [r4, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	200059d4 	.word	0x200059d4

0800f16c <__sflush_r>:
 800f16c:	898a      	ldrh	r2, [r1, #12]
 800f16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f172:	4605      	mov	r5, r0
 800f174:	0710      	lsls	r0, r2, #28
 800f176:	460c      	mov	r4, r1
 800f178:	d458      	bmi.n	800f22c <__sflush_r+0xc0>
 800f17a:	684b      	ldr	r3, [r1, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	dc05      	bgt.n	800f18c <__sflush_r+0x20>
 800f180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f182:	2b00      	cmp	r3, #0
 800f184:	dc02      	bgt.n	800f18c <__sflush_r+0x20>
 800f186:	2000      	movs	r0, #0
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f18e:	2e00      	cmp	r6, #0
 800f190:	d0f9      	beq.n	800f186 <__sflush_r+0x1a>
 800f192:	2300      	movs	r3, #0
 800f194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f198:	682f      	ldr	r7, [r5, #0]
 800f19a:	602b      	str	r3, [r5, #0]
 800f19c:	d032      	beq.n	800f204 <__sflush_r+0x98>
 800f19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	075a      	lsls	r2, r3, #29
 800f1a4:	d505      	bpl.n	800f1b2 <__sflush_r+0x46>
 800f1a6:	6863      	ldr	r3, [r4, #4]
 800f1a8:	1ac0      	subs	r0, r0, r3
 800f1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ac:	b10b      	cbz	r3, 800f1b2 <__sflush_r+0x46>
 800f1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1b0:	1ac0      	subs	r0, r0, r3
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1b8:	6a21      	ldr	r1, [r4, #32]
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	47b0      	blx	r6
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	d106      	bne.n	800f1d2 <__sflush_r+0x66>
 800f1c4:	6829      	ldr	r1, [r5, #0]
 800f1c6:	291d      	cmp	r1, #29
 800f1c8:	d82c      	bhi.n	800f224 <__sflush_r+0xb8>
 800f1ca:	4a2a      	ldr	r2, [pc, #168]	; (800f274 <__sflush_r+0x108>)
 800f1cc:	40ca      	lsrs	r2, r1
 800f1ce:	07d6      	lsls	r6, r2, #31
 800f1d0:	d528      	bpl.n	800f224 <__sflush_r+0xb8>
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	6062      	str	r2, [r4, #4]
 800f1d6:	04d9      	lsls	r1, r3, #19
 800f1d8:	6922      	ldr	r2, [r4, #16]
 800f1da:	6022      	str	r2, [r4, #0]
 800f1dc:	d504      	bpl.n	800f1e8 <__sflush_r+0x7c>
 800f1de:	1c42      	adds	r2, r0, #1
 800f1e0:	d101      	bne.n	800f1e6 <__sflush_r+0x7a>
 800f1e2:	682b      	ldr	r3, [r5, #0]
 800f1e4:	b903      	cbnz	r3, 800f1e8 <__sflush_r+0x7c>
 800f1e6:	6560      	str	r0, [r4, #84]	; 0x54
 800f1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ea:	602f      	str	r7, [r5, #0]
 800f1ec:	2900      	cmp	r1, #0
 800f1ee:	d0ca      	beq.n	800f186 <__sflush_r+0x1a>
 800f1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f4:	4299      	cmp	r1, r3
 800f1f6:	d002      	beq.n	800f1fe <__sflush_r+0x92>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f7ff f94f 	bl	800e49c <_free_r>
 800f1fe:	2000      	movs	r0, #0
 800f200:	6360      	str	r0, [r4, #52]	; 0x34
 800f202:	e7c1      	b.n	800f188 <__sflush_r+0x1c>
 800f204:	6a21      	ldr	r1, [r4, #32]
 800f206:	2301      	movs	r3, #1
 800f208:	4628      	mov	r0, r5
 800f20a:	47b0      	blx	r6
 800f20c:	1c41      	adds	r1, r0, #1
 800f20e:	d1c7      	bne.n	800f1a0 <__sflush_r+0x34>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d0c4      	beq.n	800f1a0 <__sflush_r+0x34>
 800f216:	2b1d      	cmp	r3, #29
 800f218:	d001      	beq.n	800f21e <__sflush_r+0xb2>
 800f21a:	2b16      	cmp	r3, #22
 800f21c:	d101      	bne.n	800f222 <__sflush_r+0xb6>
 800f21e:	602f      	str	r7, [r5, #0]
 800f220:	e7b1      	b.n	800f186 <__sflush_r+0x1a>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f228:	81a3      	strh	r3, [r4, #12]
 800f22a:	e7ad      	b.n	800f188 <__sflush_r+0x1c>
 800f22c:	690f      	ldr	r7, [r1, #16]
 800f22e:	2f00      	cmp	r7, #0
 800f230:	d0a9      	beq.n	800f186 <__sflush_r+0x1a>
 800f232:	0793      	lsls	r3, r2, #30
 800f234:	680e      	ldr	r6, [r1, #0]
 800f236:	bf08      	it	eq
 800f238:	694b      	ldreq	r3, [r1, #20]
 800f23a:	600f      	str	r7, [r1, #0]
 800f23c:	bf18      	it	ne
 800f23e:	2300      	movne	r3, #0
 800f240:	eba6 0807 	sub.w	r8, r6, r7
 800f244:	608b      	str	r3, [r1, #8]
 800f246:	f1b8 0f00 	cmp.w	r8, #0
 800f24a:	dd9c      	ble.n	800f186 <__sflush_r+0x1a>
 800f24c:	6a21      	ldr	r1, [r4, #32]
 800f24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f250:	4643      	mov	r3, r8
 800f252:	463a      	mov	r2, r7
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	2800      	cmp	r0, #0
 800f25a:	dc06      	bgt.n	800f26a <__sflush_r+0xfe>
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	e78e      	b.n	800f188 <__sflush_r+0x1c>
 800f26a:	4407      	add	r7, r0
 800f26c:	eba8 0800 	sub.w	r8, r8, r0
 800f270:	e7e9      	b.n	800f246 <__sflush_r+0xda>
 800f272:	bf00      	nop
 800f274:	20400001 	.word	0x20400001

0800f278 <_fflush_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	690b      	ldr	r3, [r1, #16]
 800f27c:	4605      	mov	r5, r0
 800f27e:	460c      	mov	r4, r1
 800f280:	b913      	cbnz	r3, 800f288 <_fflush_r+0x10>
 800f282:	2500      	movs	r5, #0
 800f284:	4628      	mov	r0, r5
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	b118      	cbz	r0, 800f292 <_fflush_r+0x1a>
 800f28a:	6983      	ldr	r3, [r0, #24]
 800f28c:	b90b      	cbnz	r3, 800f292 <_fflush_r+0x1a>
 800f28e:	f7ff f84b 	bl	800e328 <__sinit>
 800f292:	4b14      	ldr	r3, [pc, #80]	; (800f2e4 <_fflush_r+0x6c>)
 800f294:	429c      	cmp	r4, r3
 800f296:	d11b      	bne.n	800f2d0 <_fflush_r+0x58>
 800f298:	686c      	ldr	r4, [r5, #4]
 800f29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d0ef      	beq.n	800f282 <_fflush_r+0xa>
 800f2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2a4:	07d0      	lsls	r0, r2, #31
 800f2a6:	d404      	bmi.n	800f2b2 <_fflush_r+0x3a>
 800f2a8:	0599      	lsls	r1, r3, #22
 800f2aa:	d402      	bmi.n	800f2b2 <_fflush_r+0x3a>
 800f2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ae:	f7ff f8eb 	bl	800e488 <__retarget_lock_acquire_recursive>
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	f7ff ff59 	bl	800f16c <__sflush_r>
 800f2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2bc:	07da      	lsls	r2, r3, #31
 800f2be:	4605      	mov	r5, r0
 800f2c0:	d4e0      	bmi.n	800f284 <_fflush_r+0xc>
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	059b      	lsls	r3, r3, #22
 800f2c6:	d4dd      	bmi.n	800f284 <_fflush_r+0xc>
 800f2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ca:	f7ff f8de 	bl	800e48a <__retarget_lock_release_recursive>
 800f2ce:	e7d9      	b.n	800f284 <_fflush_r+0xc>
 800f2d0:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <_fflush_r+0x70>)
 800f2d2:	429c      	cmp	r4, r3
 800f2d4:	d101      	bne.n	800f2da <_fflush_r+0x62>
 800f2d6:	68ac      	ldr	r4, [r5, #8]
 800f2d8:	e7df      	b.n	800f29a <_fflush_r+0x22>
 800f2da:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <_fflush_r+0x74>)
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	bf08      	it	eq
 800f2e0:	68ec      	ldreq	r4, [r5, #12]
 800f2e2:	e7da      	b.n	800f29a <_fflush_r+0x22>
 800f2e4:	0801216c 	.word	0x0801216c
 800f2e8:	0801218c 	.word	0x0801218c
 800f2ec:	0801214c 	.word	0x0801214c

0800f2f0 <_lseek_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d07      	ldr	r5, [pc, #28]	; (800f310 <_lseek_r+0x20>)
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	4608      	mov	r0, r1
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	602a      	str	r2, [r5, #0]
 800f2fe:	461a      	mov	r2, r3
 800f300:	f7f1 fd26 	bl	8000d50 <_lseek>
 800f304:	1c43      	adds	r3, r0, #1
 800f306:	d102      	bne.n	800f30e <_lseek_r+0x1e>
 800f308:	682b      	ldr	r3, [r5, #0]
 800f30a:	b103      	cbz	r3, 800f30e <_lseek_r+0x1e>
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	200059d4 	.word	0x200059d4

0800f314 <__swhatbuf_r>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	460e      	mov	r6, r1
 800f318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31c:	2900      	cmp	r1, #0
 800f31e:	b096      	sub	sp, #88	; 0x58
 800f320:	4614      	mov	r4, r2
 800f322:	461d      	mov	r5, r3
 800f324:	da08      	bge.n	800f338 <__swhatbuf_r+0x24>
 800f326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	602a      	str	r2, [r5, #0]
 800f32e:	061a      	lsls	r2, r3, #24
 800f330:	d410      	bmi.n	800f354 <__swhatbuf_r+0x40>
 800f332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f336:	e00e      	b.n	800f356 <__swhatbuf_r+0x42>
 800f338:	466a      	mov	r2, sp
 800f33a:	f000 f8e3 	bl	800f504 <_fstat_r>
 800f33e:	2800      	cmp	r0, #0
 800f340:	dbf1      	blt.n	800f326 <__swhatbuf_r+0x12>
 800f342:	9a01      	ldr	r2, [sp, #4]
 800f344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f34c:	425a      	negs	r2, r3
 800f34e:	415a      	adcs	r2, r3
 800f350:	602a      	str	r2, [r5, #0]
 800f352:	e7ee      	b.n	800f332 <__swhatbuf_r+0x1e>
 800f354:	2340      	movs	r3, #64	; 0x40
 800f356:	2000      	movs	r0, #0
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	b016      	add	sp, #88	; 0x58
 800f35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f360 <__smakebuf_r>:
 800f360:	898b      	ldrh	r3, [r1, #12]
 800f362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f364:	079d      	lsls	r5, r3, #30
 800f366:	4606      	mov	r6, r0
 800f368:	460c      	mov	r4, r1
 800f36a:	d507      	bpl.n	800f37c <__smakebuf_r+0x1c>
 800f36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	6123      	str	r3, [r4, #16]
 800f374:	2301      	movs	r3, #1
 800f376:	6163      	str	r3, [r4, #20]
 800f378:	b002      	add	sp, #8
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	ab01      	add	r3, sp, #4
 800f37e:	466a      	mov	r2, sp
 800f380:	f7ff ffc8 	bl	800f314 <__swhatbuf_r>
 800f384:	9900      	ldr	r1, [sp, #0]
 800f386:	4605      	mov	r5, r0
 800f388:	4630      	mov	r0, r6
 800f38a:	f7ff f8f3 	bl	800e574 <_malloc_r>
 800f38e:	b948      	cbnz	r0, 800f3a4 <__smakebuf_r+0x44>
 800f390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f394:	059a      	lsls	r2, r3, #22
 800f396:	d4ef      	bmi.n	800f378 <__smakebuf_r+0x18>
 800f398:	f023 0303 	bic.w	r3, r3, #3
 800f39c:	f043 0302 	orr.w	r3, r3, #2
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	e7e3      	b.n	800f36c <__smakebuf_r+0xc>
 800f3a4:	4b0d      	ldr	r3, [pc, #52]	; (800f3dc <__smakebuf_r+0x7c>)
 800f3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	6020      	str	r0, [r4, #0]
 800f3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b0:	81a3      	strh	r3, [r4, #12]
 800f3b2:	9b00      	ldr	r3, [sp, #0]
 800f3b4:	6163      	str	r3, [r4, #20]
 800f3b6:	9b01      	ldr	r3, [sp, #4]
 800f3b8:	6120      	str	r0, [r4, #16]
 800f3ba:	b15b      	cbz	r3, 800f3d4 <__smakebuf_r+0x74>
 800f3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f000 f8b1 	bl	800f528 <_isatty_r>
 800f3c6:	b128      	cbz	r0, 800f3d4 <__smakebuf_r+0x74>
 800f3c8:	89a3      	ldrh	r3, [r4, #12]
 800f3ca:	f023 0303 	bic.w	r3, r3, #3
 800f3ce:	f043 0301 	orr.w	r3, r3, #1
 800f3d2:	81a3      	strh	r3, [r4, #12]
 800f3d4:	89a0      	ldrh	r0, [r4, #12]
 800f3d6:	4305      	orrs	r5, r0
 800f3d8:	81a5      	strh	r5, [r4, #12]
 800f3da:	e7cd      	b.n	800f378 <__smakebuf_r+0x18>
 800f3dc:	0800e2c1 	.word	0x0800e2c1

0800f3e0 <__malloc_lock>:
 800f3e0:	4801      	ldr	r0, [pc, #4]	; (800f3e8 <__malloc_lock+0x8>)
 800f3e2:	f7ff b851 	b.w	800e488 <__retarget_lock_acquire_recursive>
 800f3e6:	bf00      	nop
 800f3e8:	200059d8 	.word	0x200059d8

0800f3ec <__malloc_unlock>:
 800f3ec:	4801      	ldr	r0, [pc, #4]	; (800f3f4 <__malloc_unlock+0x8>)
 800f3ee:	f7ff b84c 	b.w	800e48a <__retarget_lock_release_recursive>
 800f3f2:	bf00      	nop
 800f3f4:	200059d8 	.word	0x200059d8

0800f3f8 <_realloc_r>:
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4614      	mov	r4, r2
 800f400:	460e      	mov	r6, r1
 800f402:	b921      	cbnz	r1, 800f40e <_realloc_r+0x16>
 800f404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	4611      	mov	r1, r2
 800f40a:	f7ff b8b3 	b.w	800e574 <_malloc_r>
 800f40e:	b92a      	cbnz	r2, 800f41c <_realloc_r+0x24>
 800f410:	f7ff f844 	bl	800e49c <_free_r>
 800f414:	4625      	mov	r5, r4
 800f416:	4628      	mov	r0, r5
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41c:	f000 f894 	bl	800f548 <_malloc_usable_size_r>
 800f420:	4284      	cmp	r4, r0
 800f422:	4607      	mov	r7, r0
 800f424:	d802      	bhi.n	800f42c <_realloc_r+0x34>
 800f426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f42a:	d812      	bhi.n	800f452 <_realloc_r+0x5a>
 800f42c:	4621      	mov	r1, r4
 800f42e:	4640      	mov	r0, r8
 800f430:	f7ff f8a0 	bl	800e574 <_malloc_r>
 800f434:	4605      	mov	r5, r0
 800f436:	2800      	cmp	r0, #0
 800f438:	d0ed      	beq.n	800f416 <_realloc_r+0x1e>
 800f43a:	42bc      	cmp	r4, r7
 800f43c:	4622      	mov	r2, r4
 800f43e:	4631      	mov	r1, r6
 800f440:	bf28      	it	cs
 800f442:	463a      	movcs	r2, r7
 800f444:	f7fe fe54 	bl	800e0f0 <memcpy>
 800f448:	4631      	mov	r1, r6
 800f44a:	4640      	mov	r0, r8
 800f44c:	f7ff f826 	bl	800e49c <_free_r>
 800f450:	e7e1      	b.n	800f416 <_realloc_r+0x1e>
 800f452:	4635      	mov	r5, r6
 800f454:	e7df      	b.n	800f416 <_realloc_r+0x1e>
	...

0800f458 <_read_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4d07      	ldr	r5, [pc, #28]	; (800f478 <_read_r+0x20>)
 800f45c:	4604      	mov	r4, r0
 800f45e:	4608      	mov	r0, r1
 800f460:	4611      	mov	r1, r2
 800f462:	2200      	movs	r2, #0
 800f464:	602a      	str	r2, [r5, #0]
 800f466:	461a      	mov	r2, r3
 800f468:	f7f1 fc12 	bl	8000c90 <_read>
 800f46c:	1c43      	adds	r3, r0, #1
 800f46e:	d102      	bne.n	800f476 <_read_r+0x1e>
 800f470:	682b      	ldr	r3, [r5, #0]
 800f472:	b103      	cbz	r3, 800f476 <_read_r+0x1e>
 800f474:	6023      	str	r3, [r4, #0]
 800f476:	bd38      	pop	{r3, r4, r5, pc}
 800f478:	200059d4 	.word	0x200059d4

0800f47c <_raise_r>:
 800f47c:	291f      	cmp	r1, #31
 800f47e:	b538      	push	{r3, r4, r5, lr}
 800f480:	4604      	mov	r4, r0
 800f482:	460d      	mov	r5, r1
 800f484:	d904      	bls.n	800f490 <_raise_r+0x14>
 800f486:	2316      	movs	r3, #22
 800f488:	6003      	str	r3, [r0, #0]
 800f48a:	f04f 30ff 	mov.w	r0, #4294967295
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f492:	b112      	cbz	r2, 800f49a <_raise_r+0x1e>
 800f494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f498:	b94b      	cbnz	r3, 800f4ae <_raise_r+0x32>
 800f49a:	4620      	mov	r0, r4
 800f49c:	f000 f830 	bl	800f500 <_getpid_r>
 800f4a0:	462a      	mov	r2, r5
 800f4a2:	4601      	mov	r1, r0
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4aa:	f000 b817 	b.w	800f4dc <_kill_r>
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d00a      	beq.n	800f4c8 <_raise_r+0x4c>
 800f4b2:	1c59      	adds	r1, r3, #1
 800f4b4:	d103      	bne.n	800f4be <_raise_r+0x42>
 800f4b6:	2316      	movs	r3, #22
 800f4b8:	6003      	str	r3, [r0, #0]
 800f4ba:	2001      	movs	r0, #1
 800f4bc:	e7e7      	b.n	800f48e <_raise_r+0x12>
 800f4be:	2400      	movs	r4, #0
 800f4c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	4798      	blx	r3
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	e7e0      	b.n	800f48e <_raise_r+0x12>

0800f4cc <raise>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	; (800f4d8 <raise+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f7ff bfd3 	b.w	800f47c <_raise_r>
 800f4d6:	bf00      	nop
 800f4d8:	20000014 	.word	0x20000014

0800f4dc <_kill_r>:
 800f4dc:	b538      	push	{r3, r4, r5, lr}
 800f4de:	4d07      	ldr	r5, [pc, #28]	; (800f4fc <_kill_r+0x20>)
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	4608      	mov	r0, r1
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	602b      	str	r3, [r5, #0]
 800f4ea:	f7f1 fbb5 	bl	8000c58 <_kill>
 800f4ee:	1c43      	adds	r3, r0, #1
 800f4f0:	d102      	bne.n	800f4f8 <_kill_r+0x1c>
 800f4f2:	682b      	ldr	r3, [r5, #0]
 800f4f4:	b103      	cbz	r3, 800f4f8 <_kill_r+0x1c>
 800f4f6:	6023      	str	r3, [r4, #0]
 800f4f8:	bd38      	pop	{r3, r4, r5, pc}
 800f4fa:	bf00      	nop
 800f4fc:	200059d4 	.word	0x200059d4

0800f500 <_getpid_r>:
 800f500:	f7f1 bba1 	b.w	8000c46 <_getpid>

0800f504 <_fstat_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d07      	ldr	r5, [pc, #28]	; (800f524 <_fstat_r+0x20>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	4611      	mov	r1, r2
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	f7f1 fc02 	bl	8000d1a <_fstat>
 800f516:	1c43      	adds	r3, r0, #1
 800f518:	d102      	bne.n	800f520 <_fstat_r+0x1c>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	b103      	cbz	r3, 800f520 <_fstat_r+0x1c>
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	bd38      	pop	{r3, r4, r5, pc}
 800f522:	bf00      	nop
 800f524:	200059d4 	.word	0x200059d4

0800f528 <_isatty_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d06      	ldr	r5, [pc, #24]	; (800f544 <_isatty_r+0x1c>)
 800f52c:	2300      	movs	r3, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	4608      	mov	r0, r1
 800f532:	602b      	str	r3, [r5, #0]
 800f534:	f7f1 fc01 	bl	8000d3a <_isatty>
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	d102      	bne.n	800f542 <_isatty_r+0x1a>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	b103      	cbz	r3, 800f542 <_isatty_r+0x1a>
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	bd38      	pop	{r3, r4, r5, pc}
 800f544:	200059d4 	.word	0x200059d4

0800f548 <_malloc_usable_size_r>:
 800f548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f54c:	1f18      	subs	r0, r3, #4
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bfbc      	itt	lt
 800f552:	580b      	ldrlt	r3, [r1, r0]
 800f554:	18c0      	addlt	r0, r0, r3
 800f556:	4770      	bx	lr

0800f558 <_init>:
 800f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55a:	bf00      	nop
 800f55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f55e:	bc08      	pop	{r3}
 800f560:	469e      	mov	lr, r3
 800f562:	4770      	bx	lr

0800f564 <_fini>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	bf00      	nop
 800f568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56a:	bc08      	pop	{r3}
 800f56c:	469e      	mov	lr, r3
 800f56e:	4770      	bx	lr
