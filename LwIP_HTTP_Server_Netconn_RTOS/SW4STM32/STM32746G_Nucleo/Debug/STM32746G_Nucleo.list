
STM32746G_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e850  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cbfc  0800ea20  0800ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b61c  0801b61c  0002b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b624  0801b624  0002b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b628  0801b628  0002b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  0801b62c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 000000a0  200000a4  0801b6d0  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e340  20000144  0801b770  00030144  2**2
                  ALLOC
  9 ._user_heap_stack 00000664  2000e484  0801b770  0003e484  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 11 .debug_line   0003e10a  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0003f87f  00000000  00000000  0006e27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cf5  00000000  00000000  000adafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  000b77f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011b8a4  00000000  00000000  000b9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000032b8  00000000  00000000  001d4f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0002262a  00000000  00000000  001d81c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036c09  00000000  00000000  001fa7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002313fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a08  00000000  00000000  0023144c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 000000a0  2004c000  2004c000  0003c000  2**2
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000144 	.word	0x20000144
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea08 	.word	0x0800ea08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000148 	.word	0x20000148
 800020c:	0800ea08 	.word	0x0800ea08

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr  r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800060e:	f000 fef5 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f00c ff65 	bl	800d4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f000 fcdb 	bl	8000fd0 <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800061c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000620:	0801b62c 	.word	0x0801b62c
  ldr  r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000628:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 800062c:	20000144 	.word	0x20000144
  ldr  r3, = _ebss
 8000630:	2000e484 	.word	0x2000e484

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <_sbrk+0x38>)
 800063a:	6811      	ldr	r1, [r2, #0]
{
 800063c:	b508      	push	{r3, lr}
 800063e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000640:	b909      	cbnz	r1, 8000646 <_sbrk+0xe>
		heap_end = &end;
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <_sbrk+0x3c>)
 8000644:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000646:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 800064a:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800064c:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000650:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000652:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000654:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000658:	428b      	cmp	r3, r1
 800065a:	d906      	bls.n	800066a <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800065c:	f00c ff3a 	bl	800d4d4 <__errno>
 8000660:	230c      	movs	r3, #12
 8000662:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000668:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800066a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800066c:	e7fc      	b.n	8000668 <_sbrk+0x30>
 800066e:	bf00      	nop
 8000670:	20000160 	.word	0x20000160
 8000674:	2000e488 	.word	0x2000e488

08000678 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000678:	2001      	movs	r0, #1
 800067a:	4770      	bx	lr

0800067c <_kill>:

int _kill(int pid, int sig)
{
 800067c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800067e:	f00c ff29 	bl	800d4d4 <__errno>
 8000682:	2316      	movs	r3, #22
 8000684:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	bd08      	pop	{r3, pc}

0800068c <_exit>:

void _exit (int status)
{
 800068c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800068e:	f00c ff21 	bl	800d4d4 <__errno>
 8000692:	2316      	movs	r3, #22
 8000694:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000696:	e7fe      	b.n	8000696 <_exit+0xa>

08000698 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	460d      	mov	r5, r1
 800069c:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	460e      	mov	r6, r1
 80006a0:	1b73      	subs	r3, r6, r5
 80006a2:	429c      	cmp	r4, r3
 80006a4:	dc01      	bgt.n	80006aa <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 80006a6:	4620      	mov	r0, r4
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 80006aa:	f816 0b01 	ldrb.w	r0, [r6], #1
 80006ae:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	e7f5      	b.n	80006a0 <_write+0x8>

080006b4 <_close>:

int _close(int file)
{
	return -1;
}
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	4770      	bx	lr

080006ba <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80006ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80006be:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80006c0:	604b      	str	r3, [r1, #4]
}
 80006c2:	4770      	bx	lr

080006c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006c4:	2001      	movs	r0, #1
 80006c6:	4770      	bx	lr

080006c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	4770      	bx	lr

080006cc <_read>:

int _read(int file, char *ptr, int len)
{
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	460d      	mov	r5, r1
 80006d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	460e      	mov	r6, r1
 80006d4:	1b73      	subs	r3, r6, r5
 80006d6:	429c      	cmp	r4, r3
 80006d8:	dc01      	bgt.n	80006de <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80006da:	4620      	mov	r0, r4
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80006de:	f3af 8000 	nop.w
 80006e2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	e7f5      	b.n	80006d4 <_read+0x8>

080006e8 <ethernet_link_status_updated>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
  if (netif_is_up(netif))
 80006e8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80006ec:	f013 0f01 	tst.w	r3, #1
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <ethernet_link_status_updated+0x1c>)
 80006f2:	d002      	beq.n	80006fa <ethernet_link_status_updated+0x12>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
   /* Turn On LED 3 to indicate ETH and LwIP init error */
   BSP_LED_On(LED3);
  } 
}
 80006f8:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 80006fa:	2205      	movs	r2, #5
   BSP_LED_On(LED3);
 80006fc:	2002      	movs	r0, #2
    DHCP_state = DHCP_LINK_DOWN;
 80006fe:	701a      	strb	r2, [r3, #0]
   BSP_LED_On(LED3);
 8000700:	f000 be60 	b.w	80013c4 <BSP_LED_On>
 8000704:	20000164 	.word	0x20000164

08000708 <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void const * argument)
{
 8000708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	b085      	sub	sp, #20
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 8000710:	4d1f      	ldr	r5, [pc, #124]	; (8000790 <DHCP_Thread+0x88>)
          if (dhcp->tries > MAX_DHCP_TRIES)
          {
            DHCP_state = DHCP_TIMEOUT;

            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000712:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000794 <DHCP_Thread+0x8c>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000716:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000798 <DHCP_Thread+0x90>
    switch (DHCP_state)
 800071a:	782b      	ldrb	r3, [r5, #0]
 800071c:	2b02      	cmp	r3, #2
 800071e:	b2de      	uxtb	r6, r3
 8000720:	d010      	beq.n	8000744 <DHCP_Thread+0x3c>
 8000722:	2e05      	cmp	r6, #5
 8000724:	d030      	beq.n	8000788 <DHCP_Thread+0x80>
 8000726:	2e01      	cmp	r6, #1
 8000728:	d108      	bne.n	800073c <DHCP_Thread+0x34>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 800072a:	2300      	movs	r3, #0
        dhcp_start(netif);
 800072c:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->netmask);
 800072e:	e9c4 3301 	strd	r3, r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);       
 8000732:	60e3      	str	r3, [r4, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000734:	2302      	movs	r3, #2
 8000736:	702b      	strb	r3, [r5, #0]
        dhcp_start(netif);
 8000738:	f006 fc66 	bl	8007008 <dhcp_start>
    break;
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 800073c:	20fa      	movs	r0, #250	; 0xfa
 800073e:	f003 fda6 	bl	800428e <osDelay>
    switch (DHCP_state)
 8000742:	e7ea      	b.n	800071a <DHCP_Thread+0x12>
        if (dhcp_supplied_address(netif)) 
 8000744:	4620      	mov	r0, r4
 8000746:	f006 fbf1 	bl	8006f2c <dhcp_supplied_address>
 800074a:	b140      	cbz	r0, 800075e <DHCP_Thread+0x56>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800074c:	2303      	movs	r3, #3
 800074e:	702b      	strb	r3, [r5, #0]
          BSP_LED_Off(LED3);
 8000750:	4630      	mov	r0, r6
 8000752:	f000 fe45 	bl	80013e0 <BSP_LED_Off>
          BSP_LED_On(LED1); 
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fe34 	bl	80013c4 <BSP_LED_On>
 800075c:	e7ee      	b.n	800073c <DHCP_Thread+0x34>
          if (dhcp->tries > MAX_DHCP_TRIES)
 800075e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000760:	799b      	ldrb	r3, [r3, #6]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d90e      	bls.n	8000784 <DHCP_Thread+0x7c>
            DHCP_state = DHCP_TIMEOUT;
 8000766:	2304      	movs	r3, #4
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8000768:	aa02      	add	r2, sp, #8
 800076a:	a901      	add	r1, sp, #4
 800076c:	4620      	mov	r0, r4
            DHCP_state = DHCP_TIMEOUT;
 800076e:	702b      	strb	r3, [r5, #0]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000770:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000774:	f8cd 8004 	str.w	r8, [sp, #4]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000778:	e9cd 3902 	strd	r3, r9, [sp, #8]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800077c:	ab03      	add	r3, sp, #12
 800077e:	f008 fb73 	bl	8008e68 <netif_set_addr>
            BSP_LED_Off(LED3);
 8000782:	e7e5      	b.n	8000750 <DHCP_Thread+0x48>
            BSP_LED_On(LED3);
 8000784:	4630      	mov	r0, r6
 8000786:	e7e7      	b.n	8000758 <DHCP_Thread+0x50>
      DHCP_state = DHCP_OFF; 
 8000788:	2300      	movs	r3, #0
 800078a:	702b      	strb	r3, [r5, #0]
    break;
 800078c:	e7d6      	b.n	800073c <DHCP_Thread+0x34>
 800078e:	bf00      	nop
 8000790:	20000164 	.word	0x20000164
 8000794:	0a00a8c0 	.word	0x0a00a8c0
 8000798:	0100a8c0 	.word	0x0100a8c0

0800079c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800079c:	2000      	movs	r0, #0
 800079e:	4770      	bx	lr

080007a0 <low_level_output>:
{
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	b08d      	sub	sp, #52	; 0x34
 80007a4:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4668      	mov	r0, sp
 80007ac:	f00c fef4 	bl	800d598 <memset>
  for(q = p; q != NULL; q = q->next)
 80007b0:	466a      	mov	r2, sp
 80007b2:	4623      	mov	r3, r4
  uint32_t i = 0U;
 80007b4:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 80007b6:	b9e3      	cbnz	r3, 80007f2 <low_level_output+0x52>
  TxConfig.Length = p->tot_len;
 80007b8:	4d17      	ldr	r5, [pc, #92]	; (8000818 <low_level_output+0x78>)
  pbuf_ref(p);
 80007ba:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80007bc:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 80007be:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 80007c2:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 80007c4:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 80007c6:	f008 fe8b 	bl	80094e0 <pbuf_ref>
  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 80007ca:	4629      	mov	r1, r5
 80007cc:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80007d0:	f001 fa78 	bl	8001cc4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 80007dc:	f003 fdc9 	bl	8004372 <osSemaphoreWait>
 80007e0:	4604      	mov	r4, r0
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d1f6      	bne.n	80007d4 <low_level_output+0x34>
  HAL_ETH_ReleaseTxPacket(&EthHandle);
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <low_level_output+0x7c>)
 80007e8:	f001 fb1b 	bl	8001e22 <HAL_ETH_ReleaseTxPacket>
  return errval;
 80007ec:	4620      	mov	r0, r4
}
 80007ee:	b00d      	add	sp, #52	; 0x34
 80007f0:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 80007f2:	2904      	cmp	r1, #4
 80007f4:	d00c      	beq.n	8000810 <low_level_output+0x70>
    Txbuffer[i].buffer = q->payload;
 80007f6:	6858      	ldr	r0, [r3, #4]
 80007f8:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 80007fa:	8958      	ldrh	r0, [r3, #10]
 80007fc:	6050      	str	r0, [r2, #4]
    if(i>0)
 80007fe:	b109      	cbz	r1, 8000804 <low_level_output+0x64>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000800:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b903      	cbnz	r3, 800080a <low_level_output+0x6a>
      Txbuffer[i].next = NULL;
 8000808:	6093      	str	r3, [r2, #8]
    i++;
 800080a:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 800080c:	320c      	adds	r2, #12
 800080e:	e7d2      	b.n	80007b6 <low_level_output+0x16>
      return ERR_IF;
 8000810:	f06f 000b 	mvn.w	r0, #11
 8000814:	e7eb      	b.n	80007ee <low_level_output+0x4e>
 8000816:	bf00      	nop
 8000818:	20000168 	.word	0x20000168
 800081c:	200001a0 	.word	0x200001a0

08000820 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000820:	4d10      	ldr	r5, [pc, #64]	; (8000864 <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000822:	4c11      	ldr	r4, [pc, #68]	; (8000868 <RMII_Thread+0x48>)
{
 8000824:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000826:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000828:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 800082c:	b11a      	cbz	r2, 8000836 <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 800082e:	2000      	movs	r0, #0
 8000830:	f003 fd28 	bl	8004284 <osThreadTerminate>
 8000834:	e7f7      	b.n	8000826 <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 8000836:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800083a:	2a0a      	cmp	r2, #10
 800083c:	d90e      	bls.n	800085c <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800083e:	6862      	ldr	r2, [r4, #4]
 8000840:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000844:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8000846:	6862      	ldr	r2, [r4, #4]
 8000848:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800084c:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 800084e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8000852:	f042 0201 	orr.w	r2, r2, #1
 8000856:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800085a:	e7e4      	b.n	8000826 <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f003 fd16 	bl	800428e <osDelay>
 8000862:	e7e0      	b.n	8000826 <RMII_Thread+0x6>
 8000864:	20000168 	.word	0x20000168
 8000868:	40013800 	.word	0x40013800

0800086c <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 800086c:	f000 be0c 	b.w	8001488 <HAL_GetTick>

08000870 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <ETH_PHY_IO_Init+0xc>)
{
 8000872:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000874:	f001 fc2a 	bl	80020cc <HAL_ETH_SetMDIOClockRange>
}
 8000878:	2000      	movs	r0, #0
 800087a:	bd08      	pop	{r3, pc}
 800087c:	200001a0 	.word	0x200001a0

08000880 <ETH_PHY_IO_ReadReg>:
{
 8000880:	b508      	push	{r3, lr}
 8000882:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000884:	460a      	mov	r2, r1
 8000886:	4601      	mov	r1, r0
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <ETH_PHY_IO_ReadReg+0x18>)
 800088a:	f001 fb63 	bl	8001f54 <HAL_ETH_ReadPHYRegister>
 800088e:	3800      	subs	r0, #0
 8000890:	bf18      	it	ne
 8000892:	2001      	movne	r0, #1
}
 8000894:	4240      	negs	r0, r0
 8000896:	bd08      	pop	{r3, pc}
 8000898:	200001a0 	.word	0x200001a0

0800089c <ETH_PHY_IO_WriteReg>:
{
 800089c:	b508      	push	{r3, lr}
 800089e:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80008a0:	460a      	mov	r2, r1
 80008a2:	4601      	mov	r1, r0
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <ETH_PHY_IO_WriteReg+0x18>)
 80008a6:	f001 fb7d 	bl	8001fa4 <HAL_ETH_WritePHYRegister>
 80008aa:	3800      	subs	r0, #0
 80008ac:	bf18      	it	ne
 80008ae:	2001      	movne	r0, #1
}
 80008b0:	4240      	negs	r0, r0
 80008b2:	bd08      	pop	{r3, pc}
 80008b4:	200001a0 	.word	0x200001a0

080008b8 <pbuf_free_custom>:
{
 80008b8:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <pbuf_free_custom+0x28>)
{
 80008bc:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80008be:	f008 fa57 	bl	8008d70 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <pbuf_free_custom+0x2c>)
 80008c4:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 80008c8:	2a01      	cmp	r2, #1
 80008ca:	d108      	bne.n	80008de <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 80008cc:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80008ce:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    RxAllocStatus = RX_ALLOC_OK;
 80008d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
 80008d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 80008da:	f003 bd6f 	b.w	80043bc <osSemaphoreRelease>
}
 80008de:	bd08      	pop	{r3, pc}
 80008e0:	0800ea20 	.word	0x0800ea20
 80008e4:	20000168 	.word	0x20000168

080008e8 <ethernetif_input>:
{
 80008e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80008ec:	4e11      	ldr	r6, [pc, #68]	; (8000934 <ethernetif_input+0x4c>)
{
 80008ee:	4604      	mov	r4, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 80008f0:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
 80008fc:	f003 fd39 	bl	8004372 <osSemaphoreWait>
 8000900:	2800      	cmp	r0, #0
 8000902:	d1f7      	bne.n	80008f4 <ethernetif_input+0xc>
  struct pbuf *p = NULL;
 8000904:	f04f 0800 	mov.w	r8, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000908:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  struct pbuf *p = NULL;
 800090c:	f8cd 8004 	str.w	r8, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8000910:	b91b      	cbnz	r3, 800091a <ethernetif_input+0x32>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000912:	a901      	add	r1, sp, #4
 8000914:	4638      	mov	r0, r7
 8000916:	f001 fa07 	bl	8001d28 <HAL_ETH_ReadData>
  return p;
 800091a:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 800091c:	2d00      	cmp	r5, #0
 800091e:	d0e9      	beq.n	80008f4 <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 8000920:	6923      	ldr	r3, [r4, #16]
 8000922:	4621      	mov	r1, r4
 8000924:	4628      	mov	r0, r5
 8000926:	4798      	blx	r3
 8000928:	2800      	cmp	r0, #0
 800092a:	d0ed      	beq.n	8000908 <ethernetif_input+0x20>
            pbuf_free(p);
 800092c:	4628      	mov	r0, r5
 800092e:	f008 fc93 	bl	8009258 <pbuf_free>
 8000932:	e7e7      	b.n	8000904 <ethernetif_input+0x1c>
 8000934:	20000168 	.word	0x20000168

08000938 <ethernetif_init>:
{
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800093a:	4604      	mov	r4, r0
{
 800093c:	b0a7      	sub	sp, #156	; 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800093e:	b930      	cbnz	r0, 800094e <ethernetif_init+0x16>
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <ethernetif_init+0x158>)
 8000942:	f240 127f 	movw	r2, #383	; 0x17f
 8000946:	4953      	ldr	r1, [pc, #332]	; (8000a94 <ethernetif_init+0x15c>)
 8000948:	4853      	ldr	r0, [pc, #332]	; (8000a98 <ethernetif_init+0x160>)
 800094a:	f00c fe2d 	bl	800d5a8 <iprintf>
  netif->name[0] = IFNAME0;
 800094e:	f247 4373 	movw	r3, #29811	; 0x7473
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000952:	4e52      	ldr	r6, [pc, #328]	; (8000a9c <ethernetif_init+0x164>)
  ETH_MACConfigTypeDef MACConf = {0};
 8000954:	2264      	movs	r2, #100	; 0x64
 8000956:	2100      	movs	r1, #0
  netif->name[0] = IFNAME0;
 8000958:	8663      	strh	r3, [r4, #50]	; 0x32
  ETH_MACConfigTypeDef MACConf = {0};
 800095a:	a80d      	add	r0, sp, #52	; 0x34
  netif->output = etharp_output;
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <ethernetif_init+0x168>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800095e:	af03      	add	r7, sp, #12
  EthHandle.Instance = ETH;
 8000960:	4d50      	ldr	r5, [pc, #320]	; (8000aa4 <ethernetif_init+0x16c>)
  netif->output = etharp_output;
 8000962:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000964:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <ethernetif_init+0x170>)
 8000966:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8000968:	f00c fe16 	bl	800d598 <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800096c:	8a33      	ldrh	r3, [r6, #16]
 800096e:	68f0      	ldr	r0, [r6, #12]
 8000970:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <ethernetif_init+0x174>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000976:	9001      	str	r0, [sp, #4]
  HAL_ETH_Init(&EthHandle);
 8000978:	f105 0038 	add.w	r0, r5, #56	; 0x38
  EthHandle.Instance = ETH;
 800097c:	63ab      	str	r3, [r5, #56]	; 0x38
  EthHandle.Init.MACAddr = macaddress;
 800097e:	ab01      	add	r3, sp, #4
 8000980:	63eb      	str	r3, [r5, #60]	; 0x3c
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000982:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000986:	642b      	str	r3, [r5, #64]	; 0x40
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000988:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <ethernetif_init+0x178>)
 800098a:	64ab      	str	r3, [r5, #72]	; 0x48
  EthHandle.Init.TxDesc = DMATxDscrTab;
 800098c:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <ethernetif_init+0x17c>)
 800098e:	646b      	str	r3, [r5, #68]	; 0x44
  EthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 8000990:	f44f 63bf 	mov.w	r3, #1528	; 0x5f8
 8000994:	64eb      	str	r3, [r5, #76]	; 0x4c
  HAL_ETH_Init(&EthHandle);
 8000996:	f001 f815 	bl	80019c4 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 800099a:	2100      	movs	r1, #0
 800099c:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <ethernetif_init+0x180>)
  LWIP_MEMPOOL_INIT(RX_POOL);
 800099e:	4630      	mov	r0, r6
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80009a0:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80009a4:	2306      	movs	r3, #6
 80009a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80009aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80009ae:	f043 030a 	orr.w	r3, r3, #10
 80009b2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  LWIP_MEMPOOL_INIT(RX_POOL);
 80009b6:	f008 f987 	bl	8008cc8 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	1d28      	adds	r0, r5, #4
 80009c0:	f00c fdea 	bl	800d598 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009c4:	2321      	movs	r3, #33	; 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 80009c6:	2203      	movs	r2, #3
 80009c8:	2100      	movs	r1, #0
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ca:	602b      	str	r3, [r5, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009cc:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  RxPktSemaphore = xSemaphoreCreateBinary();
 80009d0:	2001      	movs	r0, #1
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009d2:	616b      	str	r3, [r5, #20]
  RxPktSemaphore = xSemaphoreCreateBinary();
 80009d4:	f002 fa36 	bl	8002e44 <xQueueGenericCreate>
  TxPktSemaphore = xSemaphoreCreateBinary();
 80009d8:	2203      	movs	r2, #3
 80009da:	2100      	movs	r1, #0
  RxPktSemaphore = xSemaphoreCreateBinary();
 80009dc:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
  TxPktSemaphore = xSemaphoreCreateBinary();
 80009e0:	2001      	movs	r0, #1
 80009e2:	f002 fa2f 	bl	8002e44 <xQueueGenericCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009e6:	f106 0c14 	add.w	ip, r6, #20
  TxPktSemaphore = xSemaphoreCreateBinary();
 80009ea:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80009f4:	f8dc 3000 	ldr.w	r3, [ip]
  osThreadCreate (osThread(EthIf), netif);
 80009f8:	4621      	mov	r1, r4
 80009fa:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009fc:	603b      	str	r3, [r7, #0]
  osThreadCreate (osThread(EthIf), netif);
 80009fe:	f003 fc29 	bl	8004254 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000a02:	492e      	ldr	r1, [pc, #184]	; (8000abc <ethernetif_init+0x184>)
 8000a04:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000a08:	f000 fbec 	bl	80011e4 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8000a0c:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000a10:	f000 fbfc 	bl	800120c <LAN8742_Init>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000a14:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000a18:	f000 fc59 	bl	80012ce <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000a1c:	2801      	cmp	r0, #1
 8000a1e:	dc17      	bgt.n	8000a50 <ethernetif_init+0x118>
    netif_set_link_down(netif);
 8000a20:	4620      	mov	r0, r4
 8000a22:	f008 fb41 	bl	80090a8 <netif_set_link_down>
    netif_set_down(netif);
 8000a26:	4620      	mov	r0, r4
 8000a28:	f008 fafa 	bl	8009020 <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 8000a2c:	f000 fd44 	bl	80014b8 <HAL_GetREVID>
 8000a30:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000a34:	d109      	bne.n	8000a4a <ethernetif_init+0x112>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000a36:	4d22      	ldr	r5, [pc, #136]	; (8000ac0 <ethernetif_init+0x188>)
 8000a38:	ac08      	add	r4, sp, #32
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	682b      	ldr	r3, [r5, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8000a40:	2100      	movs	r1, #0
 8000a42:	a808      	add	r0, sp, #32
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000a44:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8000a46:	f003 fc05 	bl	8004254 <osThreadCreate>
}
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	b027      	add	sp, #156	; 0x9c
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 8000a50:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000a52:	a90d      	add	r1, sp, #52	; 0x34
 8000a54:	2802      	cmp	r0, #2
 8000a56:	bf92      	itee	ls
 8000a58:	eb06 0640 	addls.w	r6, r6, r0, lsl #1
    switch (PHYLinkState)
 8000a5c:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 8000a60:	f44f 6700 	movhi.w	r7, #2048	; 0x800
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <ethernetif_init+0x18c>)
 8000a66:	bf9c      	itt	ls
 8000a68:	8d37      	ldrhls	r7, [r6, #40]	; 0x28
 8000a6a:	8df5      	ldrhls	r5, [r6, #46]	; 0x2e
 8000a6c:	f001 fabf 	bl	8001fee <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a70:	a90d      	add	r1, sp, #52	; 0x34
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <ethernetif_init+0x18c>)
    MACConf.Speed = speed;
 8000a74:	e9cd 5712 	strd	r5, r7, [sp, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a78:	f001 fb1b 	bl	80020b2 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <ethernetif_init+0x18c>)
 8000a7e:	f001 f88b 	bl	8001b98 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000a82:	4620      	mov	r0, r4
 8000a84:	f008 fab2 	bl	8008fec <netif_set_up>
    netif_set_link_up(netif);
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f008 fae5 	bl	8009058 <netif_set_link_up>
 8000a8e:	e7cd      	b.n	8000a2c <ethernetif_init+0xf4>
 8000a90:	08017f73 	.word	0x08017f73
 8000a94:	08018e03 	.word	0x08018e03
 8000a98:	08017fc5 	.word	0x08017fc5
 8000a9c:	0800ea20 	.word	0x0800ea20
 8000aa0:	080078a9 	.word	0x080078a9
 8000aa4:	20000168 	.word	0x20000168
 8000aa8:	080007a1 	.word	0x080007a1
 8000aac:	40028000 	.word	0x40028000
 8000ab0:	2004c000 	.word	0x2004c000
 8000ab4:	200000a4 	.word	0x200000a4
 8000ab8:	000205dc 	.word	0x000205dc
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	0800ea54 	.word	0x0800ea54
 8000ac4:	200001a0 	.word	0x200001a0

08000ac8 <sys_now>:
  return HAL_GetTick();
 8000ac8:	f000 bcde 	b.w	8001488 <HAL_GetTick>

08000acc <HAL_ETH_MspInit>:
{
 8000acc:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4c36      	ldr	r4, [pc, #216]	; (8000ba8 <HAL_ETH_MspInit+0xdc>)
{
 8000ad0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000ad2:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ad4:	4835      	ldr	r0, [pc, #212]	; (8000bac <HAL_ETH_MspInit+0xe0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ad8:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6323      	str	r3, [r4, #48]	; 0x30
 8000ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6323      	str	r3, [r4, #48]	; 0x30
 8000af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6323      	str	r3, [r4, #48]	; 0x30
 8000b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b14:	6323      	str	r3, [r4, #48]	; 0x30
 8000b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1c:	9303      	str	r3, [sp, #12]
 8000b1e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000b24:	2302      	movs	r3, #2
 8000b26:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000b2e:	2386      	movs	r3, #134	; 0x86
 8000b30:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b32:	f001 fb09 	bl	8002148 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b3a:	a907      	add	r1, sp, #28
 8000b3c:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <HAL_ETH_MspInit+0xe4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000b3e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b40:	f001 fb02 	bl	8002148 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b44:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b46:	a907      	add	r1, sp, #28
 8000b48:	481a      	ldr	r0, [pc, #104]	; (8000bb4 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b4a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b4c:	f001 fafc 	bl	8002148 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000b50:	f642 0304 	movw	r3, #10244	; 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b54:	a907      	add	r1, sp, #28
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <HAL_ETH_MspInit+0xec>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000b58:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b5a:	f001 faf5 	bl	8002148 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000b5e:	462a      	mov	r2, r5
 8000b60:	2107      	movs	r1, #7
 8000b62:	203d      	movs	r0, #61	; 0x3d
 8000b64:	f000 fcc0 	bl	80014e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000b68:	203d      	movs	r0, #61	; 0x3d
 8000b6a:	f000 fcef 	bl	800154c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b74:	6323      	str	r3, [r4, #48]	; 0x30
 8000b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	9304      	str	r3, [sp, #16]
 8000b7e:	9b04      	ldr	r3, [sp, #16]
 8000b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b86:	6323      	str	r3, [r4, #48]	; 0x30
 8000b88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b8e:	9305      	str	r3, [sp, #20]
 8000b90:	9b05      	ldr	r3, [sp, #20]
 8000b92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b98:	6323      	str	r3, [r4, #48]	; 0x30
 8000b9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ba0:	9306      	str	r3, [sp, #24]
 8000ba2:	9b06      	ldr	r3, [sp, #24]
}
 8000ba4:	b00d      	add	sp, #52	; 0x34
 8000ba6:	bd30      	pop	{r4, r5, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40021800 	.word	0x40021800

08000bbc <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <HAL_ETH_RxCpltCallback+0xc>)
 8000bbe:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8000bc2:	f003 bbfb 	b.w	80043bc <osSemaphoreRelease>
 8000bc6:	bf00      	nop
 8000bc8:	20000168 	.word	0x20000168

08000bcc <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_ETH_TxCpltCallback+0xc>)
 8000bce:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8000bd2:	f003 bbf3 	b.w	80043bc <osSemaphoreRelease>
 8000bd6:	bf00      	nop
 8000bd8:	20000168 	.word	0x20000168

08000bdc <HAL_ETH_ErrorCallback>:
{
 8000bdc:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000bde:	f001 faaf 	bl	8002140 <HAL_ETH_GetDMAError>
 8000be2:	0603      	lsls	r3, r0, #24
 8000be4:	d506      	bpl.n	8000bf4 <HAL_ETH_ErrorCallback+0x18>
     osSemaphoreRelease(RxPktSemaphore);
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_ETH_ErrorCallback+0x1c>)
 8000be8:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8000bf0:	f003 bbe4 	b.w	80043bc <osSemaphoreRelease>
}
 8000bf4:	bd08      	pop	{r3, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000168 	.word	0x20000168

08000bfc <ethernet_link_thread>:
{
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000c00:	2500      	movs	r5, #0
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c02:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000c9c <ethernet_link_thread+0xa0>
{
 8000c06:	b09a      	sub	sp, #104	; 0x68
 8000c08:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8000ca0 <ethernet_link_thread+0xa4>
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000c0c:	462f      	mov	r7, r5
 8000c0e:	46aa      	mov	sl, r5
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000c10:	f1a8 06bc 	sub.w	r6, r8, #188	; 0xbc
{
 8000c14:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8000c16:	2264      	movs	r2, #100	; 0x64
 8000c18:	2100      	movs	r1, #0
 8000c1a:	a801      	add	r0, sp, #4
 8000c1c:	f00c fcbc 	bl	800d598 <memset>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c20:	4640      	mov	r0, r8
 8000c22:	f000 fb54 	bl	80012ce <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000c26:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c2a:	4603      	mov	r3, r0
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000c2c:	0751      	lsls	r1, r2, #29
 8000c2e:	d510      	bpl.n	8000c52 <ethernet_link_thread+0x56>
 8000c30:	2801      	cmp	r0, #1
 8000c32:	dc0c      	bgt.n	8000c4e <ethernet_link_thread+0x52>
      HAL_ETH_Stop_IT(&EthHandle);
 8000c34:	4630      	mov	r0, r6
 8000c36:	f001 f800 	bl	8001c3a <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f008 f9f0 	bl	8009020 <netif_set_down>
      netif_set_link_down(netif);
 8000c40:	4620      	mov	r0, r4
 8000c42:	f008 fa31 	bl	80090a8 <netif_set_link_down>
    osDelay(100);
 8000c46:	2064      	movs	r0, #100	; 0x64
 8000c48:	f003 fb21 	bl	800428e <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c4c:	e7e8      	b.n	8000c20 <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000c4e:	0752      	lsls	r2, r2, #29
 8000c50:	d4f9      	bmi.n	8000c46 <ethernet_link_thread+0x4a>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	ddf7      	ble.n	8000c46 <ethernet_link_thread+0x4a>
      switch (PHYLinkState)
 8000c56:	3b02      	subs	r3, #2
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d81b      	bhi.n	8000c94 <ethernet_link_thread+0x98>
 8000c5c:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8000c60:	f8b3 7048 	ldrh.w	r7, [r3, #72]	; 0x48
 8000c64:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000c68:	a901      	add	r1, sp, #4
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f001 f9bf 	bl	8001fee <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000c70:	a901      	add	r1, sp, #4
 8000c72:	4630      	mov	r0, r6
        netif_set_link_up(netif);
 8000c74:	f04f 0a01 	mov.w	sl, #1
        MACConf.Speed = speed;
 8000c78:	e9cd 7506 	strd	r7, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000c7c:	f001 fa19 	bl	80020b2 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000c80:	4630      	mov	r0, r6
 8000c82:	f000 ff89 	bl	8001b98 <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000c86:	4620      	mov	r0, r4
 8000c88:	f008 f9b0 	bl	8008fec <netif_set_up>
        netif_set_link_up(netif);
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f008 f9e3 	bl	8009058 <netif_set_link_up>
 8000c92:	e7d8      	b.n	8000c46 <ethernet_link_thread+0x4a>
      if(linkchanged)
 8000c94:	f1ba 0f00 	cmp.w	sl, #0
 8000c98:	d0d5      	beq.n	8000c46 <ethernet_link_thread+0x4a>
 8000c9a:	e7e5      	b.n	8000c68 <ethernet_link_thread+0x6c>
 8000c9c:	2000025c 	.word	0x2000025c
 8000ca0:	0800ea20 	.word	0x0800ea20

08000ca4 <HAL_ETH_RxAllocateCallback>:
{
 8000ca4:	b513      	push	{r0, r1, r4, lr}
 8000ca6:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <HAL_ETH_RxAllocateCallback+0x3c>)
 8000caa:	f008 f82f 	bl	8008d0c <memp_malloc_pool>
  if (p)
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b178      	cbz	r0, 8000cd2 <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000cb2:	f100 0214 	add.w	r2, r0, #20
    p->custom_free_function = pbuf_free_custom;
 8000cb6:	490b      	ldr	r1, [pc, #44]	; (8000ce4 <HAL_ETH_RxAllocateCallback+0x40>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000cb8:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8000cba:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8000cbc:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
 8000cc0:	e9cd 2100 	strd	r2, r1, [sp]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2241      	movs	r2, #65	; 0x41
 8000cc8:	4608      	mov	r0, r1
 8000cca:	f008 fa73 	bl	80091b4 <pbuf_alloced_custom>
}
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <HAL_ETH_RxAllocateCallback+0x44>)
 8000cd4:	2101      	movs	r1, #1
    *buff = NULL;
 8000cd6:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8000cd8:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
}
 8000cdc:	e7f7      	b.n	8000cce <HAL_ETH_RxAllocateCallback+0x2a>
 8000cde:	bf00      	nop
 8000ce0:	0800ea20 	.word	0x0800ea20
 8000ce4:	080008b9 	.word	0x080008b9
 8000ce8:	20000168 	.word	0x20000168

08000cec <HAL_ETH_RxLinkCallback>:
{
 8000cec:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 8000cee:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000cf0:	f1a2 0414 	sub.w	r4, r2, #20
  p->len = Length;
 8000cf4:	f822 3c0a 	strh.w	r3, [r2, #-10]
  p->next = NULL;
 8000cf8:	f842 5c14 	str.w	r5, [r2, #-20]
  p->tot_len = 0;
 8000cfc:	f822 5c0c 	strh.w	r5, [r2, #-12]
  if (!*ppStart)
 8000d00:	6802      	ldr	r2, [r0, #0]
 8000d02:	b922      	cbnz	r2, 8000d0e <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8000d04:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8000d06:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8000d08:	6802      	ldr	r2, [r0, #0]
 8000d0a:	b91a      	cbnz	r2, 8000d14 <HAL_ETH_RxLinkCallback+0x28>
}
 8000d0c:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8000d0e:	680a      	ldr	r2, [r1, #0]
 8000d10:	6014      	str	r4, [r2, #0]
 8000d12:	e7f8      	b.n	8000d06 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8000d14:	8911      	ldrh	r1, [r2, #8]
 8000d16:	4419      	add	r1, r3
 8000d18:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	e7f5      	b.n	8000d0a <HAL_ETH_RxLinkCallback+0x1e>

08000d1e <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 8000d1e:	f008 ba9b 	b.w	8009258 <pbuf_free>
	...

08000d24 <http_server_netconn_init>:
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000d24:	2301      	movs	r3, #1
{
 8000d26:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4904      	ldr	r1, [pc, #16]	; (8000d40 <http_server_netconn_init+0x1c>)
 8000d2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <http_server_netconn_init+0x20>)
 8000d34:	f00c fb8a 	bl	800d44c <sys_thread_new>
}
 8000d38:	b003      	add	sp, #12
 8000d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3e:	bf00      	nop
 8000d40:	08000df5 	.word	0x08000df5
 8000d44:	08017fed 	.word	0x08017fed

08000d48 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8000d48:	b530      	push	{r4, r5, lr}
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8000d4a:	2400      	movs	r4, #0
{
 8000d4c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000d50:	4605      	mov	r5, r0

  memset(PAGE_BODY, 0,512);
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	4621      	mov	r1, r4
 8000d58:	a806      	add	r0, sp, #24
  portCHAR pagehits[10] = {0};
 8000d5a:	f8ad 4014 	strh.w	r4, [sp, #20]
 8000d5e:	e9cd 4403 	strd	r4, r4, [sp, #12]
  memset(PAGE_BODY, 0,512);
 8000d62:	f00c fc19 	bl	800d598 <memset>

  /* Update the hit count */
  nPageHits++;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <DynWebPage+0x90>)
  sprintf(pagehits, "%d", (int)nPageHits);
 8000d68:	491c      	ldr	r1, [pc, #112]	; (8000ddc <DynWebPage+0x94>)
 8000d6a:	a803      	add	r0, sp, #12
  nPageHits++;
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	3201      	adds	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8000d72:	f00c fc6f 	bl	800d654 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8000d76:	a903      	add	r1, sp, #12
 8000d78:	a806      	add	r0, sp, #24
 8000d7a:	f00c fc8b 	bl	800d694 <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8000d7e:	4918      	ldr	r1, [pc, #96]	; (8000de0 <DynWebPage+0x98>)
 8000d80:	a806      	add	r0, sp, #24
 8000d82:	f00c fc87 	bl	800d694 <strcat>
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 8000d86:	4917      	ldr	r1, [pc, #92]	; (8000de4 <DynWebPage+0x9c>)
 8000d88:	a806      	add	r0, sp, #24
 8000d8a:	f00c fc83 	bl	800d694 <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8000d8e:	a806      	add	r0, sp, #24
 8000d90:	f7ff fa48 	bl	8000224 <strlen>
 8000d94:	ab06      	add	r3, sp, #24
 8000d96:	4418      	add	r0, r3
 8000d98:	f003 fb83 	bl	80044a2 <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8000d9c:	4912      	ldr	r1, [pc, #72]	; (8000de8 <DynWebPage+0xa0>)
 8000d9e:	a806      	add	r0, sp, #24
 8000da0:	f00c fc78 	bl	800d694 <strcat>
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000da4:	4911      	ldr	r1, [pc, #68]	; (8000dec <DynWebPage+0xa4>)
 8000da6:	a806      	add	r0, sp, #24
 8000da8:	f00c fc74 	bl	800d694 <strcat>

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000dac:	2301      	movs	r3, #1
 8000dae:	f240 623b 	movw	r2, #1595	; 0x63b
 8000db2:	490f      	ldr	r1, [pc, #60]	; (8000df0 <DynWebPage+0xa8>)
 8000db4:	4628      	mov	r0, r5
 8000db6:	9400      	str	r4, [sp, #0]
 8000db8:	f003 ff6c 	bl	8004c94 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8000dbc:	a806      	add	r0, sp, #24
 8000dbe:	f7ff fa31 	bl	8000224 <strlen>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	a906      	add	r1, sp, #24
 8000dc8:	4628      	mov	r0, r5
 8000dca:	9400      	str	r4, [sp, #0]
 8000dcc:	f003 ff62 	bl	8004c94 <netconn_write_partly>
}
 8000dd0:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8000dd4:	bd30      	pop	{r4, r5, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20003f50 	.word	0x20003f50
 8000ddc:	08017ff2 	.word	0x08017ff2
 8000de0:	08017ff5 	.word	0x08017ff5
 8000de4:	08018029 	.word	0x08018029
 8000de8:	0801805f 	.word	0x0801805f
 8000dec:	08018095 	.word	0x08018095
 8000df0:	0800ea78 	.word	0x0800ea78

08000df4 <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2010      	movs	r0, #16
{ 
 8000df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 8000dfc:	4611      	mov	r1, r2
{ 
 8000dfe:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8000e00:	f003 fe20 	bl	8004a44 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8000e04:	4606      	mov	r6, r0
 8000e06:	2800      	cmp	r0, #0
 8000e08:	f000 8083 	beq.w	8000f12 <http_server_netconn_thread+0x11e>
    err = netconn_bind(conn, NULL, 80);
 8000e0c:	2250      	movs	r2, #80	; 0x50
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f003 fe90 	bl	8004b34 <netconn_bind>
    if (err == ERR_OK)
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d17c      	bne.n	8000f12 <http_server_netconn_thread+0x11e>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000e18:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8000f3c <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 8000e1c:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8000e1e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000f40 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 8000e22:	4630      	mov	r0, r6
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8000e24:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8000f44 <http_server_netconn_thread+0x150>
      netconn_listen(conn);
 8000e28:	f003 feaa 	bl	8004b80 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 8000e2c:	a904      	add	r1, sp, #16
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f003 ff4e 	bl	8004cd0 <netconn_accept>
        if(accept_err == ERR_OK)
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d1f9      	bne.n	8000e2c <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8000e38:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8000e3a:	a905      	add	r1, sp, #20
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f004 f85f 	bl	8004f00 <netconn_recv>
  if (recv_err == ERR_OK)
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d146      	bne.n	8000ed4 <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8000e46:	4620      	mov	r0, r4
 8000e48:	f003 ff33 	bl	8004cb2 <netconn_err>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d141      	bne.n	8000ed4 <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000e50:	f10d 020e 	add.w	r2, sp, #14
 8000e54:	a906      	add	r1, sp, #24
 8000e56:	9805      	ldr	r0, [sp, #20]
 8000e58:	f005 f850 	bl	8005efc <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000e5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d937      	bls.n	8000ed4 <http_server_netconn_thread+0xe0>
 8000e64:	9d06      	ldr	r5, [sp, #24]
 8000e66:	2205      	movs	r2, #5
 8000e68:	4641      	mov	r1, r8
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f00c fc29 	bl	800d6c2 <strncmp>
 8000e70:	bb80      	cbnz	r0, 8000ed4 <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8000e72:	221b      	movs	r2, #27
 8000e74:	4649      	mov	r1, r9
 8000e76:	4628      	mov	r0, r5
 8000e78:	f00c fc23 	bl	800d6c2 <strncmp>
 8000e7c:	4607      	mov	r7, r0
 8000e7e:	b970      	cbnz	r0, 8000e9e <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32F7xx_files/ST.gif"); 
 8000e80:	4925      	ldr	r1, [pc, #148]	; (8000f18 <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8000e82:	a807      	add	r0, sp, #28
 8000e84:	f00c fb04 	bl	800d490 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000e88:	463b      	mov	r3, r7
 8000e8a:	9700      	str	r7, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000e92:	f003 feff 	bl	8004c94 <netconn_write_partly>
          fs_close(&file);
 8000e96:	a807      	add	r0, sp, #28
 8000e98:	f00c fb1a 	bl	800d4d0 <fs_close>
 8000e9c:	e01a      	b.n	8000ed4 <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8000e9e:	221e      	movs	r2, #30
 8000ea0:	4651      	mov	r1, sl
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f00c fc0d 	bl	800d6c2 <strncmp>
 8000ea8:	4607      	mov	r7, r0
 8000eaa:	b908      	cbnz	r0, 8000eb0 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32F7xx_files/stm32.jpg"); 
 8000eac:	491b      	ldr	r1, [pc, #108]	; (8000f1c <http_server_netconn_thread+0x128>)
 8000eae:	e7e8      	b.n	8000e82 <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)                                           
 8000eb0:	221d      	movs	r2, #29
 8000eb2:	491b      	ldr	r1, [pc, #108]	; (8000f20 <http_server_netconn_thread+0x12c>)
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f00c fc04 	bl	800d6c2 <strncmp>
 8000eba:	4607      	mov	r7, r0
 8000ebc:	b908      	cbnz	r0, 8000ec2 <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8000ebe:	4919      	ldr	r1, [pc, #100]	; (8000f24 <http_server_netconn_thread+0x130>)
 8000ec0:	e7df      	b.n	8000e82 <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32F7xxTASKS.html", 24) == 0)
 8000ec2:	2218      	movs	r2, #24
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <http_server_netconn_thread+0x134>)
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f00c fbfb 	bl	800d6c2 <strncmp>
 8000ecc:	b960      	cbnz	r0, 8000ee8 <http_server_netconn_thread+0xf4>
           DynWebPage(conn);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ff3a 	bl	8000d48 <DynWebPage>
  netconn_close(conn);
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f003 fee9 	bl	8004cac <netconn_close>
  netbuf_delete(inbuf);
 8000eda:	9805      	ldr	r0, [sp, #20]
 8000edc:	f004 fffc 	bl	8005ed8 <netbuf_delete>
          netconn_delete(newconn);
 8000ee0:	9804      	ldr	r0, [sp, #16]
 8000ee2:	f003 fe19 	bl	8004b18 <netconn_delete>
 8000ee6:	e7a1      	b.n	8000e2c <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /STM32F7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000ee8:	2213      	movs	r2, #19
 8000eea:	4910      	ldr	r1, [pc, #64]	; (8000f2c <http_server_netconn_thread+0x138>)
 8000eec:	4628      	mov	r0, r5
 8000eee:	f00c fbe8 	bl	800d6c2 <strncmp>
 8000ef2:	b128      	cbz	r0, 8000f00 <http_server_netconn_thread+0x10c>
 8000ef4:	2206      	movs	r2, #6
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <http_server_netconn_thread+0x13c>)
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f00c fbe2 	bl	800d6c2 <strncmp>
 8000efe:	b930      	cbnz	r0, 8000f0e <http_server_netconn_thread+0x11a>
          fs_open(&file, "/STM32F7xx.html"); 
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <http_server_netconn_thread+0x140>)
          fs_open(&file, "/404.html"); 
 8000f02:	a807      	add	r0, sp, #28
 8000f04:	f00c fac4 	bl	800d490 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	e7be      	b.n	8000e8c <http_server_netconn_thread+0x98>
          fs_open(&file, "/404.html"); 
 8000f0e:	490a      	ldr	r1, [pc, #40]	; (8000f38 <http_server_netconn_thread+0x144>)
 8000f10:	e7f7      	b.n	8000f02 <http_server_netconn_thread+0x10e>
}
 8000f12:	b00c      	add	sp, #48	; 0x30
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	080180da 	.word	0x080180da
 8000f1c:	080180f6 	.word	0x080180f6
 8000f20:	08018111 	.word	0x08018111
 8000f24:	08018115 	.word	0x08018115
 8000f28:	0801812f 	.word	0x0801812f
 8000f2c:	08018148 	.word	0x08018148
 8000f30:	0801815c 	.word	0x0801815c
 8000f34:	0801814c 	.word	0x0801814c
 8000f38:	08018163 	.word	0x08018163
 8000f3c:	080180d0 	.word	0x080180d0
 8000f40:	080180d6 	.word	0x080180d6
 8000f44:	080180f2 	.word	0x080180f2

08000f48 <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{ 
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000f48:	2100      	movs	r1, #0
  ethernet_link_status_updated(&gnetif);

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000f4a:	4c1c      	ldr	r4, [pc, #112]	; (8000fbc <StartThread+0x74>)
{ 
 8000f4c:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8000f4e:	4608      	mov	r0, r1
{ 
 8000f50:	b093      	sub	sp, #76	; 0x4c
  tcpip_init(NULL, NULL);
 8000f52:	f005 f8ab 	bl	80060ac <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <StartThread+0x78>)
  ip_addr_set_zero_ip4(&ipaddr);
 8000f58:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f5a:	a905      	add	r1, sp, #20
 8000f5c:	9202      	str	r2, [sp, #8]
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000f5e:	ad08      	add	r5, sp, #32
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <StartThread+0x7c>)
  ip_addr_set_zero_ip4(&gw);
 8000f62:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f64:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <StartThread+0x80>)
 8000f66:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8000f6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f6e:	aa06      	add	r2, sp, #24
 8000f70:	ab07      	add	r3, sp, #28
 8000f72:	f007 ffa5 	bl	8008ec0 <netif_add>
  netif_set_default(&gnetif);
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <StartThread+0x80>)
 8000f78:	f008 f832 	bl	8008fe0 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <StartThread+0x80>)
 8000f7e:	f7ff fbb3 	bl	80006e8 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000f82:	4912      	ldr	r1, [pc, #72]	; (8000fcc <StartThread+0x84>)
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <StartThread+0x80>)
 8000f86:	f008 f8a9 	bl	80090dc <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	f854 3b04 	ldr.w	r3, [r4], #4
  osThreadCreate (osThread(EthLink), &gnetif);
 8000f92:	a808      	add	r0, sp, #32
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <StartThread+0x80>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000f96:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000f98:	f003 f95c 	bl	8004254 <osThreadCreate>
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000f9c:	ad0d      	add	r5, sp, #52	; 0x34
 8000f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa2:	6823      	ldr	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000fa4:	a80d      	add	r0, sp, #52	; 0x34
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <StartThread+0x80>)
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000fa8:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000faa:	f003 f953 	bl	8004254 <osThreadCreate>
  http_server_netconn_init();
 8000fae:	f7ff feb9 	bl	8000d24 <http_server_netconn_init>
    osThreadTerminate(NULL);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f003 f966 	bl	8004284 <osThreadTerminate>
  for( ;; )
 8000fb8:	e7fb      	b.n	8000fb2 <StartThread+0x6a>
 8000fba:	bf00      	nop
 8000fbc:	0800f0b4 	.word	0x0800f0b4
 8000fc0:	08006071 	.word	0x08006071
 8000fc4:	08000939 	.word	0x08000939
 8000fc8:	20003f54 	.word	0x20003f54
 8000fcc:	080006e9 	.word	0x080006e9

08000fd0 <main>:
{
 8000fd0:	b500      	push	{lr}
 8000fd2:	b093      	sub	sp, #76	; 0x4c
  HAL_MPU_Disable();
  
  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fd4:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000fd6:	f000 fac7 	bl	8001568 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fda:	2301      	movs	r3, #1
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fdc:	f240 1501 	movw	r5, #257	; 0x101

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe0:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe2:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fe6:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fea:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2004C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8000fec:	4e4b      	ldr	r6, [pc, #300]	; (800111c <main+0x14c>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fee:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ff2:	f000 fad7 	bl	80015a4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <main+0x150>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff8:	f8ad 5018 	strh.w	r5, [sp, #24]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ffc:	a806      	add	r0, sp, #24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ffe:	4d49      	ldr	r5, [pc, #292]	; (8001124 <main+0x154>)
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001000:	9409      	str	r4, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001002:	e9cd 5307 	strd	r5, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001006:	f000 facd 	bl	80015a4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800100a:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100e:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001010:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <main+0x158>)
 8001016:	e9cd 6307 	strd	r6, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800101a:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800101e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001020:	f000 fac0 	bl	80015a4 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001024:	2004      	movs	r0, #4
 8001026:	f000 faad 	bl	8001584 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800102a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800102e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001032:	4a3e      	ldr	r2, [pc, #248]	; (800112c <main+0x15c>)
 8001034:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800103c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001040:	6953      	ldr	r3, [r2, #20]
 8001042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001046:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800104c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001050:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001054:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001058:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800105c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001060:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001064:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001068:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800106a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800106e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001070:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001074:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001076:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800107a:	d2f9      	bcs.n	8001070 <main+0xa0>
    } while(sets-- != 0U);
 800107c:	3b20      	subs	r3, #32
 800107e:	f113 0f20 	cmn.w	r3, #32
 8001082:	d1f2      	bne.n	800106a <main+0x9a>
 8001084:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001088:	6953      	ldr	r3, [r2, #20]
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6153      	str	r3, [r2, #20]
 8001090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001094:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8001098:	f000 f9d8 	bl	800144c <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800109c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010a0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80010a4:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010a8:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80010ac:	2300      	movs	r3, #0
 80010ae:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b4:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80010b8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010bc:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010c0:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010c4:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f001 f961 	bl	800238c <HAL_RCC_OscConfig>
 80010ca:	b100      	cbz	r0, 80010ce <main+0xfe>
  while(1)
 80010cc:	e7fe      	b.n	80010cc <main+0xfc>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010ce:	f001 f925 	bl	800231c <HAL_PWREx_EnableOverDrive>
 80010d2:	b100      	cbz	r0, 80010d6 <main+0x106>
  while(1)
 80010d4:	e7fe      	b.n	80010d4 <main+0x104>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010d6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80010d8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010de:	2107      	movs	r1, #7
 80010e0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010ee:	f001 fb39 	bl	8002764 <HAL_RCC_ClockConfig>
 80010f2:	4606      	mov	r6, r0
 80010f4:	b100      	cbz	r0, 80010f8 <main+0x128>
  while(1)
 80010f6:	e7fe      	b.n	80010f6 <main+0x126>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80010f8:	4d0d      	ldr	r5, [pc, #52]	; (8001130 <main+0x160>)
  BSP_LED_Init(LED1);
 80010fa:	f000 f933 	bl	8001364 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80010fe:	4620      	mov	r0, r4
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001100:	ac06      	add	r4, sp, #24
  BSP_LED_Init(LED3);
 8001102:	f000 f92f 	bl	8001364 <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110a:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 800110c:	4631      	mov	r1, r6
 800110e:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001110:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001112:	f003 f89f 	bl	8004254 <osThreadCreate>
  osKernelStart();
 8001116:	f003 f891 	bl	800423c <osKernelStart>
  for( ;; );
 800111a:	e7fe      	b.n	800111a <main+0x14a>
 800111c:	2004c000 	.word	0x2004c000
 8001120:	0301000d 	.word	0x0301000d
 8001124:	20048000 	.word	0x20048000
 8001128:	03000009 	.word	0x03000009
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	0800f0dc 	.word	0x0800f0dc

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001134:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001136:	2200      	movs	r2, #0
 8001138:	2036      	movs	r0, #54	; 0x36
{
 800113a:	b510      	push	{r4, lr}
 800113c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800113e:	f000 f9d3 	bl	80014e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001142:	2036      	movs	r0, #54	; 0x36
 8001144:	f000 fa02 	bl	800154c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	a901      	add	r1, sp, #4
 800114c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001150:	f042 0210 	orr.w	r2, r2, #16
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001160:	f001 fbb6 	bl	80028d0 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001164:	9b06      	ldr	r3, [sp, #24]
 8001166:	b9c3      	cbnz	r3, 800119a <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001168:	f001 fba2 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800116c:	4c0f      	ldr	r4, [pc, #60]	; (80011ac <HAL_InitTick+0x78>)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_InitTick+0x7c>)
 8001170:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001172:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001176:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_InitTick+0x80>)
 800117a:	fbb0 f0f3 	udiv	r0, r0, r3
 800117e:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001180:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001182:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001184:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8001186:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800118a:	f001 fd19 	bl	8002bc0 <HAL_TIM_Base_Init>
 800118e:	b940      	cbnz	r0, 80011a2 <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001190:	4620      	mov	r0, r4
 8001192:	f001 fbbd 	bl	8002910 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001196:	b008      	add	sp, #32
 8001198:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800119a:	f001 fb89 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 800119e:	0040      	lsls	r0, r0, #1
 80011a0:	e7e4      	b.n	800116c <HAL_InitTick+0x38>
  return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e7f7      	b.n	8001196 <HAL_InitTick+0x62>
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	20003f8c 	.word	0x20003f8c
 80011b0:	40001000 	.word	0x40001000
 80011b4:	000f4240 	.word	0x000f4240

080011b8 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 80011b8:	f000 b95a 	b.w	8001470 <HAL_IncTick>

080011bc <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80011bc:	4801      	ldr	r0, [pc, #4]	; (80011c4 <TIM6_DAC_IRQHandler+0x8>)
 80011be:	f001 bbe9 	b.w	8002994 <HAL_TIM_IRQHandler>
 80011c2:	bf00      	nop
 80011c4:	20003f8c 	.word	0x20003f8c

080011c8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80011c8:	4770      	bx	lr

080011ca <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler>

080011cc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler>

080011ce <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler>

080011d0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler>

080011d2 <DebugMon_Handler>:
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 80011d4:	f003 b95b 	b.w	800448e <osSystickHandler>

080011d8 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 80011d8:	4801      	ldr	r0, [pc, #4]	; (80011e0 <ETH_IRQHandler+0x8>)
 80011da:	f000 be4f 	b.w	8001e7c <HAL_ETH_IRQHandler>
 80011de:	bf00      	nop
 80011e0:	200001a0 	.word	0x200001a0

080011e4 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011e4:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011e6:	b170      	cbz	r0, 8001206 <LAN8742_RegisterBusIO+0x22>
 80011e8:	68cc      	ldr	r4, [r1, #12]
 80011ea:	b164      	cbz	r4, 8001206 <LAN8742_RegisterBusIO+0x22>
 80011ec:	688a      	ldr	r2, [r1, #8]
 80011ee:	b152      	cbz	r2, 8001206 <LAN8742_RegisterBusIO+0x22>
 80011f0:	690b      	ldr	r3, [r1, #16]
 80011f2:	b143      	cbz	r3, 8001206 <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80011f4:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80011f6:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80011f8:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011fa:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 80011fc:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011fe:	e9c0 2404 	strd	r2, r4, [r0, #16]
  
  return LAN8742_STATUS_OK;
 8001202:	2000      	movs	r0, #0
}
 8001204:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	e7fb      	b.n	8001204 <LAN8742_RegisterBusIO+0x20>

0800120c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800120c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800120e:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001210:	6846      	ldr	r6, [r0, #4]
 {
 8001212:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001214:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001216:	b166      	cbz	r6, 8001232 <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8001218:	69a3      	ldr	r3, [r4, #24]
 800121a:	4798      	blx	r3
 800121c:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800121e:	69a3      	ldr	r3, [r4, #24]
 8001220:	4798      	blx	r3
 8001222:	1b43      	subs	r3, r0, r5
 8001224:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001228:	d9f9      	bls.n	800121e <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	2500      	movs	r5, #0
 800122e:	6063      	str	r3, [r4, #4]
 8001230:	e027      	b.n	8001282 <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 8001232:	6883      	ldr	r3, [r0, #8]
 8001234:	b103      	cbz	r3, 8001238 <LAN8742_Init+0x2c>
       pObj->IO.Init();
 8001236:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001238:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 800123a:	2500      	movs	r5, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800123c:	6023      	str	r3, [r4, #0]
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800123e:	6963      	ldr	r3, [r4, #20]
 8001240:	aa01      	add	r2, sp, #4
 8001242:	2112      	movs	r1, #18
 8001244:	4630      	mov	r0, r6
 8001246:	4798      	blx	r3
 8001248:	2800      	cmp	r0, #0
 800124a:	db1d      	blt.n	8001288 <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800124c:	9b01      	ldr	r3, [sp, #4]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	42b3      	cmp	r3, r6
 8001254:	d11a      	bne.n	800128c <LAN8742_Init+0x80>
         status = LAN8742_STATUS_OK;
 8001256:	2500      	movs	r5, #0
         pObj->DevAddr = addr;
 8001258:	6026      	str	r6, [r4, #0]
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800125a:	6820      	ldr	r0, [r4, #0]
 800125c:	281f      	cmp	r0, #31
 800125e:	d82d      	bhi.n	80012bc <LAN8742_Init+0xb0>
     if(status == LAN8742_STATUS_OK)
 8001260:	b97d      	cbnz	r5, 8001282 <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001268:	4629      	mov	r1, r5
 800126a:	4798      	blx	r3
 800126c:	2800      	cmp	r0, #0
 800126e:	db28      	blt.n	80012c2 <LAN8742_Init+0xb6>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001270:	6963      	ldr	r3, [r4, #20]
 8001272:	aa01      	add	r2, sp, #4
 8001274:	4629      	mov	r1, r5
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	4798      	blx	r3
 800127a:	2800      	cmp	r0, #0
 800127c:	da0a      	bge.n	8001294 <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 800127e:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 8001282:	4628      	mov	r0, r5
 8001284:	b002      	add	sp, #8
 8001286:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8001288:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800128c:	3601      	adds	r6, #1
 800128e:	2e20      	cmp	r6, #32
 8001290:	d1d5      	bne.n	800123e <LAN8742_Init+0x32>
 8001292:	e7e2      	b.n	800125a <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8001294:	69a3      	ldr	r3, [r4, #24]
 8001296:	4798      	blx	r3
 8001298:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800129a:	9b01      	ldr	r3, [sp, #4]
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800129c:	69a2      	ldr	r2, [r4, #24]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	d5ba      	bpl.n	8001218 <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012a2:	4790      	blx	r2
 80012a4:	1b40      	subs	r0, r0, r5
 80012a6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80012aa:	d80d      	bhi.n	80012c8 <LAN8742_Init+0xbc>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012ac:	6963      	ldr	r3, [r4, #20]
 80012ae:	aa01      	add	r2, sp, #4
 80012b0:	2100      	movs	r1, #0
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	4798      	blx	r3
 80012b6:	2800      	cmp	r0, #0
 80012b8:	daef      	bge.n	800129a <LAN8742_Init+0x8e>
 80012ba:	e7e0      	b.n	800127e <LAN8742_Init+0x72>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012bc:	f06f 0502 	mvn.w	r5, #2
 80012c0:	e7df      	b.n	8001282 <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 80012c2:	f06f 0503 	mvn.w	r5, #3
 80012c6:	e7dc      	b.n	8001282 <LAN8742_Init+0x76>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012c8:	f06f 0501 	mvn.w	r5, #1
   return status;
 80012cc:	e7d9      	b.n	8001282 <LAN8742_Init+0x76>

080012ce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 80012d0:	2500      	movs	r5, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012d2:	6943      	ldr	r3, [r0, #20]
{
 80012d4:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012d6:	aa01      	add	r2, sp, #4
 80012d8:	2101      	movs	r1, #1
 80012da:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80012dc:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012de:	4798      	blx	r3
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	da03      	bge.n	80012ec <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012e4:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 80012e8:	b003      	add	sp, #12
 80012ea:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ec:	6963      	ldr	r3, [r4, #20]
 80012ee:	aa01      	add	r2, sp, #4
 80012f0:	2101      	movs	r1, #1
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	4798      	blx	r3
 80012f6:	2800      	cmp	r0, #0
 80012f8:	dbf4      	blt.n	80012e4 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	075b      	lsls	r3, r3, #29
 80012fe:	d52c      	bpl.n	800135a <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001300:	6963      	ldr	r3, [r4, #20]
 8001302:	aa01      	add	r2, sp, #4
 8001304:	4629      	mov	r1, r5
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	4798      	blx	r3
 800130a:	2800      	cmp	r0, #0
 800130c:	dbea      	blt.n	80012e4 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	04dd      	lsls	r5, r3, #19
 8001312:	d40e      	bmi.n	8001332 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001314:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8001318:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 800131c:	d101      	bne.n	8001322 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800131e:	2002      	movs	r0, #2
 8001320:	e7e2      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001322:	0498      	lsls	r0, r3, #18
 8001324:	d501      	bpl.n	800132a <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001326:	2003      	movs	r0, #3
 8001328:	e7de      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800132a:	05d9      	lsls	r1, r3, #23
 800132c:	d513      	bpl.n	8001356 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800132e:	2004      	movs	r0, #4
 8001330:	e7da      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001332:	6963      	ldr	r3, [r4, #20]
 8001334:	aa01      	add	r2, sp, #4
 8001336:	211f      	movs	r1, #31
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	4798      	blx	r3
 800133c:	2800      	cmp	r0, #0
 800133e:	dbd1      	blt.n	80012e4 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001340:	9b01      	ldr	r3, [sp, #4]
 8001342:	04da      	lsls	r2, r3, #19
 8001344:	d50b      	bpl.n	800135e <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001346:	f003 031c 	and.w	r3, r3, #28
 800134a:	2b18      	cmp	r3, #24
 800134c:	d0e7      	beq.n	800131e <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800134e:	2b08      	cmp	r3, #8
 8001350:	d0e9      	beq.n	8001326 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001352:	2b14      	cmp	r3, #20
 8001354:	d0eb      	beq.n	800132e <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001356:	2005      	movs	r0, #5
 8001358:	e7c6      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;    
 800135a:	2001      	movs	r0, #1
 800135c:	e7c4      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800135e:	2006      	movs	r0, #6
 8001360:	e7c2      	b.n	80012e8 <LAN8742_GetLinkState+0x1a>
	...

08001364 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <BSP_LED_Init+0x54>)
 8001366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001368:	f042 0202 	orr.w	r2, r2, #2
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001370:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4604      	mov	r4, r0
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	b9c8      	cbnz	r0, 80013b0 <BSP_LED_Init+0x4c>
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001384:	4d0e      	ldr	r5, [pc, #56]	; (80013c0 <BSP_LED_Init+0x5c>)
 8001386:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001388:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800138e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001392:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800139c:	f000 fed4 	bl	8002148 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80013a0:	463a      	mov	r2, r7
 80013a2:	4631      	mov	r1, r6
 80013a4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80013a8:	f000 ffb2 	bl	8002310 <HAL_GPIO_WritePin>
}
 80013ac:	b009      	add	sp, #36	; 0x24
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	9b02      	ldr	r3, [sp, #8]
 80013b4:	e7e4      	b.n	8001380 <BSP_LED_Init+0x1c>
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	0800f0f0 	.word	0x0800f0f0
 80013c0:	20000014 	.word	0x20000014

080013c4 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <BSP_LED_On+0x14>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <BSP_LED_On+0x18>)
 80013ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80013d2:	f000 bf9d 	b.w	8002310 <HAL_GPIO_WritePin>
 80013d6:	bf00      	nop
 80013d8:	0800f0f0 	.word	0x0800f0f0
 80013dc:	20000014 	.word	0x20000014

080013e0 <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <BSP_LED_Off+0x14>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <BSP_LED_Off+0x18>)
 80013ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80013ee:	f000 bf8f 	b.w	8002310 <HAL_GPIO_WritePin>
 80013f2:	bf00      	nop
 80013f4:	0800f0f0 	.word	0x0800f0f0
 80013f8:	20000014 	.word	0x20000014

080013fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fc:	490f      	ldr	r1, [pc, #60]	; (800143c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013fe:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <SystemInit+0x44>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f042 0201 	orr.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001416:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800141e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001422:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <SystemInit+0x48>)
 8001426:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800142e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001430:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001436:	608b      	str	r3, [r1, #8]
#endif
}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	40023800 	.word	0x40023800
 8001444:	24003010 	.word	0x24003010

08001448 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001448:	4770      	bx	lr
	...

0800144c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
{
 8001450:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	f000 f833 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f7ff fe68 	bl	8001134 <HAL_InitTick>
  HAL_MspInit();
 8001464:	f7ff fff0 	bl	8001448 <HAL_MspInit>
}
 8001468:	2000      	movs	r0, #0
 800146a:	bd08      	pop	{r3, pc}
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_IncTick+0x10>)
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <HAL_IncTick+0x14>)
 8001474:	6811      	ldr	r1, [r2, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	440b      	add	r3, r1
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20003fd8 	.word	0x20003fd8
 8001484:	20000028 	.word	0x20000028

08001488 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001488:	4b01      	ldr	r3, [pc, #4]	; (8001490 <HAL_GetTick+0x8>)
 800148a:	6818      	ldr	r0, [r3, #0]
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20003fd8 	.word	0x20003fd8

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff6 	bl	8001488 <HAL_GetTick>
 800149c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014a0:	bf1e      	ittt	ne
 80014a2:	4b04      	ldrne	r3, [pc, #16]	; (80014b4 <HAL_Delay+0x20>)
 80014a4:	781b      	ldrbne	r3, [r3, #0]
 80014a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	1b43      	subs	r3, r0, r5
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	d3fa      	bcc.n	80014a8 <HAL_Delay+0x14>
  {
  }
}
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
 80014b4:	20000028 	.word	0x20000028

080014b8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80014b8:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_GetREVID+0x8>)
 80014ba:	6818      	ldr	r0, [r3, #0]
}
 80014bc:	0c00      	lsrs	r0, r0, #16
 80014be:	4770      	bx	lr
 80014c0:	e0042000 	.word	0xe0042000

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014d2:	0412      	lsls	r2, r2, #16
 80014d4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b530      	push	{r4, r5, lr}
 80014ec:	68dc      	ldr	r4, [r3, #12]
 80014ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	2d04      	cmp	r5, #4
 80014fa:	bf28      	it	cs
 80014fc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001504:	bf8c      	ite	hi
 8001506:	3c03      	subhi	r4, #3
 8001508:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800150e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	fa01 f104 	lsl.w	r1, r1, r4
 8001520:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001528:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800152a:	db06      	blt.n	800153a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001530:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001534:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001538:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	f000 000f 	and.w	r0, r0, #15
 800153e:	4a02      	ldr	r2, [pc, #8]	; (8001548 <HAL_NVIC_SetPriority+0x60>)
 8001540:	5413      	strb	r3, [r2, r0]
 8001542:	e7f9      	b.n	8001538 <HAL_NVIC_SetPriority+0x50>
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	e000ed14 	.word	0xe000ed14

0800154c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800154c:	2800      	cmp	r0, #0
 800154e:	db08      	blt.n	8001562 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001550:	0942      	lsrs	r2, r0, #5
 8001552:	2301      	movs	r3, #1
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	fa03 f000 	lsl.w	r0, r3, r0
 800155c:	4b01      	ldr	r3, [pc, #4]	; (8001564 <HAL_NVIC_EnableIRQ+0x18>)
 800155e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100

08001568 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001568:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_MPU_Disable+0x18>)
 800156e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001570:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MPU_Enable+0x1c>)
 8001586:	f040 0001 	orr.w	r0, r0, #1
 800158a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800158e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001590:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015a4:	7843      	ldrb	r3, [r0, #1]
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_MPU_ConfigRegion+0x54>)
{
 80015a8:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80015aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80015ae:	7801      	ldrb	r1, [r0, #0]
 80015b0:	b1e9      	cbz	r1, 80015ee <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80015b2:	6843      	ldr	r3, [r0, #4]
 80015b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ba:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015bc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015be:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015c2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015c6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015ca:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015d2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015dc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015e2:	7a01      	ldrb	r1, [r0, #8]
 80015e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80015ec:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80015ee:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80015f2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80015f6:	e7f9      	b.n	80015ec <HAL_MPU_ConfigRegion+0x48>
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80015fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001600:	6a86      	ldr	r6, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001602:	eb00 0c86 	add.w	ip, r0, r6, lsl #2
 8001606:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	2c00      	cmp	r4, #0
 800160e:	da02      	bge.n	8001616 <ETH_Prepare_Tx_Descriptors+0x1a>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8001610:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001616:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 800161a:	2c00      	cmp	r4, #0
 800161c:	d1f8      	bne.n	8001610 <ETH_Prepare_Tx_Descriptors+0x14>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800161e:	688c      	ldr	r4, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001620:	f8d1 e000 	ldr.w	lr, [r1]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001624:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001626:	6867      	ldr	r7, [r4, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001628:	f01e 0f01 	tst.w	lr, #1
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800162c:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800162e:	685d      	ldr	r5, [r3, #4]
 8001630:	f425 55ff 	bic.w	r5, r5, #8160	; 0x1fe0
 8001634:	f025 051f 	bic.w	r5, r5, #31
 8001638:	ea45 0507 	orr.w	r5, r5, r7
 800163c:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800163e:	d005      	beq.n	800164c <ETH_Prepare_Tx_Descriptors+0x50>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001640:	681f      	ldr	r7, [r3, #0]
 8001642:	694d      	ldr	r5, [r1, #20]
 8001644:	f427 0740 	bic.w	r7, r7, #12582912	; 0xc00000
 8001648:	433d      	orrs	r5, r7
 800164a:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800164c:	f01e 0f20 	tst.w	lr, #32
 8001650:	d005      	beq.n	800165e <ETH_Prepare_Tx_Descriptors+0x62>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001652:	681d      	ldr	r5, [r3, #0]
 8001654:	6909      	ldr	r1, [r1, #16]
 8001656:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
 800165a:	4329      	orrs	r1, r5
 800165c:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800165e:	f01e 0f04 	tst.w	lr, #4
 8001662:	d003      	beq.n	800166c <ETH_Prepare_Tx_Descriptors+0x70>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800166a:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001672:	6019      	str	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001674:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001678:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 800167a:	2500      	movs	r5, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800167c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800174c <ETH_Prepare_Tx_Descriptors+0x150>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001680:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001684:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001686:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 8001688:	68a4      	ldr	r4, [r4, #8]
 800168a:	f105 0e01 	add.w	lr, r5, #1
 800168e:	b9b4      	cbnz	r4, 80016be <ETH_Prepare_Tx_Descriptors+0xc2>
  if (ItMode != ((uint32_t)RESET))
 8001690:	2a00      	cmp	r2, #0
 8001692:	d057      	beq.n	8001744 <ETH_Prepare_Tx_Descriptors+0x148>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800169a:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016a2:	601a      	str	r2, [r3, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80016a4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80016a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80016ac:	6281      	str	r1, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80016ae:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80016b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016b2:	3301      	adds	r3, #1
 80016b4:	442b      	add	r3, r5
 80016b6:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016b8:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e7a9      	b.n	8001612 <ETH_Prepare_Tx_Descriptors+0x16>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80016be:	681d      	ldr	r5, [r3, #0]
 80016c0:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 80016c4:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80016c6:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80016c8:	b32a      	cbz	r2, 8001716 <ETH_Prepare_Tx_Descriptors+0x11a>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80016ca:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80016ce:	1c4f      	adds	r7, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80016d0:	601d      	str	r5, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80016d2:	2f03      	cmp	r7, #3
 80016d4:	bf88      	it	hi
 80016d6:	1ecf      	subhi	r7, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80016d8:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80016dc:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80016e4:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	2900      	cmp	r1, #0
 80016ea:	da17      	bge.n	800171c <ETH_Prepare_Tx_Descriptors+0x120>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80016ec:	f8dc 1018 	ldr.w	r1, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80016f0:	2200      	movs	r2, #0
 80016f2:	4572      	cmp	r2, lr
 80016f4:	d08c      	beq.n	8001610 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 80016f6:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80016fa:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 80016fc:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80016fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001702:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001704:	1c73      	adds	r3, r6, #1
 8001706:	2b03      	cmp	r3, #3
 8001708:	bf88      	it	hi
 800170a:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800170c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8001710:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001712:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001714:	e7ed      	b.n	80016f2 <ETH_Prepare_Tx_Descriptors+0xf6>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001716:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 800171a:	e7d8      	b.n	80016ce <ETH_Prepare_Tx_Descriptors+0xd2>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800171c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800171e:	2900      	cmp	r1, #0
 8001720:	d1e4      	bne.n	80016ec <ETH_Prepare_Tx_Descriptors+0xf0>
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001722:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001724:	6865      	ldr	r5, [r4, #4]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001726:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	ea01 0108 	and.w	r1, r1, r8
 800172e:	4329      	orrs	r1, r5
 8001730:	6059      	str	r1, [r3, #4]
 8001732:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	4675      	mov	r5, lr
 800173a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800173e:	6019      	str	r1, [r3, #0]
 8001740:	4639      	mov	r1, r7
 8001742:	e7a1      	b.n	8001688 <ETH_Prepare_Tx_Descriptors+0x8c>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800174a:	e7a6      	b.n	800169a <ETH_Prepare_Tx_Descriptors+0x9e>
 800174c:	ffffe000 	.word	0xffffe000

08001750 <ETH_SetMACConfig>:
  tmpreg1 = (heth->Instance)->MACCR;
 8001750:	6802      	ldr	r2, [r0, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001752:	f8df c100 	ldr.w	ip, [pc, #256]	; 8001854 <ETH_SetMACConfig+0x104>
  tmpreg1 = (heth->Instance)->MACCR;
 8001756:	6813      	ldr	r3, [r2, #0]
{
 8001758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800175c:	ea03 0c0c 	and.w	ip, r3, ip
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001760:	7c0b      	ldrb	r3, [r1, #16]
{
 8001762:	460d      	mov	r5, r1
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001764:	f891 801f 	ldrb.w	r8, [r1, #31]
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001768:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800176a:	7c4b      	ldrb	r3, [r1, #17]
{
 800176c:	4604      	mov	r4, r0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800176e:	f895 901c 	ldrb.w	r9, [r5, #28]
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001772:	bf0c      	ite	eq
 8001774:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 8001778:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800177a:	2b00      	cmp	r3, #0
 800177c:	688b      	ldr	r3, [r1, #8]
 800177e:	6949      	ldr	r1, [r1, #20]
 8001780:	bf0c      	ite	eq
 8001782:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 8001786:	2600      	movne	r6, #0
 8001788:	430b      	orrs	r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800178a:	7fa9      	ldrb	r1, [r5, #30]
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800178c:	f895 e004 	ldrb.w	lr, [r5, #4]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001790:	2900      	cmp	r1, #0
 8001792:	69a9      	ldr	r1, [r5, #24]
 8001794:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001798:	f895 1020 	ldrb.w	r1, [r5, #32]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800179c:	bf0c      	ite	eq
 800179e:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 80017a2:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017a4:	2900      	cmp	r1, #0
 80017a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80017a8:	ea43 0301 	orr.w	r3, r3, r1
 80017ac:	bf0c      	ite	eq
 80017ae:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 80017b2:	f04f 0a00 	movne.w	sl, #0
 80017b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80017ba:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80017be:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017c2:	f895 e00f 	ldrb.w	lr, [r5, #15]
 80017c6:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017ca:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 80017ce:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 80017d2:	ea43 030c 	orr.w	r3, r3, ip
 80017d6:	433b      	orrs	r3, r7
 80017d8:	4333      	orrs	r3, r6
 80017da:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017dc:	2001      	movs	r0, #1
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017de:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017e2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80017e4:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e6:	f7ff fe55 	bl	8001494 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80017ee:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80017f0:	6988      	ldr	r0, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017f2:	6cae      	ldr	r6, [r5, #72]	; 0x48
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017f4:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017f8:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 80017fc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001800:	0400      	lsls	r0, r0, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001802:	2b00      	cmp	r3, #0
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001804:	ea4f 4010 	mov.w	r0, r0, lsr #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001808:	bf0c      	ite	eq
 800180a:	2380      	moveq	r3, #128	; 0x80
 800180c:	2300      	movne	r3, #0
 800180e:	4302      	orrs	r2, r0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001810:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 8001814:	2801      	cmp	r0, #1
 8001816:	ea42 0203 	orr.w	r2, r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800181a:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800181e:	bf0c      	ite	eq
 8001820:	2008      	moveq	r0, #8
 8001822:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001824:	2b01      	cmp	r3, #1
 8001826:	ea42 0200 	orr.w	r2, r2, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800182a:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800182e:	bf0c      	ite	eq
 8001830:	2304      	moveq	r3, #4
 8001832:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001834:	2801      	cmp	r0, #1
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001836:	ea43 0302 	orr.w	r3, r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800183a:	bf0c      	ite	eq
 800183c:	2002      	moveq	r0, #2
 800183e:	2000      	movne	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001840:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001842:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001844:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001846:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001848:	f7ff fe24 	bl	8001494 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	619d      	str	r5, [r3, #24]
}
 8001850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001854:	ff20810f 	.word	0xff20810f

08001858 <ETH_SetDMAConfig>:
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001858:	6802      	ldr	r2, [r0, #0]
 800185a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 800185e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001860:	6993      	ldr	r3, [r2, #24]
{
 8001862:	4605      	mov	r5, r0
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001864:	4826      	ldr	r0, [pc, #152]	; (8001900 <ETH_SetDMAConfig+0xa8>)
{
 8001866:	460c      	mov	r4, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001868:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800186c:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800186e:	7b0b      	ldrb	r3, [r1, #12]
 8001870:	6a27      	ldr	r7, [r4, #32]
 8001872:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001874:	7f4b      	ldrb	r3, [r1, #29]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001876:	bf0c      	ite	eq
 8001878:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 800187c:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800187e:	2b00      	cmp	r3, #0
 8001880:	6963      	ldr	r3, [r4, #20]
 8001882:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001886:	7ba7      	ldrb	r7, [r4, #14]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001888:	bf0c      	ite	eq
 800188a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 800188e:	2100      	movne	r1, #0
 8001890:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 8001894:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001898:	7f27      	ldrb	r7, [r4, #28]
 800189a:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800189e:	7fa7      	ldrb	r7, [r4, #30]
 80018a0:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018a4:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 80018a8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 80018ac:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ae:	2001      	movs	r0, #1
 80018b0:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018b2:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018b4:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018b6:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018b8:	f7ff fdec 	bl	8001494 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80018bc:	682a      	ldr	r2, [r5, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018be:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018c0:	69a1      	ldr	r1, [r4, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 80018c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018c6:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 80018c8:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018ca:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018cc:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018d0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80018d4:	6921      	ldr	r1, [r4, #16]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	6821      	ldr	r1, [r4, #0]
 80018da:	430b      	orrs	r3, r1
 80018dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80018de:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018e2:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018e4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ec:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80018ee:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f0:	f7ff fdd0 	bl	8001494 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	601c      	str	r4, [r3, #0]
}
 80018fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018fe:	bf00      	nop
 8001900:	f8de3f23 	.word	0xf8de3f23

08001904 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 8001904:	2300      	movs	r3, #0
{
 8001906:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 8001908:	9301      	str	r3, [sp, #4]
{
 800190a:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800190c:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800190e:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800191a:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001920:	f7ff fdb8 	bl	8001494 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	9a01      	ldr	r2, [sp, #4]
 8001928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	b002      	add	sp, #8
 8001930:	bd10      	pop	{r4, pc}
	...

08001934 <ETH_UpdateDescriptor>:
{
 8001934:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t *buff = NULL;
 8001938:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 800193a:	6e87      	ldr	r7, [r0, #104]	; 0x68
{
 800193c:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 800193e:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  uint8_t *buff = NULL;
 8001940:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001942:	f107 0312 	add.w	r3, r7, #18
  uint8_t allocStatus = 1U;
 8001946:	f04f 0801 	mov.w	r8, #1
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800194a:	f244 59f8 	movw	r9, #17912	; 0x45f8
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800194e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001952:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80019c0 <ETH_UpdateDescriptor+0x8c>
  while ((desccount > 0U) && (allocStatus != 0U))
 8001956:	b116      	cbz	r6, 800195e <ETH_UpdateDescriptor+0x2a>
 8001958:	f1b8 0f00 	cmp.w	r8, #0
 800195c:	d10c      	bne.n	8001978 <ETH_UpdateDescriptor+0x44>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800195e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001960:	42b3      	cmp	r3, r6
 8001962:	d006      	beq.n	8001972 <ETH_UpdateDescriptor+0x3e>
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 800196e:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
}
 8001972:	b002      	add	sp, #8
 8001974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001978:	6a2b      	ldr	r3, [r5, #32]
 800197a:	b933      	cbnz	r3, 800198a <ETH_UpdateDescriptor+0x56>
      HAL_ETH_RxAllocateCallback(&buff);
 800197c:	a801      	add	r0, sp, #4
 800197e:	f7ff f991 	bl	8000ca4 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	b1cb      	cbz	r3, 80019ba <ETH_UpdateDescriptor+0x86>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001986:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001988:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 800198a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800198c:	b993      	cbnz	r3, 80019b4 <ETH_UpdateDescriptor+0x80>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800198e:	f8c5 a004 	str.w	sl, [r5, #4]
 8001992:	f3bf 8f5f 	dmb	sy
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001996:	682b      	ldr	r3, [r5, #0]
      desccount--;
 8001998:	3e01      	subs	r6, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800199a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800199e:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019a0:	1c7b      	adds	r3, r7, #1
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	bf88      	it	hi
 80019a6:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019a8:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 80019ac:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ae:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 80019b2:	e7d0      	b.n	8001956 <ETH_UpdateDescriptor+0x22>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019b4:	f8c5 9004 	str.w	r9, [r5, #4]
 80019b8:	e7eb      	b.n	8001992 <ETH_UpdateDescriptor+0x5e>
        allocStatus = 0U;
 80019ba:	4698      	mov	r8, r3
 80019bc:	e7cb      	b.n	8001956 <ETH_UpdateDescriptor+0x22>
 80019be:	bf00      	nop
 80019c0:	800045f8 	.word	0x800045f8

080019c4 <HAL_ETH_Init>:
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80019c6:	4604      	mov	r4, r0
{
 80019c8:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 80019ca:	2800      	cmp	r0, #0
 80019cc:	f000 80d7 	beq.w	8001b7e <HAL_ETH_Init+0x1ba>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019d0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80019d4:	b923      	cbnz	r3, 80019e0 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80019d6:	2323      	movs	r3, #35	; 0x23
 80019d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80019dc:	f7ff f876 	bl	8000acc <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_ETH_Init+0x1c8>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019e2:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ea:	645a      	str	r2, [r3, #68]	; 0x44
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_ETH_Init+0x1cc>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80019fe:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8001a06:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a16:	f7ff fd37 	bl	8001488 <HAL_GetTick>
 8001a1a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	f015 0501 	ands.w	r5, r5, #1
 8001a28:	f040 809c 	bne.w	8001b64 <HAL_ETH_Init+0x1a0>
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a2c:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8001a32:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a3a:	a90d      	add	r1, sp, #52	; 0x34
 8001a3c:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a3e:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a42:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a46:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001a48:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001a4c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a50:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  macDefaultConf.Watchdog = ENABLE;
 8001a54:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a58:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a5a:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a5e:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a60:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a64:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a66:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a6a:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a6e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a72:	f7ff fe6d 	bl	8001750 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a7e:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a84:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a88:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a8c:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a90:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a94:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a96:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a9a:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a9c:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a9e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ab0:	f7ff fed2 	bl	8001858 <ETH_SetDMAConfig>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ab4:	68e6      	ldr	r6, [r4, #12]
 8001ab6:	f104 0c18 	add.w	ip, r4, #24
 8001aba:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001abc:	4628      	mov	r0, r5
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001abe:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ac0:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ac2:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ac4:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ac6:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ac8:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001aca:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001acc:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ad0:	681f      	ldr	r7, [r3, #0]
 8001ad2:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 8001ad6:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ada:	d052      	beq.n	8001b82 <HAL_ETH_Init+0x1be>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001adc:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ade:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae0:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ae2:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae6:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ae8:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aea:	460b      	mov	r3, r1
 8001aec:	d1e8      	bne.n	8001ac0 <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001aee:	6821      	ldr	r1, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8001af0:	2200      	movs	r2, #0
 8001af2:	f104 0748 	add.w	r7, r4, #72	; 0x48
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001af6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001afa:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 8001afe:	62a2      	str	r2, [r4, #40]	; 0x28
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b00:	f244 5ef8 	movw	lr, #17912	; 0x45f8
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b04:	610e      	str	r6, [r1, #16]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b06:	6926      	ldr	r6, [r4, #16]
 8001b08:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b0a:	601a      	str	r2, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b0c:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b10:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b12:	60da      	str	r2, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b14:	f8c3 c000 	str.w	ip, [r3]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b18:	f8c3 e004 	str.w	lr, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b1c:	6858      	ldr	r0, [r3, #4]
 8001b1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b22:	e9c3 2208 	strd	r2, r2, [r3, #32]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b26:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b28:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b2c:	f847 3b04 	str.w	r3, [r7], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b30:	d029      	beq.n	8001b86 <HAL_ETH_Init+0x1c2>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b32:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b34:	3501      	adds	r5, #1
 8001b36:	4603      	mov	r3, r0
 8001b38:	2d04      	cmp	r5, #4
 8001b3a:	d1e6      	bne.n	8001b0a <HAL_ETH_Init+0x146>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b3c:	2000      	movs	r0, #0
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b3e:	6862      	ldr	r2, [r4, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_ETH_Init+0x1d0>)
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b42:	65a0      	str	r0, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b44:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b48:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b4c:	60ce      	str	r6, [r1, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b4e:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b50:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b52:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
  heth->gState = HAL_ETH_STATE_READY;
 8001b56:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b58:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001b60:	b027      	add	sp, #156	; 0x9c
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b64:	f7ff fc90 	bl	8001488 <HAL_GetTick>
 8001b68:	1b80      	subs	r0, r0, r6
 8001b6a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001b6e:	f67f af55 	bls.w	8001a1c <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b72:	2304      	movs	r3, #4
 8001b74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b78:	23e0      	movs	r3, #224	; 0xe0
 8001b7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e7ee      	b.n	8001b60 <HAL_ETH_Init+0x19c>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b82:	60de      	str	r6, [r3, #12]
 8001b84:	e7ab      	b.n	8001ade <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b86:	60de      	str	r6, [r3, #12]
 8001b88:	e7d4      	b.n	8001b34 <HAL_ETH_Init+0x170>
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40028000 	.word	0x40028000

08001b98 <HAL_ETH_Start_IT>:
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001b9a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d147      	bne.n	8001c36 <HAL_ETH_Start_IT+0x9e>
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ba6:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ba8:	2623      	movs	r6, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8001baa:	6585      	str	r5, [r0, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bac:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bb8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001bbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bc0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001bc4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001bc8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001bcc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001bd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001bd8:	f7ff feac 	bl	8001934 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bdc:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bde:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f042 0208 	orr.w	r2, r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001be8:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	f7ff fc53 	bl	8001494 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bee:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf0:	4628      	mov	r0, r5
    (heth->Instance)->MACCR = tmpreg1;
 8001bf2:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f042 0204 	orr.w	r2, r2, #4
 8001bfa:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001bfc:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfe:	f7ff fc49 	bl	8001494 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c02:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8001c04:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8001c06:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001c08:	f7ff fe7c 	bl	8001904 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c0c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1a:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8001c2a:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8001c2e:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001c30:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8001c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001c36:	4628      	mov	r0, r5
 8001c38:	e7fc      	b.n	8001c34 <HAL_ETH_Start_IT+0x9c>

08001c3a <HAL_ETH_Stop_IT>:
{
 8001c3a:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c3c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8001c40:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c42:	2b23      	cmp	r3, #35	; 0x23
 8001c44:	d13c      	bne.n	8001cc0 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c46:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c48:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4c:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c4e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 8001c58:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 8001c5c:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c64:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	f022 0202 	bic.w	r2, r2, #2
 8001c6c:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c6e:	680b      	ldr	r3, [r1, #0]
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001c76:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c78:	f7ff fc0c 	bl	8001494 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c7c:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8001c7e:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8001c80:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001c82:	f7ff fe3f 	bl	8001904 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c86:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c88:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001c92:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	f7ff fbfe 	bl	8001494 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c98:	4623      	mov	r3, r4
 8001c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c9e:	f853 2b48 	ldr.w	r2, [r3], #72
 8001ca2:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ca4:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001ca8:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001caa:	4298      	cmp	r0, r3
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001cac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cb0:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001cb2:	d1f7      	bne.n	8001ca4 <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 8001cb4:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001cb6:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 8001cb8:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001cba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	e7fc      	b.n	8001cbe <HAL_ETH_Stop_IT+0x84>

08001cc4 <HAL_ETH_Transmit_IT>:
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001cc8:	b939      	cbnz	r1, 8001cda <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cca:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001cce:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cd2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e025      	b.n	8001d26 <HAL_ETH_Transmit_IT+0x62>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cda:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001cde:	2a23      	cmp	r2, #35	; 0x23
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ce2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ce4:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ce6:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ce8:	f7ff fc88 	bl	80015fc <ETH_Prepare_Tx_Descriptors>
 8001cec:	b120      	cbz	r0, 8001cf8 <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	e7ec      	b.n	8001cd2 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf8:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	2a03      	cmp	r2, #3
 8001d02:	bf8c      	ite	hi
 8001d04:	3b03      	subhi	r3, #3
 8001d06:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	bf88      	it	hi
 8001d0e:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d16:	6958      	ldr	r0, [r3, #20]
 8001d18:	f010 0004 	ands.w	r0, r0, #4
 8001d1c:	d003      	beq.n	8001d26 <HAL_ETH_Transmit_IT+0x62>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d1e:	2104      	movs	r1, #4
    return HAL_OK;
 8001d20:	4610      	mov	r0, r2
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d22:	6159      	str	r1, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 8001d24:	605a      	str	r2, [r3, #4]
}
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <HAL_ETH_ReadData>:
{
 8001d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8001d30:	468a      	mov	sl, r1
 8001d32:	b949      	cbnz	r1, 8001d48 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d34:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
}
 8001d42:	b005      	add	sp, #20
 8001d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d48:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001d4c:	2b23      	cmp	r3, #35	; 0x23
 8001d4e:	d1f7      	bne.n	8001d40 <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8001d50:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
  uint8_t rxdataready = 0U;
 8001d54:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d58:	f100 0180 	add.w	r1, r0, #128	; 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d5c:	f109 0312 	add.w	r3, r9, #18
  uint32_t desccnt = 0U;
 8001d60:	4646      	mov	r6, r8
      dmarxdesc->BackupAddr0 = 0;
 8001d62:	46c3      	mov	fp, r8
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d64:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d68:	307c      	adds	r0, #124	; 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d6a:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8001d6e:	f1c3 0304 	rsb	r3, r3, #4
 8001d72:	9301      	str	r3, [sp, #4]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db05      	blt.n	8001d86 <HAL_ETH_ReadData+0x5e>
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	429e      	cmp	r6, r3
 8001d7e:	d002      	beq.n	8001d86 <HAL_ETH_ReadData+0x5e>
         && (rxdataready == 0U))
 8001d80:	f1b8 0f00 	cmp.w	r8, #0
 8001d84:	d011      	beq.n	8001daa <HAL_ETH_ReadData+0x82>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001d88:	441e      	add	r6, r3
 8001d8a:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d8c:	b116      	cbz	r6, 8001d94 <HAL_ETH_ReadData+0x6c>
    ETH_UpdateDescriptor(heth);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff fdd0 	bl	8001934 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001d94:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001d98:	f1b8 0f00 	cmp.w	r8, #0
 8001d9c:	d0d0      	beq.n	8001d40 <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001da0:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001da2:	f8ca 3000 	str.w	r3, [sl]
    heth->RxDescList.pRxStart = NULL;
 8001da6:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 8001da8:	e7cb      	b.n	8001d42 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	05db      	lsls	r3, r3, #23
 8001dae:	d503      	bpl.n	8001db8 <HAL_ETH_ReadData+0x90>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001db0:	69ab      	ldr	r3, [r5, #24]
 8001db2:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001db4:	69eb      	ldr	r3, [r5, #28]
 8001db6:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	059f      	lsls	r7, r3, #22
 8001dbc:	d401      	bmi.n	8001dc2 <HAL_ETH_ReadData+0x9a>
 8001dbe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001dc0:	b1cb      	cbz	r3, 8001df6 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	059a      	lsls	r2, r3, #22
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dc6:	682b      	ldr	r3, [r5, #0]
        heth->RxDescList.RxDataLength = 0;
 8001dc8:	bf48      	it	mi
 8001dca:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	d41e      	bmi.n	8001e10 <HAL_ETH_ReadData+0xe8>
      bufflength = heth->Init.RxBuffLen;
 8001dd2:	6967      	ldr	r7, [r4, #20]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dd4:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001dd6:	b2bb      	uxth	r3, r7
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dd8:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001dde:	f7fe ff85 	bl	8000cec <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001de2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001de4:	3301      	adds	r3, #1
 8001de6:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
      heth->RxDescList.RxDataLength += bufflength;
 8001dee:	443b      	add	r3, r7
 8001df0:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001df2:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001df6:	f109 0301 	add.w	r3, r9, #1
    desccnt++;
 8001dfa:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	bf88      	it	hi
 8001e00:	f1a9 0303 	subhi.w	r3, r9, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e04:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8001e08:	4699      	mov	r9, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e0a:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8001e0e:	e7b1      	b.n	8001d74 <HAL_ETH_ReadData+0x4c>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e10:	682f      	ldr	r7, [r5, #0]
        rxdataready = 1;
 8001e12:	f04f 0801 	mov.w	r8, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001e16:	682b      	ldr	r3, [r5, #0]
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e18:	f3c7 470d 	ubfx	r7, r7, #16, #14
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001e1c:	6723      	str	r3, [r4, #112]	; 0x70
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e1e:	3f04      	subs	r7, #4
        rxdataready = 1;
 8001e20:	e7d8      	b.n	8001dd4 <HAL_ETH_ReadData+0xac>

08001e22 <HAL_ETH_ReleaseTxPacket>:
{
 8001e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e26:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8001e28:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001e2a:	f04f 0928 	mov.w	r9, #40	; 0x28
 8001e2e:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001e32:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e36:	b106      	cbz	r6, 8001e3a <HAL_ETH_ReleaseTxPacket+0x18>
 8001e38:	b917      	cbnz	r7, 8001e40 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8001e40:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8001e44:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001e46:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001e4a:	b138      	cbz	r0, 8001e5c <HAL_ETH_ReleaseTxPacket+0x3a>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001e4c:	fb09 f304 	mul.w	r3, r9, r4
 8001e50:	68ea      	ldr	r2, [r5, #12]
 8001e52:	58d3      	ldr	r3, [r2, r3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da05      	bge.n	8001e64 <HAL_ETH_ReleaseTxPacket+0x42>
        pktTxStatus = 0U;
 8001e58:	2700      	movs	r7, #0
 8001e5a:	e7ec      	b.n	8001e36 <HAL_ETH_ReleaseTxPacket+0x14>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e5c:	3401      	adds	r4, #1
 8001e5e:	f004 0403 	and.w	r4, r4, #3
    if (pktInUse != 0U)
 8001e62:	e7e8      	b.n	8001e36 <HAL_ETH_ReleaseTxPacket+0x14>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e64:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001e66:	f7fe ff5a 	bl	8000d1e <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001e6a:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e6e:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8001e72:	e9c5 6410 	strd	r6, r4, [r5, #64]	; 0x40
 8001e76:	e7de      	b.n	8001e36 <HAL_ETH_ReleaseTxPacket+0x14>

08001e78 <HAL_ETH_PMTCallback>:
 8001e78:	4770      	bx	lr

08001e7a <HAL_ETH_WakeUpCallback>:
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	0651      	lsls	r1, r2, #25
{
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e8a:	d506      	bpl.n	8001e9a <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	0652      	lsls	r2, r2, #25
 8001e90:	d503      	bpl.n	8001e9a <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e92:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_ETH_IRQHandler+0xd0>)
 8001e94:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001e96:	f7fe fe91 	bl	8000bbc <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	07d0      	lsls	r0, r2, #31
 8001ea4:	d508      	bpl.n	8001eb8 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	07d1      	lsls	r1, r2, #31
 8001eaa:	d505      	bpl.n	8001eb8 <HAL_ETH_IRQHandler+0x3c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001eac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
      HAL_ETH_TxCpltCallback(heth);
 8001eb0:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001eb2:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001eb4:	f7fe fe8a 	bl	8000bcc <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	d521      	bpl.n	8001f08 <HAL_ETH_IRQHandler+0x8c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	0410      	lsls	r0, r2, #16
 8001ec8:	d51e      	bpl.n	8001f08 <HAL_ETH_IRQHandler+0x8c>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001eca:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001edc:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001ede:	d02d      	beq.n	8001f3c <HAL_ETH_IRQHandler+0xc0>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ee0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ee4:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001ee8:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001eec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ef0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001efa:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001efc:	23e0      	movs	r3, #224	; 0xe0
 8001efe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7fe fe6a 	bl	8000bdc <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0c:	0711      	lsls	r1, r2, #28
 8001f0e:	d50a      	bpl.n	8001f26 <HAL_ETH_IRQHandler+0xaa>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_ETH_PMTCallback(heth);
 8001f12:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001f18:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001f1c:	f7ff ffac 	bl	8001e78 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_ETH_IRQHandler+0xd4>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	0312      	lsls	r2, r2, #12
 8001f2c:	d505      	bpl.n	8001f3a <HAL_ETH_IRQHandler+0xbe>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8001f32:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f34:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001f36:	f7ff ffa0 	bl	8001e7a <HAL_ETH_WakeUpCallback>
}
 8001f3a:	bd10      	pop	{r4, pc}
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f3c:	f248 6180 	movw	r1, #34432	; 0x8680
 8001f40:	400a      	ands	r2, r1
 8001f42:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f46:	6159      	str	r1, [r3, #20]
 8001f48:	e7db      	b.n	8001f02 <HAL_ETH_IRQHandler+0x86>
 8001f4a:	bf00      	nop
 8001f4c:	00010040 	.word	0x00010040
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_ETH_ReadPHYRegister>:
{
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f58:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f5a:	0192      	lsls	r2, r2, #6
{
 8001f5c:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f5e:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f60:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f64:	f003 021c 	and.w	r2, r3, #28
 8001f68:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f6a:	02cc      	lsls	r4, r1, #11
 8001f6c:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f6e:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f70:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001f74:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001f76:	f7ff fa87 	bl	8001488 <HAL_GetTick>
 8001f7a:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f7c:	f014 0401 	ands.w	r4, r4, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_ETH_ReadPHYRegister+0x3a>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f82:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;
 8001f84:	4620      	mov	r0, r4
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	6033      	str	r3, [r6, #0]
}
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f8e:	f7ff fa7b 	bl	8001488 <HAL_GetTick>
 8001f92:	1bc0      	subs	r0, r0, r7
 8001f94:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001f98:	d202      	bcs.n	8001fa0 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f9a:	682b      	ldr	r3, [r5, #0]
 8001f9c:	691c      	ldr	r4, [r3, #16]
 8001f9e:	e7ed      	b.n	8001f7c <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	e7f3      	b.n	8001f8c <HAL_ETH_ReadPHYRegister+0x38>

08001fa4 <HAL_ETH_WritePHYRegister>:
{
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fa8:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001faa:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fac:	6906      	ldr	r6, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fb4:	f006 021c 	and.w	r2, r6, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fb8:	6143      	str	r3, [r0, #20]
 8001fba:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fbc:	02cc      	lsls	r4, r1, #11
 8001fbe:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fc0:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fc2:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 8001fc6:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001fc8:	f7ff fa5e 	bl	8001488 <HAL_GetTick>
 8001fcc:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fce:	f014 0401 	ands.w	r4, r4, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ETH_WritePHYRegister+0x34>
  return HAL_OK;
 8001fd4:	4620      	mov	r0, r4
}
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001fd8:	f7ff fa56 	bl	8001488 <HAL_GetTick>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001fe2:	d202      	bcs.n	8001fea <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001fe4:	682b      	ldr	r3, [r5, #0]
 8001fe6:	691c      	ldr	r4, [r3, #16]
 8001fe8:	e7f1      	b.n	8001fce <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7f3      	b.n	8001fd6 <HAL_ETH_WritePHYRegister+0x32>

08001fee <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d05d      	beq.n	80020ae <HAL_ETH_GetMACConfig+0xc0>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ff2:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ffc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002006:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800200e:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8002012:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002016:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002018:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800201c:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002024:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8002028:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002030:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002038:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002040:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8002048:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800204c:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8002054:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8002058:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002060:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002068:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002070:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002078:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002082:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002086:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002090:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	0c12      	lsrs	r2, r2, #16
 8002096:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800209e:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020a2:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 80020a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020a8:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  return HAL_OK;
 80020ac:	4770      	bx	lr
    return HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
}
 80020b0:	4770      	bx	lr

080020b2 <HAL_ETH_SetMACConfig>:
{
 80020b2:	b508      	push	{r3, lr}
  if (macconf == NULL)
 80020b4:	b139      	cbz	r1, 80020c6 <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 80020b6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d103      	bne.n	80020c6 <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 80020be:	f7ff fb47 	bl	8001750 <ETH_SetMACConfig>
    return HAL_OK;
 80020c2:	2000      	movs	r0, #0
}
 80020c4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e7fc      	b.n	80020c4 <HAL_ETH_SetMACConfig+0x12>
	...

080020cc <HAL_ETH_SetMDIOClockRange>:
{
 80020cc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 80020ce:	6803      	ldr	r3, [r0, #0]
{
 80020d0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 80020d2:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80020d4:	f000 fbe6 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_ETH_SetMDIOClockRange+0x54>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <HAL_ETH_SetMDIOClockRange+0x58>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020dc:	f024 041c 	bic.w	r4, r4, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020e0:	4403      	add	r3, r0
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d204      	bcs.n	80020f0 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020e6:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020ea:	682b      	ldr	r3, [r5, #0]
 80020ec:	611c      	str	r4, [r3, #16]
}
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_ETH_SetMDIOClockRange+0x5c>)
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_ETH_SetMDIOClockRange+0x60>)
 80020f4:	4403      	add	r3, r0
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d802      	bhi.n	8002100 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020fa:	f044 040c 	orr.w	r4, r4, #12
 80020fe:	e7f4      	b.n	80020ea <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_ETH_SetMDIOClockRange+0x68>)
 8002104:	4403      	add	r3, r0
 8002106:	4293      	cmp	r3, r2
 8002108:	d3ef      	bcc.n	80020ea <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_ETH_SetMDIOClockRange+0x6c>)
 800210c:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_ETH_SetMDIOClockRange+0x70>)
 800210e:	4403      	add	r3, r0
 8002110:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002112:	bf94      	ite	ls
 8002114:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002118:	f044 0410 	orrhi.w	r4, r4, #16
 800211c:	e7e5      	b.n	80020ea <HAL_ETH_SetMDIOClockRange+0x1e>
 800211e:	bf00      	nop
 8002120:	feced300 	.word	0xfeced300
 8002124:	00e4e1c0 	.word	0x00e4e1c0
 8002128:	fde9f140 	.word	0xfde9f140
 800212c:	017d783f 	.word	0x017d783f
 8002130:	fc6c7900 	.word	0xfc6c7900
 8002134:	02625a00 	.word	0x02625a00
 8002138:	fa0a1f00 	.word	0xfa0a1f00
 800213c:	02faf07f 	.word	0x02faf07f

08002140 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002140:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800214c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800230c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002154:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002158:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800215e:	43ac      	bics	r4, r5
 8002160:	f040 80b6 	bne.w	80022d0 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002164:	684d      	ldr	r5, [r1, #4]
 8002166:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800216a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800216c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002170:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002174:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002176:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002178:	2f01      	cmp	r7, #1
 800217a:	d834      	bhi.n	80021e6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800217c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800217e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002182:	68cf      	ldr	r7, [r1, #12]
 8002184:	fa07 f708 	lsl.w	r7, r7, r8
 8002188:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800218c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800218e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002190:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002194:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002198:	409f      	lsls	r7, r3
 800219a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800219e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80021a0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021a4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021a8:	688f      	ldr	r7, [r1, #8]
 80021aa:	fa07 f708 	lsl.w	r7, r7, r8
 80021ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80021b2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	d119      	bne.n	80021ea <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80021b6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ba:	f003 0b07 	and.w	fp, r3, #7
 80021be:	f04f 0e0f 	mov.w	lr, #15
 80021c2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80021c6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80021ca:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ce:	fa0e fe0b 	lsl.w	lr, lr, fp
 80021d2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021d6:	690f      	ldr	r7, [r1, #16]
 80021d8:	fa07 f70b 	lsl.w	r7, r7, fp
 80021dc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80021e0:	f8ca 7020 	str.w	r7, [sl, #32]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e6:	2c03      	cmp	r4, #3
 80021e8:	d1da      	bne.n	80021a0 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80021ea:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ec:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021f4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021f8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80021fc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fe:	d067      	beq.n	80022d0 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002200:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002204:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002208:	f003 0703 	and.w	r7, r3, #3
 800220c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002214:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002218:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800221e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8002222:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002226:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800222a:	9401      	str	r4, [sp, #4]
 800222c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800222e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8002232:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002236:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800223a:	4c33      	ldr	r4, [pc, #204]	; (8002308 <HAL_GPIO_Init+0x1c0>)
 800223c:	42a0      	cmp	r0, r4
 800223e:	d04e      	beq.n	80022de <HAL_GPIO_Init+0x196>
 8002240:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002244:	42a0      	cmp	r0, r4
 8002246:	d04c      	beq.n	80022e2 <HAL_GPIO_Init+0x19a>
 8002248:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800224c:	42a0      	cmp	r0, r4
 800224e:	d04a      	beq.n	80022e6 <HAL_GPIO_Init+0x19e>
 8002250:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002254:	42a0      	cmp	r0, r4
 8002256:	d048      	beq.n	80022ea <HAL_GPIO_Init+0x1a2>
 8002258:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800225c:	42a0      	cmp	r0, r4
 800225e:	d046      	beq.n	80022ee <HAL_GPIO_Init+0x1a6>
 8002260:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002264:	42a0      	cmp	r0, r4
 8002266:	d044      	beq.n	80022f2 <HAL_GPIO_Init+0x1aa>
 8002268:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800226c:	42a0      	cmp	r0, r4
 800226e:	d042      	beq.n	80022f6 <HAL_GPIO_Init+0x1ae>
 8002270:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002274:	42a0      	cmp	r0, r4
 8002276:	d040      	beq.n	80022fa <HAL_GPIO_Init+0x1b2>
 8002278:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800227c:	42a0      	cmp	r0, r4
 800227e:	d03e      	beq.n	80022fe <HAL_GPIO_Init+0x1b6>
 8002280:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002284:	42a0      	cmp	r0, r4
 8002286:	bf0c      	ite	eq
 8002288:	2409      	moveq	r4, #9
 800228a:	240a      	movne	r4, #10
 800228c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002290:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002294:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002296:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800229a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800229c:	bf54      	ite	pl
 800229e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80022a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a4:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80022a6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80022a8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	bf54      	ite	pl
 80022ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80022ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022b2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80022b4:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80022b6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	bf54      	ite	pl
 80022ba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80022bc:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80022c2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80022c4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	bf54      	ite	pl
 80022c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80022ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80022ce:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022d0:	3301      	adds	r3, #1
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	f47f af3e 	bne.w	8002154 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80022d8:	b003      	add	sp, #12
 80022da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022de:	2400      	movs	r4, #0
 80022e0:	e7d4      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022e2:	2401      	movs	r4, #1
 80022e4:	e7d2      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022e6:	2402      	movs	r4, #2
 80022e8:	e7d0      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022ea:	2403      	movs	r4, #3
 80022ec:	e7ce      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022ee:	2404      	movs	r4, #4
 80022f0:	e7cc      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022f2:	2405      	movs	r4, #5
 80022f4:	e7ca      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022f6:	2406      	movs	r4, #6
 80022f8:	e7c8      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022fa:	2407      	movs	r4, #7
 80022fc:	e7c6      	b.n	800228c <HAL_GPIO_Init+0x144>
 80022fe:	2408      	movs	r4, #8
 8002300:	e7c4      	b.n	800228c <HAL_GPIO_Init+0x144>
 8002302:	bf00      	nop
 8002304:	40013c00 	.word	0x40013c00
 8002308:	40020000 	.word	0x40020000
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	b10a      	cbz	r2, 8002316 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002312:	6181      	str	r1, [r0, #24]
  }
}
 8002314:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002316:	0409      	lsls	r1, r1, #16
 8002318:	e7fb      	b.n	8002312 <HAL_GPIO_WritePin+0x2>
	...

0800231c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800231e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002322:	4c19      	ldr	r4, [pc, #100]	; (8002388 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800233c:	f7ff f8a4 	bl	8001488 <HAL_GetTick>
 8002340:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002342:	6863      	ldr	r3, [r4, #4]
 8002344:	03da      	lsls	r2, r3, #15
 8002346:	d50c      	bpl.n	8002362 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002348:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800234a:	4d0f      	ldr	r5, [pc, #60]	; (8002388 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002352:	f7ff f899 	bl	8001488 <HAL_GetTick>
 8002356:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002358:	686b      	ldr	r3, [r5, #4]
 800235a:	039b      	lsls	r3, r3, #14
 800235c:	d50a      	bpl.n	8002374 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800235e:	2000      	movs	r0, #0
 8002360:	e006      	b.n	8002370 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002362:	f7ff f891 	bl	8001488 <HAL_GetTick>
 8002366:	1b40      	subs	r0, r0, r5
 8002368:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800236c:	d9e9      	bls.n	8002342 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800236e:	2003      	movs	r0, #3
}
 8002370:	b003      	add	sp, #12
 8002372:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002374:	f7ff f888 	bl	8001488 <HAL_GetTick>
 8002378:	1b00      	subs	r0, r0, r4
 800237a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800237e:	d9eb      	bls.n	8002358 <HAL_PWREx_EnableOverDrive+0x3c>
 8002380:	e7f5      	b.n	800236e <HAL_PWREx_EnableOverDrive+0x52>
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	4604      	mov	r4, r0
 8002392:	b340      	cbz	r0, 80023e6 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	07db      	lsls	r3, r3, #31
 8002398:	d410      	bmi.n	80023bc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	079f      	lsls	r7, r3, #30
 800239e:	d464      	bmi.n	800246a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	0719      	lsls	r1, r3, #28
 80023a4:	f100 80aa 	bmi.w	80024fc <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	075a      	lsls	r2, r3, #29
 80023ac:	f100 80cb 	bmi.w	8002546 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	69a2      	ldr	r2, [r4, #24]
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	f040 8134 	bne.w	8002620 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e02b      	b.n	8002414 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b96      	ldr	r3, [pc, #600]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f002 020c 	and.w	r2, r2, #12
 80023c4:	2a04      	cmp	r2, #4
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	f002 020c 	and.w	r2, r2, #12
 80023ce:	2a08      	cmp	r2, #8
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	0256      	lsls	r6, r2, #9
 80023d6:	d508      	bpl.n	80023ea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	039d      	lsls	r5, r3, #14
 80023de:	d5dc      	bpl.n	800239a <HAL_RCC_OscConfig+0xe>
 80023e0:	6863      	ldr	r3, [r4, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1d9      	bne.n	800239a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
 80023e8:	e014      	b.n	8002414 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	6862      	ldr	r2, [r4, #4]
 80023ec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80023f0:	d113      	bne.n	800241a <HAL_RCC_OscConfig+0x8e>
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023fa:	f7ff f845 	bl	8001488 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4e86      	ldr	r6, [pc, #536]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002400:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	6833      	ldr	r3, [r6, #0]
 8002404:	0398      	lsls	r0, r3, #14
 8002406:	d4c8      	bmi.n	800239a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff f83e 	bl	8001488 <HAL_GetTick>
 800240c:	1b40      	subs	r0, r0, r5
 800240e:	2864      	cmp	r0, #100	; 0x64
 8002410:	d9f7      	bls.n	8002402 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
}
 8002414:	b002      	add	sp, #8
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	4d7f      	ldr	r5, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b992      	cbnz	r2, 8002446 <HAL_RCC_OscConfig+0xba>
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800242e:	f7ff f82b 	bl	8001488 <HAL_GetTick>
 8002432:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	0399      	lsls	r1, r3, #14
 8002438:	d5af      	bpl.n	800239a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243a:	f7ff f825 	bl	8001488 <HAL_GetTick>
 800243e:	1b80      	subs	r0, r0, r6
 8002440:	2864      	cmp	r0, #100	; 0x64
 8002442:	d9f7      	bls.n	8002434 <HAL_RCC_OscConfig+0xa8>
 8002444:	e7e5      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0xd0>
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	682b      	ldr	r3, [r5, #0]
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	e7ce      	b.n	80023fa <HAL_RCC_OscConfig+0x6e>
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	602b      	str	r3, [r5, #0]
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	e7f6      	b.n	8002458 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246a:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	f012 0f0c 	tst.w	r2, #12
 8002472:	d007      	beq.n	8002484 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	f002 020c 	and.w	r2, r2, #12
 800247a:	2a08      	cmp	r2, #8
 800247c:	d111      	bne.n	80024a2 <HAL_RCC_OscConfig+0x116>
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	0252      	lsls	r2, r2, #9
 8002482:	d40e      	bmi.n	80024a2 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002484:	4a64      	ldr	r2, [pc, #400]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	079b      	lsls	r3, r3, #30
 800248a:	d502      	bpl.n	8002492 <HAL_RCC_OscConfig+0x106>
 800248c:	68e3      	ldr	r3, [r4, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d1a9      	bne.n	80023e6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	6921      	ldr	r1, [r4, #16]
 8002496:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800249a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800249e:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a0:	e77e      	b.n	80023a0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024a2:	68e2      	ldr	r2, [r4, #12]
 80024a4:	b1c2      	cbz	r2, 80024d8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80024a6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4d5b      	ldr	r5, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024b0:	f7fe ffea 	bl	8001488 <HAL_GetTick>
 80024b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	079f      	lsls	r7, r3, #30
 80024ba:	d507      	bpl.n	80024cc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	6922      	ldr	r2, [r4, #16]
 80024c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024c8:	602b      	str	r3, [r5, #0]
 80024ca:	e769      	b.n	80023a0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe ffdc 	bl	8001488 <HAL_GetTick>
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2802      	cmp	r0, #2
 80024d4:	d9ef      	bls.n	80024b6 <HAL_RCC_OscConfig+0x12a>
 80024d6:	e79c      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80024d8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4e4f      	ldr	r6, [pc, #316]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024e2:	f7fe ffd1 	bl	8001488 <HAL_GetTick>
 80024e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e8:	6833      	ldr	r3, [r6, #0]
 80024ea:	0798      	lsls	r0, r3, #30
 80024ec:	f57f af58 	bpl.w	80023a0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe ffca 	bl	8001488 <HAL_GetTick>
 80024f4:	1b40      	subs	r0, r0, r5
 80024f6:	2802      	cmp	r0, #2
 80024f8:	d9f6      	bls.n	80024e8 <HAL_RCC_OscConfig+0x15c>
 80024fa:	e78a      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024fc:	6963      	ldr	r3, [r4, #20]
 80024fe:	4d46      	ldr	r5, [pc, #280]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 8002500:	b183      	cbz	r3, 8002524 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8002502:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800250a:	f7fe ffbd 	bl	8001488 <HAL_GetTick>
 800250e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002512:	079b      	lsls	r3, r3, #30
 8002514:	f53f af48 	bmi.w	80023a8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe ffb6 	bl	8001488 <HAL_GetTick>
 800251c:	1b80      	subs	r0, r0, r6
 800251e:	2802      	cmp	r0, #2
 8002520:	d9f6      	bls.n	8002510 <HAL_RCC_OscConfig+0x184>
 8002522:	e776      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002524:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800252c:	f7fe ffac 	bl	8001488 <HAL_GetTick>
 8002530:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002534:	079f      	lsls	r7, r3, #30
 8002536:	f57f af37 	bpl.w	80023a8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe ffa5 	bl	8001488 <HAL_GetTick>
 800253e:	1b80      	subs	r0, r0, r6
 8002540:	2802      	cmp	r0, #2
 8002542:	d9f6      	bls.n	8002532 <HAL_RCC_OscConfig+0x1a6>
 8002544:	e765      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 8002548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254a:	00d0      	lsls	r0, r2, #3
 800254c:	d427      	bmi.n	800259e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002550:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4d2e      	ldr	r5, [pc, #184]	; (800261c <HAL_RCC_OscConfig+0x290>)
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	05d9      	lsls	r1, r3, #23
 8002568:	d51b      	bpl.n	80025a2 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256a:	68a3      	ldr	r3, [r4, #8]
 800256c:	4d2a      	ldr	r5, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 800256e:	2b01      	cmp	r3, #1
 8002570:	d127      	bne.n	80025c2 <HAL_RCC_OscConfig+0x236>
 8002572:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800257e:	f7fe ff83 	bl	8001488 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	4e25      	ldr	r6, [pc, #148]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002584:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002588:	079b      	lsls	r3, r3, #30
 800258a:	d53f      	bpl.n	800260c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800258c:	2f00      	cmp	r7, #0
 800258e:	f43f af0f 	beq.w	80023b0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_RCC_OscConfig+0x28c>)
 8002594:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	e708      	b.n	80023b0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800259e:	2700      	movs	r7, #0
 80025a0:	e7df      	b.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80025aa:	f7fe ff6d 	bl	8001488 <HAL_GetTick>
 80025ae:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	05da      	lsls	r2, r3, #23
 80025b4:	d4d9      	bmi.n	800256a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe ff67 	bl	8001488 <HAL_GetTick>
 80025ba:	1b80      	subs	r0, r0, r6
 80025bc:	2864      	cmp	r0, #100	; 0x64
 80025be:	d9f7      	bls.n	80025b0 <HAL_RCC_OscConfig+0x224>
 80025c0:	e727      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	b9ab      	cbnz	r3, 80025f0 <HAL_RCC_OscConfig+0x264>
 80025c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	672b      	str	r3, [r5, #112]	; 0x70
 80025d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80025d8:	f7fe ff56 	bl	8001488 <HAL_GetTick>
 80025dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025e0:	0798      	lsls	r0, r3, #30
 80025e2:	d5d3      	bpl.n	800258c <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe ff50 	bl	8001488 <HAL_GetTick>
 80025e8:	1b80      	subs	r0, r0, r6
 80025ea:	4540      	cmp	r0, r8
 80025ec:	d9f7      	bls.n	80025de <HAL_RCC_OscConfig+0x252>
 80025ee:	e710      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025f4:	d103      	bne.n	80025fe <HAL_RCC_OscConfig+0x272>
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	672b      	str	r3, [r5, #112]	; 0x70
 80025fc:	e7b9      	b.n	8002572 <HAL_RCC_OscConfig+0x1e6>
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	672b      	str	r3, [r5, #112]	; 0x70
 8002604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	e7b5      	b.n	8002578 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe ff3c 	bl	8001488 <HAL_GetTick>
 8002610:	1b40      	subs	r0, r0, r5
 8002612:	4540      	cmp	r0, r8
 8002614:	d9b7      	bls.n	8002586 <HAL_RCC_OscConfig+0x1fa>
 8002616:	e6fc      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	4d38      	ldr	r5, [pc, #224]	; (8002704 <HAL_RCC_OscConfig+0x378>)
 8002622:	68ab      	ldr	r3, [r5, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d041      	beq.n	80026b0 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 800262c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002634:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002636:	d12e      	bne.n	8002696 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8002638:	f7fe ff26 	bl	8001488 <HAL_GetTick>
 800263c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	682b      	ldr	r3, [r5, #0]
 8002640:	0199      	lsls	r1, r3, #6
 8002642:	d422      	bmi.n	800268a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	1e5a      	subs	r2, r3, #1
 800264a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800264e:	430b      	orrs	r3, r1
 8002650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002656:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800265a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800265c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002664:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002666:	682b      	ldr	r3, [r5, #0]
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800266e:	f7fe ff0b 	bl	8001488 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4d24      	ldr	r5, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8002674:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	019a      	lsls	r2, r3, #6
 800267a:	f53f ae9d 	bmi.w	80023b8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe ff03 	bl	8001488 <HAL_GetTick>
 8002682:	1b00      	subs	r0, r0, r4
 8002684:	2802      	cmp	r0, #2
 8002686:	d9f6      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ea>
 8002688:	e6c3      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fefd 	bl	8001488 <HAL_GetTick>
 800268e:	1b80      	subs	r0, r0, r6
 8002690:	2802      	cmp	r0, #2
 8002692:	d9d4      	bls.n	800263e <HAL_RCC_OscConfig+0x2b2>
 8002694:	e6bd      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002696:	f7fe fef7 	bl	8001488 <HAL_GetTick>
 800269a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	019b      	lsls	r3, r3, #6
 80026a0:	f57f ae8a 	bpl.w	80023b8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fef0 	bl	8001488 <HAL_GetTick>
 80026a8:	1b00      	subs	r0, r0, r4
 80026aa:	2802      	cmp	r0, #2
 80026ac:	d9f6      	bls.n	800269c <HAL_RCC_OscConfig+0x310>
 80026ae:	e6b0      	b.n	8002412 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80026b2:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	f43f ae97 	beq.w	80023e6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	69e1      	ldr	r1, [r4, #28]
 80026be:	428a      	cmp	r2, r1
 80026c0:	f47f ae91 	bne.w	80023e6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	6a21      	ldr	r1, [r4, #32]
 80026ca:	428a      	cmp	r2, r1
 80026cc:	f47f ae8b 	bne.w	80023e6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d6:	401a      	ands	r2, r3
 80026d8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80026dc:	f47f ae83 	bne.w	80023e6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026e2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80026e6:	0852      	lsrs	r2, r2, #1
 80026e8:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80026ee:	f47f ae7a 	bne.w	80023e6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80026f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80026fc:	f43f ae5c 	beq.w	80023b8 <HAL_RCC_OscConfig+0x2c>
 8002700:	e671      	b.n	80023e6 <HAL_RCC_OscConfig+0x5a>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800

08002708 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800270a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	688b      	ldr	r3, [r1, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d01b      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x46>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11b      	bne.n	8002752 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800271c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002720:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002724:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800272c:	bf1a      	itte	ne
 800272e:	480b      	ldrne	r0, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x54>)
 8002730:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	480b      	ldreq	r0, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0x58>)
 8002734:	fba1 0100 	umull	r0, r1, r1, r0
 8002738:	f7fd fdd2 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_GetSysClockFreq+0x50>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002744:	3301      	adds	r3, #1
 8002746:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002748:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800274c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <HAL_RCC_GetSysClockFreq+0x54>)
 8002750:	e7fc      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002754:	e7fa      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x44>
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	007a1200 	.word	0x007a1200
 8002760:	00f42400 	.word	0x00f42400

08002764 <HAL_RCC_ClockConfig>:
{
 8002764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002768:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800276a:	4604      	mov	r4, r0
 800276c:	b910      	cbnz	r0, 8002774 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800276e:	2001      	movs	r0, #1
}
 8002770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4a46      	ldr	r2, [pc, #280]	; (8002890 <HAL_RCC_ClockConfig+0x12c>)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	428b      	cmp	r3, r1
 800277e:	d328      	bcc.n	80027d2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	0797      	lsls	r7, r2, #30
 8002784:	d430      	bmi.n	80027e8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	07d0      	lsls	r0, r2, #31
 8002788:	d444      	bmi.n	8002814 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_RCC_ClockConfig+0x12c>)
 800278c:	6813      	ldr	r3, [r2, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	42ab      	cmp	r3, r5
 8002794:	d867      	bhi.n	8002866 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002796:	6822      	ldr	r2, [r4, #0]
 8002798:	0751      	lsls	r1, r2, #29
 800279a:	d470      	bmi.n	800287e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	0713      	lsls	r3, r2, #28
 800279e:	d507      	bpl.n	80027b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 80027a2:	6921      	ldr	r1, [r4, #16]
 80027a4:	6893      	ldr	r3, [r2, #8]
 80027a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b0:	f7ff ffaa 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 80027b6:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_RCC_ClockConfig+0x134>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_ClockConfig+0x138>)
 80027c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x13c>)
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f7fe fcb3 	bl	8001134 <HAL_InitTick>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
 80027d0:	e7ce      	b.n	8002770 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	430b      	orrs	r3, r1
 80027da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	428b      	cmp	r3, r1
 80027e4:	d1c3      	bne.n	800276e <HAL_RCC_ClockConfig+0xa>
 80027e6:	e7cb      	b.n	8002780 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	f012 0f04 	tst.w	r2, #4
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80027f6:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	0716      	lsls	r6, r2, #28
 80027fa:	d503      	bpl.n	8002804 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8002802:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4923      	ldr	r1, [pc, #140]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 8002806:	68a0      	ldr	r0, [r4, #8]
 8002808:	688b      	ldr	r3, [r1, #8]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280e:	4303      	orrs	r3, r0
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	e7b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	6861      	ldr	r1, [r4, #4]
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 8002818:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281c:	d11b      	bne.n	8002856 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	d0a4      	beq.n	800276e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002824:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002826:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4f1a      	ldr	r7, [pc, #104]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282c:	f022 0203 	bic.w	r2, r2, #3
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002834:	f7fe fe28 	bl	8001488 <HAL_GetTick>
 8002838:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6862      	ldr	r2, [r4, #4]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002846:	d0a0      	beq.n	800278a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fe1e 	bl	8001488 <HAL_GetTick>
 800284c:	1b80      	subs	r0, r0, r6
 800284e:	4540      	cmp	r0, r8
 8002850:	d9f3      	bls.n	800283a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e78c      	b.n	8002770 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002856:	2902      	cmp	r1, #2
 8002858:	d102      	bne.n	8002860 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800285e:	e7e0      	b.n	8002822 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	f012 0f02 	tst.w	r2, #2
 8002864:	e7dd      	b.n	8002822 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	f023 030f 	bic.w	r3, r3, #15
 800286c:	432b      	orrs	r3, r5
 800286e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	42ab      	cmp	r3, r5
 8002878:	f47f af79 	bne.w	800276e <HAL_RCC_ClockConfig+0xa>
 800287c:	e78b      	b.n	8002796 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287e:	4905      	ldr	r1, [pc, #20]	; (8002894 <HAL_RCC_ClockConfig+0x130>)
 8002880:	68e0      	ldr	r0, [r4, #12]
 8002882:	688b      	ldr	r3, [r1, #8]
 8002884:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002888:	4303      	orrs	r3, r0
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e786      	b.n	800279c <HAL_RCC_ClockConfig+0x38>
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	0800f0fa 	.word	0x0800f0fa
 800289c:	20000024 	.word	0x20000024
 80028a0:	2000002c 	.word	0x2000002c

080028a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028a4:	4b01      	ldr	r3, [pc, #4]	; (80028ac <HAL_RCC_GetHCLKFreq+0x8>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000024 	.word	0x20000024

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	4a03      	ldr	r2, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028be:	6810      	ldr	r0, [r2, #0]
}
 80028c0:	40d8      	lsrs	r0, r3
 80028c2:	4770      	bx	lr
 80028c4:	40023800 	.word	0x40023800
 80028c8:	0800f10a 	.word	0x0800f10a
 80028cc:	20000024 	.word	0x20000024

080028d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028d0:	230f      	movs	r3, #15
 80028d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_GetClockConfig+0x34>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80028e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80028ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80028f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_RCC_GetClockConfig+0x38>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	600b      	str	r3, [r1, #0]
}
 8002902:	4770      	bx	lr
 8002904:	40023800 	.word	0x40023800
 8002908:	40023c00 	.word	0x40023c00

0800290c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800290c:	4770      	bx	lr
	...

08002910 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002914:	2b01      	cmp	r3, #1
 8002916:	d133      	bne.n	8002980 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	2302      	movs	r3, #2
 800291a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_TIM_Base_Start_IT+0x74>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01a      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d017      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 8002934:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 800293c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002940:	4293      	cmp	r3, r2
 8002942:	d00f      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 8002944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 800294c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 8002954:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x54>
 800295c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002960:	4293      	cmp	r3, r2
 8002962:	d107      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_TIM_Base_Start_IT+0x78>)
 8002968:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	2a06      	cmp	r2, #6
 800296c:	d006      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
 800296e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002972:	d003      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800297c:	2000      	movs	r0, #0
}
 800297e:	4770      	bx	lr
    return HAL_ERROR;
 8002980:	2001      	movs	r0, #1
 8002982:	4770      	bx	lr
 8002984:	40010000 	.word	0x40010000
 8002988:	00010007 	.word	0x00010007

0800298c <HAL_TIM_OC_DelayElapsedCallback>:
 800298c:	4770      	bx	lr

0800298e <HAL_TIM_IC_CaptureCallback>:
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_TriggerCallback>:
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	0791      	lsls	r1, r2, #30
{
 800299a:	b510      	push	{r4, lr}
 800299c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800299e:	d50f      	bpl.n	80029c0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	0792      	lsls	r2, r2, #30
 80029a4:	d50c      	bpl.n	80029c0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a6:	f06f 0202 	mvn.w	r2, #2
 80029aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ac:	2201      	movs	r2, #1
 80029ae:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	0799      	lsls	r1, r3, #30
 80029b4:	f000 8085 	beq.w	8002ac2 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	f7ff ffe9 	bl	800298e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029bc:	2300      	movs	r3, #0
 80029be:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	0752      	lsls	r2, r2, #29
 80029c6:	d510      	bpl.n	80029ea <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	0750      	lsls	r0, r2, #29
 80029cc:	d50d      	bpl.n	80029ea <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029ce:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d6:	2202      	movs	r2, #2
 80029d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80029e0:	d075      	beq.n	8002ace <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	f7ff ffd4 	bl	800298e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	2300      	movs	r3, #0
 80029e8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	0711      	lsls	r1, r2, #28
 80029f0:	d50f      	bpl.n	8002a12 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	0712      	lsls	r2, r2, #28
 80029f6:	d50c      	bpl.n	8002a12 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a00:	2204      	movs	r2, #4
 8002a02:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	079b      	lsls	r3, r3, #30
 8002a08:	d067      	beq.n	8002ada <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	f7ff ffc0 	bl	800298e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	06d0      	lsls	r0, r2, #27
 8002a18:	d510      	bpl.n	8002a3c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	06d1      	lsls	r1, r2, #27
 8002a1e:	d50d      	bpl.n	8002a3c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a20:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a28:	2208      	movs	r2, #8
 8002a2a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002a32:	d058      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a34:	f7ff ffab 	bl	800298e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	07d2      	lsls	r2, r2, #31
 8002a42:	d508      	bpl.n	8002a56 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	07d0      	lsls	r0, r2, #31
 8002a48:	d505      	bpl.n	8002a56 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a50:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a52:	f7fe fbb1 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	0611      	lsls	r1, r2, #24
 8002a5c:	d508      	bpl.n	8002a70 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	0612      	lsls	r2, r2, #24
 8002a62:	d505      	bpl.n	8002a70 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a68:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a6c:	f000 f8d9 	bl	8002c22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	05d0      	lsls	r0, r2, #23
 8002a76:	d508      	bpl.n	8002a8a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	0611      	lsls	r1, r2, #24
 8002a7c:	d505      	bpl.n	8002a8a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002a86:	f000 f8cd 	bl	8002c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	0652      	lsls	r2, r2, #25
 8002a90:	d508      	bpl.n	8002aa4 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	0650      	lsls	r0, r2, #25
 8002a96:	d505      	bpl.n	8002aa4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002aa0:	f7ff ff77 	bl	8002992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	0691      	lsls	r1, r2, #26
 8002aaa:	d522      	bpl.n	8002af2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	0692      	lsls	r2, r2, #26
 8002ab0:	d51f      	bpl.n	8002af2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	f000 b8af 	b.w	8002c20 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	f7ff ff63 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7ff ff62 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
 8002acc:	e776      	b.n	80029bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	f7ff ff5d 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7ff ff5c 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ad8:	e785      	b.n	80029e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	f7ff ff57 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff ff56 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ae4:	e793      	b.n	8002a0e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	f7ff ff51 	bl	800298c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff50 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
 8002af0:	e7a2      	b.n	8002a38 <HAL_TIM_IRQHandler+0xa4>
}
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002af6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	4290      	cmp	r0, r2
 8002afa:	d012      	beq.n	8002b22 <TIM_Base_SetConfig+0x2e>
 8002afc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0x2e>
 8002b02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b06:	4290      	cmp	r0, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0x2e>
 8002b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b0e:	4290      	cmp	r0, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0x2e>
 8002b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b16:	4290      	cmp	r0, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0x2e>
 8002b1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b1e:	4290      	cmp	r0, r2
 8002b20:	d119      	bne.n	8002b56 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002b22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b28:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2a:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <TIM_Base_SetConfig+0xc4>)
 8002b2c:	4290      	cmp	r0, r2
 8002b2e:	d029      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b34:	d026      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b3a:	4290      	cmp	r0, r2
 8002b3c:	d022      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d01e      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	d01a      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b52:	4290      	cmp	r0, r2
 8002b54:	d016      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <TIM_Base_SetConfig+0xc8>)
 8002b58:	4290      	cmp	r0, r2
 8002b5a:	d013      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b60:	4290      	cmp	r0, r2
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b68:	4290      	cmp	r0, r2
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b6c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b70:	4290      	cmp	r0, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b78:	4290      	cmp	r0, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x90>
 8002b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b80:	4290      	cmp	r0, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b88:	68ca      	ldr	r2, [r1, #12]
 8002b8a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	694a      	ldr	r2, [r1, #20]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002b94:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b96:	688b      	ldr	r3, [r1, #8]
 8002b98:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9a:	680b      	ldr	r3, [r1, #0]
 8002b9c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <TIM_Base_SetConfig+0xc4>)
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0xb8>
 8002ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ba8:	4298      	cmp	r0, r3
 8002baa:	d101      	bne.n	8002bb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bac:	690b      	ldr	r3, [r1, #16]
 8002bae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	6143      	str	r3, [r0, #20]
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40014000 	.word	0x40014000

08002bc0 <HAL_TIM_Base_Init>:
{
 8002bc0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	b350      	cbz	r0, 8002c1c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bce:	b91b      	cbnz	r3, 8002bd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002bd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bd4:	f7ff fe9a 	bl	800290c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be2:	f7ff ff87 	bl	8002af4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be6:	2301      	movs	r3, #1
  return HAL_OK;
 8002be8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002bf2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002bf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002bfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002c12:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002c1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	e7fc      	b.n	8002c1a <HAL_TIM_Base_Init+0x5a>

08002c20 <HAL_TIMEx_CommutCallback>:
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIMEx_BreakCallback>:
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_Break2Callback>:
 8002c24:	4770      	bx	lr

08002c26 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c26:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c2a:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c30:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c32:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c3a:	4770      	bx	lr

08002c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c40:	4770      	bx	lr

08002c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c42:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c44:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002c46:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c48:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c4e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002c50:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002c52:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002c54:	3301      	adds	r3, #1
 8002c56:	6003      	str	r3, [r0, #0]
}
 8002c58:	4770      	bx	lr

08002c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c5a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c5c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c5e:	1c63      	adds	r3, r4, #1
 8002c60:	d10a      	bne.n	8002c78 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c62:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c68:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c6a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c6c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002c6e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002c70:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002c72:	3301      	adds	r3, #1
 8002c74:	6003      	str	r3, [r0, #0]
}
 8002c76:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c78:	f100 0208 	add.w	r2, r0, #8
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	6852      	ldr	r2, [r2, #4]
 8002c80:	6815      	ldr	r5, [r2, #0]
 8002c82:	42a5      	cmp	r5, r4
 8002c84:	d9fa      	bls.n	8002c7c <vListInsert+0x22>
 8002c86:	e7ed      	b.n	8002c64 <vListInsert+0xa>

08002c88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c8a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8002c8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c90:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c96:	bf08      	it	eq
 8002c98:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	3a01      	subs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca4:	6818      	ldr	r0, [r3, #0]
}
 8002ca6:	4770      	bx	lr

08002ca8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cac:	f001 fd52 	bl	8004754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cb0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 fd73 	bl	800479c <vPortExitCritical>

	return xReturn;
}
 8002cb6:	fab4 f084 	clz	r0, r4
 8002cba:	0940      	lsrs	r0, r0, #5
 8002cbc:	bd10      	pop	{r4, pc}

08002cbe <prvCopyDataToQueue>:
{
 8002cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002cc4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cc8:	b952      	cbnz	r2, 8002ce0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cca:	6807      	ldr	r7, [r0, #0]
 8002ccc:	bb47      	cbnz	r7, 8002d20 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cce:	6880      	ldr	r0, [r0, #8]
 8002cd0:	f001 f996 	bl	8004000 <xTaskPriorityDisinherit>
 8002cd4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cd6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cd8:	3601      	adds	r6, #1
}
 8002cda:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cdc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ce0:	b965      	cbnz	r5, 8002cfc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ce2:	6840      	ldr	r0, [r0, #4]
 8002ce4:	f00a fc30 	bl	800d548 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cec:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cee:	68a2      	ldr	r2, [r4, #8]
 8002cf0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cf2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cf4:	d3f0      	bcc.n	8002cd8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	e7ed      	b.n	8002cd8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cfc:	68c0      	ldr	r0, [r0, #12]
 8002cfe:	f00a fc23 	bl	800d548 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d04:	68e3      	ldr	r3, [r4, #12]
 8002d06:	4251      	negs	r1, r2
 8002d08:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d0e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d10:	bf3e      	ittt	cc
 8002d12:	68a3      	ldrcc	r3, [r4, #8]
 8002d14:	185b      	addcc	r3, r3, r1
 8002d16:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002d18:	2d02      	cmp	r5, #2
 8002d1a:	d101      	bne.n	8002d20 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d1c:	b116      	cbz	r6, 8002d24 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8002d1e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002d20:	2500      	movs	r5, #0
 8002d22:	e7d9      	b.n	8002cd8 <prvCopyDataToQueue+0x1a>
 8002d24:	4635      	mov	r5, r6
 8002d26:	e7d7      	b.n	8002cd8 <prvCopyDataToQueue+0x1a>

08002d28 <prvCopyDataFromQueue>:
{
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002d2e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d30:	b162      	cbz	r2, 8002d4c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d32:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d34:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d36:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d38:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d3a:	60dc      	str	r4, [r3, #12]
}
 8002d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d40:	bf24      	itt	cs
 8002d42:	6819      	ldrcs	r1, [r3, #0]
 8002d44:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d46:	68d9      	ldr	r1, [r3, #12]
 8002d48:	f00a bbfe 	b.w	800d548 <memcpy>
}
 8002d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <prvUnlockQueue>:
{
 8002d52:	b570      	push	{r4, r5, r6, lr}
 8002d54:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002d56:	f001 fcfd 	bl	8004754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002d5a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d5e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002d62:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d64:	2d00      	cmp	r5, #0
 8002d66:	dc14      	bgt.n	8002d92 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002d68:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d6a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8002d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002d72:	f001 fd13 	bl	800479c <vPortExitCritical>
	taskENTER_CRITICAL();
 8002d76:	f001 fced 	bl	8004754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002d7a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002d7e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d80:	2d00      	cmp	r5, #0
 8002d82:	dc12      	bgt.n	8002daa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002d84:	23ff      	movs	r3, #255	; 0xff
 8002d86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002d8e:	f001 bd05 	b.w	800479c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0e7      	beq.n	8002d68 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f000 ffa3 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002d9e:	b108      	cbz	r0, 8002da4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002da0:	f001 f824 	bl	8003dec <vTaskMissedYield>
			--cTxLock;
 8002da4:	3d01      	subs	r5, #1
 8002da6:	b26d      	sxtb	r5, r5
 8002da8:	e7dc      	b.n	8002d64 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0e9      	beq.n	8002d84 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db0:	4630      	mov	r0, r6
 8002db2:	f000 ff97 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002db6:	b108      	cbz	r0, 8002dbc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002db8:	f001 f818 	bl	8003dec <vTaskMissedYield>
				--cRxLock;
 8002dbc:	3d01      	subs	r5, #1
 8002dbe:	b26d      	sxtb	r5, r5
 8002dc0:	e7de      	b.n	8002d80 <prvUnlockQueue+0x2e>

08002dc2 <xQueueGenericReset>:
{
 8002dc2:	b538      	push	{r3, r4, r5, lr}
 8002dc4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	b950      	cbnz	r0, 8002de0 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	b672      	cpsid	i
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	b662      	cpsie	i
 8002dde:	e7fe      	b.n	8002dde <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8002de0:	f001 fcb8 	bl	8004754 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dea:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dec:	434b      	muls	r3, r1
 8002dee:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df0:	1a5b      	subs	r3, r3, r1
 8002df2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dfa:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dfc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002dfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002e06:	b9a5      	cbnz	r5, 8002e32 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e08:	6923      	ldr	r3, [r4, #16]
 8002e0a:	b173      	cbz	r3, 8002e2a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e0c:	f104 0010 	add.w	r0, r4, #16
 8002e10:	f000 ff68 	bl	8003ce4 <xTaskRemoveFromEventList>
 8002e14:	b148      	cbz	r0, 8002e2a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8002e16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002e2a:	f001 fcb7 	bl	800479c <vPortExitCritical>
}
 8002e2e:	2001      	movs	r0, #1
 8002e30:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e32:	f104 0010 	add.w	r0, r4, #16
 8002e36:	f7ff fef6 	bl	8002c26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e3e:	f7ff fef2 	bl	8002c26 <vListInitialise>
 8002e42:	e7f2      	b.n	8002e2a <xQueueGenericReset+0x68>

08002e44 <xQueueGenericCreate>:
	{
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	460d      	mov	r5, r1
 8002e48:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	b950      	cbnz	r0, 8002e64 <xQueueGenericCreate+0x20>
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	b672      	cpsid	i
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	b662      	cpsie	i
 8002e62:	e7fe      	b.n	8002e62 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e64:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e66:	3050      	adds	r0, #80	; 0x50
 8002e68:	f001 fb4c 	bl	8004504 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	b158      	cbz	r0, 8002e88 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e70:	b165      	cbz	r5, 8002e8c <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e72:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e76:	2101      	movs	r1, #1
 8002e78:	4620      	mov	r0, r4
 8002e7a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8002e7c:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e80:	f7ff ff9f 	bl	8002dc2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002e84:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002e88:	4620      	mov	r0, r4
 8002e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	e7f2      	b.n	8002e76 <xQueueGenericCreate+0x32>

08002e90 <xQueueCreateCountingSemaphore>:
	{
 8002e90:	b510      	push	{r4, lr}
 8002e92:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8002e94:	b950      	cbnz	r0, 8002eac <xQueueCreateCountingSemaphore+0x1c>
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	b672      	cpsid	i
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	b662      	cpsie	i
 8002eaa:	e7fe      	b.n	8002eaa <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002eac:	4288      	cmp	r0, r1
 8002eae:	d20a      	bcs.n	8002ec6 <xQueueCreateCountingSemaphore+0x36>
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	b672      	cpsid	i
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	b662      	cpsie	i
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	2100      	movs	r1, #0
 8002eca:	f7ff ffbb 	bl	8002e44 <xQueueGenericCreate>
		if( xHandle != NULL )
 8002ece:	b100      	cbz	r0, 8002ed2 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ed0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8002ed2:	bd10      	pop	{r4, pc}

08002ed4 <xQueueGenericSend>:
{
 8002ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	4688      	mov	r8, r1
 8002edc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002ede:	4604      	mov	r4, r0
{
 8002ee0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002ee2:	b950      	cbnz	r0, 8002efa <xQueueGenericSend+0x26>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	b672      	cpsid	i
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	b662      	cpsie	i
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efa:	b961      	cbnz	r1, 8002f16 <xQueueGenericSend+0x42>
 8002efc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002efe:	b153      	cbz	r3, 8002f16 <xQueueGenericSend+0x42>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	b672      	cpsid	i
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	b662      	cpsie	i
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f16:	2f02      	cmp	r7, #2
 8002f18:	d10d      	bne.n	8002f36 <xQueueGenericSend+0x62>
 8002f1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d00a      	beq.n	8002f36 <xQueueGenericSend+0x62>
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	b672      	cpsid	i
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	b662      	cpsie	i
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f36:	f001 f805 	bl	8003f44 <xTaskGetSchedulerState>
 8002f3a:	4606      	mov	r6, r0
 8002f3c:	b960      	cbnz	r0, 8002f58 <xQueueGenericSend+0x84>
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	b15b      	cbz	r3, 8002f5a <xQueueGenericSend+0x86>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	b672      	cpsid	i
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	b662      	cpsie	i
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x82>
 8002f58:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002f5a:	f04f 0900 	mov.w	r9, #0
 8002f5e:	e037      	b.n	8002fd0 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f60:	9d01      	ldr	r5, [sp, #4]
 8002f62:	b91d      	cbnz	r5, 8002f6c <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8002f64:	f001 fc1a 	bl	800479c <vPortExitCritical>
			return errQUEUE_FULL;
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e052      	b.n	8003012 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8002f6c:	b916      	cbnz	r6, 8002f74 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6e:	a802      	add	r0, sp, #8
 8002f70:	f000 fef6 	bl	8003d60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002f74:	f001 fc12 	bl	800479c <vPortExitCritical>
		vTaskSuspendAll();
 8002f78:	f000 fd42 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f7c:	f001 fbea 	bl	8004754 <vPortEnterCritical>
 8002f80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f84:	2bff      	cmp	r3, #255	; 0xff
 8002f86:	d101      	bne.n	8002f8c <xQueueGenericSend+0xb8>
 8002f88:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8002f8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f90:	2bff      	cmp	r3, #255	; 0xff
 8002f92:	d101      	bne.n	8002f98 <xQueueGenericSend+0xc4>
 8002f94:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8002f98:	f001 fc00 	bl	800479c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f9c:	a901      	add	r1, sp, #4
 8002f9e:	a802      	add	r0, sp, #8
 8002fa0:	f000 fee8 	bl	8003d74 <xTaskCheckForTimeOut>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d14a      	bne.n	800303e <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa8:	f001 fbd4 	bl	8004754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d131      	bne.n	8003018 <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002fb4:	f001 fbf2 	bl	800479c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fb8:	9901      	ldr	r1, [sp, #4]
 8002fba:	f104 0010 	add.w	r0, r4, #16
 8002fbe:	f000 fe77 	bl	8003cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff fec5 	bl	8002d52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fc8:	f000 fda6 	bl	8003b18 <xTaskResumeAll>
 8002fcc:	b360      	cbz	r0, 8003028 <xQueueGenericSend+0x154>
 8002fce:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002fd0:	f001 fbc0 	bl	8004754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d301      	bcc.n	8002fe0 <xQueueGenericSend+0x10c>
 8002fdc:	2f02      	cmp	r7, #2
 8002fde:	d1bf      	bne.n	8002f60 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe0:	463a      	mov	r2, r7
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff fe6a 	bl	8002cbe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fec:	b11b      	cbz	r3, 8002ff6 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ff2:	f000 fe77 	bl	8003ce4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002ff6:	b148      	cbz	r0, 800300c <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002ff8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003000:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800300c:	f001 fbc6 	bl	800479c <vPortExitCritical>
				return pdPASS;
 8003010:	2001      	movs	r0, #1
}
 8003012:	b005      	add	sp, #20
 8003014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8003018:	f001 fbc0 	bl	800479c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800301c:	4620      	mov	r0, r4
 800301e:	f7ff fe98 	bl	8002d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003022:	f000 fd79 	bl	8003b18 <xTaskResumeAll>
 8003026:	e7d2      	b.n	8002fce <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8003028:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003030:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	e7c7      	b.n	8002fce <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800303e:	4620      	mov	r0, r4
 8003040:	f7ff fe87 	bl	8002d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003044:	f000 fd68 	bl	8003b18 <xTaskResumeAll>
 8003048:	e78e      	b.n	8002f68 <xQueueGenericSend+0x94>

0800304a <xQueueCreateMutex>:
	{
 800304a:	b570      	push	{r4, r5, r6, lr}
 800304c:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800304e:	2050      	movs	r0, #80	; 0x50
 8003050:	f001 fa58 	bl	8004504 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003054:	4604      	mov	r4, r0
 8003056:	b188      	cbz	r0, 800307c <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8003058:	2500      	movs	r5, #0
 800305a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800305c:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800305e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003062:	f7ff feae 	bl	8002dc2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003066:	462b      	mov	r3, r5
 8003068:	462a      	mov	r2, r5
 800306a:	4629      	mov	r1, r5
 800306c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800306e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003072:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003074:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003076:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003078:	f7ff ff2c 	bl	8002ed4 <xQueueGenericSend>
	}
 800307c:	4620      	mov	r0, r4
 800307e:	bd70      	pop	{r4, r5, r6, pc}

08003080 <xQueueGenericSendFromISR>:
{
 8003080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003084:	4689      	mov	r9, r1
 8003086:	4690      	mov	r8, r2
 8003088:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800308a:	4604      	mov	r4, r0
 800308c:	b950      	cbnz	r0, 80030a4 <xQueueGenericSendFromISR+0x24>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	b672      	cpsid	i
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	b662      	cpsie	i
 80030a2:	e7fe      	b.n	80030a2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a4:	b961      	cbnz	r1, 80030c0 <xQueueGenericSendFromISR+0x40>
 80030a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030a8:	b153      	cbz	r3, 80030c0 <xQueueGenericSendFromISR+0x40>
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	b672      	cpsid	i
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	b662      	cpsie	i
 80030be:	e7fe      	b.n	80030be <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030c0:	2f02      	cmp	r7, #2
 80030c2:	d10d      	bne.n	80030e0 <xQueueGenericSendFromISR+0x60>
 80030c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d00a      	beq.n	80030e0 <xQueueGenericSendFromISR+0x60>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	b672      	cpsid	i
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	b662      	cpsie	i
 80030de:	e7fe      	b.n	80030de <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e0:	f001 fc34 	bl	800494c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e4:	f3ef 8611 	mrs	r6, BASEPRI
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	b672      	cpsid	i
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003100:	429a      	cmp	r2, r3
 8003102:	d301      	bcc.n	8003108 <xQueueGenericSendFromISR+0x88>
 8003104:	2f02      	cmp	r7, #2
 8003106:	d122      	bne.n	800314e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003108:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800310c:	463a      	mov	r2, r7
 800310e:	4649      	mov	r1, r9
 8003110:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003112:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003114:	f7ff fdd3 	bl	8002cbe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003118:	1c6b      	adds	r3, r5, #1
 800311a:	d113      	bne.n	8003144 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800311e:	b90b      	cbnz	r3, 8003124 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8003120:	2001      	movs	r0, #1
 8003122:	e00b      	b.n	800313c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003124:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003128:	f000 fddc 	bl	8003ce4 <xTaskRemoveFromEventList>
 800312c:	2800      	cmp	r0, #0
 800312e:	d0f7      	beq.n	8003120 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8003130:	f1b8 0f00 	cmp.w	r8, #0
 8003134:	d0f4      	beq.n	8003120 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003136:	2001      	movs	r0, #1
 8003138:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800313c:	f386 8811 	msr	BASEPRI, r6
}
 8003140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003144:	3501      	adds	r5, #1
 8003146:	b26d      	sxtb	r5, r5
 8003148:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800314c:	e7e8      	b.n	8003120 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800314e:	2000      	movs	r0, #0
 8003150:	e7f4      	b.n	800313c <xQueueGenericSendFromISR+0xbc>

08003152 <xQueueGiveFromISR>:
{
 8003152:	b570      	push	{r4, r5, r6, lr}
 8003154:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003156:	4604      	mov	r4, r0
 8003158:	b950      	cbnz	r0, 8003170 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	b672      	cpsid	i
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	b662      	cpsie	i
 800316e:	e7fe      	b.n	800316e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003170:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003172:	b153      	cbz	r3, 800318a <xQueueGiveFromISR+0x38>
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	b672      	cpsid	i
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	b662      	cpsie	i
 8003188:	e7fe      	b.n	8003188 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	b963      	cbnz	r3, 80031a8 <xQueueGiveFromISR+0x56>
 800318e:	6883      	ldr	r3, [r0, #8]
 8003190:	b153      	cbz	r3, 80031a8 <xQueueGiveFromISR+0x56>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	b672      	cpsid	i
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	b662      	cpsie	i
 80031a6:	e7fe      	b.n	80031a6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a8:	f001 fbd0 	bl	800494c <vPortValidateInterruptPriority>
	__asm volatile
 80031ac:	f3ef 8611 	mrs	r6, BASEPRI
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	b672      	cpsid	i
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d91c      	bls.n	8003206 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80031cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031d0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80031d2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80031d4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031d6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80031d8:	d110      	bne.n	80031fc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031dc:	b90b      	cbnz	r3, 80031e2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80031de:	2001      	movs	r0, #1
 80031e0:	e009      	b.n	80031f6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031e6:	f000 fd7d 	bl	8003ce4 <xTaskRemoveFromEventList>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0f7      	beq.n	80031de <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80031ee:	2d00      	cmp	r5, #0
 80031f0:	d0f5      	beq.n	80031de <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031f2:	2001      	movs	r0, #1
 80031f4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80031f6:	f386 8811 	msr	BASEPRI, r6
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031fc:	3301      	adds	r3, #1
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003204:	e7eb      	b.n	80031de <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8003206:	2000      	movs	r0, #0
 8003208:	e7f5      	b.n	80031f6 <xQueueGiveFromISR+0xa4>

0800320a <xQueueReceive>:
{
 800320a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800320e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8003210:	4604      	mov	r4, r0
{
 8003212:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003214:	b950      	cbnz	r0, 800322c <xQueueReceive+0x22>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	b672      	cpsid	i
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	b662      	cpsie	i
 800322a:	e7fe      	b.n	800322a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800322c:	b961      	cbnz	r1, 8003248 <xQueueReceive+0x3e>
 800322e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003230:	b153      	cbz	r3, 8003248 <xQueueReceive+0x3e>
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	b672      	cpsid	i
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	b662      	cpsie	i
 8003246:	e7fe      	b.n	8003246 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003248:	f000 fe7c 	bl	8003f44 <xTaskGetSchedulerState>
 800324c:	4606      	mov	r6, r0
 800324e:	b960      	cbnz	r0, 800326a <xQueueReceive+0x60>
 8003250:	9b01      	ldr	r3, [sp, #4]
 8003252:	b15b      	cbz	r3, 800326c <xQueueReceive+0x62>
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	b672      	cpsid	i
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	b662      	cpsie	i
 8003268:	e7fe      	b.n	8003268 <xQueueReceive+0x5e>
 800326a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800326c:	f04f 0800 	mov.w	r8, #0
 8003270:	e03d      	b.n	80032ee <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003272:	9d01      	ldr	r5, [sp, #4]
 8003274:	b91d      	cbnz	r5, 800327e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8003276:	f001 fa91 	bl	800479c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800327a:	2000      	movs	r0, #0
 800327c:	e056      	b.n	800332c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800327e:	b916      	cbnz	r6, 8003286 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003280:	a802      	add	r0, sp, #8
 8003282:	f000 fd6d 	bl	8003d60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003286:	f001 fa89 	bl	800479c <vPortExitCritical>
		vTaskSuspendAll();
 800328a:	f000 fbb9 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800328e:	f001 fa61 	bl	8004754 <vPortEnterCritical>
 8003292:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003296:	2bff      	cmp	r3, #255	; 0xff
 8003298:	d101      	bne.n	800329e <xQueueReceive+0x94>
 800329a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800329e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80032a2:	2bff      	cmp	r3, #255	; 0xff
 80032a4:	d101      	bne.n	80032aa <xQueueReceive+0xa0>
 80032a6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80032aa:	f001 fa77 	bl	800479c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ae:	a901      	add	r1, sp, #4
 80032b0:	a802      	add	r0, sp, #8
 80032b2:	f000 fd5f 	bl	8003d74 <xTaskCheckForTimeOut>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d141      	bne.n	800333e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff fcf4 	bl	8002ca8 <prvIsQueueEmpty>
 80032c0:	b3b8      	cbz	r0, 8003332 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032c2:	9901      	ldr	r1, [sp, #4]
 80032c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032c8:	f000 fcf2 	bl	8003cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fd40 	bl	8002d52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032d2:	f000 fc21 	bl	8003b18 <xTaskResumeAll>
 80032d6:	b948      	cbnz	r0, 80032ec <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80032d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80032dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80032ee:	f001 fa31 	bl	8004754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	d0bc      	beq.n	8003272 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032fa:	4639      	mov	r1, r7
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fd13 	bl	8002d28 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003302:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	b173      	cbz	r3, 8003326 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003308:	f104 0010 	add.w	r0, r4, #16
 800330c:	f000 fcea 	bl	8003ce4 <xTaskRemoveFromEventList>
 8003310:	b148      	cbz	r0, 8003326 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8003312:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003326:	f001 fa39 	bl	800479c <vPortExitCritical>
				return pdPASS;
 800332a:	2001      	movs	r0, #1
}
 800332c:	b004      	add	sp, #16
 800332e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8003332:	4620      	mov	r0, r4
 8003334:	f7ff fd0d 	bl	8002d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003338:	f000 fbee 	bl	8003b18 <xTaskResumeAll>
 800333c:	e7d6      	b.n	80032ec <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800333e:	4620      	mov	r0, r4
 8003340:	f7ff fd07 	bl	8002d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003344:	f000 fbe8 	bl	8003b18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003348:	4620      	mov	r0, r4
 800334a:	f7ff fcad 	bl	8002ca8 <prvIsQueueEmpty>
 800334e:	2800      	cmp	r0, #0
 8003350:	d0cc      	beq.n	80032ec <xQueueReceive+0xe2>
 8003352:	e792      	b.n	800327a <xQueueReceive+0x70>

08003354 <xQueueSemaphoreTake>:
{
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8003358:	4604      	mov	r4, r0
{
 800335a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800335c:	b950      	cbnz	r0, 8003374 <xQueueSemaphoreTake+0x20>
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	b672      	cpsid	i
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	b662      	cpsie	i
 8003372:	e7fe      	b.n	8003372 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003374:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003376:	b155      	cbz	r5, 800338e <xQueueSemaphoreTake+0x3a>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	b672      	cpsid	i
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	b662      	cpsie	i
 800338c:	e7fe      	b.n	800338c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800338e:	f000 fdd9 	bl	8003f44 <xTaskGetSchedulerState>
 8003392:	4606      	mov	r6, r0
 8003394:	b960      	cbnz	r0, 80033b0 <xQueueSemaphoreTake+0x5c>
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	b16b      	cbz	r3, 80033b6 <xQueueSemaphoreTake+0x62>
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	b672      	cpsid	i
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	b662      	cpsie	i
 80033ae:	e7fe      	b.n	80033ae <xQueueSemaphoreTake+0x5a>
 80033b0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80033b2:	2700      	movs	r7, #0
 80033b4:	e055      	b.n	8003462 <xQueueSemaphoreTake+0x10e>
 80033b6:	4605      	mov	r5, r0
 80033b8:	e7fb      	b.n	80033b2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	b973      	cbnz	r3, 80033dc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033be:	b155      	cbz	r5, 80033d6 <xQueueSemaphoreTake+0x82>
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	b672      	cpsid	i
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	b662      	cpsie	i
 80033d4:	e7fe      	b.n	80033d4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80033d6:	f001 f9e1 	bl	800479c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80033da:	e062      	b.n	80034a2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80033dc:	b916      	cbnz	r6, 80033e4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033de:	a802      	add	r0, sp, #8
 80033e0:	f000 fcbe 	bl	8003d60 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80033e4:	f001 f9da 	bl	800479c <vPortExitCritical>
		vTaskSuspendAll();
 80033e8:	f000 fb0a 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ec:	f001 f9b2 	bl	8004754 <vPortEnterCritical>
 80033f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80033f4:	2bff      	cmp	r3, #255	; 0xff
 80033f6:	d101      	bne.n	80033fc <xQueueSemaphoreTake+0xa8>
 80033f8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80033fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003400:	2bff      	cmp	r3, #255	; 0xff
 8003402:	d101      	bne.n	8003408 <xQueueSemaphoreTake+0xb4>
 8003404:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003408:	f001 f9c8 	bl	800479c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800340c:	a901      	add	r1, sp, #4
 800340e:	a802      	add	r0, sp, #8
 8003410:	f000 fcb0 	bl	8003d74 <xTaskCheckForTimeOut>
 8003414:	2800      	cmp	r0, #0
 8003416:	d14d      	bne.n	80034b4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff fc45 	bl	8002ca8 <prvIsQueueEmpty>
 800341e:	2800      	cmp	r0, #0
 8003420:	d042      	beq.n	80034a8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	b93b      	cbnz	r3, 8003436 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8003426:	f001 f995 	bl	8004754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800342a:	68a0      	ldr	r0, [r4, #8]
 800342c:	f000 fd9a 	bl	8003f64 <xTaskPriorityInherit>
 8003430:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003432:	f001 f9b3 	bl	800479c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003436:	9901      	ldr	r1, [sp, #4]
 8003438:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800343c:	f000 fc38 	bl	8003cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fc86 	bl	8002d52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003446:	f000 fb67 	bl	8003b18 <xTaskResumeAll>
 800344a:	b948      	cbnz	r0, 8003460 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800344c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003454:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003462:	f001 f977 	bl	8004754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0a6      	beq.n	80033ba <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800346c:	3b01      	subs	r3, #1
 800346e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	b913      	cbnz	r3, 800347a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003474:	f000 fed6 	bl	8004224 <pvTaskIncrementMutexHeldCount>
 8003478:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347a:	6923      	ldr	r3, [r4, #16]
 800347c:	b173      	cbz	r3, 800349c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800347e:	f104 0010 	add.w	r0, r4, #16
 8003482:	f000 fc2f 	bl	8003ce4 <xTaskRemoveFromEventList>
 8003486:	b148      	cbz	r0, 800349c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8003488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800349c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800349e:	f001 f97d 	bl	800479c <vPortExitCritical>
}
 80034a2:	4628      	mov	r0, r5
 80034a4:	b005      	add	sp, #20
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff fc52 	bl	8002d52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ae:	f000 fb33 	bl	8003b18 <xTaskResumeAll>
 80034b2:	e7d5      	b.n	8003460 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7ff fc4c 	bl	8002d52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ba:	f000 fb2d 	bl	8003b18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff fbf2 	bl	8002ca8 <prvIsQueueEmpty>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d0cb      	beq.n	8003460 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d0ea      	beq.n	80034a2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 80034cc:	f001 f942 	bl	8004754 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80034d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034d2:	b119      	cbz	r1, 80034dc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80034d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034dc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80034de:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034e0:	f000 fde2 	bl	80040a8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80034e4:	f001 f95a 	bl	800479c <vPortExitCritical>
 80034e8:	e7db      	b.n	80034a2 <xQueueSemaphoreTake+0x14e>

080034ea <xQueueReceiveFromISR>:
{
 80034ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034ee:	4689      	mov	r9, r1
 80034f0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80034f2:	4605      	mov	r5, r0
 80034f4:	b950      	cbnz	r0, 800350c <xQueueReceiveFromISR+0x22>
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	b672      	cpsid	i
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	b662      	cpsie	i
 800350a:	e7fe      	b.n	800350a <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800350c:	b961      	cbnz	r1, 8003528 <xQueueReceiveFromISR+0x3e>
 800350e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003510:	b153      	cbz	r3, 8003528 <xQueueReceiveFromISR+0x3e>
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	b672      	cpsid	i
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	b662      	cpsie	i
 8003526:	e7fe      	b.n	8003526 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003528:	f001 fa10 	bl	800494c <vPortValidateInterruptPriority>
	__asm volatile
 800352c:	f3ef 8711 	mrs	r7, BASEPRI
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	b672      	cpsid	i
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003544:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003546:	b31c      	cbz	r4, 8003590 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003548:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800354c:	4649      	mov	r1, r9
 800354e:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003550:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003552:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003554:	f7ff fbe8 	bl	8002d28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003558:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800355a:	1c73      	adds	r3, r6, #1
 800355c:	d113      	bne.n	8003586 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800355e:	692b      	ldr	r3, [r5, #16]
 8003560:	b90b      	cbnz	r3, 8003566 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8003562:	2001      	movs	r0, #1
 8003564:	e00b      	b.n	800357e <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003566:	f105 0010 	add.w	r0, r5, #16
 800356a:	f000 fbbb 	bl	8003ce4 <xTaskRemoveFromEventList>
 800356e:	2800      	cmp	r0, #0
 8003570:	d0f7      	beq.n	8003562 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8003572:	f1b8 0f00 	cmp.w	r8, #0
 8003576:	d0f4      	beq.n	8003562 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003578:	2001      	movs	r0, #1
 800357a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800357e:	f387 8811 	msr	BASEPRI, r7
}
 8003582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003586:	3601      	adds	r6, #1
 8003588:	b276      	sxtb	r6, r6
 800358a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800358e:	e7e8      	b.n	8003562 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8003590:	4620      	mov	r0, r4
 8003592:	e7f4      	b.n	800357e <xQueueReceiveFromISR+0x94>

08003594 <uxQueueMessagesWaiting>:
{
 8003594:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8003596:	4604      	mov	r4, r0
 8003598:	b950      	cbnz	r0, 80035b0 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	b672      	cpsid	i
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	b662      	cpsie	i
 80035ae:	e7fe      	b.n	80035ae <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 80035b0:	f001 f8d0 	bl	8004754 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80035b6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80035b8:	f001 f8f0 	bl	800479c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035bc:	9801      	ldr	r0, [sp, #4]
 80035be:	b002      	add	sp, #8
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80035c2:	b950      	cbnz	r0, 80035da <uxQueueMessagesWaitingFromISR+0x18>
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	b672      	cpsid	i
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	b662      	cpsie	i
 80035d8:	e7fe      	b.n	80035d8 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 80035da:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035dc:	4770      	bx	lr
	...

080035e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <vQueueUnregisterQueue+0x24>)
	{
 80035e4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035e6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80035ea:	684c      	ldr	r4, [r1, #4]
 80035ec:	4284      	cmp	r4, r0
 80035ee:	d104      	bne.n	80035fa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80035f0:	2000      	movs	r0, #0
 80035f2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80035f6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80035f8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035fa:	3301      	adds	r3, #1
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d1f2      	bne.n	80035e6 <vQueueUnregisterQueue+0x6>
 8003600:	e7fa      	b.n	80035f8 <vQueueUnregisterQueue+0x18>
 8003602:	bf00      	nop
 8003604:	20003fdc 	.word	0x20003fdc

08003608 <vQueueDelete>:
{
 8003608:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800360a:	4604      	mov	r4, r0
 800360c:	b950      	cbnz	r0, 8003624 <vQueueDelete+0x1c>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	b672      	cpsid	i
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	b662      	cpsie	i
 8003622:	e7fe      	b.n	8003622 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8003624:	f7ff ffdc 	bl	80035e0 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8003628:	4620      	mov	r0, r4
}
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 800362e:	f000 bfef 	b.w	8004610 <vPortFree>
	...

08003634 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <prvResetNextTaskUnblockTime+0x1c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	b91a      	cbnz	r2, 8003644 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003640:	605a      	str	r2, [r3, #4]
	}
}
 8003642:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	6852      	ldr	r2, [r2, #4]
 800364c:	e7f8      	b.n	8003640 <prvResetNextTaskUnblockTime+0xc>
 800364e:	bf00      	nop
 8003650:	2000401c 	.word	0x2000401c

08003654 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003654:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003656:	4c12      	ldr	r4, [pc, #72]	; (80036a0 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003658:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 800365a:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800365c:	68e0      	ldr	r0, [r4, #12]
 800365e:	3004      	adds	r0, #4
 8003660:	f7ff fb12 	bl	8002c88 <uxListRemove>
 8003664:	b938      	cbnz	r0, 8003676 <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003666:	68e2      	ldr	r2, [r4, #12]
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800366c:	2201      	movs	r2, #1
 800366e:	408a      	lsls	r2, r1
 8003670:	ea23 0302 	bic.w	r3, r3, r2
 8003674:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8003676:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003678:	68e3      	ldr	r3, [r4, #12]
 800367a:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800367c:	d306      	bcc.n	800368c <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800367e:	6960      	ldr	r0, [r4, #20]
 8003680:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003686:	3104      	adds	r1, #4
 8003688:	f7ff bae7 	b.w	8002c5a <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800368c:	6820      	ldr	r0, [r4, #0]
 800368e:	68e1      	ldr	r1, [r4, #12]
 8003690:	3104      	adds	r1, #4
 8003692:	f7ff fae2 	bl	8002c5a <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003696:	6863      	ldr	r3, [r4, #4]
 8003698:	429d      	cmp	r5, r3
 800369a:	d200      	bcs.n	800369e <prvAddCurrentTaskToDelayedList.constprop.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 800369c:	6065      	str	r5, [r4, #4]
}
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	2000401c 	.word	0x2000401c

080036a4 <prvIdleTask>:
{
 80036a4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a6:	4c13      	ldr	r4, [pc, #76]	; (80036f4 <prvIdleTask+0x50>)
				taskYIELD();
 80036a8:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 80036ac:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036b2:	b94b      	cbnz	r3, 80036c8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d9fa      	bls.n	80036b0 <prvIdleTask+0xc>
				taskYIELD();
 80036ba:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	e7f3      	b.n	80036b0 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 80036c8:	f001 f844 	bl	8004754 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ce:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d0:	1d28      	adds	r0, r5, #4
 80036d2:	f7ff fad9 	bl	8002c88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036d8:	3b01      	subs	r3, #1
 80036da:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 80036dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036de:	3b01      	subs	r3, #1
 80036e0:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 80036e2:	f001 f85b 	bl	800479c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80036e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80036e8:	f000 ff92 	bl	8004610 <vPortFree>
			vPortFree( pxTCB );
 80036ec:	4628      	mov	r0, r5
 80036ee:	f000 ff8f 	bl	8004610 <vPortFree>
	}
 80036f2:	e7dd      	b.n	80036b0 <prvIdleTask+0xc>
 80036f4:	2000401c 	.word	0x2000401c

080036f8 <xTaskCreate>:
	{
 80036f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036fc:	0096      	lsls	r6, r2, #2
	{
 80036fe:	4607      	mov	r7, r0
 8003700:	460d      	mov	r5, r1
 8003702:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003704:	4630      	mov	r0, r6
 8003706:	f000 fefd 	bl	8004504 <pvPortMalloc>
			if( pxStack != NULL )
 800370a:	4681      	mov	r9, r0
 800370c:	b1a0      	cbz	r0, 8003738 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800370e:	205c      	movs	r0, #92	; 0x5c
 8003710:	f000 fef8 	bl	8004504 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003714:	4604      	mov	r4, r0
 8003716:	b160      	cbz	r0, 8003732 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8003718:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800371c:	4632      	mov	r2, r6
 800371e:	21a5      	movs	r1, #165	; 0xa5
 8003720:	4648      	mov	r0, r9
 8003722:	f009 ff39 	bl	800d598 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003726:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 800372a:	b945      	cbnz	r5, 800373e <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800372c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8003730:	e013      	b.n	800375a <xTaskCreate+0x62>
					vPortFree( pxStack );
 8003732:	4648      	mov	r0, r9
 8003734:	f000 ff6c 	bl	8004610 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003738:	f04f 36ff 	mov.w	r6, #4294967295
 800373c:	e088      	b.n	8003850 <xTaskCreate+0x158>
 800373e:	1e6b      	subs	r3, r5, #1
 8003740:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003744:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003746:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800374a:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800374e:	b108      	cbz	r0, 8003754 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003750:	429d      	cmp	r5, r3
 8003752:	d1f8      	bne.n	8003746 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003754:	2300      	movs	r3, #0
 8003756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800375a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 800375c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003760:	f104 0904 	add.w	r9, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003764:	3e04      	subs	r6, #4
 8003766:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003768:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800376c:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800376e:	445e      	add	r6, fp
 8003770:	bf28      	it	cs
 8003772:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003774:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003776:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800377c:	f7ff fa5e 	bl	8002c3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003780:	f104 0018 	add.w	r0, r4, #24
 8003784:	f7ff fa5a 	bl	8002c3c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003788:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378c:	4642      	mov	r2, r8
 800378e:	4639      	mov	r1, r7
 8003790:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003794:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003796:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003798:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800379a:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800379e:	f000 ffb1 	bl	8004704 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80037a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80037a6:	b103      	cbz	r3, 80037aa <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a8:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 80037aa:	4d30      	ldr	r5, [pc, #192]	; (800386c <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 80037ac:	f000 ffd2 	bl	8004754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80037b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037b2:	f105 0734 	add.w	r7, r5, #52	; 0x34
 80037b6:	3301      	adds	r3, #1
 80037b8:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 80037ba:	68ee      	ldr	r6, [r5, #12]
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d14a      	bne.n	8003856 <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 80037c0:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11c      	bne.n	8003802 <xTaskCreate+0x10a>
 80037c8:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037cc:	4640      	mov	r0, r8
 80037ce:	f7ff fa2a 	bl	8002c26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037d2:	f108 0814 	add.w	r8, r8, #20
 80037d6:	2e07      	cmp	r6, #7
 80037d8:	d1f7      	bne.n	80037ca <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 80037da:	4e25      	ldr	r6, [pc, #148]	; (8003870 <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList2 );
 80037dc:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 80037e0:	4630      	mov	r0, r6
 80037e2:	f7ff fa20 	bl	8002c26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037e6:	4640      	mov	r0, r8
 80037e8:	f7ff fa1d 	bl	8002c26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037ec:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80037f0:	f7ff fa19 	bl	8002c26 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80037f4:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 80037f8:	f7ff fa15 	bl	8002c26 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80037fc:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037fe:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8003802:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8003806:	2601      	movs	r6, #1
 8003808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800380a:	2014      	movs	r0, #20
		uxTaskNumber++;
 800380c:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800380e:	6929      	ldr	r1, [r5, #16]
 8003810:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8003814:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003818:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800381a:	fa06 f302 	lsl.w	r3, r6, r2
 800381e:	430b      	orrs	r3, r1
 8003820:	4649      	mov	r1, r9
 8003822:	612b      	str	r3, [r5, #16]
 8003824:	f7ff fa0d 	bl	8002c42 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003828:	f000 ffb8 	bl	800479c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800382c:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8003830:	b173      	cbz	r3, 8003850 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003832:	68eb      	ldr	r3, [r5, #12]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d209      	bcs.n	8003850 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 800383c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003844:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	f3bf 8f6f 	isb	sy
	}
 8003850:	4630      	mov	r0, r6
 8003852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003856:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1d1      	bne.n	8003802 <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800385e:	68eb      	ldr	r3, [r5, #12]
 8003860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d3cc      	bcc.n	8003802 <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 8003868:	60ec      	str	r4, [r5, #12]
 800386a:	e7ca      	b.n	8003802 <xTaskCreate+0x10a>
 800386c:	2000401c 	.word	0x2000401c
 8003870:	200040dc 	.word	0x200040dc

08003874 <vTaskDelete>:
	{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	4c2b      	ldr	r4, [pc, #172]	; (8003928 <vTaskDelete+0xb4>)
		taskENTER_CRITICAL();
 800387a:	f000 ff6b 	bl	8004754 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800387e:	b905      	cbnz	r5, 8003882 <vTaskDelete+0xe>
 8003880:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003882:	1d2e      	adds	r6, r5, #4
 8003884:	4630      	mov	r0, r6
 8003886:	f7ff f9ff 	bl	8002c88 <uxListRemove>
 800388a:	b958      	cbnz	r0, 80038a4 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800388c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800388e:	2014      	movs	r0, #20
 8003890:	fb00 4001 	mla	r0, r0, r1, r4
 8003894:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003896:	b92b      	cbnz	r3, 80038a4 <vTaskDelete+0x30>
 8003898:	2201      	movs	r2, #1
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	408a      	lsls	r2, r1
 800389e:	ea23 0302 	bic.w	r3, r3, r2
 80038a2:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038a6:	b11b      	cbz	r3, 80038b0 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a8:	f105 0018 	add.w	r0, r5, #24
 80038ac:	f7ff f9ec 	bl	8002c88 <uxListRemove>
			uxTaskNumber++;
 80038b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038b4:	3301      	adds	r3, #1
 80038b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 80038ba:	68e3      	ldr	r3, [r4, #12]
 80038bc:	42ab      	cmp	r3, r5
 80038be:	d11c      	bne.n	80038fa <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80038c0:	4631      	mov	r1, r6
 80038c2:	481a      	ldr	r0, [pc, #104]	; (800392c <vTaskDelete+0xb8>)
 80038c4:	f7ff f9bd 	bl	8002c42 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80038c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038ca:	3301      	adds	r3, #1
 80038cc:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 80038ce:	f000 ff65 	bl	800479c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80038d2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80038d6:	b333      	cbz	r3, 8003926 <vTaskDelete+0xb2>
			if( pxTCB == pxCurrentTCB )
 80038d8:	68e3      	ldr	r3, [r4, #12]
 80038da:	42ab      	cmp	r3, r5
 80038dc:	d123      	bne.n	8003926 <vTaskDelete+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 80038de:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80038e2:	b1b3      	cbz	r3, 8003912 <vTaskDelete+0x9e>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	b672      	cpsid	i
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	b662      	cpsie	i
 80038f8:	e7fe      	b.n	80038f8 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 80038fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80038fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 80038fe:	3b01      	subs	r3, #1
 8003900:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003902:	f000 fe85 	bl	8004610 <vPortFree>
			vPortFree( pxTCB );
 8003906:	4628      	mov	r0, r5
 8003908:	f000 fe82 	bl	8004610 <vPortFree>
				prvResetNextTaskUnblockTime();
 800390c:	f7ff fe92 	bl	8003634 <prvResetNextTaskUnblockTime>
 8003910:	e7dd      	b.n	80038ce <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8003912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
	}
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	2000401c 	.word	0x2000401c
 800392c:	20004034 	.word	0x20004034

08003930 <eTaskGetState>:
	{
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8003932:	4605      	mov	r5, r0
 8003934:	b950      	cbnz	r0, 800394c <eTaskGetState+0x1c>
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	b672      	cpsid	i
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	b662      	cpsie	i
 800394a:	e7fe      	b.n	800394a <eTaskGetState+0x1a>
		if( pxTCB == pxCurrentTCB )
 800394c:	4c0e      	ldr	r4, [pc, #56]	; (8003988 <eTaskGetState+0x58>)
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	4283      	cmp	r3, r0
 8003952:	d012      	beq.n	800397a <eTaskGetState+0x4a>
			taskENTER_CRITICAL();
 8003954:	f000 fefe 	bl	8004754 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003958:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800395a:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800395c:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 800395e:	f000 ff1d 	bl	800479c <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003962:	42bd      	cmp	r5, r7
 8003964:	d00b      	beq.n	800397e <eTaskGetState+0x4e>
 8003966:	42b5      	cmp	r5, r6
 8003968:	d009      	beq.n	800397e <eTaskGetState+0x4e>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800396a:	3418      	adds	r4, #24
 800396c:	42a5      	cmp	r5, r4
 800396e:	d008      	beq.n	8003982 <eTaskGetState+0x52>
				eReturn = eReady;
 8003970:	2d00      	cmp	r5, #0
 8003972:	bf0c      	ite	eq
 8003974:	2004      	moveq	r0, #4
 8003976:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 800397a:	2000      	movs	r0, #0
 800397c:	e7fc      	b.n	8003978 <eTaskGetState+0x48>
				eReturn = eBlocked;
 800397e:	2002      	movs	r0, #2
 8003980:	e7fa      	b.n	8003978 <eTaskGetState+0x48>
					eReturn = eDeleted;
 8003982:	2004      	movs	r0, #4
 8003984:	e7f8      	b.n	8003978 <eTaskGetState+0x48>
 8003986:	bf00      	nop
 8003988:	2000401c 	.word	0x2000401c

0800398c <vTaskStartScheduler>:
{
 800398c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800398e:	4c19      	ldr	r4, [pc, #100]	; (80039f4 <vTaskStartScheduler+0x68>)
 8003990:	2500      	movs	r5, #0
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	4918      	ldr	r1, [pc, #96]	; (80039f8 <vTaskStartScheduler+0x6c>)
 8003996:	f504 7384 	add.w	r3, r4, #264	; 0x108
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <vTaskStartScheduler+0x70>)
 800399c:	9500      	str	r5, [sp, #0]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	462b      	mov	r3, r5
 80039a2:	f7ff fea9 	bl	80036f8 <xTaskCreate>
	if( xReturn == pdPASS )
 80039a6:	2801      	cmp	r0, #1
 80039a8:	d114      	bne.n	80039d4 <vTaskStartScheduler+0x48>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	b672      	cpsid	i
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 80039c4:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039c8:	60a5      	str	r5, [r4, #8]
}
 80039ca:	b003      	add	sp, #12
 80039cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80039d0:	f000 bf5a 	b.w	8004888 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039d4:	3001      	adds	r0, #1
 80039d6:	d10a      	bne.n	80039ee <vTaskStartScheduler+0x62>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	b672      	cpsid	i
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	b662      	cpsie	i
 80039ec:	e7fe      	b.n	80039ec <vTaskStartScheduler+0x60>
}
 80039ee:	b003      	add	sp, #12
 80039f0:	bd30      	pop	{r4, r5, pc}
 80039f2:	bf00      	nop
 80039f4:	2000401c 	.word	0x2000401c
 80039f8:	08018180 	.word	0x08018180
 80039fc:	080036a5 	.word	0x080036a5

08003a00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <vTaskSuspendAll+0x10>)
 8003a02:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8003a06:	3301      	adds	r3, #1
 8003a08:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000401c 	.word	0x2000401c

08003a14 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003a14:	4b01      	ldr	r3, [pc, #4]	; (8003a1c <xTaskGetTickCount+0x8>)
 8003a16:	6898      	ldr	r0, [r3, #8]
}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000401c 	.word	0x2000401c

08003a20 <xTaskGetTickCountFromISR>:
{
 8003a20:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a22:	f000 ff93 	bl	800494c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003a26:	4b01      	ldr	r3, [pc, #4]	; (8003a2c <xTaskGetTickCountFromISR+0xc>)
 8003a28:	6898      	ldr	r0, [r3, #8]
}
 8003a2a:	bd08      	pop	{r3, pc}
 8003a2c:	2000401c 	.word	0x2000401c

08003a30 <xTaskIncrementTick>:
{
 8003a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a34:	4c36      	ldr	r4, [pc, #216]	; (8003b10 <xTaskIncrementTick+0xe0>)
 8003a36:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d161      	bne.n	8003b02 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a3e:	68a7      	ldr	r7, [r4, #8]
 8003a40:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003a42:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a44:	b9c7      	cbnz	r7, 8003a78 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b153      	cbz	r3, 8003a62 <xTaskIncrementTick+0x32>
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	b672      	cpsid	i
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	b662      	cpsie	i
 8003a60:	e7fe      	b.n	8003a60 <xTaskIncrementTick+0x30>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	6962      	ldr	r2, [r4, #20]
 8003a66:	6022      	str	r2, [r4, #0]
 8003a68:	6163      	str	r3, [r4, #20]
 8003a6a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003a74:	f7ff fdde 	bl	8003634 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a78:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8003a7a:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a7c:	42bb      	cmp	r3, r7
 8003a7e:	d910      	bls.n	8003aa2 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a80:	68e3      	ldr	r3, [r4, #12]
 8003a82:	2214      	movs	r2, #20
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	fb02 4303 	mla	r3, r2, r3, r4
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	bf28      	it	cs
 8003a90:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8003a92:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8003a96:	2b00      	cmp	r3, #0
}
 8003a98:	bf0c      	ite	eq
 8003a9a:	4628      	moveq	r0, r5
 8003a9c:	2001      	movne	r0, #1
 8003a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003aa2:	f04f 0a01 	mov.w	sl, #1
 8003aa6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003b14 <xTaskIncrementTick+0xe4>
 8003aaa:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b91b      	cbnz	r3, 8003abc <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8003ab8:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aba:	e7e1      	b.n	8003a80 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ac2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003ac4:	429f      	cmp	r7, r3
 8003ac6:	d3f7      	bcc.n	8003ab8 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac8:	f106 0b04 	add.w	fp, r6, #4
 8003acc:	4658      	mov	r0, fp
 8003ace:	f7ff f8db 	bl	8002c88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003ad4:	b11b      	cbz	r3, 8003ade <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad6:	f106 0018 	add.w	r0, r6, #24
 8003ada:	f7ff f8d5 	bl	8002c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ade:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	6922      	ldr	r2, [r4, #16]
 8003ae4:	fa0a f300 	lsl.w	r3, sl, r0
 8003ae8:	fb09 8000 	mla	r0, r9, r0, r8
 8003aec:	4313      	orrs	r3, r2
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	f7ff f8a7 	bl	8002c42 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af4:	68e3      	ldr	r3, [r4, #12]
 8003af6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bf28      	it	cs
 8003afe:	2501      	movcs	r5, #1
 8003b00:	e7d5      	b.n	8003aae <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8003b02:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8003b06:	2500      	movs	r5, #0
		++uxPendedTicks;
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b0e:	e7c0      	b.n	8003a92 <xTaskIncrementTick+0x62>
 8003b10:	2000401c 	.word	0x2000401c
 8003b14:	20004050 	.word	0x20004050

08003b18 <xTaskResumeAll>:
{
 8003b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003b1c:	4c35      	ldr	r4, [pc, #212]	; (8003bf4 <xTaskResumeAll+0xdc>)
 8003b1e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003b22:	b953      	cbnz	r3, 8003b3a <xTaskResumeAll+0x22>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	b672      	cpsid	i
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	b662      	cpsie	i
 8003b38:	e7fe      	b.n	8003b38 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8003b3a:	f000 fe0b 	bl	8004754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003b3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003b42:	3b01      	subs	r3, #1
 8003b44:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b48:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8003b4c:	b135      	cbz	r5, 8003b5c <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8003b4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003b50:	f000 fe24 	bl	800479c <vPortExitCritical>
}
 8003b54:	4620      	mov	r0, r4
 8003b56:	b002      	add	sp, #8
 8003b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f5      	beq.n	8003b4e <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8003b62:	2601      	movs	r6, #1
 8003b64:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003b68:	f04f 0814 	mov.w	r8, #20
 8003b6c:	e01d      	b.n	8003baa <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003b72:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b74:	f105 0018 	add.w	r0, r5, #24
 8003b78:	f7ff f886 	bl	8002c88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b7c:	1d29      	adds	r1, r5, #4
 8003b7e:	4608      	mov	r0, r1
 8003b80:	9101      	str	r1, [sp, #4]
 8003b82:	f7ff f881 	bl	8002c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b86:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003b88:	6922      	ldr	r2, [r4, #16]
 8003b8a:	fa06 f300 	lsl.w	r3, r6, r0
 8003b8e:	9901      	ldr	r1, [sp, #4]
 8003b90:	fb08 7000 	mla	r0, r8, r0, r7
 8003b94:	4313      	orrs	r3, r2
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	f7ff f853 	bl	8002c42 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b9c:	68e3      	ldr	r3, [r4, #12]
 8003b9e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d301      	bcc.n	8003baa <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8003ba6:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003baa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1dd      	bne.n	8003b6e <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8003bb2:	b10d      	cbz	r5, 8003bb8 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8003bb4:	f7ff fd3e 	bl	8003634 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003bb8:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bbc:	b14d      	cbz	r5, 8003bd2 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8003bbe:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003bc0:	f7ff ff36 	bl	8003a30 <xTaskIncrementTick>
 8003bc4:	b108      	cbz	r0, 8003bca <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8003bc6:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bca:	3d01      	subs	r5, #1
 8003bcc:	d1f8      	bne.n	8003bc0 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8003bce:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8003bd2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0b9      	beq.n	8003b4e <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8003bda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003bee:	2401      	movs	r4, #1
 8003bf0:	e7ae      	b.n	8003b50 <xTaskResumeAll+0x38>
 8003bf2:	bf00      	nop
 8003bf4:	2000401c 	.word	0x2000401c

08003bf8 <vTaskDelay>:
	{
 8003bf8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bfa:	b950      	cbnz	r0, 8003c12 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
	}
 8003c10:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <vTaskDelay+0x4c>)
 8003c14:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c18:	b153      	cbz	r3, 8003c30 <vTaskDelay+0x38>
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	b672      	cpsid	i
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	b662      	cpsie	i
 8003c2e:	e7fe      	b.n	8003c2e <vTaskDelay+0x36>
			vTaskSuspendAll();
 8003c30:	f7ff fee6 	bl	8003a00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c34:	f7ff fd0e 	bl	8003654 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 8003c38:	f7ff ff6e 	bl	8003b18 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d0dd      	beq.n	8003bfc <vTaskDelay+0x4>
 8003c40:	e7e6      	b.n	8003c10 <vTaskDelay+0x18>
 8003c42:	bf00      	nop
 8003c44:	2000401c 	.word	0x2000401c

08003c48 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <vTaskSwitchContext+0x64>)
 8003c4a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 8003c4e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c50:	b11b      	cbz	r3, 8003c5a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8003c58:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003c5a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5e:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2114      	movs	r1, #20
 8003c68:	f1c3 031f 	rsb	r3, r3, #31
 8003c6c:	4359      	muls	r1, r3
 8003c6e:	1850      	adds	r0, r2, r1
 8003c70:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003c72:	b954      	cbnz	r4, 8003c8a <vTaskSwitchContext+0x42>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	b672      	cpsid	i
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	b662      	cpsie	i
 8003c88:	e7fe      	b.n	8003c88 <vTaskSwitchContext+0x40>
 8003c8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003c8c:	4411      	add	r1, r2
 8003c8e:	6864      	ldr	r4, [r4, #4]
 8003c90:	313c      	adds	r1, #60	; 0x3c
 8003c92:	428c      	cmp	r4, r1
 8003c94:	6384      	str	r4, [r0, #56]	; 0x38
 8003c96:	bf04      	itt	eq
 8003c98:	6861      	ldreq	r1, [r4, #4]
 8003c9a:	6381      	streq	r1, [r0, #56]	; 0x38
 8003c9c:	2114      	movs	r1, #20
 8003c9e:	fb01 2303 	mla	r3, r1, r3, r2
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	60d3      	str	r3, [r2, #12]
}
 8003ca8:	e7d6      	b.n	8003c58 <vTaskSwitchContext+0x10>
 8003caa:	bf00      	nop
 8003cac:	2000401c 	.word	0x2000401c

08003cb0 <vTaskPlaceOnEventList>:
{
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003cb4:	b950      	cbnz	r0, 8003ccc <vTaskPlaceOnEventList+0x1c>
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	b672      	cpsid	i
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	b662      	cpsie	i
 8003cca:	e7fe      	b.n	8003cca <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vTaskPlaceOnEventList+0x30>)
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	3118      	adds	r1, #24
 8003cd2:	f7fe ffc2 	bl	8002c5a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cd6:	4620      	mov	r0, r4
}
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cdc:	f7ff bcba 	b.w	8003654 <prvAddCurrentTaskToDelayedList.constprop.0>
 8003ce0:	2000401c 	.word	0x2000401c

08003ce4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	68c3      	ldr	r3, [r0, #12]
{
 8003ce6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003cea:	b955      	cbnz	r5, 8003d02 <xTaskRemoveFromEventList+0x1e>
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	b672      	cpsid	i
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	b662      	cpsie	i
 8003d00:	e7fe      	b.n	8003d00 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d02:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4c15      	ldr	r4, [pc, #84]	; (8003d5c <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d08:	4608      	mov	r0, r1
 8003d0a:	9101      	str	r1, [sp, #4]
 8003d0c:	f7fe ffbc 	bl	8002c88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	b9e3      	cbnz	r3, 8003d52 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d18:	1d29      	adds	r1, r5, #4
 8003d1a:	4608      	mov	r0, r1
 8003d1c:	9101      	str	r1, [sp, #4]
 8003d1e:	f7fe ffb3 	bl	8002c88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003d24:	2301      	movs	r3, #1
 8003d26:	6920      	ldr	r0, [r4, #16]
 8003d28:	9901      	ldr	r1, [sp, #4]
 8003d2a:	4093      	lsls	r3, r2
 8003d2c:	4303      	orrs	r3, r0
 8003d2e:	2014      	movs	r0, #20
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003d36:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d3a:	f7fe ff82 	bl	8002c42 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d3e:	68e3      	ldr	r3, [r4, #12]
 8003d40:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d907      	bls.n	8003d58 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 8003d4e:	b003      	add	sp, #12
 8003d50:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d52:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003d56:	e7f0      	b.n	8003d3a <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8003d58:	2000      	movs	r0, #0
	return xReturn;
 8003d5a:	e7f8      	b.n	8003d4e <xTaskRemoveFromEventList+0x6a>
 8003d5c:	2000401c 	.word	0x2000401c

08003d60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <vTaskInternalSetTimeOutState+0x10>)
 8003d62:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d66:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d68:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d6a:	6043      	str	r3, [r0, #4]
}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000401c 	.word	0x2000401c

08003d74 <xTaskCheckForTimeOut>:
{
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003d78:	4605      	mov	r5, r0
 8003d7a:	b950      	cbnz	r0, 8003d92 <xTaskCheckForTimeOut+0x1e>
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	b672      	cpsid	i
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	b662      	cpsie	i
 8003d90:	e7fe      	b.n	8003d90 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8003d92:	b951      	cbnz	r1, 8003daa <xTaskCheckForTimeOut+0x36>
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	b672      	cpsid	i
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	b662      	cpsie	i
 8003da8:	e7fe      	b.n	8003da8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8003daa:	f000 fcd3 	bl	8004754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003db0:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003db2:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003db4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003db8:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	d001      	beq.n	8003dc2 <xTaskCheckForTimeOut+0x4e>
 8003dbe:	428a      	cmp	r2, r1
 8003dc0:	d910      	bls.n	8003de4 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dc2:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dc4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dc6:	4283      	cmp	r3, r0
 8003dc8:	d90a      	bls.n	8003de0 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8003dca:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dcc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8003dce:	4413      	add	r3, r2
 8003dd0:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8003dd2:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dd4:	f7ff ffc4 	bl	8003d60 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8003dd8:	f000 fce0 	bl	800479c <vPortExitCritical>
}
 8003ddc:	4620      	mov	r0, r4
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003de4:	2401      	movs	r4, #1
 8003de6:	e7f7      	b.n	8003dd8 <xTaskCheckForTimeOut+0x64>
 8003de8:	2000401c 	.word	0x2000401c

08003dec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003dec:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <vTaskMissedYield+0xc>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	2000401c 	.word	0x2000401c

08003dfc <vTaskGetInfo>:
	{
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8003e02:	4605      	mov	r5, r0
 8003e04:	b908      	cbnz	r0, 8003e0a <vTaskGetInfo+0xe>
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <vTaskGetInfo+0x60>)
 8003e08:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003e0a:	f105 0234 	add.w	r2, r5, #52	; 0x34
		if( eState != eInvalid )
 8003e0e:	2b05      	cmp	r3, #5
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003e10:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003e12:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003e14:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003e16:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003e18:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003e1a:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003e1c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003e1e:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003e20:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003e22:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8003e2a:	d00e      	beq.n	8003e4a <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 8003e2c:	490b      	ldr	r1, [pc, #44]	; (8003e5c <vTaskGetInfo+0x60>)
 8003e2e:	68c9      	ldr	r1, [r1, #12]
 8003e30:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 8003e32:	bf0c      	ite	eq
 8003e34:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 8003e36:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8003e38:	b176      	cbz	r6, 8003e58 <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003e3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 8003e3c:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003e3e:	5cca      	ldrb	r2, [r1, r3]
 8003e40:	2aa5      	cmp	r2, #165	; 0xa5
 8003e42:	d007      	beq.n	8003e54 <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003e44:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003e46:	8423      	strh	r3, [r4, #32]
	}
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f7ff fd70 	bl	8003930 <eTaskGetState>
 8003e50:	7320      	strb	r0, [r4, #12]
 8003e52:	e7f1      	b.n	8003e38 <vTaskGetInfo+0x3c>
			ulCount++;
 8003e54:	3301      	adds	r3, #1
 8003e56:	e7f2      	b.n	8003e3e <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 8003e58:	8426      	strh	r6, [r4, #32]
	}
 8003e5a:	e7f5      	b.n	8003e48 <vTaskGetInfo+0x4c>
 8003e5c:	2000401c 	.word	0x2000401c

08003e60 <prvListTasksWithinSingleList>:
	{
 8003e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003e64:	680d      	ldr	r5, [r1, #0]
	{
 8003e66:	4606      	mov	r6, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003e6c:	b31d      	cbz	r5, 8003eb6 <prvListTasksWithinSingleList+0x56>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6e:	684b      	ldr	r3, [r1, #4]
 8003e70:	f101 0808 	add.w	r8, r1, #8
	UBaseType_t uxTask = 0;
 8003e74:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003e76:	f04f 0b24 	mov.w	fp, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4543      	cmp	r3, r8
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	bf04      	itt	eq
 8003e82:	68cb      	ldreq	r3, [r1, #12]
 8003e84:	604b      	streq	r3, [r1, #4]
 8003e86:	684b      	ldr	r3, [r1, #4]
 8003e88:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8c:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003e8e:	fb0b 6105 	mla	r1, fp, r5, r6
 8003e92:	2201      	movs	r2, #1
				uxTask++;
 8003e94:	3501      	adds	r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4598      	cmp	r8, r3
 8003e9a:	6063      	str	r3, [r4, #4]
 8003e9c:	bf04      	itt	eq
 8003e9e:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 8003ea2:	6063      	streq	r3, [r4, #4]
 8003ea4:	6863      	ldr	r3, [r4, #4]
 8003ea6:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003eaa:	463b      	mov	r3, r7
 8003eac:	4648      	mov	r0, r9
 8003eae:	f7ff ffa5 	bl	8003dfc <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8003eb2:	45ca      	cmp	sl, r9
 8003eb4:	d1ea      	bne.n	8003e8c <prvListTasksWithinSingleList+0x2c>
	}
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ebc <uxTaskGetSystemState>:
	{
 8003ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003ec0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8003f40 <uxTaskGetSystemState+0x84>
	{
 8003ec4:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8003ec6:	f7ff fd9b 	bl	8003a00 <vTaskSuspendAll>
	{
 8003eca:	4605      	mov	r5, r0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003ecc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d830      	bhi.n	8003f36 <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003ed4:	2607      	movs	r6, #7
 8003ed6:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003ed8:	f04f 0b14 	mov.w	fp, #20
 8003edc:	f109 0a34 	add.w	sl, r9, #52	; 0x34
 8003ee0:	f04f 0824 	mov.w	r8, #36	; 0x24
					uxQueue--;
 8003ee4:	3e01      	subs	r6, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003ee6:	fb08 5004 	mla	r0, r8, r4, r5
 8003eea:	2201      	movs	r2, #1
 8003eec:	fb0b a106 	mla	r1, fp, r6, sl
 8003ef0:	f7ff ffb6 	bl	8003e60 <prvListTasksWithinSingleList>
 8003ef4:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	2e00      	cmp	r6, #0
 8003ef8:	d1f4      	bne.n	8003ee4 <uxTaskGetSystemState+0x28>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003efa:	f8d9 1000 	ldr.w	r1, [r9]
 8003efe:	2202      	movs	r2, #2
 8003f00:	fb08 5004 	mla	r0, r8, r4, r5
 8003f04:	f7ff ffac 	bl	8003e60 <prvListTasksWithinSingleList>
 8003f08:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003f0a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	fb08 5004 	mla	r0, r8, r4, r5
 8003f14:	f7ff ffa4 	bl	8003e60 <prvListTasksWithinSingleList>
 8003f18:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <uxTaskGetSystemState+0x80>)
 8003f1e:	fb08 5004 	mla	r0, r8, r4, r5
 8003f22:	f7ff ff9d 	bl	8003e60 <prvListTasksWithinSingleList>
 8003f26:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8003f28:	b107      	cbz	r7, 8003f2c <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 8003f2a:	603e      	str	r6, [r7, #0]
		( void ) xTaskResumeAll();
 8003f2c:	f7ff fdf4 	bl	8003b18 <xTaskResumeAll>
	}
 8003f30:	4620      	mov	r0, r4
 8003f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003f36:	2400      	movs	r4, #0
 8003f38:	e7f8      	b.n	8003f2c <uxTaskGetSystemState+0x70>
 8003f3a:	bf00      	nop
 8003f3c:	20004034 	.word	0x20004034
 8003f40:	2000401c 	.word	0x2000401c

08003f44 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <xTaskGetSchedulerState+0x1c>)
 8003f46:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003f4a:	b132      	cbz	r2, 8003f5a <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2002      	moveq	r0, #2
 8003f56:	2000      	movne	r0, #0
 8003f58:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f5a:	2001      	movs	r0, #1
	}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	2000401c 	.word	0x2000401c

08003f64 <xTaskPriorityInherit>:
	{
 8003f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003f66:	4604      	mov	r4, r0
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d034      	beq.n	8003fd6 <xTaskPriorityInherit+0x72>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f6c:	4d22      	ldr	r5, [pc, #136]	; (8003ff8 <xTaskPriorityInherit+0x94>)
 8003f6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f70:	68ea      	ldr	r2, [r5, #12]
 8003f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d236      	bcs.n	8003fe6 <xTaskPriorityInherit+0x82>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f78:	6982      	ldr	r2, [r0, #24]
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	db04      	blt.n	8003f88 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7e:	68ea      	ldr	r2, [r5, #12]
 8003f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f82:	f1c2 0207 	rsb	r2, r2, #7
 8003f86:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f88:	4f1c      	ldr	r7, [pc, #112]	; (8003ffc <xTaskPriorityInherit+0x98>)
 8003f8a:	2614      	movs	r6, #20
 8003f8c:	6962      	ldr	r2, [r4, #20]
 8003f8e:	fb06 7303 	mla	r3, r6, r3, r7
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d121      	bne.n	8003fda <xTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f96:	1d21      	adds	r1, r4, #4
 8003f98:	4608      	mov	r0, r1
 8003f9a:	9101      	str	r1, [sp, #4]
 8003f9c:	f7fe fe74 	bl	8002c88 <uxListRemove>
 8003fa0:	9901      	ldr	r1, [sp, #4]
 8003fa2:	b950      	cbnz	r0, 8003fba <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003fa4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003fa6:	fb06 5600 	mla	r6, r6, r0, r5
 8003faa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003fac:	b92b      	cbnz	r3, 8003fba <xTaskPriorityInherit+0x56>
 8003fae:	2201      	movs	r2, #1
 8003fb0:	692b      	ldr	r3, [r5, #16]
 8003fb2:	4082      	lsls	r2, r0
 8003fb4:	ea23 0302 	bic.w	r3, r3, r2
 8003fb8:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fba:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fbc:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fc2:	2401      	movs	r4, #1
 8003fc4:	fa04 f203 	lsl.w	r2, r4, r3
 8003fc8:	4302      	orrs	r2, r0
 8003fca:	2014      	movs	r0, #20
 8003fcc:	fb00 7003 	mla	r0, r0, r3, r7
 8003fd0:	612a      	str	r2, [r5, #16]
 8003fd2:	f7fe fe36 	bl	8002c42 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8003fd6:	4620      	mov	r0, r4
		return xReturn;
 8003fd8:	e003      	b.n	8003fe2 <xTaskPriorityInherit+0x7e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fda:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8003fdc:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8003fe2:	b003      	add	sp, #12
 8003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fe6:	68eb      	ldr	r3, [r5, #12]
 8003fe8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003fea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	bf2c      	ite	cs
 8003ff0:	2000      	movcs	r0, #0
 8003ff2:	2001      	movcc	r0, #1
 8003ff4:	e7f5      	b.n	8003fe2 <xTaskPriorityInherit+0x7e>
 8003ff6:	bf00      	nop
 8003ff8:	2000401c 	.word	0x2000401c
 8003ffc:	20004050 	.word	0x20004050

08004000 <xTaskPriorityDisinherit>:
	{
 8004000:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004002:	4604      	mov	r4, r0
 8004004:	b910      	cbnz	r0, 800400c <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8004006:	2000      	movs	r0, #0
	}
 8004008:	b002      	add	sp, #8
 800400a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800400c:	4d24      	ldr	r5, [pc, #144]	; (80040a0 <xTaskPriorityDisinherit+0xa0>)
 800400e:	68eb      	ldr	r3, [r5, #12]
 8004010:	4283      	cmp	r3, r0
 8004012:	d00a      	beq.n	800402a <xTaskPriorityDisinherit+0x2a>
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	b672      	cpsid	i
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	b662      	cpsie	i
 8004028:	e7fe      	b.n	8004028 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	b953      	cbnz	r3, 8004044 <xTaskPriorityDisinherit+0x44>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	e7fe      	b.n	8004042 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004044:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004046:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004048:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800404a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800404c:	4291      	cmp	r1, r2
 800404e:	d0da      	beq.n	8004006 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1d8      	bne.n	8004006 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004054:	1d01      	adds	r1, r0, #4
 8004056:	4608      	mov	r0, r1
 8004058:	9101      	str	r1, [sp, #4]
 800405a:	f7fe fe15 	bl	8002c88 <uxListRemove>
 800405e:	9901      	ldr	r1, [sp, #4]
 8004060:	b958      	cbnz	r0, 800407a <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004064:	2014      	movs	r0, #20
 8004066:	fb00 5006 	mla	r0, r0, r6, r5
 800406a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800406c:	b92b      	cbnz	r3, 800407a <xTaskPriorityDisinherit+0x7a>
 800406e:	2201      	movs	r2, #1
 8004070:	692b      	ldr	r3, [r5, #16]
 8004072:	40b2      	lsls	r2, r6
 8004074:	ea23 0302 	bic.w	r3, r3, r2
 8004078:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800407a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800407c:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407e:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004082:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004086:	2401      	movs	r4, #1
 8004088:	fa04 f203 	lsl.w	r2, r4, r3
 800408c:	4302      	orrs	r2, r0
 800408e:	2014      	movs	r0, #20
 8004090:	612a      	str	r2, [r5, #16]
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <xTaskPriorityDisinherit+0xa4>)
 8004094:	fb00 2003 	mla	r0, r0, r3, r2
 8004098:	f7fe fdd3 	bl	8002c42 <vListInsertEnd>
					xReturn = pdTRUE;
 800409c:	4620      	mov	r0, r4
		return xReturn;
 800409e:	e7b3      	b.n	8004008 <xTaskPriorityDisinherit+0x8>
 80040a0:	2000401c 	.word	0x2000401c
 80040a4:	20004050 	.word	0x20004050

080040a8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80040a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80040aa:	4604      	mov	r4, r0
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d051      	beq.n	8004154 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 80040b0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80040b2:	b952      	cbnz	r2, 80040ca <vTaskPriorityDisinheritAfterTimeout+0x22>
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	b672      	cpsid	i
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	b662      	cpsie	i
 80040c8:	e7fe      	b.n	80040c8 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80040ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80040cc:	4299      	cmp	r1, r3
 80040ce:	bf38      	it	cc
 80040d0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80040d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040d4:	428b      	cmp	r3, r1
 80040d6:	d03d      	beq.n	8004154 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040d8:	2a01      	cmp	r2, #1
 80040da:	d13b      	bne.n	8004154 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 80040dc:	4d1e      	ldr	r5, [pc, #120]	; (8004158 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80040de:	68ea      	ldr	r2, [r5, #12]
 80040e0:	4282      	cmp	r2, r0
 80040e2:	d10a      	bne.n	80040fa <vTaskPriorityDisinheritAfterTimeout+0x52>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	b672      	cpsid	i
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	b662      	cpsie	i
 80040f8:	e7fe      	b.n	80040f8 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040fa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040fc:	2614      	movs	r6, #20
 80040fe:	4f17      	ldr	r7, [pc, #92]	; (800415c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004100:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8004102:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004104:	fb06 7303 	mla	r3, r6, r3, r7
 8004108:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410a:	bfa4      	itt	ge
 800410c:	f1c1 0107 	rsbge	r1, r1, #7
 8004110:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004112:	429a      	cmp	r2, r3
 8004114:	d11e      	bne.n	8004154 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004116:	1d01      	adds	r1, r0, #4
 8004118:	4608      	mov	r0, r1
 800411a:	9101      	str	r1, [sp, #4]
 800411c:	f7fe fdb4 	bl	8002c88 <uxListRemove>
 8004120:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004122:	9901      	ldr	r1, [sp, #4]
 8004124:	b948      	cbnz	r0, 800413a <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004126:	fb06 5602 	mla	r6, r6, r2, r5
 800412a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800412c:	b92b      	cbnz	r3, 800413a <vTaskPriorityDisinheritAfterTimeout+0x92>
 800412e:	2001      	movs	r0, #1
 8004130:	692b      	ldr	r3, [r5, #16]
 8004132:	4090      	lsls	r0, r2
 8004134:	ea23 0300 	bic.w	r3, r3, r0
 8004138:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 800413a:	2301      	movs	r3, #1
 800413c:	6928      	ldr	r0, [r5, #16]
 800413e:	4093      	lsls	r3, r2
 8004140:	4303      	orrs	r3, r0
 8004142:	2014      	movs	r0, #20
 8004144:	fb00 7002 	mla	r0, r0, r2, r7
 8004148:	612b      	str	r3, [r5, #16]
	}
 800414a:	b003      	add	sp, #12
 800414c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8004150:	f7fe bd77 	b.w	8002c42 <vListInsertEnd>
	}
 8004154:	b003      	add	sp, #12
 8004156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004158:	2000401c 	.word	0x2000401c
 800415c:	20004050 	.word	0x20004050

08004160 <vTaskList>:
	{
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <vTaskList+0xb8>)
		*pcWriteBuffer = ( char ) 0x00;
 8004166:	2700      	movs	r7, #0
	{
 8004168:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800416a:	f04f 0a24 	mov.w	sl, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
 800416e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	{
 8004170:	b085      	sub	sp, #20
		*pcWriteBuffer = ( char ) 0x00;
 8004172:	7007      	strb	r7, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004174:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
		uxArraySize = uxCurrentNumberOfTasks;
 8004176:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004178:	fb0a f000 	mul.w	r0, sl, r0
 800417c:	f000 f9c2 	bl	8004504 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8004180:	4606      	mov	r6, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d044      	beq.n	8004210 <vTaskList+0xb0>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004186:	463a      	mov	r2, r7
 8004188:	9903      	ldr	r1, [sp, #12]
 800418a:	f7ff fe97 	bl	8003ebc <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 800418e:	4635      	mov	r5, r6
 8004190:	fb0a 6a00 	mla	sl, sl, r0, r6
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004194:	f8df b088 	ldr.w	fp, [pc, #136]	; 8004220 <vTaskList+0xc0>
			for( x = 0; x < uxArraySize; x++ )
 8004198:	45aa      	cmp	sl, r5
 800419a:	d105      	bne.n	80041a8 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 800419c:	4630      	mov	r0, r6
	}
 800419e:	b005      	add	sp, #20
 80041a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 80041a4:	f000 ba34 	b.w	8004610 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80041a8:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 80041aa:	4620      	mov	r0, r4
 80041ac:	6869      	ldr	r1, [r5, #4]
 80041ae:	3524      	adds	r5, #36	; 0x24
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	bf96      	itet	ls
 80041b4:	4a19      	ldrls	r2, [pc, #100]	; (800421c <vTaskList+0xbc>)
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80041b6:	f04f 0900 	movhi.w	r9, #0
 80041ba:	f812 9003 	ldrbls.w	r9, [r2, r3]
		strcpy( pcBuffer, pcTaskName );
 80041be:	f009 fa78 	bl	800d6b2 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fc f82e 	bl	8000224 <strlen>
			pcBuffer[ x ] = ' ';
 80041c8:	280f      	cmp	r0, #15
 80041ca:	f1c0 020f 	rsb	r2, r0, #15
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80041ce:	4680      	mov	r8, r0
			pcBuffer[ x ] = ' ';
 80041d0:	bf88      	it	hi
 80041d2:	2200      	movhi	r2, #0
 80041d4:	2120      	movs	r1, #32
 80041d6:	1820      	adds	r0, r4, r0
 80041d8:	9203      	str	r2, [sp, #12]
 80041da:	f009 f9dd 	bl	800d598 <memset>
 80041de:	9a03      	ldr	r2, [sp, #12]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80041e0:	4659      	mov	r1, fp
			pcBuffer[ x ] = ' ';
 80041e2:	eb08 0002 	add.w	r0, r8, r2
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80041e6:	464a      	mov	r2, r9
		pcBuffer[ x ] = ( char ) 0x00;
 80041e8:	5427      	strb	r7, [r4, r0]
			pcBuffer[ x ] = ' ';
 80041ea:	eb04 0800 	add.w	r8, r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80041ee:	f855 3c1c 	ldr.w	r3, [r5, #-28]
 80041f2:	4640      	mov	r0, r8
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	f855 3c14 	ldr.w	r3, [r5, #-20]
 8004200:	f009 fa28 	bl	800d654 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004204:	4640      	mov	r0, r8
 8004206:	f7fc f80d 	bl	8000224 <strlen>
 800420a:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 800420e:	e7c3      	b.n	8004198 <vTaskList+0x38>
	}
 8004210:	b005      	add	sp, #20
 8004212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004216:	bf00      	nop
 8004218:	2000401c 	.word	0x2000401c
 800421c:	0800f112 	.word	0x0800f112
 8004220:	08018185 	.word	0x08018185

08004224 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <pvTaskIncrementMutexHeldCount+0x14>)
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	b11a      	cbz	r2, 8004232 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800422a:	68d9      	ldr	r1, [r3, #12]
 800422c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800422e:	3201      	adds	r2, #1
 8004230:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8004232:	68d8      	ldr	r0, [r3, #12]
	}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	2000401c 	.word	0x2000401c

0800423c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800423c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800423e:	f7ff fba5 	bl	800398c <vTaskStartScheduler>
  
  return osOK;
}
 8004242:	2000      	movs	r0, #0
 8004244:	bd08      	pop	{r3, pc}

08004246 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004246:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800424a:	b10b      	cbz	r3, 8004250 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800424c:	f7ff bbe8 	b.w	8003a20 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004250:	f7ff bbe0 	b.w	8003a14 <xTaskGetTickCount>

08004254 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004254:	b530      	push	{r4, r5, lr}
 8004256:	4604      	mov	r4, r0
 8004258:	b085      	sub	sp, #20
 800425a:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425c:	8a22      	ldrh	r2, [r4, #16]
 800425e:	ad03      	add	r5, sp, #12
 8004260:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8004264:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004266:	bf14      	ite	ne
 8004268:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800426a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800426c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8004270:	e9cd 4500 	strd	r4, r5, [sp]
 8004274:	f7ff fa40 	bl	80036f8 <xTaskCreate>
 8004278:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800427a:	bf0c      	ite	eq
 800427c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800427e:	2000      	movne	r0, #0
}
 8004280:	b005      	add	sp, #20
 8004282:	bd30      	pop	{r4, r5, pc}

08004284 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004284:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004286:	f7ff faf5 	bl	8003874 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800428a:	2000      	movs	r0, #0
 800428c:	bd08      	pop	{r3, pc}

0800428e <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800428e:	2801      	cmp	r0, #1
{
 8004290:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004292:	bf38      	it	cc
 8004294:	2001      	movcc	r0, #1
 8004296:	f7ff fcaf 	bl	8003bf8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800429a:	2000      	movs	r0, #0
 800429c:	bd08      	pop	{r3, pc}

0800429e <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800429e:	2001      	movs	r0, #1
 80042a0:	f7fe bed3 	b.w	800304a <xQueueCreateMutex>

080042a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80042a4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80042a6:	2400      	movs	r4, #0
 80042a8:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80042aa:	b1f0      	cbz	r0, 80042ea <osMutexWait+0x46>
 80042ac:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80042b0:	b1ab      	cbz	r3, 80042de <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80042b2:	aa01      	add	r2, sp, #4
 80042b4:	4621      	mov	r1, r4
 80042b6:	f7ff f918 	bl	80034ea <xQueueReceiveFromISR>
 80042ba:	2801      	cmp	r0, #1
 80042bc:	d113      	bne.n	80042e6 <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80042be:	9b01      	ldr	r3, [sp, #4]
 80042c0:	b913      	cbnz	r3, 80042c8 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80042c2:	2000      	movs	r0, #0
}
 80042c4:	b002      	add	sp, #8
 80042c6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80042c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	e7f1      	b.n	80042c2 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80042de:	f7ff f839 	bl	8003354 <xQueueSemaphoreTake>
 80042e2:	2801      	cmp	r0, #1
 80042e4:	d0ed      	beq.n	80042c2 <osMutexWait+0x1e>
    return osErrorOS;
 80042e6:	20ff      	movs	r0, #255	; 0xff
 80042e8:	e7ec      	b.n	80042c4 <osMutexWait+0x20>
    return osErrorParameter;
 80042ea:	2080      	movs	r0, #128	; 0x80
 80042ec:	e7ea      	b.n	80042c4 <osMutexWait+0x20>

080042ee <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80042ee:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80042f0:	2400      	movs	r4, #0
 80042f2:	9401      	str	r4, [sp, #4]
 80042f4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80042f8:	b1a3      	cbz	r3, 8004324 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80042fa:	a901      	add	r1, sp, #4
 80042fc:	f7fe ff29 	bl	8003152 <xQueueGiveFromISR>
 8004300:	2801      	cmp	r0, #1
 8004302:	d115      	bne.n	8004330 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	b913      	cbnz	r3, 800430e <osMutexRelease+0x20>
  osStatus result = osOK;
 8004308:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800430a:	b002      	add	sp, #8
 800430c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800430e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	e7f1      	b.n	8004308 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004324:	461a      	mov	r2, r3
 8004326:	4619      	mov	r1, r3
 8004328:	f7fe fdd4 	bl	8002ed4 <xQueueGenericSend>
 800432c:	2801      	cmp	r0, #1
 800432e:	d0eb      	beq.n	8004308 <osMutexRelease+0x1a>
    result = osErrorOS;
 8004330:	20ff      	movs	r0, #255	; 0xff
 8004332:	e7ea      	b.n	800430a <osMutexRelease+0x1c>

08004334 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8004334:	b510      	push	{r4, lr}
 8004336:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800433a:	b91c      	cbnz	r4, 8004344 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 800433c:	f7ff f964 	bl	8003608 <vQueueDelete>

  return osOK;
}
 8004340:	4620      	mov	r0, r4
 8004342:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8004344:	2482      	movs	r4, #130	; 0x82
 8004346:	e7fb      	b.n	8004340 <osMutexDelete+0xc>

08004348 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8004348:	2901      	cmp	r1, #1
{ 
 800434a:	4608      	mov	r0, r1
 800434c:	b510      	push	{r4, lr}
  if (count == 1) {
 800434e:	d10c      	bne.n	800436a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8004350:	2203      	movs	r2, #3
 8004352:	2100      	movs	r1, #0
 8004354:	f7fe fd76 	bl	8002e44 <xQueueGenericCreate>
 8004358:	4604      	mov	r4, r0
 800435a:	b120      	cbz	r0, 8004366 <osSemaphoreCreate+0x1e>
 800435c:	2300      	movs	r3, #0
 800435e:	461a      	mov	r2, r3
 8004360:	4619      	mov	r1, r3
 8004362:	f7fe fdb7 	bl	8002ed4 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8004366:	4620      	mov	r0, r4
 8004368:	bd10      	pop	{r4, pc}
 800436a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800436e:	f7fe bd8f 	b.w	8002e90 <xQueueCreateCountingSemaphore>

08004372 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004372:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004374:	2400      	movs	r4, #0
 8004376:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8004378:	b1f0      	cbz	r0, 80043b8 <osSemaphoreWait+0x46>
 800437a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800437e:	b1ab      	cbz	r3, 80043ac <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004380:	aa01      	add	r2, sp, #4
 8004382:	4621      	mov	r1, r4
 8004384:	f7ff f8b1 	bl	80034ea <xQueueReceiveFromISR>
 8004388:	2801      	cmp	r0, #1
 800438a:	d113      	bne.n	80043b4 <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800438c:	9b01      	ldr	r3, [sp, #4]
 800438e:	b913      	cbnz	r3, 8004396 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004390:	2000      	movs	r0, #0
}
 8004392:	b002      	add	sp, #8
 8004394:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004396:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	e7f1      	b.n	8004390 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80043ac:	f7fe ffd2 	bl	8003354 <xQueueSemaphoreTake>
 80043b0:	2801      	cmp	r0, #1
 80043b2:	d0ed      	beq.n	8004390 <osSemaphoreWait+0x1e>
    return osErrorOS;
 80043b4:	20ff      	movs	r0, #255	; 0xff
 80043b6:	e7ec      	b.n	8004392 <osSemaphoreWait+0x20>
    return osErrorParameter;
 80043b8:	2080      	movs	r0, #128	; 0x80
 80043ba:	e7ea      	b.n	8004392 <osSemaphoreWait+0x20>

080043bc <osSemaphoreRelease>:
 80043bc:	f7ff bf97 	b.w	80042ee <osMutexRelease>

080043c0 <osSemaphoreDelete>:
 80043c0:	f7ff bfb8 	b.w	8004334 <osMutexDelete>

080043c4 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80043c4:	2200      	movs	r2, #0
 80043c6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80043ca:	f7fe bd3b 	b.w	8002e44 <xQueueGenericCreate>

080043ce <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80043ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80043d0:	2400      	movs	r4, #0
{
 80043d2:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80043d4:	9403      	str	r4, [sp, #12]
 80043d6:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80043da:	b1b3      	cbz	r3, 800440a <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80043dc:	4623      	mov	r3, r4
 80043de:	aa03      	add	r2, sp, #12
 80043e0:	a901      	add	r1, sp, #4
 80043e2:	f7fe fe4d 	bl	8003080 <xQueueGenericSendFromISR>
 80043e6:	2801      	cmp	r0, #1
 80043e8:	d117      	bne.n	800441a <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	b913      	cbnz	r3, 80043f4 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80043ee:	2000      	movs	r0, #0
}
 80043f0:	b004      	add	sp, #16
 80043f2:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80043f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80043f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	e7f1      	b.n	80043ee <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800440a:	2a01      	cmp	r2, #1
 800440c:	a901      	add	r1, sp, #4
 800440e:	bf38      	it	cc
 8004410:	2201      	movcc	r2, #1
 8004412:	f7fe fd5f 	bl	8002ed4 <xQueueGenericSend>
 8004416:	2801      	cmp	r0, #1
 8004418:	d0e9      	beq.n	80043ee <osMessagePut+0x20>
      return osErrorOS;
 800441a:	20ff      	movs	r0, #255	; 0xff
 800441c:	e7e8      	b.n	80043f0 <osMessagePut+0x22>

0800441e <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800441e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8004420:	2300      	movs	r3, #0
{
 8004422:	4604      	mov	r4, r0
 8004424:	4616      	mov	r6, r2
 8004426:	4608      	mov	r0, r1
 8004428:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 800442a:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800442c:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 800442e:	b911      	cbnz	r1, 8004436 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8004430:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	e018      	b.n	8004468 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800443c:	b1db      	cbz	r3, 8004476 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800443e:	466a      	mov	r2, sp
 8004440:	a902      	add	r1, sp, #8
 8004442:	f7ff f852 	bl	80034ea <xQueueReceiveFromISR>
      event.status = osOK;
 8004446:	2801      	cmp	r0, #1
 8004448:	bf0c      	ite	eq
 800444a:	2310      	moveq	r3, #16
 800444c:	2300      	movne	r3, #0
 800444e:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004450:	9b00      	ldr	r3, [sp, #0]
 8004452:	b14b      	cbz	r3, 8004468 <osMessageGet+0x4a>
 8004454:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 8004468:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800446c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004470:	4620      	mov	r0, r4
 8004472:	b004      	add	sp, #16
 8004474:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004476:	a902      	add	r1, sp, #8
 8004478:	f7fe fec7 	bl	800320a <xQueueReceive>
 800447c:	2801      	cmp	r0, #1
 800447e:	d101      	bne.n	8004484 <osMessageGet+0x66>
      event.status = osEventMessage;
 8004480:	2310      	movs	r3, #16
 8004482:	e7d6      	b.n	8004432 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004484:	2e00      	cmp	r6, #0
 8004486:	bf18      	it	ne
 8004488:	2640      	movne	r6, #64	; 0x40
 800448a:	9601      	str	r6, [sp, #4]
 800448c:	e7ec      	b.n	8004468 <osMessageGet+0x4a>

0800448e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800448e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004490:	f7ff fd58 	bl	8003f44 <xTaskGetSchedulerState>
 8004494:	2801      	cmp	r0, #1
 8004496:	d003      	beq.n	80044a0 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800449c:	f000 b9ca 	b.w	8004834 <xPortSysTickHandler>
}
 80044a0:	bd08      	pop	{r3, pc}

080044a2 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 80044a2:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 80044a4:	f7ff fe5c 	bl	8004160 <vTaskList>
#endif
  return osOK;
}
 80044a8:	2000      	movs	r0, #0
 80044aa:	bd08      	pop	{r3, pc}

080044ac <osMessageWaiting>:
 80044ac:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 80044b0:	b10b      	cbz	r3, 80044b6 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80044b2:	f7ff b886 	b.w	80035c2 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80044b6:	f7ff b86d 	b.w	8003594 <uxQueueMessagesWaiting>

080044ba <osMessageDelete>:
 80044ba:	f7ff bf3b 	b.w	8004334 <osMutexDelete>
	...

080044c0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <prvInsertBlockIntoFreeList+0x40>)
{
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c6:	461a      	mov	r2, r3
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4283      	cmp	r3, r0
 80044cc:	d3fb      	bcc.n	80044c6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ce:	6854      	ldr	r4, [r2, #4]
 80044d0:	1911      	adds	r1, r2, r4
 80044d2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044d4:	bf01      	itttt	eq
 80044d6:	6841      	ldreq	r1, [r0, #4]
 80044d8:	4610      	moveq	r0, r2
 80044da:	1909      	addeq	r1, r1, r4
 80044dc:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044de:	6844      	ldr	r4, [r0, #4]
 80044e0:	1901      	adds	r1, r0, r4
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d106      	bne.n	80044f4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044e6:	68a9      	ldr	r1, [r5, #8]
 80044e8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044ea:	bf1f      	itttt	ne
 80044ec:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ee:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044f0:	1909      	addne	r1, r1, r4
 80044f2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044f4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044f6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044f8:	bf18      	it	ne
 80044fa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fc:	bd30      	pop	{r4, r5, pc}
 80044fe:	bf00      	nop
 8004500:	20004134 	.word	0x20004134

08004504 <pvPortMalloc>:
{
 8004504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8004508:	4d3f      	ldr	r5, [pc, #252]	; (8004608 <pvPortMalloc+0x104>)
{
 800450a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800450c:	f7ff fa78 	bl	8003a00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004510:	68ab      	ldr	r3, [r5, #8]
 8004512:	b9f3      	cbnz	r3, 8004552 <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8004514:	493d      	ldr	r1, [pc, #244]	; (800460c <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004516:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004518:	bf1b      	ittet	ne
 800451a:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800451c:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004520:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004524:	f023 0307 	bicne.w	r3, r3, #7
 8004528:	bf1c      	itt	ne
 800452a:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800452c:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800452e:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004530:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004532:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004534:	606b      	str	r3, [r5, #4]
	uxAddress -= xHeapStructSize;
 8004536:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004538:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800453c:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004540:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8004542:	60aa      	str	r2, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004544:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004548:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800454c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004550:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004552:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8004556:	ea18 0f04 	tst.w	r8, r4
 800455a:	d14f      	bne.n	80045fc <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 800455c:	2c00      	cmp	r4, #0
 800455e:	d03e      	beq.n	80045de <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8004560:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004564:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004566:	bf1c      	itt	ne
 8004568:	f023 0307 	bicne.w	r3, r3, #7
 800456c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <pvPortMalloc+0xf8>
 8004572:	692f      	ldr	r7, [r5, #16]
 8004574:	429f      	cmp	r7, r3
 8004576:	d341      	bcc.n	80045fc <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8004578:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 800457a:	4823      	ldr	r0, [pc, #140]	; (8004608 <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457c:	6872      	ldr	r2, [r6, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d201      	bcs.n	8004586 <pvPortMalloc+0x82>
 8004582:	6831      	ldr	r1, [r6, #0]
 8004584:	b9b1      	cbnz	r1, 80045b4 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8004586:	68a9      	ldr	r1, [r5, #8]
 8004588:	42b1      	cmp	r1, r6
 800458a:	d037      	beq.n	80045fc <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800458c:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800458e:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004590:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004592:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004594:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004596:	d914      	bls.n	80045c2 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004598:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800459a:	0741      	lsls	r1, r0, #29
 800459c:	d00d      	beq.n	80045ba <pvPortMalloc+0xb6>
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	b672      	cpsid	i
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	b662      	cpsie	i
 80045b2:	e7fe      	b.n	80045b2 <pvPortMalloc+0xae>
 80045b4:	4630      	mov	r0, r6
 80045b6:	460e      	mov	r6, r1
 80045b8:	e7e0      	b.n	800457c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045ba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045bc:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045be:	f7ff ff7f 	bl	80044c0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c2:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045c4:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c6:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c8:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ca:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ce:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045d0:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045d6:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045d8:	bf38      	it	cc
 80045da:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 80045dc:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 80045de:	f7ff fa9b 	bl	8003b18 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e2:	0763      	lsls	r3, r4, #29
 80045e4:	d00c      	beq.n	8004600 <pvPortMalloc+0xfc>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	b672      	cpsid	i
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	b662      	cpsie	i
 80045fa:	e7fe      	b.n	80045fa <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 80045fc:	2400      	movs	r4, #0
 80045fe:	e7ee      	b.n	80045de <pvPortMalloc+0xda>
}
 8004600:	4620      	mov	r0, r4
 8004602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004606:	bf00      	nop
 8004608:	20004134 	.word	0x20004134
 800460c:	2000414c 	.word	0x2000414c

08004610 <vPortFree>:
{
 8004610:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8004612:	4604      	mov	r4, r0
 8004614:	b388      	cbz	r0, 800467a <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004616:	4d19      	ldr	r5, [pc, #100]	; (800467c <vPortFree+0x6c>)
 8004618:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800461c:	696a      	ldr	r2, [r5, #20]
 800461e:	4213      	tst	r3, r2
 8004620:	d10a      	bne.n	8004638 <vPortFree+0x28>
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	b672      	cpsid	i
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	b662      	cpsie	i
 8004636:	e7fe      	b.n	8004636 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004638:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800463c:	b151      	cbz	r1, 8004654 <vPortFree+0x44>
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	b672      	cpsid	i
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	b662      	cpsie	i
 8004652:	e7fe      	b.n	8004652 <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004654:	ea23 0302 	bic.w	r3, r3, r2
 8004658:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800465c:	f7ff f9d0 	bl	8003a00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004660:	692a      	ldr	r2, [r5, #16]
 8004662:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004666:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800466a:	4413      	add	r3, r2
 800466c:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800466e:	f7ff ff27 	bl	80044c0 <prvInsertBlockIntoFreeList>
}
 8004672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8004676:	f7ff ba4f 	b.w	8003b18 <xTaskResumeAll>
}
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20004134 	.word	0x20004134

08004680 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004680:	4808      	ldr	r0, [pc, #32]	; (80046a4 <prvPortStartFirstTask+0x24>)
 8004682:	6800      	ldr	r0, [r0, #0]
 8004684:	6800      	ldr	r0, [r0, #0]
 8004686:	f380 8808 	msr	MSP, r0
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f380 8814 	msr	CONTROL, r0
 8004692:	b662      	cpsie	i
 8004694:	b661      	cpsie	f
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	df00      	svc	0
 80046a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046a2:	0000      	.short	0x0000
 80046a4:	e000ed08 	.word	0xe000ed08

080046a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046b8 <vPortEnableVFP+0x10>
 80046ac:	6801      	ldr	r1, [r0, #0]
 80046ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046b2:	6001      	str	r1, [r0, #0]
 80046b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046b6:	0000      	.short	0x0000
 80046b8:	e000ed88 	.word	0xe000ed88

080046bc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80046bc:	2300      	movs	r3, #0
{
 80046be:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80046c0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <prvTaskExitError+0x44>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	d00a      	beq.n	80046e0 <prvTaskExitError+0x24>
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	b672      	cpsid	i
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	b662      	cpsie	i
 80046de:	e7fe      	b.n	80046de <prvTaskExitError+0x22>
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	b672      	cpsid	i
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	b662      	cpsie	i
	while( ulDummy == 0 )
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0fc      	beq.n	80046f4 <prvTaskExitError+0x38>
}
 80046fa:	b002      	add	sp, #8
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000030 	.word	0x20000030

08004704 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004708:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800470c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004710:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004712:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004716:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004718:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800471a:	f06f 0302 	mvn.w	r3, #2
 800471e:	6203      	str	r3, [r0, #32]
}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	080046bd 	.word	0x080046bd
	...

08004730 <SVC_Handler>:
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	20004028 	.word	0x20004028

08004754 <vPortEnterCritical>:
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	b672      	cpsid	i
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	b662      	cpsie	i
	uxCriticalNesting++;
 8004768:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <vPortEnterCritical+0x44>)
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800476e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004772:	d110      	bne.n	8004796 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004774:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004778:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800477c:	b2db      	uxtb	r3, r3
 800477e:	b153      	cbz	r3, 8004796 <vPortEnterCritical+0x42>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	e7fe      	b.n	8004794 <vPortEnterCritical+0x40>
}
 8004796:	4770      	bx	lr
 8004798:	20000030 	.word	0x20000030

0800479c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vPortExitCritical+0x28>)
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	b953      	cbnz	r3, 80047b8 <vPortExitCritical+0x1c>
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	b672      	cpsid	i
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	b662      	cpsie	i
 80047b6:	e7fe      	b.n	80047b6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80047b8:	3b01      	subs	r3, #1
 80047ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047bc:	b90b      	cbnz	r3, 80047c2 <vPortExitCritical+0x26>
	__asm volatile
 80047be:	f383 8811 	msr	BASEPRI, r3
}
 80047c2:	4770      	bx	lr
 80047c4:	20000030 	.word	0x20000030
	...

080047d0 <PendSV_Handler>:
	__asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f01e 0f10 	tst.w	lr, #16
 80047e0:	bf08      	it	eq
 80047e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047f4:	b672      	cpsid	i
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	b662      	cpsie	i
 8004804:	f7ff fa20 	bl	8003c48 <vTaskSwitchContext>
 8004808:	f04f 0000 	mov.w	r0, #0
 800480c:	f380 8811 	msr	BASEPRI, r0
 8004810:	bc09      	pop	{r0, r3}
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	f01e 0f10 	tst.w	lr, #16
 800481e:	bf08      	it	eq
 8004820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004824:	f380 8809 	msr	PSP, r0
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <pxCurrentTCBConst>:
 8004830:	20004028 	.word	0x20004028

08004834 <xPortSysTickHandler>:
{
 8004834:	b508      	push	{r3, lr}
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	b672      	cpsid	i
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800484a:	f7ff f8f1 	bl	8003a30 <xTaskIncrementTick>
 800484e:	b128      	cbz	r0, 800485c <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004858:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800485c:	2300      	movs	r3, #0
 800485e:	f383 8811 	msr	BASEPRI, r3
}
 8004862:	bd08      	pop	{r3, pc}

08004864 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004864:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004868:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800486e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004870:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <vPortSetupTimerInterrupt+0x20>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	fbb3 f3f1 	udiv	r3, r3, r1
 800487a:	3b01      	subs	r3, #1
 800487c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	2307      	movs	r3, #7
 8004880:	6113      	str	r3, [r2, #16]
}
 8004882:	4770      	bx	lr
 8004884:	20000024 	.word	0x20000024

08004888 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <xPortStartScheduler+0xb8>)
{
 800488a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800488c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800488e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004898:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800489a:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ac:	2307      	movs	r3, #7
 80048ae:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80048b4:	1e5c      	subs	r4, r3, #1
 80048b6:	0600      	lsls	r0, r0, #24
 80048b8:	d40e      	bmi.n	80048d8 <xPortStartScheduler+0x50>
 80048ba:	b111      	cbz	r1, 80048c2 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048bc:	2b03      	cmp	r3, #3
 80048be:	6053      	str	r3, [r2, #4]
 80048c0:	d013      	beq.n	80048ea <xPortStartScheduler+0x62>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	b672      	cpsid	i
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	b662      	cpsie	i
 80048d6:	e7fe      	b.n	80048d6 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048dc:	2101      	movs	r1, #1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f88d 3003 	strb.w	r3, [sp, #3]
 80048e6:	4623      	mov	r3, r4
 80048e8:	e7e2      	b.n	80048b0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048ea:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ee:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 80048f2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048f4:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	4a11      	ldr	r2, [pc, #68]	; (8004940 <xPortStartScheduler+0xb8>)
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048fe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004902:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004906:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800490a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800490e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004912:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8004916:	f7ff ffa5 	bl	8004864 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <xPortStartScheduler+0xc0>)
 800491c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800491e:	f7ff fec3 	bl	80046a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004922:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8004926:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800492a:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800492e:	f7ff fea7 	bl	8004680 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004932:	f7ff f989 	bl	8003c48 <vTaskSwitchContext>
}
 8004936:	4628      	mov	r0, r5
	prvTaskExitError();
 8004938:	f7ff fec0 	bl	80046bc <prvTaskExitError>
}
 800493c:	b003      	add	sp, #12
 800493e:	bd30      	pop	{r4, r5, pc}
 8004940:	e000e400 	.word	0xe000e400
 8004944:	2000a54c 	.word	0x2000a54c
 8004948:	20000030 	.word	0x20000030

0800494c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800494c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004950:	2b0f      	cmp	r3, #15
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <vPortValidateInterruptPriority+0x54>)
 8004954:	d90f      	bls.n	8004976 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004956:	4913      	ldr	r1, [pc, #76]	; (80049a4 <vPortValidateInterruptPriority+0x58>)
 8004958:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800495a:	7811      	ldrb	r1, [r2, #0]
 800495c:	4299      	cmp	r1, r3
 800495e:	d90a      	bls.n	8004976 <vPortValidateInterruptPriority+0x2a>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	e7fe      	b.n	8004974 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004976:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800497a:	6852      	ldr	r2, [r2, #4]
 800497c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004984:	4293      	cmp	r3, r2
 8004986:	d90a      	bls.n	800499e <vPortValidateInterruptPriority+0x52>
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	b672      	cpsid	i
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	b662      	cpsie	i
 800499c:	e7fe      	b.n	800499c <vPortValidateInterruptPriority+0x50>
	}
 800499e:	4770      	bx	lr
 80049a0:	2000a54c 	.word	0x2000a54c
 80049a4:	e000e3f0 	.word	0xe000e3f0

080049a8 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80049a8:	680a      	ldr	r2, [r1, #0]
{
 80049aa:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80049ac:	320c      	adds	r2, #12
{
 80049ae:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80049b0:	f001 fb6c 	bl	800608c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80049b4:	b908      	cbnz	r0, 80049ba <netconn_apimsg+0x12>
    return apimsg->err;
 80049b6:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 80049ba:	bd10      	pop	{r4, pc}

080049bc <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80049bc:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80049be:	b160      	cbz	r0, 80049da <netconn_tcp_recvd_msg+0x1e>
 80049c0:	7803      	ldrb	r3, [r0, #0]
 80049c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d107      	bne.n	80049da <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80049ca:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 80049cc:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80049ce:	4611      	mov	r1, r2
 80049d0:	4807      	ldr	r0, [pc, #28]	; (80049f0 <netconn_tcp_recvd_msg+0x34>)
}
 80049d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80049d6:	f7ff bfe7 	b.w	80049a8 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <netconn_tcp_recvd_msg+0x38>)
 80049dc:	f240 22a7 	movw	r2, #679	; 0x2a7
 80049e0:	4905      	ldr	r1, [pc, #20]	; (80049f8 <netconn_tcp_recvd_msg+0x3c>)
 80049e2:	4806      	ldr	r0, [pc, #24]	; (80049fc <netconn_tcp_recvd_msg+0x40>)
 80049e4:	f008 fde0 	bl	800d5a8 <iprintf>
}
 80049e8:	f06f 000f 	mvn.w	r0, #15
 80049ec:	bd08      	pop	{r3, pc}
 80049ee:	bf00      	nop
 80049f0:	08005d19 	.word	0x08005d19
 80049f4:	08018194 	.word	0x08018194
 80049f8:	08018204 	.word	0x08018204
 80049fc:	08017fc5 	.word	0x08017fc5

08004a00 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004a00:	b500      	push	{lr}
 8004a02:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004a04:	b958      	cbnz	r0, 8004a1e <netconn_close_shutdown+0x1e>
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <netconn_close_shutdown+0x34>)
 8004a08:	f240 4247 	movw	r2, #1095	; 0x447
 8004a0c:	490a      	ldr	r1, [pc, #40]	; (8004a38 <netconn_close_shutdown+0x38>)
 8004a0e:	480b      	ldr	r0, [pc, #44]	; (8004a3c <netconn_close_shutdown+0x3c>)
 8004a10:	f008 fdca 	bl	800d5a8 <iprintf>
 8004a14:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004a18:	b009      	add	sp, #36	; 0x24
 8004a1a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004a1e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004a20:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004a22:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004a26:	4669      	mov	r1, sp
 8004a28:	4805      	ldr	r0, [pc, #20]	; (8004a40 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004a2a:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004a2e:	f7ff ffbb 	bl	80049a8 <netconn_apimsg>
  return err;
 8004a32:	e7f1      	b.n	8004a18 <netconn_close_shutdown+0x18>
 8004a34:	08018194 	.word	0x08018194
 8004a38:	08018228 	.word	0x08018228
 8004a3c:	08017fc5 	.word	0x08017fc5
 8004a40:	08005e1d 	.word	0x08005e1d

08004a44 <netconn_new_with_proto_and_callback>:
{
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	460d      	mov	r5, r1
 8004a48:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	f000 ff20 	bl	8005890 <netconn_alloc>
  if (conn != NULL) {
 8004a50:	4604      	mov	r4, r0
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d03e      	beq.n	8004ad4 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8004a56:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004a58:	4669      	mov	r1, sp
 8004a5a:	4820      	ldr	r0, [pc, #128]	; (8004adc <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004a5c:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004a60:	f7ff ffa2 	bl	80049a8 <netconn_apimsg>
    if (err != ERR_OK) {
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d035      	beq.n	8004ad4 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	b12b      	cbz	r3, 8004a78 <netconn_new_with_proto_and_callback+0x34>
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <netconn_new_with_proto_and_callback+0x9c>)
 8004a6e:	22a3      	movs	r2, #163	; 0xa3
 8004a70:	491c      	ldr	r1, [pc, #112]	; (8004ae4 <netconn_new_with_proto_and_callback+0xa0>)
 8004a72:	481d      	ldr	r0, [pc, #116]	; (8004ae8 <netconn_new_with_proto_and_callback+0xa4>)
 8004a74:	f008 fd98 	bl	800d5a8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004a78:	f104 0510 	add.w	r5, r4, #16
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f008 fc7a 	bl	800d376 <sys_mbox_valid>
 8004a82:	b928      	cbnz	r0, 8004a90 <netconn_new_with_proto_and_callback+0x4c>
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <netconn_new_with_proto_and_callback+0x9c>)
 8004a86:	22a4      	movs	r2, #164	; 0xa4
 8004a88:	4918      	ldr	r1, [pc, #96]	; (8004aec <netconn_new_with_proto_and_callback+0xa8>)
 8004a8a:	4817      	ldr	r0, [pc, #92]	; (8004ae8 <netconn_new_with_proto_and_callback+0xa4>)
 8004a8c:	f008 fd8c 	bl	800d5a8 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004a90:	f104 0014 	add.w	r0, r4, #20
 8004a94:	f008 fc6f 	bl	800d376 <sys_mbox_valid>
 8004a98:	b128      	cbz	r0, 8004aa6 <netconn_new_with_proto_and_callback+0x62>
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <netconn_new_with_proto_and_callback+0x9c>)
 8004a9c:	22a6      	movs	r2, #166	; 0xa6
 8004a9e:	4914      	ldr	r1, [pc, #80]	; (8004af0 <netconn_new_with_proto_and_callback+0xac>)
 8004aa0:	4811      	ldr	r0, [pc, #68]	; (8004ae8 <netconn_new_with_proto_and_callback+0xa4>)
 8004aa2:	f008 fd81 	bl	800d5a8 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004aa6:	f104 060c 	add.w	r6, r4, #12
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f008 fca3 	bl	800d3f6 <sys_sem_valid>
 8004ab0:	b928      	cbnz	r0, 8004abe <netconn_new_with_proto_and_callback+0x7a>
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <netconn_new_with_proto_and_callback+0x9c>)
 8004ab4:	22a9      	movs	r2, #169	; 0xa9
 8004ab6:	490f      	ldr	r1, [pc, #60]	; (8004af4 <netconn_new_with_proto_and_callback+0xb0>)
 8004ab8:	480b      	ldr	r0, [pc, #44]	; (8004ae8 <netconn_new_with_proto_and_callback+0xa4>)
 8004aba:	f008 fd75 	bl	800d5a8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f008 fc96 	bl	800d3f0 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f008 fc0f 	bl	800d2e8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004aca:	4621      	mov	r1, r4
      return NULL;
 8004acc:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8004ace:	2007      	movs	r0, #7
 8004ad0:	f004 f962 	bl	8008d98 <memp_free>
}
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	b008      	add	sp, #32
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	bf00      	nop
 8004adc:	08005831 	.word	0x08005831
 8004ae0:	08018194 	.word	0x08018194
 8004ae4:	08018244 	.word	0x08018244
 8004ae8:	08017fc5 	.word	0x08017fc5
 8004aec:	08018265 	.word	0x08018265
 8004af0:	0801827a 	.word	0x0801827a
 8004af4:	0801829b 	.word	0x0801829b

08004af8 <netconn_prepare_delete>:
{
 8004af8:	b500      	push	{lr}
 8004afa:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004afc:	b138      	cbz	r0, 8004b0e <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004afe:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004b00:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004b02:	4669      	mov	r1, sp
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004b06:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004b0a:	f7ff ff4d 	bl	80049a8 <netconn_apimsg>
}
 8004b0e:	b009      	add	sp, #36	; 0x24
 8004b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b14:	08005b21 	.word	0x08005b21

08004b18 <netconn_delete>:
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	b140      	cbz	r0, 8004b30 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8004b1e:	f7ff ffeb 	bl	8004af8 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8004b22:	4604      	mov	r4, r0
 8004b24:	b910      	cbnz	r0, 8004b2c <netconn_delete+0x14>
    netconn_free(conn);
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fef4 	bl	8005914 <netconn_free>
}
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004b30:	4604      	mov	r4, r0
 8004b32:	e7fb      	b.n	8004b2c <netconn_delete+0x14>

08004b34 <netconn_bind>:
{
 8004b34:	b500      	push	{lr}
 8004b36:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004b38:	b958      	cbnz	r0, 8004b52 <netconn_bind+0x1e>
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <netconn_bind+0x38>)
 8004b3c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004b40:	490b      	ldr	r1, [pc, #44]	; (8004b70 <netconn_bind+0x3c>)
 8004b42:	480c      	ldr	r0, [pc, #48]	; (8004b74 <netconn_bind+0x40>)
 8004b44:	f008 fd30 	bl	800d5a8 <iprintf>
 8004b48:	f06f 000f 	mvn.w	r0, #15
}
 8004b4c:	b009      	add	sp, #36	; 0x24
 8004b4e:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8004b54:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8004b56:	2900      	cmp	r1, #0
 8004b58:	bf08      	it	eq
 8004b5a:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004b5e:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004b62:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004b64:	4669      	mov	r1, sp
 8004b66:	f7ff ff1f 	bl	80049a8 <netconn_apimsg>
  return err;
 8004b6a:	e7ef      	b.n	8004b4c <netconn_bind+0x18>
 8004b6c:	08018194 	.word	0x08018194
 8004b70:	0801830e 	.word	0x0801830e
 8004b74:	08017fc5 	.word	0x08017fc5
 8004b78:	0800f134 	.word	0x0800f134
 8004b7c:	08005c2d 	.word	0x08005c2d

08004b80 <netconn_listen_with_backlog>:
{
 8004b80:	b500      	push	{lr}
 8004b82:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004b84:	b958      	cbnz	r0, 8004b9e <netconn_listen_with_backlog+0x1e>
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <netconn_listen_with_backlog+0x2c>)
 8004b88:	f240 12bb 	movw	r2, #443	; 0x1bb
 8004b8c:	4908      	ldr	r1, [pc, #32]	; (8004bb0 <netconn_listen_with_backlog+0x30>)
 8004b8e:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <netconn_listen_with_backlog+0x34>)
 8004b90:	f008 fd0a 	bl	800d5a8 <iprintf>
 8004b94:	f06f 000f 	mvn.w	r0, #15
}
 8004b98:	b009      	add	sp, #36	; 0x24
 8004b9a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8004b9e:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004ba0:	4669      	mov	r1, sp
 8004ba2:	4805      	ldr	r0, [pc, #20]	; (8004bb8 <netconn_listen_with_backlog+0x38>)
 8004ba4:	f7ff ff00 	bl	80049a8 <netconn_apimsg>
  return err;
 8004ba8:	e7f6      	b.n	8004b98 <netconn_listen_with_backlog+0x18>
 8004baa:	bf00      	nop
 8004bac:	08018194 	.word	0x08018194
 8004bb0:	08018386 	.word	0x08018386
 8004bb4:	08017fc5 	.word	0x08017fc5
 8004bb8:	08005c61 	.word	0x08005c61

08004bbc <netconn_write_vectors_partly>:
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004bc4:	b958      	cbnz	r0, 8004bde <netconn_write_vectors_partly+0x22>
 8004bc6:	f06f 040f 	mvn.w	r4, #15
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <netconn_write_vectors_partly+0xc0>)
 8004bcc:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004bd0:	492b      	ldr	r1, [pc, #172]	; (8004c80 <netconn_write_vectors_partly+0xc4>)
 8004bd2:	482c      	ldr	r0, [pc, #176]	; (8004c84 <netconn_write_vectors_partly+0xc8>)
 8004bd4:	f008 fce8 	bl	800d5a8 <iprintf>
}
 8004bd8:	4620      	mov	r0, r4
 8004bda:	b009      	add	sp, #36	; 0x24
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8004bde:	7804      	ldrb	r4, [r0, #0]
 8004be0:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8004be4:	2c10      	cmp	r4, #16
 8004be6:	d009      	beq.n	8004bfc <netconn_write_vectors_partly+0x40>
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <netconn_write_vectors_partly+0xc0>)
 8004bea:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004bee:	4926      	ldr	r1, [pc, #152]	; (8004c88 <netconn_write_vectors_partly+0xcc>)
 8004bf0:	4824      	ldr	r0, [pc, #144]	; (8004c84 <netconn_write_vectors_partly+0xc8>)
 8004bf2:	f008 fcd9 	bl	800d5a8 <iprintf>
    return ERR_VAL;
 8004bf6:	f06f 0405 	mvn.w	r4, #5
 8004bfa:	e7ed      	b.n	8004bd8 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8004bfc:	7e05      	ldrb	r5, [r0, #24]
 8004bfe:	f003 0404 	and.w	r4, r3, #4
 8004c02:	f005 0502 	and.w	r5, r5, #2
 8004c06:	4325      	orrs	r5, r4
 8004c08:	d002      	beq.n	8004c10 <netconn_write_vectors_partly+0x54>
 8004c0a:	2f00      	cmp	r7, #0
 8004c0c:	d0f3      	beq.n	8004bf6 <netconn_write_vectors_partly+0x3a>
 8004c0e:	2501      	movs	r5, #1
 8004c10:	2400      	movs	r4, #0
    size += vectors[i].len;
 8004c12:	f101 0c04 	add.w	ip, r1, #4
 8004c16:	4626      	mov	r6, r4
 8004c18:	e004      	b.n	8004c24 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 8004c1a:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 8004c1e:	199e      	adds	r6, r3, r6
 8004c20:	d2e9      	bcs.n	8004bf6 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8004c22:	3401      	adds	r4, #1
 8004c24:	42a2      	cmp	r2, r4
 8004c26:	dcf8      	bgt.n	8004c1a <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	d101      	bne.n	8004c30 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8004c2c:	2400      	movs	r4, #0
 8004c2e:	e7d3      	b.n	8004bd8 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8004c30:	da03      	bge.n	8004c3a <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d0df      	beq.n	8004bf6 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8004c36:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8004c3a:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004c3e:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 8004c40:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8004c42:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004c44:	4669      	mov	r1, sp
 8004c46:	4811      	ldr	r0, [pc, #68]	; (8004c8c <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004c48:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8004c4a:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8004c4e:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004c52:	f7ff fea9 	bl	80049a8 <netconn_apimsg>
  if (err == ERR_OK) {
 8004c56:	4604      	mov	r4, r0
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1bd      	bne.n	8004bd8 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8004c5c:	b10f      	cbz	r7, 8004c62 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8004c5e:	9b06      	ldr	r3, [sp, #24]
 8004c60:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	d1e2      	bne.n	8004c2c <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8004c66:	9b06      	ldr	r3, [sp, #24]
 8004c68:	42b3      	cmp	r3, r6
 8004c6a:	d0df      	beq.n	8004c2c <netconn_write_vectors_partly+0x70>
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <netconn_write_vectors_partly+0xc0>)
 8004c6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8004c72:	4907      	ldr	r1, [pc, #28]	; (8004c90 <netconn_write_vectors_partly+0xd4>)
 8004c74:	4803      	ldr	r0, [pc, #12]	; (8004c84 <netconn_write_vectors_partly+0xc8>)
 8004c76:	f008 fc97 	bl	800d5a8 <iprintf>
 8004c7a:	e7ad      	b.n	8004bd8 <netconn_write_vectors_partly+0x1c>
 8004c7c:	08018194 	.word	0x08018194
 8004c80:	080183be 	.word	0x080183be
 8004c84:	08017fc5 	.word	0x08017fc5
 8004c88:	080183da 	.word	0x080183da
 8004c8c:	08005d51 	.word	0x08005d51
 8004c90:	080183fc 	.word	0x080183fc

08004c94 <netconn_write_partly>:
{
 8004c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8004c96:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8004c9a:	9a06      	ldr	r2, [sp, #24]
 8004c9c:	a902      	add	r1, sp, #8
 8004c9e:	9200      	str	r2, [sp, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f7ff ff8b 	bl	8004bbc <netconn_write_vectors_partly>
}
 8004ca6:	b005      	add	sp, #20
 8004ca8:	f85d fb04 	ldr.w	pc, [sp], #4

08004cac <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8004cac:	2103      	movs	r1, #3
 8004cae:	f7ff bea7 	b.w	8004a00 <netconn_close_shutdown>

08004cb2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8004cb2:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	b148      	cbz	r0, 8004ccc <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8004cb8:	f008 fbd8 	bl	800d46c <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8004cbc:	2300      	movs	r3, #0
  err = conn->pending_err;
 8004cbe:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8004cc2:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8004cc4:	f008 fbde 	bl	800d484 <sys_arch_unprotect>
  return err;
}
 8004cc8:	4628      	mov	r0, r5
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004ccc:	4605      	mov	r5, r0
 8004cce:	e7fb      	b.n	8004cc8 <netconn_err+0x16>

08004cd0 <netconn_accept>:
{
 8004cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd2:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8004cd4:	460e      	mov	r6, r1
 8004cd6:	b959      	cbnz	r1, 8004cf0 <netconn_accept+0x20>
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <netconn_accept+0xa0>)
 8004cda:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004cde:	4925      	ldr	r1, [pc, #148]	; (8004d74 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004ce0:	f06f 040f 	mvn.w	r4, #15
 8004ce4:	4824      	ldr	r0, [pc, #144]	; (8004d78 <netconn_accept+0xa8>)
 8004ce6:	f008 fc5f 	bl	800d5a8 <iprintf>
}
 8004cea:	4620      	mov	r0, r4
 8004cec:	b003      	add	sp, #12
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004cf4:	b920      	cbnz	r0, 8004d00 <netconn_accept+0x30>
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <netconn_accept+0xa0>)
 8004cf8:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004cfc:	491f      	ldr	r1, [pc, #124]	; (8004d7c <netconn_accept+0xac>)
 8004cfe:	e7ef      	b.n	8004ce0 <netconn_accept+0x10>
  err = netconn_err(conn);
 8004d00:	f7ff ffd7 	bl	8004cb2 <netconn_err>
 8004d04:	4604      	mov	r4, r0
 8004d06:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d1ed      	bne.n	8004cea <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004d0e:	f105 0714 	add.w	r7, r5, #20
 8004d12:	4638      	mov	r0, r7
 8004d14:	f008 fb2f 	bl	800d376 <sys_mbox_valid>
 8004d18:	b910      	cbnz	r0, 8004d20 <netconn_accept+0x50>
    return ERR_CLSD;
 8004d1a:	f06f 040e 	mvn.w	r4, #14
 8004d1e:	e7e4      	b.n	8004cea <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004d20:	7e2b      	ldrb	r3, [r5, #24]
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d4f9      	bmi.n	8004d1a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8004d26:	079b      	lsls	r3, r3, #30
 8004d28:	d508      	bpl.n	8004d3c <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8004d2a:	a901      	add	r1, sp, #4
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f008 fb11 	bl	800d354 <sys_arch_mbox_tryfetch>
 8004d32:	3001      	adds	r0, #1
 8004d34:	d107      	bne.n	8004d46 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8004d36:	f06f 0406 	mvn.w	r4, #6
 8004d3a:	e7d6      	b.n	8004cea <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	a901      	add	r1, sp, #4
 8004d40:	4638      	mov	r0, r7
 8004d42:	f008 fae5 	bl	800d310 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004d46:	6a2b      	ldr	r3, [r5, #32]
 8004d48:	b11b      	cbz	r3, 8004d52 <netconn_accept+0x82>
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4628      	mov	r0, r5
 8004d50:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8004d52:	f10d 0103 	add.w	r1, sp, #3
 8004d56:	9801      	ldr	r0, [sp, #4]
 8004d58:	f000 fd42 	bl	80057e0 <lwip_netconn_is_err_msg>
 8004d5c:	b110      	cbz	r0, 8004d64 <netconn_accept+0x94>
    return err;
 8004d5e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8004d62:	e7c2      	b.n	8004cea <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8004d64:	9b01      	ldr	r3, [sp, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0d7      	beq.n	8004d1a <netconn_accept+0x4a>
  *new_conn = newconn;
 8004d6a:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8004d6c:	e7bd      	b.n	8004cea <netconn_accept+0x1a>
 8004d6e:	bf00      	nop
 8004d70:	08018194 	.word	0x08018194
 8004d74:	0801841f 	.word	0x0801841f
 8004d78:	08017fc5 	.word	0x08017fc5
 8004d7c:	0801843f 	.word	0x0801843f

08004d80 <netconn_recv_data>:
  void *buf = NULL;
 8004d80:	2300      	movs	r3, #0
{
 8004d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d84:	4604      	mov	r4, r0
 8004d86:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004d88:	460d      	mov	r5, r1
  void *buf = NULL;
 8004d8a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004d8c:	b951      	cbnz	r1, 8004da4 <netconn_recv_data+0x24>
 8004d8e:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <netconn_recv_data+0xd8>)
 8004d90:	f44f 7212 	mov.w	r2, #584	; 0x248
 8004d94:	4931      	ldr	r1, [pc, #196]	; (8004e5c <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004d96:	4832      	ldr	r0, [pc, #200]	; (8004e60 <netconn_recv_data+0xe0>)
 8004d98:	f008 fc06 	bl	800d5a8 <iprintf>
 8004d9c:	f06f 000f 	mvn.w	r0, #15
}
 8004da0:	b003      	add	sp, #12
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8004da4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004da6:	b920      	cbnz	r0, 8004db2 <netconn_recv_data+0x32>
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <netconn_recv_data+0xd8>)
 8004daa:	f240 224a 	movw	r2, #586	; 0x24a
 8004dae:	492d      	ldr	r1, [pc, #180]	; (8004e64 <netconn_recv_data+0xe4>)
 8004db0:	e7f1      	b.n	8004d96 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004db2:	f100 0710 	add.w	r7, r0, #16
 8004db6:	4638      	mov	r0, r7
 8004db8:	f008 fadd 	bl	800d376 <sys_mbox_valid>
 8004dbc:	b938      	cbnz	r0, 8004dce <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7ff ff77 	bl	8004cb2 <netconn_err>
    if (err != ERR_OK) {
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d1eb      	bne.n	8004da0 <netconn_recv_data+0x20>
    return ERR_CONN;
 8004dc8:	f06f 000a 	mvn.w	r0, #10
 8004dcc:	e7e8      	b.n	8004da0 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004dce:	7e23      	ldrb	r3, [r4, #24]
 8004dd0:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004dd4:	a901      	add	r1, sp, #4
 8004dd6:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	4333      	orrs	r3, r6
 8004dde:	d102      	bne.n	8004de6 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8004de0:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8004de4:	b172      	cbz	r2, 8004e04 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004de6:	f008 fab5 	bl	800d354 <sys_arch_mbox_tryfetch>
 8004dea:	3001      	adds	r0, #1
 8004dec:	d10c      	bne.n	8004e08 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff5f 	bl	8004cb2 <netconn_err>
      if (err != ERR_OK) {
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1d3      	bne.n	8004da0 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8004df8:	7e23      	ldrb	r3, [r4, #24]
 8004dfa:	07db      	lsls	r3, r3, #31
 8004dfc:	d4e4      	bmi.n	8004dc8 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8004dfe:	f06f 0006 	mvn.w	r0, #6
 8004e02:	e7cd      	b.n	8004da0 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8004e04:	f008 fa84 	bl	800d310 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004e08:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8004e0a:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d116      	bne.n	8004e42 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8004e14:	f10d 0103 	add.w	r1, sp, #3
 8004e18:	f000 fce2 	bl	80057e0 <lwip_netconn_is_err_msg>
 8004e1c:	b130      	cbz	r0, 8004e2c <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8004e1e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8004e22:	f110 0f0f 	cmn.w	r0, #15
 8004e26:	bf08      	it	eq
 8004e28:	2000      	moveq	r0, #0
 8004e2a:	e7b9      	b.n	8004da0 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8004e2c:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8004e2e:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8004e30:	6a23      	ldr	r3, [r4, #32]
 8004e32:	b113      	cbz	r3, 8004e3a <netconn_recv_data+0xba>
 8004e34:	2101      	movs	r1, #1
 8004e36:	4620      	mov	r0, r4
 8004e38:	4798      	blx	r3
  *new_buf = buf;
 8004e3a:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8004e3c:	2000      	movs	r0, #0
  *new_buf = buf;
 8004e3e:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8004e40:	e7ae      	b.n	8004da0 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8004e42:	b930      	cbnz	r0, 8004e52 <netconn_recv_data+0xd2>
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <netconn_recv_data+0xd8>)
 8004e46:	f240 2291 	movw	r2, #657	; 0x291
 8004e4a:	4907      	ldr	r1, [pc, #28]	; (8004e68 <netconn_recv_data+0xe8>)
 8004e4c:	4804      	ldr	r0, [pc, #16]	; (8004e60 <netconn_recv_data+0xe0>)
 8004e4e:	f008 fbab 	bl	800d5a8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8004e52:	9b01      	ldr	r3, [sp, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	e7ea      	b.n	8004e2e <netconn_recv_data+0xae>
 8004e58:	08018194 	.word	0x08018194
 8004e5c:	0801845c 	.word	0x0801845c
 8004e60:	08017fc5 	.word	0x08017fc5
 8004e64:	0801847a 	.word	0x0801847a
 8004e68:	08018495 	.word	0x08018495

08004e6c <netconn_recv_data_tcp>:
{
 8004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004e72:	3010      	adds	r0, #16
{
 8004e74:	460f      	mov	r7, r1
 8004e76:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004e78:	f008 fa7d 	bl	800d376 <sys_mbox_valid>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d03c      	beq.n	8004efa <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8004e80:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8004e84:	7e23      	ldrb	r3, [r4, #24]
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	da12      	bge.n	8004eb0 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8004e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004e90:	6a23      	ldr	r3, [r4, #32]
 8004e92:	b11b      	cbz	r3, 8004e9c <netconn_recv_data_tcp+0x30>
 8004e94:	2200      	movs	r2, #0
 8004e96:	2101      	movs	r1, #1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	bb2b      	cbnz	r3, 8004eec <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7ff ff06 	bl	8004cb2 <netconn_err>
        return ERR_RST;
 8004ea6:	1e05      	subs	r5, r0, #0
 8004ea8:	bf08      	it	eq
 8004eaa:	f06f 050d 	mvneq.w	r5, #13
 8004eae:	e018      	b.n	8004ee2 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff ff63 	bl	8004d80 <netconn_recv_data>
  if (err != ERR_OK) {
 8004eba:	4605      	mov	r5, r0
 8004ebc:	b988      	cbnz	r0, 8004ee2 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8004ebe:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8004ec0:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8004ec2:	d405      	bmi.n	8004ed0 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8004ec4:	b187      	cbz	r7, 8004ee8 <netconn_recv_data_tcp+0x7c>
 8004ec6:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8004ec8:	466a      	mov	r2, sp
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff fd76 	bl	80049bc <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8004ed0:	b93f      	cbnz	r7, 8004ee2 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8004ed2:	06f3      	lsls	r3, r6, #27
 8004ed4:	d5dc      	bpl.n	8004e90 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8004ed6:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8004ed8:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8004edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ee0:	7623      	strb	r3, [r4, #24]
}
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	b009      	add	sp, #36	; 0x24
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8004ee8:	2101      	movs	r1, #1
 8004eea:	e7ed      	b.n	8004ec8 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004eec:	2101      	movs	r1, #1
 8004eee:	4620      	mov	r0, r4
      return ERR_CLSD;
 8004ef0:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004ef4:	f7ff fd84 	bl	8004a00 <netconn_close_shutdown>
      return ERR_CLSD;
 8004ef8:	e7f3      	b.n	8004ee2 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 8004efa:	f06f 050a 	mvn.w	r5, #10
 8004efe:	e7f0      	b.n	8004ee2 <netconn_recv_data_tcp+0x76>

08004f00 <netconn_recv>:
{
 8004f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f02:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004f04:	460e      	mov	r6, r1
 8004f06:	b959      	cbnz	r1, 8004f20 <netconn_recv+0x20>
 8004f08:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <netconn_recv+0x94>)
 8004f0a:	f240 3263 	movw	r2, #867	; 0x363
 8004f0e:	4922      	ldr	r1, [pc, #136]	; (8004f98 <netconn_recv+0x98>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004f10:	f06f 050f 	mvn.w	r5, #15
 8004f14:	4821      	ldr	r0, [pc, #132]	; (8004f9c <netconn_recv+0x9c>)
 8004f16:	f008 fb47 	bl	800d5a8 <iprintf>
}
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	b003      	add	sp, #12
 8004f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8004f20:	2700      	movs	r7, #0
 8004f22:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004f24:	b920      	cbnz	r0, 8004f30 <netconn_recv+0x30>
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <netconn_recv+0x94>)
 8004f28:	f240 3265 	movw	r2, #869	; 0x365
 8004f2c:	491c      	ldr	r1, [pc, #112]	; (8004fa0 <netconn_recv+0xa0>)
 8004f2e:	e7ef      	b.n	8004f10 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004f30:	7803      	ldrb	r3, [r0, #0]
 8004f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d125      	bne.n	8004f86 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004f3a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8004f3c:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004f3e:	f003 fefb 	bl	8008d38 <memp_malloc>
    if (buf == NULL) {
 8004f42:	4604      	mov	r4, r0
 8004f44:	b1e0      	cbz	r0, 8004f80 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8004f46:	4628      	mov	r0, r5
 8004f48:	463a      	mov	r2, r7
 8004f4a:	a901      	add	r1, sp, #4
 8004f4c:	f7ff ff8e 	bl	8004e6c <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8004f50:	4605      	mov	r5, r0
 8004f52:	b120      	cbz	r0, 8004f5e <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8004f54:	4621      	mov	r1, r4
 8004f56:	2006      	movs	r0, #6
 8004f58:	f003 ff1e 	bl	8008d98 <memp_free>
      return err;
 8004f5c:	e7dd      	b.n	8004f1a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	b933      	cbnz	r3, 8004f70 <netconn_recv+0x70>
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <netconn_recv+0x94>)
 8004f64:	f240 3279 	movw	r2, #889	; 0x379
 8004f68:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <netconn_recv+0xa4>)
 8004f6a:	480c      	ldr	r0, [pc, #48]	; (8004f9c <netconn_recv+0x9c>)
 8004f6c:	f008 fb1c 	bl	800d5a8 <iprintf>
    buf->p = p;
 8004f70:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8004f72:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8004f7a:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8004f7c:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8004f7e:	e7cc      	b.n	8004f1a <netconn_recv+0x1a>
      return ERR_MEM;
 8004f80:	f04f 35ff 	mov.w	r5, #4294967295
 8004f84:	e7c9      	b.n	8004f1a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8004f86:	463a      	mov	r2, r7
}
 8004f88:	b003      	add	sp, #12
 8004f8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8004f8e:	f7ff bef7 	b.w	8004d80 <netconn_recv_data>
 8004f92:	bf00      	nop
 8004f94:	08018194 	.word	0x08018194
 8004f98:	0801845c 	.word	0x0801845c
 8004f9c:	08017fc5 	.word	0x08017fc5
 8004fa0:	0801847a 	.word	0x0801847a
 8004fa4:	08019ba6 	.word	0x08019ba6

08004fa8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8004fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fac:	4606      	mov	r6, r0
 8004fae:	4617      	mov	r7, r2
 8004fb0:	461d      	mov	r5, r3
 8004fb2:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	b929      	cbnz	r1, 8004fc6 <recv_udp+0x1e>
 8004fba:	4b25      	ldr	r3, [pc, #148]	; (8005050 <recv_udp+0xa8>)
 8004fbc:	22e5      	movs	r2, #229	; 0xe5
 8004fbe:	4925      	ldr	r1, [pc, #148]	; (8005054 <recv_udp+0xac>)
 8004fc0:	4825      	ldr	r0, [pc, #148]	; (8005058 <recv_udp+0xb0>)
 8004fc2:	f008 faf1 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004fc6:	b99e      	cbnz	r6, 8004ff0 <recv_udp+0x48>
 8004fc8:	4b21      	ldr	r3, [pc, #132]	; (8005050 <recv_udp+0xa8>)
 8004fca:	22e6      	movs	r2, #230	; 0xe6
 8004fcc:	4923      	ldr	r1, [pc, #140]	; (800505c <recv_udp+0xb4>)
 8004fce:	4822      	ldr	r0, [pc, #136]	; (8005058 <recv_udp+0xb0>)
 8004fd0:	f008 faea 	bl	800d5a8 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8004fd4:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8004fd6:	b003      	add	sp, #12
 8004fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8004fdc:	f004 b93c 	b.w	8009258 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004fe0:	6a33      	ldr	r3, [r6, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d031      	beq.n	800504a <recv_udp+0xa2>
 8004fe6:	4630      	mov	r0, r6
}
 8004fe8:	b003      	add	sp, #12
 8004fea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004fee:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004ff0:	6873      	ldr	r3, [r6, #4]
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	d005      	beq.n	8005002 <recv_udp+0x5a>
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <recv_udp+0xa8>)
 8004ff8:	22ee      	movs	r2, #238	; 0xee
 8004ffa:	4919      	ldr	r1, [pc, #100]	; (8005060 <recv_udp+0xb8>)
 8004ffc:	4816      	ldr	r0, [pc, #88]	; (8005058 <recv_udp+0xb0>)
 8004ffe:	f008 fad3 	bl	800d5a8 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005002:	f106 0910 	add.w	r9, r6, #16
 8005006:	4648      	mov	r0, r9
 8005008:	f008 f9b5 	bl	800d376 <sys_mbox_valid>
 800500c:	2800      	cmp	r0, #0
 800500e:	d0e1      	beq.n	8004fd4 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005010:	2006      	movs	r0, #6
 8005012:	f003 fe91 	bl	8008d38 <memp_malloc>
  if (buf == NULL) {
 8005016:	4604      	mov	r4, r0
 8005018:	2800      	cmp	r0, #0
 800501a:	d0db      	beq.n	8004fd4 <recv_udp+0x2c>
    buf->ptr = p;
 800501c:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005020:	b105      	cbz	r5, 8005024 <recv_udp+0x7c>
 8005022:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 8005024:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005026:	4621      	mov	r1, r4
 8005028:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 800502a:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 800502c:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005030:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005032:	f008 f963 	bl	800d2fc <sys_mbox_trypost>
 8005036:	9a01      	ldr	r2, [sp, #4]
 8005038:	4601      	mov	r1, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d0d0      	beq.n	8004fe0 <recv_udp+0x38>
    netbuf_delete(buf);
 800503e:	4620      	mov	r0, r4
}
 8005040:	b003      	add	sp, #12
 8005042:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 8005046:	f000 bf47 	b.w	8005ed8 <netbuf_delete>
}
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005050:	080184cb 	.word	0x080184cb
 8005054:	0801853b 	.word	0x0801853b
 8005058:	08017fc5 	.word	0x08017fc5
 800505c:	0801855d 	.word	0x0801855d
 8005060:	0801857c 	.word	0x0801857c

08005064 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005064:	b507      	push	{r0, r1, r2, lr}
 8005066:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005068:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 800506a:	9001      	str	r0, [sp, #4]
 800506c:	f004 fd3e 	bl	8009aec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8005070:	9801      	ldr	r0, [sp, #4]
 8005072:	4909      	ldr	r1, [pc, #36]	; (8005098 <setup_tcp+0x34>)
 8005074:	f004 fd3e 	bl	8009af4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005078:	9801      	ldr	r0, [sp, #4]
 800507a:	4908      	ldr	r1, [pc, #32]	; (800509c <setup_tcp+0x38>)
 800507c:	f004 fd52 	bl	8009b24 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005080:	9801      	ldr	r0, [sp, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <setup_tcp+0x3c>)
 8005086:	f004 fd81 	bl	8009b8c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800508a:	4906      	ldr	r1, [pc, #24]	; (80050a4 <setup_tcp+0x40>)
 800508c:	9801      	ldr	r0, [sp, #4]
}
 800508e:	b003      	add	sp, #12
 8005090:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8005094:	f004 bd5c 	b.w	8009b50 <tcp_err>
 8005098:	080055d1 	.word	0x080055d1
 800509c:	08005561 	.word	0x08005561
 80050a0:	080054e5 	.word	0x080054e5
 80050a4:	080056a1 	.word	0x080056a1

080050a8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80050a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80050ae:	4604      	mov	r4, r0
 80050b0:	b930      	cbnz	r0, 80050c0 <lwip_netconn_do_writemore+0x18>
 80050b2:	4b89      	ldr	r3, [pc, #548]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 80050b4:	f240 6273 	movw	r2, #1651	; 0x673
 80050b8:	4988      	ldr	r1, [pc, #544]	; (80052dc <lwip_netconn_do_writemore+0x234>)
 80050ba:	4889      	ldr	r0, [pc, #548]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 80050bc:	f008 fa74 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80050c0:	7863      	ldrb	r3, [r4, #1]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d006      	beq.n	80050d4 <lwip_netconn_do_writemore+0x2c>
 80050c6:	4b84      	ldr	r3, [pc, #528]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 80050c8:	f240 6274 	movw	r2, #1652	; 0x674
 80050cc:	4985      	ldr	r1, [pc, #532]	; (80052e4 <lwip_netconn_do_writemore+0x23c>)
 80050ce:	4884      	ldr	r0, [pc, #528]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 80050d0:	f008 fa6a 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80050d4:	69e3      	ldr	r3, [r4, #28]
 80050d6:	b933      	cbnz	r3, 80050e6 <lwip_netconn_do_writemore+0x3e>
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 80050da:	f240 6275 	movw	r2, #1653	; 0x675
 80050de:	4982      	ldr	r1, [pc, #520]	; (80052e8 <lwip_netconn_do_writemore+0x240>)
 80050e0:	487f      	ldr	r0, [pc, #508]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 80050e2:	f008 fa61 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	b933      	cbnz	r3, 80050f8 <lwip_netconn_do_writemore+0x50>
 80050ea:	4b7b      	ldr	r3, [pc, #492]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 80050ec:	f240 6276 	movw	r2, #1654	; 0x676
 80050f0:	497e      	ldr	r1, [pc, #504]	; (80052ec <lwip_netconn_do_writemore+0x244>)
 80050f2:	487b      	ldr	r0, [pc, #492]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 80050f4:	f008 fa58 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80050f8:	69e3      	ldr	r3, [r4, #28]
 80050fa:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d306      	bcc.n	8005110 <lwip_netconn_do_writemore+0x68>
 8005102:	4b75      	ldr	r3, [pc, #468]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 8005104:	f240 6277 	movw	r2, #1655	; 0x677
 8005108:	4979      	ldr	r1, [pc, #484]	; (80052f0 <lwip_netconn_do_writemore+0x248>)
 800510a:	4875      	ldr	r0, [pc, #468]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 800510c:	f008 fa4c 	bl	800d5a8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005110:	69e3      	ldr	r3, [r4, #28]
 8005112:	899b      	ldrh	r3, [r3, #12]
 8005114:	b933      	cbnz	r3, 8005124 <lwip_netconn_do_writemore+0x7c>
 8005116:	4b70      	ldr	r3, [pc, #448]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 8005118:	f240 6279 	movw	r2, #1657	; 0x679
 800511c:	4975      	ldr	r1, [pc, #468]	; (80052f4 <lwip_netconn_do_writemore+0x24c>)
 800511e:	4870      	ldr	r0, [pc, #448]	; (80052e0 <lwip_netconn_do_writemore+0x238>)
 8005120:	f008 fa42 	bl	800d5a8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8005124:	69e3      	ldr	r3, [r4, #28]
 8005126:	7e26      	ldrb	r6, [r4, #24]
 8005128:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800512c:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005130:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80052e0 <lwip_netconn_do_writemore+0x238>
 8005134:	f008 0304 	and.w	r3, r8, #4
 8005138:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800513a:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 800513c:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800513e:	688a      	ldr	r2, [r1, #8]
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005144:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005148:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800514c:	6850      	ldr	r0, [r2, #4]
 800514e:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8005152:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8005156:	bf2a      	itet	cs
 8005158:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 800515c:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005160:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8005164:	42aa      	cmp	r2, r5
 8005166:	d979      	bls.n	800525c <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8005168:	2e00      	cmp	r6, #0
 800516a:	d038      	beq.n	80051de <lwip_netconn_do_writemore+0x136>
          if (!len) {
 800516c:	2d00      	cmp	r5, #0
 800516e:	d138      	bne.n	80051e2 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005170:	698b      	ldr	r3, [r1, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	f06f 0a06 	mvneq.w	sl, #6
 800517a:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800517e:	69e3      	ldr	r3, [r4, #28]
 8005180:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d276      	bcs.n	8005276 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005188:	6a23      	ldr	r3, [r4, #32]
 800518a:	b11b      	cbz	r3, 8005194 <lwip_netconn_do_writemore+0xec>
 800518c:	2200      	movs	r2, #0
 800518e:	2103      	movs	r1, #3
 8005190:	4620      	mov	r0, r4
 8005192:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8005194:	7e23      	ldrb	r3, [r4, #24]
 8005196:	f043 0310 	orr.w	r3, r3, #16
 800519a:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800519c:	f1ba 0f00 	cmp.w	sl, #0
 80051a0:	d17e      	bne.n	80052a0 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80051a2:	69e3      	ldr	r3, [r4, #28]
 80051a4:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d077      	beq.n	800529c <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80051ac:	3e00      	subs	r6, #0
 80051ae:	bf18      	it	ne
 80051b0:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80051b2:	6860      	ldr	r0, [r4, #4]
 80051b4:	f007 f9f8 	bl	800c5a8 <tcp_output>
      if (out_err == ERR_RTE) {
 80051b8:	3004      	adds	r0, #4
 80051ba:	f040 8084 	bne.w	80052c6 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80051be:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80051c2:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 80051c4:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80051c6:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 80051c8:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 80051cc:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 80051ce:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	d07e      	beq.n	80052d2 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80051d4:	300c      	adds	r0, #12
 80051d6:	f008 f908 	bl	800d3ea <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 80051da:	4628      	mov	r0, r5
 80051dc:	e06b      	b.n	80052b6 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 80051de:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80051e2:	442b      	add	r3, r5
 80051e4:	4298      	cmp	r0, r3
 80051e6:	d206      	bcs.n	80051f6 <lwip_netconn_do_writemore+0x14e>
 80051e8:	4b3b      	ldr	r3, [pc, #236]	; (80052d8 <lwip_netconn_do_writemore+0x230>)
 80051ea:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80051ee:	4942      	ldr	r1, [pc, #264]	; (80052f8 <lwip_netconn_do_writemore+0x250>)
 80051f0:	4658      	mov	r0, fp
 80051f2:	f008 f9d9 	bl	800d5a8 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 80051f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051fa:	429d      	cmp	r5, r3
 80051fc:	d102      	bne.n	8005204 <lwip_netconn_do_writemore+0x15c>
 80051fe:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8005202:	d207      	bcs.n	8005214 <lwip_netconn_do_writemore+0x16c>
 8005204:	fa1f f989 	uxth.w	r9, r9
 8005208:	45a9      	cmp	r9, r5
 800520a:	d129      	bne.n	8005260 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800520c:	69e3      	ldr	r3, [r4, #28]
 800520e:	899b      	ldrh	r3, [r3, #12]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d925      	bls.n	8005260 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005214:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8005218:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800521c:	4651      	mov	r1, sl
 800521e:	4643      	mov	r3, r8
 8005220:	462a      	mov	r2, r5
 8005222:	6860      	ldr	r0, [r4, #4]
 8005224:	f006 fc62 	bl	800baec <tcp_write>
      if (err == ERR_OK) {
 8005228:	4682      	mov	sl, r0
 800522a:	b9e0      	cbnz	r0, 8005266 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 800522c:	69e3      	ldr	r3, [r4, #28]
 800522e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005230:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8005232:	442a      	add	r2, r5
 8005234:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800523a:	684a      	ldr	r2, [r1, #4]
 800523c:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 800523e:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005240:	d107      	bne.n	8005252 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 8005242:	899a      	ldrh	r2, [r3, #12]
 8005244:	3a01      	subs	r2, #1
 8005246:	b292      	uxth	r2, r2
 8005248:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800524a:	b112      	cbz	r2, 8005252 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 800524c:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800524e:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8005250:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	f47f af70 	bne.w	800513a <lwip_netconn_do_writemore+0x92>
 800525a:	e00a      	b.n	8005272 <lwip_netconn_do_writemore+0x1ca>
 800525c:	4615      	mov	r5, r2
 800525e:	e7c0      	b.n	80051e2 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8005260:	f04f 0900 	mov.w	r9, #0
 8005264:	e7da      	b.n	800521c <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d8a9      	bhi.n	80051c2 <lwip_netconn_do_writemore+0x11a>
err_mem:
 800526e:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005272:	2e00      	cmp	r6, #0
 8005274:	d183      	bne.n	800517e <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005276:	6863      	ldr	r3, [r4, #4]
 8005278:	f640 3269 	movw	r2, #2921	; 0xb69
 800527c:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8005280:	4291      	cmp	r1, r2
 8005282:	d903      	bls.n	800528c <lwip_netconn_do_writemore+0x1e4>
 8005284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005288:	2b04      	cmp	r3, #4
 800528a:	d987      	bls.n	800519c <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800528c:	6a23      	ldr	r3, [r4, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d084      	beq.n	800519c <lwip_netconn_do_writemore+0xf4>
 8005292:	2200      	movs	r2, #0
 8005294:	2103      	movs	r1, #3
 8005296:	4620      	mov	r0, r4
 8005298:	4798      	blx	r3
 800529a:	e77f      	b.n	800519c <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800529c:	2601      	movs	r6, #1
 800529e:	e788      	b.n	80051b2 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 80052a0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80052a4:	d18d      	bne.n	80051c2 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80052a6:	6860      	ldr	r0, [r4, #4]
 80052a8:	f007 f97e 	bl	800c5a8 <tcp_output>
      if (out_err == ERR_RTE) {
 80052ac:	3004      	adds	r0, #4
 80052ae:	d086      	beq.n	80051be <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 80052b0:	b91e      	cbnz	r6, 80052ba <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80052b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80052ba:	69e3      	ldr	r3, [r4, #28]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	b12b      	cbz	r3, 80052cc <lwip_netconn_do_writemore+0x224>
 80052c0:	f04f 0a00 	mov.w	sl, #0
 80052c4:	e77d      	b.n	80051c2 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	d1fa      	bne.n	80052c0 <lwip_netconn_do_writemore+0x218>
 80052ca:	e7f2      	b.n	80052b2 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80052cc:	f06f 0a06 	mvn.w	sl, #6
 80052d0:	e777      	b.n	80051c2 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 80052d2:	4638      	mov	r0, r7
 80052d4:	e7ef      	b.n	80052b6 <lwip_netconn_do_writemore+0x20e>
 80052d6:	bf00      	nop
 80052d8:	080184cb 	.word	0x080184cb
 80052dc:	08018613 	.word	0x08018613
 80052e0:	08017fc5 	.word	0x08017fc5
 80052e4:	08018620 	.word	0x08018620
 80052e8:	0801863d 	.word	0x0801863d
 80052ec:	08018657 	.word	0x08018657
 80052f0:	0801866d 	.word	0x0801866d
 80052f4:	080186ac 	.word	0x080186ac
 80052f8:	080186d4 	.word	0x080186d4

080052fc <lwip_netconn_do_close_internal>:
{
 80052fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8005302:	4604      	mov	r4, r0
 8005304:	b930      	cbnz	r0, 8005314 <lwip_netconn_do_close_internal+0x18>
 8005306:	4b6c      	ldr	r3, [pc, #432]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 8005308:	f240 32a2 	movw	r2, #930	; 0x3a2
 800530c:	496b      	ldr	r1, [pc, #428]	; (80054bc <lwip_netconn_do_close_internal+0x1c0>)
 800530e:	486c      	ldr	r0, [pc, #432]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 8005310:	f008 f94a 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8005314:	7823      	ldrb	r3, [r4, #0]
 8005316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800531a:	2b10      	cmp	r3, #16
 800531c:	d006      	beq.n	800532c <lwip_netconn_do_close_internal+0x30>
 800531e:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 8005320:	f240 32a3 	movw	r2, #931	; 0x3a3
 8005324:	4967      	ldr	r1, [pc, #412]	; (80054c4 <lwip_netconn_do_close_internal+0x1c8>)
 8005326:	4866      	ldr	r0, [pc, #408]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 8005328:	f008 f93e 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800532c:	7863      	ldrb	r3, [r4, #1]
 800532e:	2b04      	cmp	r3, #4
 8005330:	d006      	beq.n	8005340 <lwip_netconn_do_close_internal+0x44>
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 8005334:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8005338:	4963      	ldr	r1, [pc, #396]	; (80054c8 <lwip_netconn_do_close_internal+0x1cc>)
 800533a:	4861      	ldr	r0, [pc, #388]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 800533c:	f008 f934 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	b933      	cbnz	r3, 8005352 <lwip_netconn_do_close_internal+0x56>
 8005344:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 8005346:	f240 32a5 	movw	r2, #933	; 0x3a5
 800534a:	4960      	ldr	r1, [pc, #384]	; (80054cc <lwip_netconn_do_close_internal+0x1d0>)
 800534c:	485c      	ldr	r0, [pc, #368]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 800534e:	f008 f92b 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005352:	69e3      	ldr	r3, [r4, #28]
 8005354:	b933      	cbnz	r3, 8005364 <lwip_netconn_do_close_internal+0x68>
 8005356:	4b58      	ldr	r3, [pc, #352]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 8005358:	f240 32a6 	movw	r2, #934	; 0x3a6
 800535c:	495c      	ldr	r1, [pc, #368]	; (80054d0 <lwip_netconn_do_close_internal+0x1d4>)
 800535e:	4858      	ldr	r0, [pc, #352]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 8005360:	f008 f922 	bl	800d5a8 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8005364:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 8005366:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8005368:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 800536a:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800536c:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8005370:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8005374:	d00f      	beq.n	8005396 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8005376:	f1ba 0f00 	cmp.w	sl, #0
 800537a:	d005      	beq.n	8005388 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 800537c:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800537e:	1f5a      	subs	r2, r3, #5
 8005380:	2a01      	cmp	r2, #1
 8005382:	d908      	bls.n	8005396 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8005384:	2b08      	cmp	r3, #8
 8005386:	d006      	beq.n	8005396 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8005388:	f1b8 0f00 	cmp.w	r8, #0
 800538c:	d016      	beq.n	80053bc <lwip_netconn_do_close_internal+0xc0>
 800538e:	8b6f      	ldrh	r7, [r5, #26]
 8005390:	f017 0710 	ands.w	r7, r7, #16
 8005394:	d004      	beq.n	80053a0 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8005396:	2701      	movs	r7, #1
 8005398:	2100      	movs	r1, #0
 800539a:	4628      	mov	r0, r5
 800539c:	f004 fba6 	bl	8009aec <tcp_arg>
  if (tpcb->state == LISTEN) {
 80053a0:	7d2b      	ldrb	r3, [r5, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10c      	bne.n	80053c0 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 80053a6:	2100      	movs	r1, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	f004 fbe9 	bl	8009b80 <tcp_accept>
  if (shut_close) {
 80053ae:	bb27      	cbnz	r7, 80053fa <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80053b0:	4642      	mov	r2, r8
 80053b2:	4651      	mov	r1, sl
 80053b4:	4628      	mov	r0, r5
 80053b6:	f005 f807 	bl	800a3c8 <tcp_shutdown>
 80053ba:	e021      	b.n	8005400 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 80053bc:	4647      	mov	r7, r8
 80053be:	e7ef      	b.n	80053a0 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 80053c0:	f1ba 0f00 	cmp.w	sl, #0
 80053c4:	d007      	beq.n	80053d6 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 80053c6:	2100      	movs	r1, #0
 80053c8:	4628      	mov	r0, r5
 80053ca:	f004 fb93 	bl	8009af4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80053ce:	2100      	movs	r1, #0
 80053d0:	4628      	mov	r0, r5
 80053d2:	f004 fbd5 	bl	8009b80 <tcp_accept>
    if (shut_tx) {
 80053d6:	f1b8 0f00 	cmp.w	r8, #0
 80053da:	d003      	beq.n	80053e4 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 80053dc:	2100      	movs	r1, #0
 80053de:	4628      	mov	r0, r5
 80053e0:	f004 fba0 	bl	8009b24 <tcp_sent>
    if (shut_close) {
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	d0e3      	beq.n	80053b0 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 80053e8:	2200      	movs	r2, #0
 80053ea:	4628      	mov	r0, r5
 80053ec:	4611      	mov	r1, r2
 80053ee:	f004 fbcd 	bl	8009b8c <tcp_poll>
      tcp_err(tpcb, NULL);
 80053f2:	2100      	movs	r1, #0
 80053f4:	4628      	mov	r0, r5
 80053f6:	f004 fbab 	bl	8009b50 <tcp_err>
      err = tcp_close(tpcb);
 80053fa:	4628      	mov	r0, r5
 80053fc:	f004 ff16 	bl	800a22c <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005400:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8005402:	b160      	cbz	r0, 800541e <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d10a      	bne.n	800541e <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005408:	69e3      	ldr	r3, [r4, #28]
 800540a:	f893 b009 	ldrb.w	fp, [r3, #9]
 800540e:	f1bb 0f00 	cmp.w	fp, #0
 8005412:	d130      	bne.n	8005476 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8005414:	b11f      	cbz	r7, 800541e <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 8005416:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8005418:	4628      	mov	r0, r5
 800541a:	f005 f88b 	bl	800a534 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800541e:	69e3      	ldr	r3, [r4, #28]
 8005420:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8005422:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8005428:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800542a:	b9ce      	cbnz	r6, 8005460 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 800542c:	b137      	cbz	r7, 800543c <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800542e:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8005430:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005432:	b11b      	cbz	r3, 800543c <lwip_netconn_do_close_internal+0x140>
 8005434:	4632      	mov	r2, r6
 8005436:	2104      	movs	r1, #4
 8005438:	4620      	mov	r0, r4
 800543a:	4798      	blx	r3
      if (shut_rx) {
 800543c:	f1ba 0f00 	cmp.w	sl, #0
 8005440:	d005      	beq.n	800544e <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005442:	6a23      	ldr	r3, [r4, #32]
 8005444:	b11b      	cbz	r3, 800544e <lwip_netconn_do_close_internal+0x152>
 8005446:	2200      	movs	r2, #0
 8005448:	4620      	mov	r0, r4
 800544a:	4611      	mov	r1, r2
 800544c:	4798      	blx	r3
      if (shut_tx) {
 800544e:	f1b8 0f00 	cmp.w	r8, #0
 8005452:	d005      	beq.n	8005460 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005454:	6a23      	ldr	r3, [r4, #32]
 8005456:	b11b      	cbz	r3, 8005460 <lwip_netconn_do_close_internal+0x164>
 8005458:	2200      	movs	r2, #0
 800545a:	2102      	movs	r1, #2
 800545c:	4620      	mov	r0, r4
 800545e:	4798      	blx	r3
    if (delayed)
 8005460:	f1b9 0f00 	cmp.w	r9, #0
 8005464:	d026      	beq.n	80054b4 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 8005466:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 8005468:	f105 000c 	add.w	r0, r5, #12
 800546c:	f007 ffbd 	bl	800d3ea <sys_sem_signal>
}
 8005470:	4630      	mov	r0, r6
 8005472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8005476:	7d2b      	ldrb	r3, [r5, #20]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d106      	bne.n	800548a <lwip_netconn_do_close_internal+0x18e>
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <lwip_netconn_do_close_internal+0x1bc>)
 800547e:	f240 4241 	movw	r2, #1089	; 0x441
 8005482:	4914      	ldr	r1, [pc, #80]	; (80054d4 <lwip_netconn_do_close_internal+0x1d8>)
 8005484:	480e      	ldr	r0, [pc, #56]	; (80054c0 <lwip_netconn_do_close_internal+0x1c4>)
 8005486:	f008 f88f 	bl	800d5a8 <iprintf>
    if (shut_tx) {
 800548a:	f1b8 0f00 	cmp.w	r8, #0
 800548e:	d003      	beq.n	8005498 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8005490:	4911      	ldr	r1, [pc, #68]	; (80054d8 <lwip_netconn_do_close_internal+0x1dc>)
 8005492:	4628      	mov	r0, r5
 8005494:	f004 fb46 	bl	8009b24 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8005498:	2201      	movs	r2, #1
 800549a:	4628      	mov	r0, r5
 800549c:	490f      	ldr	r1, [pc, #60]	; (80054dc <lwip_netconn_do_close_internal+0x1e0>)
 800549e:	f004 fb75 	bl	8009b8c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80054a2:	4628      	mov	r0, r5
 80054a4:	490e      	ldr	r1, [pc, #56]	; (80054e0 <lwip_netconn_do_close_internal+0x1e4>)
 80054a6:	f004 fb53 	bl	8009b50 <tcp_err>
    tcp_arg(tpcb, conn);
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f004 fb1d 	bl	8009aec <tcp_arg>
  return err;
 80054b2:	e7dd      	b.n	8005470 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 80054b4:	464e      	mov	r6, r9
 80054b6:	e7db      	b.n	8005470 <lwip_netconn_do_close_internal+0x174>
 80054b8:	080184cb 	.word	0x080184cb
 80054bc:	080183b1 	.word	0x080183b1
 80054c0:	08017fc5 	.word	0x08017fc5
 80054c4:	080186ff 	.word	0x080186ff
 80054c8:	0801871d 	.word	0x0801871d
 80054cc:	08018741 	.word	0x08018741
 80054d0:	0801863d 	.word	0x0801863d
 80054d4:	08018754 	.word	0x08018754
 80054d8:	08005561 	.word	0x08005561
 80054dc:	080054e5 	.word	0x080054e5
 80054e0:	080056a1 	.word	0x080056a1

080054e4 <poll_tcp>:
{
 80054e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80054e6:	4604      	mov	r4, r0
 80054e8:	b930      	cbnz	r0, 80054f8 <poll_tcp+0x14>
 80054ea:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <poll_tcp+0x70>)
 80054ec:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80054f0:	4919      	ldr	r1, [pc, #100]	; (8005558 <poll_tcp+0x74>)
 80054f2:	481a      	ldr	r0, [pc, #104]	; (800555c <poll_tcp+0x78>)
 80054f4:	f008 f858 	bl	800d5a8 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 80054f8:	7861      	ldrb	r1, [r4, #1]
 80054fa:	2901      	cmp	r1, #1
 80054fc:	d11c      	bne.n	8005538 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fdd2 	bl	80050a8 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8005504:	7e23      	ldrb	r3, [r4, #24]
 8005506:	06da      	lsls	r2, r3, #27
 8005508:	d514      	bpl.n	8005534 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	b192      	cbz	r2, 8005534 <poll_tcp+0x50>
 800550e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8005512:	f640 3169 	movw	r1, #2921	; 0xb69
 8005516:	4288      	cmp	r0, r1
 8005518:	d90c      	bls.n	8005534 <poll_tcp+0x50>
 800551a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800551e:	2a04      	cmp	r2, #4
 8005520:	d808      	bhi.n	8005534 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005522:	f023 0310 	bic.w	r3, r3, #16
 8005526:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005528:	6a23      	ldr	r3, [r4, #32]
 800552a:	b11b      	cbz	r3, 8005534 <poll_tcp+0x50>
 800552c:	2200      	movs	r2, #0
 800552e:	2102      	movs	r1, #2
 8005530:	4620      	mov	r0, r4
 8005532:	4798      	blx	r3
}
 8005534:	2000      	movs	r0, #0
 8005536:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8005538:	2904      	cmp	r1, #4
 800553a:	d1e3      	bne.n	8005504 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800553c:	69e2      	ldr	r2, [r4, #28]
 800553e:	b11a      	cbz	r2, 8005548 <poll_tcp+0x64>
 8005540:	7a53      	ldrb	r3, [r2, #9]
 8005542:	b10b      	cbz	r3, 8005548 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8005544:	3b01      	subs	r3, #1
 8005546:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005548:	2101      	movs	r1, #1
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fed6 	bl	80052fc <lwip_netconn_do_close_internal>
 8005550:	e7d8      	b.n	8005504 <poll_tcp+0x20>
 8005552:	bf00      	nop
 8005554:	080184cb 	.word	0x080184cb
 8005558:	08018613 	.word	0x08018613
 800555c:	08017fc5 	.word	0x08017fc5

08005560 <sent_tcp>:
{
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005564:	4604      	mov	r4, r0
 8005566:	b970      	cbnz	r0, 8005586 <sent_tcp+0x26>
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <sent_tcp+0x64>)
 800556a:	f240 1293 	movw	r2, #403	; 0x193
 800556e:	4916      	ldr	r1, [pc, #88]	; (80055c8 <sent_tcp+0x68>)
 8005570:	4816      	ldr	r0, [pc, #88]	; (80055cc <sent_tcp+0x6c>)
 8005572:	f008 f819 	bl	800d5a8 <iprintf>
}
 8005576:	2000      	movs	r0, #0
 8005578:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 800557a:	2904      	cmp	r1, #4
 800557c:	d108      	bne.n	8005590 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800557e:	2101      	movs	r1, #1
 8005580:	f7ff febc 	bl	80052fc <lwip_netconn_do_close_internal>
 8005584:	e004      	b.n	8005590 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8005586:	7841      	ldrb	r1, [r0, #1]
 8005588:	2901      	cmp	r1, #1
 800558a:	d1f6      	bne.n	800557a <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800558c:	f7ff fd8c 	bl	80050a8 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0ef      	beq.n	8005576 <sent_tcp+0x16>
 8005596:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800559a:	f640 3269 	movw	r2, #2921	; 0xb69
 800559e:	4291      	cmp	r1, r2
 80055a0:	d9e9      	bls.n	8005576 <sent_tcp+0x16>
 80055a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d8e5      	bhi.n	8005576 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80055aa:	7e23      	ldrb	r3, [r4, #24]
 80055ac:	f023 0310 	bic.w	r3, r3, #16
 80055b0:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80055b2:	6a23      	ldr	r3, [r4, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0de      	beq.n	8005576 <sent_tcp+0x16>
 80055b8:	462a      	mov	r2, r5
 80055ba:	2102      	movs	r1, #2
 80055bc:	4620      	mov	r0, r4
 80055be:	4798      	blx	r3
  return ERR_OK;
 80055c0:	e7d9      	b.n	8005576 <sent_tcp+0x16>
 80055c2:	bf00      	nop
 80055c4:	080184cb 	.word	0x080184cb
 80055c8:	08018613 	.word	0x08018613
 80055cc:	08017fc5 	.word	0x08017fc5

080055d0 <recv_tcp>:
{
 80055d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d4:	4606      	mov	r6, r0
 80055d6:	4615      	mov	r5, r2
 80055d8:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80055da:	460f      	mov	r7, r1
 80055dc:	b931      	cbnz	r1, 80055ec <recv_tcp+0x1c>
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <recv_tcp+0xb4>)
 80055e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055e4:	4928      	ldr	r1, [pc, #160]	; (8005688 <recv_tcp+0xb8>)
 80055e6:	4829      	ldr	r0, [pc, #164]	; (800568c <recv_tcp+0xbc>)
 80055e8:	f007 ffde 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80055ec:	bb4e      	cbnz	r6, 8005642 <recv_tcp+0x72>
 80055ee:	4b25      	ldr	r3, [pc, #148]	; (8005684 <recv_tcp+0xb4>)
 80055f0:	f240 122d 	movw	r2, #301	; 0x12d
 80055f4:	4926      	ldr	r1, [pc, #152]	; (8005690 <recv_tcp+0xc0>)
 80055f6:	4825      	ldr	r0, [pc, #148]	; (800568c <recv_tcp+0xbc>)
 80055f8:	f007 ffd6 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80055fc:	bb14      	cbnz	r4, 8005644 <recv_tcp+0x74>
    return ERR_VAL;
 80055fe:	f06f 0405 	mvn.w	r4, #5
}
 8005602:	4620      	mov	r0, r4
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8005608:	4638      	mov	r0, r7
 800560a:	8929      	ldrh	r1, [r5, #8]
 800560c:	f004 fa1a 	bl	8009a44 <tcp_recved>
      pbuf_free(p);
 8005610:	4628      	mov	r0, r5
 8005612:	f003 fe21 	bl	8009258 <pbuf_free>
 8005616:	e7f4      	b.n	8005602 <recv_tcp+0x32>
  if (p != NULL) {
 8005618:	b16d      	cbz	r5, 8005636 <recv_tcp+0x66>
    len = p->tot_len;
 800561a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800561c:	4629      	mov	r1, r5
 800561e:	4640      	mov	r0, r8
 8005620:	f007 fe6c 	bl	800d2fc <sys_mbox_trypost>
 8005624:	4604      	mov	r4, r0
 8005626:	b948      	cbnz	r0, 800563c <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005628:	6a33      	ldr	r3, [r6, #32]
 800562a:	b343      	cbz	r3, 800567e <recv_tcp+0xae>
 800562c:	4601      	mov	r1, r0
 800562e:	463a      	mov	r2, r7
 8005630:	4630      	mov	r0, r6
 8005632:	4798      	blx	r3
 8005634:	e7e5      	b.n	8005602 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8005636:	4d17      	ldr	r5, [pc, #92]	; (8005694 <recv_tcp+0xc4>)
    len = 0;
 8005638:	2700      	movs	r7, #0
 800563a:	e7ef      	b.n	800561c <recv_tcp+0x4c>
    return ERR_MEM;
 800563c:	f04f 34ff 	mov.w	r4, #4294967295
 8005640:	e7df      	b.n	8005602 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005642:	b144      	cbz	r4, 8005656 <recv_tcp+0x86>
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <recv_tcp+0xb4>)
 8005646:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800564a:	4913      	ldr	r1, [pc, #76]	; (8005698 <recv_tcp+0xc8>)
 800564c:	480f      	ldr	r0, [pc, #60]	; (800568c <recv_tcp+0xbc>)
 800564e:	f007 ffab 	bl	800d5a8 <iprintf>
  if (conn == NULL) {
 8005652:	2e00      	cmp	r6, #0
 8005654:	d0d3      	beq.n	80055fe <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005656:	6873      	ldr	r3, [r6, #4]
 8005658:	42bb      	cmp	r3, r7
 800565a:	d006      	beq.n	800566a <recv_tcp+0x9a>
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <recv_tcp+0xb4>)
 800565e:	f240 1235 	movw	r2, #309	; 0x135
 8005662:	490e      	ldr	r1, [pc, #56]	; (800569c <recv_tcp+0xcc>)
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <recv_tcp+0xbc>)
 8005666:	f007 ff9f 	bl	800d5a8 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800566a:	f106 0810 	add.w	r8, r6, #16
 800566e:	4640      	mov	r0, r8
 8005670:	f007 fe81 	bl	800d376 <sys_mbox_valid>
 8005674:	4604      	mov	r4, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d1ce      	bne.n	8005618 <recv_tcp+0x48>
    if (p != NULL) {
 800567a:	2d00      	cmp	r5, #0
 800567c:	d1c4      	bne.n	8005608 <recv_tcp+0x38>
    return ERR_OK;
 800567e:	2400      	movs	r4, #0
 8005680:	e7bf      	b.n	8005602 <recv_tcp+0x32>
 8005682:	bf00      	nop
 8005684:	080184cb 	.word	0x080184cb
 8005688:	08018777 	.word	0x08018777
 800568c:	08017fc5 	.word	0x08017fc5
 8005690:	08018799 	.word	0x08018799
 8005694:	0800f118 	.word	0x0800f118
 8005698:	080187b8 	.word	0x080187b8
 800569c:	080187d0 	.word	0x080187d0

080056a0 <err_tcp>:
{
 80056a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80056a6:	4604      	mov	r4, r0
 80056a8:	b930      	cbnz	r0, 80056b8 <err_tcp+0x18>
 80056aa:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <err_tcp+0x120>)
 80056ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80056b0:	4944      	ldr	r1, [pc, #272]	; (80057c4 <err_tcp+0x124>)
 80056b2:	4845      	ldr	r0, [pc, #276]	; (80057c8 <err_tcp+0x128>)
 80056b4:	f007 ff78 	bl	800d5a8 <iprintf>
  SYS_ARCH_PROTECT(lev);
 80056b8:	f007 fed8 	bl	800d46c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80056bc:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 80056be:	2600      	movs	r6, #0
  old_state = conn->state;
 80056c0:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80056c2:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 80056c6:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 80056c8:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80056ca:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 80056cc:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80056ce:	f007 fed9 	bl	800d484 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80056d2:	6a23      	ldr	r3, [r4, #32]
 80056d4:	b11b      	cbz	r3, 80056de <err_tcp+0x3e>
 80056d6:	4632      	mov	r2, r6
 80056d8:	2104      	movs	r1, #4
 80056da:	4620      	mov	r0, r4
 80056dc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80056de:	6a23      	ldr	r3, [r4, #32]
 80056e0:	b11b      	cbz	r3, 80056ea <err_tcp+0x4a>
 80056e2:	2200      	movs	r2, #0
 80056e4:	4620      	mov	r0, r4
 80056e6:	4611      	mov	r1, r2
 80056e8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80056ea:	6a23      	ldr	r3, [r4, #32]
 80056ec:	b11b      	cbz	r3, 80056f6 <err_tcp+0x56>
 80056ee:	2200      	movs	r2, #0
 80056f0:	2102      	movs	r1, #2
 80056f2:	4620      	mov	r0, r4
 80056f4:	4798      	blx	r3
  switch (err) {
 80056f6:	f105 030f 	add.w	r3, r5, #15
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d846      	bhi.n	800578e <err_tcp+0xee>
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <err_tcp+0x12c>)
 8005702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005706:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005708:	f104 0810 	add.w	r8, r4, #16
 800570c:	4640      	mov	r0, r8
 800570e:	f007 fe32 	bl	800d376 <sys_mbox_valid>
 8005712:	b118      	cbz	r0, 800571c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8005714:	4631      	mov	r1, r6
 8005716:	4640      	mov	r0, r8
 8005718:	f007 fdf0 	bl	800d2fc <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800571c:	f104 0814 	add.w	r8, r4, #20
 8005720:	4640      	mov	r0, r8
 8005722:	f007 fe28 	bl	800d376 <sys_mbox_valid>
 8005726:	b118      	cbz	r0, 8005730 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8005728:	4631      	mov	r1, r6
 800572a:	4640      	mov	r0, r8
 800572c:	f007 fde6 	bl	800d2fc <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005730:	2f01      	cmp	r7, #1
 8005732:	d002      	beq.n	800573a <err_tcp+0x9a>
 8005734:	1efb      	subs	r3, r7, #3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d834      	bhi.n	80057a4 <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800573a:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800573c:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005740:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005742:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8005744:	d439      	bmi.n	80057ba <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005746:	69e3      	ldr	r3, [r4, #28]
 8005748:	b933      	cbnz	r3, 8005758 <err_tcp+0xb8>
 800574a:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <err_tcp+0x120>)
 800574c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005750:	491f      	ldr	r1, [pc, #124]	; (80057d0 <err_tcp+0x130>)
 8005752:	481d      	ldr	r0, [pc, #116]	; (80057c8 <err_tcp+0x128>)
 8005754:	f007 ff28 	bl	800d5a8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8005758:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 800575a:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 800575c:	bf14      	ite	ne
 800575e:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 8005760:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005762:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8005764:	bf08      	it	eq
 8005766:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005768:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800576a:	4628      	mov	r0, r5
 800576c:	f007 fe43 	bl	800d3f6 <sys_sem_valid>
 8005770:	b930      	cbnz	r0, 8005780 <err_tcp+0xe0>
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <err_tcp+0x120>)
 8005774:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005778:	4916      	ldr	r1, [pc, #88]	; (80057d4 <err_tcp+0x134>)
 800577a:	4813      	ldr	r0, [pc, #76]	; (80057c8 <err_tcp+0x128>)
 800577c:	f007 ff14 	bl	800d5a8 <iprintf>
      conn->current_msg = NULL;
 8005780:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8005782:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8005784:	61e3      	str	r3, [r4, #28]
}
 8005786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800578a:	f007 be2e 	b.w	800d3ea <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800578e:	b13d      	cbz	r5, 80057a0 <err_tcp+0x100>
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <err_tcp+0x120>)
 8005792:	227d      	movs	r2, #125	; 0x7d
 8005794:	4910      	ldr	r1, [pc, #64]	; (80057d8 <err_tcp+0x138>)
 8005796:	2600      	movs	r6, #0
 8005798:	480b      	ldr	r0, [pc, #44]	; (80057c8 <err_tcp+0x128>)
 800579a:	f007 ff05 	bl	800d5a8 <iprintf>
 800579e:	e7b3      	b.n	8005708 <err_tcp+0x68>
      return NULL;
 80057a0:	462e      	mov	r6, r5
 80057a2:	e7b1      	b.n	8005708 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80057a4:	69e3      	ldr	r3, [r4, #28]
 80057a6:	b143      	cbz	r3, 80057ba <err_tcp+0x11a>
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <err_tcp+0x120>)
 80057aa:	f240 12f7 	movw	r2, #503	; 0x1f7
 80057ae:	490b      	ldr	r1, [pc, #44]	; (80057dc <err_tcp+0x13c>)
 80057b0:	4805      	ldr	r0, [pc, #20]	; (80057c8 <err_tcp+0x128>)
}
 80057b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80057b6:	f007 bef7 	b.w	800d5a8 <iprintf>
}
 80057ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057be:	bf00      	nop
 80057c0:	080184cb 	.word	0x080184cb
 80057c4:	08018613 	.word	0x08018613
 80057c8:	08017fc5 	.word	0x08017fc5
 80057cc:	0800f118 	.word	0x0800f118
 80057d0:	0801863d 	.word	0x0801863d
 80057d4:	080187fe 	.word	0x080187fe
 80057d8:	080187ee 	.word	0x080187ee
 80057dc:	08018817 	.word	0x08018817

080057e0 <lwip_netconn_is_err_msg>:
{
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 80057e4:	460c      	mov	r4, r1
 80057e6:	b929      	cbnz	r1, 80057f4 <lwip_netconn_is_err_msg+0x14>
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <lwip_netconn_is_err_msg+0x40>)
 80057ea:	2285      	movs	r2, #133	; 0x85
 80057ec:	490d      	ldr	r1, [pc, #52]	; (8005824 <lwip_netconn_is_err_msg+0x44>)
 80057ee:	480e      	ldr	r0, [pc, #56]	; (8005828 <lwip_netconn_is_err_msg+0x48>)
 80057f0:	f007 feda 	bl	800d5a8 <iprintf>
  if (msg == &netconn_aborted) {
 80057f4:	4b0d      	ldr	r3, [pc, #52]	; (800582c <lwip_netconn_is_err_msg+0x4c>)
 80057f6:	f103 0210 	add.w	r2, r3, #16
 80057fa:	4295      	cmp	r5, r2
 80057fc:	d103      	bne.n	8005806 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 80057fe:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8005800:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8005802:	7023      	strb	r3, [r4, #0]
}
 8005804:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8005806:	f103 0211 	add.w	r2, r3, #17
 800580a:	4295      	cmp	r5, r2
 800580c:	d101      	bne.n	8005812 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 800580e:	23f2      	movs	r3, #242	; 0xf2
 8005810:	e7f6      	b.n	8005800 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8005812:	429d      	cmp	r5, r3
 8005814:	d101      	bne.n	800581a <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8005816:	23f1      	movs	r3, #241	; 0xf1
 8005818:	e7f2      	b.n	8005800 <lwip_netconn_is_err_msg+0x20>
  return 0;
 800581a:	2000      	movs	r0, #0
 800581c:	e7f2      	b.n	8005804 <lwip_netconn_is_err_msg+0x24>
 800581e:	bf00      	nop
 8005820:	080184cb 	.word	0x080184cb
 8005824:	08018831 	.word	0x08018831
 8005828:	08017fc5 	.word	0x08017fc5
 800582c:	0800f118 	.word	0x0800f118

08005830 <lwip_netconn_do_newconn>:
{
 8005830:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8005832:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8005834:	6805      	ldr	r5, [r0, #0]
{
 8005836:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005838:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800583a:	6868      	ldr	r0, [r5, #4]
 800583c:	bb28      	cbnz	r0, 800588a <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800583e:	782b      	ldrb	r3, [r5, #0]
 8005840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005844:	2b10      	cmp	r3, #16
 8005846:	d014      	beq.n	8005872 <lwip_netconn_do_newconn+0x42>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d11c      	bne.n	8005886 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800584c:	f007 fc9c 	bl	800d188 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8005850:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005852:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8005854:	6850      	ldr	r0, [r2, #4]
 8005856:	b150      	cbz	r0, 800586e <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005858:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800585a:	490c      	ldr	r1, [pc, #48]	; (800588c <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800585c:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800585e:	bf04      	itt	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005864:	f007 fc4a 	bl	800d0fc <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	b96b      	cbnz	r3, 800588a <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800586e:	23ff      	movs	r3, #255	; 0xff
 8005870:	e00a      	b.n	8005888 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8005872:	f004 ff43 	bl	800a6fc <tcp_new_ip_type>
 8005876:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	6843      	ldr	r3, [r0, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f6      	beq.n	800586e <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8005880:	f7ff fbf0 	bl	8005064 <setup_tcp>
 8005884:	e7f0      	b.n	8005868 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8005886:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005888:	7123      	strb	r3, [r4, #4]
}
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	08004fa9 	.word	0x08004fa9

08005890 <netconn_alloc>:
{
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005894:	2007      	movs	r0, #7
{
 8005896:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005898:	f003 fa4e 	bl	8008d38 <memp_malloc>
  if (conn == NULL) {
 800589c:	4604      	mov	r4, r0
 800589e:	b388      	cbz	r0, 8005904 <netconn_alloc+0x74>
  conn->type = t;
 80058a0:	7005      	strb	r5, [r0, #0]
 80058a2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 80058a6:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 80058a8:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 80058aa:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80058ac:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 80058ae:	d00e      	beq.n	80058ce <netconn_alloc+0x3e>
 80058b0:	2d20      	cmp	r5, #32
 80058b2:	d00c      	beq.n	80058ce <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <netconn_alloc+0x78>)
 80058b6:	f240 22e5 	movw	r2, #741	; 0x2e5
 80058ba:	4914      	ldr	r1, [pc, #80]	; (800590c <netconn_alloc+0x7c>)
 80058bc:	4814      	ldr	r0, [pc, #80]	; (8005910 <netconn_alloc+0x80>)
 80058be:	f007 fe73 	bl	800d5a8 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80058c2:	4621      	mov	r1, r4
 80058c4:	2007      	movs	r0, #7
  return NULL;
 80058c6:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 80058c8:	f003 fa66 	bl	8008d98 <memp_free>
  return NULL;
 80058cc:	e01a      	b.n	8005904 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80058ce:	f104 0710 	add.w	r7, r4, #16
 80058d2:	2106      	movs	r1, #6
 80058d4:	4638      	mov	r0, r7
 80058d6:	f007 fcf7 	bl	800d2c8 <sys_mbox_new>
 80058da:	4601      	mov	r1, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	d1f0      	bne.n	80058c2 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80058e0:	f104 000c 	add.w	r0, r4, #12
 80058e4:	f007 fd4f 	bl	800d386 <sys_sem_new>
 80058e8:	4605      	mov	r5, r0
 80058ea:	b118      	cbz	r0, 80058f4 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80058ec:	4638      	mov	r0, r7
 80058ee:	f007 fcfb 	bl	800d2e8 <sys_mbox_free>
    goto free_and_return;
 80058f2:	e7e6      	b.n	80058c2 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80058f4:	f104 0014 	add.w	r0, r4, #20
 80058f8:	f007 fd42 	bl	800d380 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 80058fc:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 80058fe:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8005900:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8005904:	4620      	mov	r0, r4
 8005906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005908:	080184cb 	.word	0x080184cb
 800590c:	0801883d 	.word	0x0801883d
 8005910:	08017fc5 	.word	0x08017fc5

08005914 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005914:	6843      	ldr	r3, [r0, #4]
{
 8005916:	b513      	push	{r0, r1, r4, lr}
 8005918:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800591a:	b133      	cbz	r3, 800592a <netconn_free+0x16>
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <netconn_free+0x64>)
 800591e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005922:	4916      	ldr	r1, [pc, #88]	; (800597c <netconn_free+0x68>)
 8005924:	4816      	ldr	r0, [pc, #88]	; (8005980 <netconn_free+0x6c>)
 8005926:	f007 fe3f 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800592a:	f104 0010 	add.w	r0, r4, #16
 800592e:	f007 fd22 	bl	800d376 <sys_mbox_valid>
 8005932:	b130      	cbz	r0, 8005942 <netconn_free+0x2e>
 8005934:	4b10      	ldr	r3, [pc, #64]	; (8005978 <netconn_free+0x64>)
 8005936:	f240 3223 	movw	r2, #803	; 0x323
 800593a:	4912      	ldr	r1, [pc, #72]	; (8005984 <netconn_free+0x70>)
 800593c:	4810      	ldr	r0, [pc, #64]	; (8005980 <netconn_free+0x6c>)
 800593e:	f007 fe33 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005942:	f104 0014 	add.w	r0, r4, #20
 8005946:	f007 fd16 	bl	800d376 <sys_mbox_valid>
 800594a:	b130      	cbz	r0, 800595a <netconn_free+0x46>
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <netconn_free+0x64>)
 800594e:	f240 3226 	movw	r2, #806	; 0x326
 8005952:	490d      	ldr	r1, [pc, #52]	; (8005988 <netconn_free+0x74>)
 8005954:	480a      	ldr	r0, [pc, #40]	; (8005980 <netconn_free+0x6c>)
 8005956:	f007 fe27 	bl	800d5a8 <iprintf>
  sys_sem_free(&conn->op_completed);
 800595a:	f104 000c 	add.w	r0, r4, #12
 800595e:	9001      	str	r0, [sp, #4]
 8005960:	f007 fd46 	bl	800d3f0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005964:	9801      	ldr	r0, [sp, #4]
 8005966:	f007 fd4b 	bl	800d400 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800596a:	4621      	mov	r1, r4
 800596c:	2007      	movs	r0, #7
}
 800596e:	b002      	add	sp, #8
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8005974:	f003 ba10 	b.w	8008d98 <memp_free>
 8005978:	080184cb 	.word	0x080184cb
 800597c:	08018863 	.word	0x08018863
 8005980:	08017fc5 	.word	0x08017fc5
 8005984:	08018891 	.word	0x08018891
 8005988:	080188cb 	.word	0x080188cb

0800598c <netconn_drain>:
{
 800598c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800598e:	f100 0510 	add.w	r5, r0, #16
{
 8005992:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005994:	4628      	mov	r0, r5
 8005996:	f007 fcee 	bl	800d376 <sys_mbox_valid>
 800599a:	b158      	cbz	r0, 80059b4 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800599c:	a901      	add	r1, sp, #4
 800599e:	4628      	mov	r0, r5
 80059a0:	f007 fcd8 	bl	800d354 <sys_arch_mbox_tryfetch>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d118      	bne.n	80059da <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 80059a8:	4628      	mov	r0, r5
 80059aa:	f007 fc9d 	bl	800d2e8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80059ae:	4628      	mov	r0, r5
 80059b0:	f007 fce6 	bl	800d380 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80059b4:	3414      	adds	r4, #20
 80059b6:	4620      	mov	r0, r4
 80059b8:	f007 fcdd 	bl	800d376 <sys_mbox_valid>
 80059bc:	b158      	cbz	r0, 80059d6 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80059be:	a901      	add	r1, sp, #4
 80059c0:	4620      	mov	r0, r4
 80059c2:	f007 fcc7 	bl	800d354 <sys_arch_mbox_tryfetch>
 80059c6:	3001      	adds	r0, #1
 80059c8:	d11a      	bne.n	8005a00 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 80059ca:	4620      	mov	r0, r4
 80059cc:	f007 fc8c 	bl	800d2e8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80059d0:	4620      	mov	r0, r4
 80059d2:	f007 fcd5 	bl	800d380 <sys_mbox_set_invalid>
}
 80059d6:	b002      	add	sp, #8
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80059da:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80059dc:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d109      	bne.n	80059fa <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80059e6:	f10d 0103 	add.w	r1, sp, #3
 80059ea:	f7ff fef9 	bl	80057e0 <lwip_netconn_is_err_msg>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d1d4      	bne.n	800599c <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 80059f2:	9801      	ldr	r0, [sp, #4]
 80059f4:	f003 fc30 	bl	8009258 <pbuf_free>
 80059f8:	e7d0      	b.n	800599c <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 80059fa:	f000 fa6d 	bl	8005ed8 <netbuf_delete>
 80059fe:	e7cd      	b.n	800599c <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005a00:	f10d 0103 	add.w	r1, sp, #3
 8005a04:	9801      	ldr	r0, [sp, #4]
 8005a06:	f7ff feeb 	bl	80057e0 <lwip_netconn_is_err_msg>
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d1d6      	bne.n	80059be <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8005a10:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff ffba 	bl	800598c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8005a18:	6868      	ldr	r0, [r5, #4]
 8005a1a:	b110      	cbz	r0, 8005a22 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8005a1c:	f004 fd8a 	bl	800a534 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005a20:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff ff76 	bl	8005914 <netconn_free>
 8005a28:	e7c9      	b.n	80059be <netconn_drain+0x32>
	...

08005a2c <accept_function>:
{
 8005a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4616      	mov	r6, r2
  if (conn == NULL) {
 8005a32:	4605      	mov	r5, r0
 8005a34:	b920      	cbnz	r0, 8005a40 <accept_function+0x14>
    return ERR_VAL;
 8005a36:	f06f 0405 	mvn.w	r4, #5
}
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	b003      	add	sp, #12
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005a40:	f100 0414 	add.w	r4, r0, #20
 8005a44:	4620      	mov	r0, r4
 8005a46:	f007 fc96 	bl	800d376 <sys_mbox_valid>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d0f3      	beq.n	8005a36 <accept_function+0xa>
  if (newpcb == NULL) {
 8005a4e:	b96f      	cbnz	r7, 8005a6c <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005a50:	492f      	ldr	r1, [pc, #188]	; (8005b10 <accept_function+0xe4>)
 8005a52:	4620      	mov	r0, r4
 8005a54:	f007 fc52 	bl	800d2fc <sys_mbox_trypost>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1eb      	bne.n	8005a36 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005a5e:	6a2b      	ldr	r3, [r5, #32]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0e8      	beq.n	8005a36 <accept_function+0xa>
 8005a64:	4601      	mov	r1, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	4798      	blx	r3
 8005a6a:	e7e4      	b.n	8005a36 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8005a6c:	b136      	cbz	r6, 8005a7c <accept_function+0x50>
 8005a6e:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <accept_function+0xe8>)
 8005a70:	f240 222a 	movw	r2, #554	; 0x22a
 8005a74:	4928      	ldr	r1, [pc, #160]	; (8005b18 <accept_function+0xec>)
 8005a76:	4829      	ldr	r0, [pc, #164]	; (8005b1c <accept_function+0xf0>)
 8005a78:	f007 fd96 	bl	800d5a8 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005a7c:	6a29      	ldr	r1, [r5, #32]
 8005a7e:	7828      	ldrb	r0, [r5, #0]
 8005a80:	f7ff ff06 	bl	8005890 <netconn_alloc>
  if (newconn == NULL) {
 8005a84:	4606      	mov	r6, r0
 8005a86:	b968      	cbnz	r0, 8005aa4 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005a88:	4921      	ldr	r1, [pc, #132]	; (8005b10 <accept_function+0xe4>)
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f007 fc36 	bl	800d2fc <sys_mbox_trypost>
 8005a90:	4602      	mov	r2, r0
 8005a92:	b920      	cbnz	r0, 8005a9e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005a94:	6a2b      	ldr	r3, [r5, #32]
 8005a96:	b113      	cbz	r3, 8005a9e <accept_function+0x72>
 8005a98:	4601      	mov	r1, r0
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	4798      	blx	r3
    return ERR_MEM;
 8005a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa2:	e7ca      	b.n	8005a3a <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8005aa4:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8005aa6:	f7ff fadd 	bl	8005064 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4631      	mov	r1, r6
 8005aae:	f007 fc25 	bl	800d2fc <sys_mbox_trypost>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	b318      	cbz	r0, 8005afe <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8005ab6:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	9001      	str	r0, [sp, #4]
 8005abc:	f004 f816 	bl	8009aec <tcp_arg>
    tcp_recv(pcb, NULL);
 8005ac0:	9801      	ldr	r0, [sp, #4]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	f004 f816 	bl	8009af4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8005ac8:	9801      	ldr	r0, [sp, #4]
 8005aca:	2100      	movs	r1, #0
 8005acc:	f004 f82a 	bl	8009b24 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	9801      	ldr	r0, [sp, #4]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	f004 f859 	bl	8009b8c <tcp_poll>
    tcp_err(pcb, NULL);
 8005ada:	2100      	movs	r1, #0
 8005adc:	9801      	ldr	r0, [sp, #4]
 8005ade:	f004 f837 	bl	8009b50 <tcp_err>
    newconn->pcb.tcp = NULL;
 8005ae2:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8005ae4:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8005ae8:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8005aea:	9001      	str	r0, [sp, #4]
 8005aec:	f007 fbfc 	bl	800d2e8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8005af0:	9801      	ldr	r0, [sp, #4]
 8005af2:	f007 fc45 	bl	800d380 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7ff ff0c 	bl	8005914 <netconn_free>
    return ERR_MEM;
 8005afc:	e7cf      	b.n	8005a9e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005afe:	6a2b      	ldr	r3, [r5, #32]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d09a      	beq.n	8005a3a <accept_function+0xe>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4601      	mov	r1, r0
 8005b08:	4628      	mov	r0, r5
 8005b0a:	4798      	blx	r3
 8005b0c:	e795      	b.n	8005a3a <accept_function+0xe>
 8005b0e:	bf00      	nop
 8005b10:	0800f128 	.word	0x0800f128
 8005b14:	080184cb 	.word	0x080184cb
 8005b18:	08018907 	.word	0x08018907
 8005b1c:	08017fc5 	.word	0x08017fc5

08005b20 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8005b20:	6803      	ldr	r3, [r0, #0]
{
 8005b22:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8005b24:	785d      	ldrb	r5, [r3, #1]
{
 8005b26:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8005b28:	b16d      	cbz	r5, 8005b46 <lwip_netconn_do_delconn+0x26>
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d006      	beq.n	8005b42 <lwip_netconn_do_delconn+0x22>
 8005b34:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <lwip_netconn_do_delconn+0xf4>)
 8005b36:	f240 425e 	movw	r2, #1118	; 0x45e
 8005b3a:	4937      	ldr	r1, [pc, #220]	; (8005c18 <lwip_netconn_do_delconn+0xf8>)
 8005b3c:	4837      	ldr	r0, [pc, #220]	; (8005c1c <lwip_netconn_do_delconn+0xfc>)
 8005b3e:	f007 fd33 	bl	800d5a8 <iprintf>
  if (((state != NETCONN_NONE) &&
 8005b42:	2d02      	cmp	r5, #2
 8005b44:	d121      	bne.n	8005b8a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8005b46:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8005b48:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8005b4a:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8005b4c:	f7ff ff1e 	bl	800598c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	6850      	ldr	r0, [r2, #4]
 8005b54:	b160      	cbz	r0, 8005b70 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005b56:	7813      	ldrb	r3, [r2, #0]
 8005b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d022      	beq.n	8005ba6 <lwip_netconn_do_delconn+0x86>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d102      	bne.n	8005b6a <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 8005b64:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 8005b66:	f007 fadb 	bl	800d120 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	6a03      	ldr	r3, [r0, #32]
 8005b74:	b113      	cbz	r3, 8005b7c <lwip_netconn_do_delconn+0x5c>
 8005b76:	2200      	movs	r2, #0
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	6a03      	ldr	r3, [r0, #32]
 8005b80:	b15b      	cbz	r3, 8005b9a <lwip_netconn_do_delconn+0x7a>
 8005b82:	2200      	movs	r2, #0
 8005b84:	2102      	movs	r1, #2
 8005b86:	4798      	blx	r3
 8005b88:	e007      	b.n	8005b9a <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8005b8a:	2d03      	cmp	r5, #3
 8005b8c:	d103      	bne.n	8005b96 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	7e1b      	ldrb	r3, [r3, #24]
 8005b92:	075b      	lsls	r3, r3, #29
 8005b94:	d4d7      	bmi.n	8005b46 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8005b96:	23fb      	movs	r3, #251	; 0xfb
 8005b98:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005b9a:	6820      	ldr	r0, [r4, #0]
}
 8005b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005ba0:	300c      	adds	r0, #12
 8005ba2:	f007 bc28 	b.w	800d3f6 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005ba6:	69d3      	ldr	r3, [r2, #28]
 8005ba8:	b133      	cbz	r3, 8005bb8 <lwip_netconn_do_delconn+0x98>
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <lwip_netconn_do_delconn+0xf4>)
 8005bac:	f240 4294 	movw	r2, #1172	; 0x494
 8005bb0:	491b      	ldr	r1, [pc, #108]	; (8005c20 <lwip_netconn_do_delconn+0x100>)
 8005bb2:	481a      	ldr	r0, [pc, #104]	; (8005c1c <lwip_netconn_do_delconn+0xfc>)
 8005bb4:	f007 fcf8 	bl	800d5a8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005bbc:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8005bbe:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8005bc4:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005bc6:	f7ff fb99 	bl	80052fc <lwip_netconn_do_close_internal>
 8005bca:	b308      	cbz	r0, 8005c10 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d006      	beq.n	8005be2 <lwip_netconn_do_delconn+0xc2>
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <lwip_netconn_do_delconn+0xf4>)
 8005bd6:	f240 429a 	movw	r2, #1178	; 0x49a
 8005bda:	4912      	ldr	r1, [pc, #72]	; (8005c24 <lwip_netconn_do_delconn+0x104>)
 8005bdc:	480f      	ldr	r0, [pc, #60]	; (8005c1c <lwip_netconn_do_delconn+0xfc>)
 8005bde:	f007 fce3 	bl	800d5a8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8005be2:	4811      	ldr	r0, [pc, #68]	; (8005c28 <lwip_netconn_do_delconn+0x108>)
 8005be4:	f007 fc2f 	bl	800d446 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	2100      	movs	r1, #0
 8005bec:	300c      	adds	r0, #12
 8005bee:	f007 fbe1 	bl	800d3b4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8005bf2:	480d      	ldr	r0, [pc, #52]	; (8005c28 <lwip_netconn_do_delconn+0x108>)
 8005bf4:	f007 fc22 	bl	800d43c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	b143      	cbz	r3, 8005c10 <lwip_netconn_do_delconn+0xf0>
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <lwip_netconn_do_delconn+0xf4>)
 8005c00:	f240 429e 	movw	r2, #1182	; 0x49e
 8005c04:	4907      	ldr	r1, [pc, #28]	; (8005c24 <lwip_netconn_do_delconn+0x104>)
 8005c06:	4805      	ldr	r0, [pc, #20]	; (8005c1c <lwip_netconn_do_delconn+0xfc>)
}
 8005c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005c0c:	f007 bccc 	b.w	800d5a8 <iprintf>
}
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	bf00      	nop
 8005c14:	080184cb 	.word	0x080184cb
 8005c18:	0801892e 	.word	0x0801892e
 8005c1c:	08017fc5 	.word	0x08017fc5
 8005c20:	08018942 	.word	0x08018942
 8005c24:	0801895d 	.word	0x0801895d
 8005c28:	2000a554 	.word	0x2000a554

08005c2c <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8005c2c:	6803      	ldr	r3, [r0, #0]
{
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005c32:	6858      	ldr	r0, [r3, #4]
 8005c34:	b188      	cbz	r0, 8005c5a <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d007      	beq.n	8005c50 <lwip_netconn_do_bind+0x24>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d10a      	bne.n	8005c5a <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005c44:	89a2      	ldrh	r2, [r4, #12]
 8005c46:	68a1      	ldr	r1, [r4, #8]
 8005c48:	f007 f8de 	bl	800ce08 <udp_bind>
  msg->err = err;
 8005c4c:	7120      	strb	r0, [r4, #4]
}
 8005c4e:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005c50:	89a2      	ldrh	r2, [r4, #12]
 8005c52:	68a1      	ldr	r1, [r4, #8]
 8005c54:	f003 fe06 	bl	8009864 <tcp_bind>
        break;
 8005c58:	e7f8      	b.n	8005c4c <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005c5a:	f06f 0005 	mvn.w	r0, #5
 8005c5e:	e7f5      	b.n	8005c4c <lwip_netconn_do_bind+0x20>

08005c60 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8005c60:	6803      	ldr	r3, [r0, #0]
{
 8005c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c64:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005c66:	6858      	ldr	r0, [r3, #4]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d04f      	beq.n	8005d0c <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005c72:	2a10      	cmp	r2, #16
 8005c74:	d14c      	bne.n	8005d10 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d143      	bne.n	8005d04 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8005c7c:	7d03      	ldrb	r3, [r0, #20]
 8005c7e:	b11b      	cbz	r3, 8005c88 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8005c80:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8005c82:	f88d 3007 	strb.w	r3, [sp, #7]
 8005c86:	e031      	b.n	8005cec <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8005c88:	f10d 0207 	add.w	r2, sp, #7
 8005c8c:	21ff      	movs	r1, #255	; 0xff
 8005c8e:	f003 fe3f 	bl	8009910 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8005c92:	4605      	mov	r5, r0
 8005c94:	b350      	cbz	r0, 8005cec <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	3010      	adds	r0, #16
 8005c9a:	f007 fb6c 	bl	800d376 <sys_mbox_valid>
 8005c9e:	b138      	cbz	r0, 8005cb0 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	3010      	adds	r0, #16
 8005ca4:	f007 fb20 	bl	800d2e8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	3010      	adds	r0, #16
 8005cac:	f007 fb68 	bl	800d380 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005cb0:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8005cb2:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005cb4:	3014      	adds	r0, #20
            err = ERR_OK;
 8005cb6:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005cba:	f007 fb5c 	bl	800d376 <sys_mbox_valid>
 8005cbe:	b930      	cbnz	r0, 8005cce <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	2106      	movs	r1, #6
 8005cc4:	3014      	adds	r0, #20
 8005cc6:	f007 faff 	bl	800d2c8 <sys_mbox_new>
 8005cca:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8005cce:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005cd2:	b983      	cbnz	r3, 8005cf6 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005cd8:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8005cda:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8005cdc:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005cde:	f003 ff05 	bl	8009aec <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <lwip_netconn_do_listen+0xb4>)
 8005ce6:	6858      	ldr	r0, [r3, #4]
 8005ce8:	f003 ff4a 	bl	8009b80 <tcp_accept>
  msg->err = err;
 8005cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cf0:	7123      	strb	r3, [r4, #4]
}
 8005cf2:	b003      	add	sp, #12
 8005cf4:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f004 fa98 	bl	800a22c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	e7f3      	b.n	8005cec <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d101      	bne.n	8005d0c <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e7ba      	b.n	8005c82 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8005d0c:	23f5      	movs	r3, #245	; 0xf5
 8005d0e:	e7b8      	b.n	8005c82 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8005d10:	23f0      	movs	r3, #240	; 0xf0
 8005d12:	e7b6      	b.n	8005c82 <lwip_netconn_do_listen+0x22>
 8005d14:	08005a2d 	.word	0x08005a2d

08005d18 <lwip_netconn_do_recv>:
{
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8005d1a:	2300      	movs	r3, #0
{
 8005d1c:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005d1e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8005d20:	6803      	ldr	r3, [r0, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	b192      	cbz	r2, 8005d4c <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d10d      	bne.n	8005d4c <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8005d30:	6885      	ldr	r5, [r0, #8]
 8005d32:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8005d36:	42bd      	cmp	r5, r7
 8005d38:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	bf28      	it	cs
 8005d3e:	463e      	movcs	r6, r7
 8005d40:	6858      	ldr	r0, [r3, #4]
 8005d42:	b2b1      	uxth	r1, r6
 8005d44:	f003 fe7e 	bl	8009a44 <tcp_recved>
      } while (remaining != 0);
 8005d48:	1bad      	subs	r5, r5, r6
 8005d4a:	d1f4      	bne.n	8005d36 <lwip_netconn_do_recv+0x1e>
}
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d50 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005d50:	b510      	push	{r4, lr}
 8005d52:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8005d54:	6800      	ldr	r0, [r0, #0]
 8005d56:	f7fe ffac 	bl	8004cb2 <netconn_err>
  if (err == ERR_OK) {
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d14a      	bne.n	8005df4 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005d66:	2a10      	cmp	r2, #16
 8005d68:	d142      	bne.n	8005df0 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8005d6a:	785a      	ldrb	r2, [r3, #1]
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	d143      	bne.n	8005df8 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d043      	beq.n	8005dfe <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8005d76:	2201      	movs	r2, #1
 8005d78:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	b133      	cbz	r3, 8005d8c <lwip_netconn_do_write+0x3c>
 8005d7e:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <lwip_netconn_do_write+0xb4>)
 8005d80:	f240 7223 	movw	r2, #1827	; 0x723
 8005d84:	4920      	ldr	r1, [pc, #128]	; (8005e08 <lwip_netconn_do_write+0xb8>)
 8005d86:	4821      	ldr	r0, [pc, #132]	; (8005e0c <lwip_netconn_do_write+0xbc>)
 8005d88:	f007 fc0e 	bl	800d5a8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	b933      	cbnz	r3, 8005d9e <lwip_netconn_do_write+0x4e>
 8005d90:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <lwip_netconn_do_write+0xb4>)
 8005d92:	f240 7224 	movw	r2, #1828	; 0x724
 8005d96:	491e      	ldr	r1, [pc, #120]	; (8005e10 <lwip_netconn_do_write+0xc0>)
 8005d98:	481c      	ldr	r0, [pc, #112]	; (8005e0c <lwip_netconn_do_write+0xbc>)
 8005d9a:	f007 fc05 	bl	800d5a8 <iprintf>
        msg->conn->current_msg = msg;
 8005d9e:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005da0:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8005da2:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005da4:	f7ff f980 	bl	80050a8 <lwip_netconn_do_writemore>
 8005da8:	b328      	cbz	r0, 8005df6 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d006      	beq.n	8005dc0 <lwip_netconn_do_write+0x70>
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <lwip_netconn_do_write+0xb4>)
 8005db4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8005db8:	4916      	ldr	r1, [pc, #88]	; (8005e14 <lwip_netconn_do_write+0xc4>)
 8005dba:	4814      	ldr	r0, [pc, #80]	; (8005e0c <lwip_netconn_do_write+0xbc>)
 8005dbc:	f007 fbf4 	bl	800d5a8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8005dc0:	4815      	ldr	r0, [pc, #84]	; (8005e18 <lwip_netconn_do_write+0xc8>)
 8005dc2:	f007 fb40 	bl	800d446 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	300c      	adds	r0, #12
 8005dcc:	f007 faf2 	bl	800d3b4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005dd0:	4811      	ldr	r0, [pc, #68]	; (8005e18 <lwip_netconn_do_write+0xc8>)
 8005dd2:	f007 fb33 	bl	800d43c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10b      	bne.n	8005df6 <lwip_netconn_do_write+0xa6>
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <lwip_netconn_do_write+0xb4>)
 8005de0:	f240 722c 	movw	r2, #1836	; 0x72c
 8005de4:	490b      	ldr	r1, [pc, #44]	; (8005e14 <lwip_netconn_do_write+0xc4>)
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8005de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005dec:	f007 bbdc 	b.w	800d5a8 <iprintf>
      err = ERR_VAL;
 8005df0:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8005df4:	7120      	strb	r0, [r4, #4]
}
 8005df6:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8005df8:	f06f 0004 	mvn.w	r0, #4
 8005dfc:	e7fa      	b.n	8005df4 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8005dfe:	f06f 000a 	mvn.w	r0, #10
 8005e02:	e7f7      	b.n	8005df4 <lwip_netconn_do_write+0xa4>
 8005e04:	080184cb 	.word	0x080184cb
 8005e08:	08018942 	.word	0x08018942
 8005e0c:	08017fc5 	.word	0x08017fc5
 8005e10:	08018979 	.word	0x08018979
 8005e14:	0801895d 	.word	0x0801895d
 8005e18:	2000a554 	.word	0x2000a554

08005e1c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8005e20:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8005e22:	6843      	ldr	r3, [r0, #4]
 8005e24:	b163      	cbz	r3, 8005e40 <lwip_netconn_do_close+0x24>
 8005e26:	7803      	ldrb	r3, [r0, #0]
 8005e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d107      	bne.n	8005e40 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005e30:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8005e32:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005e34:	2a03      	cmp	r2, #3
 8005e36:	d001      	beq.n	8005e3c <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d001      	beq.n	8005e40 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d102      	bne.n	8005e46 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8005e40:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8005e42:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8005e44:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8005e4a:	23fb      	movs	r3, #251	; 0xfb
 8005e4c:	e7f9      	b.n	8005e42 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8005e4e:	07d3      	lsls	r3, r2, #31
 8005e50:	d501      	bpl.n	8005e56 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8005e52:	f7ff fd9b 	bl	800598c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	b133      	cbz	r3, 8005e6a <lwip_netconn_do_close+0x4e>
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <lwip_netconn_do_close+0xa8>)
 8005e5e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005e62:	4919      	ldr	r1, [pc, #100]	; (8005ec8 <lwip_netconn_do_close+0xac>)
 8005e64:	4819      	ldr	r0, [pc, #100]	; (8005ecc <lwip_netconn_do_close+0xb0>)
 8005e66:	f007 fb9f 	bl	800d5a8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005e6e:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8005e70:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8005e72:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005e74:	f7ff fa42 	bl	80052fc <lwip_netconn_do_close_internal>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d0e3      	beq.n	8005e44 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d006      	beq.n	8005e92 <lwip_netconn_do_close+0x76>
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <lwip_netconn_do_close+0xa8>)
 8005e86:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8005e8a:	4911      	ldr	r1, [pc, #68]	; (8005ed0 <lwip_netconn_do_close+0xb4>)
 8005e8c:	480f      	ldr	r0, [pc, #60]	; (8005ecc <lwip_netconn_do_close+0xb0>)
 8005e8e:	f007 fb8b 	bl	800d5a8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8005e92:	4810      	ldr	r0, [pc, #64]	; (8005ed4 <lwip_netconn_do_close+0xb8>)
 8005e94:	f007 fad7 	bl	800d446 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	300c      	adds	r0, #12
 8005e9e:	f007 fa89 	bl	800d3b4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8005ea2:	480c      	ldr	r0, [pc, #48]	; (8005ed4 <lwip_netconn_do_close+0xb8>)
 8005ea4:	f007 faca 	bl	800d43c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0c9      	beq.n	8005e44 <lwip_netconn_do_close+0x28>
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <lwip_netconn_do_close+0xa8>)
 8005eb2:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8005eb6:	4906      	ldr	r1, [pc, #24]	; (8005ed0 <lwip_netconn_do_close+0xb4>)
 8005eb8:	4804      	ldr	r0, [pc, #16]	; (8005ecc <lwip_netconn_do_close+0xb0>)
}
 8005eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005ebe:	f007 bb73 	b.w	800d5a8 <iprintf>
 8005ec2:	bf00      	nop
 8005ec4:	080184cb 	.word	0x080184cb
 8005ec8:	08018942 	.word	0x08018942
 8005ecc:	08017fc5 	.word	0x08017fc5
 8005ed0:	0801895d 	.word	0x0801895d
 8005ed4:	2000a554 	.word	0x2000a554

08005ed8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8005ed8:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8005eda:	4604      	mov	r4, r0
 8005edc:	b160      	cbz	r0, 8005ef8 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8005ede:	6800      	ldr	r0, [r0, #0]
 8005ee0:	b120      	cbz	r0, 8005eec <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005ee2:	f003 f9b9 	bl	8009258 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8005eec:	4621      	mov	r1, r4
 8005eee:	2006      	movs	r0, #6
  }
}
 8005ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8005ef4:	f002 bf50 	b.w	8008d98 <memp_free>
}
 8005ef8:	bd10      	pop	{r4, pc}
	...

08005efc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8005efc:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8005efe:	b940      	cbnz	r0, 8005f12 <netbuf_data+0x16>
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <netbuf_data+0x44>)
 8005f02:	22c6      	movs	r2, #198	; 0xc6
 8005f04:	490f      	ldr	r1, [pc, #60]	; (8005f44 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005f06:	4810      	ldr	r0, [pc, #64]	; (8005f48 <netbuf_data+0x4c>)
 8005f08:	f007 fb4e 	bl	800d5a8 <iprintf>
 8005f0c:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8005f10:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005f12:	b919      	cbnz	r1, 8005f1c <netbuf_data+0x20>
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <netbuf_data+0x44>)
 8005f16:	22c7      	movs	r2, #199	; 0xc7
 8005f18:	490c      	ldr	r1, [pc, #48]	; (8005f4c <netbuf_data+0x50>)
 8005f1a:	e7f4      	b.n	8005f06 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005f1c:	b91a      	cbnz	r2, 8005f26 <netbuf_data+0x2a>
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <netbuf_data+0x44>)
 8005f20:	22c8      	movs	r2, #200	; 0xc8
 8005f22:	490b      	ldr	r1, [pc, #44]	; (8005f50 <netbuf_data+0x54>)
 8005f24:	e7ef      	b.n	8005f06 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 8005f26:	6843      	ldr	r3, [r0, #4]
 8005f28:	b133      	cbz	r3, 8005f38 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8005f2e:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8005f30:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8005f32:	895b      	ldrh	r3, [r3, #10]
 8005f34:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8005f36:	e7eb      	b.n	8005f10 <netbuf_data+0x14>
    return ERR_BUF;
 8005f38:	f06f 0001 	mvn.w	r0, #1
 8005f3c:	e7e8      	b.n	8005f10 <netbuf_data+0x14>
 8005f3e:	bf00      	nop
 8005f40:	080189a2 	.word	0x080189a2
 8005f44:	08018ab6 	.word	0x08018ab6
 8005f48:	08017fc5 	.word	0x08017fc5
 8005f4c:	08018acf 	.word	0x08018acf
 8005f50:	08018aec 	.word	0x08018aec

08005f54 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8005f54:	4c2c      	ldr	r4, [pc, #176]	; (8006008 <tcpip_thread+0xb4>)
{
 8005f56:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f007 fa6f 	bl	800d43c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	b10b      	cbz	r3, 8005f66 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 8005f62:	68a0      	ldr	r0, [r4, #8]
 8005f64:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8005f66:	4d28      	ldr	r5, [pc, #160]	; (8006008 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005f68:	4e28      	ldr	r6, [pc, #160]	; (800600c <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005f6a:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 8005f6e:	f006 fe55 	bl	800cc1c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005f72:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8005f74:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005f76:	d113      	bne.n	8005fa0 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f007 fa64 	bl	800d446 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	a901      	add	r1, sp, #4
 8005f82:	4638      	mov	r0, r7
 8005f84:	f007 f9c4 	bl	800d310 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f007 fa57 	bl	800d43c <sys_mutex_lock>
    if (msg == NULL) {
 8005f8e:	9c01      	ldr	r4, [sp, #4]
 8005f90:	b9cc      	cbnz	r4, 8005fc6 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005f92:	4633      	mov	r3, r6
 8005f94:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005f96:	491e      	ldr	r1, [pc, #120]	; (8006010 <tcpip_thread+0xbc>)
 8005f98:	481e      	ldr	r0, [pc, #120]	; (8006014 <tcpip_thread+0xc0>)
 8005f9a:	f007 fb05 	bl	800d5a8 <iprintf>
      break;
 8005f9e:	e7e6      	b.n	8005f6e <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8005fa0:	b910      	cbnz	r0, 8005fa8 <tcpip_thread+0x54>
    sys_check_timeouts();
 8005fa2:	f006 fe1f 	bl	800cbe4 <sys_check_timeouts>
    goto again;
 8005fa6:	e7e2      	b.n	8005f6e <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f007 fa4c 	bl	800d446 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005fae:	4622      	mov	r2, r4
 8005fb0:	a901      	add	r1, sp, #4
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	f007 f9ac 	bl	800d310 <sys_arch_mbox_fetch>
 8005fb8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f007 fa3e 	bl	800d43c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	d0ee      	beq.n	8005fa2 <tcpip_thread+0x4e>
 8005fc4:	e7e3      	b.n	8005f8e <tcpip_thread+0x3a>
  switch (msg->type) {
 8005fc6:	7823      	ldrb	r3, [r4, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d00f      	beq.n	8005fec <tcpip_thread+0x98>
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d013      	beq.n	8005ff8 <tcpip_thread+0xa4>
 8005fd0:	b9b3      	cbnz	r3, 8006000 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005fd2:	6860      	ldr	r0, [r4, #4]
 8005fd4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8005fd8:	4798      	blx	r3
 8005fda:	b110      	cbz	r0, 8005fe2 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8005fdc:	6860      	ldr	r0, [r4, #4]
 8005fde:	f003 f93b 	bl	8009258 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005fe6:	f002 fed7 	bl	8008d98 <memp_free>
      break;
 8005fea:	e7c0      	b.n	8005f6e <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005fec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005ff0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	2008      	movs	r0, #8
 8005ff6:	e7f6      	b.n	8005fe6 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005ff8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8005ffc:	4798      	blx	r3
      break;
 8005ffe:	e7b6      	b.n	8005f6e <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006000:	4633      	mov	r3, r6
 8006002:	22cf      	movs	r2, #207	; 0xcf
 8006004:	e7c7      	b.n	8005f96 <tcpip_thread+0x42>
 8006006:	bf00      	nop
 8006008:	2000a554 	.word	0x2000a554
 800600c:	08018b38 	.word	0x08018b38
 8006010:	08018ba6 	.word	0x08018ba6
 8006014:	08017fc5 	.word	0x08017fc5

08006018 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800601c:	4810      	ldr	r0, [pc, #64]	; (8006060 <tcpip_inpkt+0x48>)
{
 800601e:	460e      	mov	r6, r1
 8006020:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006022:	f007 f9a8 	bl	800d376 <sys_mbox_valid>
 8006026:	b928      	cbnz	r0, 8006034 <tcpip_inpkt+0x1c>
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <tcpip_inpkt+0x4c>)
 800602a:	22fc      	movs	r2, #252	; 0xfc
 800602c:	490e      	ldr	r1, [pc, #56]	; (8006068 <tcpip_inpkt+0x50>)
 800602e:	480f      	ldr	r0, [pc, #60]	; (800606c <tcpip_inpkt+0x54>)
 8006030:	f007 faba 	bl	800d5a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006034:	2009      	movs	r0, #9
 8006036:	f002 fe7f 	bl	8008d38 <memp_malloc>
  if (msg == NULL) {
 800603a:	4604      	mov	r4, r0
 800603c:	b168      	cbz	r0, 800605a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800603e:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006040:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8006042:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8006044:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8006046:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800604a:	4805      	ldr	r0, [pc, #20]	; (8006060 <tcpip_inpkt+0x48>)
 800604c:	f007 f956 	bl	800d2fc <sys_mbox_trypost>
 8006050:	b128      	cbz	r0, 800605e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006052:	4621      	mov	r1, r4
 8006054:	2009      	movs	r0, #9
 8006056:	f002 fe9f 	bl	8008d98 <memp_free>
    return ERR_MEM;
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006060:	2000a560 	.word	0x2000a560
 8006064:	08018b38 	.word	0x08018b38
 8006068:	08018bc4 	.word	0x08018bc4
 800606c:	08017fc5 	.word	0x08017fc5

08006070 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006070:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8006074:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8006078:	bf14      	ite	ne
 800607a:	4a02      	ldrne	r2, [pc, #8]	; (8006084 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800607c:	4a02      	ldreq	r2, [pc, #8]	; (8006088 <tcpip_input+0x18>)
 800607e:	f7ff bfcb 	b.w	8006018 <tcpip_inpkt>
 8006082:	bf00      	nop
 8006084:	0800d1b9 	.word	0x0800d1b9
 8006088:	08007c4d 	.word	0x08007c4d

0800608c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800608c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800608e:	4e06      	ldr	r6, [pc, #24]	; (80060a8 <tcpip_send_msg_wait_sem+0x1c>)
{
 8006090:	460d      	mov	r5, r1
 8006092:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006094:	4630      	mov	r0, r6
 8006096:	f007 f9d1 	bl	800d43c <sys_mutex_lock>
  fn(apimsg);
 800609a:	4628      	mov	r0, r5
 800609c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800609e:	4630      	mov	r0, r6
 80060a0:	f007 f9d1 	bl	800d446 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80060a4:	2000      	movs	r0, #0
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	2000a554 	.word	0x2000a554

080060ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80060ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ae:	4605      	mov	r5, r0
 80060b0:	460c      	mov	r4, r1
  lwip_init();
 80060b2:	f002 fb65 	bl	8008780 <lwip_init>

  tcpip_init_done = initfunc;
 80060b6:	4812      	ldr	r0, [pc, #72]	; (8006100 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80060b8:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80060ba:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80060be:	300c      	adds	r0, #12
 80060c0:	f007 f902 	bl	800d2c8 <sys_mbox_new>
 80060c4:	b130      	cbz	r0, 80060d4 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <tcpip_init+0x58>)
 80060c8:	f240 2261 	movw	r2, #609	; 0x261
 80060cc:	490e      	ldr	r1, [pc, #56]	; (8006108 <tcpip_init+0x5c>)
 80060ce:	480f      	ldr	r0, [pc, #60]	; (800610c <tcpip_init+0x60>)
 80060d0:	f007 fa6a 	bl	800d5a8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80060d4:	480a      	ldr	r0, [pc, #40]	; (8006100 <tcpip_init+0x54>)
 80060d6:	f007 f9a3 	bl	800d420 <sys_mutex_new>
 80060da:	b130      	cbz	r0, 80060ea <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <tcpip_init+0x58>)
 80060de:	f240 2265 	movw	r2, #613	; 0x265
 80060e2:	490b      	ldr	r1, [pc, #44]	; (8006110 <tcpip_init+0x64>)
 80060e4:	4809      	ldr	r0, [pc, #36]	; (800610c <tcpip_init+0x60>)
 80060e6:	f007 fa5f 	bl	800d5a8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80060ea:	2302      	movs	r3, #2
 80060ec:	2200      	movs	r2, #0
 80060ee:	4909      	ldr	r1, [pc, #36]	; (8006114 <tcpip_init+0x68>)
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060f6:	4808      	ldr	r0, [pc, #32]	; (8006118 <tcpip_init+0x6c>)
 80060f8:	f007 f9a8 	bl	800d44c <sys_thread_new>
}
 80060fc:	b003      	add	sp, #12
 80060fe:	bd30      	pop	{r4, r5, pc}
 8006100:	2000a554 	.word	0x2000a554
 8006104:	08018b38 	.word	0x08018b38
 8006108:	08018bd1 	.word	0x08018bd1
 800610c:	08017fc5 	.word	0x08017fc5
 8006110:	08018bf4 	.word	0x08018bf4
 8006114:	08005f55 	.word	0x08005f55
 8006118:	08018c15 	.word	0x08018c15

0800611c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800611c:	7943      	ldrb	r3, [r0, #5]
 800611e:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8006120:	bf1f      	itttt	ne
 8006122:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8006124:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8006126:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8006128:	8103      	strhne	r3, [r0, #8]
  }
}
 800612a:	4770      	bx	lr

0800612c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800612e:	1c87      	adds	r7, r0, #2
{
 8006130:	4604      	mov	r4, r0
 8006132:	460d      	mov	r5, r1
 8006134:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8006136:	2f44      	cmp	r7, #68	; 0x44
 8006138:	d906      	bls.n	8006148 <dhcp_option_short+0x1c>
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <dhcp_option_short+0x2c>)
 800613c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8006140:	4906      	ldr	r1, [pc, #24]	; (800615c <dhcp_option_short+0x30>)
 8006142:	4807      	ldr	r0, [pc, #28]	; (8006160 <dhcp_option_short+0x34>)
 8006144:	f007 fa30 	bl	800d5a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8006148:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 800614a:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800614c:	552b      	strb	r3, [r5, r4]
 800614e:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8006150:	b2a4      	uxth	r4, r4
 8006152:	552e      	strb	r6, [r5, r4]
}
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006156:	bf00      	nop
 8006158:	08018c1c 	.word	0x08018c1c
 800615c:	08018c8f 	.word	0x08018c8f
 8006160:	08017fc5 	.word	0x08017fc5

08006164 <dhcp_option>:
{
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006168:	3302      	adds	r3, #2
{
 800616a:	4604      	mov	r4, r0
 800616c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800616e:	fa50 f383 	uxtab	r3, r0, r3
{
 8006172:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006174:	2b44      	cmp	r3, #68	; 0x44
 8006176:	d906      	bls.n	8006186 <dhcp_option+0x22>
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <dhcp_option+0x30>)
 800617a:	f240 529a 	movw	r2, #1434	; 0x59a
 800617e:	4906      	ldr	r1, [pc, #24]	; (8006198 <dhcp_option+0x34>)
 8006180:	4806      	ldr	r0, [pc, #24]	; (800619c <dhcp_option+0x38>)
 8006182:	f007 fa11 	bl	800d5a8 <iprintf>
  options[options_out_len++] = option_type;
 8006186:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8006188:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 800618a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800618c:	b29b      	uxth	r3, r3
}
 800618e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8006190:	54ee      	strb	r6, [r5, r3]
}
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	08018c1c 	.word	0x08018c1c
 8006198:	08018cca 	.word	0x08018cca
 800619c:	08017fc5 	.word	0x08017fc5

080061a0 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80061a0:	2843      	cmp	r0, #67	; 0x43
{
 80061a2:	b570      	push	{r4, r5, r6, lr}
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80061aa:	d906      	bls.n	80061ba <dhcp_option_byte+0x1a>
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <dhcp_option_byte+0x24>)
 80061ae:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80061b2:	4905      	ldr	r1, [pc, #20]	; (80061c8 <dhcp_option_byte+0x28>)
 80061b4:	4805      	ldr	r0, [pc, #20]	; (80061cc <dhcp_option_byte+0x2c>)
 80061b6:	f007 f9f7 	bl	800d5a8 <iprintf>
  options[options_out_len++] = value;
 80061ba:	1c60      	adds	r0, r4, #1
 80061bc:	552e      	strb	r6, [r5, r4]
}
 80061be:	b280      	uxth	r0, r0
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	bf00      	nop
 80061c4:	08018c1c 	.word	0x08018c1c
 80061c8:	08018d0c 	.word	0x08018d0c
 80061cc:	08017fc5 	.word	0x08017fc5

080061d0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80061d2:	1d07      	adds	r7, r0, #4
{
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80061da:	2f44      	cmp	r7, #68	; 0x44
 80061dc:	d906      	bls.n	80061ec <dhcp_option_long+0x1c>
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <dhcp_option_long+0x3c>)
 80061e0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80061e4:	490a      	ldr	r1, [pc, #40]	; (8006210 <dhcp_option_long+0x40>)
 80061e6:	480b      	ldr	r0, [pc, #44]	; (8006214 <dhcp_option_long+0x44>)
 80061e8:	f007 f9de 	bl	800d5a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80061ec:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80061ee:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80061f0:	552b      	strb	r3, [r5, r4]
 80061f2:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 80061f4:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	54ea      	strb	r2, [r5, r3]
 80061fa:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80061fc:	3403      	adds	r4, #3
 80061fe:	0a32      	lsrs	r2, r6, #8
 8006200:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006202:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8006204:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006206:	552e      	strb	r6, [r5, r4]
}
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800620a:	bf00      	nop
 800620c:	08018c1c 	.word	0x08018c1c
 8006210:	08018d41 	.word	0x08018d41
 8006214:	08017fc5 	.word	0x08017fc5

08006218 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8006218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800621c:	460e      	mov	r6, r1
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8006222:	4605      	mov	r5, r0
 8006224:	b958      	cbnz	r0, 800623e <dhcp_create_msg+0x26>
 8006226:	462f      	mov	r7, r5
 8006228:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <dhcp_create_msg+0x110>)
 800622a:	f240 7269 	movw	r2, #1897	; 0x769
 800622e:	493f      	ldr	r1, [pc, #252]	; (800632c <dhcp_create_msg+0x114>)
 8006230:	483f      	ldr	r0, [pc, #252]	; (8006330 <dhcp_create_msg+0x118>)
 8006232:	f007 f9b9 	bl	800d5a8 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8006236:	4638      	mov	r0, r7
 8006238:	b003      	add	sp, #12
 800623a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800623e:	b941      	cbnz	r1, 8006252 <dhcp_create_msg+0x3a>
 8006240:	4b39      	ldr	r3, [pc, #228]	; (8006328 <dhcp_create_msg+0x110>)
 8006242:	f240 726a 	movw	r2, #1898	; 0x76a
 8006246:	493b      	ldr	r1, [pc, #236]	; (8006334 <dhcp_create_msg+0x11c>)
 8006248:	4637      	mov	r7, r6
 800624a:	4839      	ldr	r0, [pc, #228]	; (8006330 <dhcp_create_msg+0x118>)
 800624c:	f007 f9ac 	bl	800d5a8 <iprintf>
 8006250:	e7f1      	b.n	8006236 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8006252:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006256:	f44f 719a 	mov.w	r1, #308	; 0x134
 800625a:	2036      	movs	r0, #54	; 0x36
 800625c:	f003 f864 	bl	8009328 <pbuf_alloc>
  if (p_out == NULL) {
 8006260:	4607      	mov	r7, r0
 8006262:	2800      	cmp	r0, #0
 8006264:	d0e7      	beq.n	8006236 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8006266:	8943      	ldrh	r3, [r0, #10]
 8006268:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800626c:	d206      	bcs.n	800627c <dhcp_create_msg+0x64>
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <dhcp_create_msg+0x110>)
 8006270:	f240 7271 	movw	r2, #1905	; 0x771
 8006274:	4930      	ldr	r1, [pc, #192]	; (8006338 <dhcp_create_msg+0x120>)
 8006276:	482e      	ldr	r0, [pc, #184]	; (8006330 <dhcp_create_msg+0x118>)
 8006278:	f007 f996 	bl	800d5a8 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800627c:	f1b8 0f03 	cmp.w	r8, #3
 8006280:	d102      	bne.n	8006288 <dhcp_create_msg+0x70>
 8006282:	7973      	ldrb	r3, [r6, #5]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d107      	bne.n	8006298 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8006288:	79b3      	ldrb	r3, [r6, #6]
 800628a:	4c2c      	ldr	r4, [pc, #176]	; (800633c <dhcp_create_msg+0x124>)
 800628c:	b913      	cbnz	r3, 8006294 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 800628e:	f007 f9a3 	bl	800d5d8 <rand>
 8006292:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8006298:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800629a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800629e:	2100      	movs	r1, #0
 80062a0:	4620      	mov	r0, r4
 80062a2:	f007 f979 	bl	800d598 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80062a6:	2301      	movs	r3, #1
 80062a8:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80062aa:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 80062ac:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80062b0:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80062b2:	6830      	ldr	r0, [r6, #0]
 80062b4:	f002 fa13 	bl	80086de <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80062b8:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 80062bc:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80062be:	d00a      	beq.n	80062d6 <dhcp_create_msg+0xbe>
 80062c0:	f1a8 0307 	sub.w	r3, r8, #7
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d906      	bls.n	80062d6 <dhcp_create_msg+0xbe>
 80062c8:	f1b8 0f03 	cmp.w	r8, #3
 80062cc:	d105      	bne.n	80062da <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80062ce:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80062d0:	3b04      	subs	r3, #4
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d801      	bhi.n	80062da <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80062d6:	686b      	ldr	r3, [r5, #4]
 80062d8:	60e3      	str	r3, [r4, #12]
 80062da:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 80062de:	f104 021c 	add.w	r2, r4, #28
 80062e2:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 80062e4:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80062e8:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 80062ea:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80062ee:	d1f9      	bne.n	80062e4 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80062f0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80062f4:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80062f6:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 80062fa:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80062fc:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8006300:	2253      	movs	r2, #83	; 0x53
 8006302:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8006306:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800630a:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800630c:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8006310:	2301      	movs	r3, #1
 8006312:	9101      	str	r1, [sp, #4]
 8006314:	f7ff ff26 	bl	8006164 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8006318:	4642      	mov	r2, r8
 800631a:	9901      	ldr	r1, [sp, #4]
 800631c:	f7ff ff40 	bl	80061a0 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8006320:	f8a9 0000 	strh.w	r0, [r9]
 8006324:	e787      	b.n	8006236 <dhcp_create_msg+0x1e>
 8006326:	bf00      	nop
 8006328:	08018c1c 	.word	0x08018c1c
 800632c:	08018d7b 	.word	0x08018d7b
 8006330:	08017fc5 	.word	0x08017fc5
 8006334:	08018d9a 	.word	0x08018d9a
 8006338:	08018db8 	.word	0x08018db8
 800633c:	2000a564 	.word	0x2000a564

08006340 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	4604      	mov	r4, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8006344:	23ff      	movs	r3, #255	; 0xff
{
 8006346:	4608      	mov	r0, r1
 8006348:	4617      	mov	r7, r2
  options[options_out_len++] = DHCP_OPTION_END;
 800634a:	1c66      	adds	r6, r4, #1
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800634c:	f1c4 0543 	rsb	r5, r4, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8006350:	550b      	strb	r3, [r1, r4]
    options[options_out_len++] = 0;
 8006352:	2100      	movs	r1, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8006354:	b2b6      	uxth	r6, r6
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8006356:	34f1      	adds	r4, #241	; 0xf1
    options[options_out_len++] = 0;
 8006358:	b2ad      	uxth	r5, r5
 800635a:	2e44      	cmp	r6, #68	; 0x44
 800635c:	4430      	add	r0, r6
 800635e:	bf94      	ite	ls
 8006360:	462a      	movls	r2, r5
 8006362:	2200      	movhi	r2, #0
 8006364:	f007 f918 	bl	800d598 <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8006368:	2e44      	cmp	r6, #68	; 0x44
 800636a:	4638      	mov	r0, r7
 800636c:	bf94      	ite	ls
 800636e:	4629      	movls	r1, r5
 8006370:	2100      	movhi	r1, #0
 8006372:	4421      	add	r1, r4
}
 8006374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8006378:	b289      	uxth	r1, r1
 800637a:	f003 b851 	b.w	8009420 <pbuf_realloc>
	...

08006380 <dhcp_discover>:
{
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006384:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006386:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006388:	b086      	sub	sp, #24
 800638a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800638c:	2106      	movs	r1, #6
 800638e:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006390:	61e3      	str	r3, [r4, #28]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8006392:	2201      	movs	r2, #1
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8006394:	f7ff fec2 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8006398:	f10d 0316 	add.w	r3, sp, #22
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	f7ff ff3a 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 80063a4:	4605      	mov	r5, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d039      	beq.n	800641e <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80063aa:	6841      	ldr	r1, [r0, #4]
 80063ac:	2302      	movs	r3, #2
 80063ae:	2239      	movs	r2, #57	; 0x39
 80063b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80063b4:	31f0      	adds	r1, #240	; 0xf0
 80063b6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800646c <dhcp_discover+0xec>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80063ba:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80063bc:	9103      	str	r1, [sp, #12]
 80063be:	f7ff fed1 	bl	8006164 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80063c2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80063c4:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80063c6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80063ca:	f7ff feaf 	bl	800612c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80063ce:	9903      	ldr	r1, [sp, #12]
 80063d0:	2303      	movs	r3, #3
 80063d2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80063d4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80063d8:	f7ff fec4 	bl	8006164 <dhcp_option>
 80063dc:	9903      	ldr	r1, [sp, #12]
 80063de:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80063e2:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80063e4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80063e8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80063ec:	9103      	str	r1, [sp, #12]
 80063ee:	f7ff fed7 	bl	80061a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80063f2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80063f6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80063f8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80063fc:	d1f1      	bne.n	80063e2 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80063fe:	462a      	mov	r2, r5
 8006400:	f7ff ff9e 	bl	8006340 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006404:	4b16      	ldr	r3, [pc, #88]	; (8006460 <dhcp_discover+0xe0>)
 8006406:	4817      	ldr	r0, [pc, #92]	; (8006464 <dhcp_discover+0xe4>)
 8006408:	4629      	mov	r1, r5
 800640a:	4a17      	ldr	r2, [pc, #92]	; (8006468 <dhcp_discover+0xe8>)
 800640c:	e9cd 6300 	strd	r6, r3, [sp]
 8006410:	2343      	movs	r3, #67	; 0x43
 8006412:	6840      	ldr	r0, [r0, #4]
 8006414:	f006 fd5e 	bl	800ced4 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006418:	4628      	mov	r0, r5
 800641a:	f002 ff1d 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 800641e:	79a3      	ldrb	r3, [r4, #6]
}
 8006420:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8006422:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006424:	bf1c      	itt	ne
 8006426:	3301      	addne	r3, #1
 8006428:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800642a:	79a2      	ldrb	r2, [r4, #6]
 800642c:	2a05      	cmp	r2, #5
 800642e:	bf97      	itett	ls
 8006430:	2301      	movls	r3, #1
 8006432:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8006436:	4093      	lslls	r3, r2
 8006438:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800643c:	bf98      	it	ls
 800643e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006442:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006446:	bf9c      	itt	ls
 8006448:	00db      	lslls	r3, r3, #3
 800644a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800644c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006450:	b29b      	uxth	r3, r3
 8006452:	fbb3 f3f2 	udiv	r3, r3, r2
 8006456:	8123      	strh	r3, [r4, #8]
}
 8006458:	b006      	add	sp, #24
 800645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645e:	bf00      	nop
 8006460:	0800f134 	.word	0x0800f134
 8006464:	2000a564 	.word	0x2000a564
 8006468:	0800f130 	.word	0x0800f130
 800646c:	0800f12a 	.word	0x0800f12a

08006470 <dhcp_check>:
{
 8006470:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006472:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006474:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8006476:	2108      	movs	r1, #8
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8006478:	2200      	movs	r2, #0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff fe4e 	bl	800611c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8006480:	f104 011c 	add.w	r1, r4, #28
 8006484:	4628      	mov	r0, r5
 8006486:	f001 f979 	bl	800777c <etharp_query>
  if (dhcp->tries < 255) {
 800648a:	79a3      	ldrb	r3, [r4, #6]
 800648c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800648e:	bf1c      	itt	ne
 8006490:	3301      	addne	r3, #1
 8006492:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006494:	2301      	movs	r3, #1
 8006496:	8123      	strh	r3, [r4, #8]
}
 8006498:	bd38      	pop	{r3, r4, r5, pc}
	...

0800649c <dhcp_bind>:
{
 800649c:	b513      	push	{r0, r1, r4, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800649e:	4604      	mov	r4, r0
 80064a0:	b948      	cbnz	r0, 80064b6 <dhcp_bind+0x1a>
 80064a2:	4b3e      	ldr	r3, [pc, #248]	; (800659c <dhcp_bind+0x100>)
 80064a4:	f240 4215 	movw	r2, #1045	; 0x415
 80064a8:	493d      	ldr	r1, [pc, #244]	; (80065a0 <dhcp_bind+0x104>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80064aa:	483e      	ldr	r0, [pc, #248]	; (80065a4 <dhcp_bind+0x108>)
}
 80064ac:	b002      	add	sp, #8
 80064ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80064b2:	f007 b879 	b.w	800d5a8 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80064b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80064b8:	b920      	cbnz	r0, 80064c4 <dhcp_bind+0x28>
 80064ba:	4b38      	ldr	r3, [pc, #224]	; (800659c <dhcp_bind+0x100>)
 80064bc:	f240 4217 	movw	r2, #1047	; 0x417
 80064c0:	4939      	ldr	r1, [pc, #228]	; (80065a8 <dhcp_bind+0x10c>)
 80064c2:	e7f2      	b.n	80064aa <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80064c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	d00c      	beq.n	80064e8 <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064ce:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80064d0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064d4:	bf36      	itet	cc
 80064d6:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 80064d8:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064dc:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 80064e0:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d043      	beq.n	800656e <dhcp_bind+0xd2>
    dhcp->t0_timeout = (u16_t)timeout;
 80064e6:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80064e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	d00e      	beq.n	800650c <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064ee:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80064f0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064f4:	bf36      	itet	cc
 80064f6:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 80064f8:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80064fc:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8006500:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8006502:	2b00      	cmp	r3, #0
 8006504:	d036      	beq.n	8006574 <dhcp_bind+0xd8>
    dhcp->t1_timeout = (u16_t)timeout;
 8006506:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8006508:	8943      	ldrh	r3, [r0, #10]
 800650a:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800650c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	d00d      	beq.n	800652e <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006512:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006514:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006518:	bf36      	itet	cc
 800651a:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800651c:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006520:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8006524:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8006526:	b343      	cbz	r3, 800657a <dhcp_bind+0xde>
    dhcp->t2_timeout = (u16_t)timeout;
 8006528:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800652a:	8983      	ldrh	r3, [r0, #12]
 800652c:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800652e:	8983      	ldrh	r3, [r0, #12]
 8006530:	8942      	ldrh	r2, [r0, #10]
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <dhcp_bind+0xa0>
 8006536:	b10b      	cbz	r3, 800653c <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 800653c:	79c3      	ldrb	r3, [r0, #7]
 800653e:	b1fb      	cbz	r3, 8006580 <dhcp_bind+0xe4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8006540:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006542:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8006544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006546:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8006548:	b92b      	cbnz	r3, 8006556 <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800654a:	69c3      	ldr	r3, [r0, #28]
 800654c:	9a00      	ldr	r2, [sp, #0]
 800654e:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8006550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006554:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8006556:	210a      	movs	r1, #10
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8006558:	466a      	mov	r2, sp
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800655a:	f7ff fddf 	bl	800611c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800655e:	f100 011c 	add.w	r1, r0, #28
 8006562:	ab01      	add	r3, sp, #4
 8006564:	4620      	mov	r0, r4
 8006566:	f002 fc7f 	bl	8008e68 <netif_set_addr>
}
 800656a:	b002      	add	sp, #8
 800656c:	bd10      	pop	{r4, pc}
      dhcp->t0_timeout = 1;
 800656e:	2301      	movs	r3, #1
 8006570:	8283      	strh	r3, [r0, #20]
 8006572:	e7b9      	b.n	80064e8 <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 8006574:	2301      	movs	r3, #1
 8006576:	8143      	strh	r3, [r0, #10]
 8006578:	e7c6      	b.n	8006508 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 800657a:	2301      	movs	r3, #1
 800657c:	8183      	strh	r3, [r0, #12]
 800657e:	e7d4      	b.n	800652a <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8006580:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8006584:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8006586:	2a00      	cmp	r2, #0
 8006588:	db01      	blt.n	800658e <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800658a:	23ff      	movs	r3, #255	; 0xff
 800658c:	e7d9      	b.n	8006542 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800658e:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8006590:	bf8c      	ite	hi
 8006592:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006596:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800659a:	e7d2      	b.n	8006542 <dhcp_bind+0xa6>
 800659c:	08018c1c 	.word	0x08018c1c
 80065a0:	08018df8 	.word	0x08018df8
 80065a4:	08017fc5 	.word	0x08017fc5
 80065a8:	08018e11 	.word	0x08018e11

080065ac <dhcp_inc_pcb_refcount>:
{
 80065ac:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 80065ae:	4c14      	ldr	r4, [pc, #80]	; (8006600 <dhcp_inc_pcb_refcount+0x54>)
 80065b0:	7a23      	ldrb	r3, [r4, #8]
 80065b2:	b9eb      	cbnz	r3, 80065f0 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	b12b      	cbz	r3, 80065c4 <dhcp_inc_pcb_refcount+0x18>
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <dhcp_inc_pcb_refcount+0x58>)
 80065ba:	22e5      	movs	r2, #229	; 0xe5
 80065bc:	4912      	ldr	r1, [pc, #72]	; (8006608 <dhcp_inc_pcb_refcount+0x5c>)
 80065be:	4813      	ldr	r0, [pc, #76]	; (800660c <dhcp_inc_pcb_refcount+0x60>)
 80065c0:	f006 fff2 	bl	800d5a8 <iprintf>
    dhcp_pcb = udp_new();
 80065c4:	f006 fdd2 	bl	800d16c <udp_new>
 80065c8:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 80065ca:	b1b0      	cbz	r0, 80065fa <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80065cc:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80065ce:	4910      	ldr	r1, [pc, #64]	; (8006610 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80065d0:	f042 0220 	orr.w	r2, r2, #32
 80065d4:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80065d6:	2244      	movs	r2, #68	; 0x44
 80065d8:	f006 fc16 	bl	800ce08 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80065dc:	2243      	movs	r2, #67	; 0x43
 80065de:	490c      	ldr	r1, [pc, #48]	; (8006610 <dhcp_inc_pcb_refcount+0x64>)
 80065e0:	6860      	ldr	r0, [r4, #4]
 80065e2:	f006 fd4f 	bl	800d084 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80065e6:	2200      	movs	r2, #0
 80065e8:	490a      	ldr	r1, [pc, #40]	; (8006614 <dhcp_inc_pcb_refcount+0x68>)
 80065ea:	6860      	ldr	r0, [r4, #4]
 80065ec:	f006 fd86 	bl	800d0fc <udp_recv>
  dhcp_pcb_refcount++;
 80065f0:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 80065f2:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80065f4:	3301      	adds	r3, #1
 80065f6:	7223      	strb	r3, [r4, #8]
}
 80065f8:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	e7fb      	b.n	80065f8 <dhcp_inc_pcb_refcount+0x4c>
 8006600:	2000a564 	.word	0x2000a564
 8006604:	08018c1c 	.word	0x08018c1c
 8006608:	08018e29 	.word	0x08018e29
 800660c:	08017fc5 	.word	0x08017fc5
 8006610:	0800f134 	.word	0x0800f134
 8006614:	08006915 	.word	0x08006915

08006618 <dhcp_dec_pcb_refcount>:
{
 8006618:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800661a:	4d09      	ldr	r5, [pc, #36]	; (8006640 <dhcp_dec_pcb_refcount+0x28>)
 800661c:	7a2b      	ldrb	r3, [r5, #8]
 800661e:	b92b      	cbnz	r3, 800662c <dhcp_dec_pcb_refcount+0x14>
 8006620:	4b08      	ldr	r3, [pc, #32]	; (8006644 <dhcp_dec_pcb_refcount+0x2c>)
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	4908      	ldr	r1, [pc, #32]	; (8006648 <dhcp_dec_pcb_refcount+0x30>)
 8006626:	4809      	ldr	r0, [pc, #36]	; (800664c <dhcp_dec_pcb_refcount+0x34>)
 8006628:	f006 ffbe 	bl	800d5a8 <iprintf>
  dhcp_pcb_refcount--;
 800662c:	7a2c      	ldrb	r4, [r5, #8]
 800662e:	3c01      	subs	r4, #1
 8006630:	b2e4      	uxtb	r4, r4
 8006632:	722c      	strb	r4, [r5, #8]
  if (dhcp_pcb_refcount == 0) {
 8006634:	b91c      	cbnz	r4, 800663e <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 8006636:	6868      	ldr	r0, [r5, #4]
 8006638:	f006 fd72 	bl	800d120 <udp_remove>
    dhcp_pcb = NULL;
 800663c:	606c      	str	r4, [r5, #4]
}
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	2000a564 	.word	0x2000a564
 8006644:	08018c1c 	.word	0x08018c1c
 8006648:	08018e4e 	.word	0x08018e4e
 800664c:	08017fc5 	.word	0x08017fc5

08006650 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8006650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006654:	6a44      	ldr	r4, [r0, #36]	; 0x24
dhcp_reboot(struct netif *netif)
 8006656:	b085      	sub	sp, #20
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8006658:	2103      	movs	r1, #3
dhcp_reboot(struct netif *netif)
 800665a:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800665c:	4620      	mov	r0, r4
 800665e:	f7ff fd5d 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006662:	460a      	mov	r2, r1
 8006664:	f10d 030e 	add.w	r3, sp, #14
 8006668:	4621      	mov	r1, r4
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff fdd4 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 8006670:	4606      	mov	r6, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	d04b      	beq.n	800670e <dhcp_reboot.isra.0+0xbe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006676:	6845      	ldr	r5, [r0, #4]
 8006678:	2302      	movs	r3, #2
 800667a:	2239      	movs	r2, #57	; 0x39
 800667c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006680:	35f0      	adds	r5, #240	; 0xf0
 8006682:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8006750 <dhcp_reboot.isra.0+0x100>
 8006686:	4629      	mov	r1, r5
 8006688:	f7ff fd6c 	bl	8006164 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800668c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006690:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006692:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006696:	f7ff fd49 	bl	800612c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800669a:	2304      	movs	r3, #4
 800669c:	2232      	movs	r2, #50	; 0x32
 800669e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80066a0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80066a4:	f7ff fd5e 	bl	8006164 <dhcp_option>
 80066a8:	4680      	mov	r8, r0
 80066aa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80066ae:	69e0      	ldr	r0, [r4, #28]
 80066b0:	f002 f815 	bl	80086de <lwip_htonl>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4602      	mov	r2, r0
 80066b8:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066ba:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80066be:	f7ff fd87 	bl	80061d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066c2:	2303      	movs	r3, #3
 80066c4:	2237      	movs	r2, #55	; 0x37
 80066c6:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80066c8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80066cc:	f7ff fd4a 	bl	8006164 <dhcp_option>
 80066d0:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80066d4:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80066d8:	f819 2b01 	ldrb.w	r2, [r9], #1
 80066dc:	4629      	mov	r1, r5
 80066de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80066e2:	f7ff fd5d 	bl	80061a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80066e6:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80066ea:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80066ee:	d1f1      	bne.n	80066d4 <dhcp_reboot.isra.0+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80066f0:	4632      	mov	r2, r6
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7ff fe24 	bl	8006340 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80066f8:	4813      	ldr	r0, [pc, #76]	; (8006748 <dhcp_reboot.isra.0+0xf8>)
 80066fa:	9700      	str	r7, [sp, #0]
 80066fc:	2343      	movs	r3, #67	; 0x43
 80066fe:	4a13      	ldr	r2, [pc, #76]	; (800674c <dhcp_reboot.isra.0+0xfc>)
 8006700:	4631      	mov	r1, r6
 8006702:	6840      	ldr	r0, [r0, #4]
 8006704:	f006 fc7e 	bl	800d004 <udp_sendto_if>
    pbuf_free(p_out);
 8006708:	4630      	mov	r0, r6
 800670a:	f002 fda5 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 800670e:	79a3      	ldrb	r3, [r4, #6]
 8006710:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006712:	bf1c      	itt	ne
 8006714:	3301      	addne	r3, #1
 8006716:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006718:	79a3      	ldrb	r3, [r4, #6]
 800671a:	2b09      	cmp	r3, #9
 800671c:	bf96      	itet	ls
 800671e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006722:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8006726:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800672a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800672e:	bf9c      	itt	ls
 8006730:	00db      	lslls	r3, r3, #3
 8006732:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006734:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006738:	b29b      	uxth	r3, r3
 800673a:	fbb3 f3f2 	udiv	r3, r3, r2
 800673e:	8123      	strh	r3, [r4, #8]
}
 8006740:	b005      	add	sp, #20
 8006742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006746:	bf00      	nop
 8006748:	2000a564 	.word	0x2000a564
 800674c:	0800f130 	.word	0x0800f130
 8006750:	0800f12a 	.word	0x0800f12a

08006754 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8006754:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006756:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006758:	4d14      	ldr	r5, [pc, #80]	; (80067ac <dhcp_handle_ack.isra.0+0x58>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800675a:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800675c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006760:	7b2b      	ldrb	r3, [r5, #12]
 8006762:	b10b      	cbz	r3, 8006768 <dhcp_handle_ack.isra.0+0x14>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8006764:	6a2b      	ldr	r3, [r5, #32]
 8006766:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8006768:	7b6b      	ldrb	r3, [r5, #13]
 800676a:	b1b3      	cbz	r3, 800679a <dhcp_handle_ack.isra.0+0x46>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800676c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800676e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8006770:	7bab      	ldrb	r3, [r5, #14]
 8006772:	b1ab      	cbz	r3, 80067a0 <dhcp_handle_ack.isra.0+0x4c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8006774:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006776:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006778:	690b      	ldr	r3, [r1, #16]
 800677a:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800677c:	7beb      	ldrb	r3, [r5, #15]
 800677e:	b123      	cbz	r3, 800678a <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006780:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006782:	f001 ffac 	bl	80086de <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8006786:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006788:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800678a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800678c:	7c2b      	ldrb	r3, [r5, #16]
 800678e:	b11b      	cbz	r3, 8006798 <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8006790:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8006792:	f001 ffa4 	bl	80086de <lwip_htonl>
 8006796:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006798:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800679a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	e7e6      	b.n	800676e <dhcp_handle_ack.isra.0+0x1a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80067a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	e7e5      	b.n	8006776 <dhcp_handle_ack.isra.0+0x22>
 80067aa:	bf00      	nop
 80067ac:	2000a564 	.word	0x2000a564

080067b0 <dhcp_select.isra.0>:
dhcp_select(struct netif *netif)
 80067b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80067b4:	4607      	mov	r7, r0
dhcp_select(struct netif *netif)
 80067b6:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80067b8:	b948      	cbnz	r0, 80067ce <dhcp_select.isra.0+0x1e>
 80067ba:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <dhcp_select.isra.0+0x144>)
 80067bc:	f240 1277 	movw	r2, #375	; 0x177
 80067c0:	494d      	ldr	r1, [pc, #308]	; (80068f8 <dhcp_select.isra.0+0x148>)
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80067c2:	484e      	ldr	r0, [pc, #312]	; (80068fc <dhcp_select.isra.0+0x14c>)
}
 80067c4:	b005      	add	sp, #20
 80067c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80067ca:	f006 beed 	b.w	800d5a8 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80067ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80067d0:	b924      	cbnz	r4, 80067dc <dhcp_select.isra.0+0x2c>
 80067d2:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <dhcp_select.isra.0+0x144>)
 80067d4:	f240 1279 	movw	r2, #377	; 0x179
 80067d8:	4949      	ldr	r1, [pc, #292]	; (8006900 <dhcp_select.isra.0+0x150>)
 80067da:	e7f2      	b.n	80067c2 <dhcp_select.isra.0+0x12>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80067dc:	2101      	movs	r1, #1
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff fc9c 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80067e4:	2203      	movs	r2, #3
 80067e6:	f10d 030e 	add.w	r3, sp, #14
 80067ea:	4621      	mov	r1, r4
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff fd13 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 80067f2:	4606      	mov	r6, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d05e      	beq.n	80068b6 <dhcp_select.isra.0+0x106>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80067f8:	6845      	ldr	r5, [r0, #4]
 80067fa:	2302      	movs	r3, #2
 80067fc:	2239      	movs	r2, #57	; 0x39
 80067fe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006802:	35f0      	adds	r5, #240	; 0xf0
 8006804:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006910 <dhcp_select.isra.0+0x160>
 8006808:	4629      	mov	r1, r5
 800680a:	f7ff fcab 	bl	8006164 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800680e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006810:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006812:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006816:	f7ff fc89 	bl	800612c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800681a:	2304      	movs	r3, #4
 800681c:	2232      	movs	r2, #50	; 0x32
 800681e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006820:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006824:	f7ff fc9e 	bl	8006164 <dhcp_option>
 8006828:	4680      	mov	r8, r0
 800682a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800682e:	69e0      	ldr	r0, [r4, #28]
 8006830:	f001 ff55 	bl	80086de <lwip_htonl>
 8006834:	4629      	mov	r1, r5
 8006836:	4602      	mov	r2, r0
 8006838:	4640      	mov	r0, r8
 800683a:	f7ff fcc9 	bl	80061d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800683e:	2304      	movs	r3, #4
 8006840:	2236      	movs	r2, #54	; 0x36
 8006842:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006844:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006848:	f7ff fc8c 	bl	8006164 <dhcp_option>
 800684c:	4680      	mov	r8, r0
 800684e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006852:	69a0      	ldr	r0, [r4, #24]
 8006854:	f001 ff43 	bl	80086de <lwip_htonl>
 8006858:	4629      	mov	r1, r5
 800685a:	4602      	mov	r2, r0
 800685c:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800685e:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006862:	f7ff fcb5 	bl	80061d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006866:	2303      	movs	r3, #3
 8006868:	2237      	movs	r2, #55	; 0x37
 800686a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800686c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006870:	f7ff fc78 	bl	8006164 <dhcp_option>
 8006874:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006878:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800687c:	f819 2b01 	ldrb.w	r2, [r9], #1
 8006880:	4629      	mov	r1, r5
 8006882:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006886:	f7ff fc8b 	bl	80061a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800688a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800688e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006892:	d1f1      	bne.n	8006878 <dhcp_select.isra.0+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006894:	4632      	mov	r2, r6
 8006896:	4629      	mov	r1, r5
 8006898:	f7ff fd52 	bl	8006340 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800689c:	4b19      	ldr	r3, [pc, #100]	; (8006904 <dhcp_select.isra.0+0x154>)
 800689e:	481a      	ldr	r0, [pc, #104]	; (8006908 <dhcp_select.isra.0+0x158>)
 80068a0:	4631      	mov	r1, r6
 80068a2:	4a1a      	ldr	r2, [pc, #104]	; (800690c <dhcp_select.isra.0+0x15c>)
 80068a4:	e9cd 7300 	strd	r7, r3, [sp]
 80068a8:	2343      	movs	r3, #67	; 0x43
 80068aa:	6840      	ldr	r0, [r0, #4]
 80068ac:	f006 fb12 	bl	800ced4 <udp_sendto_if_src>
    pbuf_free(p_out);
 80068b0:	4630      	mov	r0, r6
 80068b2:	f002 fcd1 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 80068b6:	79a3      	ldrb	r3, [r4, #6]
 80068b8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80068ba:	bf1c      	itt	ne
 80068bc:	3301      	addne	r3, #1
 80068be:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80068c0:	79a2      	ldrb	r2, [r4, #6]
 80068c2:	2a05      	cmp	r2, #5
 80068c4:	bf97      	itett	ls
 80068c6:	2301      	movls	r3, #1
 80068c8:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80068cc:	4093      	lslls	r3, r2
 80068ce:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80068d2:	bf98      	it	ls
 80068d4:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80068d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80068dc:	bf9c      	itt	ls
 80068de:	00db      	lslls	r3, r3, #3
 80068e0:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80068e2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ec:	8123      	strh	r3, [r4, #8]
}
 80068ee:	b005      	add	sp, #20
 80068f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068f4:	08018c1c 	.word	0x08018c1c
 80068f8:	08018e72 	.word	0x08018e72
 80068fc:	08017fc5 	.word	0x08017fc5
 8006900:	08018e8d 	.word	0x08018e8d
 8006904:	0800f134 	.word	0x0800f134
 8006908:	2000a564 	.word	0x2000a564
 800690c:	0800f130 	.word	0x0800f130
 8006910:	0800f12a 	.word	0x0800f12a

08006914 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8006914:	4ba1      	ldr	r3, [pc, #644]	; (8006b9c <dhcp_recv+0x288>)
{
 8006916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800691a:	685e      	ldr	r6, [r3, #4]
{
 800691c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800691e:	6a73      	ldr	r3, [r6, #36]	; 0x24
{
 8006920:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006922:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8006924:	2b00      	cmp	r3, #0
 8006926:	d03c      	beq.n	80069a2 <dhcp_recv+0x8e>
 8006928:	791b      	ldrb	r3, [r3, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d039      	beq.n	80069a2 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800692e:	8953      	ldrh	r3, [r2, #10]
 8006930:	2b2b      	cmp	r3, #43	; 0x2b
 8006932:	d936      	bls.n	80069a2 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8006934:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8006936:	7813      	ldrb	r3, [r2, #0]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d132      	bne.n	80069a2 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800693c:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
 8006940:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 8006944:	f102 011c 	add.w	r1, r2, #28
 8006948:	2300      	movs	r3, #0
 800694a:	b2dd      	uxtb	r5, r3
 800694c:	42ac      	cmp	r4, r5
 800694e:	d901      	bls.n	8006954 <dhcp_recv+0x40>
 8006950:	2b06      	cmp	r3, #6
 8006952:	d11f      	bne.n	8006994 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8006954:	6850      	ldr	r0, [r2, #4]
 8006956:	f001 fec2 	bl	80086de <lwip_htonl>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4298      	cmp	r0, r3
 8006960:	d11f      	bne.n	80069a2 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 8006962:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8006bc4 <dhcp_recv+0x2b0>
 8006966:	2300      	movs	r3, #0
  if (p->len < DHCP_SNAME_OFS) {
 8006968:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 800696a:	f8c9 300d 	str.w	r3, [r9, #13]
  if (p->len < DHCP_SNAME_OFS) {
 800696e:	8952      	ldrh	r2, [r2, #10]
  dhcp_clear_all_options(dhcp);
 8006970:	f8c9 3009 	str.w	r3, [r9, #9]
  if (p->len < DHCP_SNAME_OFS) {
 8006974:	2a2b      	cmp	r2, #43	; 0x2b
 8006976:	d914      	bls.n	80069a2 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 8006978:	9a01      	ldr	r2, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 800697a:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 800697e:	9303      	str	r3, [sp, #12]
  options_idx_max = p->tot_len;
 8006980:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8006984:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	455b      	cmp	r3, fp
 800698a:	d910      	bls.n	80069ae <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	465c      	mov	r4, fp
 8006990:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006992:	e0db      	b.n	8006b4c <dhcp_recv+0x238>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006994:	f810 7b01 	ldrb.w	r7, [r0], #1
 8006998:	3301      	adds	r3, #1
 800699a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800699e:	42af      	cmp	r7, r5
 80069a0:	d0d3      	beq.n	800694a <dhcp_recv+0x36>
  pbuf_free(p);
 80069a2:	9801      	ldr	r0, [sp, #4]
}
 80069a4:	b009      	add	sp, #36	; 0x24
 80069a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80069aa:	f002 bc55 	b.w	8009258 <pbuf_free>
    options_idx = (u16_t)(options_idx - q->len);
 80069ae:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80069b2:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 80069b6:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 80069b8:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80069bc:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	d1e0      	bne.n	8006986 <dhcp_recv+0x72>
 80069c4:	e7ed      	b.n	80069a2 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 80069c6:	1ca3      	adds	r3, r4, #2
 80069c8:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 80069ca:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 80069cc:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 80069ce:	d3e8      	bcc.n	80069a2 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 80069d0:	1c60      	adds	r0, r4, #1
 80069d2:	897b      	ldrh	r3, [r7, #10]
 80069d4:	4298      	cmp	r0, r3
 80069d6:	da16      	bge.n	8006a06 <dhcp_recv+0xf2>
      len = options[offset + 1];
 80069d8:	9b05      	ldr	r3, [sp, #20]
 80069da:	4423      	add	r3, r4
 80069dc:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 80069de:	2a3b      	cmp	r2, #59	; 0x3b
 80069e0:	d854      	bhi.n	8006a8c <dhcp_recv+0x178>
 80069e2:	2a32      	cmp	r2, #50	; 0x32
 80069e4:	f200 8186 	bhi.w	8006cf4 <dhcp_recv+0x3e0>
 80069e8:	2a01      	cmp	r2, #1
 80069ea:	d013      	beq.n	8006a14 <dhcp_recv+0x100>
 80069ec:	2a03      	cmp	r2, #3
 80069ee:	d14d      	bne.n	8006a8c <dhcp_recv+0x178>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	f200 816c 	bhi.w	8006cce <dhcp_recv+0x3ba>
 80069f6:	4b6a      	ldr	r3, [pc, #424]	; (8006ba0 <dhcp_recv+0x28c>)
 80069f8:	f240 6233 	movw	r2, #1587	; 0x633
 80069fc:	4969      	ldr	r1, [pc, #420]	; (8006ba4 <dhcp_recv+0x290>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80069fe:	486a      	ldr	r0, [pc, #424]	; (8006ba8 <dhcp_recv+0x294>)
 8006a00:	f006 fdd2 	bl	800d5a8 <iprintf>
 8006a04:	e7cd      	b.n	80069a2 <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8136 	beq.w	8006c7a <dhcp_recv+0x366>
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	e7e4      	b.n	80069de <dhcp_recv+0xca>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	f000 8157 	beq.w	8006cc8 <dhcp_recv+0x3b4>
 8006a1a:	4b61      	ldr	r3, [pc, #388]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a1c:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a20:	4962      	ldr	r1, [pc, #392]	; (8006bac <dhcp_recv+0x298>)
 8006a22:	e7ec      	b.n	80069fe <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	f000 8156 	beq.w	8006cd6 <dhcp_recv+0x3c2>
 8006a2a:	4b5d      	ldr	r3, [pc, #372]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a2c:	f240 6241 	movw	r2, #1601	; 0x641
 8006a30:	e7f6      	b.n	8006a20 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d004      	beq.n	8006a40 <dhcp_recv+0x12c>
 8006a36:	4b5a      	ldr	r3, [pc, #360]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a38:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006a3c:	495c      	ldr	r1, [pc, #368]	; (8006bb0 <dhcp_recv+0x29c>)
 8006a3e:	e7de      	b.n	80069fe <dhcp_recv+0xea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8006a40:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8006a44:	f000 814a 	beq.w	8006cdc <dhcp_recv+0x3c8>
 8006a48:	4b55      	ldr	r3, [pc, #340]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a4a:	f240 6251 	movw	r2, #1617	; 0x651
 8006a4e:	4959      	ldr	r1, [pc, #356]	; (8006bb4 <dhcp_recv+0x2a0>)
 8006a50:	e7d5      	b.n	80069fe <dhcp_recv+0xea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	f000 8148 	beq.w	8006ce8 <dhcp_recv+0x3d4>
 8006a58:	4b51      	ldr	r3, [pc, #324]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a5a:	f240 6255 	movw	r2, #1621	; 0x655
 8006a5e:	e7ed      	b.n	8006a3c <dhcp_recv+0x128>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	f000 813e 	beq.w	8006ce2 <dhcp_recv+0x3ce>
 8006a66:	4b4e      	ldr	r3, [pc, #312]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a68:	f240 6259 	movw	r2, #1625	; 0x659
 8006a6c:	e7d8      	b.n	8006a20 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	f000 813a 	beq.w	8006ce8 <dhcp_recv+0x3d4>
 8006a74:	4b4a      	ldr	r3, [pc, #296]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a76:	f240 625d 	movw	r2, #1629	; 0x65d
 8006a7a:	e7d1      	b.n	8006a20 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	f000 8136 	beq.w	8006cee <dhcp_recv+0x3da>
 8006a82:	4b47      	ldr	r3, [pc, #284]	; (8006ba0 <dhcp_recv+0x28c>)
 8006a84:	f240 6261 	movw	r2, #1633	; 0x661
 8006a88:	e7ca      	b.n	8006a20 <dhcp_recv+0x10c>
    switch (op) {
 8006a8a:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8006a8c:	b9a2      	cbnz	r2, 8006ab8 <dhcp_recv+0x1a4>
      offset++;
 8006a8e:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8006a90:	897b      	ldrh	r3, [r7, #10]
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	d85a      	bhi.n	8006b4c <dhcp_recv+0x238>
      offset = (u16_t)(offset - q->len);
 8006a96:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8006a98:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8006a9c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8006a9e:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8006aa2:	4554      	cmp	r4, sl
 8006aa4:	f4bf af7d 	bcs.w	80069a2 <dhcp_recv+0x8e>
        q = q->next;
 8006aa8:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	d14c      	bne.n	8006b48 <dhcp_recv+0x234>
 8006aae:	4b3c      	ldr	r3, [pc, #240]	; (8006ba0 <dhcp_recv+0x28c>)
 8006ab0:	f240 629d 	movw	r2, #1693	; 0x69d
 8006ab4:	4940      	ldr	r1, [pc, #256]	; (8006bb8 <dhcp_recv+0x2a4>)
 8006ab6:	e7a2      	b.n	80069fe <dhcp_recv+0xea>
 8006ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8006abc:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8006ac0:	441c      	add	r4, r3
 8006ac2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8006ac6:	4294      	cmp	r4, r2
 8006ac8:	f73f af6b 	bgt.w	80069a2 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 8006acc:	9a04      	ldr	r2, [sp, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	d0db      	beq.n	8006a90 <dhcp_recv+0x17c>
        u32_t value = 0;
 8006ad8:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8006ada:	2d07      	cmp	r5, #7
        u32_t value = 0;
 8006adc:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8006ade:	d906      	bls.n	8006aee <dhcp_recv+0x1da>
 8006ae0:	4b2f      	ldr	r3, [pc, #188]	; (8006ba0 <dhcp_recv+0x28c>)
 8006ae2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8006ae6:	4935      	ldr	r1, [pc, #212]	; (8006bbc <dhcp_recv+0x2a8>)
 8006ae8:	482f      	ldr	r0, [pc, #188]	; (8006ba8 <dhcp_recv+0x294>)
 8006aea:	f006 fd5d 	bl	800d5a8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8006aee:	eb09 0305 	add.w	r3, r9, r5
 8006af2:	7a5b      	ldrb	r3, [r3, #9]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1cb      	bne.n	8006a90 <dhcp_recv+0x17c>
          copy_len = LWIP_MIN(decode_len, 4);
 8006af8:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	a907      	add	r1, sp, #28
 8006b00:	4638      	mov	r0, r7
 8006b02:	9204      	str	r2, [sp, #16]
 8006b04:	f002 fdce 	bl	80096a4 <pbuf_copy_partial>
 8006b08:	9a04      	ldr	r2, [sp, #16]
 8006b0a:	4282      	cmp	r2, r0
 8006b0c:	f47f af49 	bne.w	80069a2 <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8006b10:	f1b8 0f04 	cmp.w	r8, #4
 8006b14:	d10c      	bne.n	8006b30 <dhcp_recv+0x21c>
            value = lwip_ntohl(value);
 8006b16:	9807      	ldr	r0, [sp, #28]
 8006b18:	f001 fde1 	bl	80086de <lwip_htonl>
 8006b1c:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8006b1e:	eb09 0305 	add.w	r3, r9, r5
 8006b22:	2201      	movs	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 8006b24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
          dhcp_got_option(dhcp, decode_idx);
 8006b28:	725a      	strb	r2, [r3, #9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8006b2a:	9b07      	ldr	r3, [sp, #28]
 8006b2c:	616b      	str	r3, [r5, #20]
 8006b2e:	e7af      	b.n	8006a90 <dhcp_recv+0x17c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8006b30:	f1b8 0f01 	cmp.w	r8, #1
 8006b34:	d004      	beq.n	8006b40 <dhcp_recv+0x22c>
 8006b36:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <dhcp_recv+0x28c>)
 8006b38:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8006b3c:	4920      	ldr	r1, [pc, #128]	; (8006bc0 <dhcp_recv+0x2ac>)
 8006b3e:	e75e      	b.n	80069fe <dhcp_recv+0xea>
            value = ((u8_t *)&value)[0];
 8006b40:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8006b44:	9307      	str	r3, [sp, #28]
 8006b46:	e7ea      	b.n	8006b1e <dhcp_recv+0x20a>
        options = (u8_t *)q->payload;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006b4c:	4554      	cmp	r4, sl
 8006b4e:	d204      	bcs.n	8006b5a <dhcp_recv+0x246>
 8006b50:	9b05      	ldr	r3, [sp, #20]
 8006b52:	5d1a      	ldrb	r2, [r3, r4]
 8006b54:	2aff      	cmp	r2, #255	; 0xff
 8006b56:	f47f af36 	bne.w	80069c6 <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8006b5a:	f899 3009 	ldrb.w	r3, [r9, #9]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d132      	bne.n	8006bc8 <dhcp_recv+0x2b4>
  } else if (parse_sname_as_options) {
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d138      	bne.n	8006bda <dhcp_recv+0x2c6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8006b68:	f899 300a 	ldrb.w	r3, [r9, #10]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f43f af18 	beq.w	80069a2 <dhcp_recv+0x8e>
  msg_in = (struct dhcp_msg *)p->payload;
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8006b76:	f899 3018 	ldrb.w	r3, [r9, #24]
  if (msg_type == DHCP_ACK) {
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d148      	bne.n	8006c10 <dhcp_recv+0x2fc>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	795b      	ldrb	r3, [r3, #5]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d139      	bne.n	8006bfa <dhcp_recv+0x2e6>
      dhcp_handle_ack(netif, msg_in);
 8006b86:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006b88:	f7ff fde4 	bl	8006754 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8006b8c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
        dhcp_check(netif);
 8006b90:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8006b92:	071b      	lsls	r3, r3, #28
 8006b94:	d539      	bpl.n	8006c0a <dhcp_recv+0x2f6>
        dhcp_check(netif);
 8006b96:	f7ff fc6b 	bl	8006470 <dhcp_check>
 8006b9a:	e702      	b.n	80069a2 <dhcp_recv+0x8e>
 8006b9c:	2000a694 	.word	0x2000a694
 8006ba0:	08018c1c 	.word	0x08018c1c
 8006ba4:	08018eb0 	.word	0x08018eb0
 8006ba8:	08017fc5 	.word	0x08017fc5
 8006bac:	08018ea7 	.word	0x08018ea7
 8006bb0:	08018ec2 	.word	0x08018ec2
 8006bb4:	08018ecb 	.word	0x08018ecb
 8006bb8:	08018f06 	.word	0x08018f06
 8006bbc:	08018ee2 	.word	0x08018ee2
 8006bc0:	08018ef3 	.word	0x08018ef3
 8006bc4:	2000a564 	.word	0x2000a564
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006bc8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006bcc:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 8006bce:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8006bd0:	f889 2009 	strb.w	r2, [r9, #9]
    if (overload == DHCP_OVERLOAD_FILE) {
 8006bd4:	d00c      	beq.n	8006bf0 <dhcp_recv+0x2dc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d106      	bne.n	8006be8 <dhcp_recv+0x2d4>
    parse_sname_as_options = 0;
 8006bda:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8006bdc:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8006be0:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8006be4:	9303      	str	r3, [sp, #12]
 8006be6:	e6cd      	b.n	8006984 <dhcp_recv+0x70>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d1ba      	bne.n	8006b62 <dhcp_recv+0x24e>
      parse_sname_as_options = 1;
 8006bec:	2301      	movs	r3, #1
 8006bee:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8006bf0:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8006bf4:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8006bf8:	e6c4      	b.n	8006984 <dhcp_recv+0x70>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8006bfa:	3b03      	subs	r3, #3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	f63f aed0 	bhi.w	80069a2 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 8006c02:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006c04:	f7ff fda6 	bl	8006754 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff fc47 	bl	800649c <dhcp_bind>
 8006c0e:	e6c8      	b.n	80069a2 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	d115      	bne.n	8006c40 <dhcp_recv+0x32c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006c14:	9b02      	ldr	r3, [sp, #8]
 8006c16:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8006c18:	1eda      	subs	r2, r3, #3
 8006c1a:	2a02      	cmp	r2, #2
 8006c1c:	d902      	bls.n	8006c24 <dhcp_recv+0x310>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	f47f aebf 	bne.w	80069a2 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8006c24:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8006c26:	210c      	movs	r1, #12
 8006c28:	f7ff fa78 	bl	800611c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006c2c:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <dhcp_recv+0x414>)
 8006c2e:	4630      	mov	r0, r6
 8006c30:	461a      	mov	r2, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	f002 f918 	bl	8008e68 <netif_set_addr>
  dhcp_discover(netif);
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff fba1 	bl	8006380 <dhcp_discover>
}
 8006c3e:	e6b0      	b.n	80069a2 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f47f aeae 	bne.w	80069a2 <dhcp_recv+0x8e>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	f47f aea9 	bne.w	80069a2 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8006c50:	f899 300b 	ldrb.w	r3, [r9, #11]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f43f aea4 	beq.w	80069a2 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006c5a:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8006c5c:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006c5e:	f8d9 001c 	ldr.w	r0, [r9, #28]
    dhcp->request_timeout = 0; /* stop timer */
 8006c62:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006c64:	9102      	str	r1, [sp, #8]
 8006c66:	f001 fd3a 	bl	80086de <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006c6a:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8006c6c:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8006c6e:	4630      	mov	r0, r6
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006c70:	690b      	ldr	r3, [r1, #16]
 8006c72:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8006c74:	f7ff fd9c 	bl	80067b0 <dhcp_select.isra.0>
 8006c78:	e693      	b.n	80069a2 <dhcp_recv+0x8e>
    switch (op) {
 8006c7a:	2a3b      	cmp	r2, #59	; 0x3b
 8006c7c:	f63f af06 	bhi.w	8006a8c <dhcp_recv+0x178>
 8006c80:	2a32      	cmp	r2, #50	; 0x32
 8006c82:	d806      	bhi.n	8006c92 <dhcp_recv+0x37e>
 8006c84:	2a01      	cmp	r2, #1
 8006c86:	f43f aec8 	beq.w	8006a1a <dhcp_recv+0x106>
 8006c8a:	2a03      	cmp	r2, #3
 8006c8c:	f43f aeb3 	beq.w	80069f6 <dhcp_recv+0xe2>
 8006c90:	e6fc      	b.n	8006a8c <dhcp_recv+0x178>
 8006c92:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	f63f aef7 	bhi.w	8006a8a <dhcp_recv+0x176>
 8006c9c:	a101      	add	r1, pc, #4	; (adr r1, 8006ca4 <dhcp_recv+0x390>)
 8006c9e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006a2b 	.word	0x08006a2b
 8006ca8:	08006a37 	.word	0x08006a37
 8006cac:	08006a59 	.word	0x08006a59
 8006cb0:	08006a67 	.word	0x08006a67
 8006cb4:	08006a8b 	.word	0x08006a8b
 8006cb8:	08006a8b 	.word	0x08006a8b
 8006cbc:	08006a8b 	.word	0x08006a8b
 8006cc0:	08006a75 	.word	0x08006a75
 8006cc4:	08006a83 	.word	0x08006a83
 8006cc8:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8006cca:	2506      	movs	r5, #6
 8006ccc:	e6f8      	b.n	8006ac0 <dhcp_recv+0x1ac>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8006cce:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8006cd0:	f04f 0804 	mov.w	r8, #4
 8006cd4:	e6f4      	b.n	8006ac0 <dhcp_recv+0x1ac>
 8006cd6:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8006cd8:	2503      	movs	r5, #3
 8006cda:	e6f1      	b.n	8006ac0 <dhcp_recv+0x1ac>
    decode_len = len;
 8006cdc:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8006cde:	2500      	movs	r5, #0
 8006ce0:	e6ee      	b.n	8006ac0 <dhcp_recv+0x1ac>
 8006ce2:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8006ce4:	2502      	movs	r5, #2
 8006ce6:	e6eb      	b.n	8006ac0 <dhcp_recv+0x1ac>
 8006ce8:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8006cea:	461d      	mov	r5, r3
 8006cec:	e6e8      	b.n	8006ac0 <dhcp_recv+0x1ac>
 8006cee:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8006cf0:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8006cf2:	e6e5      	b.n	8006ac0 <dhcp_recv+0x1ac>
    switch (op) {
 8006cf4:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8006cf8:	2908      	cmp	r1, #8
 8006cfa:	f63f aec7 	bhi.w	8006a8c <dhcp_recv+0x178>
 8006cfe:	a501      	add	r5, pc, #4	; (adr r5, 8006d04 <dhcp_recv+0x3f0>)
 8006d00:	f855 f021 	ldr.w	pc, [r5, r1, lsl #2]
 8006d04:	08006a25 	.word	0x08006a25
 8006d08:	08006a33 	.word	0x08006a33
 8006d0c:	08006a53 	.word	0x08006a53
 8006d10:	08006a61 	.word	0x08006a61
 8006d14:	08006a8d 	.word	0x08006a8d
 8006d18:	08006a8d 	.word	0x08006a8d
 8006d1c:	08006a8d 	.word	0x08006a8d
 8006d20:	08006a6f 	.word	0x08006a6f
 8006d24:	08006a7d 	.word	0x08006a7d
 8006d28:	0800f134 	.word	0x0800f134

08006d2c <dhcp_network_changed>:
{
 8006d2c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8006d30:	4604      	mov	r4, r0
  if (!dhcp) {
 8006d32:	b1fd      	cbz	r5, 8006d74 <dhcp_network_changed+0x48>
  switch (dhcp->state) {
 8006d34:	796b      	ldrb	r3, [r5, #5]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d809      	bhi.n	8006d4e <dhcp_network_changed+0x22>
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d809      	bhi.n	8006d52 <dhcp_network_changed+0x26>
 8006d3e:	b1cb      	cbz	r3, 8006d74 <dhcp_network_changed+0x48>
      dhcp->tries = 0;
 8006d40:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8006d42:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8006d44:	71ab      	strb	r3, [r5, #6]
}
 8006d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8006d4a:	f7ff bb19 	b.w	8006380 <dhcp_discover>
  switch (dhcp->state) {
 8006d4e:	2b0a      	cmp	r3, #10
 8006d50:	d106      	bne.n	8006d60 <dhcp_network_changed+0x34>
      dhcp->tries = 0;
 8006d52:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8006d54:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8006d56:	71ab      	strb	r3, [r5, #6]
}
 8006d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8006d5c:	f7ff bc78 	b.w	8006650 <dhcp_reboot.isra.0>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8006d60:	2b0c      	cmp	r3, #12
 8006d62:	d9ed      	bls.n	8006d40 <dhcp_network_changed+0x14>
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <dhcp_network_changed+0x4c>)
 8006d66:	f240 326d 	movw	r2, #877	; 0x36d
 8006d6a:	4904      	ldr	r1, [pc, #16]	; (8006d7c <dhcp_network_changed+0x50>)
 8006d6c:	4804      	ldr	r0, [pc, #16]	; (8006d80 <dhcp_network_changed+0x54>)
 8006d6e:	f006 fc1b 	bl	800d5a8 <iprintf>
 8006d72:	e7e5      	b.n	8006d40 <dhcp_network_changed+0x14>
}
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	bf00      	nop
 8006d78:	08018c1c 	.word	0x08018c1c
 8006d7c:	08018f3d 	.word	0x08018f3d
 8006d80:	08017fc5 	.word	0x08017fc5

08006d84 <dhcp_arp_reply>:
{
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006d86:	4606      	mov	r6, r0
{
 8006d88:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006d8a:	b948      	cbnz	r0, 8006da0 <dhcp_arp_reply+0x1c>
 8006d8c:	4b28      	ldr	r3, [pc, #160]	; (8006e30 <dhcp_arp_reply+0xac>)
 8006d8e:	f240 328b 	movw	r2, #907	; 0x38b
 8006d92:	4928      	ldr	r1, [pc, #160]	; (8006e34 <dhcp_arp_reply+0xb0>)
 8006d94:	4828      	ldr	r0, [pc, #160]	; (8006e38 <dhcp_arp_reply+0xb4>)
}
 8006d96:	b007      	add	sp, #28
 8006d98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006d9c:	f006 bc04 	b.w	800d5a8 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8006da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	d041      	beq.n	8006e2a <dhcp_arp_reply+0xa6>
 8006da6:	7963      	ldrb	r3, [r4, #5]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d13e      	bne.n	8006e2a <dhcp_arp_reply+0xa6>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8006dac:	680a      	ldr	r2, [r1, #0]
 8006dae:	69e3      	ldr	r3, [r4, #28]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d13a      	bne.n	8006e2a <dhcp_arp_reply+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8006db4:	210c      	movs	r1, #12
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff f9b0 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f10d 0316 	add.w	r3, sp, #22
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff fa27 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 8006dca:	4605      	mov	r5, r0
 8006dcc:	b330      	cbz	r0, 8006e1c <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006dce:	6841      	ldr	r1, [r0, #4]
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	2232      	movs	r2, #50	; 0x32
 8006dd4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006dd8:	31f0      	adds	r1, #240	; 0xf0
 8006dda:	9103      	str	r1, [sp, #12]
 8006ddc:	f7ff f9c2 	bl	8006164 <dhcp_option>
 8006de0:	4607      	mov	r7, r0
 8006de2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006de6:	69e0      	ldr	r0, [r4, #28]
 8006de8:	f001 fc79 	bl	80086de <lwip_htonl>
 8006dec:	9903      	ldr	r1, [sp, #12]
 8006dee:	4602      	mov	r2, r0
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7ff f9ed 	bl	80061d0 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006df6:	462a      	mov	r2, r5
 8006df8:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006dfa:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006dfe:	f7ff fa9f 	bl	8006340 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <dhcp_arp_reply+0xb8>)
 8006e04:	4629      	mov	r1, r5
 8006e06:	480e      	ldr	r0, [pc, #56]	; (8006e40 <dhcp_arp_reply+0xbc>)
 8006e08:	4a0e      	ldr	r2, [pc, #56]	; (8006e44 <dhcp_arp_reply+0xc0>)
 8006e0a:	e9cd 6300 	strd	r6, r3, [sp]
 8006e0e:	2343      	movs	r3, #67	; 0x43
 8006e10:	6840      	ldr	r0, [r0, #4]
 8006e12:	f006 f85f 	bl	800ced4 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006e16:	4628      	mov	r0, r5
 8006e18:	f002 fa1e 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 8006e1c:	79a3      	ldrb	r3, [r4, #6]
 8006e1e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006e20:	bf1c      	itt	ne
 8006e22:	3301      	addne	r3, #1
 8006e24:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006e26:	2314      	movs	r3, #20
 8006e28:	8123      	strh	r3, [r4, #8]
}
 8006e2a:	b007      	add	sp, #28
 8006e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	08018c1c 	.word	0x08018c1c
 8006e34:	08018e03 	.word	0x08018e03
 8006e38:	08017fc5 	.word	0x08017fc5
 8006e3c:	0800f134 	.word	0x0800f134
 8006e40:	2000a564 	.word	0x2000a564
 8006e44:	0800f130 	.word	0x0800f130

08006e48 <dhcp_renew>:
{
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006e4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006e4e:	b086      	sub	sp, #24
 8006e50:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8006e52:	2105      	movs	r1, #5
 8006e54:	4620      	mov	r0, r4
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006e56:	2203      	movs	r2, #3
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8006e58:	f7ff f960 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006e5c:	f10d 0316 	add.w	r3, sp, #22
 8006e60:	4621      	mov	r1, r4
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff f9d8 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 8006e68:	4605      	mov	r5, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d056      	beq.n	8006f1c <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006e6e:	6841      	ldr	r1, [r0, #4]
 8006e70:	2302      	movs	r3, #2
 8006e72:	2239      	movs	r2, #57	; 0x39
 8006e74:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006e78:	31f0      	adds	r1, #240	; 0xf0
 8006e7a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006f28 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006e7e:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006e80:	9103      	str	r1, [sp, #12]
 8006e82:	f7ff f96f 	bl	8006164 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006e86:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8006e88:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006e8a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006e8e:	f7ff f94d 	bl	800612c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006e92:	9903      	ldr	r1, [sp, #12]
 8006e94:	2303      	movs	r3, #3
 8006e96:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006e98:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006e9c:	f7ff f962 	bl	8006164 <dhcp_option>
 8006ea0:	9903      	ldr	r1, [sp, #12]
 8006ea2:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006ea6:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006ea8:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006eac:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006eb0:	9103      	str	r1, [sp, #12]
 8006eb2:	f7ff f975 	bl	80061a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006eb6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006eba:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006ebc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006ec0:	d1f1      	bne.n	8006ea6 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	f7ff fa3c 	bl	8006340 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006ec8:	4816      	ldr	r0, [pc, #88]	; (8006f24 <dhcp_renew+0xdc>)
 8006eca:	9600      	str	r6, [sp, #0]
 8006ecc:	2343      	movs	r3, #67	; 0x43
 8006ece:	f104 0218 	add.w	r2, r4, #24
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	6840      	ldr	r0, [r0, #4]
 8006ed6:	f006 f895 	bl	800d004 <udp_sendto_if>
 8006eda:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8006edc:	4628      	mov	r0, r5
 8006ede:	f002 f9bb 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 8006ee2:	79a3      	ldrb	r3, [r4, #6]
}
 8006ee4:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006ee8:	bf1c      	itt	ne
 8006eea:	3301      	addne	r3, #1
 8006eec:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8006eee:	79a3      	ldrb	r3, [r4, #6]
 8006ef0:	2b09      	cmp	r3, #9
 8006ef2:	bf96      	itet	ls
 8006ef4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006ef8:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8006efc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006f00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8006f04:	bf9c      	itt	ls
 8006f06:	011b      	lslls	r3, r3, #4
 8006f08:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006f0a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f14:	8123      	strh	r3, [r4, #8]
}
 8006f16:	b006      	add	sp, #24
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8006f1c:	f04f 36ff 	mov.w	r6, #4294967295
 8006f20:	e7df      	b.n	8006ee2 <dhcp_renew+0x9a>
 8006f22:	bf00      	nop
 8006f24:	2000a564 	.word	0x2000a564
 8006f28:	0800f12a 	.word	0x0800f12a

08006f2c <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8006f2c:	b150      	cbz	r0, 8006f44 <dhcp_supplied_address+0x18>
 8006f2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006f30:	b140      	cbz	r0, 8006f44 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8006f32:	7940      	ldrb	r0, [r0, #5]
 8006f34:	280a      	cmp	r0, #10
 8006f36:	d006      	beq.n	8006f46 <dhcp_supplied_address+0x1a>
 8006f38:	3804      	subs	r0, #4
 8006f3a:	2801      	cmp	r0, #1
 8006f3c:	bf8c      	ite	hi
 8006f3e:	2000      	movhi	r0, #0
 8006f40:	2001      	movls	r0, #1
 8006f42:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8006f44:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8006f46:	2001      	movs	r0, #1
 8006f48:	e7fb      	b.n	8006f42 <dhcp_supplied_address+0x16>
	...

08006f4c <dhcp_release_and_stop>:
{
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006f4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006f50:	b087      	sub	sp, #28
 8006f52:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8006f54:	2c00      	cmp	r4, #0
 8006f56:	d050      	beq.n	8006ffa <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8006f58:	7963      	ldrb	r3, [r4, #5]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04d      	beq.n	8006ffa <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8006f62:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8006f64:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006f68:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8006f6c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8006f70:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8006f72:	81e3      	strh	r3, [r4, #14]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8006f78:	f7ff ffd8 	bl	8006f2c <dhcp_supplied_address>
 8006f7c:	b368      	cbz	r0, 8006fda <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8006f7e:	f10d 0312 	add.w	r3, sp, #18
 8006f82:	2207      	movs	r2, #7
 8006f84:	4621      	mov	r1, r4
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7ff f946 	bl	8006218 <dhcp_create_msg>
    if (p_out != NULL) {
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	b320      	cbz	r0, 8006fda <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006f90:	6841      	ldr	r1, [r0, #4]
 8006f92:	2304      	movs	r3, #4
 8006f94:	2236      	movs	r2, #54	; 0x36
 8006f96:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8006f9a:	31f0      	adds	r1, #240	; 0xf0
 8006f9c:	9103      	str	r1, [sp, #12]
 8006f9e:	f7ff f8e1 	bl	8006164 <dhcp_option>
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006fa8:	9805      	ldr	r0, [sp, #20]
 8006faa:	f001 fb98 	bl	80086de <lwip_htonl>
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff f90c 	bl	80061d0 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006fb8:	462a      	mov	r2, r5
 8006fba:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8006fbc:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006fc0:	f7ff f9be 	bl	8006340 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006fc4:	480e      	ldr	r0, [pc, #56]	; (8007000 <dhcp_release_and_stop+0xb4>)
 8006fc6:	2343      	movs	r3, #67	; 0x43
 8006fc8:	9600      	str	r6, [sp, #0]
 8006fca:	aa05      	add	r2, sp, #20
 8006fcc:	4629      	mov	r1, r5
 8006fce:	6840      	ldr	r0, [r0, #4]
 8006fd0:	f006 f818 	bl	800d004 <udp_sendto_if>
      pbuf_free(p_out);
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f002 f93f 	bl	8009258 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <dhcp_release_and_stop+0xb8>)
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4619      	mov	r1, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f001 ff41 	bl	8008e68 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f7ff f897 	bl	800611c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8006fee:	7923      	ldrb	r3, [r4, #4]
 8006ff0:	b11b      	cbz	r3, 8006ffa <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8006ff2:	f7ff fb11 	bl	8006618 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	7123      	strb	r3, [r4, #4]
}
 8006ffa:	b007      	add	sp, #28
 8006ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2000a564 	.word	0x2000a564
 8007004:	0800f134 	.word	0x0800f134

08007008 <dhcp_start>:
{
 8007008:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800700a:	4604      	mov	r4, r0
 800700c:	b950      	cbnz	r0, 8007024 <dhcp_start+0x1c>
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <dhcp_start+0x98>)
 8007010:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007014:	4923      	ldr	r1, [pc, #140]	; (80070a4 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007016:	4824      	ldr	r0, [pc, #144]	; (80070a8 <dhcp_start+0xa0>)
 8007018:	f006 fac6 	bl	800d5a8 <iprintf>
 800701c:	f06f 020f 	mvn.w	r2, #15
}
 8007020:	4610      	mov	r0, r2
 8007022:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007024:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007028:	07da      	lsls	r2, r3, #31
 800702a:	d404      	bmi.n	8007036 <dhcp_start+0x2e>
 800702c:	4b1c      	ldr	r3, [pc, #112]	; (80070a0 <dhcp_start+0x98>)
 800702e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8007032:	491e      	ldr	r1, [pc, #120]	; (80070ac <dhcp_start+0xa4>)
 8007034:	e7ef      	b.n	8007016 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007036:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8007038:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800703a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800703e:	d202      	bcs.n	8007046 <dhcp_start+0x3e>
    return ERR_MEM;
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	e7ec      	b.n	8007020 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8007046:	b9dd      	cbnz	r5, 8007080 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8007048:	2034      	movs	r0, #52	; 0x34
 800704a:	f001 fd5d 	bl	8008b08 <mem_malloc>
    if (dhcp == NULL) {
 800704e:	4605      	mov	r5, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	d0f5      	beq.n	8007040 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8007054:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8007056:	2234      	movs	r2, #52	; 0x34
 8007058:	2100      	movs	r1, #0
 800705a:	4628      	mov	r0, r5
 800705c:	f006 fa9c 	bl	800d598 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8007060:	f7ff faa4 	bl	80065ac <dhcp_inc_pcb_refcount>
 8007064:	4602      	mov	r2, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d1ea      	bne.n	8007040 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 800706a:	2301      	movs	r3, #1
 800706c:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800706e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8007072:	075b      	lsls	r3, r3, #29
 8007074:	d40a      	bmi.n	800708c <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8007076:	2102      	movs	r1, #2
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff f84f 	bl	800611c <dhcp_set_state>
    return ERR_OK;
 800707e:	e7cf      	b.n	8007020 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8007080:	792b      	ldrb	r3, [r5, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0e7      	beq.n	8007056 <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8007086:	f7ff fac7 	bl	8006618 <dhcp_dec_pcb_refcount>
 800708a:	e7e4      	b.n	8007056 <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff f977 	bl	8006380 <dhcp_discover>
  if (result != ERR_OK) {
 8007092:	4602      	mov	r2, r0
 8007094:	2800      	cmp	r0, #0
 8007096:	d0c3      	beq.n	8007020 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff ff57 	bl	8006f4c <dhcp_release_and_stop>
 800709e:	e7cf      	b.n	8007040 <dhcp_start+0x38>
 80070a0:	08018c1c 	.word	0x08018c1c
 80070a4:	08018e03 	.word	0x08018e03
 80070a8:	08017fc5 	.word	0x08017fc5
 80070ac:	08018f51 	.word	0x08018f51

080070b0 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80070b0:	4b59      	ldr	r3, [pc, #356]	; (8007218 <dhcp_coarse_tmr+0x168>)
{
 80070b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80070b6:	681d      	ldr	r5, [r3, #0]
{
 80070b8:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80070ba:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80070be:	4f57      	ldr	r7, [pc, #348]	; (800721c <dhcp_coarse_tmr+0x16c>)
 80070c0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8007220 <dhcp_coarse_tmr+0x170>
  NETIF_FOREACH(netif) {
 80070c4:	b915      	cbnz	r5, 80070cc <dhcp_coarse_tmr+0x1c>
}
 80070c6:	b007      	add	sp, #28
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80070cc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80070ce:	b17c      	cbz	r4, 80070f0 <dhcp_coarse_tmr+0x40>
 80070d0:	7963      	ldrb	r3, [r4, #5]
 80070d2:	b16b      	cbz	r3, 80070f0 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80070d4:	8aa1      	ldrh	r1, [r4, #20]
 80070d6:	b169      	cbz	r1, 80070f4 <dhcp_coarse_tmr+0x44>
 80070d8:	8a62      	ldrh	r2, [r4, #18]
 80070da:	3201      	adds	r2, #1
 80070dc:	b292      	uxth	r2, r2
 80070de:	4291      	cmp	r1, r2
 80070e0:	8262      	strh	r2, [r4, #18]
 80070e2:	d107      	bne.n	80070f4 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 80070e4:	4628      	mov	r0, r5
 80070e6:	f7ff ff31 	bl	8006f4c <dhcp_release_and_stop>
        dhcp_start(netif);
 80070ea:	4628      	mov	r0, r5
 80070ec:	f7ff ff8c 	bl	8007008 <dhcp_start>
  NETIF_FOREACH(netif) {
 80070f0:	682d      	ldr	r5, [r5, #0]
 80070f2:	e7e7      	b.n	80070c4 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80070f4:	8a22      	ldrh	r2, [r4, #16]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	d073      	beq.n	80071e2 <dhcp_coarse_tmr+0x132>
 80070fa:	1e51      	subs	r1, r2, #1
 80070fc:	2a01      	cmp	r2, #1
 80070fe:	8221      	strh	r1, [r4, #16]
 8007100:	d16f      	bne.n	80071e2 <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007102:	3b01      	subs	r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b09      	cmp	r3, #9
 8007108:	d8f2      	bhi.n	80070f0 <dhcp_coarse_tmr+0x40>
 800710a:	fa26 f303 	lsr.w	r3, r6, r3
 800710e:	07db      	lsls	r3, r3, #31
 8007110:	d5ee      	bpl.n	80070f0 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8007112:	2104      	movs	r1, #4
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff f801 	bl	800611c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800711a:	2203      	movs	r2, #3
 800711c:	f10d 0316 	add.w	r3, sp, #22
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f7ff f878 	bl	8006218 <dhcp_create_msg>
  if (p_out != NULL) {
 8007128:	4681      	mov	r9, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	d038      	beq.n	80071a0 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800712e:	6841      	ldr	r1, [r0, #4]
 8007130:	2302      	movs	r3, #2
 8007132:	2239      	movs	r2, #57	; 0x39
 8007134:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007138:	31f0      	adds	r1, #240	; 0xf0
 800713a:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8007224 <dhcp_coarse_tmr+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800713e:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007142:	9103      	str	r1, [sp, #12]
 8007144:	f7ff f80e 	bl	8006164 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007148:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800714a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800714c:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007150:	f7fe ffec 	bl	800612c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	2303      	movs	r3, #3
 8007158:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800715a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800715e:	f7ff f801 	bl	8006164 <dhcp_option>
 8007162:	9903      	ldr	r1, [sp, #12]
 8007164:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007168:	f10a 3aff 	add.w	sl, sl, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800716c:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8007170:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007174:	9103      	str	r1, [sp, #12]
 8007176:	f7ff f813 	bl	80061a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800717a:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 800717e:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007180:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007184:	d1f0      	bne.n	8007168 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007186:	464a      	mov	r2, r9
 8007188:	f7ff f8da 	bl	8006340 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800718c:	2343      	movs	r3, #67	; 0x43
 800718e:	4642      	mov	r2, r8
 8007190:	4649      	mov	r1, r9
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	9500      	str	r5, [sp, #0]
 8007196:	f005 ff35 	bl	800d004 <udp_sendto_if>
    pbuf_free(p_out);
 800719a:	4648      	mov	r0, r9
 800719c:	f002 f85c 	bl	8009258 <pbuf_free>
  if (dhcp->tries < 255) {
 80071a0:	79a3      	ldrb	r3, [r4, #6]
 80071a2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80071a4:	bf1c      	itt	ne
 80071a6:	3301      	addne	r3, #1
 80071a8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80071aa:	79a3      	ldrb	r3, [r4, #6]
 80071ac:	2b09      	cmp	r3, #9
 80071ae:	bf96      	itet	ls
 80071b0:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80071b4:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80071b8:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80071bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80071c0:	bf9c      	itt	ls
 80071c2:	00db      	lslls	r3, r3, #3
 80071c4:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80071c6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80071d0:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80071d2:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80071d4:	8aa3      	ldrh	r3, [r4, #20]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	2b01      	cmp	r3, #1
 80071da:	dd89      	ble.n	80070f0 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80071dc:	105b      	asrs	r3, r3, #1
 80071de:	8223      	strh	r3, [r4, #16]
 80071e0:	e786      	b.n	80070f0 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80071e2:	89e2      	ldrh	r2, [r4, #14]
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d083      	beq.n	80070f0 <dhcp_coarse_tmr+0x40>
 80071e8:	1e51      	subs	r1, r2, #1
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	81e1      	strh	r1, [r4, #14]
 80071ee:	f47f af7f 	bne.w	80070f0 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80071f2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 80071f6:	2a01      	cmp	r2, #1
 80071f8:	d002      	beq.n	8007200 <dhcp_coarse_tmr+0x150>
 80071fa:	2b0a      	cmp	r3, #10
 80071fc:	f47f af78 	bne.w	80070f0 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff fe21 	bl	8006e48 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	8a62      	ldrh	r2, [r4, #18]
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800720e:	bfc4      	itt	gt
 8007210:	105b      	asrgt	r3, r3, #1
 8007212:	81e3      	strhgt	r3, [r4, #14]
 8007214:	e76c      	b.n	80070f0 <dhcp_coarse_tmr+0x40>
 8007216:	bf00      	nop
 8007218:	2000e3fc 	.word	0x2000e3fc
 800721c:	2000a564 	.word	0x2000a564
 8007220:	0800f130 	.word	0x0800f130
 8007224:	0800f12a 	.word	0x0800f12a

08007228 <dhcp_fine_tmr>:
{
 8007228:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800722a:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 800722c:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 800722e:	681c      	ldr	r4, [r3, #0]
 8007230:	b904      	cbnz	r4, 8007234 <dhcp_fine_tmr+0xc>
}
 8007232:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007234:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8007236:	b123      	cbz	r3, 8007242 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8007238:	891a      	ldrh	r2, [r3, #8]
 800723a:	2a01      	cmp	r2, #1
 800723c:	d903      	bls.n	8007246 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800723e:	3a01      	subs	r2, #1
 8007240:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8007242:	6824      	ldr	r4, [r4, #0]
 8007244:	e7f4      	b.n	8007230 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8007246:	d1fc      	bne.n	8007242 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007248:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800724a:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800724c:	2a0c      	cmp	r2, #12
 800724e:	d001      	beq.n	8007254 <dhcp_fine_tmr+0x2c>
 8007250:	2a06      	cmp	r2, #6
 8007252:	d103      	bne.n	800725c <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8007254:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8007256:	f7ff f893 	bl	8006380 <dhcp_discover>
 800725a:	e7f2      	b.n	8007242 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800725c:	2a01      	cmp	r2, #1
 800725e:	d10c      	bne.n	800727a <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8007260:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8007262:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8007264:	2b05      	cmp	r3, #5
 8007266:	d802      	bhi.n	800726e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8007268:	f7ff faa2 	bl	80067b0 <dhcp_select.isra.0>
 800726c:	e7e9      	b.n	8007242 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 800726e:	f7ff fe6d 	bl	8006f4c <dhcp_release_and_stop>
      dhcp_start(netif);
 8007272:	4620      	mov	r0, r4
 8007274:	f7ff fec8 	bl	8007008 <dhcp_start>
 8007278:	e7e3      	b.n	8007242 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800727a:	2a08      	cmp	r2, #8
 800727c:	d109      	bne.n	8007292 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 800727e:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8007280:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8007282:	2b01      	cmp	r3, #1
 8007284:	d802      	bhi.n	800728c <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8007286:	f7ff f8f3 	bl	8006470 <dhcp_check>
 800728a:	e7da      	b.n	8007242 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 800728c:	f7ff f906 	bl	800649c <dhcp_bind>
 8007290:	e7d7      	b.n	8007242 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8007292:	2a03      	cmp	r2, #3
 8007294:	d1d5      	bne.n	8007242 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8007296:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8007298:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800729a:	2b01      	cmp	r3, #1
 800729c:	d8db      	bhi.n	8007256 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 800729e:	f7ff f9d7 	bl	8006650 <dhcp_reboot.isra.0>
 80072a2:	e7ce      	b.n	8007242 <dhcp_fine_tmr+0x1a>
 80072a4:	2000e3fc 	.word	0x2000e3fc

080072a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80072a8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80072aa:	2618      	movs	r6, #24
 80072ac:	4c07      	ldr	r4, [pc, #28]	; (80072cc <etharp_free_entry+0x24>)
{
 80072ae:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80072b0:	4346      	muls	r6, r0
 80072b2:	59a0      	ldr	r0, [r4, r6]
 80072b4:	b118      	cbz	r0, 80072be <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80072b6:	f001 ffcf 	bl	8009258 <pbuf_free>
    arp_table[i].q = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80072be:	2018      	movs	r0, #24
 80072c0:	2300      	movs	r3, #0
 80072c2:	fb00 4405 	mla	r4, r0, r5, r4
 80072c6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	bf00      	nop
 80072cc:	2000a598 	.word	0x2000a598

080072d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80072d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80072d6:	f04f 0e0a 	mov.w	lr, #10
{
 80072da:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80072dc:	4699      	mov	r9, r3
 80072de:	469b      	mov	fp, r3
 80072e0:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 80072e2:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80072e4:	4675      	mov	r5, lr
 80072e6:	46f0      	mov	r8, lr
{
 80072e8:	e9cd 2100 	strd	r2, r1, [sp]
 80072ec:	4a3a      	ldr	r2, [pc, #232]	; (80073d8 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80072ee:	2c0a      	cmp	r4, #10
 80072f0:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 80072f2:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80072f6:	d11a      	bne.n	800732e <etharp_find_entry+0x5e>
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	d05d      	beq.n	80073ba <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80072fe:	b156      	cbz	r6, 8007316 <etharp_find_entry+0x46>
 8007300:	6831      	ldr	r1, [r6, #0]
 8007302:	6857      	ldr	r7, [r2, #4]
 8007304:	42b9      	cmp	r1, r7
 8007306:	d106      	bne.n	8007316 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8007308:	9900      	ldr	r1, [sp, #0]
 800730a:	2900      	cmp	r1, #0
 800730c:	d048      	beq.n	80073a0 <etharp_find_entry+0xd0>
 800730e:	6891      	ldr	r1, [r2, #8]
 8007310:	9f00      	ldr	r7, [sp, #0]
 8007312:	42b9      	cmp	r1, r7
 8007314:	d044      	beq.n	80073a0 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8007316:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800731a:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 800731c:	d148      	bne.n	80073b0 <etharp_find_entry+0xe0>
        if (arp_table[i].q != NULL) {
 800731e:	6817      	ldr	r7, [r2, #0]
 8007320:	2f00      	cmp	r7, #0
 8007322:	d040      	beq.n	80073a6 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8007324:	4561      	cmp	r1, ip
 8007326:	d305      	bcc.n	8007334 <etharp_find_entry+0x64>
 8007328:	468c      	mov	ip, r1
 800732a:	4686      	mov	lr, r0
 800732c:	e002      	b.n	8007334 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 800732e:	f1ba 0f00 	cmp.w	sl, #0
 8007332:	d1e4      	bne.n	80072fe <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007334:	3301      	adds	r3, #1
 8007336:	3218      	adds	r2, #24
 8007338:	2b0a      	cmp	r3, #10
 800733a:	d1d8      	bne.n	80072ee <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d143      	bne.n	80073ca <etharp_find_entry+0xfa>
 8007342:	2c0a      	cmp	r4, #10
 8007344:	d111      	bne.n	800736a <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8007346:	2d0a      	cmp	r5, #10
 8007348:	d039      	beq.n	80073be <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800734a:	2318      	movs	r3, #24
 800734c:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <etharp_find_entry+0x108>)
 800734e:	436b      	muls	r3, r5
 8007350:	58d3      	ldr	r3, [r2, r3]
 8007352:	b133      	cbz	r3, 8007362 <etharp_find_entry+0x92>
 8007354:	4b21      	ldr	r3, [pc, #132]	; (80073dc <etharp_find_entry+0x10c>)
 8007356:	f240 126d 	movw	r2, #365	; 0x16d
 800735a:	4921      	ldr	r1, [pc, #132]	; (80073e0 <etharp_find_entry+0x110>)
 800735c:	4821      	ldr	r0, [pc, #132]	; (80073e4 <etharp_find_entry+0x114>)
 800735e:	f006 f923 	bl	800d5a8 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8007362:	462c      	mov	r4, r5
 8007364:	4628      	mov	r0, r5
 8007366:	f7ff ff9f 	bl	80072a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800736a:	4d1b      	ldr	r5, [pc, #108]	; (80073d8 <etharp_find_entry+0x108>)
 800736c:	2318      	movs	r3, #24
 800736e:	fb03 5304 	mla	r3, r3, r4, r5
 8007372:	7d1b      	ldrb	r3, [r3, #20]
 8007374:	b133      	cbz	r3, 8007384 <etharp_find_entry+0xb4>
 8007376:	4b19      	ldr	r3, [pc, #100]	; (80073dc <etharp_find_entry+0x10c>)
 8007378:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800737c:	491a      	ldr	r1, [pc, #104]	; (80073e8 <etharp_find_entry+0x118>)
 800737e:	4819      	ldr	r0, [pc, #100]	; (80073e4 <etharp_find_entry+0x114>)
 8007380:	f006 f912 	bl	800d5a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8007384:	b126      	cbz	r6, 8007390 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007386:	2318      	movs	r3, #24
 8007388:	6832      	ldr	r2, [r6, #0]
 800738a:	fb03 5304 	mla	r3, r3, r4, r5
 800738e:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8007390:	2318      	movs	r3, #24
 8007392:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8007394:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8007396:	fb03 5304 	mla	r3, r3, r4, r5
 800739a:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = netif;
 800739c:	9a00      	ldr	r2, [sp, #0]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80073a6:	4559      	cmp	r1, fp
 80073a8:	d3c4      	bcc.n	8007334 <etharp_find_entry+0x64>
 80073aa:	468b      	mov	fp, r1
 80073ac:	4680      	mov	r8, r0
 80073ae:	e7c1      	b.n	8007334 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80073b0:	4549      	cmp	r1, r9
 80073b2:	d3bf      	bcc.n	8007334 <etharp_find_entry+0x64>
 80073b4:	4689      	mov	r9, r1
 80073b6:	4605      	mov	r5, r0
 80073b8:	e7bc      	b.n	8007334 <etharp_find_entry+0x64>
 80073ba:	4604      	mov	r4, r0
 80073bc:	e7ba      	b.n	8007334 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80073be:	f1b8 0f0a 	cmp.w	r8, #10
 80073c2:	d105      	bne.n	80073d0 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80073c4:	f1be 0f0a 	cmp.w	lr, #10
 80073c8:	d104      	bne.n	80073d4 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	e7e7      	b.n	80073a0 <etharp_find_entry+0xd0>
 80073d0:	4645      	mov	r5, r8
 80073d2:	e7c6      	b.n	8007362 <etharp_find_entry+0x92>
 80073d4:	4675      	mov	r5, lr
 80073d6:	e7c4      	b.n	8007362 <etharp_find_entry+0x92>
 80073d8:	2000a598 	.word	0x2000a598
 80073dc:	08018f72 	.word	0x08018f72
 80073e0:	08018fe7 	.word	0x08018fe7
 80073e4:	08017fc5 	.word	0x08017fc5
 80073e8:	08018ffe 	.word	0x08018ffe

080073ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80073ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80073f4:	4688      	mov	r8, r1
 80073f6:	4691      	mov	r9, r2
 80073f8:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80073fa:	4607      	mov	r7, r0
 80073fc:	b930      	cbnz	r0, 800740c <etharp_raw+0x20>
 80073fe:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <etharp_raw+0xc8>)
 8007400:	f240 4257 	movw	r2, #1111	; 0x457
 8007404:	492c      	ldr	r1, [pc, #176]	; (80074b8 <etharp_raw+0xcc>)
 8007406:	482d      	ldr	r0, [pc, #180]	; (80074bc <etharp_raw+0xd0>)
 8007408:	f006 f8ce 	bl	800d5a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800740c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007410:	211c      	movs	r1, #28
 8007412:	200e      	movs	r0, #14
 8007414:	f001 ff88 	bl	8009328 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8007418:	4605      	mov	r5, r0
 800741a:	2800      	cmp	r0, #0
 800741c:	d047      	beq.n	80074ae <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800741e:	8943      	ldrh	r3, [r0, #10]
 8007420:	2b1b      	cmp	r3, #27
 8007422:	d806      	bhi.n	8007432 <etharp_raw+0x46>
 8007424:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <etharp_raw+0xc8>)
 8007426:	f240 4262 	movw	r2, #1122	; 0x462
 800742a:	4925      	ldr	r1, [pc, #148]	; (80074c0 <etharp_raw+0xd4>)
 800742c:	4823      	ldr	r0, [pc, #140]	; (80074bc <etharp_raw+0xd0>)
 800742e:	f006 f8bb 	bl	800d5a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8007432:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8007434:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8007438:	f001 f94e 	bl	80086d8 <lwip_htons>
 800743c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800743e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007442:	2b06      	cmp	r3, #6
 8007444:	d006      	beq.n	8007454 <etharp_raw+0x68>
 8007446:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <etharp_raw+0xc8>)
 8007448:	f240 4269 	movw	r2, #1129	; 0x469
 800744c:	491d      	ldr	r1, [pc, #116]	; (80074c4 <etharp_raw+0xd8>)
 800744e:	481b      	ldr	r0, [pc, #108]	; (80074bc <etharp_raw+0xd0>)
 8007450:	f006 f8aa 	bl	800d5a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007454:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8007456:	4642      	mov	r2, r8
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007460:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007462:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8007464:	f8da 3000 	ldr.w	r3, [sl]
 8007468:	f8c4 3012 	str.w	r3, [r4, #18]
 800746c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8007470:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8007472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800747a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800747c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800747e:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8007480:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007482:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007484:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007486:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007488:	2308      	movs	r3, #8
 800748a:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800748c:	2306      	movs	r3, #6
 800748e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8007490:	2304      	movs	r3, #4
 8007492:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8007494:	f640 0306 	movw	r3, #2054	; 0x806
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	464b      	mov	r3, r9
 800749c:	f005 fedc 	bl	800d258 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80074a0:	4628      	mov	r0, r5
 80074a2:	f001 fed9 	bl	8009258 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80074a6:	4630      	mov	r0, r6
}
 80074a8:	b002      	add	sp, #8
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	e7f9      	b.n	80074a8 <etharp_raw+0xbc>
 80074b4:	08018f72 	.word	0x08018f72
 80074b8:	08018e03 	.word	0x08018e03
 80074bc:	08017fc5 	.word	0x08017fc5
 80074c0:	08019027 	.word	0x08019027
 80074c4:	08019058 	.word	0x08019058

080074c8 <etharp_cleanup_netif>:
{
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4606      	mov	r6, r0
 80074cc:	4d07      	ldr	r5, [pc, #28]	; (80074ec <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80074ce:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80074d0:	7d2b      	ldrb	r3, [r5, #20]
 80074d2:	b12b      	cbz	r3, 80074e0 <etharp_cleanup_netif+0x18>
 80074d4:	68ab      	ldr	r3, [r5, #8]
 80074d6:	42b3      	cmp	r3, r6
 80074d8:	d102      	bne.n	80074e0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff fee4 	bl	80072a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80074e0:	3401      	adds	r4, #1
 80074e2:	3518      	adds	r5, #24
 80074e4:	2c0a      	cmp	r4, #10
 80074e6:	d1f3      	bne.n	80074d0 <etharp_cleanup_netif+0x8>
}
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	bf00      	nop
 80074ec:	2000a598 	.word	0x2000a598

080074f0 <etharp_input>:
{
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4607      	mov	r7, r0
 80074f6:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80074f8:	460c      	mov	r4, r1
 80074fa:	b949      	cbnz	r1, 8007510 <etharp_input+0x20>
 80074fc:	4b4f      	ldr	r3, [pc, #316]	; (800763c <etharp_input+0x14c>)
 80074fe:	f240 228a 	movw	r2, #650	; 0x28a
 8007502:	494f      	ldr	r1, [pc, #316]	; (8007640 <etharp_input+0x150>)
 8007504:	484f      	ldr	r0, [pc, #316]	; (8007644 <etharp_input+0x154>)
}
 8007506:	b008      	add	sp, #32
 8007508:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800750c:	f006 b84c 	b.w	800d5a8 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 8007510:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007512:	882b      	ldrh	r3, [r5, #0]
 8007514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007518:	d108      	bne.n	800752c <etharp_input+0x3c>
 800751a:	792b      	ldrb	r3, [r5, #4]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d105      	bne.n	800752c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007520:	796b      	ldrb	r3, [r5, #5]
 8007522:	2b04      	cmp	r3, #4
 8007524:	d102      	bne.n	800752c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007526:	886b      	ldrh	r3, [r5, #2]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d005      	beq.n	8007538 <etharp_input+0x48>
    pbuf_free(p);
 800752c:	4638      	mov	r0, r7
}
 800752e:	b008      	add	sp, #32
 8007530:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007534:	f001 be90 	b.w	8009258 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007538:	f8d5 300e 	ldr.w	r3, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800753c:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007540:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007542:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8007544:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007546:	2e00      	cmp	r6, #0
 8007548:	d05e      	beq.n	8007608 <etharp_input+0x118>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800754a:	1af3      	subs	r3, r6, r3
 800754c:	425e      	negs	r6, r3
 800754e:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007550:	f1c6 0a02 	rsb	sl, r6, #2
 8007554:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007558:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800755c:	2b06      	cmp	r3, #6
 800755e:	d006      	beq.n	800756e <etharp_input+0x7e>
 8007560:	4b36      	ldr	r3, [pc, #216]	; (800763c <etharp_input+0x14c>)
 8007562:	f240 12a9 	movw	r2, #425	; 0x1a9
 8007566:	4938      	ldr	r1, [pc, #224]	; (8007648 <etharp_input+0x158>)
 8007568:	4836      	ldr	r0, [pc, #216]	; (8007644 <etharp_input+0x154>)
 800756a:	f006 f81d 	bl	800d5a8 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800756e:	9807      	ldr	r0, [sp, #28]
 8007570:	2800      	cmp	r0, #0
 8007572:	d03c      	beq.n	80075ee <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007574:	4621      	mov	r1, r4
 8007576:	f000 fcba 	bl	8007eee <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800757a:	4681      	mov	r9, r0
 800757c:	bbb8      	cbnz	r0, 80075ee <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007584:	2be0      	cmp	r3, #224	; 0xe0
 8007586:	d032      	beq.n	80075ee <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8007588:	4622      	mov	r2, r4
 800758a:	4651      	mov	r1, sl
 800758c:	a807      	add	r0, sp, #28
 800758e:	f7ff fe9f 	bl	80072d0 <etharp_find_entry>
  if (i < 0) {
 8007592:	1e03      	subs	r3, r0, #0
 8007594:	db2b      	blt.n	80075ee <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007596:	2018      	movs	r0, #24
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <etharp_input+0x15c>)
 800759a:	f04f 0e02 	mov.w	lr, #2
 800759e:	fb00 fc03 	mul.w	ip, r0, r3
 80075a2:	eb02 010c 	add.w	r1, r2, ip
 80075a6:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80075aa:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 80075ae:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80075b0:	fb13 e300 	smlabb	r3, r3, r0, lr
 80075b4:	68a8      	ldr	r0, [r5, #8]
 80075b6:	eb02 0e03 	add.w	lr, r2, r3
 80075ba:	50d0      	str	r0, [r2, r3]
 80075bc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80075c0:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 80075c4:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 80075c8:	f852 100c 	ldr.w	r1, [r2, ip]
 80075cc:	b179      	cbz	r1, 80075ee <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80075ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80075d2:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4643      	mov	r3, r8
 80075e0:	9105      	str	r1, [sp, #20]
 80075e2:	f005 fe39 	bl	800d258 <ethernet_output>
    pbuf_free(p);
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	4608      	mov	r0, r1
 80075ea:	f001 fe35 	bl	8009258 <pbuf_free>
  switch (hdr->opcode) {
 80075ee:	88eb      	ldrh	r3, [r5, #6]
 80075f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f4:	d00b      	beq.n	800760e <etharp_input+0x11e>
 80075f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fa:	d019      	beq.n	8007630 <etharp_input+0x140>
  pbuf_free(p);
 80075fc:	4638      	mov	r0, r7
 80075fe:	f001 fe2b 	bl	8009258 <pbuf_free>
}
 8007602:	b008      	add	sp, #32
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007608:	f04f 0a02 	mov.w	sl, #2
 800760c:	e7a4      	b.n	8007558 <etharp_input+0x68>
      if (for_us) {
 800760e:	2e00      	cmp	r6, #0
 8007610:	d0f4      	beq.n	80075fc <etharp_input+0x10c>
        etharp_raw(netif,
 8007612:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007614:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8007618:	4620      	mov	r0, r4
 800761a:	9203      	str	r2, [sp, #12]
 800761c:	aa07      	add	r2, sp, #28
 800761e:	4619      	mov	r1, r3
 8007620:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007624:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8007626:	9200      	str	r2, [sp, #0]
 8007628:	4642      	mov	r2, r8
 800762a:	f7ff fedf 	bl	80073ec <etharp_raw>
 800762e:	e7e5      	b.n	80075fc <etharp_input+0x10c>
      dhcp_arp_reply(netif, &sipaddr);
 8007630:	a907      	add	r1, sp, #28
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff fba6 	bl	8006d84 <dhcp_arp_reply>
      break;
 8007638:	e7e0      	b.n	80075fc <etharp_input+0x10c>
 800763a:	bf00      	nop
 800763c:	08018f72 	.word	0x08018f72
 8007640:	08018e03 	.word	0x08018e03
 8007644:	08017fc5 	.word	0x08017fc5
 8007648:	080190da 	.word	0x080190da
 800764c:	2000a598 	.word	0x2000a598

08007650 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007652:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007654:	2401      	movs	r4, #1
 8007656:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800765a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800765c:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8007660:	4904      	ldr	r1, [pc, #16]	; (8007674 <etharp_request+0x24>)
 8007662:	9200      	str	r2, [sp, #0]
 8007664:	9101      	str	r1, [sp, #4]
 8007666:	4619      	mov	r1, r3
 8007668:	4a03      	ldr	r2, [pc, #12]	; (8007678 <etharp_request+0x28>)
 800766a:	f7ff febf 	bl	80073ec <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800766e:	b004      	add	sp, #16
 8007670:	bd10      	pop	{r4, pc}
 8007672:	bf00      	nop
 8007674:	0800f28a 	.word	0x0800f28a
 8007678:	0800f284 	.word	0x0800f284

0800767c <etharp_tmr>:
{
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	4c13      	ldr	r4, [pc, #76]	; (80076cc <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007680:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007682:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007684:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8007686:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8007688:	b16a      	cbz	r2, 80076a6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800768a:	8a63      	ldrh	r3, [r4, #18]
 800768c:	3301      	adds	r3, #1
 800768e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007690:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8007694:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007696:	d203      	bcs.n	80076a0 <etharp_tmr+0x24>
 8007698:	2a01      	cmp	r2, #1
 800769a:	d109      	bne.n	80076b0 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800769c:	2b04      	cmp	r3, #4
 800769e:	d90f      	bls.n	80076c0 <etharp_tmr+0x44>
        etharp_free_entry(i);
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7ff fe01 	bl	80072a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80076a6:	3501      	adds	r5, #1
 80076a8:	3418      	adds	r4, #24
 80076aa:	2d0a      	cmp	r5, #10
 80076ac:	d1eb      	bne.n	8007686 <etharp_tmr+0xa>
}
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80076b0:	2a03      	cmp	r2, #3
 80076b2:	d101      	bne.n	80076b8 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80076b4:	7527      	strb	r7, [r4, #20]
 80076b6:	e7f6      	b.n	80076a6 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80076b8:	2a04      	cmp	r2, #4
 80076ba:	d1f4      	bne.n	80076a6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80076bc:	7526      	strb	r6, [r4, #20]
 80076be:	e7f2      	b.n	80076a6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80076c0:	1d21      	adds	r1, r4, #4
 80076c2:	68a0      	ldr	r0, [r4, #8]
 80076c4:	f7ff ffc4 	bl	8007650 <etharp_request>
 80076c8:	e7ed      	b.n	80076a6 <etharp_tmr+0x2a>
 80076ca:	bf00      	nop
 80076cc:	2000a598 	.word	0x2000a598

080076d0 <etharp_output_to_arp_index>:
{
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80076d4:	4f24      	ldr	r7, [pc, #144]	; (8007768 <etharp_output_to_arp_index+0x98>)
 80076d6:	2318      	movs	r3, #24
{
 80076d8:	4606      	mov	r6, r0
 80076da:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80076dc:	fb03 7302 	mla	r3, r3, r2, r7
{
 80076e0:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80076e2:	7d1b      	ldrb	r3, [r3, #20]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d806      	bhi.n	80076f6 <etharp_output_to_arp_index+0x26>
 80076e8:	4b20      	ldr	r3, [pc, #128]	; (800776c <etharp_output_to_arp_index+0x9c>)
 80076ea:	f240 22ee 	movw	r2, #750	; 0x2ee
 80076ee:	4920      	ldr	r1, [pc, #128]	; (8007770 <etharp_output_to_arp_index+0xa0>)
 80076f0:	4820      	ldr	r0, [pc, #128]	; (8007774 <etharp_output_to_arp_index+0xa4>)
 80076f2:	f005 ff59 	bl	800d5a8 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80076f6:	2218      	movs	r2, #24
 80076f8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80076fc:	f106 092a 	add.w	r9, r6, #42	; 0x2a
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007700:	fb02 7404 	mla	r4, r2, r4, r7
 8007704:	00ed      	lsls	r5, r5, #3
 8007706:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007708:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800770c:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800770e:	44ba      	add	sl, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007710:	d10b      	bne.n	800772a <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007712:	8a63      	ldrh	r3, [r4, #18]
 8007714:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007718:	d913      	bls.n	8007742 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800771a:	3504      	adds	r5, #4
 800771c:	4630      	mov	r0, r6
 800771e:	1979      	adds	r1, r7, r5
 8007720:	f7ff ff96 	bl	8007650 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007724:	b908      	cbnz	r0, 800772a <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007726:	2303      	movs	r3, #3
 8007728:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800772a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800772e:	464a      	mov	r2, r9
 8007730:	4641      	mov	r1, r8
 8007732:	4630      	mov	r0, r6
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4653      	mov	r3, sl
 8007738:	f005 fd8e 	bl	800d258 <ethernet_output>
}
 800773c:	b004      	add	sp, #16
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007742:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007746:	d3f0      	bcc.n	800772a <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007748:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800774a:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800774c:	4652      	mov	r2, sl
 800774e:	4649      	mov	r1, r9
 8007750:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007752:	443d      	add	r5, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007754:	4b08      	ldr	r3, [pc, #32]	; (8007778 <etharp_output_to_arp_index+0xa8>)
 8007756:	4630      	mov	r0, r6
 8007758:	9502      	str	r5, [sp, #8]
 800775a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800775c:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	464b      	mov	r3, r9
 8007762:	f7ff fe43 	bl	80073ec <etharp_raw>
 8007766:	e7dd      	b.n	8007724 <etharp_output_to_arp_index+0x54>
 8007768:	2000a598 	.word	0x2000a598
 800776c:	08018f72 	.word	0x08018f72
 8007770:	080190fe 	.word	0x080190fe
 8007774:	08017fc5 	.word	0x08017fc5
 8007778:	0800f28a 	.word	0x0800f28a

0800777c <etharp_query>:
{
 800777c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4688      	mov	r8, r1
 8007782:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007784:	4601      	mov	r1, r0
{
 8007786:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007788:	f8d8 0000 	ldr.w	r0, [r8]
 800778c:	f000 fbaf 	bl	8007eee <ip4_addr_isbroadcast_u32>
 8007790:	2800      	cmp	r0, #0
 8007792:	d16a      	bne.n	800786a <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 8007794:	f8d8 3000 	ldr.w	r3, [r8]
 8007798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800779c:	2ae0      	cmp	r2, #224	; 0xe0
 800779e:	d064      	beq.n	800786a <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d062      	beq.n	800786a <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80077a4:	4632      	mov	r2, r6
 80077a6:	2101      	movs	r1, #1
 80077a8:	4640      	mov	r0, r8
 80077aa:	f7ff fd91 	bl	80072d0 <etharp_find_entry>
  if (i_err < 0) {
 80077ae:	1e04      	subs	r4, r0, #0
 80077b0:	da03      	bge.n	80077ba <etharp_query+0x3e>
    return (err_t)i_err;
 80077b2:	b260      	sxtb	r0, r4
}
 80077b4:	b002      	add	sp, #8
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80077ba:	2c7e      	cmp	r4, #126	; 0x7e
 80077bc:	dd06      	ble.n	80077cc <etharp_query+0x50>
 80077be:	4b35      	ldr	r3, [pc, #212]	; (8007894 <etharp_query+0x118>)
 80077c0:	f240 32c1 	movw	r2, #961	; 0x3c1
 80077c4:	4934      	ldr	r1, [pc, #208]	; (8007898 <etharp_query+0x11c>)
 80077c6:	4835      	ldr	r0, [pc, #212]	; (800789c <etharp_query+0x120>)
 80077c8:	f005 feee 	bl	800d5a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80077cc:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80077ce:	4f34      	ldr	r7, [pc, #208]	; (80078a0 <etharp_query+0x124>)
 80077d0:	2318      	movs	r3, #24
 80077d2:	fb03 7304 	mla	r3, r3, r4, r7
 80077d6:	7d1a      	ldrb	r2, [r3, #20]
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d155      	bne.n	8007888 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80077dc:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 80077de:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80077e0:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 80077e2:	4641      	mov	r1, r8
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff ff33 	bl	8007650 <etharp_request>
    if (q == NULL) {
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	d0e2      	beq.n	80077b4 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80077ee:	2318      	movs	r3, #24
 80077f0:	fb03 7204 	mla	r2, r3, r4, r7
 80077f4:	7d12      	ldrb	r2, [r2, #20]
 80077f6:	2a01      	cmp	r2, #1
 80077f8:	d90e      	bls.n	8007818 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80077fa:	fb03 7304 	mla	r3, r3, r4, r7
 80077fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	9200      	str	r2, [sp, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 800780e:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007812:	f005 fd21 	bl	800d258 <ethernet_output>
 8007816:	e7cd      	b.n	80077b4 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007818:	d1cc      	bne.n	80077b4 <etharp_query+0x38>
 800781a:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800781c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007894 <etharp_query+0x118>
 8007820:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80078a4 <etharp_query+0x128>
 8007824:	f8df a074 	ldr.w	sl, [pc, #116]	; 800789c <etharp_query+0x120>
 8007828:	8972      	ldrh	r2, [r6, #10]
 800782a:	8933      	ldrh	r3, [r6, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d108      	bne.n	8007842 <etharp_query+0xc6>
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	b133      	cbz	r3, 8007842 <etharp_query+0xc6>
 8007834:	4643      	mov	r3, r8
 8007836:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800783a:	4649      	mov	r1, r9
 800783c:	4650      	mov	r0, sl
 800783e:	f005 feb3 	bl	800d5a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8007842:	7b33      	ldrb	r3, [r6, #12]
 8007844:	065b      	lsls	r3, r3, #25
 8007846:	d413      	bmi.n	8007870 <etharp_query+0xf4>
      p = p->next;
 8007848:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800784a:	2e00      	cmp	r6, #0
 800784c:	d1ec      	bne.n	8007828 <etharp_query+0xac>
      pbuf_ref(p);
 800784e:	4628      	mov	r0, r5
 8007850:	f001 fe46 	bl	80094e0 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8007854:	2618      	movs	r6, #24
 8007856:	fb06 f304 	mul.w	r3, r6, r4
 800785a:	58f8      	ldr	r0, [r7, r3]
 800785c:	b108      	cbz	r0, 8007862 <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 800785e:	f001 fcfb 	bl	8009258 <pbuf_free>
      arp_table[i].q = p;
 8007862:	4374      	muls	r4, r6
      result = ERR_OK;
 8007864:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007866:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8007868:	e7a4      	b.n	80077b4 <etharp_query+0x38>
    return ERR_ARG;
 800786a:	f06f 000f 	mvn.w	r0, #15
 800786e:	e7a1      	b.n	80077b4 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8007870:	462a      	mov	r2, r5
 8007872:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007876:	200e      	movs	r0, #14
 8007878:	f001 ff5a 	bl	8009730 <pbuf_clone>
    if (p != NULL) {
 800787c:	4605      	mov	r5, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	d1e8      	bne.n	8007854 <etharp_query+0xd8>
      result = ERR_MEM;
 8007882:	f04f 30ff 	mov.w	r0, #4294967295
 8007886:	e795      	b.n	80077b4 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8007888:	2d00      	cmp	r5, #0
 800788a:	d0aa      	beq.n	80077e2 <etharp_query+0x66>
  err_t result = ERR_MEM;
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e7ad      	b.n	80077ee <etharp_query+0x72>
 8007892:	bf00      	nop
 8007894:	08018f72 	.word	0x08018f72
 8007898:	0801912e 	.word	0x0801912e
 800789c:	08017fc5 	.word	0x08017fc5
 80078a0:	2000a598 	.word	0x2000a598
 80078a4:	0801913c 	.word	0x0801913c

080078a8 <etharp_output>:
{
 80078a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078aa:	460e      	mov	r6, r1
 80078ac:	b085      	sub	sp, #20
 80078ae:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80078b0:	4604      	mov	r4, r0
 80078b2:	b930      	cbnz	r0, 80078c2 <etharp_output+0x1a>
 80078b4:	4b44      	ldr	r3, [pc, #272]	; (80079c8 <etharp_output+0x120>)
 80078b6:	f240 321e 	movw	r2, #798	; 0x31e
 80078ba:	4944      	ldr	r1, [pc, #272]	; (80079cc <etharp_output+0x124>)
 80078bc:	4844      	ldr	r0, [pc, #272]	; (80079d0 <etharp_output+0x128>)
 80078be:	f005 fe73 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80078c2:	b936      	cbnz	r6, 80078d2 <etharp_output+0x2a>
 80078c4:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <etharp_output+0x120>)
 80078c6:	f240 321f 	movw	r2, #799	; 0x31f
 80078ca:	4942      	ldr	r1, [pc, #264]	; (80079d4 <etharp_output+0x12c>)
 80078cc:	4840      	ldr	r0, [pc, #256]	; (80079d0 <etharp_output+0x128>)
 80078ce:	f005 fe6b 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80078d2:	b935      	cbnz	r5, 80078e2 <etharp_output+0x3a>
 80078d4:	4b3c      	ldr	r3, [pc, #240]	; (80079c8 <etharp_output+0x120>)
 80078d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80078da:	493f      	ldr	r1, [pc, #252]	; (80079d8 <etharp_output+0x130>)
 80078dc:	483c      	ldr	r0, [pc, #240]	; (80079d0 <etharp_output+0x128>)
 80078de:	f005 fe63 	bl	800d5a8 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80078e2:	4621      	mov	r1, r4
 80078e4:	6828      	ldr	r0, [r5, #0]
 80078e6:	f000 fb02 	bl	8007eee <ip4_addr_isbroadcast_u32>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d167      	bne.n	80079be <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078f4:	2ae0      	cmp	r2, #224	; 0xe0
 80078f6:	d11e      	bne.n	8007936 <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80078f8:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80078fa:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80078fe:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8007902:	235e      	movs	r3, #94	; 0x5e
 8007904:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007908:	786b      	ldrb	r3, [r5, #1]
 800790a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8007912:	78ab      	ldrb	r3, [r5, #2]
 8007914:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007918:	78eb      	ldrb	r3, [r5, #3]
 800791a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800791e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8007920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007924:	4631      	mov	r1, r6
 8007926:	4620      	mov	r0, r4
 8007928:	9200      	str	r2, [sp, #0]
 800792a:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 800792e:	f005 fc93 	bl	800d258 <ethernet_output>
}
 8007932:	b005      	add	sp, #20
 8007934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	68a1      	ldr	r1, [r4, #8]
 800793a:	405a      	eors	r2, r3
 800793c:	420a      	tst	r2, r1
 800793e:	d009      	beq.n	8007954 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8007940:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007942:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8007946:	4293      	cmp	r3, r2
 8007948:	d004      	beq.n	8007954 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d038      	beq.n	80079c2 <etharp_output+0x11a>
            dst_addr = netif_ip4_gw(netif);
 8007950:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007954:	4821      	ldr	r0, [pc, #132]	; (80079dc <etharp_output+0x134>)
 8007956:	2318      	movs	r3, #24
 8007958:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 800795c:	fb03 0302 	mla	r3, r3, r2, r0
 8007960:	7d19      	ldrb	r1, [r3, #20]
 8007962:	2901      	cmp	r1, #1
 8007964:	d90d      	bls.n	8007982 <etharp_output+0xda>
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	42a1      	cmp	r1, r4
 800796a:	d10a      	bne.n	8007982 <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800796c:	6829      	ldr	r1, [r5, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4299      	cmp	r1, r3
 8007972:	d106      	bne.n	8007982 <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 8007974:	4631      	mov	r1, r6
 8007976:	4620      	mov	r0, r4
}
 8007978:	b005      	add	sp, #20
 800797a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800797e:	f7ff bea7 	b.w	80076d0 <etharp_output_to_arp_index>
 8007982:	4b16      	ldr	r3, [pc, #88]	; (80079dc <etharp_output+0x134>)
{
 8007984:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007986:	7d1f      	ldrb	r7, [r3, #20]
 8007988:	fa5f fc81 	uxtb.w	ip, r1
 800798c:	2f01      	cmp	r7, #1
 800798e:	d90a      	bls.n	80079a6 <etharp_output+0xfe>
 8007990:	689f      	ldr	r7, [r3, #8]
 8007992:	42a7      	cmp	r7, r4
 8007994:	d107      	bne.n	80079a6 <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 8007996:	685f      	ldr	r7, [r3, #4]
 8007998:	682a      	ldr	r2, [r5, #0]
 800799a:	42ba      	cmp	r2, r7
 800799c:	d103      	bne.n	80079a6 <etharp_output+0xfe>
        return etharp_output_to_arp_index(netif, q, i);
 800799e:	4662      	mov	r2, ip
        ETHARP_SET_ADDRHINT(netif, i);
 80079a0:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 80079a4:	e7e6      	b.n	8007974 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80079a6:	3101      	adds	r1, #1
 80079a8:	3318      	adds	r3, #24
 80079aa:	290a      	cmp	r1, #10
 80079ac:	d1eb      	bne.n	8007986 <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 80079ae:	4632      	mov	r2, r6
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
}
 80079b4:	b005      	add	sp, #20
 80079b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80079ba:	f7ff bedf 	b.w	800777c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80079be:	4b08      	ldr	r3, [pc, #32]	; (80079e0 <etharp_output+0x138>)
 80079c0:	e7ae      	b.n	8007920 <etharp_output+0x78>
            return ERR_RTE;
 80079c2:	f06f 0003 	mvn.w	r0, #3
 80079c6:	e7b4      	b.n	8007932 <etharp_output+0x8a>
 80079c8:	08018f72 	.word	0x08018f72
 80079cc:	08018e03 	.word	0x08018e03
 80079d0:	08017fc5 	.word	0x08017fc5
 80079d4:	08019bbe 	.word	0x08019bbe
 80079d8:	080190bb 	.word	0x080190bb
 80079dc:	2000a598 	.word	0x2000a598
 80079e0:	0800f284 	.word	0x0800f284

080079e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80079e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	b087      	sub	sp, #28
 80079ea:	460f      	mov	r7, r1
 80079ec:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80079ee:	2124      	movs	r1, #36	; 0x24
 80079f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80079f4:	2022      	movs	r0, #34	; 0x22
 80079f6:	f001 fc97 	bl	8009328 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80079fa:	4605      	mov	r5, r0
 80079fc:	b390      	cbz	r0, 8007a64 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80079fe:	8943      	ldrh	r3, [r0, #10]
 8007a00:	2b23      	cmp	r3, #35	; 0x23
 8007a02:	d806      	bhi.n	8007a12 <icmp_send_response+0x2e>
 8007a04:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <icmp_send_response+0x84>)
 8007a06:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007a0a:	4918      	ldr	r1, [pc, #96]	; (8007a6c <icmp_send_response+0x88>)
 8007a0c:	4818      	ldr	r0, [pc, #96]	; (8007a70 <icmp_send_response+0x8c>)
 8007a0e:	f005 fdcb 	bl	800d5a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8007a12:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8007a14:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007a16:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007a18:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8007a1c:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007a1e:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8007a22:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8007a24:	71a3      	strb	r3, [r4, #6]
 8007a26:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007a28:	4603      	mov	r3, r0
  icmphdr->type = type;
 8007a2a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8007a2c:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007a2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a32:	428b      	cmp	r3, r1
 8007a34:	f842 6b04 	str.w	r6, [r2], #4
 8007a38:	d1f9      	bne.n	8007a2e <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8007a3a:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8007a3c:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8007a3e:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8007a40:	f000 f8d6 	bl	8007bf0 <ip4_route>
#endif
  if (netif != NULL) {
 8007a44:	b158      	cbz	r0, 8007a5e <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8007a46:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007a48:	2301      	movs	r3, #1
 8007a4a:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8007a4c:	70a1      	strb	r1, [r4, #2]
 8007a4e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007a50:	9002      	str	r0, [sp, #8]
 8007a52:	4628      	mov	r0, r5
 8007a54:	e9cd 1300 	strd	r1, r3, [sp]
 8007a58:	23ff      	movs	r3, #255	; 0xff
 8007a5a:	f000 fa37 	bl	8007ecc <ip4_output_if>
  }
  pbuf_free(q);
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f001 fbfa 	bl	8009258 <pbuf_free>
}
 8007a64:	b007      	add	sp, #28
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a68:	08019156 	.word	0x08019156
 8007a6c:	080191c9 	.word	0x080191c9
 8007a70:	08017fc5 	.word	0x08017fc5

08007a74 <icmp_input>:
{
 8007a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8007a78:	4f46      	ldr	r7, [pc, #280]	; (8007b94 <icmp_input+0x120>)
{
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8007a80:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8007a84:	f899 5000 	ldrb.w	r5, [r9]
 8007a88:	f005 050f 	and.w	r5, r5, #15
 8007a8c:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8007a8e:	2d13      	cmp	r5, #19
 8007a90:	d916      	bls.n	8007ac0 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 8007a92:	8943      	ldrh	r3, [r0, #10]
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d913      	bls.n	8007ac0 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8007a98:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d10f      	bne.n	8007ac0 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007aa0:	6978      	ldr	r0, [r7, #20]
 8007aa2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007aa6:	2be0      	cmp	r3, #224	; 0xe0
 8007aa8:	d00a      	beq.n	8007ac0 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	f000 fa1f 	bl	8007eee <ip4_addr_isbroadcast_u32>
 8007ab0:	b930      	cbnz	r0, 8007ac0 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8007ab2:	8923      	ldrh	r3, [r4, #8]
 8007ab4:	2b07      	cmp	r3, #7
 8007ab6:	d903      	bls.n	8007ac0 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 fe3f 	bl	800873c <inet_chksum_pbuf>
 8007abe:	b128      	cbz	r0, 8007acc <icmp_input+0x58>
  pbuf_free(p);
 8007ac0:	4620      	mov	r0, r4
}
 8007ac2:	b007      	add	sp, #28
 8007ac4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8007ac8:	f001 bbc6 	b.w	8009258 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007acc:	f105 010e 	add.w	r1, r5, #14
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	9105      	str	r1, [sp, #20]
 8007ad4:	f001 fb88 	bl	80091e8 <pbuf_add_header>
 8007ad8:	9905      	ldr	r1, [sp, #20]
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d04e      	beq.n	8007b7c <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8007ade:	8923      	ldrh	r3, [r4, #8]
 8007ae0:	1959      	adds	r1, r3, r5
 8007ae2:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	d8eb      	bhi.n	8007ac0 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8007ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007aec:	200e      	movs	r0, #14
 8007aee:	f001 fc1b 	bl	8009328 <pbuf_alloc>
        if (r == NULL) {
 8007af2:	4606      	mov	r6, r0
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0e3      	beq.n	8007ac0 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8007af8:	8942      	ldrh	r2, [r0, #10]
 8007afa:	f105 0308 	add.w	r3, r5, #8
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d203      	bcs.n	8007b0a <icmp_input+0x96>
          pbuf_free(r);
 8007b02:	4630      	mov	r0, r6
 8007b04:	f001 fba8 	bl	8009258 <pbuf_free>
          goto icmperr;
 8007b08:	e7da      	b.n	8007ac0 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	6840      	ldr	r0, [r0, #4]
 8007b10:	f005 fd1a 	bl	800d548 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8007b14:	4629      	mov	r1, r5
 8007b16:	4630      	mov	r0, r6
 8007b18:	f001 fb6a 	bl	80091f0 <pbuf_remove_header>
 8007b1c:	b130      	cbz	r0, 8007b2c <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <icmp_input+0x124>)
 8007b20:	22b6      	movs	r2, #182	; 0xb6
 8007b22:	491e      	ldr	r1, [pc, #120]	; (8007b9c <icmp_input+0x128>)
 8007b24:	481e      	ldr	r0, [pc, #120]	; (8007ba0 <icmp_input+0x12c>)
 8007b26:	f005 fd3f 	bl	800d5a8 <iprintf>
          pbuf_free(r);
 8007b2a:	e7ea      	b.n	8007b02 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f001 fd36 	bl	80095a0 <pbuf_copy>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d1e4      	bne.n	8007b02 <icmp_input+0x8e>
        pbuf_free(p);
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4634      	mov	r4, r6
 8007b3c:	f001 fb8c 	bl	8009258 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8007b40:	4629      	mov	r1, r5
 8007b42:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8007b44:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8007b46:	f001 fb4f 	bl	80091e8 <pbuf_add_header>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d1b8      	bne.n	8007ac0 <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8007b4e:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8007b50:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007b52:	4914      	ldr	r1, [pc, #80]	; (8007ba4 <icmp_input+0x130>)
        ip4_addr_copy(iphdr->src, *src);
 8007b54:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007b5a:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8007b5c:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8007b5e:	70b0      	strb	r0, [r6, #2]
 8007b60:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8007b62:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8007b64:	7290      	strb	r0, [r2, #10]
 8007b66:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007b6e:	e9cd 0200 	strd	r0, r2, [sp]
 8007b72:	4602      	mov	r2, r0
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 f9a9 	bl	8007ecc <ip4_output_if>
  pbuf_free(p);
 8007b7a:	e7a1      	b.n	8007ac0 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f001 fb37 	bl	80091f0 <pbuf_remove_header>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d0dc      	beq.n	8007b40 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8007b86:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <icmp_input+0x124>)
 8007b88:	22c7      	movs	r2, #199	; 0xc7
 8007b8a:	4907      	ldr	r1, [pc, #28]	; (8007ba8 <icmp_input+0x134>)
 8007b8c:	4804      	ldr	r0, [pc, #16]	; (8007ba0 <icmp_input+0x12c>)
 8007b8e:	f005 fd0b 	bl	800d5a8 <iprintf>
          goto icmperr;
 8007b92:	e795      	b.n	8007ac0 <icmp_input+0x4c>
 8007b94:	2000a694 	.word	0x2000a694
 8007b98:	08019156 	.word	0x08019156
 8007b9c:	080191f5 	.word	0x080191f5
 8007ba0:	08017fc5 	.word	0x08017fc5
 8007ba4:	2000a6a8 	.word	0x2000a6a8
 8007ba8:	0801922a 	.word	0x0801922a

08007bac <icmp_dest_unreach>:
{
 8007bac:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8007bae:	2103      	movs	r1, #3
 8007bb0:	f7ff bf18 	b.w	80079e4 <icmp_send_response>

08007bb4 <icmp_time_exceeded>:
{
 8007bb4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8007bb6:	210b      	movs	r1, #11
 8007bb8:	f7ff bf14 	b.w	80079e4 <icmp_send_response>

08007bbc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8007bbc:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007bbe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8007bc2:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8007bc4:	f013 0301 	ands.w	r3, r3, #1
 8007bc8:	d00b      	beq.n	8007be2 <ip4_input_accept+0x26>
 8007bca:	6843      	ldr	r3, [r0, #4]
 8007bcc:	b14b      	cbz	r3, 8007be2 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8007bce:	4a07      	ldr	r2, [pc, #28]	; (8007bec <ip4_input_accept+0x30>)
 8007bd0:	6950      	ldr	r0, [r2, #20]
 8007bd2:	4283      	cmp	r3, r0
 8007bd4:	d007      	beq.n	8007be6 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8007bd6:	f000 f98a 	bl	8007eee <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8007bda:	3800      	subs	r0, #0
 8007bdc:	bf18      	it	ne
 8007bde:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8007be0:	bd08      	pop	{r3, pc}
  return 0;
 8007be2:	4618      	mov	r0, r3
 8007be4:	e7fc      	b.n	8007be0 <ip4_input_accept+0x24>
      return 1;
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7fa      	b.n	8007be0 <ip4_input_accept+0x24>
 8007bea:	bf00      	nop
 8007bec:	2000a694 	.word	0x2000a694

08007bf0 <ip4_route>:
  NETIF_FOREACH(netif) {
 8007bf0:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <ip4_route+0x54>)
{
 8007bf2:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8007bf4:	6818      	ldr	r0, [r3, #0]
{
 8007bf6:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8007bf8:	b978      	cbnz	r0, 8007c1a <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8007bfa:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <ip4_route+0x58>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	b15b      	cbz	r3, 8007c18 <ip4_route+0x28>
 8007c00:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8007c04:	f001 0105 	and.w	r1, r1, #5
 8007c08:	2905      	cmp	r1, #5
 8007c0a:	d105      	bne.n	8007c18 <ip4_route+0x28>
 8007c0c:	6859      	ldr	r1, [r3, #4]
 8007c0e:	b119      	cbz	r1, 8007c18 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	2a7f      	cmp	r2, #127	; 0x7f
 8007c14:	bf18      	it	ne
 8007c16:	4618      	movne	r0, r3
}
 8007c18:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007c1a:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8007c1e:	07cd      	lsls	r5, r1, #31
 8007c20:	d50d      	bpl.n	8007c3e <ip4_route+0x4e>
 8007c22:	074c      	lsls	r4, r1, #29
 8007c24:	d50b      	bpl.n	8007c3e <ip4_route+0x4e>
 8007c26:	6843      	ldr	r3, [r0, #4]
 8007c28:	b14b      	cbz	r3, 8007c3e <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8007c2a:	6814      	ldr	r4, [r2, #0]
 8007c2c:	6885      	ldr	r5, [r0, #8]
 8007c2e:	4063      	eors	r3, r4
 8007c30:	422b      	tst	r3, r5
 8007c32:	d0f1      	beq.n	8007c18 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8007c34:	078b      	lsls	r3, r1, #30
 8007c36:	d402      	bmi.n	8007c3e <ip4_route+0x4e>
 8007c38:	68c3      	ldr	r3, [r0, #12]
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d0ec      	beq.n	8007c18 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	e7da      	b.n	8007bf8 <ip4_route+0x8>
 8007c42:	bf00      	nop
 8007c44:	2000e3fc 	.word	0x2000e3fc
 8007c48:	2000e400 	.word	0x2000e400

08007c4c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8007c50:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8007c54:	4604      	mov	r4, r0
 8007c56:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8007c58:	f898 5000 	ldrb.w	r5, [r8]
 8007c5c:	092b      	lsrs	r3, r5, #4
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d005      	beq.n	8007c6e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 faf8 	bl	8009258 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007c6e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007c72:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007c76:	f000 fd2f 	bl	80086d8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8007c7a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007c7c:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8007c80:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8007c82:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8007c84:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8007c86:	d903      	bls.n	8007c90 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8007c88:	4601      	mov	r1, r0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f001 fbc8 	bl	8009420 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8007c90:	8963      	ldrh	r3, [r4, #10]
 8007c92:	42ab      	cmp	r3, r5
 8007c94:	d3e5      	bcc.n	8007c62 <ip4_input+0x16>
 8007c96:	8923      	ldrh	r3, [r4, #8]
 8007c98:	42bb      	cmp	r3, r7
 8007c9a:	d3e2      	bcc.n	8007c62 <ip4_input+0x16>
 8007c9c:	2d13      	cmp	r5, #19
 8007c9e:	d9e0      	bls.n	8007c62 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8007ca0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007ca4:	4d49      	ldr	r5, [pc, #292]	; (8007dcc <ip4_input+0x180>)
 8007ca6:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007cac:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007cb0:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8007cb2:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007cb4:	d143      	bne.n	8007d3e <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007cb6:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8007cba:	07db      	lsls	r3, r3, #31
 8007cbc:	d405      	bmi.n	8007cca <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8007cbe:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007cc2:	2b11      	cmp	r3, #17
 8007cc4:	d053      	beq.n	8007d6e <ip4_input+0x122>
 8007cc6:	2700      	movs	r7, #0
 8007cc8:	e003      	b.n	8007cd2 <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8007cca:	6873      	ldr	r3, [r6, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f6      	beq.n	8007cbe <ip4_input+0x72>
 8007cd0:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8007cd2:	6928      	ldr	r0, [r5, #16]
 8007cd4:	b148      	cbz	r0, 8007cea <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	f000 f909 	bl	8007eee <ip4_addr_isbroadcast_u32>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1c0      	bne.n	8007c62 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8007ce0:	692b      	ldr	r3, [r5, #16]
 8007ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8007ce6:	2be0      	cmp	r3, #224	; 0xe0
 8007ce8:	d0bb      	beq.n	8007c62 <ip4_input+0x16>
  if (netif == NULL) {
 8007cea:	2f00      	cmp	r7, #0
 8007cec:	d0b9      	beq.n	8007c62 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8007cee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8007cf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cf6:	b13b      	cbz	r3, 8007d08 <ip4_input+0xbc>
    p = ip4_reass(p);
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fa2b 	bl	8008154 <ip4_reass>
    if (p == NULL) {
 8007cfe:	4604      	mov	r4, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d0b1      	beq.n	8007c68 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8007d04:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8007d08:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8007d10:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8007d14:	f898 3000 	ldrb.w	r3, [r8]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8007d20:	f001 fa66 	bl	80091f0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8007d24:	f898 3009 	ldrb.w	r3, [r8, #9]
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d034      	beq.n	8007d96 <ip4_input+0x14a>
 8007d2c:	2b11      	cmp	r3, #17
 8007d2e:	d026      	beq.n	8007d7e <ip4_input+0x132>
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d135      	bne.n	8007da0 <ip4_input+0x154>
        icmp_input(p, inp);
 8007d34:	4631      	mov	r1, r6
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff fe9c 	bl	8007a74 <icmp_input>
        break;
 8007d3c:	e023      	b.n	8007d86 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff3c 	bl	8007bbc <ip4_input_accept>
 8007d44:	b980      	cbnz	r0, 8007d68 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8007d46:	7d2b      	ldrb	r3, [r5, #20]
 8007d48:	2b7f      	cmp	r3, #127	; 0x7f
 8007d4a:	d0b8      	beq.n	8007cbe <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8007d4c:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <ip4_input+0x184>)
 8007d4e:	681f      	ldr	r7, [r3, #0]
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	d0b4      	beq.n	8007cbe <ip4_input+0x72>
          if (netif == inp) {
 8007d54:	42b7      	cmp	r7, r6
 8007d56:	d101      	bne.n	8007d5c <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8007d58:	683f      	ldr	r7, [r7, #0]
 8007d5a:	e7f9      	b.n	8007d50 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ff2d 	bl	8007bbc <ip4_input_accept>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0f8      	beq.n	8007d58 <ip4_input+0x10c>
 8007d66:	e7b4      	b.n	8007cd2 <ip4_input+0x86>
  if (netif == NULL) {
 8007d68:	2e00      	cmp	r6, #0
 8007d6a:	d1b1      	bne.n	8007cd0 <ip4_input+0x84>
 8007d6c:	e7a7      	b.n	8007cbe <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8007d6e:	eb08 0309 	add.w	r3, r8, r9
 8007d72:	885b      	ldrh	r3, [r3, #2]
 8007d74:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8007d78:	d1a5      	bne.n	8007cc6 <ip4_input+0x7a>
 8007d7a:	4637      	mov	r7, r6
 8007d7c:	e7b5      	b.n	8007cea <ip4_input+0x9e>
        udp_input(p, inp);
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4620      	mov	r0, r4
 8007d82:	f004 ff69 	bl	800cc58 <udp_input>
  ip_data.current_netif = NULL;
 8007d86:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8007d88:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8007d8c:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8007d8e:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8007d90:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8007d94:	e768      	b.n	8007c68 <ip4_input+0x1c>
        tcp_input(p, inp);
 8007d96:	4631      	mov	r1, r6
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f003 f829 	bl	800adf0 <tcp_input>
        break;
 8007d9e:	e7f2      	b.n	8007d86 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007da0:	4639      	mov	r1, r7
 8007da2:	6968      	ldr	r0, [r5, #20]
 8007da4:	f000 f8a3 	bl	8007eee <ip4_addr_isbroadcast_u32>
 8007da8:	b960      	cbnz	r0, 8007dc4 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007daa:	696b      	ldr	r3, [r5, #20]
 8007dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8007db0:	2be0      	cmp	r3, #224	; 0xe0
 8007db2:	d007      	beq.n	8007dc4 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8007db4:	4649      	mov	r1, r9
 8007db6:	4620      	mov	r0, r4
 8007db8:	f001 fa46 	bl	8009248 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7ff fef4 	bl	8007bac <icmp_dest_unreach>
        pbuf_free(p);
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 fa47 	bl	8009258 <pbuf_free>
        break;
 8007dca:	e7dc      	b.n	8007d86 <ip4_input+0x13a>
 8007dcc:	2000a694 	.word	0x2000a694
 8007dd0:	2000e3fc 	.word	0x2000e3fc

08007dd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007dd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007dda:	7b83      	ldrb	r3, [r0, #14]
{
 8007ddc:	4604      	mov	r4, r0
 8007dde:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007de0:	2b01      	cmp	r3, #1
{
 8007de2:	4616      	mov	r6, r2
 8007de4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007de6:	d006      	beq.n	8007df6 <ip4_output_if_src+0x22>
 8007de8:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <ip4_output_if_src+0xe0>)
 8007dea:	f44f 7255 	mov.w	r2, #852	; 0x354
 8007dee:	4932      	ldr	r1, [pc, #200]	; (8007eb8 <ip4_output_if_src+0xe4>)
 8007df0:	4832      	ldr	r0, [pc, #200]	; (8007ebc <ip4_output_if_src+0xe8>)
 8007df2:	f005 fbd9 	bl	800d5a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	d04e      	beq.n	8007e98 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8007dfa:	2114      	movs	r1, #20
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f001 f9f3 	bl	80091e8 <pbuf_add_header>
 8007e02:	b120      	cbz	r0, 8007e0e <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8007e04:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8007e08:	b002      	add	sp, #8
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007e0e:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8007e10:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007e12:	2b13      	cmp	r3, #19
 8007e14:	d806      	bhi.n	8007e24 <ip4_output_if_src+0x50>
 8007e16:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <ip4_output_if_src+0xe0>)
 8007e18:	f44f 7262 	mov.w	r2, #904	; 0x388
 8007e1c:	4928      	ldr	r1, [pc, #160]	; (8007ec0 <ip4_output_if_src+0xec>)
 8007e1e:	4827      	ldr	r0, [pc, #156]	; (8007ebc <ip4_output_if_src+0xe8>)
 8007e20:	f005 fbc2 	bl	800d5a8 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8007e24:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8007e28:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8007e2c:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 8007e30:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8007e32:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007e34:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007ec8 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8007e38:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8007e3a:	2345      	movs	r3, #69	; 0x45
 8007e3c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8007e3e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8007e42:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007e44:	8920      	ldrh	r0, [r4, #8]
 8007e46:	f000 fc47 	bl	80086d8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8007e4a:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8007e4e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8007e50:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007e54:	f8ba 0000 	ldrh.w	r0, [sl]
 8007e58:	f000 fc3e 	bl	80086d8 <lwip_htons>
    ++ip_id;
 8007e5c:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007e60:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8007e68:	f1b9 0f00 	cmp.w	r9, #0
 8007e6c:	d111      	bne.n	8007e92 <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <ip4_output_if_src+0xf0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8007e74:	f885 800a 	strb.w	r8, [r5, #10]
 8007e78:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8007e7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e7e:	b19b      	cbz	r3, 8007ea8 <ip4_output_if_src+0xd4>
 8007e80:	8922      	ldrh	r2, [r4, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d910      	bls.n	8007ea8 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 8007e86:	4632      	mov	r2, r6
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fb38 	bl	8008500 <ip4_frag>
 8007e90:	e7ba      	b.n	8007e08 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 8007e92:	f8d9 3000 	ldr.w	r3, [r9]
 8007e96:	e7ec      	b.n	8007e72 <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 8007e98:	8963      	ldrh	r3, [r4, #10]
 8007e9a:	2b13      	cmp	r3, #19
 8007e9c:	d9b2      	bls.n	8007e04 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007e9e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8007ea0:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8007ea6:	e7e9      	b.n	8007e7c <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4632      	mov	r2, r6
 8007eac:	4621      	mov	r1, r4
 8007eae:	4638      	mov	r0, r7
 8007eb0:	4798      	blx	r3
 8007eb2:	e7a9      	b.n	8007e08 <ip4_output_if_src+0x34>
 8007eb4:	0801925c 	.word	0x0801925c
 8007eb8:	080192ce 	.word	0x080192ce
 8007ebc:	08017fc5 	.word	0x08017fc5
 8007ec0:	080192da 	.word	0x080192da
 8007ec4:	0800f134 	.word	0x0800f134
 8007ec8:	2000a68a 	.word	0x2000a68a

08007ecc <ip4_output_if>:
{
 8007ecc:	b4f0      	push	{r4, r5, r6, r7}
 8007ece:	9c06      	ldr	r4, [sp, #24]
 8007ed0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8007ed4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007ed8:	b11a      	cbz	r2, 8007ee2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8007eda:	b109      	cbz	r1, 8007ee0 <ip4_output_if+0x14>
 8007edc:	680f      	ldr	r7, [r1, #0]
 8007ede:	b907      	cbnz	r7, 8007ee2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8007ee0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007ee2:	9504      	str	r5, [sp, #16]
 8007ee4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8007ee8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007eea:	f7ff bf73 	b.w	8007dd4 <ip4_output_if_src>

08007eee <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8007eee:	1e43      	subs	r3, r0, #1
{
 8007ef0:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8007ef2:	3303      	adds	r3, #3
 8007ef4:	d812      	bhi.n	8007f1c <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007ef6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8007efa:	f013 0002 	ands.w	r0, r3, #2
 8007efe:	d010      	beq.n	8007f22 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8007f00:	684b      	ldr	r3, [r1, #4]
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00c      	beq.n	8007f20 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007f06:	6888      	ldr	r0, [r1, #8]
 8007f08:	4053      	eors	r3, r2
 8007f0a:	4203      	tst	r3, r0
 8007f0c:	d108      	bne.n	8007f20 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8007f0e:	43c3      	mvns	r3, r0
 8007f10:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8007f14:	1ac3      	subs	r3, r0, r3
 8007f16:	4258      	negs	r0, r3
 8007f18:	4158      	adcs	r0, r3
 8007f1a:	4770      	bx	lr
    return 1;
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	4770      	bx	lr
    return 0;
 8007f20:	2000      	movs	r0, #0
  }
}
 8007f22:	4770      	bx	lr

08007f24 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8007f24:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <ip_reass_dequeue_datagram+0x34>)
{
 8007f28:	4604      	mov	r4, r0
 8007f2a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4282      	cmp	r2, r0
 8007f30:	d107      	bne.n	8007f42 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8007f32:	6802      	ldr	r2, [r0, #0]
 8007f34:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8007f36:	4621      	mov	r1, r4
 8007f38:	2004      	movs	r0, #4
}
 8007f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8007f3e:	f000 bf2b 	b.w	8008d98 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8007f42:	b931      	cbnz	r1, 8007f52 <ip_reass_dequeue_datagram+0x2e>
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <ip_reass_dequeue_datagram+0x38>)
 8007f46:	f240 1245 	movw	r2, #325	; 0x145
 8007f4a:	4905      	ldr	r1, [pc, #20]	; (8007f60 <ip_reass_dequeue_datagram+0x3c>)
 8007f4c:	4805      	ldr	r0, [pc, #20]	; (8007f64 <ip_reass_dequeue_datagram+0x40>)
 8007f4e:	f005 fb2b 	bl	800d5a8 <iprintf>
    prev->next = ipr->next;
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	e7ee      	b.n	8007f36 <ip_reass_dequeue_datagram+0x12>
 8007f58:	2000a68c 	.word	0x2000a68c
 8007f5c:	08019307 	.word	0x08019307
 8007f60:	0801937e 	.word	0x0801937e
 8007f64:	08017fc5 	.word	0x08017fc5

08007f68 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007f68:	4281      	cmp	r1, r0
{
 8007f6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007f72:	d105      	bne.n	8007f80 <ip_reass_free_complete_datagram+0x18>
 8007f74:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <ip_reass_free_complete_datagram+0xcc>)
 8007f76:	22ab      	movs	r2, #171	; 0xab
 8007f78:	492f      	ldr	r1, [pc, #188]	; (8008038 <ip_reass_free_complete_datagram+0xd0>)
 8007f7a:	4830      	ldr	r0, [pc, #192]	; (800803c <ip_reass_free_complete_datagram+0xd4>)
 8007f7c:	f005 fb14 	bl	800d5a8 <iprintf>
  if (prev != NULL) {
 8007f80:	b146      	cbz	r6, 8007f94 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8007f82:	6833      	ldr	r3, [r6, #0]
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	d005      	beq.n	8007f94 <ip_reass_free_complete_datagram+0x2c>
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <ip_reass_free_complete_datagram+0xcc>)
 8007f8a:	22ad      	movs	r2, #173	; 0xad
 8007f8c:	492c      	ldr	r1, [pc, #176]	; (8008040 <ip_reass_free_complete_datagram+0xd8>)
 8007f8e:	482b      	ldr	r0, [pc, #172]	; (800803c <ip_reass_free_complete_datagram+0xd4>)
 8007f90:	f005 fb0a 	bl	800d5a8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8007f94:	6867      	ldr	r7, [r4, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8007f98:	889a      	ldrh	r2, [r3, #4]
 8007f9a:	bb92      	cbnz	r2, 8008002 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007f9c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007f9e:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 8007fa2:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007fa4:	f104 0208 	add.w	r2, r4, #8
 8007fa8:	f852 0b04 	ldr.w	r0, [r2], #4
 8007fac:	428a      	cmp	r2, r1
 8007fae:	f843 0b04 	str.w	r0, [r3], #4
 8007fb2:	d1f9      	bne.n	8007fa8 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff fdfc 	bl	8007bb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f001 fa87 	bl	80094d0 <pbuf_clen>
 8007fc2:	4605      	mov	r5, r0
    pbuf_free(p);
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f001 f947 	bl	8009258 <pbuf_free>
  p = ipr->p;
 8007fca:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007fcc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8008034 <ip_reass_free_complete_datagram+0xcc>
 8007fd0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800804c <ip_reass_free_complete_datagram+0xe4>
 8007fd4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800803c <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8007fd8:	b9af      	cbnz	r7, 8008006 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8007fda:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007fdc:	4c19      	ldr	r4, [pc, #100]	; (8008044 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8007fde:	4631      	mov	r1, r6
 8007fe0:	f7ff ffa0 	bl	8007f24 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007fe4:	88a3      	ldrh	r3, [r4, #4]
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	d205      	bcs.n	8007ff6 <ip_reass_free_complete_datagram+0x8e>
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <ip_reass_free_complete_datagram+0xcc>)
 8007fec:	22d2      	movs	r2, #210	; 0xd2
 8007fee:	4916      	ldr	r1, [pc, #88]	; (8008048 <ip_reass_free_complete_datagram+0xe0>)
 8007ff0:	4812      	ldr	r0, [pc, #72]	; (800803c <ip_reass_free_complete_datagram+0xd4>)
 8007ff2:	f005 fad9 	bl	800d5a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007ff6:	88a3      	ldrh	r3, [r4, #4]
}
 8007ff8:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8007ffa:	1b5b      	subs	r3, r3, r5
 8007ffc:	80a3      	strh	r3, [r4, #4]
}
 8007ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8008002:	2500      	movs	r5, #0
 8008004:	e7e1      	b.n	8007fca <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8008006:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8008008:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 800800a:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800800e:	f001 fa5f 	bl	80094d0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8008012:	4405      	add	r5, r0
 8008014:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008018:	db05      	blt.n	8008026 <ip_reass_free_complete_datagram+0xbe>
 800801a:	4643      	mov	r3, r8
 800801c:	22cc      	movs	r2, #204	; 0xcc
 800801e:	4649      	mov	r1, r9
 8008020:	4650      	mov	r0, sl
 8008022:	f005 fac1 	bl	800d5a8 <iprintf>
    pbuf_free(pcur);
 8008026:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8008028:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800802a:	465f      	mov	r7, fp
    pbuf_free(pcur);
 800802c:	f001 f914 	bl	8009258 <pbuf_free>
 8008030:	e7d2      	b.n	8007fd8 <ip_reass_free_complete_datagram+0x70>
 8008032:	bf00      	nop
 8008034:	08019307 	.word	0x08019307
 8008038:	08019397 	.word	0x08019397
 800803c:	08017fc5 	.word	0x08017fc5
 8008040:	080193a3 	.word	0x080193a3
 8008044:	2000a68c 	.word	0x2000a68c
 8008048:	080193d2 	.word	0x080193d2
 800804c:	080193b5 	.word	0x080193b5

08008050 <ip_reass_remove_oldest_datagram>:
{
 8008050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008054:	4605      	mov	r5, r0
 8008056:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8008058:	2600      	movs	r6, #0
    r = reassdatagrams;
 800805a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80080c4 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800805e:	2400      	movs	r4, #0
    r = reassdatagrams;
 8008060:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8008064:	4621      	mov	r1, r4
    prev = NULL;
 8008066:	46a4      	mov	ip, r4
    oldest = NULL;
 8008068:	4620      	mov	r0, r4
    while (r != NULL) {
 800806a:	b953      	cbnz	r3, 8008082 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800806c:	b110      	cbz	r0, 8008074 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800806e:	f7ff ff7b 	bl	8007f68 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8008072:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8008074:	42be      	cmp	r6, r7
 8008076:	da01      	bge.n	800807c <ip_reass_remove_oldest_datagram+0x2c>
 8008078:	2c01      	cmp	r4, #1
 800807a:	dcf0      	bgt.n	800805e <ip_reass_remove_oldest_datagram+0xe>
}
 800807c:	4630      	mov	r0, r6
 800807e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8008082:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8008086:	695a      	ldr	r2, [r3, #20]
 8008088:	4572      	cmp	r2, lr
 800808a:	d109      	bne.n	80080a0 <ip_reass_remove_oldest_datagram+0x50>
 800808c:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	4572      	cmp	r2, lr
 8008094:	d104      	bne.n	80080a0 <ip_reass_remove_oldest_datagram+0x50>
 8008096:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800809a:	88aa      	ldrh	r2, [r5, #4]
 800809c:	4596      	cmp	lr, r2
 800809e:	d008      	beq.n	80080b2 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80080a0:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80080a2:	b160      	cbz	r0, 80080be <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80080a4:	7fc2      	ldrb	r2, [r0, #31]
 80080a6:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80080aa:	4596      	cmp	lr, r2
 80080ac:	bf9c      	itt	ls
 80080ae:	4661      	movls	r1, ip
 80080b0:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	bf18      	it	ne
 80080b8:	469c      	movne	ip, r3
 80080ba:	4613      	mov	r3, r2
 80080bc:	e7d5      	b.n	800806a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80080be:	4661      	mov	r1, ip
 80080c0:	4618      	mov	r0, r3
 80080c2:	e7f6      	b.n	80080b2 <ip_reass_remove_oldest_datagram+0x62>
 80080c4:	2000a68c 	.word	0x2000a68c

080080c8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80080c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80080ca:	4604      	mov	r4, r0
 80080cc:	b930      	cbnz	r0, 80080dc <ip_frag_free_pbuf_custom_ref+0x14>
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <ip_frag_free_pbuf_custom_ref+0x20>)
 80080d0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80080d4:	4905      	ldr	r1, [pc, #20]	; (80080ec <ip_frag_free_pbuf_custom_ref+0x24>)
 80080d6:	4806      	ldr	r0, [pc, #24]	; (80080f0 <ip_frag_free_pbuf_custom_ref+0x28>)
 80080d8:	f005 fa66 	bl	800d5a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80080dc:	4621      	mov	r1, r4
 80080de:	2005      	movs	r0, #5
}
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80080e4:	f000 be58 	b.w	8008d98 <memp_free>
 80080e8:	08019307 	.word	0x08019307
 80080ec:	08019ba6 	.word	0x08019ba6
 80080f0:	08017fc5 	.word	0x08017fc5

080080f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80080f4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80080f6:	4604      	mov	r4, r0
 80080f8:	b930      	cbnz	r0, 8008108 <ipfrag_free_pbuf_custom+0x14>
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <ipfrag_free_pbuf_custom+0x28>)
 80080fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8008100:	4907      	ldr	r1, [pc, #28]	; (8008120 <ipfrag_free_pbuf_custom+0x2c>)
 8008102:	4808      	ldr	r0, [pc, #32]	; (8008124 <ipfrag_free_pbuf_custom+0x30>)
 8008104:	f005 fa50 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8008108:	6960      	ldr	r0, [r4, #20]
 800810a:	b108      	cbz	r0, 8008110 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800810c:	f001 f8a4 	bl	8009258 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008110:	4620      	mov	r0, r4
}
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8008116:	f7ff bfd7 	b.w	80080c8 <ip_frag_free_pbuf_custom_ref>
 800811a:	bf00      	nop
 800811c:	08019307 	.word	0x08019307
 8008120:	080193f4 	.word	0x080193f4
 8008124:	08017fc5 	.word	0x08017fc5

08008128 <ip_reass_tmr>:
{
 8008128:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 800812c:	2400      	movs	r4, #0
  r = reassdatagrams;
 800812e:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8008130:	b900      	cbnz	r0, 8008134 <ip_reass_tmr+0xc>
}
 8008132:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8008134:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8008136:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8008138:	b123      	cbz	r3, 8008144 <ip_reass_tmr+0x1c>
      r->timer--;
 800813a:	3b01      	subs	r3, #1
 800813c:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800813e:	4604      	mov	r4, r0
 8008140:	4628      	mov	r0, r5
 8008142:	e7f5      	b.n	8008130 <ip_reass_tmr+0x8>
 8008144:	4621      	mov	r1, r4
 8008146:	f7ff ff0f 	bl	8007f68 <ip_reass_free_complete_datagram>
 800814a:	4620      	mov	r0, r4
 800814c:	e7f7      	b.n	800813e <ip_reass_tmr+0x16>
 800814e:	bf00      	nop
 8008150:	2000a68c 	.word	0x2000a68c

08008154 <ip4_reass>:
{
 8008154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8008158:	6845      	ldr	r5, [r0, #4]
{
 800815a:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800815c:	782b      	ldrb	r3, [r5, #0]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	2b05      	cmp	r3, #5
 8008164:	f040 80a0 	bne.w	80082a8 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008168:	88e8      	ldrh	r0, [r5, #6]
 800816a:	f000 fab5 	bl	80086d8 <lwip_htons>
 800816e:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008170:	8868      	ldrh	r0, [r5, #2]
 8008172:	f000 fab1 	bl	80086d8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8008176:	782a      	ldrb	r2, [r5, #0]
 8008178:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 800817c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8008180:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8008184:	f0c0 8090 	bcc.w	80082a8 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8008188:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800818a:	4eb5      	ldr	r6, [pc, #724]	; (8008460 <ip4_reass+0x30c>)
  clen = pbuf_clen(p);
 800818c:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 800818e:	b29b      	uxth	r3, r3
 8008190:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8008192:	f001 f99d 	bl	80094d0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8008196:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8008198:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800819a:	4403      	add	r3, r0
 800819c:	2b0a      	cmp	r3, #10
 800819e:	dc79      	bgt.n	8008294 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80081a0:	6834      	ldr	r4, [r6, #0]
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	f040 8085 	bne.w	80082b2 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80081a8:	2004      	movs	r0, #4
 80081aa:	f000 fdc5 	bl	8008d38 <memp_malloc>
  if (ipr == NULL) {
 80081ae:	4604      	mov	r4, r0
 80081b0:	b958      	cbnz	r0, 80081ca <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80081b2:	4649      	mov	r1, r9
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff ff4b 	bl	8008050 <ip_reass_remove_oldest_datagram>
 80081ba:	4581      	cmp	r9, r0
 80081bc:	dc74      	bgt.n	80082a8 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80081be:	2004      	movs	r0, #4
 80081c0:	f000 fdba 	bl	8008d38 <memp_malloc>
    if (ipr == NULL)
 80081c4:	4604      	mov	r4, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d06e      	beq.n	80082a8 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80081ca:	221c      	movs	r2, #28
 80081cc:	2100      	movs	r1, #0
 80081ce:	1d20      	adds	r0, r4, #4
 80081d0:	f005 f9e2 	bl	800d598 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80081d4:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80081d6:	f104 0208 	add.w	r2, r4, #8
 80081da:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 80081de:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80081e0:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 80081e2:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 80081e4:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80081e6:	462b      	mov	r3, r5
 80081e8:	f853 0b04 	ldr.w	r0, [r3], #4
 80081ec:	428b      	cmp	r3, r1
 80081ee:	f842 0b04 	str.w	r0, [r2], #4
 80081f2:	d1f9      	bne.n	80081e8 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80081f4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80081f8:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 80081fc:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008200:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8008204:	d10a      	bne.n	800821c <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	18fb      	adds	r3, r7, r3
 800820a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800820c:	429f      	cmp	r7, r3
 800820e:	f200 8137 	bhi.w	8008480 <ip4_reass+0x32c>
 8008212:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8008216:	4293      	cmp	r3, r2
 8008218:	f200 8132 	bhi.w	8008480 <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800821c:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008220:	8868      	ldrh	r0, [r5, #2]
 8008222:	f000 fa59 	bl	80086d8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8008226:	782b      	ldrb	r3, [r5, #0]
 8008228:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800822c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8008230:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008234:	f0c0 8124 	bcc.w	8008480 <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 8008238:	1a80      	subs	r0, r0, r2
 800823a:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800823e:	88e8      	ldrh	r0, [r5, #6]
 8008240:	f000 fa4a 	bl	80086d8 <lwip_htons>
 8008244:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8008248:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 800824c:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800824e:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8008250:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8008252:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 8008256:	7075      	strb	r5, [r6, #1]
 8008258:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 800825a:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800825e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8008260:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8008262:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8008264:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8008266:	f200 810b 	bhi.w	8008480 <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 800826a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800826e:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8008272:	4671      	mov	r1, lr
 8008274:	bb61      	cbnz	r1, 80082d0 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8008276:	2d00      	cmp	r5, #0
 8008278:	f040 80a9 	bne.w	80083ce <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800827c:	f1be 0f00 	cmp.w	lr, #0
 8008280:	f000 8095 	beq.w	80083ae <ip4_reass+0x25a>
 8008284:	4b77      	ldr	r3, [pc, #476]	; (8008464 <ip4_reass+0x310>)
 8008286:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800828a:	4977      	ldr	r1, [pc, #476]	; (8008468 <ip4_reass+0x314>)
 800828c:	4877      	ldr	r0, [pc, #476]	; (800846c <ip4_reass+0x318>)
 800828e:	f005 f98b 	bl	800d5a8 <iprintf>
 8008292:	e08c      	b.n	80083ae <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8008294:	4601      	mov	r1, r0
 8008296:	4628      	mov	r0, r5
 8008298:	f7ff feda 	bl	8008050 <ip_reass_remove_oldest_datagram>
 800829c:	b120      	cbz	r0, 80082a8 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800829e:	88b3      	ldrh	r3, [r6, #4]
 80082a0:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80082a2:	2b0a      	cmp	r3, #10
 80082a4:	f77f af7c 	ble.w	80081a0 <ip4_reass+0x4c>
  pbuf_free(p);
 80082a8:	4640      	mov	r0, r8
 80082aa:	f000 ffd5 	bl	8009258 <pbuf_free>
  return NULL;
 80082ae:	2700      	movs	r7, #0
 80082b0:	e077      	b.n	80083a2 <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80082b2:	68eb      	ldr	r3, [r5, #12]
 80082b4:	6962      	ldr	r2, [r4, #20]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d108      	bne.n	80082cc <ip4_reass+0x178>
 80082ba:	692b      	ldr	r3, [r5, #16]
 80082bc:	69a2      	ldr	r2, [r4, #24]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d104      	bne.n	80082cc <ip4_reass+0x178>
 80082c2:	89a2      	ldrh	r2, [r4, #12]
 80082c4:	88ab      	ldrh	r3, [r5, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	f000 80ee 	beq.w	80084a8 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80082cc:	6824      	ldr	r4, [r4, #0]
 80082ce:	e768      	b.n	80081a2 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80082d0:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80082d2:	889a      	ldrh	r2, [r3, #4]
 80082d4:	4290      	cmp	r0, r2
 80082d6:	d26d      	bcs.n	80083b4 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 80082d8:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 80082da:	2d00      	cmp	r5, #0
 80082dc:	d065      	beq.n	80083aa <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80082de:	88eb      	ldrh	r3, [r5, #6]
 80082e0:	4298      	cmp	r0, r3
 80082e2:	f0c0 80cd 	bcc.w	8008480 <ip4_reass+0x32c>
 80082e6:	4594      	cmp	ip, r2
 80082e8:	f200 80ca 	bhi.w	8008480 <ip4_reass+0x32c>
        if (iprh_prev->end != iprh->start) {
 80082ec:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 80082ee:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80082f2:	f040 80f5 	bne.w	80084e0 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80082f6:	f1bb 0f00 	cmp.w	fp, #0
 80082fa:	d004      	beq.n	8008306 <ip4_reass+0x1b2>
 80082fc:	7fa3      	ldrb	r3, [r4, #30]
 80082fe:	f013 0301 	ands.w	r3, r3, #1
 8008302:	f000 809b 	beq.w	800843c <ip4_reass+0x2e8>
    if (valid) {
 8008306:	f1ba 0f00 	cmp.w	sl, #0
 800830a:	d170      	bne.n	80083ee <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 800830c:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8008310:	4e53      	ldr	r6, [pc, #332]	; (8008460 <ip4_reass+0x30c>)
 8008312:	88b0      	ldrh	r0, [r6, #4]
 8008314:	4481      	add	r9, r0
 8008316:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 800831a:	f1bb 0f00 	cmp.w	fp, #0
 800831e:	d106      	bne.n	800832e <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008324:	7fa3      	ldrb	r3, [r4, #30]
 8008326:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800832a:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800832c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800832e:	f1ba 0f01 	cmp.w	sl, #1
 8008332:	d1bc      	bne.n	80082ae <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008334:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008336:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800833a:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800833c:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800833e:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008342:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008344:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008346:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008348:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800834a:	f853 cb04 	ldr.w	ip, [r3], #4
 800834e:	428b      	cmp	r3, r1
 8008350:	f842 cb04 	str.w	ip, [r2], #4
 8008354:	d1f9      	bne.n	800834a <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008356:	f000 f9bf 	bl	80086d8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800835a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800835c:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800835e:	71bb      	strb	r3, [r7, #6]
 8008360:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8008362:	72bb      	strb	r3, [r7, #10]
 8008364:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8008366:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8008368:	2d00      	cmp	r5, #0
 800836a:	d169      	bne.n	8008440 <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 800836c:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 800836e:	42a3      	cmp	r3, r4
 8008370:	d002      	beq.n	8008378 <ip4_reass+0x224>
 8008372:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8008374:	2b00      	cmp	r3, #0
 8008376:	d170      	bne.n	800845a <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7ff fdd2 	bl	8007f24 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8008380:	4638      	mov	r0, r7
 8008382:	f001 f8a5 	bl	80094d0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8008386:	88b3      	ldrh	r3, [r6, #4]
    clen = pbuf_clen(p);
 8008388:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800838a:	4283      	cmp	r3, r0
 800838c:	d206      	bcs.n	800839c <ip4_reass+0x248>
 800838e:	4b35      	ldr	r3, [pc, #212]	; (8008464 <ip4_reass+0x310>)
 8008390:	f240 229b 	movw	r2, #667	; 0x29b
 8008394:	4936      	ldr	r1, [pc, #216]	; (8008470 <ip4_reass+0x31c>)
 8008396:	4835      	ldr	r0, [pc, #212]	; (800846c <ip4_reass+0x318>)
 8008398:	f005 f906 	bl	800d5a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800839c:	88b0      	ldrh	r0, [r6, #4]
 800839e:	1b04      	subs	r4, r0, r4
 80083a0:	80b4      	strh	r4, [r6, #4]
}
 80083a2:	4638      	mov	r0, r7
 80083a4:	b003      	add	sp, #12
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 80083aa:	4594      	cmp	ip, r2
 80083ac:	d868      	bhi.n	8008480 <ip4_reass+0x32c>
      ipr->p = new_p;
 80083ae:	f8c4 8004 	str.w	r8, [r4, #4]
 80083b2:	e7a0      	b.n	80082f6 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 80083b4:	d064      	beq.n	8008480 <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 80083b6:	88d9      	ldrh	r1, [r3, #6]
 80083b8:	4281      	cmp	r1, r0
 80083ba:	d861      	bhi.n	8008480 <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 80083bc:	b125      	cbz	r5, 80083c8 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 80083be:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 80083c0:	4291      	cmp	r1, r2
 80083c2:	bf18      	it	ne
 80083c4:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	461d      	mov	r5, r3
 80083cc:	e752      	b.n	8008274 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80083ce:	88eb      	ldrh	r3, [r5, #6]
 80083d0:	4283      	cmp	r3, r0
 80083d2:	d906      	bls.n	80083e2 <ip4_reass+0x28e>
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <ip4_reass+0x310>)
 80083d6:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80083da:	4926      	ldr	r1, [pc, #152]	; (8008474 <ip4_reass+0x320>)
 80083dc:	4823      	ldr	r0, [pc, #140]	; (800846c <ip4_reass+0x318>)
 80083de:	f005 f8e3 	bl	800d5a8 <iprintf>
      if (iprh_prev->end != iprh->start) {
 80083e2:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 80083e4:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80083e8:	88b3      	ldrh	r3, [r6, #4]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	e781      	b.n	80082f2 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d08b      	beq.n	800830c <ip4_reass+0x1b8>
 80083f4:	6859      	ldr	r1, [r3, #4]
 80083f6:	888b      	ldrh	r3, [r1, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d187      	bne.n	800830c <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 80083fc:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80083fe:	b9a3      	cbnz	r3, 800842a <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 8008400:	42b1      	cmp	r1, r6
 8008402:	d106      	bne.n	8008412 <ip4_reass+0x2be>
 8008404:	4b17      	ldr	r3, [pc, #92]	; (8008464 <ip4_reass+0x310>)
 8008406:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800840a:	491b      	ldr	r1, [pc, #108]	; (8008478 <ip4_reass+0x324>)
 800840c:	4817      	ldr	r0, [pc, #92]	; (800846c <ip4_reass+0x318>)
 800840e:	f005 f8cb 	bl	800d5a8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8008412:	6833      	ldr	r3, [r6, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f43f af7b 	beq.w	8008310 <ip4_reass+0x1bc>
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <ip4_reass+0x310>)
 800841c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8008420:	4916      	ldr	r1, [pc, #88]	; (800847c <ip4_reass+0x328>)
 8008422:	4812      	ldr	r0, [pc, #72]	; (800846c <ip4_reass+0x318>)
 8008424:	f005 f8c0 	bl	800d5a8 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8008428:	e772      	b.n	8008310 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 800842a:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800842c:	88f0      	ldrh	r0, [r6, #6]
 800842e:	8893      	ldrh	r3, [r2, #4]
 8008430:	4298      	cmp	r0, r3
 8008432:	f47f af6b 	bne.w	800830c <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	4616      	mov	r6, r2
 800843a:	e7e0      	b.n	80083fe <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800843c:	469a      	mov	sl, r3
 800843e:	e767      	b.n	8008310 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8008440:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8008444:	2114      	movs	r1, #20
 8008446:	4628      	mov	r0, r5
 8008448:	f000 fed2 	bl	80091f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800844c:	4629      	mov	r1, r5
 800844e:	4638      	mov	r0, r7
 8008450:	f001 f862 	bl	8009518 <pbuf_cat>
      r = iprh->next_pbuf;
 8008454:	f8d8 5000 	ldr.w	r5, [r8]
 8008458:	e786      	b.n	8008368 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	e787      	b.n	800836e <ip4_reass+0x21a>
 800845e:	bf00      	nop
 8008460:	2000a68c 	.word	0x2000a68c
 8008464:	08019307 	.word	0x08019307
 8008468:	0801941e 	.word	0x0801941e
 800846c:	08017fc5 	.word	0x08017fc5
 8008470:	08019484 	.word	0x08019484
 8008474:	08019400 	.word	0x08019400
 8008478:	08019455 	.word	0x08019455
 800847c:	08019462 	.word	0x08019462
  if (ipr->p == NULL) {
 8008480:	6863      	ldr	r3, [r4, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f47f af10 	bne.w	80082a8 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8008488:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <ip4_reass+0x39c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	42a3      	cmp	r3, r4
 800848e:	d006      	beq.n	800849e <ip4_reass+0x34a>
 8008490:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <ip4_reass+0x3a0>)
 8008492:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008496:	4918      	ldr	r1, [pc, #96]	; (80084f8 <ip4_reass+0x3a4>)
 8008498:	4818      	ldr	r0, [pc, #96]	; (80084fc <ip4_reass+0x3a8>)
 800849a:	f005 f885 	bl	800d5a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800849e:	2100      	movs	r1, #0
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fd3f 	bl	8007f24 <ip_reass_dequeue_datagram>
 80084a6:	e6ff      	b.n	80082a8 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80084a8:	88e8      	ldrh	r0, [r5, #6]
 80084aa:	f000 f915 	bl	80086d8 <lwip_htons>
 80084ae:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f47f ae9e 	bne.w	80081f4 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80084b8:	89e0      	ldrh	r0, [r4, #14]
 80084ba:	f000 f90d 	bl	80086d8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80084be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f43f ae96 	beq.w	80081f4 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80084c8:	462b      	mov	r3, r5
 80084ca:	f104 0208 	add.w	r2, r4, #8
 80084ce:	f105 0114 	add.w	r1, r5, #20
 80084d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80084d6:	428b      	cmp	r3, r1
 80084d8:	f842 0b04 	str.w	r0, [r2], #4
 80084dc:	d1f9      	bne.n	80084d2 <ip4_reass+0x37e>
 80084de:	e689      	b.n	80081f4 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80084e0:	f1bb 0f00 	cmp.w	fp, #0
 80084e4:	f43f af12 	beq.w	800830c <ip4_reass+0x1b8>
 80084e8:	f04f 0a00 	mov.w	sl, #0
 80084ec:	e706      	b.n	80082fc <ip4_reass+0x1a8>
 80084ee:	bf00      	nop
 80084f0:	2000a68c 	.word	0x2000a68c
 80084f4:	08019307 	.word	0x08019307
 80084f8:	0801949f 	.word	0x0801949f
 80084fc:	08017fc5 	.word	0x08017fc5

08008500 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008500:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8008502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008506:	ed2d 8b02 	vpush	{d8}
 800850a:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800850e:	f1b3 0214 	subs.w	r2, r3, #20
{
 8008512:	b08b      	sub	sp, #44	; 0x2c
 8008514:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008516:	bf48      	it	mi
 8008518:	f1a3 020d 	submi.w	r2, r3, #13
{
 800851c:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800851e:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8008522:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8008524:	6843      	ldr	r3, [r0, #4]
 8008526:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	2b05      	cmp	r3, #5
 8008530:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8008534:	d109      	bne.n	800854a <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8008536:	8943      	ldrh	r3, [r0, #10]
 8008538:	2b13      	cmp	r3, #19
 800853a:	d809      	bhi.n	8008550 <ip4_frag+0x50>
 800853c:	4b60      	ldr	r3, [pc, #384]	; (80086c0 <ip4_frag+0x1c0>)
 800853e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8008542:	4960      	ldr	r1, [pc, #384]	; (80086c4 <ip4_frag+0x1c4>)
 8008544:	4860      	ldr	r0, [pc, #384]	; (80086c8 <ip4_frag+0x1c8>)
 8008546:	f005 f82f 	bl	800d5a8 <iprintf>
    return ERR_VAL;
 800854a:	f06f 0005 	mvn.w	r0, #5
 800854e:	e013      	b.n	8008578 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008550:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 8008552:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008554:	88d8      	ldrh	r0, [r3, #6]
 8008556:	f000 f8bf 	bl	80086d8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800855a:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800855e:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8008560:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 8008562:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008566:	3c14      	subs	r4, #20
 8008568:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800856a:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800856c:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	b29b      	uxth	r3, r3
 8008572:	9306      	str	r3, [sp, #24]
  while (left) {
 8008574:	b92c      	cbnz	r4, 8008582 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008576:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8008578:	b00b      	add	sp, #44	; 0x2c
 800857a:	ecbd 8b02 	vpop	{d8}
 800857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008582:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008584:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008588:	2114      	movs	r1, #20
 800858a:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800858c:	42a3      	cmp	r3, r4
 800858e:	bf28      	it	cs
 8008590:	4623      	movcs	r3, r4
 8008592:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008594:	f000 fec8 	bl	8009328 <pbuf_alloc>
    if (rambuf == NULL) {
 8008598:	4680      	mov	r8, r0
 800859a:	2800      	cmp	r0, #0
 800859c:	d036      	beq.n	800860c <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800859e:	8943      	ldrh	r3, [r0, #10]
 80085a0:	2b13      	cmp	r3, #19
 80085a2:	d806      	bhi.n	80085b2 <ip4_frag+0xb2>
 80085a4:	4b46      	ldr	r3, [pc, #280]	; (80086c0 <ip4_frag+0x1c0>)
 80085a6:	f44f 7249 	mov.w	r2, #804	; 0x324
 80085aa:	4948      	ldr	r1, [pc, #288]	; (80086cc <ip4_frag+0x1cc>)
 80085ac:	4846      	ldr	r0, [pc, #280]	; (80086c8 <ip4_frag+0x1c8>)
 80085ae:	f004 fffb 	bl	800d5a8 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80085b8:	4619      	mov	r1, r3
 80085ba:	3114      	adds	r1, #20
 80085bc:	f853 0b04 	ldr.w	r0, [r3], #4
 80085c0:	428b      	cmp	r3, r1
 80085c2:	f842 0b04 	str.w	r0, [r2], #4
 80085c6:	d1f9      	bne.n	80085bc <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80085c8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 80085cc:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	d041      	beq.n	800865a <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 80085d6:	896b      	ldrh	r3, [r5, #10]
 80085d8:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80085da:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 80085dc:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80085de:	d206      	bcs.n	80085ee <ip4_frag+0xee>
 80085e0:	4b37      	ldr	r3, [pc, #220]	; (80086c0 <ip4_frag+0x1c0>)
 80085e2:	f240 322d 	movw	r2, #813	; 0x32d
 80085e6:	493a      	ldr	r1, [pc, #232]	; (80086d0 <ip4_frag+0x1d0>)
 80085e8:	4837      	ldr	r0, [pc, #220]	; (80086c8 <ip4_frag+0x1c8>)
 80085ea:	f004 ffdd 	bl	800d5a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80085ee:	454e      	cmp	r6, r9
 80085f0:	bf28      	it	cs
 80085f2:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 80085f4:	b916      	cbnz	r6, 80085fc <ip4_frag+0xfc>
        p = p->next;
 80085f6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80085f8:	2700      	movs	r7, #0
 80085fa:	e7e9      	b.n	80085d0 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80085fc:	2005      	movs	r0, #5
 80085fe:	f000 fb9b 	bl	8008d38 <memp_malloc>
      if (pcr == NULL) {
 8008602:	4603      	mov	r3, r0
 8008604:	b928      	cbnz	r0, 8008612 <ip4_frag+0x112>
        pbuf_free(rambuf);
 8008606:	4640      	mov	r0, r8
 8008608:	f000 fe26 	bl	8009258 <pbuf_free>
  return ERR_MEM;
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e7b2      	b.n	8008578 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8008612:	9601      	str	r6, [sp, #4]
 8008614:	4631      	mov	r1, r6
 8008616:	686a      	ldr	r2, [r5, #4]
 8008618:	9008      	str	r0, [sp, #32]
 800861a:	2000      	movs	r0, #0
 800861c:	443a      	add	r2, r7
 800861e:	9200      	str	r2, [sp, #0]
 8008620:	2241      	movs	r2, #65	; 0x41
 8008622:	f000 fdc7 	bl	80091b4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	b918      	cbnz	r0, 8008632 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fd4c 	bl	80080c8 <ip_frag_free_pbuf_custom_ref>
 8008630:	e7e9      	b.n	8008606 <ip4_frag+0x106>
 8008632:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008636:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800863a:	4628      	mov	r0, r5
 800863c:	f000 ff50 	bl	80094e0 <pbuf_ref>
      pcr->original = p;
 8008640:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008642:	4a24      	ldr	r2, [pc, #144]	; (80086d4 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008644:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8008648:	9908      	ldr	r1, [sp, #32]
 800864a:	4640      	mov	r0, r8
      pcr->original = p;
 800864c:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800864e:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8008650:	f000 ff62 	bl	8009518 <pbuf_cat>
      if (left_to_copy) {
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d1cd      	bne.n	80085f6 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 800865a:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 800865c:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800865e:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8008662:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8008666:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8008668:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800866a:	42a3      	cmp	r3, r4
 800866c:	dd01      	ble.n	8008672 <ip4_frag+0x172>
 800866e:	9b07      	ldr	r3, [sp, #28]
 8008670:	b10b      	cbz	r3, 8008676 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8008672:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008676:	f000 f82f 	bl	80086d8 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800867a:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800867c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008680:	f103 0014 	add.w	r0, r3, #20
 8008684:	b280      	uxth	r0, r0
 8008686:	f000 f827 	bl	80086d8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800868a:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800868c:	ee18 2a10 	vmov	r2, s16
 8008690:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008692:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8008696:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 8008698:	f88b 300a 	strb.w	r3, [fp, #10]
 800869c:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80086a0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80086a4:	4798      	blx	r3
    pbuf_free(rambuf);
 80086a6:	4640      	mov	r0, r8
 80086a8:	f000 fdd6 	bl	8009258 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80086ac:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80086ae:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 80086b0:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80086b6:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	e75a      	b.n	8008574 <ip4_frag+0x74>
 80086be:	bf00      	nop
 80086c0:	08019307 	.word	0x08019307
 80086c4:	080194bf 	.word	0x080194bf
 80086c8:	08017fc5 	.word	0x08017fc5
 80086cc:	080194da 	.word	0x080194da
 80086d0:	080194fa 	.word	0x080194fa
 80086d4:	080080f5 	.word	0x080080f5

080086d8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80086d8:	ba40      	rev16	r0, r0
}
 80086da:	b280      	uxth	r0, r0
 80086dc:	4770      	bx	lr

080086de <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80086de:	ba00      	rev	r0, r0
 80086e0:	4770      	bx	lr

080086e2 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80086e2:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80086e4:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80086e6:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 80086ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80086ee:	d007      	beq.n	8008700 <lwip_standard_chksum+0x1e>
 80086f0:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 80086f2:	bfc2      	ittt	gt
 80086f4:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 80086f8:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 80086fc:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8008700:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8008702:	2901      	cmp	r1, #1
 8008704:	dc15      	bgt.n	8008732 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008706:	bf04      	itt	eq
 8008708:	7803      	ldrbeq	r3, [r0, #0]
 800870a:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800870e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008712:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008714:	b298      	uxth	r0, r3
 8008716:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 800871a:	b298      	uxth	r0, r3
 800871c:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8008720:	b124      	cbz	r4, 800872c <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008722:	0203      	lsls	r3, r0, #8
 8008724:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008728:	b29b      	uxth	r3, r3
 800872a:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800872c:	b280      	uxth	r0, r0
 800872e:	b002      	add	sp, #8
 8008730:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8008732:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8008736:	3902      	subs	r1, #2
    sum += *ps++;
 8008738:	441a      	add	r2, r3
    len -= 2;
 800873a:	e7e2      	b.n	8008702 <lwip_standard_chksum+0x20>

0800873c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800873c:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800873e:	2600      	movs	r6, #0
{
 8008740:	4605      	mov	r5, r0

  acc = 0;
 8008742:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8008744:	b945      	cbnz	r5, 8008758 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8008746:	b126      	cbz	r6, 8008752 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008748:	0223      	lsls	r3, r4, #8
 800874a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8008752:	43e0      	mvns	r0, r4
}
 8008754:	b280      	uxth	r0, r0
 8008756:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008758:	8969      	ldrh	r1, [r5, #10]
 800875a:	6868      	ldr	r0, [r5, #4]
 800875c:	f7ff ffc1 	bl	80086e2 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8008760:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008762:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8008764:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8008766:	b2a0      	uxth	r0, r4
 8008768:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 800876c:	d506      	bpl.n	800877c <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800876e:	0223      	lsls	r3, r4, #8
 8008770:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008774:	f086 0601 	eor.w	r6, r6, #1
 8008778:	b29b      	uxth	r3, r3
 800877a:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800877c:	682d      	ldr	r5, [r5, #0]
 800877e:	e7e1      	b.n	8008744 <inet_chksum_pbuf+0x8>

08008780 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008780:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008782:	f004 fe41 	bl	800d408 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008786:	f000 f80d 	bl	80087a4 <mem_init>
  memp_init();
 800878a:	f000 fab1 	bl	8008cf0 <memp_init>
  pbuf_init();
  netif_init();
 800878e:	f000 fb69 	bl	8008e64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008792:	f004 fa55 	bl	800cc40 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008796:	f001 f841 	bl	800981c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800879a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800879e:	f004 ba0f 	b.w	800cbc0 <sys_timeouts_init>
	...

080087a4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80087a4:	4810      	ldr	r0, [pc, #64]	; (80087e8 <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80087a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80087aa:	4b10      	ldr	r3, [pc, #64]	; (80087ec <mem_init+0x48>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80087ac:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80087b0:	300c      	adds	r0, #12
{
 80087b2:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80087b4:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->next = MEM_SIZE_ALIGNED;
 80087b8:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 80087ba:	2200      	movs	r2, #0
 80087bc:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80087be:	4a0c      	ldr	r2, [pc, #48]	; (80087f0 <mem_init+0x4c>)
 80087c0:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80087c4:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 80087c6:	2101      	movs	r1, #1
 80087c8:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 80087ca:	f840 3c04 	str.w	r3, [r0, #-4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80087ce:	f004 fe27 	bl	800d420 <sys_mutex_new>
 80087d2:	b140      	cbz	r0, 80087e6 <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <mem_init+0x50>)
 80087d6:	f240 221f 	movw	r2, #543	; 0x21f
 80087da:	4907      	ldr	r1, [pc, #28]	; (80087f8 <mem_init+0x54>)
 80087dc:	4807      	ldr	r0, [pc, #28]	; (80087fc <mem_init+0x58>)
  }
}
 80087de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80087e2:	f004 bee1 	b.w	800d5a8 <iprintf>
}
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	2000a6ac 	.word	0x2000a6ac
 80087ec:	20048000 	.word	0x20048000
 80087f0:	2004c000 	.word	0x2004c000
 80087f4:	08019509 	.word	0x08019509
 80087f8:	08019576 	.word	0x08019576
 80087fc:	08017fc5 	.word	0x08017fc5

08008800 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008800:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008802:	4604      	mov	r4, r0
 8008804:	2800      	cmp	r0, #0
 8008806:	f000 80b7 	beq.w	8008978 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800880a:	0783      	lsls	r3, r0, #30
 800880c:	d00c      	beq.n	8008828 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800880e:	4b5b      	ldr	r3, [pc, #364]	; (800897c <mem_free+0x17c>)
 8008810:	f240 2273 	movw	r2, #627	; 0x273
 8008814:	495a      	ldr	r1, [pc, #360]	; (8008980 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008816:	485b      	ldr	r0, [pc, #364]	; (8008984 <mem_free+0x184>)
 8008818:	f004 fec6 	bl	800d5a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800881c:	f004 fe26 	bl	800d46c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008824:	f004 be2e 	b.w	800d484 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008828:	4d57      	ldr	r5, [pc, #348]	; (8008988 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800882a:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	42b3      	cmp	r3, r6
 8008832:	d804      	bhi.n	800883e <mem_free+0x3e>
 8008834:	f100 030c 	add.w	r3, r0, #12
 8008838:	686a      	ldr	r2, [r5, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d204      	bcs.n	8008848 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800883e:	4b4f      	ldr	r3, [pc, #316]	; (800897c <mem_free+0x17c>)
 8008840:	f240 227f 	movw	r2, #639	; 0x27f
 8008844:	4951      	ldr	r1, [pc, #324]	; (800898c <mem_free+0x18c>)
 8008846:	e7e6      	b.n	8008816 <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8008848:	f105 000c 	add.w	r0, r5, #12
 800884c:	f004 fdf6 	bl	800d43c <sys_mutex_lock>
  if (!mem->used) {
 8008850:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008854:	b95b      	cbnz	r3, 800886e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008856:	4b49      	ldr	r3, [pc, #292]	; (800897c <mem_free+0x17c>)
 8008858:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800885c:	494c      	ldr	r1, [pc, #304]	; (8008990 <mem_free+0x190>)
 800885e:	4849      	ldr	r0, [pc, #292]	; (8008984 <mem_free+0x184>)
 8008860:	f004 fea2 	bl	800d5a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008864:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 8008868:	f004 fded 	bl	800d446 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800886c:	e7d6      	b.n	800881c <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800886e:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008872:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008876:	d813      	bhi.n	80088a0 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 8008878:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800887c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008880:	d80e      	bhi.n	80088a0 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 8008882:	6829      	ldr	r1, [r5, #0]
 8008884:	1a73      	subs	r3, r6, r1
 8008886:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008888:	4283      	cmp	r3, r0
 800888a:	d002      	beq.n	8008892 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800888c:	5a08      	ldrh	r0, [r1, r0]
 800888e:	4298      	cmp	r0, r3
 8008890:	d106      	bne.n	80088a0 <mem_free+0xa0>
  return (struct mem *)(void *)&ram[ptr];
 8008892:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008894:	6868      	ldr	r0, [r5, #4]
 8008896:	4282      	cmp	r2, r0
 8008898:	d00b      	beq.n	80088b2 <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800889a:	8852      	ldrh	r2, [r2, #2]
 800889c:	429a      	cmp	r2, r3
 800889e:	d008      	beq.n	80088b2 <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80088a0:	4b36      	ldr	r3, [pc, #216]	; (800897c <mem_free+0x17c>)
 80088a2:	f240 2295 	movw	r2, #661	; 0x295
 80088a6:	493b      	ldr	r1, [pc, #236]	; (8008994 <mem_free+0x194>)
 80088a8:	4836      	ldr	r0, [pc, #216]	; (8008984 <mem_free+0x184>)
 80088aa:	f004 fe7d 	bl	800d5a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088ae:	483a      	ldr	r0, [pc, #232]	; (8008998 <mem_free+0x198>)
 80088b0:	e7da      	b.n	8008868 <mem_free+0x68>
  mem->used = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80088b8:	68ab      	ldr	r3, [r5, #8]
 80088ba:	42b3      	cmp	r3, r6
    lfree = mem;
 80088bc:	bf88      	it	hi
 80088be:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80088c0:	428e      	cmp	r6, r1
 80088c2:	d206      	bcs.n	80088d2 <mem_free+0xd2>
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <mem_free+0x17c>)
 80088c6:	f240 12df 	movw	r2, #479	; 0x1df
 80088ca:	4934      	ldr	r1, [pc, #208]	; (800899c <mem_free+0x19c>)
 80088cc:	482d      	ldr	r0, [pc, #180]	; (8008984 <mem_free+0x184>)
 80088ce:	f004 fe6b 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80088d2:	686b      	ldr	r3, [r5, #4]
 80088d4:	429e      	cmp	r6, r3
 80088d6:	d306      	bcc.n	80088e6 <mem_free+0xe6>
 80088d8:	4b28      	ldr	r3, [pc, #160]	; (800897c <mem_free+0x17c>)
 80088da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80088de:	4930      	ldr	r1, [pc, #192]	; (80089a0 <mem_free+0x1a0>)
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <mem_free+0x184>)
 80088e2:	f004 fe61 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80088e6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80088ea:	b133      	cbz	r3, 80088fa <mem_free+0xfa>
 80088ec:	4b23      	ldr	r3, [pc, #140]	; (800897c <mem_free+0x17c>)
 80088ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 80088f2:	492c      	ldr	r1, [pc, #176]	; (80089a4 <mem_free+0x1a4>)
 80088f4:	4823      	ldr	r0, [pc, #140]	; (8008984 <mem_free+0x184>)
 80088f6:	f004 fe57 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80088fa:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80088fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008902:	d906      	bls.n	8008912 <mem_free+0x112>
 8008904:	4b1d      	ldr	r3, [pc, #116]	; (800897c <mem_free+0x17c>)
 8008906:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800890a:	4927      	ldr	r1, [pc, #156]	; (80089a8 <mem_free+0x1a8>)
 800890c:	481d      	ldr	r0, [pc, #116]	; (8008984 <mem_free+0x184>)
 800890e:	f004 fe4b 	bl	800d5a8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008918:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800891a:	4296      	cmp	r6, r2
 800891c:	d012      	beq.n	8008944 <mem_free+0x144>
 800891e:	7910      	ldrb	r0, [r2, #4]
 8008920:	b980      	cbnz	r0, 8008944 <mem_free+0x144>
 8008922:	6868      	ldr	r0, [r5, #4]
 8008924:	4282      	cmp	r2, r0
 8008926:	d00d      	beq.n	8008944 <mem_free+0x144>
    if (lfree == nmem) {
 8008928:	68a8      	ldr	r0, [r5, #8]
 800892a:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800892c:	5a5a      	ldrh	r2, [r3, r1]
 800892e:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008932:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8008934:	bf08      	it	eq
 8008936:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008938:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800893c:	bf1e      	ittt	ne
 800893e:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8008940:	1af1      	subne	r1, r6, r3
 8008942:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8008944:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8008948:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800894a:	428e      	cmp	r6, r1
 800894c:	d00f      	beq.n	800896e <mem_free+0x16e>
 800894e:	7908      	ldrb	r0, [r1, #4]
 8008950:	b968      	cbnz	r0, 800896e <mem_free+0x16e>
    if (lfree == mem) {
 8008952:	68a8      	ldr	r0, [r5, #8]
 8008954:	4286      	cmp	r6, r0
      lfree = pmem;
 8008956:	bf08      	it	eq
 8008958:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800895a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800895e:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008960:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008964:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008968:	bf1c      	itt	ne
 800896a:	185b      	addne	r3, r3, r1
 800896c:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800896e:	480a      	ldr	r0, [pc, #40]	; (8008998 <mem_free+0x198>)
}
 8008970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8008974:	f004 bd67 	b.w	800d446 <sys_mutex_unlock>
}
 8008978:	bd70      	pop	{r4, r5, r6, pc}
 800897a:	bf00      	nop
 800897c:	08019509 	.word	0x08019509
 8008980:	08019591 	.word	0x08019591
 8008984:	08017fc5 	.word	0x08017fc5
 8008988:	2000a6ac 	.word	0x2000a6ac
 800898c:	080195b2 	.word	0x080195b2
 8008990:	080195cb 	.word	0x080195cb
 8008994:	080195f1 	.word	0x080195f1
 8008998:	2000a6b8 	.word	0x2000a6b8
 800899c:	08019623 	.word	0x08019623
 80089a0:	0801963a 	.word	0x0801963a
 80089a4:	08019654 	.word	0x08019654
 80089a8:	0801966f 	.word	0x0801966f

080089ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80089b0:	1ccc      	adds	r4, r1, #3
{
 80089b2:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80089b4:	f024 0403 	bic.w	r4, r4, #3
 80089b8:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80089ba:	2c0b      	cmp	r4, #11
 80089bc:	d904      	bls.n	80089c8 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80089be:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80089c2:	d902      	bls.n	80089ca <mem_trim+0x1e>
    return NULL;
 80089c4:	2500      	movs	r5, #0
 80089c6:	e01a      	b.n	80089fe <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 80089c8:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80089ca:	42a1      	cmp	r1, r4
 80089cc:	d8fa      	bhi.n	80089c4 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80089ce:	4e47      	ldr	r6, [pc, #284]	; (8008aec <mem_trim+0x140>)
 80089d0:	6833      	ldr	r3, [r6, #0]
 80089d2:	42ab      	cmp	r3, r5
 80089d4:	d802      	bhi.n	80089dc <mem_trim+0x30>
 80089d6:	6873      	ldr	r3, [r6, #4]
 80089d8:	42ab      	cmp	r3, r5
 80089da:	d806      	bhi.n	80089ea <mem_trim+0x3e>
 80089dc:	4b44      	ldr	r3, [pc, #272]	; (8008af0 <mem_trim+0x144>)
 80089de:	f240 22d1 	movw	r2, #721	; 0x2d1
 80089e2:	4944      	ldr	r1, [pc, #272]	; (8008af4 <mem_trim+0x148>)
 80089e4:	4844      	ldr	r0, [pc, #272]	; (8008af8 <mem_trim+0x14c>)
 80089e6:	f004 fddf 	bl	800d5a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80089ea:	6833      	ldr	r3, [r6, #0]
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	d802      	bhi.n	80089f6 <mem_trim+0x4a>
 80089f0:	6872      	ldr	r2, [r6, #4]
 80089f2:	42aa      	cmp	r2, r5
 80089f4:	d806      	bhi.n	8008a04 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80089f6:	f004 fd39 	bl	800d46c <sys_arch_protect>
 80089fa:	f004 fd43 	bl	800d484 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80089fe:	4628      	mov	r0, r5
 8008a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008a04:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008a08:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8008a0c:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008a0e:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8008a12:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008a14:	eba8 0807 	sub.w	r8, r8, r7
 8008a18:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008a1c:	45a0      	cmp	r8, r4
 8008a1e:	d207      	bcs.n	8008a30 <mem_trim+0x84>
 8008a20:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <mem_trim+0x144>)
 8008a22:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008a26:	4935      	ldr	r1, [pc, #212]	; (8008afc <mem_trim+0x150>)
 8008a28:	4833      	ldr	r0, [pc, #204]	; (8008af8 <mem_trim+0x14c>)
 8008a2a:	f004 fdbd 	bl	800d5a8 <iprintf>
  if (newsize > size) {
 8008a2e:	e7c9      	b.n	80089c4 <mem_trim+0x18>
  if (newsize == size) {
 8008a30:	d0e5      	beq.n	80089fe <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8008a32:	4833      	ldr	r0, [pc, #204]	; (8008b00 <mem_trim+0x154>)
 8008a34:	f004 fd02 	bl	800d43c <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8008a38:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8008a3c:	f8d6 b000 	ldr.w	fp, [r6]
 8008a40:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8008a44:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8008a48:	bb3b      	cbnz	r3, 8008a9a <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a4a:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
 8008a4e:	d106      	bne.n	8008a5e <mem_trim+0xb2>
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <mem_trim+0x144>)
 8008a52:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008a56:	492b      	ldr	r1, [pc, #172]	; (8008b04 <mem_trim+0x158>)
 8008a58:	4827      	ldr	r0, [pc, #156]	; (8008af8 <mem_trim+0x14c>)
 8008a5a:	f004 fda5 	bl	800d5a8 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a5e:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8008a62:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8008a64:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a68:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 8008a6a:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8008a6c:	4551      	cmp	r1, sl
    mem2->used = 0;
 8008a6e:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a72:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8008a74:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8008a78:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8008a7a:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8008a7c:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8008a7e:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a82:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8008a84:	bf08      	it	eq
 8008a86:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a88:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8008a8c:	d001      	beq.n	8008a92 <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008a8e:	440b      	add	r3, r1
 8008a90:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008a92:	481b      	ldr	r0, [pc, #108]	; (8008b00 <mem_trim+0x154>)
 8008a94:	f004 fcd7 	bl	800d446 <sys_mutex_unlock>
  return rmem;
 8008a98:	e7b1      	b.n	80089fe <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008a9a:	f104 0314 	add.w	r3, r4, #20
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4598      	cmp	r8, r3
 8008aa2:	d3f6      	bcc.n	8008a92 <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008aa8:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008aac:	441c      	add	r4, r3
 8008aae:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ab0:	d106      	bne.n	8008ac0 <mem_trim+0x114>
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <mem_trim+0x144>)
 8008ab4:	f240 3216 	movw	r2, #790	; 0x316
 8008ab8:	4912      	ldr	r1, [pc, #72]	; (8008b04 <mem_trim+0x158>)
 8008aba:	480f      	ldr	r0, [pc, #60]	; (8008af8 <mem_trim+0x14c>)
 8008abc:	f004 fd74 	bl	800d5a8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008ac0:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8008ac2:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8008ac4:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8008ac6:	4291      	cmp	r1, r2
    mem2->used = 0;
 8008ac8:	f04f 0100 	mov.w	r1, #0
 8008acc:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8008ace:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8008ad2:	bf88      	it	hi
 8008ad4:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8008ad6:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8008ad8:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8008ada:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008ade:	5b1a      	ldrh	r2, [r3, r4]
 8008ae0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008ae4:	bf1c      	itt	ne
 8008ae6:	189b      	addne	r3, r3, r2
 8008ae8:	805c      	strhne	r4, [r3, #2]
 8008aea:	e7d2      	b.n	8008a92 <mem_trim+0xe6>
 8008aec:	2000a6ac 	.word	0x2000a6ac
 8008af0:	08019509 	.word	0x08019509
 8008af4:	08019699 	.word	0x08019699
 8008af8:	08017fc5 	.word	0x08017fc5
 8008afc:	080196b0 	.word	0x080196b0
 8008b00:	2000a6b8 	.word	0x2000a6b8
 8008b04:	080196d0 	.word	0x080196d0

08008b08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f000 8084 	beq.w	8008c1a <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008b12:	1cc5      	adds	r5, r0, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8008b1a:	2d0b      	cmp	r5, #11
 8008b1c:	d904      	bls.n	8008b28 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008b1e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8008b22:	d902      	bls.n	8008b2a <mem_malloc+0x22>
    return NULL;
 8008b24:	2000      	movs	r0, #0
 8008b26:	e078      	b.n	8008c1a <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 8008b28:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008b2a:	42a8      	cmp	r0, r5
 8008b2c:	d8fa      	bhi.n	8008b24 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008b2e:	4f40      	ldr	r7, [pc, #256]	; (8008c30 <mem_malloc+0x128>)
 8008b30:	f107 000c 	add.w	r0, r7, #12
 8008b34:	f004 fc82 	bl	800d43c <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008b3c:	f5c5 4080 	rsb	r0, r5, #16384	; 0x4000
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008b40:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8008b44:	1ab6      	subs	r6, r6, r2
 8008b46:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008b48:	4286      	cmp	r6, r0
 8008b4a:	d303      	bcc.n	8008b54 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008b4c:	4839      	ldr	r0, [pc, #228]	; (8008c34 <mem_malloc+0x12c>)
 8008b4e:	f004 fc7a 	bl	800d446 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008b52:	e7e7      	b.n	8008b24 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8008b54:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008b56:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8008b58:	7923      	ldrb	r3, [r4, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d165      	bne.n	8008c2a <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008b5e:	ebac 0306 	sub.w	r3, ip, r6
 8008b62:	440b      	add	r3, r1
      if ((!mem->used) &&
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	d360      	bcc.n	8008c2a <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008b68:	f105 0808 	add.w	r8, r5, #8
 8008b6c:	3514      	adds	r5, #20
 8008b6e:	b2ad      	uxth	r5, r5
 8008b70:	fa1f f888 	uxth.w	r8, r8
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	d352      	bcc.n	8008c1e <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008b78:	eb08 0506 	add.w	r5, r8, r6
 8008b7c:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008b7e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8008b82:	d106      	bne.n	8008b92 <mem_malloc+0x8a>
 8008b84:	4b2c      	ldr	r3, [pc, #176]	; (8008c38 <mem_malloc+0x130>)
 8008b86:	f240 3287 	movw	r2, #903	; 0x387
 8008b8a:	492c      	ldr	r1, [pc, #176]	; (8008c3c <mem_malloc+0x134>)
 8008b8c:	482c      	ldr	r0, [pc, #176]	; (8008c40 <mem_malloc+0x138>)
 8008b8e:	f004 fd0b 	bl	800d5a8 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008b92:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8008b94:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8008b96:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 8008b98:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8008b9a:	8821      	ldrh	r1, [r4, #0]
 8008b9c:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 8008b9e:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8008ba0:	2201      	movs	r2, #1
          mem->next = ptr2;
 8008ba2:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 8008ba4:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008ba6:	5b5a      	ldrh	r2, [r3, r5]
 8008ba8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008bac:	d001      	beq.n	8008bb2 <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008bae:	4413      	add	r3, r2
 8008bb0:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	d110      	bne.n	8008bda <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 8008bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8008bbc:	791a      	ldrb	r2, [r3, #4]
 8008bbe:	b10a      	cbz	r2, 8008bc4 <mem_malloc+0xbc>
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	d12f      	bne.n	8008c24 <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008bc4:	4299      	cmp	r1, r3
          lfree = cur;
 8008bc6:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008bc8:	d007      	beq.n	8008bda <mem_malloc+0xd2>
 8008bca:	b132      	cbz	r2, 8008bda <mem_malloc+0xd2>
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <mem_malloc+0x130>)
 8008bce:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008bd2:	491c      	ldr	r1, [pc, #112]	; (8008c44 <mem_malloc+0x13c>)
 8008bd4:	481a      	ldr	r0, [pc, #104]	; (8008c40 <mem_malloc+0x138>)
 8008bd6:	f004 fce7 	bl	800d5a8 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8008bda:	4816      	ldr	r0, [pc, #88]	; (8008c34 <mem_malloc+0x12c>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008bdc:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8008bde:	f004 fc32 	bl	800d446 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4543      	cmp	r3, r8
 8008be6:	d206      	bcs.n	8008bf6 <mem_malloc+0xee>
 8008be8:	4b13      	ldr	r3, [pc, #76]	; (8008c38 <mem_malloc+0x130>)
 8008bea:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008bee:	4916      	ldr	r1, [pc, #88]	; (8008c48 <mem_malloc+0x140>)
 8008bf0:	4813      	ldr	r0, [pc, #76]	; (8008c40 <mem_malloc+0x138>)
 8008bf2:	f004 fcd9 	bl	800d5a8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008bf6:	07a3      	lsls	r3, r4, #30
 8008bf8:	d00d      	beq.n	8008c16 <mem_malloc+0x10e>
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <mem_malloc+0x130>)
 8008bfc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008c00:	4912      	ldr	r1, [pc, #72]	; (8008c4c <mem_malloc+0x144>)
 8008c02:	480f      	ldr	r0, [pc, #60]	; (8008c40 <mem_malloc+0x138>)
 8008c04:	f004 fcd0 	bl	800d5a8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <mem_malloc+0x130>)
 8008c0a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008c0e:	4910      	ldr	r1, [pc, #64]	; (8008c50 <mem_malloc+0x148>)
 8008c10:	480b      	ldr	r0, [pc, #44]	; (8008c40 <mem_malloc+0x138>)
 8008c12:	f004 fcc9 	bl	800d5a8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008c16:	f104 0008 	add.w	r0, r4, #8
}
 8008c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	7123      	strb	r3, [r4, #4]
 8008c22:	e7c6      	b.n	8008bb2 <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	4403      	add	r3, r0
 8008c28:	e7c8      	b.n	8008bbc <mem_malloc+0xb4>
 8008c2a:	460e      	mov	r6, r1
 8008c2c:	e78c      	b.n	8008b48 <mem_malloc+0x40>
 8008c2e:	bf00      	nop
 8008c30:	2000a6ac 	.word	0x2000a6ac
 8008c34:	2000a6b8 	.word	0x2000a6b8
 8008c38:	08019509 	.word	0x08019509
 8008c3c:	080196d0 	.word	0x080196d0
 8008c40:	08017fc5 	.word	0x08017fc5
 8008c44:	080196e1 	.word	0x080196e1
 8008c48:	080196fa 	.word	0x080196fa
 8008c4c:	0801972a 	.word	0x0801972a
 8008c50:	08019759 	.word	0x08019759

08008c54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008c58:	f004 fc08 	bl	800d46c <sys_arch_protect>
 8008c5c:	4605      	mov	r5, r0

  memp = *desc->tab;
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008c62:	b15c      	cbz	r4, 8008c7c <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008c68:	07a3      	lsls	r3, r4, #30
 8008c6a:	d006      	beq.n	8008c7a <do_memp_malloc_pool+0x26>
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <do_memp_malloc_pool+0x30>)
 8008c6e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008c72:	4905      	ldr	r1, [pc, #20]	; (8008c88 <do_memp_malloc_pool+0x34>)
 8008c74:	4805      	ldr	r0, [pc, #20]	; (8008c8c <do_memp_malloc_pool+0x38>)
 8008c76:	f004 fc97 	bl	800d5a8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008c7a:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008c7c:	f004 fc02 	bl	800d484 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	0801977c 	.word	0x0801977c
 8008c88:	080197ea 	.word	0x080197ea
 8008c8c:	08017fc5 	.word	0x08017fc5

08008c90 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008c90:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c92:	078b      	lsls	r3, r1, #30
{
 8008c94:	4605      	mov	r5, r0
 8008c96:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c98:	d006      	beq.n	8008ca8 <do_memp_free_pool+0x18>
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <do_memp_free_pool+0x2c>)
 8008c9c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <do_memp_free_pool+0x30>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <do_memp_free_pool+0x34>)
 8008ca4:	f004 fc80 	bl	800d5a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8008ca8:	f004 fbe0 	bl	800d46c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008cac:	68ab      	ldr	r3, [r5, #8]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8008cb2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8008cb8:	f004 bbe4 	b.w	800d484 <sys_arch_unprotect>
 8008cbc:	0801977c 	.word	0x0801977c
 8008cc0:	0801980d 	.word	0x0801980d
 8008cc4:	08017fc5 	.word	0x08017fc5

08008cc8 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008cc8:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8008cca:	2200      	movs	r2, #0
 8008ccc:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008cce:	3303      	adds	r3, #3
{
 8008cd0:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008cd2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8008cd6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8008cd8:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8008cda:	4294      	cmp	r4, r2
 8008cdc:	dc00      	bgt.n	8008ce0 <memp_init_pool+0x18>
}
 8008cde:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8008ce0:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8008ce2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8008ce4:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008ce6:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8008ce8:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008cea:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8008cec:	e7f5      	b.n	8008cda <memp_init_pool+0x12>
	...

08008cf0 <memp_init>:
{
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d05      	ldr	r5, [pc, #20]	; (8008d08 <memp_init+0x18>)
 8008cf4:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008cf6:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 8008cf8:	f855 0b04 	ldr.w	r0, [r5], #4
 8008cfc:	f7ff ffe4 	bl	8008cc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008d00:	b2a4      	uxth	r4, r4
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d1f7      	bne.n	8008cf6 <memp_init+0x6>
}
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	0800f138 	.word	0x0800f138

08008d0c <memp_malloc_pool>:
{
 8008d0c:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d0e:	4604      	mov	r4, r0
 8008d10:	b118      	cbz	r0, 8008d1a <memp_malloc_pool+0xe>
}
 8008d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 8008d16:	f7ff bf9d 	b.w	8008c54 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d1a:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <memp_malloc_pool+0x20>)
 8008d1c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008d20:	4903      	ldr	r1, [pc, #12]	; (8008d30 <memp_malloc_pool+0x24>)
 8008d22:	4804      	ldr	r0, [pc, #16]	; (8008d34 <memp_malloc_pool+0x28>)
 8008d24:	f004 fc40 	bl	800d5a8 <iprintf>
}
 8008d28:	4620      	mov	r0, r4
 8008d2a:	bd10      	pop	{r4, pc}
 8008d2c:	0801977c 	.word	0x0801977c
 8008d30:	0801982d 	.word	0x0801982d
 8008d34:	08017fc5 	.word	0x08017fc5

08008d38 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008d38:	280c      	cmp	r0, #12
{
 8008d3a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008d3c:	d806      	bhi.n	8008d4c <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <memp_malloc+0x28>)
 8008d40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8008d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008d48:	f7ff bf84 	b.w	8008c54 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <memp_malloc+0x2c>)
 8008d4e:	f240 1257 	movw	r2, #343	; 0x157
 8008d52:	4905      	ldr	r1, [pc, #20]	; (8008d68 <memp_malloc+0x30>)
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <memp_malloc+0x34>)
 8008d56:	f004 fc27 	bl	800d5a8 <iprintf>
}
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	bd08      	pop	{r3, pc}
 8008d5e:	bf00      	nop
 8008d60:	0800f138 	.word	0x0800f138
 8008d64:	0801977c 	.word	0x0801977c
 8008d68:	0801983f 	.word	0x0801983f
 8008d6c:	08017fc5 	.word	0x08017fc5

08008d70 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d70:	b940      	cbnz	r0, 8008d84 <memp_free_pool+0x14>
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <memp_free_pool+0x1c>)
 8008d74:	f240 1295 	movw	r2, #405	; 0x195
 8008d78:	4905      	ldr	r1, [pc, #20]	; (8008d90 <memp_free_pool+0x20>)
 8008d7a:	4806      	ldr	r0, [pc, #24]	; (8008d94 <memp_free_pool+0x24>)
 8008d7c:	f004 bc14 	b.w	800d5a8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 8008d80:	f7ff bf86 	b.w	8008c90 <do_memp_free_pool>
  if ((desc == NULL) || (mem == NULL)) {
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d1fb      	bne.n	8008d80 <memp_free_pool+0x10>
}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	0801977c 	.word	0x0801977c
 8008d90:	0801982d 	.word	0x0801982d
 8008d94:	08017fc5 	.word	0x08017fc5

08008d98 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008d98:	280c      	cmp	r0, #12
 8008d9a:	d906      	bls.n	8008daa <memp_free+0x12>
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <memp_free+0x20>)
 8008d9e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008da2:	4906      	ldr	r1, [pc, #24]	; (8008dbc <memp_free+0x24>)
 8008da4:	4806      	ldr	r0, [pc, #24]	; (8008dc0 <memp_free+0x28>)
 8008da6:	f004 bbff 	b.w	800d5a8 <iprintf>

  if (mem == NULL) {
 8008daa:	b121      	cbz	r1, 8008db6 <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <memp_free+0x2c>)
 8008dae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008db2:	f7ff bf6d 	b.w	8008c90 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008db6:	4770      	bx	lr
 8008db8:	0801977c 	.word	0x0801977c
 8008dbc:	0801985c 	.word	0x0801985c
 8008dc0:	08017fc5 	.word	0x08017fc5
 8008dc4:	0800f138 	.word	0x0800f138

08008dc8 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008dc8:	f06f 000b 	mvn.w	r0, #11
 8008dcc:	4770      	bx	lr
	...

08008dd0 <netif_issue_reports>:
{
 8008dd0:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	b930      	cbnz	r0, 8008de4 <netif_issue_reports+0x14>
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <netif_issue_reports+0x38>)
 8008dd8:	f240 326d 	movw	r2, #877	; 0x36d
 8008ddc:	490b      	ldr	r1, [pc, #44]	; (8008e0c <netif_issue_reports+0x3c>)
 8008dde:	480c      	ldr	r0, [pc, #48]	; (8008e10 <netif_issue_reports+0x40>)
 8008de0:	f004 fbe2 	bl	800d5a8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008de4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008de8:	f003 0205 	and.w	r2, r3, #5
 8008dec:	2a05      	cmp	r2, #5
 8008dee:	d109      	bne.n	8008e04 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008df0:	6862      	ldr	r2, [r4, #4]
 8008df2:	b13a      	cbz	r2, 8008e04 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008df4:	071b      	lsls	r3, r3, #28
 8008df6:	d505      	bpl.n	8008e04 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 8008df8:	1d21      	adds	r1, r4, #4
 8008dfa:	4620      	mov	r0, r4
}
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8008e00:	f7fe bc26 	b.w	8007650 <etharp_request>
}
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	08019877 	.word	0x08019877
 8008e0c:	080198e6 	.word	0x080198e6
 8008e10:	08017fc5 	.word	0x08017fc5

08008e14 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8008e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e16:	4605      	mov	r5, r0
 8008e18:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	b931      	cbnz	r1, 8008e2c <netif_do_set_ipaddr.isra.0+0x18>
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <netif_do_set_ipaddr.isra.0+0x44>)
 8008e20:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008e24:	490d      	ldr	r1, [pc, #52]	; (8008e5c <netif_do_set_ipaddr.isra.0+0x48>)
 8008e26:	480e      	ldr	r0, [pc, #56]	; (8008e60 <netif_do_set_ipaddr.isra.0+0x4c>)
 8008e28:	f004 fbbe 	bl	800d5a8 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008e2c:	686b      	ldr	r3, [r5, #4]
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d00f      	beq.n	8008e54 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008e34:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008e36:	a901      	add	r1, sp, #4
 8008e38:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008e3a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008e3c:	f001 fc9a 	bl	800a774 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008e40:	a901      	add	r1, sp, #4
 8008e42:	4630      	mov	r0, r6
 8008e44:	f004 f9a2 	bl	800d18c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008e48:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008e4e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008e50:	f7ff ffbe 	bl	8008dd0 <netif_issue_reports>
}
 8008e54:	b002      	add	sp, #8
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	08019877 	.word	0x08019877
 8008e5c:	0801842f 	.word	0x0801842f
 8008e60:	08017fc5 	.word	0x08017fc5

08008e64 <netif_init>:
}
 8008e64:	4770      	bx	lr
	...

08008e68 <netif_set_addr>:
{
 8008e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8008e6a:	4d14      	ldr	r5, [pc, #80]	; (8008ebc <netif_set_addr+0x54>)
{
 8008e6c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	bf14      	ite	ne
 8008e72:	460e      	movne	r6, r1
 8008e74:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	bf14      	ite	ne
 8008e7a:	4617      	movne	r7, r2
 8008e7c:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf18      	it	ne
 8008e82:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	b9b3      	cbnz	r3, 8008eb6 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008e88:	aa01      	add	r2, sp, #4
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	f7ff ffc2 	bl	8008e14 <netif_do_set_ipaddr.isra.0>
 8008e90:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	68a1      	ldr	r1, [r4, #8]
 8008e96:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008e98:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008e9a:	bf18      	it	ne
 8008e9c:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008e9e:	682a      	ldr	r2, [r5, #0]
 8008ea0:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008ea2:	bf18      	it	ne
 8008ea4:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8008ea6:	b923      	cbnz	r3, 8008eb2 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008ea8:	aa01      	add	r2, sp, #4
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7ff ffb1 	bl	8008e14 <netif_do_set_ipaddr.isra.0>
}
 8008eb2:	b003      	add	sp, #12
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e7eb      	b.n	8008e92 <netif_set_addr+0x2a>
 8008eba:	bf00      	nop
 8008ebc:	0800f134 	.word	0x0800f134

08008ec0 <netif_add>:
{
 8008ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008ec8:	4604      	mov	r4, r0
 8008eca:	b948      	cbnz	r0, 8008ee0 <netif_add+0x20>
 8008ecc:	4b3b      	ldr	r3, [pc, #236]	; (8008fbc <netif_add+0xfc>)
 8008ece:	f240 1227 	movw	r2, #295	; 0x127
 8008ed2:	493b      	ldr	r1, [pc, #236]	; (8008fc0 <netif_add+0x100>)
 8008ed4:	483b      	ldr	r0, [pc, #236]	; (8008fc4 <netif_add+0x104>)
 8008ed6:	f004 fb67 	bl	800d5a8 <iprintf>
}
 8008eda:	4620      	mov	r0, r4
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008ee0:	f1b8 0f00 	cmp.w	r8, #0
 8008ee4:	d108      	bne.n	8008ef8 <netif_add+0x38>
 8008ee6:	4b35      	ldr	r3, [pc, #212]	; (8008fbc <netif_add+0xfc>)
 8008ee8:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008eec:	4936      	ldr	r1, [pc, #216]	; (8008fc8 <netif_add+0x108>)
 8008eee:	4644      	mov	r4, r8
 8008ef0:	4834      	ldr	r0, [pc, #208]	; (8008fc4 <netif_add+0x104>)
 8008ef2:	f004 fb59 	bl	800d5a8 <iprintf>
 8008ef6:	e7f0      	b.n	8008eda <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8008ef8:	4e34      	ldr	r6, [pc, #208]	; (8008fcc <netif_add+0x10c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008efa:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008efc:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008fd8 <netif_add+0x118>
  netif->output = netif_null_output_ip4;
 8008f00:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8008f02:	9e08      	ldr	r6, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008f04:	42ab      	cmp	r3, r5
 8008f06:	bf08      	it	eq
 8008f08:	4663      	moveq	r3, ip
  ip_addr_set_zero_ip4(&netif->gw);
 8008f0a:	60c5      	str	r5, [r0, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008f0c:	42aa      	cmp	r2, r5
 8008f0e:	bf08      	it	eq
 8008f10:	4662      	moveq	r2, ip
  netif->state = state;
 8008f12:	6206      	str	r6, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008f14:	42a9      	cmp	r1, r5
 8008f16:	bf08      	it	eq
 8008f18:	4661      	moveq	r1, ip
  netif->num = netif_num;
 8008f1a:	4e2d      	ldr	r6, [pc, #180]	; (8008fd0 <netif_add+0x110>)
  netif->mtu = 0;
 8008f1c:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->num = netif_num;
 8008f1e:	7837      	ldrb	r7, [r6, #0]
  netif->flags = 0;
 8008f20:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  netif->num = netif_num;
 8008f24:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
  netif->input = input;
 8008f28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008f2a:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 8008f2c:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 8008f2e:	6107      	str	r7, [r0, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008f30:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008f34:	f7ff ff98 	bl	8008e68 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8008f38:	4620      	mov	r0, r4
 8008f3a:	47c0      	blx	r8
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d13b      	bne.n	8008fb8 <netif_add+0xf8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008f40:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008fbc <netif_add+0xfc>
 8008f44:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8008fdc <netif_add+0x11c>
 8008f48:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008fc4 <netif_add+0x104>
      if (netif->num == 255) {
 8008f4c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 8008f50:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008f52:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 8008f54:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8008f56:	bf04      	itt	eq
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008f5e:	b92d      	cbnz	r5, 8008f6c <netif_add+0xac>
  if (netif->num == 254) {
 8008f60:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008f64:	2bfe      	cmp	r3, #254	; 0xfe
 8008f66:	d120      	bne.n	8008faa <netif_add+0xea>
    netif_num = 0;
 8008f68:	462b      	mov	r3, r5
 8008f6a:	e020      	b.n	8008fae <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008f6c:	42a5      	cmp	r5, r4
 8008f6e:	d106      	bne.n	8008f7e <netif_add+0xbe>
 8008f70:	4653      	mov	r3, sl
 8008f72:	f240 128b 	movw	r2, #395	; 0x18b
 8008f76:	4649      	mov	r1, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f004 fb15 	bl	800d5a8 <iprintf>
        num_netifs++;
 8008f7e:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008f80:	2fff      	cmp	r7, #255	; 0xff
 8008f82:	dd06      	ble.n	8008f92 <netif_add+0xd2>
 8008f84:	4653      	mov	r3, sl
 8008f86:	f240 128d 	movw	r2, #397	; 0x18d
 8008f8a:	4912      	ldr	r1, [pc, #72]	; (8008fd4 <netif_add+0x114>)
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	f004 fb0b 	bl	800d5a8 <iprintf>
        if (netif2->num == netif->num) {
 8008f92:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008f96:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d103      	bne.n	8008fa6 <netif_add+0xe6>
          netif->num++;
 8008f9e:	3201      	adds	r2, #1
 8008fa0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 8008fa4:	e7d2      	b.n	8008f4c <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008fa6:	682d      	ldr	r5, [r5, #0]
 8008fa8:	e7d9      	b.n	8008f5e <netif_add+0x9e>
    netif_num = (u8_t)(netif->num + 1);
 8008faa:	3301      	adds	r3, #1
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8008fb0:	6873      	ldr	r3, [r6, #4]
 8008fb2:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8008fb4:	6074      	str	r4, [r6, #4]
  return netif;
 8008fb6:	e790      	b.n	8008eda <netif_add+0x1a>
    return NULL;
 8008fb8:	462c      	mov	r4, r5
 8008fba:	e78e      	b.n	8008eda <netif_add+0x1a>
 8008fbc:	08019877 	.word	0x08019877
 8008fc0:	0801999b 	.word	0x0801999b
 8008fc4:	08017fc5 	.word	0x08017fc5
 8008fc8:	080199b4 	.word	0x080199b4
 8008fcc:	08008dc9 	.word	0x08008dc9
 8008fd0:	2000e3f8 	.word	0x2000e3f8
 8008fd4:	080199ea 	.word	0x080199ea
 8008fd8:	0800f134 	.word	0x0800f134
 8008fdc:	080199d6 	.word	0x080199d6

08008fe0 <netif_set_default>:
  netif_default = netif;
 8008fe0:	4b01      	ldr	r3, [pc, #4]	; (8008fe8 <netif_set_default+0x8>)
 8008fe2:	6098      	str	r0, [r3, #8]
}
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	2000e3f8 	.word	0x2000e3f8

08008fec <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008fec:	b930      	cbnz	r0, 8008ffc <netif_set_up+0x10>
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <netif_set_up+0x28>)
 8008ff0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008ff4:	4908      	ldr	r1, [pc, #32]	; (8009018 <netif_set_up+0x2c>)
 8008ff6:	4809      	ldr	r0, [pc, #36]	; (800901c <netif_set_up+0x30>)
 8008ff8:	f004 bad6 	b.w	800d5a8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008ffc:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009000:	07d1      	lsls	r1, r2, #31
 8009002:	d406      	bmi.n	8009012 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009004:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009008:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800900a:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800900e:	f7ff bedf 	b.w	8008dd0 <netif_issue_reports>
}
 8009012:	4770      	bx	lr
 8009014:	08019877 	.word	0x08019877
 8009018:	08019a18 	.word	0x08019a18
 800901c:	08017fc5 	.word	0x08017fc5

08009020 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009020:	b930      	cbnz	r0, 8009030 <netif_set_down+0x10>
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <netif_set_down+0x2c>)
 8009024:	f240 329b 	movw	r2, #923	; 0x39b
 8009028:	4909      	ldr	r1, [pc, #36]	; (8009050 <netif_set_down+0x30>)
 800902a:	480a      	ldr	r0, [pc, #40]	; (8009054 <netif_set_down+0x34>)
 800902c:	f004 babc 	b.w	800d5a8 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8009030:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009034:	07d1      	lsls	r1, r2, #31
 8009036:	d507      	bpl.n	8009048 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009038:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800903c:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800903e:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009042:	d501      	bpl.n	8009048 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8009044:	f7fe ba40 	b.w	80074c8 <etharp_cleanup_netif>
}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	08019877 	.word	0x08019877
 8009050:	08019a34 	.word	0x08019a34
 8009054:	08017fc5 	.word	0x08017fc5

08009058 <netif_set_link_up>:
{
 8009058:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800905a:	4604      	mov	r4, r0
 800905c:	b940      	cbnz	r0, 8009070 <netif_set_link_up+0x18>
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <netif_set_link_up+0x44>)
 8009060:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009064:	490e      	ldr	r1, [pc, #56]	; (80090a0 <netif_set_link_up+0x48>)
 8009066:	480f      	ldr	r0, [pc, #60]	; (80090a4 <netif_set_link_up+0x4c>)
}
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800906c:	f004 ba9c 	b.w	800d5a8 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009070:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8009074:	075a      	lsls	r2, r3, #29
 8009076:	d40f      	bmi.n	8009098 <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009078:	f043 0304 	orr.w	r3, r3, #4
 800907c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 8009080:	f7fd fe54 	bl	8006d2c <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009084:	2103      	movs	r1, #3
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff fea2 	bl	8008dd0 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800908c:	69e3      	ldr	r3, [r4, #28]
 800908e:	b11b      	cbz	r3, 8009098 <netif_set_link_up+0x40>
 8009090:	4620      	mov	r0, r4
}
 8009092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009096:	4718      	bx	r3
}
 8009098:	bd10      	pop	{r4, pc}
 800909a:	bf00      	nop
 800909c:	08019877 	.word	0x08019877
 80090a0:	08019a52 	.word	0x08019a52
 80090a4:	08017fc5 	.word	0x08017fc5

080090a8 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80090a8:	b930      	cbnz	r0, 80090b8 <netif_set_link_down+0x10>
 80090aa:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <netif_set_link_down+0x28>)
 80090ac:	f240 4206 	movw	r2, #1030	; 0x406
 80090b0:	4908      	ldr	r1, [pc, #32]	; (80090d4 <netif_set_link_down+0x2c>)
 80090b2:	4809      	ldr	r0, [pc, #36]	; (80090d8 <netif_set_link_down+0x30>)
 80090b4:	f004 ba78 	b.w	800d5a8 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80090b8:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 80090bc:	0751      	lsls	r1, r2, #29
 80090be:	d506      	bpl.n	80090ce <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80090c0:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 80090c4:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80090c6:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80090ca:	b103      	cbz	r3, 80090ce <netif_set_link_down+0x26>
 80090cc:	4718      	bx	r3
}
 80090ce:	4770      	bx	lr
 80090d0:	08019877 	.word	0x08019877
 80090d4:	08019a73 	.word	0x08019a73
 80090d8:	08017fc5 	.word	0x08017fc5

080090dc <netif_set_link_callback>:
  if (netif) {
 80090dc:	b100      	cbz	r0, 80090e0 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80090de:	61c1      	str	r1, [r0, #28]
}
 80090e0:	4770      	bx	lr
	...

080090e4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80090e4:	4603      	mov	r3, r0
 80090e6:	b158      	cbz	r0, 8009100 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80090e8:	4a06      	ldr	r2, [pc, #24]	; (8009104 <netif_get_by_index+0x20>)
 80090ea:	6850      	ldr	r0, [r2, #4]
 80090ec:	b900      	cbnz	r0, 80090f0 <netif_get_by_index+0xc>
 80090ee:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 80090f0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80090f4:	3201      	adds	r2, #1
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d001      	beq.n	8009100 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80090fc:	6800      	ldr	r0, [r0, #0]
 80090fe:	e7f5      	b.n	80090ec <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000e3f8 	.word	0x2000e3f8

08009108 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009108:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800910a:	b968      	cbnz	r0, 8009128 <pbuf_add_header_impl+0x20>
 800910c:	4b14      	ldr	r3, [pc, #80]	; (8009160 <pbuf_add_header_impl+0x58>)
 800910e:	f240 12df 	movw	r2, #479	; 0x1df
 8009112:	4914      	ldr	r1, [pc, #80]	; (8009164 <pbuf_add_header_impl+0x5c>)
 8009114:	4814      	ldr	r0, [pc, #80]	; (8009168 <pbuf_add_header_impl+0x60>)
 8009116:	f004 fa47 	bl	800d5a8 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800911a:	2001      	movs	r0, #1
 800911c:	e01f      	b.n	800915e <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800911e:	2a00      	cmp	r2, #0
 8009120:	d0fb      	beq.n	800911a <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8009122:	6842      	ldr	r2, [r0, #4]
 8009124:	1a51      	subs	r1, r2, r1
 8009126:	e014      	b.n	8009152 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009128:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800912c:	d2f5      	bcs.n	800911a <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800912e:	b1a9      	cbz	r1, 800915c <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009130:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 8009132:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009134:	fa13 f381 	uxtah	r3, r3, r1
 8009138:	b29b      	uxth	r3, r3
 800913a:	429c      	cmp	r4, r3
 800913c:	d8ed      	bhi.n	800911a <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800913e:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8009142:	2d00      	cmp	r5, #0
 8009144:	daeb      	bge.n	800911e <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8009146:	6842      	ldr	r2, [r0, #4]
 8009148:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800914a:	f100 0210 	add.w	r2, r0, #16
 800914e:	4291      	cmp	r1, r2
 8009150:	d3e3      	bcc.n	800911a <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8009152:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8009154:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009156:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009158:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800915a:	8144      	strh	r4, [r0, #10]


  return 0;
 800915c:	2000      	movs	r0, #0
}
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	08019a96 	.word	0x08019a96
 8009164:	08019ba6 	.word	0x08019ba6
 8009168:	08017fc5 	.word	0x08017fc5

0800916c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800916c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009170:	2b01      	cmp	r3, #1
{
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	4606      	mov	r6, r0
 8009176:	460d      	mov	r5, r1
 8009178:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800917a:	d006      	beq.n	800918a <pbuf_alloc_reference+0x1e>
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <pbuf_alloc_reference+0x3c>)
 800917e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009182:	490a      	ldr	r1, [pc, #40]	; (80091ac <pbuf_alloc_reference+0x40>)
 8009184:	480a      	ldr	r0, [pc, #40]	; (80091b0 <pbuf_alloc_reference+0x44>)
 8009186:	f004 fa0f 	bl	800d5a8 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800918a:	200b      	movs	r0, #11
 800918c:	f7ff fdd4 	bl	8008d38 <memp_malloc>
  if (p == NULL) {
 8009190:	b140      	cbz	r0, 80091a4 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 8009192:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8009194:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8009196:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 8009198:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800919a:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800919c:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	81c3      	strh	r3, [r0, #14]
}
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	bf00      	nop
 80091a8:	08019a96 	.word	0x08019a96
 80091ac:	08019b04 	.word	0x08019b04
 80091b0:	08017fc5 	.word	0x08017fc5

080091b4 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80091b4:	3003      	adds	r0, #3
 80091b6:	f020 0003 	bic.w	r0, r0, #3
{
 80091ba:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80091bc:	180e      	adds	r6, r1, r0
 80091be:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 80091c2:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80091c4:	42ae      	cmp	r6, r5
 80091c6:	d80d      	bhi.n	80091e4 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 80091c8:	b104      	cbz	r4, 80091cc <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80091ca:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80091cc:	4618      	mov	r0, r3
  p->next = NULL;
 80091ce:	2300      	movs	r3, #0
  p->payload = payload;
 80091d0:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 80091d4:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 80091d6:	8101      	strh	r1, [r0, #8]
  p->len = len;
 80091d8:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 80091da:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80091dc:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 80091de:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80091e0:	81c3      	strh	r3, [r0, #14]
}
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80091e4:	2000      	movs	r0, #0
 80091e6:	e7fc      	b.n	80091e2 <pbuf_alloced_custom+0x2e>

080091e8 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80091e8:	2200      	movs	r2, #0
 80091ea:	f7ff bf8d 	b.w	8009108 <pbuf_add_header_impl>
	...

080091f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80091f0:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80091f2:	b990      	cbnz	r0, 800921a <pbuf_remove_header+0x2a>
 80091f4:	4b10      	ldr	r3, [pc, #64]	; (8009238 <pbuf_remove_header+0x48>)
 80091f6:	f240 224b 	movw	r2, #587	; 0x24b
 80091fa:	4910      	ldr	r1, [pc, #64]	; (800923c <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80091fc:	4810      	ldr	r0, [pc, #64]	; (8009240 <pbuf_remove_header+0x50>)
 80091fe:	f004 f9d3 	bl	800d5a8 <iprintf>
    return 1;
 8009202:	2001      	movs	r0, #1
 8009204:	e008      	b.n	8009218 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009206:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009208:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800920a:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800920c:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800920e:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009210:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009216:	2000      	movs	r0, #0
}
 8009218:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800921a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800921e:	d2f0      	bcs.n	8009202 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8009220:	2900      	cmp	r1, #0
 8009222:	d0f8      	beq.n	8009216 <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8009224:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009226:	8943      	ldrh	r3, [r0, #10]
 8009228:	429a      	cmp	r2, r3
 800922a:	d9ec      	bls.n	8009206 <pbuf_remove_header+0x16>
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <pbuf_remove_header+0x48>)
 800922e:	f240 2255 	movw	r2, #597	; 0x255
 8009232:	4904      	ldr	r1, [pc, #16]	; (8009244 <pbuf_remove_header+0x54>)
 8009234:	e7e2      	b.n	80091fc <pbuf_remove_header+0xc>
 8009236:	bf00      	nop
 8009238:	08019a96 	.word	0x08019a96
 800923c:	08019ba6 	.word	0x08019ba6
 8009240:	08017fc5 	.word	0x08017fc5
 8009244:	08019b16 	.word	0x08019b16

08009248 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8009248:	1e0b      	subs	r3, r1, #0
 800924a:	da02      	bge.n	8009252 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800924c:	4259      	negs	r1, r3
 800924e:	f7ff bfcf 	b.w	80091f0 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009252:	2201      	movs	r2, #1
 8009254:	f7ff bf58 	b.w	8009108 <pbuf_add_header_impl>

08009258 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800925c:	4604      	mov	r4, r0
 800925e:	b950      	cbnz	r0, 8009276 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009260:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8009262:	4b2b      	ldr	r3, [pc, #172]	; (8009310 <pbuf_free+0xb8>)
 8009264:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009268:	492a      	ldr	r1, [pc, #168]	; (8009314 <pbuf_free+0xbc>)
 800926a:	482b      	ldr	r0, [pc, #172]	; (8009318 <pbuf_free+0xc0>)
 800926c:	f004 f99c 	bl	800d5a8 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8009270:	4628      	mov	r0, r5
 8009272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 8009276:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009278:	4f25      	ldr	r7, [pc, #148]	; (8009310 <pbuf_free+0xb8>)
 800927a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009324 <pbuf_free+0xcc>
 800927e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009318 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 8009282:	f004 f8f3 	bl	800d46c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009286:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8009288:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800928a:	b933      	cbnz	r3, 800929a <pbuf_free+0x42>
 800928c:	463b      	mov	r3, r7
 800928e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009292:	4651      	mov	r1, sl
 8009294:	4640      	mov	r0, r8
 8009296:	f004 f987 	bl	800d5a8 <iprintf>
    ref = --(p->ref);
 800929a:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800929c:	4648      	mov	r0, r9
    ref = --(p->ref);
 800929e:	3e01      	subs	r6, #1
 80092a0:	b2f6      	uxtb	r6, r6
 80092a2:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80092a4:	f004 f8ee 	bl	800d484 <sys_arch_unprotect>
    if (ref == 0) {
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d1e1      	bne.n	8009270 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80092ac:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80092ae:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80092b0:	079b      	lsls	r3, r3, #30
 80092b2:	d511      	bpl.n	80092d8 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b933      	cbnz	r3, 80092c6 <pbuf_free+0x6e>
 80092b8:	463b      	mov	r3, r7
 80092ba:	f240 22ff 	movw	r2, #767	; 0x2ff
 80092be:	4917      	ldr	r1, [pc, #92]	; (800931c <pbuf_free+0xc4>)
 80092c0:	4640      	mov	r0, r8
 80092c2:	f004 f971 	bl	800d5a8 <iprintf>
        pc->custom_free_function(p);
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	4620      	mov	r0, r4
 80092ca:	4798      	blx	r3
      count++;
 80092cc:	3501      	adds	r5, #1
 80092ce:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	d0cd      	beq.n	8009270 <pbuf_free+0x18>
 80092d4:	4634      	mov	r4, r6
 80092d6:	e7d4      	b.n	8009282 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 80092d8:	7b23      	ldrb	r3, [r4, #12]
 80092da:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d104      	bne.n	80092ec <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 80092e2:	4621      	mov	r1, r4
 80092e4:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 80092e6:	f7ff fd57 	bl	8008d98 <memp_free>
 80092ea:	e7ef      	b.n	80092cc <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d102      	bne.n	80092f6 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 80092f0:	4621      	mov	r1, r4
 80092f2:	200b      	movs	r0, #11
 80092f4:	e7f7      	b.n	80092e6 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80092f6:	b91b      	cbnz	r3, 8009300 <pbuf_free+0xa8>
          mem_free(p);
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7ff fa81 	bl	8008800 <mem_free>
 80092fe:	e7e5      	b.n	80092cc <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8009300:	463b      	mov	r3, r7
 8009302:	f240 320f 	movw	r2, #783	; 0x30f
 8009306:	4906      	ldr	r1, [pc, #24]	; (8009320 <pbuf_free+0xc8>)
 8009308:	4640      	mov	r0, r8
 800930a:	f004 f94d 	bl	800d5a8 <iprintf>
 800930e:	e7dd      	b.n	80092cc <pbuf_free+0x74>
 8009310:	08019a96 	.word	0x08019a96
 8009314:	08019ba6 	.word	0x08019ba6
 8009318:	08017fc5 	.word	0x08017fc5
 800931c:	08019b4a 	.word	0x08019b4a
 8009320:	08019b6b 	.word	0x08019b6b
 8009324:	08019b34 	.word	0x08019b34

08009328 <pbuf_alloc>:
  switch (type) {
 8009328:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	4606      	mov	r6, r0
 8009332:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8009334:	b284      	uxth	r4, r0
  switch (type) {
 8009336:	d014      	beq.n	8009362 <pbuf_alloc+0x3a>
 8009338:	d808      	bhi.n	800934c <pbuf_alloc+0x24>
 800933a:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800933e:	2b01      	cmp	r3, #1
 8009340:	d107      	bne.n	8009352 <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 8009342:	2000      	movs	r0, #0
}
 8009344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8009348:	f7ff bf10 	b.w	800916c <pbuf_alloc_reference>
  switch (type) {
 800934c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8009350:	d03b      	beq.n	80093ca <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009352:	4b2e      	ldr	r3, [pc, #184]	; (800940c <pbuf_alloc+0xe4>)
 8009354:	f240 1227 	movw	r2, #295	; 0x127
 8009358:	492d      	ldr	r1, [pc, #180]	; (8009410 <pbuf_alloc+0xe8>)
 800935a:	482e      	ldr	r0, [pc, #184]	; (8009414 <pbuf_alloc+0xec>)
 800935c:	f004 f924 	bl	800d5a8 <iprintf>
 8009360:	e00c      	b.n	800937c <pbuf_alloc+0x54>
  switch (type) {
 8009362:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009364:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 8009368:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800941c <pbuf_alloc+0xf4>
  switch (type) {
 800936c:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800936e:	200c      	movs	r0, #12
 8009370:	46b2      	mov	sl, r6
 8009372:	f7ff fce1 	bl	8008d38 <memp_malloc>
        if (q == NULL) {
 8009376:	4606      	mov	r6, r0
 8009378:	b930      	cbnz	r0, 8009388 <pbuf_alloc+0x60>
          if (p) {
 800937a:	b90d      	cbnz	r5, 8009380 <pbuf_alloc+0x58>
      return NULL;
 800937c:	2500      	movs	r5, #0
 800937e:	e01f      	b.n	80093c0 <pbuf_alloc+0x98>
            pbuf_free(p);
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff ff69 	bl	8009258 <pbuf_free>
 8009386:	e7f9      	b.n	800937c <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009388:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800938a:	4404      	add	r4, r0
  p->next = NULL;
 800938c:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800938e:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009390:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009394:	3413      	adds	r4, #19
  p->next = NULL;
 8009396:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009398:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800939c:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 80093a0:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093a4:	b29b      	uxth	r3, r3
  p->payload = payload;
 80093a6:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093a8:	42bb      	cmp	r3, r7
 80093aa:	bf28      	it	cs
 80093ac:	463b      	movcs	r3, r7
  p->len = len;
 80093ae:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 80093b0:	b14d      	cbz	r5, 80093c6 <pbuf_alloc+0x9e>
          last->next = q;
 80093b2:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80093b6:	1afb      	subs	r3, r7, r3
        offset = 0;
 80093b8:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 80093ba:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 80093bc:	2f00      	cmp	r7, #0
 80093be:	d1d6      	bne.n	800936e <pbuf_alloc+0x46>
}
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c6:	4605      	mov	r5, r0
 80093c8:	e7f5      	b.n	80093b6 <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80093ca:	3403      	adds	r4, #3
 80093cc:	1ccb      	adds	r3, r1, #3
 80093ce:	f024 0403 	bic.w	r4, r4, #3
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	441c      	add	r4, r3
 80093d8:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80093da:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80093de:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80093e0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80093e2:	d3cb      	bcc.n	800937c <pbuf_alloc+0x54>
 80093e4:	4283      	cmp	r3, r0
 80093e6:	d8c9      	bhi.n	800937c <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80093e8:	f7ff fb8e 	bl	8008b08 <mem_malloc>
      if (p == NULL) {
 80093ec:	4605      	mov	r5, r0
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d0e6      	beq.n	80093c0 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80093f2:	4406      	add	r6, r0
  p->next = NULL;
 80093f4:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80093f6:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80093f8:	3613      	adds	r6, #19
  p->next = NULL;
 80093fa:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 80093fc:	4b06      	ldr	r3, [pc, #24]	; (8009418 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80093fe:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 8009402:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8009404:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8009406:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009408:	e7da      	b.n	80093c0 <pbuf_alloc+0x98>
 800940a:	bf00      	nop
 800940c:	08019a96 	.word	0x08019a96
 8009410:	08019b7d 	.word	0x08019b7d
 8009414:	08017fc5 	.word	0x08017fc5
 8009418:	00010080 	.word	0x00010080
 800941c:	00010082 	.word	0x00010082

08009420 <pbuf_realloc>:
{
 8009420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009426:	4604      	mov	r4, r0
 8009428:	b930      	cbnz	r0, 8009438 <pbuf_realloc+0x18>
 800942a:	4b24      	ldr	r3, [pc, #144]	; (80094bc <pbuf_realloc+0x9c>)
 800942c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009430:	4923      	ldr	r1, [pc, #140]	; (80094c0 <pbuf_realloc+0xa0>)
 8009432:	4824      	ldr	r0, [pc, #144]	; (80094c4 <pbuf_realloc+0xa4>)
 8009434:	f004 f8b8 	bl	800d5a8 <iprintf>
  if (new_len >= p->tot_len) {
 8009438:	8927      	ldrh	r7, [r4, #8]
 800943a:	42b7      	cmp	r7, r6
 800943c:	d93c      	bls.n	80094b8 <pbuf_realloc+0x98>
 800943e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009440:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80094bc <pbuf_realloc+0x9c>
 8009444:	f8df a084 	ldr.w	sl, [pc, #132]	; 80094cc <pbuf_realloc+0xac>
 8009448:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80094c4 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800944c:	8962      	ldrh	r2, [r4, #10]
 800944e:	42aa      	cmp	r2, r5
 8009450:	d319      	bcc.n	8009486 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009452:	7b23      	ldrb	r3, [r4, #12]
 8009454:	0719      	lsls	r1, r3, #28
 8009456:	d127      	bne.n	80094a8 <pbuf_realloc+0x88>
 8009458:	42aa      	cmp	r2, r5
 800945a:	d025      	beq.n	80094a8 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800945c:	7b63      	ldrb	r3, [r4, #13]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	d422      	bmi.n	80094a8 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009462:	6861      	ldr	r1, [r4, #4]
 8009464:	4620      	mov	r0, r4
 8009466:	1b09      	subs	r1, r1, r4
 8009468:	4429      	add	r1, r5
 800946a:	b289      	uxth	r1, r1
 800946c:	f7ff fa9e 	bl	80089ac <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009470:	4604      	mov	r4, r0
 8009472:	b9c8      	cbnz	r0, 80094a8 <pbuf_realloc+0x88>
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <pbuf_realloc+0x9c>)
 8009476:	f240 12bd 	movw	r2, #445	; 0x1bd
 800947a:	4913      	ldr	r1, [pc, #76]	; (80094c8 <pbuf_realloc+0xa8>)
 800947c:	4811      	ldr	r0, [pc, #68]	; (80094c4 <pbuf_realloc+0xa4>)
 800947e:	f004 f893 	bl	800d5a8 <iprintf>
  q->len = rem_len;
 8009482:	8164      	strh	r4, [r4, #10]
 8009484:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8009486:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009488:	1bf3      	subs	r3, r6, r7
 800948a:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800948c:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800948e:	4413      	add	r3, r2
 8009490:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8009492:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009494:	2c00      	cmp	r4, #0
 8009496:	d1d9      	bne.n	800944c <pbuf_realloc+0x2c>
 8009498:	4643      	mov	r3, r8
 800949a:	f240 12af 	movw	r2, #431	; 0x1af
 800949e:	4651      	mov	r1, sl
 80094a0:	4648      	mov	r0, r9
 80094a2:	f004 f881 	bl	800d5a8 <iprintf>
 80094a6:	e7d1      	b.n	800944c <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 80094a8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80094aa:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80094ac:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80094ae:	b108      	cbz	r0, 80094b4 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 80094b0:	f7ff fed2 	bl	8009258 <pbuf_free>
  q->next = NULL;
 80094b4:	2300      	movs	r3, #0
 80094b6:	6023      	str	r3, [r4, #0]
}
 80094b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094bc:	08019a96 	.word	0x08019a96
 80094c0:	08019b98 	.word	0x08019b98
 80094c4:	08017fc5 	.word	0x08017fc5
 80094c8:	08019bc8 	.word	0x08019bc8
 80094cc:	08019bb0 	.word	0x08019bb0

080094d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80094d0:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80094d2:	2200      	movs	r2, #0
 80094d4:	b290      	uxth	r0, r2
 80094d6:	3201      	adds	r2, #1
 80094d8:	b903      	cbnz	r3, 80094dc <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80094da:	4770      	bx	lr
    p = p->next;
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	e7f9      	b.n	80094d4 <pbuf_clen+0x4>

080094e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80094e0:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 80094e2:	4604      	mov	r4, r0
 80094e4:	b188      	cbz	r0, 800950a <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80094e6:	f003 ffc1 	bl	800d46c <sys_arch_protect>
 80094ea:	7ba3      	ldrb	r3, [r4, #14]
 80094ec:	3301      	adds	r3, #1
 80094ee:	73a3      	strb	r3, [r4, #14]
 80094f0:	f003 ffc8 	bl	800d484 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80094f4:	7ba3      	ldrb	r3, [r4, #14]
 80094f6:	b943      	cbnz	r3, 800950a <pbuf_ref+0x2a>
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <pbuf_ref+0x2c>)
 80094fa:	f240 3242 	movw	r2, #834	; 0x342
 80094fe:	4904      	ldr	r1, [pc, #16]	; (8009510 <pbuf_ref+0x30>)
 8009500:	4804      	ldr	r0, [pc, #16]	; (8009514 <pbuf_ref+0x34>)
  }
}
 8009502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009506:	f004 b84f 	b.w	800d5a8 <iprintf>
}
 800950a:	bd10      	pop	{r4, pc}
 800950c:	08019a96 	.word	0x08019a96
 8009510:	08019be4 	.word	0x08019be4
 8009514:	08017fc5 	.word	0x08017fc5

08009518 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800951c:	4604      	mov	r4, r0
 800951e:	b100      	cbz	r0, 8009522 <pbuf_cat+0xa>
 8009520:	b961      	cbnz	r1, 800953c <pbuf_cat+0x24>
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <pbuf_cat+0x60>)
 8009524:	f240 3259 	movw	r2, #857	; 0x359
 8009528:	4914      	ldr	r1, [pc, #80]	; (800957c <pbuf_cat+0x64>)
 800952a:	4815      	ldr	r0, [pc, #84]	; (8009580 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800952c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009530:	f004 b83a 	b.w	800d5a8 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009534:	8929      	ldrh	r1, [r5, #8]
 8009536:	440b      	add	r3, r1
 8009538:	8123      	strh	r3, [r4, #8]
 800953a:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800953c:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800953e:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009540:	2a00      	cmp	r2, #0
 8009542:	d1f7      	bne.n	8009534 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009544:	8962      	ldrh	r2, [r4, #10]
 8009546:	429a      	cmp	r2, r3
 8009548:	d00f      	beq.n	800956a <pbuf_cat+0x52>
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <pbuf_cat+0x60>)
 800954c:	f240 3262 	movw	r2, #866	; 0x362
 8009550:	490c      	ldr	r1, [pc, #48]	; (8009584 <pbuf_cat+0x6c>)
 8009552:	480b      	ldr	r0, [pc, #44]	; (8009580 <pbuf_cat+0x68>)
 8009554:	f004 f828 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	b133      	cbz	r3, 800956a <pbuf_cat+0x52>
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <pbuf_cat+0x60>)
 800955e:	f240 3263 	movw	r2, #867	; 0x363
 8009562:	4909      	ldr	r1, [pc, #36]	; (8009588 <pbuf_cat+0x70>)
 8009564:	4806      	ldr	r0, [pc, #24]	; (8009580 <pbuf_cat+0x68>)
 8009566:	f004 f81f 	bl	800d5a8 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800956a:	892a      	ldrh	r2, [r5, #8]
 800956c:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800956e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009570:	4413      	add	r3, r2
 8009572:	8123      	strh	r3, [r4, #8]
}
 8009574:	bd70      	pop	{r4, r5, r6, pc}
 8009576:	bf00      	nop
 8009578:	08019a96 	.word	0x08019a96
 800957c:	08019bf6 	.word	0x08019bf6
 8009580:	08017fc5 	.word	0x08017fc5
 8009584:	08019c2b 	.word	0x08019c2b
 8009588:	08019c58 	.word	0x08019c58

0800958c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800958c:	b510      	push	{r4, lr}
 800958e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8009590:	f7ff ffc2 	bl	8009518 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009594:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800959a:	f7ff bfa1 	b.w	80094e0 <pbuf_ref>
	...

080095a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80095a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80095a6:	4605      	mov	r5, r0
 80095a8:	b120      	cbz	r0, 80095b4 <pbuf_copy+0x14>
 80095aa:	b119      	cbz	r1, 80095b4 <pbuf_copy+0x14>
 80095ac:	8902      	ldrh	r2, [r0, #8]
 80095ae:	890b      	ldrh	r3, [r1, #8]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d20a      	bcs.n	80095ca <pbuf_copy+0x2a>
 80095b4:	4b34      	ldr	r3, [pc, #208]	; (8009688 <pbuf_copy+0xe8>)
 80095b6:	f240 32c9 	movw	r2, #969	; 0x3c9
 80095ba:	4934      	ldr	r1, [pc, #208]	; (800968c <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80095bc:	4834      	ldr	r0, [pc, #208]	; (8009690 <pbuf_copy+0xf0>)
 80095be:	f003 fff3 	bl	800d5a8 <iprintf>
 80095c2:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80095c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 80095ca:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095cc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009688 <pbuf_copy+0xe8>
 80095d0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80096a0 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 80095d4:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095d6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009690 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095da:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 80095de:	8962      	ldrh	r2, [r4, #10]
 80095e0:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095e4:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095e6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	4438      	add	r0, r7
 80095ec:	4590      	cmp	r8, r2
 80095ee:	4431      	add	r1, r6
 80095f0:	bf28      	it	cs
 80095f2:	4690      	movcs	r8, r2
 80095f4:	4642      	mov	r2, r8
    offset_to += len;
 80095f6:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095f8:	f003 ffa6 	bl	800d548 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095fc:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80095fe:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009600:	429f      	cmp	r7, r3
 8009602:	d906      	bls.n	8009612 <pbuf_copy+0x72>
 8009604:	465b      	mov	r3, fp
 8009606:	f240 32d9 	movw	r2, #985	; 0x3d9
 800960a:	4651      	mov	r1, sl
 800960c:	4648      	mov	r0, r9
 800960e:	f003 ffcb 	bl	800d5a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009612:	8963      	ldrh	r3, [r4, #10]
 8009614:	429e      	cmp	r6, r3
 8009616:	d906      	bls.n	8009626 <pbuf_copy+0x86>
 8009618:	465b      	mov	r3, fp
 800961a:	f240 32da 	movw	r2, #986	; 0x3da
 800961e:	491d      	ldr	r1, [pc, #116]	; (8009694 <pbuf_copy+0xf4>)
 8009620:	4648      	mov	r0, r9
 8009622:	f003 ffc1 	bl	800d5a8 <iprintf>
    if (offset_from >= p_from->len) {
 8009626:	8963      	ldrh	r3, [r4, #10]
 8009628:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800962a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800962c:	bf24      	itt	cs
 800962e:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8009630:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8009632:	429f      	cmp	r7, r3
 8009634:	d108      	bne.n	8009648 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8009636:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009638:	b92d      	cbnz	r5, 8009646 <pbuf_copy+0xa6>
 800963a:	b314      	cbz	r4, 8009682 <pbuf_copy+0xe2>
 800963c:	4b12      	ldr	r3, [pc, #72]	; (8009688 <pbuf_copy+0xe8>)
 800963e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009642:	4915      	ldr	r1, [pc, #84]	; (8009698 <pbuf_copy+0xf8>)
 8009644:	e7ba      	b.n	80095bc <pbuf_copy+0x1c>
      offset_to = 0;
 8009646:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009648:	b17c      	cbz	r4, 800966a <pbuf_copy+0xca>
 800964a:	8962      	ldrh	r2, [r4, #10]
 800964c:	8923      	ldrh	r3, [r4, #8]
 800964e:	429a      	cmp	r2, r3
 8009650:	d10b      	bne.n	800966a <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	b14b      	cbz	r3, 800966a <pbuf_copy+0xca>
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <pbuf_copy+0xe8>)
 8009658:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800965c:	490f      	ldr	r1, [pc, #60]	; (800969c <pbuf_copy+0xfc>)
 800965e:	480c      	ldr	r0, [pc, #48]	; (8009690 <pbuf_copy+0xf0>)
 8009660:	f003 ffa2 	bl	800d5a8 <iprintf>
 8009664:	f06f 0005 	mvn.w	r0, #5
 8009668:	e7ad      	b.n	80095c6 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800966a:	896a      	ldrh	r2, [r5, #10]
 800966c:	892b      	ldrh	r3, [r5, #8]
 800966e:	429a      	cmp	r2, r3
 8009670:	d105      	bne.n	800967e <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	b11b      	cbz	r3, 800967e <pbuf_copy+0xde>
 8009676:	4b04      	ldr	r3, [pc, #16]	; (8009688 <pbuf_copy+0xe8>)
 8009678:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800967c:	e7ee      	b.n	800965c <pbuf_copy+0xbc>
  } while (p_from);
 800967e:	2c00      	cmp	r4, #0
 8009680:	d1ab      	bne.n	80095da <pbuf_copy+0x3a>
  return ERR_OK;
 8009682:	4620      	mov	r0, r4
 8009684:	e79f      	b.n	80095c6 <pbuf_copy+0x26>
 8009686:	bf00      	nop
 8009688:	08019a96 	.word	0x08019a96
 800968c:	08019c9f 	.word	0x08019c9f
 8009690:	08017fc5 	.word	0x08017fc5
 8009694:	08019ce6 	.word	0x08019ce6
 8009698:	08019d01 	.word	0x08019d01
 800969c:	08019d0e 	.word	0x08019d0e
 80096a0:	08019ccf 	.word	0x08019ccf

080096a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	460f      	mov	r7, r1
 80096aa:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80096ac:	4605      	mov	r5, r0
 80096ae:	b950      	cbnz	r0, 80096c6 <pbuf_copy_partial+0x22>
 80096b0:	462e      	mov	r6, r5
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <pbuf_copy_partial+0x7c>)
 80096b4:	f240 420a 	movw	r2, #1034	; 0x40a
 80096b8:	491a      	ldr	r1, [pc, #104]	; (8009724 <pbuf_copy_partial+0x80>)
 80096ba:	481b      	ldr	r0, [pc, #108]	; (8009728 <pbuf_copy_partial+0x84>)
 80096bc:	f003 ff74 	bl	800d5a8 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 80096c0:	4630      	mov	r0, r6
 80096c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096c6:	bb41      	cbnz	r1, 800971a <pbuf_copy_partial+0x76>
 80096c8:	4b15      	ldr	r3, [pc, #84]	; (8009720 <pbuf_copy_partial+0x7c>)
 80096ca:	f240 420b 	movw	r2, #1035	; 0x40b
 80096ce:	4917      	ldr	r1, [pc, #92]	; (800972c <pbuf_copy_partial+0x88>)
 80096d0:	463e      	mov	r6, r7
 80096d2:	4815      	ldr	r0, [pc, #84]	; (8009728 <pbuf_copy_partial+0x84>)
 80096d4:	f003 ff68 	bl	800d5a8 <iprintf>
 80096d8:	e7f2      	b.n	80096c0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80096da:	896c      	ldrh	r4, [r5, #10]
 80096dc:	b153      	cbz	r3, 80096f4 <pbuf_copy_partial+0x50>
 80096de:	42a3      	cmp	r3, r4
 80096e0:	d308      	bcc.n	80096f4 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 80096e2:	1b1b      	subs	r3, r3, r4
 80096e4:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80096e6:	682d      	ldr	r5, [r5, #0]
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	d0e8      	beq.n	80096c0 <pbuf_copy_partial+0x1c>
 80096ee:	2d00      	cmp	r5, #0
 80096f0:	d1f3      	bne.n	80096da <pbuf_copy_partial+0x36>
 80096f2:	e7e5      	b.n	80096c0 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 80096f4:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80096f6:	6869      	ldr	r1, [r5, #4]
 80096f8:	19b8      	adds	r0, r7, r6
      buf_copy_len = (u16_t)(p->len - offset);
 80096fa:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80096fc:	4419      	add	r1, r3
 80096fe:	4544      	cmp	r4, r8
 8009700:	bf28      	it	cs
 8009702:	4644      	movcs	r4, r8
 8009704:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009706:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 8009708:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800970c:	f003 ff1c 	bl	800d548 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009710:	b2b6      	uxth	r6, r6
      offset = 0;
 8009712:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8009714:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8009718:	e7e5      	b.n	80096e6 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800971a:	2600      	movs	r6, #0
 800971c:	e7e4      	b.n	80096e8 <pbuf_copy_partial+0x44>
 800971e:	bf00      	nop
 8009720:	08019a96 	.word	0x08019a96
 8009724:	08019d38 	.word	0x08019d38
 8009728:	08017fc5 	.word	0x08017fc5
 800972c:	08019d57 	.word	0x08019d57

08009730 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009734:	460a      	mov	r2, r1
 8009736:	8929      	ldrh	r1, [r5, #8]
 8009738:	f7ff fdf6 	bl	8009328 <pbuf_alloc>
  if (q == NULL) {
 800973c:	4604      	mov	r4, r0
 800973e:	b150      	cbz	r0, 8009756 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8009740:	4629      	mov	r1, r5
 8009742:	f7ff ff2d 	bl	80095a0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009746:	b130      	cbz	r0, 8009756 <pbuf_clone+0x26>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <pbuf_clone+0x2c>)
 800974a:	f240 5224 	movw	r2, #1316	; 0x524
 800974e:	4904      	ldr	r1, [pc, #16]	; (8009760 <pbuf_clone+0x30>)
 8009750:	4804      	ldr	r0, [pc, #16]	; (8009764 <pbuf_clone+0x34>)
 8009752:	f003 ff29 	bl	800d5a8 <iprintf>
  return q;
}
 8009756:	4620      	mov	r0, r4
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	08019a96 	.word	0x08019a96
 8009760:	08019e57 	.word	0x08019e57
 8009764:	08017fc5 	.word	0x08017fc5

08009768 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976a:	4c12      	ldr	r4, [pc, #72]	; (80097b4 <tcp_new_port+0x4c>)
 800976c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009770:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8009774:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 8009776:	3301      	adds	r3, #1
 8009778:	4d0f      	ldr	r5, [pc, #60]	; (80097b8 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800977a:	2204      	movs	r2, #4
  tcp_port++;
 800977c:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800977e:	42b3      	cmp	r3, r6
 8009780:	bf08      	it	eq
 8009782:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009786:	f855 1b04 	ldr.w	r1, [r5], #4
 800978a:	6809      	ldr	r1, [r1, #0]
 800978c:	b931      	cbnz	r1, 800979c <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800978e:	3a01      	subs	r2, #1
 8009790:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009794:	d1f7      	bne.n	8009786 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009796:	4618      	mov	r0, r3
 8009798:	8023      	strh	r3, [r4, #0]
 800979a:	e007      	b.n	80097ac <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800979c:	8acf      	ldrh	r7, [r1, #22]
 800979e:	429f      	cmp	r7, r3
 80097a0:	d105      	bne.n	80097ae <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80097a2:	3801      	subs	r0, #1
 80097a4:	b280      	uxth	r0, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d1e5      	bne.n	8009776 <tcp_new_port+0xe>
 80097aa:	8023      	strh	r3, [r4, #0]
}
 80097ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80097ae:	68c9      	ldr	r1, [r1, #12]
 80097b0:	e7ec      	b.n	800978c <tcp_new_port+0x24>
 80097b2:	bf00      	nop
 80097b4:	20000034 	.word	0x20000034
 80097b8:	0800f208 	.word	0x0800f208

080097bc <tcp_close_shutdown_fin>:
{
 80097bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80097be:	4604      	mov	r4, r0
 80097c0:	b930      	cbnz	r0, 80097d0 <tcp_close_shutdown_fin+0x14>
 80097c2:	4b13      	ldr	r3, [pc, #76]	; (8009810 <tcp_close_shutdown_fin+0x54>)
 80097c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80097c8:	4912      	ldr	r1, [pc, #72]	; (8009814 <tcp_close_shutdown_fin+0x58>)
 80097ca:	4813      	ldr	r0, [pc, #76]	; (8009818 <tcp_close_shutdown_fin+0x5c>)
 80097cc:	f003 feec 	bl	800d5a8 <iprintf>
  switch (pcb->state) {
 80097d0:	7d23      	ldrb	r3, [r4, #20]
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d003      	beq.n	80097de <tcp_close_shutdown_fin+0x22>
 80097d6:	2b07      	cmp	r3, #7
 80097d8:	d00c      	beq.n	80097f4 <tcp_close_shutdown_fin+0x38>
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d108      	bne.n	80097f0 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80097de:	4620      	mov	r0, r4
 80097e0:	f002 fd82 	bl	800c2e8 <tcp_send_fin>
      if (err == ERR_OK) {
 80097e4:	b960      	cbnz	r0, 8009800 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 80097e6:	2305      	movs	r3, #5
    tcp_output(pcb);
 80097e8:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 80097ea:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80097ec:	f002 fedc 	bl	800c5a8 <tcp_output>
  switch (pcb->state) {
 80097f0:	2000      	movs	r0, #0
}
 80097f2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80097f4:	4620      	mov	r0, r4
 80097f6:	f002 fd77 	bl	800c2e8 <tcp_send_fin>
      if (err == ERR_OK) {
 80097fa:	b908      	cbnz	r0, 8009800 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 80097fc:	2309      	movs	r3, #9
 80097fe:	e7f3      	b.n	80097e8 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d1f6      	bne.n	80097f2 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009804:	8b63      	ldrh	r3, [r4, #26]
 8009806:	f043 0308 	orr.w	r3, r3, #8
 800980a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800980c:	e7f0      	b.n	80097f0 <tcp_close_shutdown_fin+0x34>
 800980e:	bf00      	nop
 8009810:	08019e68 	.word	0x08019e68
 8009814:	08019ed5 	.word	0x08019ed5
 8009818:	08017fc5 	.word	0x08017fc5

0800981c <tcp_init>:
{
 800981c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800981e:	f003 fedb 	bl	800d5d8 <rand>
 8009822:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8009826:	4b02      	ldr	r3, [pc, #8]	; (8009830 <tcp_init+0x14>)
 8009828:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800982c:	8018      	strh	r0, [r3, #0]
}
 800982e:	bd08      	pop	{r3, pc}
 8009830:	20000034 	.word	0x20000034

08009834 <tcp_free>:
{
 8009834:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009836:	7d03      	ldrb	r3, [r0, #20]
{
 8009838:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800983a:	2b01      	cmp	r3, #1
 800983c:	d105      	bne.n	800984a <tcp_free+0x16>
 800983e:	4b06      	ldr	r3, [pc, #24]	; (8009858 <tcp_free+0x24>)
 8009840:	22d4      	movs	r2, #212	; 0xd4
 8009842:	4906      	ldr	r1, [pc, #24]	; (800985c <tcp_free+0x28>)
 8009844:	4806      	ldr	r0, [pc, #24]	; (8009860 <tcp_free+0x2c>)
 8009846:	f003 feaf 	bl	800d5a8 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800984a:	4621      	mov	r1, r4
 800984c:	2001      	movs	r0, #1
}
 800984e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009852:	f7ff baa1 	b.w	8008d98 <memp_free>
 8009856:	bf00      	nop
 8009858:	08019e68 	.word	0x08019e68
 800985c:	08019ee1 	.word	0x08019ee1
 8009860:	08017fc5 	.word	0x08017fc5

08009864 <tcp_bind>:
{
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8009866:	4d23      	ldr	r5, [pc, #140]	; (80098f4 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009868:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800986a:	2900      	cmp	r1, #0
 800986c:	bf18      	it	ne
 800986e:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009870:	b948      	cbnz	r0, 8009886 <tcp_bind+0x22>
 8009872:	4b21      	ldr	r3, [pc, #132]	; (80098f8 <tcp_bind+0x94>)
 8009874:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009878:	4920      	ldr	r1, [pc, #128]	; (80098fc <tcp_bind+0x98>)
 800987a:	4821      	ldr	r0, [pc, #132]	; (8009900 <tcp_bind+0x9c>)
 800987c:	f003 fe94 	bl	800d5a8 <iprintf>
 8009880:	f06f 000f 	mvn.w	r0, #15
}
 8009884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009886:	7d03      	ldrb	r3, [r0, #20]
 8009888:	b14b      	cbz	r3, 800989e <tcp_bind+0x3a>
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <tcp_bind+0x94>)
 800988c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009890:	491c      	ldr	r1, [pc, #112]	; (8009904 <tcp_bind+0xa0>)
 8009892:	481b      	ldr	r0, [pc, #108]	; (8009900 <tcp_bind+0x9c>)
 8009894:	f003 fe88 	bl	800d5a8 <iprintf>
 8009898:	f06f 0005 	mvn.w	r0, #5
 800989c:	e7f2      	b.n	8009884 <tcp_bind+0x20>
  if (port == 0) {
 800989e:	b932      	cbnz	r2, 80098ae <tcp_bind+0x4a>
    port = tcp_new_port();
 80098a0:	f7ff ff62 	bl	8009768 <tcp_new_port>
    if (port == 0) {
 80098a4:	4602      	mov	r2, r0
 80098a6:	b950      	cbnz	r0, 80098be <tcp_bind+0x5a>
      return ERR_BUF;
 80098a8:	f06f 0001 	mvn.w	r0, #1
 80098ac:	e7ea      	b.n	8009884 <tcp_bind+0x20>
 80098ae:	4816      	ldr	r0, [pc, #88]	; (8009908 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80098b0:	f850 1b04 	ldr.w	r1, [r0], #4
 80098b4:	6809      	ldr	r1, [r1, #0]
 80098b6:	b971      	cbnz	r1, 80098d6 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 80098b8:	3301      	adds	r3, #1
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d1f8      	bne.n	80098b0 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80098c2:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80098c4:	4b11      	ldr	r3, [pc, #68]	; (800990c <tcp_bind+0xa8>)
  pcb->local_port = port;
 80098c6:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	601c      	str	r4, [r3, #0]
 80098cc:	60e2      	str	r2, [r4, #12]
 80098ce:	f003 f941 	bl	800cb54 <tcp_timer_needed>
  return ERR_OK;
 80098d2:	2000      	movs	r0, #0
 80098d4:	e7d6      	b.n	8009884 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 80098d6:	8ace      	ldrh	r6, [r1, #22]
 80098d8:	4296      	cmp	r6, r2
 80098da:	d105      	bne.n	80098e8 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 80098dc:	680f      	ldr	r7, [r1, #0]
 80098de:	b12f      	cbz	r7, 80098ec <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 80098e0:	682e      	ldr	r6, [r5, #0]
 80098e2:	b11e      	cbz	r6, 80098ec <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80098e4:	42b7      	cmp	r7, r6
 80098e6:	d001      	beq.n	80098ec <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80098e8:	68c9      	ldr	r1, [r1, #12]
 80098ea:	e7e4      	b.n	80098b6 <tcp_bind+0x52>
              return ERR_USE;
 80098ec:	f06f 0007 	mvn.w	r0, #7
 80098f0:	e7c8      	b.n	8009884 <tcp_bind+0x20>
 80098f2:	bf00      	nop
 80098f4:	0800f134 	.word	0x0800f134
 80098f8:	08019e68 	.word	0x08019e68
 80098fc:	08019ef2 	.word	0x08019ef2
 8009900:	08017fc5 	.word	0x08017fc5
 8009904:	08019f08 	.word	0x08019f08
 8009908:	0800f208 	.word	0x0800f208
 800990c:	2000e404 	.word	0x2000e404

08009910 <tcp_listen_with_backlog_and_err>:
{
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009914:	4605      	mov	r5, r0
 8009916:	b968      	cbnz	r0, 8009934 <tcp_listen_with_backlog_and_err+0x24>
 8009918:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <tcp_listen_with_backlog_and_err+0xb0>)
 800991a:	f240 3259 	movw	r2, #857	; 0x359
 800991e:	4929      	ldr	r1, [pc, #164]	; (80099c4 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009920:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009922:	4829      	ldr	r0, [pc, #164]	; (80099c8 <tcp_listen_with_backlog_and_err+0xb8>)
 8009924:	f003 fe40 	bl	800d5a8 <iprintf>
 8009928:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800992c:	b106      	cbz	r6, 8009930 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800992e:	7033      	strb	r3, [r6, #0]
}
 8009930:	4620      	mov	r0, r4
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009934:	7d07      	ldrb	r7, [r0, #20]
 8009936:	b157      	cbz	r7, 800994e <tcp_listen_with_backlog_and_err+0x3e>
 8009938:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <tcp_listen_with_backlog_and_err+0xb0>)
 800993a:	f240 325a 	movw	r2, #858	; 0x35a
 800993e:	4923      	ldr	r1, [pc, #140]	; (80099cc <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009940:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009942:	4821      	ldr	r0, [pc, #132]	; (80099c8 <tcp_listen_with_backlog_and_err+0xb8>)
 8009944:	f003 fe30 	bl	800d5a8 <iprintf>
 8009948:	f06f 030e 	mvn.w	r3, #14
 800994c:	e7ee      	b.n	800992c <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800994e:	2002      	movs	r0, #2
 8009950:	f7ff f9f2 	bl	8008d38 <memp_malloc>
  if (lpcb == NULL) {
 8009954:	4604      	mov	r4, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d02e      	beq.n	80099b8 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800995a:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800995c:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800995e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8009960:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8009962:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8009964:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8009966:	7d6a      	ldrb	r2, [r5, #21]
 8009968:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800996a:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800996c:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800996e:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8009970:	7aea      	ldrb	r2, [r5, #11]
 8009972:	4f17      	ldr	r7, [pc, #92]	; (80099d0 <tcp_listen_with_backlog_and_err+0xc0>)
 8009974:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8009976:	7aaa      	ldrb	r2, [r5, #10]
 8009978:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800997a:	682a      	ldr	r2, [r5, #0]
 800997c:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800997e:	b133      	cbz	r3, 800998e <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	42ab      	cmp	r3, r5
 8009984:	d110      	bne.n	80099a8 <tcp_listen_with_backlog_and_err+0x98>
 8009986:	68eb      	ldr	r3, [r5, #12]
 8009988:	603b      	str	r3, [r7, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800998e:	4628      	mov	r0, r5
 8009990:	f7ff ff50 	bl	8009834 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8009994:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <tcp_listen_with_backlog_and_err+0xc4>)
 8009996:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	607c      	str	r4, [r7, #4]
 800999c:	60e3      	str	r3, [r4, #12]
 800999e:	f003 f8d9 	bl	800cb54 <tcp_timer_needed>
  res = ERR_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e7c2      	b.n	800992c <tcp_listen_with_backlog_and_err+0x1c>
 80099a6:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0ee      	beq.n	800998a <tcp_listen_with_backlog_and_err+0x7a>
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	42aa      	cmp	r2, r5
 80099b0:	d1f9      	bne.n	80099a6 <tcp_listen_with_backlog_and_err+0x96>
 80099b2:	68ea      	ldr	r2, [r5, #12]
 80099b4:	60da      	str	r2, [r3, #12]
 80099b6:	e7e8      	b.n	800998a <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e7b6      	b.n	800992c <tcp_listen_with_backlog_and_err+0x1c>
 80099be:	bf00      	nop
 80099c0:	08019e68 	.word	0x08019e68
 80099c4:	08019f30 	.word	0x08019f30
 80099c8:	08017fc5 	.word	0x08017fc5
 80099cc:	08019f5d 	.word	0x08019f5d
 80099d0:	2000e404 	.word	0x2000e404
 80099d4:	0800a53d 	.word	0x0800a53d

080099d8 <tcp_update_rcv_ann_wnd>:
{
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80099da:	4604      	mov	r4, r0
 80099dc:	b930      	cbnz	r0, 80099ec <tcp_update_rcv_ann_wnd+0x14>
 80099de:	4b15      	ldr	r3, [pc, #84]	; (8009a34 <tcp_update_rcv_ann_wnd+0x5c>)
 80099e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80099e4:	4914      	ldr	r1, [pc, #80]	; (8009a38 <tcp_update_rcv_ann_wnd+0x60>)
 80099e6:	4815      	ldr	r0, [pc, #84]	; (8009a3c <tcp_update_rcv_ann_wnd+0x64>)
 80099e8:	f003 fdde 	bl	800d5a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80099ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80099ee:	f240 56b4 	movw	r6, #1460	; 0x5b4
 80099f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099f4:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80099f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80099f8:	1ad0      	subs	r0, r2, r3
 80099fa:	42b7      	cmp	r7, r6
 80099fc:	4428      	add	r0, r5
 80099fe:	bf94      	ite	ls
 8009a00:	1bc1      	subls	r1, r0, r7
 8009a02:	1b81      	subhi	r1, r0, r6
 8009a04:	2900      	cmp	r1, #0
 8009a06:	db01      	blt.n	8009a0c <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009a08:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009a0c:	1aea      	subs	r2, r5, r3
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	dd02      	ble.n	8009a18 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8009a12:	2000      	movs	r0, #0
 8009a14:	8560      	strh	r0, [r4, #42]	; 0x2a
 8009a16:	e7f8      	b.n	8009a0a <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009a18:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009a1a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009a1e:	d306      	bcc.n	8009a2e <tcp_update_rcv_ann_wnd+0x56>
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <tcp_update_rcv_ann_wnd+0x5c>)
 8009a22:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009a26:	4906      	ldr	r1, [pc, #24]	; (8009a40 <tcp_update_rcv_ann_wnd+0x68>)
 8009a28:	4804      	ldr	r0, [pc, #16]	; (8009a3c <tcp_update_rcv_ann_wnd+0x64>)
 8009a2a:	f003 fdbd 	bl	800d5a8 <iprintf>
    return 0;
 8009a2e:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009a30:	8565      	strh	r5, [r4, #42]	; 0x2a
 8009a32:	e7ea      	b.n	8009a0a <tcp_update_rcv_ann_wnd+0x32>
 8009a34:	08019e68 	.word	0x08019e68
 8009a38:	08019f94 	.word	0x08019f94
 8009a3c:	08017fc5 	.word	0x08017fc5
 8009a40:	08019fb8 	.word	0x08019fb8

08009a44 <tcp_recved>:
{
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009a48:	4605      	mov	r5, r0
 8009a4a:	b940      	cbnz	r0, 8009a5e <tcp_recved+0x1a>
 8009a4c:	4b18      	ldr	r3, [pc, #96]	; (8009ab0 <tcp_recved+0x6c>)
 8009a4e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009a52:	4918      	ldr	r1, [pc, #96]	; (8009ab4 <tcp_recved+0x70>)
 8009a54:	4818      	ldr	r0, [pc, #96]	; (8009ab8 <tcp_recved+0x74>)
}
 8009a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009a5a:	f003 bda5 	b.w	800d5a8 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009a5e:	7d03      	ldrb	r3, [r0, #20]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d106      	bne.n	8009a72 <tcp_recved+0x2e>
 8009a64:	4b12      	ldr	r3, [pc, #72]	; (8009ab0 <tcp_recved+0x6c>)
 8009a66:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009a6a:	4914      	ldr	r1, [pc, #80]	; (8009abc <tcp_recved+0x78>)
 8009a6c:	4812      	ldr	r0, [pc, #72]	; (8009ab8 <tcp_recved+0x74>)
 8009a6e:	f003 fd9b 	bl	800d5a8 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009a72:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009a74:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009a78:	1911      	adds	r1, r2, r4
 8009a7a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	d813      	bhi.n	8009aa8 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009a80:	428a      	cmp	r2, r1
 8009a82:	bf88      	it	hi
 8009a84:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009a86:	4628      	mov	r0, r5
 8009a88:	8529      	strh	r1, [r5, #40]	; 0x28
 8009a8a:	f7ff ffa5 	bl	80099d8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009a8e:	f240 23d9 	movw	r3, #729	; 0x2d9
 8009a92:	4298      	cmp	r0, r3
 8009a94:	d90a      	bls.n	8009aac <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8009a96:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009a98:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009a9a:	f043 0302 	orr.w	r3, r3, #2
 8009a9e:	836b      	strh	r3, [r5, #26]
}
 8009aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009aa4:	f002 bd80 	b.w	800c5a8 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	e7ec      	b.n	8009a86 <tcp_recved+0x42>
}
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	bf00      	nop
 8009ab0:	08019e68 	.word	0x08019e68
 8009ab4:	08019fd2 	.word	0x08019fd2
 8009ab8:	08017fc5 	.word	0x08017fc5
 8009abc:	08019fea 	.word	0x08019fea

08009ac0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009ac0:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	b148      	cbz	r0, 8009ada <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8009ac6:	6840      	ldr	r0, [r0, #4]
 8009ac8:	b108      	cbz	r0, 8009ace <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009aca:	f7ff fbc5 	bl	8009258 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009ace:	4621      	mov	r1, r4
 8009ad0:	2003      	movs	r0, #3
  }
}
 8009ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009ad6:	f7ff b95f 	b.w	8008d98 <memp_free>
}
 8009ada:	bd10      	pop	{r4, pc}

08009adc <tcp_segs_free>:
{
 8009adc:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8009ade:	b900      	cbnz	r0, 8009ae2 <tcp_segs_free+0x6>
}
 8009ae0:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8009ae2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009ae4:	f7ff ffec 	bl	8009ac0 <tcp_seg_free>
    seg = next;
 8009ae8:	4620      	mov	r0, r4
 8009aea:	e7f8      	b.n	8009ade <tcp_segs_free+0x2>

08009aec <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009aec:	b100      	cbz	r0, 8009af0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009aee:	6101      	str	r1, [r0, #16]
  }
}
 8009af0:	4770      	bx	lr
	...

08009af4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009af8:	4604      	mov	r4, r0
 8009afa:	b158      	cbz	r0, 8009b14 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009afc:	7d03      	ldrb	r3, [r0, #20]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d106      	bne.n	8009b10 <tcp_recv+0x1c>
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <tcp_recv+0x24>)
 8009b04:	f240 72df 	movw	r2, #2015	; 0x7df
 8009b08:	4904      	ldr	r1, [pc, #16]	; (8009b1c <tcp_recv+0x28>)
 8009b0a:	4805      	ldr	r0, [pc, #20]	; (8009b20 <tcp_recv+0x2c>)
 8009b0c:	f003 fd4c 	bl	800d5a8 <iprintf>
    pcb->recv = recv;
 8009b10:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8009b14:	bd38      	pop	{r3, r4, r5, pc}
 8009b16:	bf00      	nop
 8009b18:	08019e68 	.word	0x08019e68
 8009b1c:	0801a029 	.word	0x0801a029
 8009b20:	08017fc5 	.word	0x08017fc5

08009b24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009b28:	4604      	mov	r4, r0
 8009b2a:	b150      	cbz	r0, 8009b42 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009b2c:	7d03      	ldrb	r3, [r0, #20]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d106      	bne.n	8009b40 <tcp_sent+0x1c>
 8009b32:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <tcp_sent+0x20>)
 8009b34:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009b38:	4903      	ldr	r1, [pc, #12]	; (8009b48 <tcp_sent+0x24>)
 8009b3a:	4804      	ldr	r0, [pc, #16]	; (8009b4c <tcp_sent+0x28>)
 8009b3c:	f003 fd34 	bl	800d5a8 <iprintf>
    pcb->sent = sent;
 8009b40:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	08019e68 	.word	0x08019e68
 8009b48:	0801a050 	.word	0x0801a050
 8009b4c:	08017fc5 	.word	0x08017fc5

08009b50 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009b54:	4604      	mov	r4, r0
 8009b56:	b158      	cbz	r0, 8009b70 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009b58:	7d03      	ldrb	r3, [r0, #20]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d106      	bne.n	8009b6c <tcp_err+0x1c>
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <tcp_err+0x24>)
 8009b60:	f640 020d 	movw	r2, #2061	; 0x80d
 8009b64:	4904      	ldr	r1, [pc, #16]	; (8009b78 <tcp_err+0x28>)
 8009b66:	4805      	ldr	r0, [pc, #20]	; (8009b7c <tcp_err+0x2c>)
 8009b68:	f003 fd1e 	bl	800d5a8 <iprintf>
    pcb->errf = err;
 8009b6c:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8009b70:	bd38      	pop	{r3, r4, r5, pc}
 8009b72:	bf00      	nop
 8009b74:	08019e68 	.word	0x08019e68
 8009b78:	0801a077 	.word	0x0801a077
 8009b7c:	08017fc5 	.word	0x08017fc5

08009b80 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009b80:	b118      	cbz	r0, 8009b8a <tcp_accept+0xa>
 8009b82:	7d03      	ldrb	r3, [r0, #20]
 8009b84:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8009b86:	bf08      	it	eq
 8009b88:	6181      	streq	r1, [r0, #24]
  }
}
 8009b8a:	4770      	bx	lr

08009b8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	460e      	mov	r6, r1
 8009b90:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009b92:	4604      	mov	r4, r0
 8009b94:	b940      	cbnz	r0, 8009ba8 <tcp_poll+0x1c>
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <tcp_poll+0x38>)
 8009b98:	f640 023d 	movw	r2, #2109	; 0x83d
 8009b9c:	490a      	ldr	r1, [pc, #40]	; (8009bc8 <tcp_poll+0x3c>)
 8009b9e:	480b      	ldr	r0, [pc, #44]	; (8009bcc <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8009ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009ba4:	f003 bd00 	b.w	800d5a8 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009ba8:	7d03      	ldrb	r3, [r0, #20]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d106      	bne.n	8009bbc <tcp_poll+0x30>
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <tcp_poll+0x38>)
 8009bb0:	f640 023e 	movw	r2, #2110	; 0x83e
 8009bb4:	4906      	ldr	r1, [pc, #24]	; (8009bd0 <tcp_poll+0x44>)
 8009bb6:	4805      	ldr	r0, [pc, #20]	; (8009bcc <tcp_poll+0x40>)
 8009bb8:	f003 fcf6 	bl	800d5a8 <iprintf>
  pcb->poll = poll;
 8009bbc:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8009bc0:	7765      	strb	r5, [r4, #29]
}
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	08019e68 	.word	0x08019e68
 8009bc8:	0801a09d 	.word	0x0801a09d
 8009bcc:	08017fc5 	.word	0x08017fc5
 8009bd0:	0801a0b3 	.word	0x0801a0b3

08009bd4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009bd4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b940      	cbnz	r0, 8009bec <tcp_pcb_purge+0x18>
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <tcp_pcb_purge+0x4c>)
 8009bdc:	f640 0251 	movw	r2, #2129	; 0x851
 8009be0:	4910      	ldr	r1, [pc, #64]	; (8009c24 <tcp_pcb_purge+0x50>)
 8009be2:	4811      	ldr	r0, [pc, #68]	; (8009c28 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8009be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009be8:	f003 bcde 	b.w	800d5a8 <iprintf>
  if (pcb->state != CLOSED &&
 8009bec:	7d03      	ldrb	r3, [r0, #20]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d915      	bls.n	8009c1e <tcp_pcb_purge+0x4a>
 8009bf2:	2b0a      	cmp	r3, #10
 8009bf4:	d013      	beq.n	8009c1e <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 8009bf6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009bf8:	b118      	cbz	r0, 8009c02 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8009bfa:	f7ff fb2d 	bl	8009258 <pbuf_free>
      pcb->refused_data = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8009c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8009c06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8009c08:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8009c0a:	f7ff ff67 	bl	8009adc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009c0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009c10:	f7ff ff64 	bl	8009adc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8009c1a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8009c1e:	bd10      	pop	{r4, pc}
 8009c20:	08019e68 	.word	0x08019e68
 8009c24:	0801a0d1 	.word	0x0801a0d1
 8009c28:	08017fc5 	.word	0x08017fc5

08009c2c <tcp_slowtmr>:
{
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8009c30:	4dab      	ldr	r5, [pc, #684]	; (8009ee0 <tcp_slowtmr+0x2b4>)
{
 8009c32:	b087      	sub	sp, #28
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c34:	4fab      	ldr	r7, [pc, #684]	; (8009ee4 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 8009c36:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c38:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8009f00 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 8009c3c:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c3e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8009f04 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 8009c42:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 8009c44:	7c2b      	ldrb	r3, [r5, #16]
 8009c46:	3301      	adds	r3, #1
 8009c48:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 8009c4a:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 8009c4c:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 8009c50:	b95c      	cbnz	r4, 8009c6a <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 8009c52:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c54:	4fa3      	ldr	r7, [pc, #652]	; (8009ee4 <tcp_slowtmr+0x2b8>)
 8009c56:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8009f08 <tcp_slowtmr+0x2dc>
 8009c5a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8009f04 <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	f040 819b 	bne.w	8009f9a <tcp_slowtmr+0x36e>
}
 8009c64:	b007      	add	sp, #28
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c6a:	7d23      	ldrb	r3, [r4, #20]
 8009c6c:	b933      	cbnz	r3, 8009c7c <tcp_slowtmr+0x50>
 8009c6e:	463b      	mov	r3, r7
 8009c70:	f240 42be 	movw	r2, #1214	; 0x4be
 8009c74:	4659      	mov	r1, fp
 8009c76:	4640      	mov	r0, r8
 8009c78:	f003 fc96 	bl	800d5a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009c7c:	7d23      	ldrb	r3, [r4, #20]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d106      	bne.n	8009c90 <tcp_slowtmr+0x64>
 8009c82:	463b      	mov	r3, r7
 8009c84:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009c88:	4997      	ldr	r1, [pc, #604]	; (8009ee8 <tcp_slowtmr+0x2bc>)
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f003 fc8c 	bl	800d5a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009c90:	7d23      	ldrb	r3, [r4, #20]
 8009c92:	2b0a      	cmp	r3, #10
 8009c94:	d106      	bne.n	8009ca4 <tcp_slowtmr+0x78>
 8009c96:	463b      	mov	r3, r7
 8009c98:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009c9c:	4993      	ldr	r1, [pc, #588]	; (8009eec <tcp_slowtmr+0x2c0>)
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f003 fc82 	bl	800d5a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ca4:	7c2b      	ldrb	r3, [r5, #16]
 8009ca6:	7fa2      	ldrb	r2, [r4, #30]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d103      	bne.n	8009cb4 <tcp_slowtmr+0x88>
      pcb = pcb->next;
 8009cac:	68e6      	ldr	r6, [r4, #12]
      continue;
 8009cae:	46a1      	mov	r9, r4
 8009cb0:	4634      	mov	r4, r6
 8009cb2:	e7cd      	b.n	8009c50 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009cb4:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8009cb6:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009cb8:	2a02      	cmp	r2, #2
 8009cba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009cbe:	d176      	bne.n	8009dae <tcp_slowtmr+0x182>
 8009cc0:	2b05      	cmp	r3, #5
 8009cc2:	d976      	bls.n	8009db2 <tcp_slowtmr+0x186>
      ++pcb_remove;
 8009cc4:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 8009cc8:	7d23      	ldrb	r3, [r4, #20]
 8009cca:	2b06      	cmp	r3, #6
 8009ccc:	d10b      	bne.n	8009ce6 <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 8009cce:	8b62      	ldrh	r2, [r4, #26]
 8009cd0:	06d2      	lsls	r2, r2, #27
 8009cd2:	d508      	bpl.n	8009ce6 <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cd4:	68ea      	ldr	r2, [r5, #12]
 8009cd6:	6a21      	ldr	r1, [r4, #32]
 8009cd8:	1a52      	subs	r2, r2, r1
 8009cda:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8009cdc:	bf84      	itt	hi
 8009cde:	f10a 0a01 	addhi.w	sl, sl, #1
 8009ce2:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ce6:	7a66      	ldrb	r6, [r4, #9]
 8009ce8:	f016 0608 	ands.w	r6, r6, #8
 8009cec:	d019      	beq.n	8009d22 <tcp_slowtmr+0xf6>
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d002      	beq.n	8009cf8 <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 8009cf2:	2b07      	cmp	r3, #7
 8009cf4:	f040 811c 	bne.w	8009f30 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cf8:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cfe:	68e9      	ldr	r1, [r5, #12]
 8009d00:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009d02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d06:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 8009d0a:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8009d0e:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d12:	4291      	cmp	r1, r2
 8009d14:	f240 80fa 	bls.w	8009f0c <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 8009d18:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 8009d1c:	2601      	movs	r6, #1
        ++pcb_remove;
 8009d1e:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->state == SYN_RCVD) {
 8009d22:	7d23      	ldrb	r3, [r4, #20]
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	f040 8105 	bne.w	8009f34 <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d2a:	68eb      	ldr	r3, [r5, #12]
 8009d2c:	6a22      	ldr	r2, [r4, #32]
 8009d2e:	1a9b      	subs	r3, r3, r2
 8009d30:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d32:	d803      	bhi.n	8009d3c <tcp_slowtmr+0x110>
    if (pcb_remove) {
 8009d34:	f1ba 0f00 	cmp.w	sl, #0
 8009d38:	f000 8110 	beq.w	8009f5c <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 8009d3c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8009d3e:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8009d42:	f7ff ff47 	bl	8009bd4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009d46:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 8009d48:	f1b9 0f00 	cmp.w	r9, #0
 8009d4c:	f000 80fa 	beq.w	8009f44 <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	d106      	bne.n	8009d62 <tcp_slowtmr+0x136>
 8009d54:	463b      	mov	r3, r7
 8009d56:	f240 526d 	movw	r2, #1389	; 0x56d
 8009d5a:	4965      	ldr	r1, [pc, #404]	; (8009ef0 <tcp_slowtmr+0x2c4>)
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	f003 fc23 	bl	800d5a8 <iprintf>
        prev->next = pcb->next;
 8009d62:	68e3      	ldr	r3, [r4, #12]
 8009d64:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8009d68:	b15e      	cbz	r6, 8009d82 <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009d6a:	8b23      	ldrh	r3, [r4, #24]
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	9302      	str	r3, [sp, #8]
 8009d70:	8ae3      	ldrh	r3, [r4, #22]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	1d23      	adds	r3, r4, #4
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4623      	mov	r3, r4
 8009d7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009d7c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009d7e:	f002 fb9b 	bl	800c4b8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009d82:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8009d84:	4620      	mov	r0, r4
      pcb = pcb->next;
 8009d86:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 8009d88:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8009d8a:	f7ff fd53 	bl	8009834 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009d8e:	2200      	movs	r2, #0
 8009d90:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009d92:	f1ba 0f00 	cmp.w	sl, #0
 8009d96:	d008      	beq.n	8009daa <tcp_slowtmr+0x17e>
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	f06f 010c 	mvn.w	r1, #12
 8009d9e:	4618      	mov	r0, r3
 8009da0:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 8009da2:	7c6b      	ldrb	r3, [r5, #17]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f47f af50 	bne.w	8009c4a <tcp_slowtmr+0x1e>
 8009daa:	464c      	mov	r4, r9
 8009dac:	e77f      	b.n	8009cae <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009dae:	2b0b      	cmp	r3, #11
 8009db0:	e787      	b.n	8009cc2 <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 8009db2:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 8009db6:	f1ba 0f00 	cmp.w	sl, #0
 8009dba:	d045      	beq.n	8009e48 <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009dbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009dbe:	b133      	cbz	r3, 8009dce <tcp_slowtmr+0x1a2>
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009dc6:	494b      	ldr	r1, [pc, #300]	; (8009ef4 <tcp_slowtmr+0x2c8>)
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f003 fbed 	bl	800d5a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009dce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009dd0:	b933      	cbnz	r3, 8009de0 <tcp_slowtmr+0x1b4>
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009dd8:	4947      	ldr	r1, [pc, #284]	; (8009ef8 <tcp_slowtmr+0x2cc>)
 8009dda:	4640      	mov	r0, r8
 8009ddc:	f003 fbe4 	bl	800d5a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009de0:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009de4:	2b0b      	cmp	r3, #11
 8009de6:	f63f af6d 	bhi.w	8009cc4 <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009dea:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8009dee:	4b43      	ldr	r3, [pc, #268]	; (8009efc <tcp_slowtmr+0x2d0>)
 8009df0:	4413      	add	r3, r2
 8009df2:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 8009df4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d30b      	bcc.n	8009e14 <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 8009dfc:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009e00:	b189      	cbz	r1, 8009e26 <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009e02:	4620      	mov	r0, r4
 8009e04:	f002 f910 	bl	800c028 <tcp_split_unsent_seg>
 8009e08:	b990      	cbnz	r0, 8009e30 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f002 fbcc 	bl	800c5a8 <tcp_output>
 8009e10:	b130      	cbz	r0, 8009e20 <tcp_slowtmr+0x1f4>
 8009e12:	e00d      	b.n	8009e30 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8009e18:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8009e1a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 8009e1e:	d2ed      	bcs.n	8009dfc <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 8009e20:	f04f 0a00 	mov.w	sl, #0
 8009e24:	e750      	b.n	8009cc8 <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009e26:	4620      	mov	r0, r4
 8009e28:	f002 fdc6 	bl	800c9b8 <tcp_zero_window_probe>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d1f7      	bne.n	8009e20 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009e30:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 8009e34:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009e38:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8009e3a:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009e3e:	d8ef      	bhi.n	8009e20 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 8009e40:	3301      	adds	r3, #1
 8009e42:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009e46:	e73f      	b.n	8009cc8 <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009e48:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009e4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009e4e:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009e50:	bf9c      	itt	ls
 8009e52:	3301      	addls	r3, #1
 8009e54:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009e56:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009e5a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	dbde      	blt.n	8009e20 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009e62:	4620      	mov	r0, r4
 8009e64:	f002 fa70 	bl	800c348 <tcp_rexmit_rto_prepare>
 8009e68:	b128      	cbz	r0, 8009e76 <tcp_slowtmr+0x24a>
 8009e6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1d7      	bne.n	8009e20 <tcp_slowtmr+0x1f4>
 8009e70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0d4      	beq.n	8009e20 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 8009e76:	7d23      	ldrb	r3, [r4, #20]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d015      	beq.n	8009ea8 <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009e7c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009e80:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009e84:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009e88:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8009e8c:	4a1b      	ldr	r2, [pc, #108]	; (8009efc <tcp_slowtmr+0x2d0>)
 8009e8e:	290c      	cmp	r1, #12
 8009e90:	bf94      	ite	ls
 8009e92:	1852      	addls	r2, r2, r1
 8009e94:	320c      	addhi	r2, #12
 8009e96:	7dd2      	ldrb	r2, [r2, #23]
 8009e98:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009e9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	bfa8      	it	ge
 8009ea2:	4613      	movge	r3, r2
 8009ea4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009ea8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 8009eac:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009eae:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009eb2:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8009eb4:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 8009eb6:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8009eb8:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009ebc:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 8009ebe:	bf28      	it	cs
 8009ec0:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009ec2:	0073      	lsls	r3, r6, #1
            pcb->cwnd = pcb->mss;
 8009ec4:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009ec8:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 8009eca:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009ecc:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009ed0:	bf98      	it	ls
 8009ed2:	460b      	movls	r3, r1
 8009ed4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8009ed8:	f002 fd10 	bl	800c8fc <tcp_rexmit_rto_commit>
 8009edc:	e6f4      	b.n	8009cc8 <tcp_slowtmr+0x9c>
 8009ede:	bf00      	nop
 8009ee0:	2000e404 	.word	0x2000e404
 8009ee4:	08019e68 	.word	0x08019e68
 8009ee8:	0801a116 	.word	0x0801a116
 8009eec:	0801a140 	.word	0x0801a140
 8009ef0:	0801a1d4 	.word	0x0801a1d4
 8009ef4:	0801a16d 	.word	0x0801a16d
 8009ef8:	0801a19f 	.word	0x0801a19f
 8009efc:	0800f208 	.word	0x0800f208
 8009f00:	0801a0ec 	.word	0x0801a0ec
 8009f04:	08017fc5 	.word	0x08017fc5
 8009f08:	0801a229 	.word	0x0801a229
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009f0c:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 8009f10:	4e3d      	ldr	r6, [pc, #244]	; (800a008 <tcp_slowtmr+0x3dc>)
 8009f12:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 8009f16:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f1a:	4299      	cmp	r1, r3
 8009f1c:	d908      	bls.n	8009f30 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f002 fd22 	bl	800c968 <tcp_keepalive>
        if (err == ERR_OK) {
 8009f24:	b920      	cbnz	r0, 8009f30 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 8009f26:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 8009f30:	2600      	movs	r6, #0
 8009f32:	e6f6      	b.n	8009d22 <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	f47f aefd 	bne.w	8009d34 <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f3a:	68eb      	ldr	r3, [r5, #12]
 8009f3c:	6a22      	ldr	r2, [r4, #32]
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	2bf0      	cmp	r3, #240	; 0xf0
 8009f42:	e6f6      	b.n	8009d32 <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d006      	beq.n	8009f56 <tcp_slowtmr+0x32a>
 8009f48:	463b      	mov	r3, r7
 8009f4a:	f240 5271 	movw	r2, #1393	; 0x571
 8009f4e:	492f      	ldr	r1, [pc, #188]	; (800a00c <tcp_slowtmr+0x3e0>)
 8009f50:	4640      	mov	r0, r8
 8009f52:	f003 fb29 	bl	800d5a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	60ab      	str	r3, [r5, #8]
 8009f5a:	e705      	b.n	8009d68 <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8009f5c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009f5e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8009f60:	3301      	adds	r3, #1
      pcb = pcb->next;
 8009f62:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8009f64:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8009f66:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8009f68:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009f6a:	f63f aea0 	bhi.w	8009cae <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8009f6e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8009f72:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009f76:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 8009f7a:	b91b      	cbnz	r3, 8009f84 <tcp_slowtmr+0x358>
          tcp_output(prev);
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f002 fb13 	bl	800c5a8 <tcp_output>
 8009f82:	e694      	b.n	8009cae <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8009f84:	4621      	mov	r1, r4
 8009f86:	6920      	ldr	r0, [r4, #16]
 8009f88:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009f8a:	7c6b      	ldrb	r3, [r5, #17]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f47f ae5c 	bne.w	8009c4a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f47f ae8b 	bne.w	8009cae <tcp_slowtmr+0x82>
 8009f98:	e7f0      	b.n	8009f7c <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f9a:	7d33      	ldrb	r3, [r6, #20]
 8009f9c:	2b0a      	cmp	r3, #10
 8009f9e:	d006      	beq.n	8009fae <tcp_slowtmr+0x382>
 8009fa0:	463b      	mov	r3, r7
 8009fa2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	4640      	mov	r0, r8
 8009faa:	f003 fafd 	bl	800d5a8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009fae:	68eb      	ldr	r3, [r5, #12]
 8009fb0:	6a32      	ldr	r2, [r6, #32]
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	2bf0      	cmp	r3, #240	; 0xf0
 8009fb6:	d910      	bls.n	8009fda <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff fe0b 	bl	8009bd4 <tcp_pcb_purge>
      if (prev != NULL) {
 8009fbe:	b97c      	cbnz	r4, 8009fe0 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009fc0:	696b      	ldr	r3, [r5, #20]
 8009fc2:	42b3      	cmp	r3, r6
 8009fc4:	d006      	beq.n	8009fd4 <tcp_slowtmr+0x3a8>
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009fcc:	4910      	ldr	r1, [pc, #64]	; (800a010 <tcp_slowtmr+0x3e4>)
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f003 faea 	bl	800d5a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009fd4:	68f3      	ldr	r3, [r6, #12]
 8009fd6:	616b      	str	r3, [r5, #20]
 8009fd8:	e00e      	b.n	8009ff8 <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 8009fda:	4634      	mov	r4, r6
 8009fdc:	68f6      	ldr	r6, [r6, #12]
 8009fde:	e63e      	b.n	8009c5e <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009fe0:	696b      	ldr	r3, [r5, #20]
 8009fe2:	42b3      	cmp	r3, r6
 8009fe4:	d106      	bne.n	8009ff4 <tcp_slowtmr+0x3c8>
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	f240 52af 	movw	r2, #1455	; 0x5af
 8009fec:	4909      	ldr	r1, [pc, #36]	; (800a014 <tcp_slowtmr+0x3e8>)
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f003 fada 	bl	800d5a8 <iprintf>
        prev->next = pcb->next;
 8009ff4:	68f3      	ldr	r3, [r6, #12]
 8009ff6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8009ff8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff fc19 	bl	8009834 <tcp_free>
      pcb = pcb->next;
 800a002:	4656      	mov	r6, sl
 800a004:	e62b      	b.n	8009c5e <tcp_slowtmr+0x32>
 800a006:	bf00      	nop
 800a008:	000124f8 	.word	0x000124f8
 800a00c:	0801a1ff 	.word	0x0801a1ff
 800a010:	0801a27f 	.word	0x0801a27f
 800a014:	0801a258 	.word	0x0801a258

0800a018 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a01c:	460c      	mov	r4, r1
 800a01e:	b931      	cbnz	r1, 800a02e <tcp_pcb_remove+0x16>
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <tcp_pcb_remove+0xa0>)
 800a022:	f640 0283 	movw	r2, #2179	; 0x883
 800a026:	4925      	ldr	r1, [pc, #148]	; (800a0bc <tcp_pcb_remove+0xa4>)
 800a028:	4825      	ldr	r0, [pc, #148]	; (800a0c0 <tcp_pcb_remove+0xa8>)
 800a02a:	f003 fabd 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a02e:	b935      	cbnz	r5, 800a03e <tcp_pcb_remove+0x26>
 800a030:	4b21      	ldr	r3, [pc, #132]	; (800a0b8 <tcp_pcb_remove+0xa0>)
 800a032:	f640 0284 	movw	r2, #2180	; 0x884
 800a036:	4923      	ldr	r1, [pc, #140]	; (800a0c4 <tcp_pcb_remove+0xac>)
 800a038:	4821      	ldr	r0, [pc, #132]	; (800a0c0 <tcp_pcb_remove+0xa8>)
 800a03a:	f003 fab5 	bl	800d5a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a03e:	682b      	ldr	r3, [r5, #0]
 800a040:	42a3      	cmp	r3, r4
 800a042:	d116      	bne.n	800a072 <tcp_pcb_remove+0x5a>
 800a044:	68e3      	ldr	r3, [r4, #12]
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800a04a:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800a04c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800a04e:	f7ff fdc1 	bl	8009bd4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a052:	7d23      	ldrb	r3, [r4, #20]
 800a054:	2b0a      	cmp	r3, #10
 800a056:	d114      	bne.n	800a082 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a058:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a05a:	bb23      	cbnz	r3, 800a0a6 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a05c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a05e:	b1f3      	cbz	r3, 800a09e <tcp_pcb_remove+0x86>
 800a060:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <tcp_pcb_remove+0xa0>)
 800a062:	f640 0294 	movw	r2, #2196	; 0x894
 800a066:	4918      	ldr	r1, [pc, #96]	; (800a0c8 <tcp_pcb_remove+0xb0>)
 800a068:	4815      	ldr	r0, [pc, #84]	; (800a0c0 <tcp_pcb_remove+0xa8>)
 800a06a:	f003 fa9d 	bl	800d5a8 <iprintf>
 800a06e:	e016      	b.n	800a09e <tcp_pcb_remove+0x86>
 800a070:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0e8      	beq.n	800a048 <tcp_pcb_remove+0x30>
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	42a2      	cmp	r2, r4
 800a07a:	d1f9      	bne.n	800a070 <tcp_pcb_remove+0x58>
 800a07c:	68e2      	ldr	r2, [r4, #12]
 800a07e:	60da      	str	r2, [r3, #12]
 800a080:	e7e2      	b.n	800a048 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800a082:	2b01      	cmp	r3, #1
 800a084:	d00b      	beq.n	800a09e <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800a086:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800a088:	07da      	lsls	r2, r3, #31
 800a08a:	d5e5      	bpl.n	800a058 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800a08c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800a090:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800a092:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a094:	f002 fa88 	bl	800c5a8 <tcp_output>
  if (pcb->state != LISTEN) {
 800a098:	7d23      	ldrb	r3, [r4, #20]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d1dc      	bne.n	800a058 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a0a2:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a0a6:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <tcp_pcb_remove+0xa0>)
 800a0a8:	f640 0293 	movw	r2, #2195	; 0x893
 800a0ac:	4907      	ldr	r1, [pc, #28]	; (800a0cc <tcp_pcb_remove+0xb4>)
 800a0ae:	4804      	ldr	r0, [pc, #16]	; (800a0c0 <tcp_pcb_remove+0xa8>)
 800a0b0:	f003 fa7a 	bl	800d5a8 <iprintf>
 800a0b4:	e7d2      	b.n	800a05c <tcp_pcb_remove+0x44>
 800a0b6:	bf00      	nop
 800a0b8:	08019e68 	.word	0x08019e68
 800a0bc:	0801a2a5 	.word	0x0801a2a5
 800a0c0:	08017fc5 	.word	0x08017fc5
 800a0c4:	0801a2c1 	.word	0x0801a2c1
 800a0c8:	0801a2f9 	.word	0x0801a2f9
 800a0cc:	0801a2e1 	.word	0x0801a2e1

0800a0d0 <tcp_close_shutdown>:
{
 800a0d0:	b530      	push	{r4, r5, lr}
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	b930      	cbnz	r0, 800a0e8 <tcp_close_shutdown+0x18>
 800a0da:	4b4b      	ldr	r3, [pc, #300]	; (800a208 <tcp_close_shutdown+0x138>)
 800a0dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a0e0:	494a      	ldr	r1, [pc, #296]	; (800a20c <tcp_close_shutdown+0x13c>)
 800a0e2:	484b      	ldr	r0, [pc, #300]	; (800a210 <tcp_close_shutdown+0x140>)
 800a0e4:	f003 fa60 	bl	800d5a8 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a0e8:	7d23      	ldrb	r3, [r4, #20]
 800a0ea:	2d00      	cmp	r5, #0
 800a0ec:	d03f      	beq.n	800a16e <tcp_close_shutdown+0x9e>
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d001      	beq.n	800a0f6 <tcp_close_shutdown+0x26>
 800a0f2:	2b07      	cmp	r3, #7
 800a0f4:	d13b      	bne.n	800a16e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a0f6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a0f8:	b922      	cbnz	r2, 800a104 <tcp_close_shutdown+0x34>
 800a0fa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a0fc:	f640 3268 	movw	r2, #2920	; 0xb68
 800a100:	4291      	cmp	r1, r2
 800a102:	d034      	beq.n	800a16e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a104:	8b63      	ldrh	r3, [r4, #26]
 800a106:	06db      	lsls	r3, r3, #27
 800a108:	d406      	bmi.n	800a118 <tcp_close_shutdown+0x48>
 800a10a:	4b3f      	ldr	r3, [pc, #252]	; (800a208 <tcp_close_shutdown+0x138>)
 800a10c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a110:	4940      	ldr	r1, [pc, #256]	; (800a214 <tcp_close_shutdown+0x144>)
 800a112:	483f      	ldr	r0, [pc, #252]	; (800a210 <tcp_close_shutdown+0x140>)
 800a114:	f003 fa48 	bl	800d5a8 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a118:	8b23      	ldrh	r3, [r4, #24]
 800a11a:	4620      	mov	r0, r4
 800a11c:	9302      	str	r3, [sp, #8]
 800a11e:	8ae3      	ldrh	r3, [r4, #22]
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	1d23      	adds	r3, r4, #4
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4623      	mov	r3, r4
 800a128:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a12a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a12c:	f002 f9c4 	bl	800c4b8 <tcp_rst>
      tcp_pcb_purge(pcb);
 800a130:	4620      	mov	r0, r4
 800a132:	f7ff fd4f 	bl	8009bd4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a136:	4a38      	ldr	r2, [pc, #224]	; (800a218 <tcp_close_shutdown+0x148>)
 800a138:	6893      	ldr	r3, [r2, #8]
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	d10f      	bne.n	800a15e <tcp_close_shutdown+0x8e>
 800a13e:	68e3      	ldr	r3, [r4, #12]
 800a140:	6093      	str	r3, [r2, #8]
 800a142:	2300      	movs	r3, #0
 800a144:	60e3      	str	r3, [r4, #12]
 800a146:	2301      	movs	r3, #1
 800a148:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800a14a:	4b34      	ldr	r3, [pc, #208]	; (800a21c <tcp_close_shutdown+0x14c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	42a3      	cmp	r3, r4
 800a150:	d11d      	bne.n	800a18e <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 800a152:	f001 fb3f 	bl	800b7d4 <tcp_trigger_input_pcb_close>
}
 800a156:	2000      	movs	r0, #0
 800a158:	b005      	add	sp, #20
 800a15a:	bd30      	pop	{r4, r5, pc}
 800a15c:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0ef      	beq.n	800a142 <tcp_close_shutdown+0x72>
 800a162:	68d9      	ldr	r1, [r3, #12]
 800a164:	42a1      	cmp	r1, r4
 800a166:	d1f9      	bne.n	800a15c <tcp_close_shutdown+0x8c>
 800a168:	68e1      	ldr	r1, [r4, #12]
 800a16a:	60d9      	str	r1, [r3, #12]
 800a16c:	e7e9      	b.n	800a142 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d01a      	beq.n	800a1a8 <tcp_close_shutdown+0xd8>
 800a172:	2b02      	cmp	r3, #2
 800a174:	d039      	beq.n	800a1ea <tcp_close_shutdown+0x11a>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d140      	bne.n	800a1fc <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800a17a:	8ae3      	ldrh	r3, [r4, #22]
 800a17c:	b13b      	cbz	r3, 800a18e <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a17e:	4a26      	ldr	r2, [pc, #152]	; (800a218 <tcp_close_shutdown+0x148>)
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	42a3      	cmp	r3, r4
 800a184:	d108      	bne.n	800a198 <tcp_close_shutdown+0xc8>
 800a186:	68e3      	ldr	r3, [r4, #12]
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff fb50 	bl	8009834 <tcp_free>
      break;
 800a194:	e7df      	b.n	800a156 <tcp_close_shutdown+0x86>
 800a196:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0f6      	beq.n	800a18a <tcp_close_shutdown+0xba>
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	42a2      	cmp	r2, r4
 800a1a0:	d1f9      	bne.n	800a196 <tcp_close_shutdown+0xc6>
 800a1a2:	68e2      	ldr	r2, [r4, #12]
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	e7f0      	b.n	800a18a <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a1a8:	491d      	ldr	r1, [pc, #116]	; (800a220 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800a1aa:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a1ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800a1b0:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1b2:	b9a2      	cbnz	r2, 800a1de <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d1f8      	bne.n	800a1ac <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4819      	ldr	r0, [pc, #100]	; (800a224 <tcp_close_shutdown+0x154>)
 800a1be:	f7ff ff2b 	bl	800a018 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a1c2:	7d23      	ldrb	r3, [r4, #20]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d105      	bne.n	800a1d4 <tcp_close_shutdown+0x104>
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <tcp_close_shutdown+0x138>)
 800a1ca:	22df      	movs	r2, #223	; 0xdf
 800a1cc:	4916      	ldr	r1, [pc, #88]	; (800a228 <tcp_close_shutdown+0x158>)
 800a1ce:	4810      	ldr	r0, [pc, #64]	; (800a210 <tcp_close_shutdown+0x140>)
 800a1d0:	f003 f9ea 	bl	800d5a8 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	f7fe fdde 	bl	8008d98 <memp_free>
}
 800a1dc:	e7bb      	b.n	800a156 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 800a1de:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800a1e0:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800a1e2:	bf08      	it	eq
 800a1e4:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1e6:	68d2      	ldr	r2, [r2, #12]
 800a1e8:	e7e3      	b.n	800a1b2 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a1ea:	4d0b      	ldr	r5, [pc, #44]	; (800a218 <tcp_close_shutdown+0x148>)
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f105 0008 	add.w	r0, r5, #8
 800a1f2:	f7ff ff11 	bl	800a018 <tcp_pcb_remove>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	746b      	strb	r3, [r5, #17]
 800a1fa:	e7c8      	b.n	800a18e <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 800a1fc:	4620      	mov	r0, r4
}
 800a1fe:	b005      	add	sp, #20
 800a200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800a204:	f7ff bada 	b.w	80097bc <tcp_close_shutdown_fin>
 800a208:	08019e68 	.word	0x08019e68
 800a20c:	0801a312 	.word	0x0801a312
 800a210:	08017fc5 	.word	0x08017fc5
 800a214:	0801a332 	.word	0x0801a332
 800a218:	2000e404 	.word	0x2000e404
 800a21c:	2000e45c 	.word	0x2000e45c
 800a220:	0800f208 	.word	0x0800f208
 800a224:	2000e408 	.word	0x2000e408
 800a228:	0801a34b 	.word	0x0801a34b

0800a22c <tcp_close>:
{
 800a22c:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a22e:	b158      	cbz	r0, 800a248 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800a230:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800a232:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800a234:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a236:	bf1e      	ittt	ne
 800a238:	8b43      	ldrhne	r3, [r0, #26]
 800a23a:	f043 0310 	orrne.w	r3, r3, #16
 800a23e:	8343      	strhne	r3, [r0, #26]
}
 800a240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800a244:	f7ff bf44 	b.w	800a0d0 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <tcp_close+0x30>)
 800a24a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a24e:	4904      	ldr	r1, [pc, #16]	; (800a260 <tcp_close+0x34>)
 800a250:	4804      	ldr	r0, [pc, #16]	; (800a264 <tcp_close+0x38>)
 800a252:	f003 f9a9 	bl	800d5a8 <iprintf>
}
 800a256:	f06f 000f 	mvn.w	r0, #15
 800a25a:	bd08      	pop	{r3, pc}
 800a25c:	08019e68 	.word	0x08019e68
 800a260:	0801a364 	.word	0x0801a364
 800a264:	08017fc5 	.word	0x08017fc5

0800a268 <tcp_recv_null>:
{
 800a268:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a26a:	4608      	mov	r0, r1
{
 800a26c:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a26e:	b949      	cbnz	r1, 800a284 <tcp_recv_null+0x1c>
 800a270:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <tcp_recv_null+0x3c>)
 800a272:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a276:	490c      	ldr	r1, [pc, #48]	; (800a2a8 <tcp_recv_null+0x40>)
 800a278:	480c      	ldr	r0, [pc, #48]	; (800a2ac <tcp_recv_null+0x44>)
 800a27a:	f003 f995 	bl	800d5a8 <iprintf>
 800a27e:	f06f 000f 	mvn.w	r0, #15
}
 800a282:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800a284:	b13a      	cbz	r2, 800a296 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800a286:	8911      	ldrh	r1, [r2, #8]
 800a288:	f7ff fbdc 	bl	8009a44 <tcp_recved>
    pbuf_free(p);
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7fe ffe3 	bl	8009258 <pbuf_free>
  return ERR_OK;
 800a292:	2000      	movs	r0, #0
 800a294:	e7f5      	b.n	800a282 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800a296:	b91b      	cbnz	r3, 800a2a0 <tcp_recv_null+0x38>
}
 800a298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800a29c:	f7ff bfc6 	b.w	800a22c <tcp_close>
  return ERR_OK;
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	e7ee      	b.n	800a282 <tcp_recv_null+0x1a>
 800a2a4:	08019e68 	.word	0x08019e68
 800a2a8:	0801a37b 	.word	0x0801a37b
 800a2ac:	08017fc5 	.word	0x08017fc5

0800a2b0 <tcp_process_refused_data>:
{
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	b950      	cbnz	r0, 800a2cc <tcp_process_refused_data+0x1c>
 800a2b6:	f06f 050f 	mvn.w	r5, #15
 800a2ba:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <tcp_process_refused_data+0x80>)
 800a2bc:	f240 6209 	movw	r2, #1545	; 0x609
 800a2c0:	491c      	ldr	r1, [pc, #112]	; (800a334 <tcp_process_refused_data+0x84>)
 800a2c2:	481d      	ldr	r0, [pc, #116]	; (800a338 <tcp_process_refused_data+0x88>)
 800a2c4:	f003 f970 	bl	800d5a8 <iprintf>
}
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800a2cc:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800a2ce:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2d0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800a2d4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800a2d6:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2d8:	b1e5      	cbz	r5, 800a314 <tcp_process_refused_data+0x64>
 800a2da:	4601      	mov	r1, r0
 800a2dc:	4632      	mov	r2, r6
 800a2de:	6900      	ldr	r0, [r0, #16]
 800a2e0:	47a8      	blx	r5
 800a2e2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800a2e4:	b9e8      	cbnz	r0, 800a322 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a2e6:	06bb      	lsls	r3, r7, #26
 800a2e8:	d5ee      	bpl.n	800a2c8 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a2ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a2ec:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800a2f0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a2f4:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800a2f6:	bf1c      	itt	ne
 800a2f8:	3301      	addne	r3, #1
 800a2fa:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	d0e3      	beq.n	800a2c8 <tcp_process_refused_data+0x18>
 800a300:	2300      	movs	r3, #0
 800a302:	4621      	mov	r1, r4
 800a304:	6920      	ldr	r0, [r4, #16]
 800a306:	461a      	mov	r2, r3
 800a308:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800a30a:	300d      	adds	r0, #13
 800a30c:	d1dc      	bne.n	800a2c8 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800a30e:	f06f 050c 	mvn.w	r5, #12
 800a312:	e7d9      	b.n	800a2c8 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a314:	4601      	mov	r1, r0
 800a316:	462b      	mov	r3, r5
 800a318:	4632      	mov	r2, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff ffa4 	bl	800a268 <tcp_recv_null>
 800a320:	e7df      	b.n	800a2e2 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800a322:	350d      	adds	r5, #13
 800a324:	d0f3      	beq.n	800a30e <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800a326:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800a32a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800a32c:	e7cc      	b.n	800a2c8 <tcp_process_refused_data+0x18>
 800a32e:	bf00      	nop
 800a330:	08019e68 	.word	0x08019e68
 800a334:	0801a396 	.word	0x0801a396
 800a338:	08017fc5 	.word	0x08017fc5

0800a33c <tcp_fasttmr>:
{
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 800a33e:	4d18      	ldr	r5, [pc, #96]	; (800a3a0 <tcp_fasttmr+0x64>)
        tcp_active_pcbs_changed = 0;
 800a340:	2600      	movs	r6, #0
  ++tcp_timer_ctr;
 800a342:	7c2b      	ldrb	r3, [r5, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800a348:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 800a34a:	b904      	cbnz	r4, 800a34e <tcp_fasttmr+0x12>
}
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800a34e:	7c2b      	ldrb	r3, [r5, #16]
 800a350:	7fa2      	ldrb	r2, [r4, #30]
 800a352:	429a      	cmp	r2, r3
 800a354:	d022      	beq.n	800a39c <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 800a356:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800a358:	8b63      	ldrh	r3, [r4, #26]
 800a35a:	07d9      	lsls	r1, r3, #31
 800a35c:	d509      	bpl.n	800a372 <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 800a35e:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800a362:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a364:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800a366:	f002 f91f 	bl	800c5a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a36a:	8b63      	ldrh	r3, [r4, #26]
 800a36c:	f023 0303 	bic.w	r3, r3, #3
 800a370:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800a372:	8b63      	ldrh	r3, [r4, #26]
 800a374:	071a      	lsls	r2, r3, #28
 800a376:	d505      	bpl.n	800a384 <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a378:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800a37c:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a37e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800a380:	f7ff fa1c 	bl	80097bc <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800a384:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800a386:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 800a388:	b133      	cbz	r3, 800a398 <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 800a38a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800a38c:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 800a38e:	f7ff ff8f 	bl	800a2b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a392:	7c6b      	ldrb	r3, [r5, #17]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1d7      	bne.n	800a348 <tcp_fasttmr+0xc>
{
 800a398:	463c      	mov	r4, r7
 800a39a:	e7d6      	b.n	800a34a <tcp_fasttmr+0xe>
      pcb = pcb->next;
 800a39c:	68e7      	ldr	r7, [r4, #12]
 800a39e:	e7fb      	b.n	800a398 <tcp_fasttmr+0x5c>
 800a3a0:	2000e404 	.word	0x2000e404

0800a3a4 <tcp_tmr>:
{
 800a3a4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a3a6:	f7ff ffc9 	bl	800a33c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a3aa:	4a06      	ldr	r2, [pc, #24]	; (800a3c4 <tcp_tmr+0x20>)
 800a3ac:	7e13      	ldrb	r3, [r2, #24]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	7613      	strb	r3, [r2, #24]
 800a3b4:	07db      	lsls	r3, r3, #31
 800a3b6:	d503      	bpl.n	800a3c0 <tcp_tmr+0x1c>
}
 800a3b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800a3bc:	f7ff bc36 	b.w	8009c2c <tcp_slowtmr>
}
 800a3c0:	bd08      	pop	{r3, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2000e404 	.word	0x2000e404

0800a3c8 <tcp_shutdown>:
{
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	b948      	cbnz	r0, 800a3e4 <tcp_shutdown+0x1c>
 800a3d0:	4b16      	ldr	r3, [pc, #88]	; (800a42c <tcp_shutdown+0x64>)
 800a3d2:	f240 2207 	movw	r2, #519	; 0x207
 800a3d6:	4916      	ldr	r1, [pc, #88]	; (800a430 <tcp_shutdown+0x68>)
 800a3d8:	4816      	ldr	r0, [pc, #88]	; (800a434 <tcp_shutdown+0x6c>)
 800a3da:	f003 f8e5 	bl	800d5a8 <iprintf>
 800a3de:	f06f 000f 	mvn.w	r0, #15
}
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800a3e4:	7d03      	ldrb	r3, [r0, #20]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d018      	beq.n	800a41c <tcp_shutdown+0x54>
  if (shut_rx) {
 800a3ea:	b189      	cbz	r1, 800a410 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a3ec:	8b43      	ldrh	r3, [r0, #26]
 800a3ee:	f043 0310 	orr.w	r3, r3, #16
 800a3f2:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800a3f4:	b122      	cbz	r2, 800a400 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800a3f6:	2101      	movs	r1, #1
}
 800a3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800a3fc:	f7ff be68 	b.w	800a0d0 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800a400:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a402:	b908      	cbnz	r0, 800a408 <tcp_shutdown+0x40>
  return ERR_OK;
 800a404:	2000      	movs	r0, #0
 800a406:	e7ec      	b.n	800a3e2 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800a408:	f7fe ff26 	bl	8009258 <pbuf_free>
      pcb->refused_data = NULL;
 800a40c:	676c      	str	r4, [r5, #116]	; 0x74
 800a40e:	e7f9      	b.n	800a404 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800a410:	2a00      	cmp	r2, #0
 800a412:	d0f7      	beq.n	800a404 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800a414:	2b04      	cmp	r3, #4
 800a416:	d804      	bhi.n	800a422 <tcp_shutdown+0x5a>
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d804      	bhi.n	800a426 <tcp_shutdown+0x5e>
 800a41c:	f06f 000a 	mvn.w	r0, #10
 800a420:	e7df      	b.n	800a3e2 <tcp_shutdown+0x1a>
 800a422:	2b07      	cmp	r3, #7
 800a424:	d1fa      	bne.n	800a41c <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800a426:	2100      	movs	r1, #0
 800a428:	4628      	mov	r0, r5
 800a42a:	e7e5      	b.n	800a3f8 <tcp_shutdown+0x30>
 800a42c:	08019e68 	.word	0x08019e68
 800a430:	0801a3bc 	.word	0x0801a3bc
 800a434:	08017fc5 	.word	0x08017fc5

0800a438 <tcp_abandon>:
{
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	460e      	mov	r6, r1
 800a43e:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a440:	4604      	mov	r4, r0
 800a442:	b948      	cbnz	r0, 800a458 <tcp_abandon+0x20>
 800a444:	4b35      	ldr	r3, [pc, #212]	; (800a51c <tcp_abandon+0xe4>)
 800a446:	f240 223d 	movw	r2, #573	; 0x23d
 800a44a:	4935      	ldr	r1, [pc, #212]	; (800a520 <tcp_abandon+0xe8>)
 800a44c:	4835      	ldr	r0, [pc, #212]	; (800a524 <tcp_abandon+0xec>)
}
 800a44e:	b005      	add	sp, #20
 800a450:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a454:	f003 b8a8 	b.w	800d5a8 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a458:	7d03      	ldrb	r3, [r0, #20]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d106      	bne.n	800a46c <tcp_abandon+0x34>
 800a45e:	4b2f      	ldr	r3, [pc, #188]	; (800a51c <tcp_abandon+0xe4>)
 800a460:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a464:	4930      	ldr	r1, [pc, #192]	; (800a528 <tcp_abandon+0xf0>)
 800a466:	482f      	ldr	r0, [pc, #188]	; (800a524 <tcp_abandon+0xec>)
 800a468:	f003 f89e 	bl	800d5a8 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800a46c:	7d23      	ldrb	r3, [r4, #20]
 800a46e:	2b0a      	cmp	r3, #10
 800a470:	d109      	bne.n	800a486 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a472:	4621      	mov	r1, r4
 800a474:	482d      	ldr	r0, [pc, #180]	; (800a52c <tcp_abandon+0xf4>)
 800a476:	f7ff fdcf 	bl	800a018 <tcp_pcb_remove>
    tcp_free(pcb);
 800a47a:	4620      	mov	r0, r4
}
 800a47c:	b005      	add	sp, #20
 800a47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800a482:	f7ff b9d7 	b.w	8009834 <tcp_free>
    seqno = pcb->snd_nxt;
 800a486:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800a48a:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800a48e:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800a492:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800a496:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800a498:	b99b      	cbnz	r3, 800a4c2 <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 800a49a:	b13d      	cbz	r5, 800a4ac <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a49c:	4a24      	ldr	r2, [pc, #144]	; (800a530 <tcp_abandon+0xf8>)
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d106      	bne.n	800a4b2 <tcp_abandon+0x7a>
 800a4a4:	68e3      	ldr	r3, [r4, #12]
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	2500      	movs	r5, #0
 800a4aa:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800a4ac:	462e      	mov	r6, r5
 800a4ae:	e012      	b.n	800a4d6 <tcp_abandon+0x9e>
 800a4b0:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0f8      	beq.n	800a4a8 <tcp_abandon+0x70>
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	42a2      	cmp	r2, r4
 800a4ba:	d1f9      	bne.n	800a4b0 <tcp_abandon+0x78>
 800a4bc:	68e2      	ldr	r2, [r4, #12]
 800a4be:	60da      	str	r2, [r3, #12]
 800a4c0:	e7f2      	b.n	800a4a8 <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a4c2:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800a530 <tcp_abandon+0xf8>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	f10b 0008 	add.w	r0, fp, #8
 800a4cc:	f7ff fda4 	bl	800a018 <tcp_pcb_remove>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 800a4d6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a4d8:	b108      	cbz	r0, 800a4de <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 800a4da:	f7ff faff 	bl	8009adc <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a4de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a4e0:	b108      	cbz	r0, 800a4e6 <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 800a4e2:	f7ff fafb 	bl	8009adc <tcp_segs_free>
    if (send_rst) {
 800a4e6:	b156      	cbz	r6, 800a4fe <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a4e8:	8b23      	ldrh	r3, [r4, #24]
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800a4f4:	1d23      	adds	r3, r4, #4
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	f001 ffdd 	bl	800c4b8 <tcp_rst>
    tcp_free(pcb);
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7ff f998 	bl	8009834 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a504:	b13f      	cbz	r7, 800a516 <tcp_abandon+0xde>
 800a506:	f06f 010c 	mvn.w	r1, #12
 800a50a:	4640      	mov	r0, r8
 800a50c:	463b      	mov	r3, r7
}
 800a50e:	b005      	add	sp, #20
 800a510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a514:	4718      	bx	r3
}
 800a516:	b005      	add	sp, #20
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	08019e68 	.word	0x08019e68
 800a520:	0801a3d6 	.word	0x0801a3d6
 800a524:	08017fc5 	.word	0x08017fc5
 800a528:	0801a3ef 	.word	0x0801a3ef
 800a52c:	2000e418 	.word	0x2000e418
 800a530:	2000e404 	.word	0x2000e404

0800a534 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800a534:	2101      	movs	r1, #1
 800a536:	f7ff bf7f 	b.w	800a438 <tcp_abandon>
	...

0800a53c <tcp_accept_null>:
{
 800a53c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a53e:	460c      	mov	r4, r1
 800a540:	b931      	cbnz	r1, 800a550 <tcp_accept_null+0x14>
 800a542:	4b06      	ldr	r3, [pc, #24]	; (800a55c <tcp_accept_null+0x20>)
 800a544:	f240 320f 	movw	r2, #783	; 0x30f
 800a548:	4905      	ldr	r1, [pc, #20]	; (800a560 <tcp_accept_null+0x24>)
 800a54a:	4806      	ldr	r0, [pc, #24]	; (800a564 <tcp_accept_null+0x28>)
 800a54c:	f003 f82c 	bl	800d5a8 <iprintf>
  tcp_abort(pcb);
 800a550:	4620      	mov	r0, r4
 800a552:	f7ff ffef 	bl	800a534 <tcp_abort>
}
 800a556:	f06f 000c 	mvn.w	r0, #12
 800a55a:	bd10      	pop	{r4, pc}
 800a55c:	08019e68 	.word	0x08019e68
 800a560:	0801a420 	.word	0x0801a420
 800a564:	08017fc5 	.word	0x08017fc5

0800a568 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a56c:	4605      	mov	r5, r0
 800a56e:	b930      	cbnz	r0, 800a57e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800a570:	4b09      	ldr	r3, [pc, #36]	; (800a598 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800a572:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a576:	4909      	ldr	r1, [pc, #36]	; (800a59c <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800a578:	4809      	ldr	r0, [pc, #36]	; (800a5a0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800a57a:	f003 f815 	bl	800d5a8 <iprintf>

  while (pcb != NULL) {
 800a57e:	b904      	cbnz	r4, 800a582 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800a580:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800a586:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a588:	429a      	cmp	r2, r3
 800a58a:	d102      	bne.n	800a592 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7ff ffd1 	bl	800a534 <tcp_abort>
{
 800a592:	4634      	mov	r4, r6
 800a594:	e7f3      	b.n	800a57e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800a596:	bf00      	nop
 800a598:	08019e68 	.word	0x08019e68
 800a59c:	0801a43d 	.word	0x0801a43d
 800a5a0:	08017fc5 	.word	0x08017fc5

0800a5a4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <tcp_kill_state+0x34>)
  inactivity = 0;
 800a5a6:	2200      	movs	r2, #0
{
 800a5a8:	b430      	push	{r4, r5}
 800a5aa:	4604      	mov	r4, r0
  inactive = NULL;
 800a5ac:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5ae:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5b2:	b919      	cbnz	r1, 800a5bc <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800a5b4:	b168      	cbz	r0, 800a5d2 <tcp_kill_state+0x2e>
}
 800a5b6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800a5b8:	f7ff bf3e 	b.w	800a438 <tcp_abandon>
    if (pcb->state == state) {
 800a5bc:	7d0b      	ldrb	r3, [r1, #20]
 800a5be:	42a3      	cmp	r3, r4
 800a5c0:	d105      	bne.n	800a5ce <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5c2:	6a0b      	ldr	r3, [r1, #32]
 800a5c4:	1aeb      	subs	r3, r5, r3
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	bf24      	itt	cs
 800a5ca:	461a      	movcs	r2, r3
 800a5cc:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ce:	68c9      	ldr	r1, [r1, #12]
 800a5d0:	e7ef      	b.n	800a5b2 <tcp_kill_state+0xe>
}
 800a5d2:	bc30      	pop	{r4, r5}
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	2000e404 	.word	0x2000e404

0800a5dc <tcp_alloc>:
{
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7fe fba9 	bl	8008d38 <memp_malloc>
  if (pcb == NULL) {
 800a5e6:	4c3f      	ldr	r4, [pc, #252]	; (800a6e4 <tcp_alloc+0x108>)
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	bb98      	cbnz	r0, 800a654 <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a5ec:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d153      	bne.n	800a69a <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5f2:	6963      	ldr	r3, [r4, #20]
  inactivity = 0;
 800a5f4:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5f6:	68e6      	ldr	r6, [r4, #12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d159      	bne.n	800a6b0 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800a5fc:	b108      	cbz	r0, 800a602 <tcp_alloc+0x26>
    tcp_abort(inactive);
 800a5fe:	f7ff ff99 	bl	800a534 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a602:	2001      	movs	r0, #1
 800a604:	f7fe fb98 	bl	8008d38 <memp_malloc>
    if (pcb == NULL) {
 800a608:	4603      	mov	r3, r0
 800a60a:	bb18      	cbnz	r0, 800a654 <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800a60c:	2009      	movs	r0, #9
 800a60e:	f7ff ffc9 	bl	800a5a4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a612:	2001      	movs	r0, #1
 800a614:	f7fe fb90 	bl	8008d38 <memp_malloc>
      if (pcb == NULL) {
 800a618:	4603      	mov	r3, r0
 800a61a:	b9d8      	cbnz	r0, 800a654 <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800a61c:	2008      	movs	r0, #8
 800a61e:	f7ff ffc1 	bl	800a5a4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a622:	2001      	movs	r0, #1
 800a624:	f7fe fb88 	bl	8008d38 <memp_malloc>
        if (pcb == NULL) {
 800a628:	4603      	mov	r3, r0
 800a62a:	b998      	cbnz	r0, 800a654 <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a62c:	062a      	lsls	r2, r5, #24
 800a62e:	d447      	bmi.n	800a6c0 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800a630:	b15d      	cbz	r5, 800a64a <tcp_alloc+0x6e>
 800a632:	4629      	mov	r1, r5
  mprio--;
 800a634:	3901      	subs	r1, #1
  inactivity = 0;
 800a636:	2000      	movs	r0, #0
  mprio--;
 800a638:	b2c9      	uxtb	r1, r1
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a63a:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a63e:	2a00      	cmp	r2, #0
 800a640:	d140      	bne.n	800a6c4 <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800a642:	b113      	cbz	r3, 800a64a <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff ff75 	bl	800a534 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a64a:	2001      	movs	r0, #1
 800a64c:	f7fe fb74 	bl	8008d38 <memp_malloc>
  if (pcb != NULL) {
 800a650:	4603      	mov	r3, r0
 800a652:	b300      	cbz	r0, 800a696 <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a654:	2298      	movs	r2, #152	; 0x98
 800a656:	4618      	mov	r0, r3
 800a658:	2100      	movs	r1, #0
 800a65a:	f002 ff9d 	bl	800d598 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800a65e:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a662:	4603      	mov	r3, r0
    pcb->prio = prio;
 800a664:	7545      	strb	r5, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a666:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a66a:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <tcp_alloc+0x10c>)
 800a66c:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a66e:	22ff      	movs	r2, #255	; 0xff
 800a670:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a672:	2206      	movs	r2, #6
 800a674:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a678:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800a67a:	4a1c      	ldr	r2, [pc, #112]	; (800a6ec <tcp_alloc+0x110>)
 800a67c:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800a67e:	68e2      	ldr	r2, [r4, #12]
 800a680:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a682:	7c22      	ldrb	r2, [r4, #16]
 800a684:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800a686:	4a1a      	ldr	r2, [pc, #104]	; (800a6f0 <tcp_alloc+0x114>)
 800a688:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <tcp_alloc+0x118>)
 800a68c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a690:	4a19      	ldr	r2, [pc, #100]	; (800a6f8 <tcp_alloc+0x11c>)
 800a692:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800a696:	4618      	mov	r0, r3
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800a69a:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800a69c:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800a69e:	0719      	lsls	r1, r3, #28
 800a6a0:	d504      	bpl.n	800a6ac <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6a2:	f023 0308 	bic.w	r3, r3, #8
 800a6a6:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800a6a8:	f7ff f888 	bl	80097bc <tcp_close_shutdown_fin>
{
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	e79e      	b.n	800a5ee <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a6b0:	6a1a      	ldr	r2, [r3, #32]
 800a6b2:	1ab2      	subs	r2, r6, r2
 800a6b4:	428a      	cmp	r2, r1
 800a6b6:	bf24      	itt	cs
 800a6b8:	4618      	movcs	r0, r3
 800a6ba:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	e79b      	b.n	800a5f8 <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a6c0:	217f      	movs	r1, #127	; 0x7f
 800a6c2:	e7b7      	b.n	800a634 <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800a6c4:	f892 c015 	ldrb.w	ip, [r2, #21]
 800a6c8:	458c      	cmp	ip, r1
 800a6ca:	d304      	bcc.n	800a6d6 <tcp_alloc+0xfa>
 800a6cc:	d107      	bne.n	800a6de <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a6ce:	6a16      	ldr	r6, [r2, #32]
 800a6d0:	1bbe      	subs	r6, r7, r6
 800a6d2:	4286      	cmp	r6, r0
 800a6d4:	d303      	bcc.n	800a6de <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800a6d6:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800a6d8:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800a6da:	4613      	mov	r3, r2
 800a6dc:	1a38      	subs	r0, r7, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6de:	68d2      	ldr	r2, [r2, #12]
 800a6e0:	e7ad      	b.n	800a63e <tcp_alloc+0x62>
 800a6e2:	bf00      	nop
 800a6e4:	2000e404 	.word	0x2000e404
 800a6e8:	0b680b68 	.word	0x0b680b68
 800a6ec:	0218ffff 	.word	0x0218ffff
 800a6f0:	16d00001 	.word	0x16d00001
 800a6f4:	0800a269 	.word	0x0800a269
 800a6f8:	006ddd00 	.word	0x006ddd00

0800a6fc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a6fc:	2040      	movs	r0, #64	; 0x40
 800a6fe:	f7ff bf6d 	b.w	800a5dc <tcp_alloc>
	...

0800a704 <tcp_next_iss>:
{
 800a704:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a706:	b930      	cbnz	r0, 800a716 <tcp_next_iss+0x12>
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <tcp_next_iss+0x20>)
 800a70a:	f640 02af 	movw	r2, #2223	; 0x8af
 800a70e:	4906      	ldr	r1, [pc, #24]	; (800a728 <tcp_next_iss+0x24>)
 800a710:	4806      	ldr	r0, [pc, #24]	; (800a72c <tcp_next_iss+0x28>)
 800a712:	f002 ff49 	bl	800d5a8 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800a716:	4b06      	ldr	r3, [pc, #24]	; (800a730 <tcp_next_iss+0x2c>)
 800a718:	4a06      	ldr	r2, [pc, #24]	; (800a734 <tcp_next_iss+0x30>)
 800a71a:	6858      	ldr	r0, [r3, #4]
 800a71c:	68d2      	ldr	r2, [r2, #12]
 800a71e:	4410      	add	r0, r2
 800a720:	6058      	str	r0, [r3, #4]
}
 800a722:	bd08      	pop	{r3, pc}
 800a724:	08019e68 	.word	0x08019e68
 800a728:	0801a471 	.word	0x0801a471
 800a72c:	08017fc5 	.word	0x08017fc5
 800a730:	20000034 	.word	0x20000034
 800a734:	2000e404 	.word	0x2000e404

0800a738 <tcp_eff_send_mss_netif>:
{
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4604      	mov	r4, r0
 800a73c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a73e:	b932      	cbnz	r2, 800a74e <tcp_eff_send_mss_netif+0x16>
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <tcp_eff_send_mss_netif+0x30>)
 800a742:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a746:	4909      	ldr	r1, [pc, #36]	; (800a76c <tcp_eff_send_mss_netif+0x34>)
 800a748:	4809      	ldr	r0, [pc, #36]	; (800a770 <tcp_eff_send_mss_netif+0x38>)
 800a74a:	f002 ff2d 	bl	800d5a8 <iprintf>
    if (outif == NULL) {
 800a74e:	b14d      	cbz	r5, 800a764 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800a750:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800a752:	b13b      	cbz	r3, 800a764 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a754:	2b28      	cmp	r3, #40	; 0x28
 800a756:	bf8a      	itet	hi
 800a758:	3b28      	subhi	r3, #40	; 0x28
 800a75a:	2300      	movls	r3, #0
 800a75c:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a75e:	429c      	cmp	r4, r3
 800a760:	bf28      	it	cs
 800a762:	461c      	movcs	r4, r3
}
 800a764:	4620      	mov	r0, r4
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	08019e68 	.word	0x08019e68
 800a76c:	0801a48b 	.word	0x0801a48b
 800a770:	08017fc5 	.word	0x08017fc5

0800a774 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a778:	4604      	mov	r4, r0
 800a77a:	b170      	cbz	r0, 800a79a <tcp_netif_ip_addr_changed+0x26>
 800a77c:	6803      	ldr	r3, [r0, #0]
 800a77e:	b163      	cbz	r3, 800a79a <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a780:	4e0a      	ldr	r6, [pc, #40]	; (800a7ac <tcp_netif_ip_addr_changed+0x38>)
 800a782:	68b1      	ldr	r1, [r6, #8]
 800a784:	f7ff fef0 	bl	800a568 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a788:	6831      	ldr	r1, [r6, #0]
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7ff feec 	bl	800a568 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a790:	b11d      	cbz	r5, 800a79a <tcp_netif_ip_addr_changed+0x26>
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	b10b      	cbz	r3, 800a79a <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a796:	6873      	ldr	r3, [r6, #4]
 800a798:	b903      	cbnz	r3, 800a79c <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a79c:	6819      	ldr	r1, [r3, #0]
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a7a2:	bf04      	itt	eq
 800a7a4:	682a      	ldreq	r2, [r5, #0]
 800a7a6:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	e7f5      	b.n	800a798 <tcp_netif_ip_addr_changed+0x24>
 800a7ac:	2000e404 	.word	0x2000e404

0800a7b0 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a7b0:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <tcp_get_next_optbyte+0x24>)
 800a7b2:	8813      	ldrh	r3, [r2, #0]
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a7b8:	6851      	ldr	r1, [r2, #4]
 800a7ba:	b111      	cbz	r1, 800a7c2 <tcp_get_next_optbyte+0x12>
 800a7bc:	8910      	ldrh	r0, [r2, #8]
 800a7be:	4283      	cmp	r3, r0
 800a7c0:	d203      	bcs.n	800a7ca <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800a7c2:	68d2      	ldr	r2, [r2, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	7d18      	ldrb	r0, [r3, #20]
 800a7c8:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a7ca:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	2000e420 	.word	0x2000e420

0800a7d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a7dc:	4606      	mov	r6, r0
 800a7de:	b930      	cbnz	r0, 800a7ee <tcp_parseopt+0x16>
 800a7e0:	4b1e      	ldr	r3, [pc, #120]	; (800a85c <tcp_parseopt+0x84>)
 800a7e2:	f240 727d 	movw	r2, #1917	; 0x77d
 800a7e6:	491e      	ldr	r1, [pc, #120]	; (800a860 <tcp_parseopt+0x88>)
 800a7e8:	481e      	ldr	r0, [pc, #120]	; (800a864 <tcp_parseopt+0x8c>)
 800a7ea:	f002 fedd 	bl	800d5a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a7ee:	4d1e      	ldr	r5, [pc, #120]	; (800a868 <tcp_parseopt+0x90>)
 800a7f0:	8a2f      	ldrh	r7, [r5, #16]
 800a7f2:	b17f      	cbz	r7, 800a814 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a7f4:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a7f6:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800a7fa:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a7fe:	802b      	strh	r3, [r5, #0]
 800a800:	882b      	ldrh	r3, [r5, #0]
 800a802:	42bb      	cmp	r3, r7
 800a804:	d206      	bcs.n	800a814 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800a806:	f7ff ffd3 	bl	800a7b0 <tcp_get_next_optbyte>
      switch (opt) {
 800a80a:	2801      	cmp	r0, #1
 800a80c:	d0f8      	beq.n	800a800 <tcp_parseopt+0x28>
 800a80e:	2802      	cmp	r0, #2
 800a810:	d002      	beq.n	800a818 <tcp_parseopt+0x40>
 800a812:	b9c8      	cbnz	r0, 800a848 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800a814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a818:	f7ff ffca 	bl	800a7b0 <tcp_get_next_optbyte>
 800a81c:	2804      	cmp	r0, #4
 800a81e:	d1f9      	bne.n	800a814 <tcp_parseopt+0x3c>
 800a820:	882b      	ldrh	r3, [r5, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	42bb      	cmp	r3, r7
 800a826:	daf5      	bge.n	800a814 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a828:	f7ff ffc2 	bl	800a7b0 <tcp_get_next_optbyte>
 800a82c:	0200      	lsls	r0, r0, #8
 800a82e:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800a830:	f7ff ffbe 	bl	800a7b0 <tcp_get_next_optbyte>
 800a834:	ea44 0300 	orr.w	r3, r4, r0
 800a838:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a83a:	1e5a      	subs	r2, r3, #1
 800a83c:	b292      	uxth	r2, r2
 800a83e:	4542      	cmp	r2, r8
 800a840:	bf88      	it	hi
 800a842:	464b      	movhi	r3, r9
 800a844:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800a846:	e7db      	b.n	800a800 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800a848:	f7ff ffb2 	bl	800a7b0 <tcp_get_next_optbyte>
          if (data < 2) {
 800a84c:	2801      	cmp	r0, #1
 800a84e:	d9e1      	bls.n	800a814 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800a850:	882b      	ldrh	r3, [r5, #0]
 800a852:	3b02      	subs	r3, #2
 800a854:	4418      	add	r0, r3
 800a856:	8028      	strh	r0, [r5, #0]
 800a858:	e7d2      	b.n	800a800 <tcp_parseopt+0x28>
 800a85a:	bf00      	nop
 800a85c:	0801a571 	.word	0x0801a571
 800a860:	0801a5e1 	.word	0x0801a5e1
 800a864:	08017fc5 	.word	0x08017fc5
 800a868:	2000e420 	.word	0x2000e420

0800a86c <tcp_input_delayed_close>:
{
 800a86c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a86e:	4604      	mov	r4, r0
 800a870:	b930      	cbnz	r0, 800a880 <tcp_input_delayed_close+0x14>
 800a872:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <tcp_input_delayed_close+0x44>)
 800a874:	f240 225a 	movw	r2, #602	; 0x25a
 800a878:	490e      	ldr	r1, [pc, #56]	; (800a8b4 <tcp_input_delayed_close+0x48>)
 800a87a:	480f      	ldr	r0, [pc, #60]	; (800a8b8 <tcp_input_delayed_close+0x4c>)
 800a87c:	f002 fe94 	bl	800d5a8 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800a880:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <tcp_input_delayed_close+0x50>)
 800a882:	7c98      	ldrb	r0, [r3, #18]
 800a884:	f010 0010 	ands.w	r0, r0, #16
 800a888:	d011      	beq.n	800a8ae <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a88a:	8b63      	ldrh	r3, [r4, #26]
 800a88c:	06db      	lsls	r3, r3, #27
 800a88e:	d406      	bmi.n	800a89e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a890:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a894:	b11b      	cbz	r3, 800a89e <tcp_input_delayed_close+0x32>
 800a896:	f06f 010e 	mvn.w	r1, #14
 800a89a:	6920      	ldr	r0, [r4, #16]
 800a89c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4807      	ldr	r0, [pc, #28]	; (800a8c0 <tcp_input_delayed_close+0x54>)
 800a8a2:	f7ff fbb9 	bl	800a018 <tcp_pcb_remove>
    tcp_free(pcb);
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7fe ffc4 	bl	8009834 <tcp_free>
 800a8ac:	2001      	movs	r0, #1
}
 800a8ae:	bd10      	pop	{r4, pc}
 800a8b0:	0801a571 	.word	0x0801a571
 800a8b4:	0801a5fb 	.word	0x0801a5fb
 800a8b8:	08017fc5 	.word	0x08017fc5
 800a8bc:	2000e420 	.word	0x2000e420
 800a8c0:	2000e40c 	.word	0x2000e40c

0800a8c4 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800a8cc:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a8ce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800a980 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a8d2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800a978 <tcp_free_acked_segments.constprop.0+0xb4>
  while (seg_list != NULL &&
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	d03b      	beq.n	800a952 <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	6858      	ldr	r0, [r3, #4]
 800a8de:	f7fd fefe 	bl	80086de <lwip_htonl>
 800a8e2:	68e3      	ldr	r3, [r4, #12]
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	8925      	ldrh	r5, [r4, #8]
 800a8e8:	8998      	ldrh	r0, [r3, #12]
 800a8ea:	f7fd fef5 	bl	80086d8 <lwip_htons>
 800a8ee:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a8f2:	f010 0003 	ands.w	r0, r0, #3
 800a8f6:	eba5 0303 	sub.w	r3, r5, r3
 800a8fa:	bf18      	it	ne
 800a8fc:	2001      	movne	r0, #1
 800a8fe:	eb03 050a 	add.w	r5, r3, sl
 800a902:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800a904:	2d00      	cmp	r5, #0
 800a906:	dc25      	bgt.n	800a954 <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800a908:	e9d4 a000 	ldrd	sl, r0, [r4]
 800a90c:	f7fe fde0 	bl	80094d0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a910:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800a914:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a916:	4283      	cmp	r3, r0
 800a918:	d206      	bcs.n	800a928 <tcp_free_acked_segments.constprop.0+0x64>
 800a91a:	464b      	mov	r3, r9
 800a91c:	f240 4257 	movw	r2, #1111	; 0x457
 800a920:	4913      	ldr	r1, [pc, #76]	; (800a970 <tcp_free_acked_segments.constprop.0+0xac>)
 800a922:	4814      	ldr	r0, [pc, #80]	; (800a974 <tcp_free_acked_segments.constprop.0+0xb0>)
 800a924:	f002 fe40 	bl	800d5a8 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a928:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a92c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800a930:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a932:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800a934:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a936:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a938:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a93c:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800a940:	f7ff f8be 	bl	8009ac0 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a944:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a948:	b17b      	cbz	r3, 800a96a <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a94a:	f1ba 0f00 	cmp.w	sl, #0
 800a94e:	d10c      	bne.n	800a96a <tcp_free_acked_segments.constprop.0+0xa6>
 800a950:	b11f      	cbz	r7, 800a95a <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800a952:	2400      	movs	r4, #0
}
 800a954:	4620      	mov	r0, r4
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a95a:	4b07      	ldr	r3, [pc, #28]	; (800a978 <tcp_free_acked_segments.constprop.0+0xb4>)
 800a95c:	f240 4261 	movw	r2, #1121	; 0x461
 800a960:	4906      	ldr	r1, [pc, #24]	; (800a97c <tcp_free_acked_segments.constprop.0+0xb8>)
 800a962:	4804      	ldr	r0, [pc, #16]	; (800a974 <tcp_free_acked_segments.constprop.0+0xb0>)
 800a964:	f002 fe20 	bl	800d5a8 <iprintf>
  while (seg_list != NULL &&
 800a968:	e7f3      	b.n	800a952 <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800a96a:	4654      	mov	r4, sl
 800a96c:	e7b3      	b.n	800a8d6 <tcp_free_acked_segments.constprop.0+0x12>
 800a96e:	bf00      	nop
 800a970:	0801a620 	.word	0x0801a620
 800a974:	08017fc5 	.word	0x08017fc5
 800a978:	0801a571 	.word	0x0801a571
 800a97c:	0801a648 	.word	0x0801a648
 800a980:	2000e420 	.word	0x2000e420

0800a984 <tcp_receive>:
{
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a986:	4604      	mov	r4, r0
 800a988:	b930      	cbnz	r0, 800a998 <tcp_receive+0x14>
 800a98a:	4b35      	ldr	r3, [pc, #212]	; (800aa60 <tcp_receive+0xdc>)
 800a98c:	f240 427b 	movw	r2, #1147	; 0x47b
 800a990:	4934      	ldr	r1, [pc, #208]	; (800aa64 <tcp_receive+0xe0>)
 800a992:	4835      	ldr	r0, [pc, #212]	; (800aa68 <tcp_receive+0xe4>)
 800a994:	f002 fe08 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a998:	7d23      	ldrb	r3, [r4, #20]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d806      	bhi.n	800a9ac <tcp_receive+0x28>
 800a99e:	4b30      	ldr	r3, [pc, #192]	; (800aa60 <tcp_receive+0xdc>)
 800a9a0:	f240 427c 	movw	r2, #1148	; 0x47c
 800a9a4:	4931      	ldr	r1, [pc, #196]	; (800aa6c <tcp_receive+0xe8>)
 800a9a6:	4830      	ldr	r0, [pc, #192]	; (800aa68 <tcp_receive+0xe4>)
 800a9a8:	f002 fdfe 	bl	800d5a8 <iprintf>
  if (flags & TCP_ACK) {
 800a9ac:	4d30      	ldr	r5, [pc, #192]	; (800aa70 <tcp_receive+0xec>)
 800a9ae:	7f2b      	ldrb	r3, [r5, #28]
 800a9b0:	06de      	lsls	r6, r3, #27
 800a9b2:	f140 8088 	bpl.w	800aac6 <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a9b6:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a9b8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a9bc:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a9be:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800a9c2:	1af7      	subs	r7, r6, r3
 800a9c4:	2f00      	cmp	r7, #0
 800a9c6:	db0a      	blt.n	800a9de <tcp_receive+0x5a>
 800a9c8:	429e      	cmp	r6, r3
 800a9ca:	d102      	bne.n	800a9d2 <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a9cc:	1a86      	subs	r6, r0, r2
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	db05      	blt.n	800a9de <tcp_receive+0x5a>
 800a9d2:	4290      	cmp	r0, r2
 800a9d4:	d110      	bne.n	800a9f8 <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a9d6:	68ee      	ldr	r6, [r5, #12]
 800a9d8:	89f6      	ldrh	r6, [r6, #14]
 800a9da:	428e      	cmp	r6, r1
 800a9dc:	d90c      	bls.n	800a9f8 <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a9de:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a9e0:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a9e4:	89f6      	ldrh	r6, [r6, #14]
 800a9e6:	b2b7      	uxth	r7, r6
 800a9e8:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a9ec:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800a9ee:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a9f2:	bf38      	it	cc
 800a9f4:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a9f8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800a9fa:	1b93      	subs	r3, r2, r6
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f300 813a 	bgt.w	800ac76 <tcp_receive+0x2f2>
      if (tcplen == 0) {
 800aa02:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 8132 	bne.w	800ac6e <tcp_receive+0x2ea>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aa0a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800aa0e:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aa10:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800aa12:	443b      	add	r3, r7
 800aa14:	428b      	cmp	r3, r1
 800aa16:	f040 812a 	bne.w	800ac6e <tcp_receive+0x2ea>
          if (pcb->rtime >= 0) {
 800aa1a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f2c0 8125 	blt.w	800ac6e <tcp_receive+0x2ea>
            if (pcb->lastack == ackno) {
 800aa24:	4296      	cmp	r6, r2
 800aa26:	f040 8122 	bne.w	800ac6e <tcp_receive+0x2ea>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800aa2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa2e:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800aa30:	bf1c      	itt	ne
 800aa32:	3301      	addne	r3, #1
 800aa34:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800aa38:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d919      	bls.n	800aa74 <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aa40:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800aa44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aa48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800aa4a:	4413      	add	r3, r2
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	bf88      	it	hi
 800aa52:	460b      	movhi	r3, r1
 800aa54:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f001 fcf9 	bl	800c450 <tcp_rexmit_fast>
      if (!found_dupack) {
 800aa5e:	e00a      	b.n	800aa76 <tcp_receive+0xf2>
 800aa60:	0801a571 	.word	0x0801a571
 800aa64:	0801a668 	.word	0x0801a668
 800aa68:	08017fc5 	.word	0x08017fc5
 800aa6c:	0801a681 	.word	0x0801a681
 800aa70:	2000e420 	.word	0x2000e420
              if (pcb->dupacks >= 3) {
 800aa74:	d0f0      	beq.n	800aa58 <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800aa76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa78:	b329      	cbz	r1, 800aac6 <tcp_receive+0x142>
 800aa7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa7c:	69aa      	ldr	r2, [r5, #24]
 800aa7e:	1a9b      	subs	r3, r3, r2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da20      	bge.n	800aac6 <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aa84:	4b9b      	ldr	r3, [pc, #620]	; (800acf4 <tcp_receive+0x370>)
 800aa86:	b289      	uxth	r1, r1
 800aa88:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800aa8a:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aa8e:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800aa90:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800aa94:	1a12      	subs	r2, r2, r0
 800aa96:	b216      	sxth	r6, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800aa98:	fa13 f282 	uxtah	r2, r3, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800aa9c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      if (m < 0) {
 800aaa0:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800aaa2:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800aaa4:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
        m = (s16_t) - m;
 800aaa8:	bfb8      	it	lt
 800aaaa:	1bc9      	sublt	r1, r1, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800aaac:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800aaae:	bfbc      	itt	lt
 800aab0:	1809      	addlt	r1, r1, r0
 800aab2:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800aab4:	4433      	add	r3, r6
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aaba:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800aabe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800aac6:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aac8:	6a2b      	ldr	r3, [r5, #32]
 800aaca:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800aacc:	2800      	cmp	r0, #0
 800aace:	f000 8184 	beq.w	800adda <tcp_receive+0x456>
 800aad2:	7d21      	ldrb	r1, [r4, #20]
 800aad4:	2906      	cmp	r1, #6
 800aad6:	f200 8180 	bhi.w	800adda <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aada:	1ad7      	subs	r7, r2, r3
 800aadc:	2f01      	cmp	r7, #1
 800aade:	f100 816b 	bmi.w	800adb8 <tcp_receive+0x434>
 800aae2:	f1c3 0101 	rsb	r1, r3, #1
 800aae6:	1a09      	subs	r1, r1, r0
 800aae8:	4411      	add	r1, r2
 800aaea:	2900      	cmp	r1, #0
 800aaec:	f300 8164 	bgt.w	800adb8 <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800aaf0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aaf2:	b936      	cbnz	r6, 800ab02 <tcp_receive+0x17e>
 800aaf4:	4b80      	ldr	r3, [pc, #512]	; (800acf8 <tcp_receive+0x374>)
 800aaf6:	f240 5294 	movw	r2, #1428	; 0x594
 800aafa:	4980      	ldr	r1, [pc, #512]	; (800acfc <tcp_receive+0x378>)
 800aafc:	4880      	ldr	r0, [pc, #512]	; (800ad00 <tcp_receive+0x37c>)
 800aafe:	f002 fd53 	bl	800d5a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ab02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ab06:	429f      	cmp	r7, r3
 800ab08:	d906      	bls.n	800ab18 <tcp_receive+0x194>
 800ab0a:	4b7b      	ldr	r3, [pc, #492]	; (800acf8 <tcp_receive+0x374>)
 800ab0c:	f240 5295 	movw	r2, #1429	; 0x595
 800ab10:	497c      	ldr	r1, [pc, #496]	; (800ad04 <tcp_receive+0x380>)
 800ab12:	487b      	ldr	r0, [pc, #492]	; (800ad00 <tcp_receive+0x37c>)
 800ab14:	f002 fd48 	bl	800d5a8 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ab18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800ab1a:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ab1c:	891b      	ldrh	r3, [r3, #8]
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	d206      	bcs.n	800ab30 <tcp_receive+0x1ac>
 800ab22:	4b75      	ldr	r3, [pc, #468]	; (800acf8 <tcp_receive+0x374>)
 800ab24:	f240 5297 	movw	r2, #1431	; 0x597
 800ab28:	4977      	ldr	r1, [pc, #476]	; (800ad08 <tcp_receive+0x384>)
 800ab2a:	4875      	ldr	r0, [pc, #468]	; (800ad00 <tcp_receive+0x37c>)
 800ab2c:	f002 fd3c 	bl	800d5a8 <iprintf>
      inseg.len -= off;
 800ab30:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800ab32:	2100      	movs	r1, #0
      inseg.len -= off;
 800ab34:	1bdb      	subs	r3, r3, r7
 800ab36:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ab38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ab3a:	891b      	ldrh	r3, [r3, #8]
 800ab3c:	1bdb      	subs	r3, r3, r7
 800ab3e:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800ab40:	8972      	ldrh	r2, [r6, #10]
 800ab42:	42ba      	cmp	r2, r7
 800ab44:	f0c0 8132 	bcc.w	800adac <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7fe fb50 	bl	80091f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ab50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab52:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ab54:	622b      	str	r3, [r5, #32]
 800ab56:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ab58:	6a29      	ldr	r1, [r5, #32]
 800ab5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab5c:	1a8b      	subs	r3, r1, r2
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f2c0 8136 	blt.w	800add0 <tcp_receive+0x44c>
 800ab64:	1c4b      	adds	r3, r1, #1
 800ab66:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	1a1b      	subs	r3, r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f300 812f 	bgt.w	800add0 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800ab72:	4291      	cmp	r1, r2
 800ab74:	f040 812c 	bne.w	800add0 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800ab78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ab7a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800ab7c:	8998      	ldrh	r0, [r3, #12]
 800ab7e:	f7fd fdab 	bl	80086d8 <lwip_htons>
 800ab82:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800ab86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800ab88:	bf18      	it	ne
 800ab8a:	2001      	movne	r0, #1
 800ab8c:	4430      	add	r0, r6
 800ab8e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800ab90:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800ab92:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800ab94:	d23d      	bcs.n	800ac12 <tcp_receive+0x28e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab96:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ab98:	8998      	ldrh	r0, [r3, #12]
 800ab9a:	f7fd fd9d 	bl	80086d8 <lwip_htons>
 800ab9e:	07c6      	lsls	r6, r0, #31
 800aba0:	d50d      	bpl.n	800abbe <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aba2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aba4:	899e      	ldrh	r6, [r3, #12]
 800aba6:	4630      	mov	r0, r6
 800aba8:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800abac:	f7fd fd94 	bl	80086d8 <lwip_htons>
 800abb0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800abb4:	f7fd fd90 	bl	80086d8 <lwip_htons>
 800abb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800abba:	4306      	orrs	r6, r0
 800abbc:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800abbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800abc0:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800abc2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800abc4:	8998      	ldrh	r0, [r3, #12]
 800abc6:	f7fd fd87 	bl	80086d8 <lwip_htons>
 800abca:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800abcc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800abce:	bf42      	ittt	mi
 800abd0:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800abd2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800abd6:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800abd8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800abda:	f7fe fc21 	bl	8009420 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800abde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800abe0:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800abe2:	8998      	ldrh	r0, [r3, #12]
 800abe4:	f7fd fd78 	bl	80086d8 <lwip_htons>
 800abe8:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800abec:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800abee:	bf18      	it	ne
 800abf0:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800abf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800abf4:	4430      	add	r0, r6
 800abf6:	b280      	uxth	r0, r0
 800abf8:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800abfa:	4418      	add	r0, r3
 800abfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800abfe:	4413      	add	r3, r2
 800ac00:	4298      	cmp	r0, r3
 800ac02:	d006      	beq.n	800ac12 <tcp_receive+0x28e>
 800ac04:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <tcp_receive+0x374>)
 800ac06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ac0a:	4940      	ldr	r1, [pc, #256]	; (800ad0c <tcp_receive+0x388>)
 800ac0c:	483c      	ldr	r0, [pc, #240]	; (800ad00 <tcp_receive+0x37c>)
 800ac0e:	f002 fccb 	bl	800d5a8 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800ac12:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800ac14:	6a2b      	ldr	r3, [r5, #32]
 800ac16:	4413      	add	r3, r2
 800ac18:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ac1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d206      	bcs.n	800ac2e <tcp_receive+0x2aa>
 800ac20:	4b35      	ldr	r3, [pc, #212]	; (800acf8 <tcp_receive+0x374>)
 800ac22:	f240 6207 	movw	r2, #1543	; 0x607
 800ac26:	493a      	ldr	r1, [pc, #232]	; (800ad10 <tcp_receive+0x38c>)
 800ac28:	4835      	ldr	r0, [pc, #212]	; (800ad00 <tcp_receive+0x37c>)
 800ac2a:	f002 fcbd 	bl	800d5a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ac2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ac30:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800ac32:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800ac34:	1a9b      	subs	r3, r3, r2
 800ac36:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ac38:	f7fe fece 	bl	80099d8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ac3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ac3e:	891a      	ldrh	r2, [r3, #8]
 800ac40:	b112      	cbz	r2, 800ac48 <tcp_receive+0x2c4>
          recv_data = inseg.p;
 800ac42:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800ac44:	2300      	movs	r3, #0
 800ac46:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ac48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ac4a:	8998      	ldrh	r0, [r3, #12]
 800ac4c:	f7fd fd44 	bl	80086d8 <lwip_htons>
 800ac50:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800ac52:	bf42      	ittt	mi
 800ac54:	7cab      	ldrbmi	r3, [r5, #18]
 800ac56:	f043 0320 	orrmi.w	r3, r3, #32
 800ac5a:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800ac5c:	8b63      	ldrh	r3, [r4, #26]
 800ac5e:	07da      	lsls	r2, r3, #31
 800ac60:	f140 80b2 	bpl.w	800adc8 <tcp_receive+0x444>
 800ac64:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800ac68:	f043 0302 	orr.w	r3, r3, #2
 800ac6c:	e0ae      	b.n	800adcc <tcp_receive+0x448>
        pcb->dupacks = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac74:	e6ff      	b.n	800aa76 <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac76:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ac78:	1a51      	subs	r1, r2, r1
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	f300 8092 	bgt.w	800ada4 <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800ac80:	8b61      	ldrh	r1, [r4, #26]
 800ac82:	0748      	lsls	r0, r1, #29
 800ac84:	d509      	bpl.n	800ac9a <tcp_receive+0x316>
        tcp_clear_flags(pcb, TF_INFR);
 800ac86:	f021 0104 	bic.w	r1, r1, #4
 800ac8a:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800ac8c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800ac90:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ac94:	2100      	movs	r1, #0
 800ac96:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ac9a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800ac9e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800aca0:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aca2:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800aca6:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aca8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800acac:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800acae:	f04f 0100 	mov.w	r1, #0
 800acb2:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800acb6:	d937      	bls.n	800ad28 <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800acb8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800acbc:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800acbe:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800acc2:	4291      	cmp	r1, r2
 800acc4:	d926      	bls.n	800ad14 <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800acc6:	8b61      	ldrh	r1, [r4, #26]
 800acc8:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800accc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800acce:	bf14      	ite	ne
 800acd0:	2001      	movne	r0, #1
 800acd2:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800acd4:	fb11 f100 	smulbb	r1, r1, r0
 800acd8:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800acda:	4299      	cmp	r1, r3
 800acdc:	bf94      	ite	ls
 800acde:	1850      	addls	r0, r2, r1
 800ace0:	18d0      	addhi	r0, r2, r3
 800ace2:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d901      	bls.n	800acec <tcp_receive+0x368>
          TCP_WND_INC(pcb->cwnd, increase);
 800ace8:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800acec:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800acf0:	e01a      	b.n	800ad28 <tcp_receive+0x3a4>
 800acf2:	bf00      	nop
 800acf4:	2000e410 	.word	0x2000e410
 800acf8:	0801a571 	.word	0x0801a571
 800acfc:	0801a69a 	.word	0x0801a69a
 800ad00:	08017fc5 	.word	0x08017fc5
 800ad04:	0801a6aa 	.word	0x0801a6aa
 800ad08:	0801a6b9 	.word	0x0801a6b9
 800ad0c:	0801a6c9 	.word	0x0801a6c9
 800ad10:	0801a700 	.word	0x0801a700
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ad14:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800ad18:	440b      	add	r3, r1
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	d82b      	bhi.n	800ad78 <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d92b      	bls.n	800ad7c <tcp_receive+0x3f8>
 800ad24:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ad28:	4620      	mov	r0, r4
 800ad2a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800ad2e:	f7ff fdc9 	bl	800a8c4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ad32:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ad34:	4602      	mov	r2, r0
 800ad36:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f7ff fdc3 	bl	800a8c4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800ad3e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ad40:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800ad42:	fab2 f382 	clz	r3, r2
 800ad46:	095b      	lsrs	r3, r3, #5
 800ad48:	425b      	negs	r3, r3
 800ad4a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800ad50:	b908      	cbnz	r0, 800ad56 <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800ad52:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ad56:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ad5a:	8aa9      	ldrh	r1, [r5, #20]
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800ad62:	8b63      	ldrh	r3, [r4, #26]
 800ad64:	051f      	lsls	r7, r3, #20
 800ad66:	f57f ae86 	bpl.w	800aa76 <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800ad6a:	b9c2      	cbnz	r2, 800ad9e <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800ad6c:	b968      	cbnz	r0, 800ad8a <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800ad6e:	8b63      	ldrh	r3, [r4, #26]
 800ad70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad74:	8363      	strh	r3, [r4, #26]
 800ad76:	e67e      	b.n	800aa76 <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ad78:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ad82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ad84:	4413      	add	r3, r2
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	e7ac      	b.n	800ace4 <tcp_receive+0x360>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ad8a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800ad8c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ad8e:	6858      	ldr	r0, [r3, #4]
 800ad90:	f7fd fca5 	bl	80086de <lwip_htonl>
 800ad94:	1a30      	subs	r0, r6, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f73f ae6d 	bgt.w	800aa76 <tcp_receive+0xf2>
 800ad9c:	e7e7      	b.n	800ad6e <tcp_receive+0x3ea>
 800ad9e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800ada0:	68d3      	ldr	r3, [r2, #12]
 800ada2:	e7f4      	b.n	800ad8e <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800ada4:	4620      	mov	r0, r4
 800ada6:	f001 fbcd 	bl	800c544 <tcp_send_empty_ack>
 800adaa:	e664      	b.n	800aa76 <tcp_receive+0xf2>
        off -= p->len;
 800adac:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800adae:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800adb0:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800adb2:	b2bf      	uxth	r7, r7
        p = p->next;
 800adb4:	6836      	ldr	r6, [r6, #0]
 800adb6:	e6c3      	b.n	800ab40 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800adb8:	1a9b      	subs	r3, r3, r2
 800adba:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800adbc:	bfbe      	ittt	lt
 800adbe:	8b63      	ldrhlt	r3, [r4, #26]
 800adc0:	f043 0302 	orrlt.w	r3, r3, #2
 800adc4:	8363      	strhlt	r3, [r4, #26]
 800adc6:	e6c7      	b.n	800ab58 <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800adc8:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800adcc:	8363      	strh	r3, [r4, #26]
}
 800adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800add0:	4620      	mov	r0, r4
}
 800add2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800add6:	f001 bbb5 	b.w	800c544 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800adda:	1a99      	subs	r1, r3, r2
 800addc:	2900      	cmp	r1, #0
 800adde:	db05      	blt.n	800adec <tcp_receive+0x468>
 800ade0:	3301      	adds	r3, #1
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	ddf0      	ble.n	800adce <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800adec:	8b63      	ldrh	r3, [r4, #26]
 800adee:	e73b      	b.n	800ac68 <tcp_receive+0x2e4>

0800adf0 <tcp_input>:
{
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800adf4:	4606      	mov	r6, r0
{
 800adf6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800adf8:	b928      	cbnz	r0, 800ae06 <tcp_input+0x16>
 800adfa:	4ba1      	ldr	r3, [pc, #644]	; (800b080 <tcp_input+0x290>)
 800adfc:	2283      	movs	r2, #131	; 0x83
 800adfe:	49a1      	ldr	r1, [pc, #644]	; (800b084 <tcp_input+0x294>)
 800ae00:	48a1      	ldr	r0, [pc, #644]	; (800b088 <tcp_input+0x298>)
 800ae02:	f002 fbd1 	bl	800d5a8 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800ae06:	6873      	ldr	r3, [r6, #4]
 800ae08:	4da0      	ldr	r5, [pc, #640]	; (800b08c <tcp_input+0x29c>)
 800ae0a:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800ae0c:	8973      	ldrh	r3, [r6, #10]
 800ae0e:	2b13      	cmp	r3, #19
 800ae10:	f240 80a6 	bls.w	800af60 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae14:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800b0b0 <tcp_input+0x2c0>
 800ae18:	f8d8 1000 	ldr.w	r1, [r8]
 800ae1c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800ae20:	f7fd f865 	bl	8007eee <ip4_addr_isbroadcast_u32>
 800ae24:	4604      	mov	r4, r0
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f040 809a 	bne.w	800af60 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ae30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ae34:	2be0      	cmp	r3, #224	; 0xe0
 800ae36:	f000 8093 	beq.w	800af60 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ae3a:	68eb      	ldr	r3, [r5, #12]
 800ae3c:	8998      	ldrh	r0, [r3, #12]
 800ae3e:	f7fd fc4b 	bl	80086d8 <lwip_htons>
 800ae42:	0a81      	lsrs	r1, r0, #10
 800ae44:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ae48:	2913      	cmp	r1, #19
 800ae4a:	f240 8089 	bls.w	800af60 <tcp_input+0x170>
 800ae4e:	8933      	ldrh	r3, [r6, #8]
 800ae50:	b28a      	uxth	r2, r1
 800ae52:	428b      	cmp	r3, r1
 800ae54:	f0c0 8084 	bcc.w	800af60 <tcp_input+0x170>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ae58:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800ae5c:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800ae5e:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ae60:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800ae62:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ae64:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800ae66:	d33d      	bcc.n	800aee4 <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ae68:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800ae6a:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ae6c:	f7fe f9c0 	bl	80091f0 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ae70:	68ec      	ldr	r4, [r5, #12]
 800ae72:	8820      	ldrh	r0, [r4, #0]
 800ae74:	f7fd fc30 	bl	80086d8 <lwip_htons>
 800ae78:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae7a:	68ec      	ldr	r4, [r5, #12]
 800ae7c:	8860      	ldrh	r0, [r4, #2]
 800ae7e:	f7fd fc2b 	bl	80086d8 <lwip_htons>
 800ae82:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae84:	68ec      	ldr	r4, [r5, #12]
 800ae86:	6860      	ldr	r0, [r4, #4]
 800ae88:	f7fd fc29 	bl	80086de <lwip_htonl>
 800ae8c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae8e:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae90:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae92:	68a0      	ldr	r0, [r4, #8]
 800ae94:	f7fd fc23 	bl	80086de <lwip_htonl>
 800ae98:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae9a:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae9c:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae9e:	89e0      	ldrh	r0, [r4, #14]
 800aea0:	f7fd fc1a 	bl	80086d8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800aea4:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aea6:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800aea8:	8998      	ldrh	r0, [r3, #12]
 800aeaa:	f7fd fc15 	bl	80086d8 <lwip_htons>
 800aeae:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800aeb2:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800aeb4:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aeb6:	0783      	lsls	r3, r0, #30
 800aeb8:	d14d      	bne.n	800af56 <tcp_input+0x166>
  tcplen = p->tot_len;
 800aeba:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aebc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800b0b4 <tcp_input+0x2c4>
  prev = NULL;
 800aec0:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aec2:	4b6f      	ldr	r3, [pc, #444]	; (800b080 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aec4:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aec8:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800b0b8 <tcp_input+0x2c8>
 800aecc:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800b088 <tcp_input+0x298>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aed0:	2c00      	cmp	r4, #0
 800aed2:	d14b      	bne.n	800af6c <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aed4:	4b6e      	ldr	r3, [pc, #440]	; (800b090 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aed6:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800b080 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aeda:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aedc:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800b0bc <tcp_input+0x2cc>
 800aee0:	4f69      	ldr	r7, [pc, #420]	; (800b088 <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aee2:	e141      	b.n	800b168 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aee4:	6833      	ldr	r3, [r6, #0]
 800aee6:	b92b      	cbnz	r3, 800aef4 <tcp_input+0x104>
 800aee8:	4b65      	ldr	r3, [pc, #404]	; (800b080 <tcp_input+0x290>)
 800aeea:	22c2      	movs	r2, #194	; 0xc2
 800aeec:	4969      	ldr	r1, [pc, #420]	; (800b094 <tcp_input+0x2a4>)
 800aeee:	4866      	ldr	r0, [pc, #408]	; (800b088 <tcp_input+0x298>)
 800aef0:	f002 fb5a 	bl	800d5a8 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800aef4:	2114      	movs	r1, #20
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7fe f97a 	bl	80091f0 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800aefc:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aefe:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800af02:	4630      	mov	r0, r6
 800af04:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800af06:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800af08:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800af0c:	f7fe f970 	bl	80091f0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800af10:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800af12:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800af14:	8943      	ldrh	r3, [r0, #10]
 800af16:	42bb      	cmp	r3, r7
 800af18:	d322      	bcc.n	800af60 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800af1a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800af1c:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800af1e:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800af20:	f7fe f966 	bl	80091f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800af24:	8933      	ldrh	r3, [r6, #8]
 800af26:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800af28:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800af2a:	eba4 0409 	sub.w	r4, r4, r9
 800af2e:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800af30:	b12b      	cbz	r3, 800af3e <tcp_input+0x14e>
 800af32:	4b53      	ldr	r3, [pc, #332]	; (800b080 <tcp_input+0x290>)
 800af34:	22df      	movs	r2, #223	; 0xdf
 800af36:	4958      	ldr	r1, [pc, #352]	; (800b098 <tcp_input+0x2a8>)
 800af38:	4853      	ldr	r0, [pc, #332]	; (800b088 <tcp_input+0x298>)
 800af3a:	f002 fb35 	bl	800d5a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800af3e:	6833      	ldr	r3, [r6, #0]
 800af40:	8932      	ldrh	r2, [r6, #8]
 800af42:	891b      	ldrh	r3, [r3, #8]
 800af44:	429a      	cmp	r2, r3
 800af46:	d093      	beq.n	800ae70 <tcp_input+0x80>
 800af48:	4b4d      	ldr	r3, [pc, #308]	; (800b080 <tcp_input+0x290>)
 800af4a:	22e0      	movs	r2, #224	; 0xe0
 800af4c:	4953      	ldr	r1, [pc, #332]	; (800b09c <tcp_input+0x2ac>)
 800af4e:	484e      	ldr	r0, [pc, #312]	; (800b088 <tcp_input+0x298>)
 800af50:	f002 fb2a 	bl	800d5a8 <iprintf>
 800af54:	e78c      	b.n	800ae70 <tcp_input+0x80>
    tcplen++;
 800af56:	1c53      	adds	r3, r2, #1
 800af58:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800af5a:	429a      	cmp	r2, r3
    tcplen++;
 800af5c:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800af5e:	d9ad      	bls.n	800aebc <tcp_input+0xcc>
  pbuf_free(p);
 800af60:	4630      	mov	r0, r6
}
 800af62:	b007      	add	sp, #28
 800af64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800af68:	f7fe b976 	b.w	8009258 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800af6c:	7d22      	ldrb	r2, [r4, #20]
 800af6e:	b92a      	cbnz	r2, 800af7c <tcp_input+0x18c>
 800af70:	22fb      	movs	r2, #251	; 0xfb
 800af72:	4659      	mov	r1, fp
 800af74:	4650      	mov	r0, sl
 800af76:	f002 fb17 	bl	800d5a8 <iprintf>
 800af7a:	4b41      	ldr	r3, [pc, #260]	; (800b080 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800af7c:	7d22      	ldrb	r2, [r4, #20]
 800af7e:	2a0a      	cmp	r2, #10
 800af80:	d105      	bne.n	800af8e <tcp_input+0x19e>
 800af82:	22fc      	movs	r2, #252	; 0xfc
 800af84:	4946      	ldr	r1, [pc, #280]	; (800b0a0 <tcp_input+0x2b0>)
 800af86:	4650      	mov	r0, sl
 800af88:	f002 fb0e 	bl	800d5a8 <iprintf>
 800af8c:	4b3c      	ldr	r3, [pc, #240]	; (800b080 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800af8e:	7d22      	ldrb	r2, [r4, #20]
 800af90:	2a01      	cmp	r2, #1
 800af92:	d105      	bne.n	800afa0 <tcp_input+0x1b0>
 800af94:	22fd      	movs	r2, #253	; 0xfd
 800af96:	4943      	ldr	r1, [pc, #268]	; (800b0a4 <tcp_input+0x2b4>)
 800af98:	4650      	mov	r0, sl
 800af9a:	f002 fb05 	bl	800d5a8 <iprintf>
 800af9e:	4b38      	ldr	r3, [pc, #224]	; (800b080 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afa0:	7a20      	ldrb	r0, [r4, #8]
 800afa2:	68e1      	ldr	r1, [r4, #12]
 800afa4:	b138      	cbz	r0, 800afb6 <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afa6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800afaa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800afae:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800afb0:	b2d2      	uxtb	r2, r2
 800afb2:	4290      	cmp	r0, r2
 800afb4:	d161      	bne.n	800b07a <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800afb6:	68ea      	ldr	r2, [r5, #12]
 800afb8:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800afbc:	8810      	ldrh	r0, [r2, #0]
 800afbe:	4584      	cmp	ip, r0
 800afc0:	d15b      	bne.n	800b07a <tcp_input+0x28a>
 800afc2:	8ae0      	ldrh	r0, [r4, #22]
 800afc4:	8852      	ldrh	r2, [r2, #2]
 800afc6:	4290      	cmp	r0, r2
 800afc8:	d157      	bne.n	800b07a <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800afca:	6860      	ldr	r0, [r4, #4]
 800afcc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afd0:	4290      	cmp	r0, r2
 800afd2:	d152      	bne.n	800b07a <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800afd4:	6820      	ldr	r0, [r4, #0]
 800afd6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800afda:	4290      	cmp	r0, r2
 800afdc:	d14d      	bne.n	800b07a <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800afde:	42a1      	cmp	r1, r4
 800afe0:	f040 83eb 	bne.w	800b7ba <tcp_input+0x9ca>
 800afe4:	4b26      	ldr	r3, [pc, #152]	; (800b080 <tcp_input+0x290>)
 800afe6:	f240 120d 	movw	r2, #269	; 0x10d
 800afea:	492f      	ldr	r1, [pc, #188]	; (800b0a8 <tcp_input+0x2b8>)
 800afec:	4826      	ldr	r0, [pc, #152]	; (800b088 <tcp_input+0x298>)
 800afee:	f002 fadb 	bl	800d5a8 <iprintf>
      if (prev != NULL) {
 800aff2:	b137      	cbz	r7, 800b002 <tcp_input+0x212>
        prev->next = pcb->next;
 800aff4:	68e3      	ldr	r3, [r4, #12]
 800aff6:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800aff8:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800affc:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800b000:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b002:	68e3      	ldr	r3, [r4, #12]
 800b004:	42a3      	cmp	r3, r4
 800b006:	d106      	bne.n	800b016 <tcp_input+0x226>
 800b008:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <tcp_input+0x290>)
 800b00a:	f240 1215 	movw	r2, #277	; 0x115
 800b00e:	4927      	ldr	r1, [pc, #156]	; (800b0ac <tcp_input+0x2bc>)
 800b010:	481d      	ldr	r0, [pc, #116]	; (800b088 <tcp_input+0x298>)
 800b012:	f002 fac9 	bl	800d5a8 <iprintf>
    inseg.len = p->tot_len;
 800b016:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800b018:	2300      	movs	r3, #0
    inseg.p = p;
 800b01a:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800b01c:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800b01e:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800b020:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800b022:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800b024:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800b026:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800b02a:	7f2b      	ldrb	r3, [r5, #28]
 800b02c:	071b      	lsls	r3, r3, #28
 800b02e:	d503      	bpl.n	800b038 <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800b030:	7b73      	ldrb	r3, [r6, #13]
 800b032:	f043 0301 	orr.w	r3, r3, #1
 800b036:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800b038:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 812e 	beq.w	800b29c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b040:	4620      	mov	r0, r4
 800b042:	f7ff f935 	bl	800a2b0 <tcp_process_refused_data>
 800b046:	300d      	adds	r0, #13
 800b048:	d007      	beq.n	800b05a <tcp_input+0x26a>
 800b04a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 8125 	beq.w	800b29c <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b052:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8121 	beq.w	800b29c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800b05a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b05c:	b913      	cbnz	r3, 800b064 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800b05e:	4620      	mov	r0, r4
 800b060:	f001 fa70 	bl	800c544 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800b064:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800b066:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    recv_data = NULL;
 800b068:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800b06c:	b110      	cbz	r0, 800b074 <tcp_input+0x284>
      pbuf_free(inseg.p);
 800b06e:	f7fe f8f3 	bl	8009258 <pbuf_free>
      inseg.p = NULL;
 800b072:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800b074:	b007      	add	sp, #28
 800b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b07a:	4627      	mov	r7, r4
 800b07c:	460c      	mov	r4, r1
 800b07e:	e727      	b.n	800aed0 <tcp_input+0xe0>
 800b080:	0801a571 	.word	0x0801a571
 800b084:	0801a71f 	.word	0x0801a71f
 800b088:	08017fc5 	.word	0x08017fc5
 800b08c:	2000e420 	.word	0x2000e420
 800b090:	2000e418 	.word	0x2000e418
 800b094:	0801a737 	.word	0x0801a737
 800b098:	0801a747 	.word	0x0801a747
 800b09c:	0801a753 	.word	0x0801a753
 800b0a0:	0801a799 	.word	0x0801a799
 800b0a4:	0801a7c3 	.word	0x0801a7c3
 800b0a8:	0801a7ea 	.word	0x0801a7ea
 800b0ac:	0801a815 	.word	0x0801a815
 800b0b0:	2000a694 	.word	0x2000a694
 800b0b4:	2000e40c 	.word	0x2000e40c
 800b0b8:	0801a772 	.word	0x0801a772
 800b0bc:	0801a83f 	.word	0x0801a83f
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b0c0:	7d23      	ldrb	r3, [r4, #20]
 800b0c2:	2b0a      	cmp	r3, #10
 800b0c4:	d006      	beq.n	800b0d4 <tcp_input+0x2e4>
 800b0c6:	465b      	mov	r3, fp
 800b0c8:	f240 121f 	movw	r2, #287	; 0x11f
 800b0cc:	4651      	mov	r1, sl
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f002 fa6a 	bl	800d5a8 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0d4:	7a22      	ldrb	r2, [r4, #8]
 800b0d6:	b13a      	cbz	r2, 800b0e8 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b0d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0e0:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d13e      	bne.n	800b166 <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800b0e8:	68eb      	ldr	r3, [r5, #12]
 800b0ea:	8b20      	ldrh	r0, [r4, #24]
 800b0ec:	881a      	ldrh	r2, [r3, #0]
 800b0ee:	4290      	cmp	r0, r2
 800b0f0:	d139      	bne.n	800b166 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b0f2:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800b0f4:	8ae1      	ldrh	r1, [r4, #22]
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	d135      	bne.n	800b166 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b0fa:	6862      	ldr	r2, [r4, #4]
 800b0fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b100:	429a      	cmp	r2, r3
 800b102:	d130      	bne.n	800b166 <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d12b      	bne.n	800b166 <tcp_input+0x376>
  if (flags & TCP_RST) {
 800b10e:	7f2b      	ldrb	r3, [r5, #28]
 800b110:	075f      	lsls	r7, r3, #29
 800b112:	f53f af25 	bmi.w	800af60 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800b116:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b118:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800b11a:	d514      	bpl.n	800b146 <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b11c:	6a2a      	ldr	r2, [r5, #32]
 800b11e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	d415      	bmi.n	800b150 <tcp_input+0x360>
 800b124:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800b128:	eba3 030c 	sub.w	r3, r3, ip
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc0f      	bgt.n	800b150 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b130:	4b8a      	ldr	r3, [pc, #552]	; (800b35c <tcp_input+0x56c>)
 800b132:	443a      	add	r2, r7
 800b134:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	4620      	mov	r0, r4
 800b13c:	3304      	adds	r3, #4
 800b13e:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b140:	f001 f9ba 	bl	800c4b8 <tcp_rst>
 800b144:	e70c      	b.n	800af60 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800b146:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800b148:	bf42      	ittt	mi
 800b14a:	4b85      	ldrmi	r3, [pc, #532]	; (800b360 <tcp_input+0x570>)
 800b14c:	681b      	ldrmi	r3, [r3, #0]
 800b14e:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800b150:	2f00      	cmp	r7, #0
 800b152:	f43f af05 	beq.w	800af60 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800b156:	8b63      	ldrh	r3, [r4, #26]
 800b158:	f043 0302 	orr.w	r3, r3, #2
 800b15c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b15e:	4620      	mov	r0, r4
 800b160:	f001 fa22 	bl	800c5a8 <tcp_output>
        pbuf_free(p);
 800b164:	e6fc      	b.n	800af60 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b166:	68e4      	ldr	r4, [r4, #12]
 800b168:	2c00      	cmp	r4, #0
 800b16a:	d1a9      	bne.n	800b0c0 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b16c:	487d      	ldr	r0, [pc, #500]	; (800b364 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b16e:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b172:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800b174:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b176:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b17a:	4617      	mov	r7, r2
 800b17c:	b98f      	cbnz	r7, 800b1a2 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b17e:	8988      	ldrh	r0, [r1, #12]
 800b180:	f7fd faaa 	bl	80086d8 <lwip_htons>
 800b184:	0742      	lsls	r2, r0, #29
 800b186:	f53f aeeb 	bmi.w	800af60 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18a:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b18c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800b18e:	8818      	ldrh	r0, [r3, #0]
 800b190:	6a2a      	ldr	r2, [r5, #32]
 800b192:	9002      	str	r0, [sp, #8]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	440a      	add	r2, r1
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	4b70      	ldr	r3, [pc, #448]	; (800b35c <tcp_input+0x56c>)
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	e308      	b.n	800b7b4 <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1a2:	f897 c008 	ldrb.w	ip, [r7, #8]
 800b1a6:	f1bc 0f00 	cmp.w	ip, #0
 800b1aa:	d005      	beq.n	800b1b8 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b1ac:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800b1b0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	459c      	cmp	ip, r3
 800b1b6:	d10b      	bne.n	800b1d0 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800b1b8:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800b1bc:	8afb      	ldrh	r3, [r7, #22]
 800b1be:	4563      	cmp	r3, ip
 800b1c0:	d106      	bne.n	800b1d0 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	4553      	cmp	r3, sl
 800b1c6:	f000 82df 	beq.w	800b788 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 82dc 	beq.w	800b788 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b1d0:	463c      	mov	r4, r7
 800b1d2:	68ff      	ldr	r7, [r7, #12]
 800b1d4:	e7d2      	b.n	800b17c <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800b1d6:	0798      	lsls	r0, r3, #30
 800b1d8:	f57f aec2 	bpl.w	800af60 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800b1dc:	7d78      	ldrb	r0, [r7, #21]
 800b1de:	f7ff f9fd 	bl	800a5dc <tcp_alloc>
    if (npcb == NULL) {
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	b948      	cbnz	r0, 800b1fa <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f43f aeb9 	beq.w	800af60 <tcp_input+0x170>
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f4:	6938      	ldr	r0, [r7, #16]
 800b1f6:	4798      	blx	r3
 800b1f8:	e6b2      	b.n	800af60 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b1fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800b1fe:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b200:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b202:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b206:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b208:	8afb      	ldrh	r3, [r7, #22]
 800b20a:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800b20c:	7813      	ldrb	r3, [r2, #0]
 800b20e:	7852      	ldrb	r2, [r2, #1]
 800b210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b214:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800b216:	2303      	movs	r3, #3
 800b218:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800b21a:	6a2b      	ldr	r3, [r5, #32]
 800b21c:	3301      	adds	r3, #1
 800b21e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b220:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b222:	f7ff fa6f 	bl	800a704 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b226:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800b228:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b22a:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800b22c:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800b22e:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b230:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b232:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800b234:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800b236:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800b238:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b23a:	7a7b      	ldrb	r3, [r7, #9]
 800b23c:	f003 030c 	and.w	r3, r3, #12
 800b240:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b242:	7a3b      	ldrb	r3, [r7, #8]
 800b244:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800b246:	f8d9 3000 	ldr.w	r3, [r9]
 800b24a:	f8c9 4000 	str.w	r4, [r9]
 800b24e:	60e3      	str	r3, [r4, #12]
 800b250:	f001 fc80 	bl	800cb54 <tcp_timer_needed>
 800b254:	4b44      	ldr	r3, [pc, #272]	; (800b368 <tcp_input+0x578>)
 800b256:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800b258:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800b25a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b25c:	f7ff fabc 	bl	800a7d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b260:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b262:	1d22      	adds	r2, r4, #4
 800b264:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800b266:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b268:	4610      	mov	r0, r2
 800b26a:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800b26c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b270:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b274:	f7fc fcbc 	bl	8007bf0 <ip4_route>
 800b278:	9a05      	ldr	r2, [sp, #20]
 800b27a:	4601      	mov	r1, r0
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7ff fa5b 	bl	800a738 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b282:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b284:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b286:	4620      	mov	r0, r4
 800b288:	f000 ff9a 	bl	800c1c0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f43f af66 	beq.w	800b15e <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800b292:	4651      	mov	r1, sl
 800b294:	4620      	mov	r0, r4
 800b296:	f7ff f8cf 	bl	800a438 <tcp_abandon>
      return;
 800b29a:	e661      	b.n	800af60 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800b29c:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800b29e:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800b2a0:	0751      	lsls	r1, r2, #29
 800b2a2:	d537      	bpl.n	800b314 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800b2a4:	7d21      	ldrb	r1, [r4, #20]
 800b2a6:	2902      	cmp	r1, #2
 800b2a8:	d11e      	bne.n	800b2e8 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800b2aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b2ac:	69ab      	ldr	r3, [r5, #24]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d107      	bne.n	800b2c2 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800b2b2:	7cab      	ldrb	r3, [r5, #18]
 800b2b4:	f043 0308 	orr.w	r3, r3, #8
 800b2b8:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b2ba:	8b63      	ldrh	r3, [r4, #26]
 800b2bc:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800b2c0:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800b2c2:	7cab      	ldrb	r3, [r5, #18]
 800b2c4:	0718      	lsls	r0, r3, #28
 800b2c6:	f140 81fe 	bpl.w	800b6c6 <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b2ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b2ce:	b11b      	cbz	r3, 800b2d8 <tcp_input+0x4e8>
 800b2d0:	f06f 010d 	mvn.w	r1, #13
 800b2d4:	6920      	ldr	r0, [r4, #16]
 800b2d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4824      	ldr	r0, [pc, #144]	; (800b36c <tcp_input+0x57c>)
 800b2dc:	f7fe fe9c 	bl	800a018 <tcp_pcb_remove>
        tcp_free(pcb);
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7fe faa7 	bl	8009834 <tcp_free>
 800b2e6:	e6bd      	b.n	800b064 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800b2e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b2ea:	6a2b      	ldr	r3, [r5, #32]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d007      	beq.n	800b300 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b2f0:	1a9b      	subs	r3, r3, r2
 800b2f2:	d4e6      	bmi.n	800b2c2 <tcp_input+0x4d2>
 800b2f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dce2      	bgt.n	800b2c2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800b2fc:	8b63      	ldrh	r3, [r4, #26]
 800b2fe:	e010      	b.n	800b322 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b300:	2900      	cmp	r1, #0
 800b302:	d1d6      	bne.n	800b2b2 <tcp_input+0x4c2>
 800b304:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <tcp_input+0x580>)
 800b306:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b30a:	491a      	ldr	r1, [pc, #104]	; (800b374 <tcp_input+0x584>)
 800b30c:	481a      	ldr	r0, [pc, #104]	; (800b378 <tcp_input+0x588>)
 800b30e:	f002 f94b 	bl	800d5a8 <iprintf>
 800b312:	e7ce      	b.n	800b2b2 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b314:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800b316:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b318:	d506      	bpl.n	800b328 <tcp_input+0x538>
 800b31a:	7d22      	ldrb	r2, [r4, #20]
 800b31c:	3a02      	subs	r2, #2
 800b31e:	2a01      	cmp	r2, #1
 800b320:	d902      	bls.n	800b328 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800b322:	f043 0302 	orr.w	r3, r3, #2
 800b326:	e7cb      	b.n	800b2c0 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b328:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800b32a:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800b32c:	bf5e      	ittt	pl
 800b32e:	4b0c      	ldrpl	r3, [pc, #48]	; (800b360 <tcp_input+0x570>)
 800b330:	681b      	ldrpl	r3, [r3, #0]
 800b332:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800b33a:	f7ff fa4d 	bl	800a7d8 <tcp_parseopt>
  switch (pcb->state) {
 800b33e:	7d23      	ldrb	r3, [r4, #20]
 800b340:	3b02      	subs	r3, #2
 800b342:	2b07      	cmp	r3, #7
 800b344:	d8bd      	bhi.n	800b2c2 <tcp_input+0x4d2>
 800b346:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b34a:	0019      	.short	0x0019
 800b34c:	011200a6 	.word	0x011200a6
 800b350:	015f0117 	.word	0x015f0117
 800b354:	018b0112 	.word	0x018b0112
 800b358:	01a9      	.short	0x01a9
 800b35a:	bf00      	nop
 800b35c:	2000a6a4 	.word	0x2000a6a4
 800b360:	2000e410 	.word	0x2000e410
 800b364:	2000e408 	.word	0x2000e408
 800b368:	2000e415 	.word	0x2000e415
 800b36c:	2000e40c 	.word	0x2000e40c
 800b370:	0801a571 	.word	0x0801a571
 800b374:	0801a86c 	.word	0x0801a86c
 800b378:	08017fc5 	.word	0x08017fc5
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b37c:	7f2b      	ldrb	r3, [r5, #28]
 800b37e:	f003 0212 	and.w	r2, r3, #18
 800b382:	2a12      	cmp	r2, #18
 800b384:	d16a      	bne.n	800b45c <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800b386:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b388:	69a9      	ldr	r1, [r5, #24]
 800b38a:	3201      	adds	r2, #1
 800b38c:	428a      	cmp	r2, r1
 800b38e:	d165      	bne.n	800b45c <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800b390:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800b392:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800b394:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800b396:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b398:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b39a:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800b39c:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b39e:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800b3a0:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b3a2:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b3a4:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800b3a6:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b3aa:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3ae:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800b3b0:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	9205      	str	r2, [sp, #20]
 800b3b6:	f7fc fc1b 	bl	8007bf0 <ip4_route>
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	4601      	mov	r1, r0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7ff f9ba 	bl	800a738 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b3c8:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3ca:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3cc:	0081      	lsls	r1, r0, #2
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	bf38      	it	cc
 800b3d4:	461e      	movcc	r6, r3
 800b3d6:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800b3da:	d933      	bls.n	800b444 <tcp_input+0x654>
 800b3dc:	b28b      	uxth	r3, r1
 800b3de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b3e2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b3e6:	b933      	cbnz	r3, 800b3f6 <tcp_input+0x606>
 800b3e8:	4b94      	ldr	r3, [pc, #592]	; (800b63c <tcp_input+0x84c>)
 800b3ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b3ee:	4994      	ldr	r1, [pc, #592]	; (800b640 <tcp_input+0x850>)
 800b3f0:	4894      	ldr	r0, [pc, #592]	; (800b644 <tcp_input+0x854>)
 800b3f2:	f002 f8d9 	bl	800d5a8 <iprintf>
        --pcb->snd_queuelen;
 800b3f6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b3fa:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800b402:	bb1e      	cbnz	r6, 800b44c <tcp_input+0x65c>
          rseg = pcb->unsent;
 800b404:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b406:	b936      	cbnz	r6, 800b416 <tcp_input+0x626>
 800b408:	4b8c      	ldr	r3, [pc, #560]	; (800b63c <tcp_input+0x84c>)
 800b40a:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b40e:	498e      	ldr	r1, [pc, #568]	; (800b648 <tcp_input+0x858>)
 800b410:	488c      	ldr	r0, [pc, #560]	; (800b644 <tcp_input+0x854>)
 800b412:	f002 f8c9 	bl	800d5a8 <iprintf>
          pcb->unsent = rseg->next;
 800b416:	6833      	ldr	r3, [r6, #0]
 800b418:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7fe fb50 	bl	8009ac0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b420:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b422:	b9b3      	cbnz	r3, 800b452 <tcp_input+0x662>
          pcb->rtime = -1;
 800b424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b428:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b42a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f43f af64 	beq.w	800b2fc <tcp_input+0x50c>
 800b434:	2200      	movs	r2, #0
 800b436:	4621      	mov	r1, r4
 800b438:	6920      	ldr	r0, [r4, #16]
 800b43a:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b43c:	300d      	adds	r0, #13
 800b43e:	f47f af5d 	bne.w	800b2fc <tcp_input+0x50c>
 800b442:	e60f      	b.n	800b064 <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b444:	429a      	cmp	r2, r3
 800b446:	bf88      	it	hi
 800b448:	b293      	uxthhi	r3, r2
 800b44a:	e7c8      	b.n	800b3de <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800b44c:	6833      	ldr	r3, [r6, #0]
 800b44e:	6723      	str	r3, [r4, #112]	; 0x70
 800b450:	e7e3      	b.n	800b41a <tcp_input+0x62a>
          pcb->rtime = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b45a:	e7e6      	b.n	800b42a <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800b45c:	06df      	lsls	r7, r3, #27
 800b45e:	f57f af30 	bpl.w	800b2c2 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b462:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b464:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800b466:	8818      	ldrh	r0, [r3, #0]
 800b468:	6a2a      	ldr	r2, [r5, #32]
 800b46a:	9002      	str	r0, [sp, #8]
 800b46c:	4620      	mov	r0, r4
 800b46e:	885b      	ldrh	r3, [r3, #2]
 800b470:	440a      	add	r2, r1
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	4b75      	ldr	r3, [pc, #468]	; (800b64c <tcp_input+0x85c>)
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	3304      	adds	r3, #4
 800b47a:	69a9      	ldr	r1, [r5, #24]
 800b47c:	f001 f81c 	bl	800c4b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b480:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b484:	2b05      	cmp	r3, #5
 800b486:	f63f af1c 	bhi.w	800b2c2 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800b48a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800b48c:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800b48e:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b490:	f001 fa50 	bl	800c934 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800b494:	e715      	b.n	800b2c2 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800b496:	7f2b      	ldrb	r3, [r5, #28]
 800b498:	06de      	lsls	r6, r3, #27
 800b49a:	d55b      	bpl.n	800b554 <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b49c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b49e:	69a9      	ldr	r1, [r5, #24]
 800b4a0:	43db      	mvns	r3, r3
 800b4a2:	42cb      	cmn	r3, r1
 800b4a4:	d447      	bmi.n	800b536 <tcp_input+0x746>
 800b4a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b4a8:	1acb      	subs	r3, r1, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dc43      	bgt.n	800b536 <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800b4b2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b4b4:	b91b      	cbnz	r3, 800b4be <tcp_input+0x6ce>
            tcp_abort(pcb);
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7ff f83c 	bl	800a534 <tcp_abort>
            goto aborted;
 800b4bc:	e5d2      	b.n	800b064 <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	b933      	cbnz	r3, 800b4d0 <tcp_input+0x6e0>
 800b4c2:	4b5e      	ldr	r3, [pc, #376]	; (800b63c <tcp_input+0x84c>)
 800b4c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b4c8:	4961      	ldr	r1, [pc, #388]	; (800b650 <tcp_input+0x860>)
 800b4ca:	485e      	ldr	r0, [pc, #376]	; (800b644 <tcp_input+0x854>)
 800b4cc:	f002 f86c 	bl	800d5a8 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b4d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0ee      	beq.n	800b4b6 <tcp_input+0x6c6>
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4621      	mov	r1, r4
 800b4dc:	6920      	ldr	r0, [r4, #16]
 800b4de:	4798      	blx	r3
          if (err != ERR_OK) {
 800b4e0:	b118      	cbz	r0, 800b4ea <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800b4e2:	300d      	adds	r0, #13
 800b4e4:	f43f adbe 	beq.w	800b064 <tcp_input+0x274>
 800b4e8:	e7e5      	b.n	800b4b6 <tcp_input+0x6c6>
          tcp_receive(pcb);
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7ff fa4a 	bl	800a984 <tcp_receive>
          if (recv_acked != 0) {
 800b4f0:	4a58      	ldr	r2, [pc, #352]	; (800b654 <tcp_input+0x864>)
 800b4f2:	8a93      	ldrh	r3, [r2, #20]
 800b4f4:	b10b      	cbz	r3, 800b4fa <tcp_input+0x70a>
            recv_acked--;
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4fa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800b4fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800b500:	0041      	lsls	r1, r0, #1
 800b502:	0086      	lsls	r6, r0, #2
 800b504:	4299      	cmp	r1, r3
 800b506:	460f      	mov	r7, r1
 800b508:	bf38      	it	cc
 800b50a:	461f      	movcc	r7, r3
 800b50c:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800b510:	d90d      	bls.n	800b52e <tcp_input+0x73e>
 800b512:	b2b3      	uxth	r3, r6
 800b514:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800b518:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b51a:	0699      	lsls	r1, r3, #26
 800b51c:	f57f aed1 	bpl.w	800b2c2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800b520:	8b63      	ldrh	r3, [r4, #26]
 800b522:	f043 0302 	orr.w	r3, r3, #2
 800b526:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800b528:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800b52a:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800b52c:	e6c9      	b.n	800b2c2 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b52e:	4299      	cmp	r1, r3
 800b530:	bf88      	it	hi
 800b532:	b28b      	uxthhi	r3, r1
 800b534:	e7ee      	b.n	800b514 <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b536:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b538:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b53a:	881e      	ldrh	r6, [r3, #0]
 800b53c:	6a2a      	ldr	r2, [r5, #32]
 800b53e:	9602      	str	r6, [sp, #8]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	4402      	add	r2, r0
 800b544:	4620      	mov	r0, r4
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	4b40      	ldr	r3, [pc, #256]	; (800b64c <tcp_input+0x85c>)
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	3304      	adds	r3, #4
 800b54e:	f000 ffb3 	bl	800c4b8 <tcp_rst>
    if (err != ERR_ABRT) {
 800b552:	e6b6      	b.n	800b2c2 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b554:	0798      	lsls	r0, r3, #30
 800b556:	f57f aeb4 	bpl.w	800b2c2 <tcp_input+0x4d2>
 800b55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b55c:	6a2a      	ldr	r2, [r5, #32]
 800b55e:	3b01      	subs	r3, #1
 800b560:	4293      	cmp	r3, r2
 800b562:	f47f aeae 	bne.w	800b2c2 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800b566:	4620      	mov	r0, r4
 800b568:	f000 ff32 	bl	800c3d0 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800b56c:	e6a9      	b.n	800b2c2 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff fa08 	bl	800a984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b574:	7cab      	ldrb	r3, [r5, #18]
 800b576:	e7d0      	b.n	800b51a <tcp_input+0x72a>
      tcp_receive(pcb);
 800b578:	4620      	mov	r0, r4
 800b57a:	f7ff fa03 	bl	800a984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b57e:	7cab      	ldrb	r3, [r5, #18]
 800b580:	f013 0f20 	tst.w	r3, #32
 800b584:	7f2b      	ldrb	r3, [r5, #28]
 800b586:	d031      	beq.n	800b5ec <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b588:	f013 0f10 	tst.w	r3, #16
 800b58c:	8b63      	ldrh	r3, [r4, #26]
 800b58e:	d028      	beq.n	800b5e2 <tcp_input+0x7f2>
 800b590:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b592:	69aa      	ldr	r2, [r5, #24]
 800b594:	4291      	cmp	r1, r2
 800b596:	d124      	bne.n	800b5e2 <tcp_input+0x7f2>
 800b598:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b59a:	bb12      	cbnz	r2, 800b5e2 <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800b59c:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800b5a0:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800b5a2:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b5a4:	f7fe fb16 	bl	8009bd4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b5a8:	f8d9 3000 	ldr.w	r3, [r9]
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	d10a      	bne.n	800b5c6 <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800b5b0:	68e3      	ldr	r3, [r4, #12]
 800b5b2:	f8c9 3000 	str.w	r3, [r9]
 800b5b6:	e008      	b.n	800b5ca <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	4294      	cmp	r4, r2
 800b5bc:	d102      	bne.n	800b5c4 <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800b5be:	68e2      	ldr	r2, [r4, #12]
 800b5c0:	60da      	str	r2, [r3, #12]
 800b5c2:	e002      	b.n	800b5ca <tcp_input+0x7da>
 800b5c4:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f6      	bne.n	800b5b8 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800b5ca:	4b23      	ldr	r3, [pc, #140]	; (800b658 <tcp_input+0x868>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b5d0:	230a      	movs	r3, #10
 800b5d2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b5d4:	4b21      	ldr	r3, [pc, #132]	; (800b65c <tcp_input+0x86c>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	601c      	str	r4, [r3, #0]
 800b5da:	60e2      	str	r2, [r4, #12]
 800b5dc:	f001 faba 	bl	800cb54 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800b5e0:	e66f      	b.n	800b2c2 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b5e8:	2308      	movs	r3, #8
 800b5ea:	e79e      	b.n	800b52a <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5ec:	06da      	lsls	r2, r3, #27
 800b5ee:	f57f ae68 	bpl.w	800b2c2 <tcp_input+0x4d2>
 800b5f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b5f4:	69ab      	ldr	r3, [r5, #24]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	f47f ae63 	bne.w	800b2c2 <tcp_input+0x4d2>
 800b5fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f47f ae5f 	bne.w	800b2c2 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800b604:	2306      	movs	r3, #6
 800b606:	e790      	b.n	800b52a <tcp_input+0x73a>
      tcp_receive(pcb);
 800b608:	4620      	mov	r0, r4
 800b60a:	f7ff f9bb 	bl	800a984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b60e:	7cab      	ldrb	r3, [r5, #18]
 800b610:	069b      	lsls	r3, r3, #26
 800b612:	f57f ae56 	bpl.w	800b2c2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800b616:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b618:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b61a:	f043 0302 	orr.w	r3, r3, #2
 800b61e:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b620:	f7fe fad8 	bl	8009bd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b624:	f8d9 3000 	ldr.w	r3, [r9]
 800b628:	429c      	cmp	r4, r3
 800b62a:	d0c1      	beq.n	800b5b0 <tcp_input+0x7c0>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0cc      	beq.n	800b5ca <tcp_input+0x7da>
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	4294      	cmp	r4, r2
 800b634:	d0c3      	beq.n	800b5be <tcp_input+0x7ce>
 800b636:	4613      	mov	r3, r2
 800b638:	e7f8      	b.n	800b62c <tcp_input+0x83c>
 800b63a:	bf00      	nop
 800b63c:	0801a571 	.word	0x0801a571
 800b640:	0801a88c 	.word	0x0801a88c
 800b644:	08017fc5 	.word	0x08017fc5
 800b648:	0801a8a2 	.word	0x0801a8a2
 800b64c:	2000a6a4 	.word	0x2000a6a4
 800b650:	0801a8b5 	.word	0x0801a8b5
 800b654:	2000e420 	.word	0x2000e420
 800b658:	2000e415 	.word	0x2000e415
 800b65c:	2000e418 	.word	0x2000e418
      tcp_receive(pcb);
 800b660:	4620      	mov	r0, r4
 800b662:	f7ff f98f 	bl	800a984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b666:	7f2b      	ldrb	r3, [r5, #28]
 800b668:	06df      	lsls	r7, r3, #27
 800b66a:	f57f ae2a 	bpl.w	800b2c2 <tcp_input+0x4d2>
 800b66e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b670:	69ab      	ldr	r3, [r5, #24]
 800b672:	429a      	cmp	r2, r3
 800b674:	f47f ae25 	bne.w	800b2c2 <tcp_input+0x4d2>
 800b678:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f47f ae21 	bne.w	800b2c2 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800b680:	4620      	mov	r0, r4
 800b682:	f7fe faa7 	bl	8009bd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b686:	f8d9 3000 	ldr.w	r3, [r9]
 800b68a:	429c      	cmp	r4, r3
 800b68c:	d090      	beq.n	800b5b0 <tcp_input+0x7c0>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d09b      	beq.n	800b5ca <tcp_input+0x7da>
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	4294      	cmp	r4, r2
 800b696:	d092      	beq.n	800b5be <tcp_input+0x7ce>
 800b698:	4613      	mov	r3, r2
 800b69a:	e7f8      	b.n	800b68e <tcp_input+0x89e>
      tcp_receive(pcb);
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7ff f971 	bl	800a984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b6a2:	7f2b      	ldrb	r3, [r5, #28]
 800b6a4:	06de      	lsls	r6, r3, #27
 800b6a6:	f57f ae0c 	bpl.w	800b2c2 <tcp_input+0x4d2>
 800b6aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b6ac:	69ab      	ldr	r3, [r5, #24]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	f47f ae07 	bne.w	800b2c2 <tcp_input+0x4d2>
 800b6b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f47f ae03 	bne.w	800b2c2 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800b6bc:	7cab      	ldrb	r3, [r5, #18]
 800b6be:	f043 0310 	orr.w	r3, r3, #16
 800b6c2:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800b6c4:	e5fd      	b.n	800b2c2 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800b6c6:	8aaa      	ldrh	r2, [r5, #20]
 800b6c8:	b11a      	cbz	r2, 800b6d2 <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b6ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b6cc:	b9db      	cbnz	r3, 800b706 <tcp_input+0x916>
          recv_acked = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7ff f8ca 	bl	800a86c <tcp_input_delayed_close>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	f47f acc3 	bne.w	800b064 <tcp_input+0x274>
        if (recv_data != NULL) {
 800b6de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b6e0:	b323      	cbz	r3, 800b72c <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b6e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b6e4:	b133      	cbz	r3, 800b6f4 <tcp_input+0x904>
 800b6e6:	4b37      	ldr	r3, [pc, #220]	; (800b7c4 <tcp_input+0x9d4>)
 800b6e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b6ec:	4936      	ldr	r1, [pc, #216]	; (800b7c8 <tcp_input+0x9d8>)
 800b6ee:	4837      	ldr	r0, [pc, #220]	; (800b7cc <tcp_input+0x9dc>)
 800b6f0:	f001 ff5a 	bl	800d5a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b6f4:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800b6f6:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800b6f8:	f013 0310 	ands.w	r3, r3, #16
 800b6fc:	d009      	beq.n	800b712 <tcp_input+0x922>
            pbuf_free(recv_data);
 800b6fe:	4610      	mov	r0, r2
 800b700:	f7fd fdaa 	bl	8009258 <pbuf_free>
 800b704:	e6d7      	b.n	800b4b6 <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b706:	4621      	mov	r1, r4
 800b708:	6920      	ldr	r0, [r4, #16]
 800b70a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b70c:	300d      	adds	r0, #13
 800b70e:	d1de      	bne.n	800b6ce <tcp_input+0x8de>
 800b710:	e4a8      	b.n	800b064 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b712:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800b716:	b1f6      	cbz	r6, 800b756 <tcp_input+0x966>
 800b718:	4621      	mov	r1, r4
 800b71a:	6920      	ldr	r0, [r4, #16]
 800b71c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800b71e:	f110 0f0d 	cmn.w	r0, #13
 800b722:	f43f ac9f 	beq.w	800b064 <tcp_input+0x274>
          if (err != ERR_OK) {
 800b726:	b108      	cbz	r0, 800b72c <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800b728:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b72a:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800b72c:	7cab      	ldrb	r3, [r5, #18]
 800b72e:	0699      	lsls	r1, r3, #26
 800b730:	d505      	bpl.n	800b73e <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800b732:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b734:	b1ab      	cbz	r3, 800b762 <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b736:	7b5a      	ldrb	r2, [r3, #13]
 800b738:	f042 0220 	orr.w	r2, r2, #32
 800b73c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b73e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800b740:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800b742:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800b744:	f7ff f892 	bl	800a86c <tcp_input_delayed_close>
 800b748:	2800      	cmp	r0, #0
 800b74a:	f47f ac8b 	bne.w	800b064 <tcp_input+0x274>
        tcp_output(pcb);
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 ff2a 	bl	800c5a8 <tcp_output>
 800b754:	e486      	b.n	800b064 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b756:	4633      	mov	r3, r6
 800b758:	4621      	mov	r1, r4
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7fe fd84 	bl	800a268 <tcp_recv_null>
 800b760:	e7dd      	b.n	800b71e <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b762:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b764:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800b768:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b76c:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800b76e:	bf1c      	itt	ne
 800b770:	3301      	addne	r3, #1
 800b772:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b774:	2e00      	cmp	r6, #0
 800b776:	d0e2      	beq.n	800b73e <tcp_input+0x94e>
 800b778:	2300      	movs	r3, #0
 800b77a:	4621      	mov	r1, r4
 800b77c:	6920      	ldr	r0, [r4, #16]
 800b77e:	461a      	mov	r2, r3
 800b780:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800b782:	300d      	adds	r0, #13
 800b784:	d1db      	bne.n	800b73e <tcp_input+0x94e>
 800b786:	e46d      	b.n	800b064 <tcp_input+0x274>
      if (prev != NULL) {
 800b788:	b11c      	cbz	r4, 800b792 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b78a:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b78c:	6007      	str	r7, [r0, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b78e:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b790:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800b792:	7f2b      	ldrb	r3, [r5, #28]
 800b794:	075c      	lsls	r4, r3, #29
 800b796:	f53f abe3 	bmi.w	800af60 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800b79a:	f013 0a10 	ands.w	sl, r3, #16
 800b79e:	f43f ad1a 	beq.w	800b1d6 <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7a2:	880b      	ldrh	r3, [r1, #0]
 800b7a4:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b7a6:	6a2a      	ldr	r2, [r5, #32]
 800b7a8:	e9cd c301 	strd	ip, r3, [sp, #4]
 800b7ac:	4b08      	ldr	r3, [pc, #32]	; (800b7d0 <tcp_input+0x9e0>)
 800b7ae:	4402      	add	r2, r0
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	69a9      	ldr	r1, [r5, #24]
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	e4c2      	b.n	800b140 <tcp_input+0x350>
      if (prev != NULL) {
 800b7ba:	2f00      	cmp	r7, #0
 800b7bc:	f47f ac1a 	bne.w	800aff4 <tcp_input+0x204>
 800b7c0:	e429      	b.n	800b016 <tcp_input+0x226>
 800b7c2:	bf00      	nop
 800b7c4:	0801a571 	.word	0x0801a571
 800b7c8:	0801a8d3 	.word	0x0801a8d3
 800b7cc:	08017fc5 	.word	0x08017fc5
 800b7d0:	2000a6a4 	.word	0x2000a6a4

0800b7d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b7d4:	4a02      	ldr	r2, [pc, #8]	; (800b7e0 <tcp_trigger_input_pcb_close+0xc>)
 800b7d6:	7c93      	ldrb	r3, [r2, #18]
 800b7d8:	f043 0310 	orr.w	r3, r3, #16
 800b7dc:	7493      	strb	r3, [r2, #18]
}
 800b7de:	4770      	bx	lr
 800b7e0:	2000e420 	.word	0x2000e420

0800b7e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b7e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b930      	cbnz	r0, 800b7f8 <tcp_output_segment_busy+0x14>
 800b7ea:	4b06      	ldr	r3, [pc, #24]	; (800b804 <tcp_output_segment_busy+0x20>)
 800b7ec:	f240 529a 	movw	r2, #1434	; 0x59a
 800b7f0:	4905      	ldr	r1, [pc, #20]	; (800b808 <tcp_output_segment_busy+0x24>)
 800b7f2:	4806      	ldr	r0, [pc, #24]	; (800b80c <tcp_output_segment_busy+0x28>)
 800b7f4:	f001 fed8 	bl	800d5a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b7fc:	3801      	subs	r0, #1
 800b7fe:	bf18      	it	ne
 800b800:	2001      	movne	r0, #1
 800b802:	bd10      	pop	{r4, pc}
 800b804:	0801a8ed 	.word	0x0801a8ed
 800b808:	0801a95e 	.word	0x0801a95e
 800b80c:	08017fc5 	.word	0x08017fc5

0800b810 <tcp_pbuf_prealloc>:
{
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	9d08      	ldr	r5, [sp, #32]
 800b816:	4680      	mov	r8, r0
 800b818:	460c      	mov	r4, r1
 800b81a:	4617      	mov	r7, r2
 800b81c:	461e      	mov	r6, r3
 800b81e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b822:	b92d      	cbnz	r5, 800b830 <tcp_pbuf_prealloc+0x20>
 800b824:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <tcp_pbuf_prealloc+0x88>)
 800b826:	22e9      	movs	r2, #233	; 0xe9
 800b828:	491c      	ldr	r1, [pc, #112]	; (800b89c <tcp_pbuf_prealloc+0x8c>)
 800b82a:	481d      	ldr	r0, [pc, #116]	; (800b8a0 <tcp_pbuf_prealloc+0x90>)
 800b82c:	f001 febc 	bl	800d5a8 <iprintf>
  if (length < max_length) {
 800b830:	42bc      	cmp	r4, r7
 800b832:	d22e      	bcs.n	800b892 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b834:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b838:	079a      	lsls	r2, r3, #30
 800b83a:	d409      	bmi.n	800b850 <tcp_pbuf_prealloc+0x40>
 800b83c:	8b6b      	ldrh	r3, [r5, #26]
 800b83e:	065b      	lsls	r3, r3, #25
 800b840:	d427      	bmi.n	800b892 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800b842:	f1b9 0f00 	cmp.w	r9, #0
 800b846:	d003      	beq.n	800b850 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800b848:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b84a:	b90b      	cbnz	r3, 800b850 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800b84c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b84e:	b303      	cbz	r3, 800b892 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b850:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800b854:	f025 0103 	bic.w	r1, r5, #3
 800b858:	42b9      	cmp	r1, r7
 800b85a:	460a      	mov	r2, r1
 800b85c:	bf28      	it	cs
 800b85e:	463a      	movcs	r2, r7
 800b860:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b866:	4640      	mov	r0, r8
 800b868:	f7fd fd5e 	bl	8009328 <pbuf_alloc>
  if (p == NULL) {
 800b86c:	4605      	mov	r5, r0
 800b86e:	b168      	cbz	r0, 800b88c <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b870:	6803      	ldr	r3, [r0, #0]
 800b872:	b133      	cbz	r3, 800b882 <tcp_pbuf_prealloc+0x72>
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <tcp_pbuf_prealloc+0x88>)
 800b876:	f240 120b 	movw	r2, #267	; 0x10b
 800b87a:	490a      	ldr	r1, [pc, #40]	; (800b8a4 <tcp_pbuf_prealloc+0x94>)
 800b87c:	4808      	ldr	r0, [pc, #32]	; (800b8a0 <tcp_pbuf_prealloc+0x90>)
 800b87e:	f001 fe93 	bl	800d5a8 <iprintf>
  *oversize = p->len - length;
 800b882:	896b      	ldrh	r3, [r5, #10]
 800b884:	1b1b      	subs	r3, r3, r4
 800b886:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800b888:	812c      	strh	r4, [r5, #8]
 800b88a:	816c      	strh	r4, [r5, #10]
}
 800b88c:	4628      	mov	r0, r5
 800b88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b892:	4621      	mov	r1, r4
 800b894:	e7e5      	b.n	800b862 <tcp_pbuf_prealloc+0x52>
 800b896:	bf00      	nop
 800b898:	0801a8ed 	.word	0x0801a8ed
 800b89c:	0801a983 	.word	0x0801a983
 800b8a0:	08017fc5 	.word	0x08017fc5
 800b8a4:	0801a9a2 	.word	0x0801a9a2

0800b8a8 <tcp_create_segment>:
{
 800b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	460e      	mov	r6, r1
 800b8ae:	4690      	mov	r8, r2
 800b8b0:	4699      	mov	r9, r3
 800b8b2:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b8b6:	4607      	mov	r7, r0
 800b8b8:	b928      	cbnz	r0, 800b8c6 <tcp_create_segment+0x1e>
 800b8ba:	4b2f      	ldr	r3, [pc, #188]	; (800b978 <tcp_create_segment+0xd0>)
 800b8bc:	22a3      	movs	r2, #163	; 0xa3
 800b8be:	492f      	ldr	r1, [pc, #188]	; (800b97c <tcp_create_segment+0xd4>)
 800b8c0:	482f      	ldr	r0, [pc, #188]	; (800b980 <tcp_create_segment+0xd8>)
 800b8c2:	f001 fe71 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b8c6:	b92e      	cbnz	r6, 800b8d4 <tcp_create_segment+0x2c>
 800b8c8:	4b2b      	ldr	r3, [pc, #172]	; (800b978 <tcp_create_segment+0xd0>)
 800b8ca:	22a4      	movs	r2, #164	; 0xa4
 800b8cc:	492d      	ldr	r1, [pc, #180]	; (800b984 <tcp_create_segment+0xdc>)
 800b8ce:	482c      	ldr	r0, [pc, #176]	; (800b980 <tcp_create_segment+0xd8>)
 800b8d0:	f001 fe6a 	bl	800d5a8 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8d4:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b8d8:	2003      	movs	r0, #3
 800b8da:	f7fd fa2d 	bl	8008d38 <memp_malloc>
 800b8de:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8e0:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b8e4:	b928      	cbnz	r0, 800b8f2 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7fd fcb6 	bl	8009258 <pbuf_free>
}
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800b8f2:	2300      	movs	r3, #0
  seg->flags = optflags;
 800b8f4:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b8f8:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800b8fc:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b900:	8933      	ldrh	r3, [r6, #8]
 800b902:	42ab      	cmp	r3, r5
 800b904:	d205      	bcs.n	800b912 <tcp_create_segment+0x6a>
 800b906:	4b1c      	ldr	r3, [pc, #112]	; (800b978 <tcp_create_segment+0xd0>)
 800b908:	22b0      	movs	r2, #176	; 0xb0
 800b90a:	491f      	ldr	r1, [pc, #124]	; (800b988 <tcp_create_segment+0xe0>)
 800b90c:	481c      	ldr	r0, [pc, #112]	; (800b980 <tcp_create_segment+0xd8>)
 800b90e:	f001 fe4b 	bl	800d5a8 <iprintf>
  seg->len = p->tot_len - optlen;
 800b912:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b914:	4630      	mov	r0, r6
 800b916:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800b918:	eba3 030a 	sub.w	r3, r3, sl
 800b91c:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b91e:	f7fd fc63 	bl	80091e8 <pbuf_add_header>
 800b922:	4606      	mov	r6, r0
 800b924:	b120      	cbz	r0, 800b930 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800b926:	4620      	mov	r0, r4
    return NULL;
 800b928:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800b92a:	f7fe f8c9 	bl	8009ac0 <tcp_seg_free>
    return NULL;
 800b92e:	e7dd      	b.n	800b8ec <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b930:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b932:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b934:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b936:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b93a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b93e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b942:	f7fc fec9 	bl	80086d8 <lwip_htons>
 800b946:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b94a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b94e:	8b38      	ldrh	r0, [r7, #24]
 800b950:	f7fc fec2 	bl	80086d8 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b954:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b956:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b95a:	4648      	mov	r0, r9
 800b95c:	f7fc febf 	bl	80086de <lwip_htonl>
 800b960:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b962:	ea45 0008 	orr.w	r0, r5, r8
 800b966:	68e7      	ldr	r7, [r4, #12]
 800b968:	f7fc feb6 	bl	80086d8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800b96c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b96e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800b970:	749e      	strb	r6, [r3, #18]
 800b972:	74de      	strb	r6, [r3, #19]
  return seg;
 800b974:	e7ba      	b.n	800b8ec <tcp_create_segment+0x44>
 800b976:	bf00      	nop
 800b978:	0801a8ed 	.word	0x0801a8ed
 800b97c:	0801a9b6 	.word	0x0801a9b6
 800b980:	08017fc5 	.word	0x08017fc5
 800b984:	0801a9d6 	.word	0x0801a9d6
 800b988:	0801a9f7 	.word	0x0801a9f7

0800b98c <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b98c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b992:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b994:	4606      	mov	r6, r0
 800b996:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b998:	2022      	movs	r0, #34	; 0x22
 800b99a:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b99e:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b9a0:	f7fd fcc2 	bl	8009328 <pbuf_alloc>
  if (p != NULL) {
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	b348      	cbz	r0, 800b9fc <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b9a8:	8943      	ldrh	r3, [r0, #10]
 800b9aa:	2b13      	cmp	r3, #19
 800b9ac:	d806      	bhi.n	800b9bc <tcp_output_alloc_header_common.constprop.0+0x30>
 800b9ae:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800b9b0:	f240 7223 	movw	r2, #1827	; 0x723
 800b9b4:	4914      	ldr	r1, [pc, #80]	; (800ba08 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800b9b6:	4815      	ldr	r0, [pc, #84]	; (800ba0c <tcp_output_alloc_header_common.constprop.0+0x80>)
 800b9b8:	f001 fdf6 	bl	800d5a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b9bc:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f7fc fe8a 	bl	80086d8 <lwip_htons>
 800b9c4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b9c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b9ca:	f7fc fe85 	bl	80086d8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800b9ce:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800b9d0:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7fc fe83 	bl	80086de <lwip_htonl>
 800b9d8:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b9da:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b9de:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800b9e2:	f7fc fe79 	bl	80086d8 <lwip_htons>
 800b9e6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b9e8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800b9ec:	f7fc fe74 	bl	80086d8 <lwip_htons>
    tcphdr->chksum = 0;
 800b9f0:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800b9f2:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800b9f4:	7423      	strb	r3, [r4, #16]
 800b9f6:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800b9f8:	74a3      	strb	r3, [r4, #18]
 800b9fa:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	bf00      	nop
 800ba04:	0801a8ed 	.word	0x0801a8ed
 800ba08:	0801aa0c 	.word	0x0801aa0c
 800ba0c:	08017fc5 	.word	0x08017fc5

0800ba10 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ba10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ba12:	460d      	mov	r5, r1
 800ba14:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ba16:	4604      	mov	r4, r0
 800ba18:	b930      	cbnz	r0, 800ba28 <tcp_output_alloc_header.constprop.0+0x18>
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <tcp_output_alloc_header.constprop.0+0x40>)
 800ba1c:	f240 7242 	movw	r2, #1858	; 0x742
 800ba20:	490c      	ldr	r1, [pc, #48]	; (800ba54 <tcp_output_alloc_header.constprop.0+0x44>)
 800ba22:	480d      	ldr	r0, [pc, #52]	; (800ba58 <tcp_output_alloc_header.constprop.0+0x48>)
 800ba24:	f001 fdc0 	bl	800d5a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ba28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	9302      	str	r3, [sp, #8]
 800ba30:	2310      	movs	r3, #16
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	8b23      	ldrh	r3, [r4, #24]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	8ae3      	ldrh	r3, [r4, #22]
 800ba3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba3c:	f7ff ffa6 	bl	800b98c <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ba40:	b118      	cbz	r0, 800ba4a <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ba42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ba44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba46:	4413      	add	r3, r2
 800ba48:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800ba4a:	b004      	add	sp, #16
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	bf00      	nop
 800ba50:	0801a8ed 	.word	0x0801a8ed
 800ba54:	0801aa3a 	.word	0x0801aa3a
 800ba58:	08017fc5 	.word	0x08017fc5

0800ba5c <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ba5c:	b930      	cbnz	r0, 800ba6c <tcp_output_fill_options.constprop.0+0x10>
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <tcp_output_fill_options.constprop.0+0x14>)
 800ba60:	f240 7256 	movw	r2, #1878	; 0x756
 800ba64:	4903      	ldr	r1, [pc, #12]	; (800ba74 <tcp_output_fill_options.constprop.0+0x18>)
 800ba66:	4804      	ldr	r0, [pc, #16]	; (800ba78 <tcp_output_fill_options.constprop.0+0x1c>)
 800ba68:	f001 bd9e 	b.w	800d5a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	0801a8ed 	.word	0x0801a8ed
 800ba74:	0801aa5f 	.word	0x0801aa5f
 800ba78:	08017fc5 	.word	0x08017fc5

0800ba7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7e:	4604      	mov	r4, r0
 800ba80:	b085      	sub	sp, #20
 800ba82:	4617      	mov	r7, r2
 800ba84:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ba86:	460d      	mov	r5, r1
 800ba88:	b931      	cbnz	r1, 800ba98 <tcp_output_control_segment+0x1c>
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <tcp_output_control_segment+0x64>)
 800ba8c:	f240 7287 	movw	r2, #1927	; 0x787
 800ba90:	4914      	ldr	r1, [pc, #80]	; (800bae4 <tcp_output_control_segment+0x68>)
 800ba92:	4815      	ldr	r0, [pc, #84]	; (800bae8 <tcp_output_control_segment+0x6c>)
 800ba94:	f001 fd88 	bl	800d5a8 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ba98:	b164      	cbz	r4, 800bab4 <tcp_output_control_segment+0x38>
 800ba9a:	7a20      	ldrb	r0, [r4, #8]
 800ba9c:	b150      	cbz	r0, 800bab4 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800ba9e:	f7fd fb21 	bl	80090e4 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800baa2:	b968      	cbnz	r0, 800bac0 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800baa4:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800baa8:	4628      	mov	r0, r5
 800baaa:	f7fd fbd5 	bl	8009258 <pbuf_free>
  return err;
}
 800baae:	4620      	mov	r0, r4
 800bab0:	b005      	add	sp, #20
 800bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7fc f89b 	bl	8007bf0 <ip4_route>
  if (netif == NULL) {
 800baba:	2800      	cmp	r0, #0
 800babc:	d0f2      	beq.n	800baa4 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800babe:	b164      	cbz	r4, 800bada <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800bac0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800bac2:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bac4:	2206      	movs	r2, #6
 800bac6:	9002      	str	r0, [sp, #8]
 800bac8:	4639      	mov	r1, r7
 800baca:	4628      	mov	r0, r5
 800bacc:	e9cd 4200 	strd	r4, r2, [sp]
 800bad0:	4632      	mov	r2, r6
 800bad2:	f7fc f9fb 	bl	8007ecc <ip4_output_if>
 800bad6:	4604      	mov	r4, r0
 800bad8:	e7e6      	b.n	800baa8 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800bada:	23ff      	movs	r3, #255	; 0xff
 800badc:	e7f2      	b.n	800bac4 <tcp_output_control_segment+0x48>
 800bade:	bf00      	nop
 800bae0:	0801a8ed 	.word	0x0801a8ed
 800bae4:	0801aa85 	.word	0x0801aa85
 800bae8:	08017fc5 	.word	0x08017fc5

0800baec <tcp_write>:
{
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	ed2d 8b02 	vpush	{d8}
 800baf4:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800baf6:	4604      	mov	r4, r0
{
 800baf8:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800bafa:	2300      	movs	r3, #0
{
 800bafc:	9107      	str	r1, [sp, #28]
 800bafe:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800bb00:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb04:	b968      	cbnz	r0, 800bb22 <tcp_write+0x36>
 800bb06:	4baa      	ldr	r3, [pc, #680]	; (800bdb0 <tcp_write+0x2c4>)
 800bb08:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bb0c:	49a9      	ldr	r1, [pc, #676]	; (800bdb4 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bb0e:	48aa      	ldr	r0, [pc, #680]	; (800bdb8 <tcp_write+0x2cc>)
 800bb10:	f001 fd4a 	bl	800d5a8 <iprintf>
 800bb14:	f06f 000f 	mvn.w	r0, #15
}
 800bb18:	b00f      	add	sp, #60	; 0x3c
 800bb1a:	ecbd 8b02 	vpop	{d8}
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bb22:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800bb26:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800bb28:	085b      	lsrs	r3, r3, #1
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	bf28      	it	cs
 800bb2e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bf08      	it	eq
 800bb34:	4613      	moveq	r3, r2
 800bb36:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bb38:	9b07      	ldr	r3, [sp, #28]
 800bb3a:	b923      	cbnz	r3, 800bb46 <tcp_write+0x5a>
 800bb3c:	4b9c      	ldr	r3, [pc, #624]	; (800bdb0 <tcp_write+0x2c4>)
 800bb3e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800bb42:	499e      	ldr	r1, [pc, #632]	; (800bdbc <tcp_write+0x2d0>)
 800bb44:	e7e3      	b.n	800bb0e <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800bb46:	7d03      	ldrb	r3, [r0, #20]
 800bb48:	2b07      	cmp	r3, #7
 800bb4a:	d003      	beq.n	800bb54 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800bb4c:	3b02      	subs	r3, #2
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	f200 8259 	bhi.w	800c006 <tcp_write+0x51a>
  } else if (len == 0) {
 800bb54:	9b04      	ldr	r3, [sp, #16]
 800bb56:	b1db      	cbz	r3, 800bb90 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800bb58:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bb5c:	9a04      	ldr	r2, [sp, #16]
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d206      	bcs.n	800bb70 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb62:	8b63      	ldrh	r3, [r4, #26]
 800bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb68:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800bb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6e:	e7d3      	b.n	800bb18 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bb70:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800bb74:	2a07      	cmp	r2, #7
 800bb76:	d8f4      	bhi.n	800bb62 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bb78:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800bb7a:	b302      	cbz	r2, 800bbbe <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bb7c:	b943      	cbnz	r3, 800bb90 <tcp_write+0xa4>
 800bb7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bb80:	b933      	cbnz	r3, 800bb90 <tcp_write+0xa4>
 800bb82:	4b8b      	ldr	r3, [pc, #556]	; (800bdb0 <tcp_write+0x2c4>)
 800bb84:	f240 1255 	movw	r2, #341	; 0x155
 800bb88:	498d      	ldr	r1, [pc, #564]	; (800bdc0 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb8a:	488b      	ldr	r0, [pc, #556]	; (800bdb8 <tcp_write+0x2cc>)
 800bb8c:	f001 fd0c 	bl	800d5a8 <iprintf>
  queuelen = pcb->snd_queuelen;
 800bb90:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bb94:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800bb96:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800bb98:	b9de      	cbnz	r6, 800bbd2 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bb9a:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800bb9e:	2f00      	cmp	r7, #0
 800bba0:	f000 81ba 	beq.w	800bf18 <tcp_write+0x42c>
 800bba4:	4b82      	ldr	r3, [pc, #520]	; (800bdb0 <tcp_write+0x2c4>)
 800bba6:	f240 224a 	movw	r2, #586	; 0x24a
 800bbaa:	4986      	ldr	r1, [pc, #536]	; (800bdc4 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bbac:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bbae:	4882      	ldr	r0, [pc, #520]	; (800bdb8 <tcp_write+0x2cc>)
  struct pbuf *concat_p = NULL;
 800bbb0:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800bbb2:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800bbb4:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800bbb6:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bbb8:	f001 fcf6 	bl	800d5a8 <iprintf>
 800bbbc:	e088      	b.n	800bcd0 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bbbe:	b913      	cbnz	r3, 800bbc6 <tcp_write+0xda>
 800bbc0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0e4      	beq.n	800bb90 <tcp_write+0xa4>
 800bbc6:	4b7a      	ldr	r3, [pc, #488]	; (800bdb0 <tcp_write+0x2c4>)
 800bbc8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800bbcc:	497e      	ldr	r1, [pc, #504]	; (800bdc8 <tcp_write+0x2dc>)
 800bbce:	e7dc      	b.n	800bb8a <tcp_write+0x9e>
 800bbd0:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bbd2:	f8d6 a000 	ldr.w	sl, [r6]
 800bbd6:	46b0      	mov	r8, r6
 800bbd8:	f1ba 0f00 	cmp.w	sl, #0
 800bbdc:	d1f8      	bne.n	800bbd0 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bbde:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bbe0:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bbe2:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bbe4:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bbe6:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bbea:	442b      	add	r3, r5
 800bbec:	429a      	cmp	r2, r3
 800bbee:	da06      	bge.n	800bbfe <tcp_write+0x112>
 800bbf0:	4b6f      	ldr	r3, [pc, #444]	; (800bdb0 <tcp_write+0x2c4>)
 800bbf2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bbf6:	4975      	ldr	r1, [pc, #468]	; (800bdcc <tcp_write+0x2e0>)
 800bbf8:	486f      	ldr	r0, [pc, #444]	; (800bdb8 <tcp_write+0x2cc>)
 800bbfa:	f001 fcd5 	bl	800d5a8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bbfe:	8937      	ldrh	r7, [r6, #8]
 800bc00:	9b06      	ldr	r3, [sp, #24]
 800bc02:	1bdf      	subs	r7, r3, r7
 800bc04:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800bc06:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bc0a:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800bc0c:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d066      	beq.n	800bce2 <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bc14:	42bd      	cmp	r5, r7
 800bc16:	d906      	bls.n	800bc26 <tcp_write+0x13a>
 800bc18:	4b65      	ldr	r3, [pc, #404]	; (800bdb0 <tcp_write+0x2c4>)
 800bc1a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bc1e:	496c      	ldr	r1, [pc, #432]	; (800bdd0 <tcp_write+0x2e4>)
 800bc20:	4865      	ldr	r0, [pc, #404]	; (800bdb8 <tcp_write+0x2cc>)
 800bc22:	f001 fcc1 	bl	800d5a8 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bc26:	9d04      	ldr	r5, [sp, #16]
 800bc28:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800bc2c:	429d      	cmp	r5, r3
 800bc2e:	bf28      	it	cs
 800bc30:	461d      	movcs	r5, r3
 800bc32:	42bd      	cmp	r5, r7
 800bc34:	bf28      	it	cs
 800bc36:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800bc38:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800bc3a:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800bc3c:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800bc3e:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800bc40:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bc44:	b153      	cbz	r3, 800bc5c <tcp_write+0x170>
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	f000 816a 	beq.w	800bf22 <tcp_write+0x436>
 800bc4e:	4b58      	ldr	r3, [pc, #352]	; (800bdb0 <tcp_write+0x2c4>)
 800bc50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc54:	495f      	ldr	r1, [pc, #380]	; (800bdd4 <tcp_write+0x2e8>)
 800bc56:	4858      	ldr	r0, [pc, #352]	; (800bdb8 <tcp_write+0x2cc>)
 800bc58:	f001 fca6 	bl	800d5a8 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bc5c:	9b04      	ldr	r3, [sp, #16]
 800bc5e:	429d      	cmp	r5, r3
 800bc60:	f080 815f 	bcs.w	800bf22 <tcp_write+0x436>
 800bc64:	2f00      	cmp	r7, #0
 800bc66:	f000 8154 	beq.w	800bf12 <tcp_write+0x426>
 800bc6a:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800bc6e:	f1b9 0f00 	cmp.w	r9, #0
 800bc72:	f000 814f 	beq.w	800bf14 <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bc76:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc7a:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bc7c:	45b9      	cmp	r9, r7
 800bc7e:	bfa8      	it	ge
 800bc80:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc82:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bc84:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc88:	d52d      	bpl.n	800bce6 <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	4631      	mov	r1, r6
 800bc90:	2000      	movs	r0, #0
 800bc92:	9302      	str	r3, [sp, #8]
 800bc94:	9b08      	ldr	r3, [sp, #32]
 800bc96:	e9cd 4300 	strd	r4, r3, [sp]
 800bc9a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800bc9e:	f7ff fdb7 	bl	800b810 <tcp_pbuf_prealloc>
 800bca2:	4683      	mov	fp, r0
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f000 81ab 	beq.w	800c000 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bcaa:	9b07      	ldr	r3, [sp, #28]
 800bcac:	4632      	mov	r2, r6
 800bcae:	6840      	ldr	r0, [r0, #4]
 800bcb0:	1959      	adds	r1, r3, r5
 800bcb2:	f001 fc49 	bl	800d548 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800bcb6:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800bcb8:	f7fd fc0a 	bl	80094d0 <pbuf_clen>
 800bcbc:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800bcbe:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800bcc2:	4403      	add	r3, r0
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800bcc8:	19af      	adds	r7, r5, r6
 800bcca:	46da      	mov	sl, fp
 800bccc:	4646      	mov	r6, r8
 800bcce:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcd0:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800bcd2:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcd6:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800bcda:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcde:	930a      	str	r3, [sp, #40]	; 0x28
 800bce0:	e0e6      	b.n	800beb0 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bce2:	462e      	mov	r6, r5
 800bce4:	e7ba      	b.n	800bc5c <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bce6:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bcea:	465a      	mov	r2, fp
 800bcec:	f8db b000 	ldr.w	fp, [fp]
 800bcf0:	f1bb 0f00 	cmp.w	fp, #0
 800bcf4:	d1f9      	bne.n	800bcea <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bcf6:	7b13      	ldrb	r3, [r2, #12]
 800bcf8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800bcfc:	d10f      	bne.n	800bd1e <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bcfe:	8951      	ldrh	r1, [r2, #10]
 800bd00:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bd02:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bd04:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d109      	bne.n	800bd1e <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bd0a:	b135      	cbz	r5, 800bd1a <tcp_write+0x22e>
 800bd0c:	4b28      	ldr	r3, [pc, #160]	; (800bdb0 <tcp_write+0x2c4>)
 800bd0e:	f240 2231 	movw	r2, #561	; 0x231
 800bd12:	4931      	ldr	r1, [pc, #196]	; (800bdd8 <tcp_write+0x2ec>)
 800bd14:	4828      	ldr	r0, [pc, #160]	; (800bdb8 <tcp_write+0x2cc>)
 800bd16:	f001 fc47 	bl	800d5a8 <iprintf>
          extendlen = seglen;
 800bd1a:	46b1      	mov	r9, r6
 800bd1c:	e7d4      	b.n	800bcc8 <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bd1e:	2201      	movs	r2, #1
 800bd20:	4631      	mov	r1, r6
 800bd22:	2000      	movs	r0, #0
 800bd24:	f7fd fb00 	bl	8009328 <pbuf_alloc>
 800bd28:	4683      	mov	fp, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f000 8168 	beq.w	800c000 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	442b      	add	r3, r5
 800bd34:	6043      	str	r3, [r0, #4]
 800bd36:	e7bf      	b.n	800bcb8 <tcp_write+0x1cc>
    u16_t left = len - pos;
 800bd38:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bd3a:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800bd3c:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	4293      	cmp	r3, r2
 800bd42:	bf28      	it	cs
 800bd44:	4613      	movcs	r3, r2
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d046      	beq.n	800bde0 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bd52:	fabb f38b 	clz	r3, fp
 800bd56:	ee18 1a10 	vmov	r1, s16
 800bd5a:	2036      	movs	r0, #54	; 0x36
 800bd5c:	095b      	lsrs	r3, r3, #5
 800bd5e:	9302      	str	r3, [sp, #8]
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	e9cd 4300 	strd	r4, r3, [sp]
 800bd66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800bd6a:	f7ff fd51 	bl	800b810 <tcp_pbuf_prealloc>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d056      	beq.n	800be22 <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bd74:	8943      	ldrh	r3, [r0, #10]
 800bd76:	ee18 2a10 	vmov	r2, s16
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d206      	bcs.n	800bd8c <tcp_write+0x2a0>
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <tcp_write+0x2c4>)
 800bd80:	f240 2266 	movw	r2, #614	; 0x266
 800bd84:	4915      	ldr	r1, [pc, #84]	; (800bddc <tcp_write+0x2f0>)
 800bd86:	480c      	ldr	r0, [pc, #48]	; (800bdb8 <tcp_write+0x2cc>)
 800bd88:	f001 fc0e 	bl	800d5a8 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	ee18 2a10 	vmov	r2, s16
 800bd92:	6870      	ldr	r0, [r6, #4]
 800bd94:	19d9      	adds	r1, r3, r7
 800bd96:	f001 fbd7 	bl	800d548 <memcpy>
    queuelen += pbuf_clen(p);
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7fd fb98 	bl	80094d0 <pbuf_clen>
 800bda0:	9b05      	ldr	r3, [sp, #20]
 800bda2:	4403      	add	r3, r0
 800bda4:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bda6:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800bda8:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bdaa:	d963      	bls.n	800be74 <tcp_write+0x388>
      pbuf_free(p);
 800bdac:	4630      	mov	r0, r6
 800bdae:	e036      	b.n	800be1e <tcp_write+0x332>
 800bdb0:	0801a8ed 	.word	0x0801a8ed
 800bdb4:	0801aaae 	.word	0x0801aaae
 800bdb8:	08017fc5 	.word	0x08017fc5
 800bdbc:	0801aac5 	.word	0x0801aac5
 800bdc0:	0801aaf6 	.word	0x0801aaf6
 800bdc4:	0801abe0 	.word	0x0801abe0
 800bdc8:	0801ab30 	.word	0x0801ab30
 800bdcc:	0801ab62 	.word	0x0801ab62
 800bdd0:	0801ab79 	.word	0x0801ab79
 800bdd4:	0801ab99 	.word	0x0801ab99
 800bdd8:	0801abb7 	.word	0x0801abb7
 800bddc:	0801ac0f 	.word	0x0801ac0f
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bde0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800bde4:	b133      	cbz	r3, 800bdf4 <tcp_write+0x308>
 800bde6:	4b89      	ldr	r3, [pc, #548]	; (800c00c <tcp_write+0x520>)
 800bde8:	f240 2271 	movw	r2, #625	; 0x271
 800bdec:	4988      	ldr	r1, [pc, #544]	; (800c010 <tcp_write+0x524>)
 800bdee:	4889      	ldr	r0, [pc, #548]	; (800c014 <tcp_write+0x528>)
 800bdf0:	f001 fbda 	bl	800d5a8 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	ee18 1a10 	vmov	r1, s16
 800bdfa:	2036      	movs	r0, #54	; 0x36
 800bdfc:	f7fd fa94 	bl	8009328 <pbuf_alloc>
 800be00:	b178      	cbz	r0, 800be22 <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800be02:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800be04:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800be06:	900b      	str	r0, [sp, #44]	; 0x2c
 800be08:	443a      	add	r2, r7
 800be0a:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800be0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be10:	2036      	movs	r0, #54	; 0x36
 800be12:	f7fd fa89 	bl	8009328 <pbuf_alloc>
 800be16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be18:	4606      	mov	r6, r0
 800be1a:	bb38      	cbnz	r0, 800be6c <tcp_write+0x380>
        pbuf_free(p2);
 800be1c:	4618      	mov	r0, r3
      pbuf_free(p);
 800be1e:	f7fd fa1b 	bl	8009258 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be22:	8b63      	ldrh	r3, [r4, #26]
 800be24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be28:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800be2a:	f1ba 0f00 	cmp.w	sl, #0
 800be2e:	d002      	beq.n	800be36 <tcp_write+0x34a>
    pbuf_free(concat_p);
 800be30:	4650      	mov	r0, sl
 800be32:	f7fd fa11 	bl	8009258 <pbuf_free>
  if (queue != NULL) {
 800be36:	f1bb 0f00 	cmp.w	fp, #0
 800be3a:	d002      	beq.n	800be42 <tcp_write+0x356>
    tcp_segs_free(queue);
 800be3c:	4658      	mov	r0, fp
 800be3e:	f7fd fe4d 	bl	8009adc <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800be42:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800be46:	2b00      	cmp	r3, #0
 800be48:	f43f ae8f 	beq.w	800bb6a <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800be4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f47f ae8b 	bne.w	800bb6a <tcp_write+0x7e>
 800be54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be56:	2b00      	cmp	r3, #0
 800be58:	f47f ae87 	bne.w	800bb6a <tcp_write+0x7e>
 800be5c:	4b6b      	ldr	r3, [pc, #428]	; (800c00c <tcp_write+0x520>)
 800be5e:	f240 3227 	movw	r2, #807	; 0x327
 800be62:	496d      	ldr	r1, [pc, #436]	; (800c018 <tcp_write+0x52c>)
 800be64:	486b      	ldr	r0, [pc, #428]	; (800c014 <tcp_write+0x528>)
 800be66:	f001 fb9f 	bl	800d5a8 <iprintf>
 800be6a:	e67e      	b.n	800bb6a <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800be6c:	4619      	mov	r1, r3
 800be6e:	f7fd fb53 	bl	8009518 <pbuf_cat>
 800be72:	e792      	b.n	800bd9a <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800be74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800be76:	2200      	movs	r2, #0
 800be78:	4631      	mov	r1, r6
 800be7a:	4620      	mov	r0, r4
 800be7c:	443b      	add	r3, r7
 800be7e:	9200      	str	r2, [sp, #0]
 800be80:	f7ff fd12 	bl	800b8a8 <tcp_create_segment>
 800be84:	4606      	mov	r6, r0
 800be86:	2800      	cmp	r0, #0
 800be88:	d0cb      	beq.n	800be22 <tcp_write+0x336>
    if (queue == NULL) {
 800be8a:	f1bb 0f00 	cmp.w	fp, #0
 800be8e:	d03e      	beq.n	800bf0e <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800be90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be92:	b933      	cbnz	r3, 800bea2 <tcp_write+0x3b6>
 800be94:	4b5d      	ldr	r3, [pc, #372]	; (800c00c <tcp_write+0x520>)
 800be96:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be9a:	4960      	ldr	r1, [pc, #384]	; (800c01c <tcp_write+0x530>)
 800be9c:	485d      	ldr	r0, [pc, #372]	; (800c014 <tcp_write+0x528>)
 800be9e:	f001 fb83 	bl	800d5a8 <iprintf>
      prev_seg->next = seg;
 800bea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea4:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800bea6:	ee18 3a10 	vmov	r3, s16
 800beaa:	9609      	str	r6, [sp, #36]	; 0x24
 800beac:	441f      	add	r7, r3
 800beae:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800beb0:	9b04      	ldr	r3, [sp, #16]
 800beb2:	429f      	cmp	r7, r3
 800beb4:	f4ff af40 	bcc.w	800bd38 <tcp_write+0x24c>
 800beb8:	4657      	mov	r7, sl
 800beba:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800bebc:	b14d      	cbz	r5, 800bed2 <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800bebe:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800bec2:	f1bb 0f00 	cmp.w	fp, #0
 800bec6:	d12f      	bne.n	800bf28 <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800bec8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800becc:	441d      	add	r5, r3
 800bece:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800bed2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800bed6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800beda:	2f00      	cmp	r7, #0
 800bedc:	d03d      	beq.n	800bf5a <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bede:	f1b8 0f00 	cmp.w	r8, #0
 800bee2:	d106      	bne.n	800bef2 <tcp_write+0x406>
 800bee4:	4b49      	ldr	r3, [pc, #292]	; (800c00c <tcp_write+0x520>)
 800bee6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800beea:	494d      	ldr	r1, [pc, #308]	; (800c020 <tcp_write+0x534>)
 800beec:	4849      	ldr	r0, [pc, #292]	; (800c014 <tcp_write+0x528>)
 800beee:	f001 fb5b 	bl	800d5a8 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800bef2:	4639      	mov	r1, r7
 800bef4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bef8:	f7fd fb0e 	bl	8009518 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800befc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800bf00:	893a      	ldrh	r2, [r7, #8]
 800bf02:	4413      	add	r3, r2
 800bf04:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800bf08:	f8c8 a000 	str.w	sl, [r8]
 800bf0c:	e04d      	b.n	800bfaa <tcp_write+0x4be>
 800bf0e:	4683      	mov	fp, r0
 800bf10:	e7c9      	b.n	800bea6 <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800bf12:	46b9      	mov	r9, r7
 800bf14:	462f      	mov	r7, r5
 800bf16:	e6db      	b.n	800bcd0 <tcp_write+0x1e4>
 800bf18:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800bf1a:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bf1c:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800bf1e:	46ba      	mov	sl, r7
 800bf20:	e6d6      	b.n	800bcd0 <tcp_write+0x1e4>
 800bf22:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800bf24:	46b9      	mov	r9, r7
 800bf26:	e7c9      	b.n	800bebc <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800bf28:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800bf2c:	442b      	add	r3, r5
 800bf2e:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800bf32:	f8db 3000 	ldr.w	r3, [fp]
 800bf36:	b96b      	cbnz	r3, 800bf54 <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bf38:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bf3c:	462a      	mov	r2, r5
 800bf3e:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800bf42:	9907      	ldr	r1, [sp, #28]
 800bf44:	4418      	add	r0, r3
 800bf46:	f001 faff 	bl	800d548 <memcpy>
        p->len += oversize_used;
 800bf4a:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800bf4e:	442b      	add	r3, r5
 800bf50:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bf54:	f8db b000 	ldr.w	fp, [fp]
 800bf58:	e7b3      	b.n	800bec2 <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800bf5a:	f1b9 0f00 	cmp.w	r9, #0
 800bf5e:	d01f      	beq.n	800bfa0 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bf60:	f1b8 0f00 	cmp.w	r8, #0
 800bf64:	d002      	beq.n	800bf6c <tcp_write+0x480>
 800bf66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf6a:	b933      	cbnz	r3, 800bf7a <tcp_write+0x48e>
 800bf6c:	4b27      	ldr	r3, [pc, #156]	; (800c00c <tcp_write+0x520>)
 800bf6e:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bf72:	492c      	ldr	r1, [pc, #176]	; (800c024 <tcp_write+0x538>)
 800bf74:	4827      	ldr	r0, [pc, #156]	; (800c014 <tcp_write+0x528>)
 800bf76:	f001 fb17 	bl	800d5a8 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800bf7e:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf80:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800bf82:	444a      	add	r2, r9
 800bf84:	b292      	uxth	r2, r2
 800bf86:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf88:	b941      	cbnz	r1, 800bf9c <tcp_write+0x4b0>
    p->len += extendlen;
 800bf8a:	895a      	ldrh	r2, [r3, #10]
 800bf8c:	444a      	add	r2, r9
 800bf8e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bf90:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800bf94:	4499      	add	r9, r3
 800bf96:	f8a8 9008 	strh.w	r9, [r8, #8]
 800bf9a:	e7b5      	b.n	800bf08 <tcp_write+0x41c>
      p->tot_len += extendlen;
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	e7ee      	b.n	800bf7e <tcp_write+0x492>
  if (last_unsent == NULL) {
 800bfa0:	f1b8 0f00 	cmp.w	r8, #0
 800bfa4:	d1b0      	bne.n	800bf08 <tcp_write+0x41c>
    pcb->unsent = queue;
 800bfa6:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800bfaa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bfac:	9a04      	ldr	r2, [sp, #16]
 800bfae:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800bfb0:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800bfb4:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800bfba:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800bfbc:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bfc0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bfc4:	b153      	cbz	r3, 800bfdc <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bfc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bfc8:	b943      	cbnz	r3, 800bfdc <tcp_write+0x4f0>
 800bfca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bfcc:	b933      	cbnz	r3, 800bfdc <tcp_write+0x4f0>
 800bfce:	4b0f      	ldr	r3, [pc, #60]	; (800c00c <tcp_write+0x520>)
 800bfd0:	f240 3212 	movw	r2, #786	; 0x312
 800bfd4:	4910      	ldr	r1, [pc, #64]	; (800c018 <tcp_write+0x52c>)
 800bfd6:	480f      	ldr	r0, [pc, #60]	; (800c014 <tcp_write+0x528>)
 800bfd8:	f001 fae6 	bl	800d5a8 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bfdc:	b176      	cbz	r6, 800bffc <tcp_write+0x510>
 800bfde:	68f0      	ldr	r0, [r6, #12]
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f43f ad99 	beq.w	800bb18 <tcp_write+0x2c>
 800bfe6:	9b08      	ldr	r3, [sp, #32]
 800bfe8:	f013 0402 	ands.w	r4, r3, #2
 800bfec:	d106      	bne.n	800bffc <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bfee:	8985      	ldrh	r5, [r0, #12]
 800bff0:	2008      	movs	r0, #8
 800bff2:	f7fc fb71 	bl	80086d8 <lwip_htons>
 800bff6:	68f3      	ldr	r3, [r6, #12]
 800bff8:	4328      	orrs	r0, r5
 800bffa:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800bffc:	2000      	movs	r0, #0
 800bffe:	e58b      	b.n	800bb18 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c000:	f04f 0b00 	mov.w	fp, #0
 800c004:	e70d      	b.n	800be22 <tcp_write+0x336>
    return ERR_CONN;
 800c006:	f06f 000a 	mvn.w	r0, #10
 800c00a:	e585      	b.n	800bb18 <tcp_write+0x2c>
 800c00c:	0801a8ed 	.word	0x0801a8ed
 800c010:	0801ac4d 	.word	0x0801ac4d
 800c014:	08017fc5 	.word	0x08017fc5
 800c018:	0801acd9 	.word	0x0801acd9
 800c01c:	0801ac5b 	.word	0x0801ac5b
 800c020:	0801ac6c 	.word	0x0801ac6c
 800c024:	0801aca4 	.word	0x0801aca4

0800c028 <tcp_split_unsent_seg>:
{
 800c028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c02e:	4606      	mov	r6, r0
 800c030:	b930      	cbnz	r0, 800c040 <tcp_split_unsent_seg+0x18>
 800c032:	4b5d      	ldr	r3, [pc, #372]	; (800c1a8 <tcp_split_unsent_seg+0x180>)
 800c034:	f240 324b 	movw	r2, #843	; 0x34b
 800c038:	495c      	ldr	r1, [pc, #368]	; (800c1ac <tcp_split_unsent_seg+0x184>)
 800c03a:	485d      	ldr	r0, [pc, #372]	; (800c1b0 <tcp_split_unsent_seg+0x188>)
 800c03c:	f001 fab4 	bl	800d5a8 <iprintf>
  useg = pcb->unsent;
 800c040:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800c042:	b914      	cbnz	r4, 800c04a <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e009      	b.n	800c05e <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800c04a:	b95d      	cbnz	r5, 800c064 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c04c:	4b56      	ldr	r3, [pc, #344]	; (800c1a8 <tcp_split_unsent_seg+0x180>)
 800c04e:	f240 3253 	movw	r2, #851	; 0x353
 800c052:	4958      	ldr	r1, [pc, #352]	; (800c1b4 <tcp_split_unsent_seg+0x18c>)
 800c054:	4856      	ldr	r0, [pc, #344]	; (800c1b0 <tcp_split_unsent_seg+0x188>)
 800c056:	f001 faa7 	bl	800d5a8 <iprintf>
    return ERR_VAL;
 800c05a:	f06f 0005 	mvn.w	r0, #5
}
 800c05e:	b003      	add	sp, #12
 800c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800c064:	8923      	ldrh	r3, [r4, #8]
 800c066:	42ab      	cmp	r3, r5
 800c068:	d801      	bhi.n	800c06e <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800c06a:	2000      	movs	r0, #0
 800c06c:	e7f7      	b.n	800c05e <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c06e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800c070:	42ab      	cmp	r3, r5
 800c072:	d20f      	bcs.n	800c094 <tcp_split_unsent_seg+0x6c>
 800c074:	4b4c      	ldr	r3, [pc, #304]	; (800c1a8 <tcp_split_unsent_seg+0x180>)
 800c076:	f240 325b 	movw	r2, #859	; 0x35b
 800c07a:	494f      	ldr	r1, [pc, #316]	; (800c1b8 <tcp_split_unsent_seg+0x190>)
 800c07c:	484c      	ldr	r0, [pc, #304]	; (800c1b0 <tcp_split_unsent_seg+0x188>)
 800c07e:	f001 fa93 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c082:	8923      	ldrh	r3, [r4, #8]
 800c084:	b933      	cbnz	r3, 800c094 <tcp_split_unsent_seg+0x6c>
 800c086:	4b48      	ldr	r3, [pc, #288]	; (800c1a8 <tcp_split_unsent_seg+0x180>)
 800c088:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c08c:	494b      	ldr	r1, [pc, #300]	; (800c1bc <tcp_split_unsent_seg+0x194>)
 800c08e:	4848      	ldr	r0, [pc, #288]	; (800c1b0 <tcp_split_unsent_seg+0x188>)
 800c090:	f001 fa8a 	bl	800d5a8 <iprintf>
  optflags = useg->flags;
 800c094:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c098:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800c09c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c0a0:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c0a2:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800c0a6:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c0aa:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800c0ae:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c0b2:	fa17 f181 	uxtah	r1, r7, r1
 800c0b6:	b289      	uxth	r1, r1
 800c0b8:	f7fd f936 	bl	8009328 <pbuf_alloc>
  if (p == NULL) {
 800c0bc:	4681      	mov	r9, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0c0      	beq.n	800c044 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800c0c2:	6860      	ldr	r0, [r4, #4]
 800c0c4:	8922      	ldrh	r2, [r4, #8]
 800c0c6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800c0cc:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800c0d2:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f7fd fae5 	bl	80096a4 <pbuf_copy_partial>
 800c0da:	4540      	cmp	r0, r8
 800c0dc:	d160      	bne.n	800c1a0 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0de:	68e3      	ldr	r3, [r4, #12]
 800c0e0:	8998      	ldrh	r0, [r3, #12]
 800c0e2:	f7fc faf9 	bl	80086d8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800c0e6:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0ea:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800c0ec:	bf16      	itet	ne
 800c0ee:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0f2:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c0f6:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800c0fa:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0fc:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800c0fe:	bf48      	it	mi
 800c100:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c104:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800c106:	bf48      	it	mi
 800c108:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c10c:	f7fc fae7 	bl	80086de <lwip_htonl>
 800c110:	4642      	mov	r2, r8
 800c112:	182b      	adds	r3, r5, r0
 800c114:	4649      	mov	r1, r9
 800c116:	4630      	mov	r0, r6
 800c118:	f8cd b000 	str.w	fp, [sp]
 800c11c:	f7ff fbc4 	bl	800b8a8 <tcp_create_segment>
  if (seg == NULL) {
 800c120:	4680      	mov	r8, r0
 800c122:	2800      	cmp	r0, #0
 800c124:	d03c      	beq.n	800c1a0 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c126:	6860      	ldr	r0, [r4, #4]
 800c128:	eba5 050a 	sub.w	r5, r5, sl
 800c12c:	f7fd f9d0 	bl	80094d0 <pbuf_clen>
 800c130:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c134:	fa1f f985 	uxth.w	r9, r5
 800c138:	1a18      	subs	r0, r3, r0
 800c13a:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c13e:	6860      	ldr	r0, [r4, #4]
 800c140:	8901      	ldrh	r1, [r0, #8]
 800c142:	fa11 f185 	uxtah	r1, r1, r5
 800c146:	b289      	uxth	r1, r1
 800c148:	f7fd f96a 	bl	8009420 <pbuf_realloc>
  useg->len -= remainder;
 800c14c:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c14e:	4638      	mov	r0, r7
  useg->len -= remainder;
 800c150:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c152:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800c154:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c158:	899d      	ldrh	r5, [r3, #12]
 800c15a:	f7fc fabd 	bl	80086d8 <lwip_htons>
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	4328      	orrs	r0, r5
 800c162:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c164:	6860      	ldr	r0, [r4, #4]
 800c166:	f7fd f9b3 	bl	80094d0 <pbuf_clen>
 800c16a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c16e:	4418      	add	r0, r3
 800c170:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c174:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c178:	f7fd f9aa 	bl	80094d0 <pbuf_clen>
 800c17c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c180:	4418      	add	r0, r3
  seg->next = useg->next;
 800c182:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c184:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800c188:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800c18c:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800c190:	f8d8 0000 	ldr.w	r0, [r8]
 800c194:	2800      	cmp	r0, #0
 800c196:	f47f af68 	bne.w	800c06a <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800c19a:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800c19e:	e75e      	b.n	800c05e <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800c1a0:	4648      	mov	r0, r9
 800c1a2:	f7fd f859 	bl	8009258 <pbuf_free>
 800c1a6:	e74d      	b.n	800c044 <tcp_split_unsent_seg+0x1c>
 800c1a8:	0801a8ed 	.word	0x0801a8ed
 800c1ac:	0801acf7 	.word	0x0801acf7
 800c1b0:	08017fc5 	.word	0x08017fc5
 800c1b4:	0801ad19 	.word	0x0801ad19
 800c1b8:	0801ad3b 	.word	0x0801ad3b
 800c1bc:	0801ad48 	.word	0x0801ad48

0800c1c0 <tcp_enqueue_flags>:
{
 800c1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c1c4:	f011 0803 	ands.w	r8, r1, #3
{
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c1cc:	d106      	bne.n	800c1dc <tcp_enqueue_flags+0x1c>
 800c1ce:	4b3e      	ldr	r3, [pc, #248]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c1d0:	f240 4211 	movw	r2, #1041	; 0x411
 800c1d4:	493d      	ldr	r1, [pc, #244]	; (800c2cc <tcp_enqueue_flags+0x10c>)
 800c1d6:	483e      	ldr	r0, [pc, #248]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c1d8:	f001 f9e6 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c1dc:	b934      	cbnz	r4, 800c1ec <tcp_enqueue_flags+0x2c>
 800c1de:	4b3a      	ldr	r3, [pc, #232]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c1e0:	f240 4213 	movw	r2, #1043	; 0x413
 800c1e4:	493b      	ldr	r1, [pc, #236]	; (800c2d4 <tcp_enqueue_flags+0x114>)
 800c1e6:	483a      	ldr	r0, [pc, #232]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c1e8:	f001 f9de 	bl	800d5a8 <iprintf>
  if (flags & TCP_SYN) {
 800c1ec:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1f4:	2036      	movs	r0, #54	; 0x36
 800c1f6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7fd f894 	bl	8009328 <pbuf_alloc>
 800c200:	4605      	mov	r5, r0
 800c202:	b940      	cbnz	r0, 800c216 <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c204:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800c206:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20e:	8363      	strh	r3, [r4, #26]
}
 800c210:	b003      	add	sp, #12
 800c212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c216:	8943      	ldrh	r3, [r0, #10]
 800c218:	454b      	cmp	r3, r9
 800c21a:	d206      	bcs.n	800c22a <tcp_enqueue_flags+0x6a>
 800c21c:	4b2a      	ldr	r3, [pc, #168]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c21e:	f240 4239 	movw	r2, #1081	; 0x439
 800c222:	492d      	ldr	r1, [pc, #180]	; (800c2d8 <tcp_enqueue_flags+0x118>)
 800c224:	482a      	ldr	r0, [pc, #168]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c226:	f001 f9bf 	bl	800d5a8 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c22a:	4629      	mov	r1, r5
 800c22c:	9700      	str	r7, [sp, #0]
 800c22e:	4632      	mov	r2, r6
 800c230:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c232:	4620      	mov	r0, r4
 800c234:	f7ff fb38 	bl	800b8a8 <tcp_create_segment>
 800c238:	4605      	mov	r5, r0
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d0e2      	beq.n	800c204 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c23e:	68c3      	ldr	r3, [r0, #12]
 800c240:	079a      	lsls	r2, r3, #30
 800c242:	d006      	beq.n	800c252 <tcp_enqueue_flags+0x92>
 800c244:	4b20      	ldr	r3, [pc, #128]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c246:	f240 4242 	movw	r2, #1090	; 0x442
 800c24a:	4924      	ldr	r1, [pc, #144]	; (800c2dc <tcp_enqueue_flags+0x11c>)
 800c24c:	4820      	ldr	r0, [pc, #128]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c24e:	f001 f9ab 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c252:	892b      	ldrh	r3, [r5, #8]
 800c254:	b133      	cbz	r3, 800c264 <tcp_enqueue_flags+0xa4>
 800c256:	4b1c      	ldr	r3, [pc, #112]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c258:	f240 4243 	movw	r2, #1091	; 0x443
 800c25c:	4920      	ldr	r1, [pc, #128]	; (800c2e0 <tcp_enqueue_flags+0x120>)
 800c25e:	481c      	ldr	r0, [pc, #112]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c260:	f001 f9a2 	bl	800d5a8 <iprintf>
  if (pcb->unsent == NULL) {
 800c264:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c266:	bb43      	cbnz	r3, 800c2ba <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800c268:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c270:	f1b8 0f00 	cmp.w	r8, #0
 800c274:	d002      	beq.n	800c27c <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800c276:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c278:	3301      	adds	r3, #1
 800c27a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c27c:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c27e:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800c280:	bf42      	ittt	mi
 800c282:	8b63      	ldrhmi	r3, [r4, #26]
 800c284:	f043 0320 	orrmi.w	r3, r3, #32
 800c288:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c28a:	f7fd f921 	bl	80094d0 <pbuf_clen>
 800c28e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c292:	4418      	add	r0, r3
 800c294:	b280      	uxth	r0, r0
 800c296:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0b8      	beq.n	800c210 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c29e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c2a0:	b948      	cbnz	r0, 800c2b6 <tcp_enqueue_flags+0xf6>
 800c2a2:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800c2a4:	2c00      	cmp	r4, #0
 800c2a6:	d1b3      	bne.n	800c210 <tcp_enqueue_flags+0x50>
 800c2a8:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <tcp_enqueue_flags+0x108>)
 800c2aa:	f240 4265 	movw	r2, #1125	; 0x465
 800c2ae:	490d      	ldr	r1, [pc, #52]	; (800c2e4 <tcp_enqueue_flags+0x124>)
 800c2b0:	4807      	ldr	r0, [pc, #28]	; (800c2d0 <tcp_enqueue_flags+0x110>)
 800c2b2:	f001 f979 	bl	800d5a8 <iprintf>
  return ERR_OK;
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e7aa      	b.n	800c210 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1fb      	bne.n	800c2ba <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800c2c2:	6015      	str	r5, [r2, #0]
 800c2c4:	e7d1      	b.n	800c26a <tcp_enqueue_flags+0xaa>
 800c2c6:	bf00      	nop
 800c2c8:	0801a8ed 	.word	0x0801a8ed
 800c2cc:	0801ad56 	.word	0x0801ad56
 800c2d0:	08017fc5 	.word	0x08017fc5
 800c2d4:	0801adab 	.word	0x0801adab
 800c2d8:	0801adca 	.word	0x0801adca
 800c2dc:	0801ae03 	.word	0x0801ae03
 800c2e0:	0801ae1b 	.word	0x0801ae1b
 800c2e4:	0801ae45 	.word	0x0801ae45

0800c2e8 <tcp_send_fin>:
{
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b930      	cbnz	r0, 800c2fc <tcp_send_fin+0x14>
 800c2ee:	4b13      	ldr	r3, [pc, #76]	; (800c33c <tcp_send_fin+0x54>)
 800c2f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c2f4:	4912      	ldr	r1, [pc, #72]	; (800c340 <tcp_send_fin+0x58>)
 800c2f6:	4813      	ldr	r0, [pc, #76]	; (800c344 <tcp_send_fin+0x5c>)
 800c2f8:	f001 f956 	bl	800d5a8 <iprintf>
  if (pcb->unsent != NULL) {
 800c2fc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c2fe:	b14d      	cbz	r5, 800c314 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c300:	462f      	mov	r7, r5
 800c302:	682d      	ldr	r5, [r5, #0]
 800c304:	2d00      	cmp	r5, #0
 800c306:	d1fb      	bne.n	800c300 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	8998      	ldrh	r0, [r3, #12]
 800c30c:	f7fc f9e4 	bl	80086d8 <lwip_htons>
 800c310:	0743      	lsls	r3, r0, #29
 800c312:	d005      	beq.n	800c320 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c314:	4620      	mov	r0, r4
 800c316:	2101      	movs	r1, #1
}
 800c318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c31c:	f7ff bf50 	b.w	800c1c0 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2001      	movs	r0, #1
 800c324:	899e      	ldrh	r6, [r3, #12]
 800c326:	f7fc f9d7 	bl	80086d8 <lwip_htons>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4330      	orrs	r0, r6
 800c32e:	8198      	strh	r0, [r3, #12]
}
 800c330:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800c332:	8b63      	ldrh	r3, [r4, #26]
 800c334:	f043 0320 	orr.w	r3, r3, #32
 800c338:	8363      	strh	r3, [r4, #26]
}
 800c33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c33c:	0801a8ed 	.word	0x0801a8ed
 800c340:	0801ae6d 	.word	0x0801ae6d
 800c344:	08017fc5 	.word	0x08017fc5

0800c348 <tcp_rexmit_rto_prepare>:
{
 800c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c34c:	4604      	mov	r4, r0
 800c34e:	b930      	cbnz	r0, 800c35e <tcp_rexmit_rto_prepare+0x16>
 800c350:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <tcp_rexmit_rto_prepare+0x7c>)
 800c352:	f240 6263 	movw	r2, #1635	; 0x663
 800c356:	491c      	ldr	r1, [pc, #112]	; (800c3c8 <tcp_rexmit_rto_prepare+0x80>)
 800c358:	481c      	ldr	r0, [pc, #112]	; (800c3cc <tcp_rexmit_rto_prepare+0x84>)
 800c35a:	f001 f925 	bl	800d5a8 <iprintf>
  if (pcb->unacked == NULL) {
 800c35e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c360:	b945      	cbnz	r5, 800c374 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800c362:	f06f 0005 	mvn.w	r0, #5
}
 800c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800c36a:	f7ff fa3b 	bl	800b7e4 <tcp_output_segment_busy>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d1f7      	bne.n	800c362 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c372:	682d      	ldr	r5, [r5, #0]
 800c374:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800c376:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f6      	bne.n	800c36a <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800c37c:	f7ff fa32 	bl	800b7e4 <tcp_output_segment_busy>
 800c380:	4606      	mov	r6, r0
 800c382:	2800      	cmp	r0, #0
 800c384:	d1ed      	bne.n	800c362 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800c386:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c388:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800c38a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800c38c:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800c390:	8b63      	ldrh	r3, [r4, #26]
 800c392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c396:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c398:	68eb      	ldr	r3, [r5, #12]
 800c39a:	6858      	ldr	r0, [r3, #4]
 800c39c:	f7fc f99f 	bl	80086de <lwip_htonl>
 800c3a0:	68eb      	ldr	r3, [r5, #12]
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c3a8:	8998      	ldrh	r0, [r3, #12]
 800c3aa:	f7fc f995 	bl	80086d8 <lwip_htons>
 800c3ae:	f010 0303 	ands.w	r3, r0, #3
 800c3b2:	4447      	add	r7, r8
  return ERR_OK;
 800c3b4:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c3b6:	bf18      	it	ne
 800c3b8:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800c3ba:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c3bc:	443b      	add	r3, r7
 800c3be:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800c3c0:	e7d1      	b.n	800c366 <tcp_rexmit_rto_prepare+0x1e>
 800c3c2:	bf00      	nop
 800c3c4:	0801a8ed 	.word	0x0801a8ed
 800c3c8:	0801ae87 	.word	0x0801ae87
 800c3cc:	08017fc5 	.word	0x08017fc5

0800c3d0 <tcp_rexmit>:
{
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	b930      	cbnz	r0, 800c3e4 <tcp_rexmit+0x14>
 800c3d6:	4b1b      	ldr	r3, [pc, #108]	; (800c444 <tcp_rexmit+0x74>)
 800c3d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c3dc:	491a      	ldr	r1, [pc, #104]	; (800c448 <tcp_rexmit+0x78>)
 800c3de:	481b      	ldr	r0, [pc, #108]	; (800c44c <tcp_rexmit+0x7c>)
 800c3e0:	f001 f8e2 	bl	800d5a8 <iprintf>
  if (pcb->unacked == NULL) {
 800c3e4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c3e6:	b915      	cbnz	r5, 800c3ee <tcp_rexmit+0x1e>
    return ERR_VAL;
 800c3e8:	f06f 0005 	mvn.w	r0, #5
}
 800c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	f7ff f9f8 	bl	800b7e4 <tcp_output_segment_busy>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1f7      	bne.n	800c3e8 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800c3f8:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800c3fa:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800c3fe:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800c400:	6833      	ldr	r3, [r6, #0]
 800c402:	b983      	cbnz	r3, 800c426 <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800c404:	6833      	ldr	r3, [r6, #0]
 800c406:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800c408:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	b90b      	cbnz	r3, 800c412 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800c40e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800c412:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800c416:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800c418:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800c41a:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800c41c:	bf1c      	itt	ne
 800c41e:	3301      	addne	r3, #1
 800c420:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800c424:	e7e2      	b.n	800c3ec <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	6858      	ldr	r0, [r3, #4]
 800c42a:	f7fc f958 	bl	80086de <lwip_htonl>
 800c42e:	68eb      	ldr	r3, [r5, #12]
 800c430:	4607      	mov	r7, r0
 800c432:	6858      	ldr	r0, [r3, #4]
 800c434:	f7fc f953 	bl	80086de <lwip_htonl>
 800c438:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800c43a:	2800      	cmp	r0, #0
 800c43c:	dae2      	bge.n	800c404 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800c43e:	6836      	ldr	r6, [r6, #0]
 800c440:	e7de      	b.n	800c400 <tcp_rexmit+0x30>
 800c442:	bf00      	nop
 800c444:	0801a8ed 	.word	0x0801a8ed
 800c448:	0801aeab 	.word	0x0801aeab
 800c44c:	08017fc5 	.word	0x08017fc5

0800c450 <tcp_rexmit_fast>:
{
 800c450:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c452:	4604      	mov	r4, r0
 800c454:	b930      	cbnz	r0, 800c464 <tcp_rexmit_fast+0x14>
 800c456:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <tcp_rexmit_fast+0x5c>)
 800c458:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c45c:	4914      	ldr	r1, [pc, #80]	; (800c4b0 <tcp_rexmit_fast+0x60>)
 800c45e:	4815      	ldr	r0, [pc, #84]	; (800c4b4 <tcp_rexmit_fast+0x64>)
 800c460:	f001 f8a2 	bl	800d5a8 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c464:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c466:	b1fb      	cbz	r3, 800c4a8 <tcp_rexmit_fast+0x58>
 800c468:	8b63      	ldrh	r3, [r4, #26]
 800c46a:	075b      	lsls	r3, r3, #29
 800c46c:	d41c      	bmi.n	800c4a8 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c46e:	4620      	mov	r0, r4
 800c470:	f7ff ffae 	bl	800c3d0 <tcp_rexmit>
 800c474:	b9c0      	cbnz	r0, 800c4a8 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c476:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800c47a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800c47e:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c480:	4299      	cmp	r1, r3
 800c482:	bf28      	it	cs
 800c484:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c486:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c488:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c48a:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800c48c:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c490:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800c492:	bf88      	it	hi
 800c494:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c496:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800c498:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c49c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c4a0:	8b63      	ldrh	r3, [r4, #26]
 800c4a2:	f043 0304 	orr.w	r3, r3, #4
 800c4a6:	8363      	strh	r3, [r4, #26]
}
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801a8ed 	.word	0x0801a8ed
 800c4b0:	0801aec3 	.word	0x0801aec3
 800c4b4:	08017fc5 	.word	0x08017fc5

0800c4b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	460f      	mov	r7, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c4ca:	461d      	mov	r5, r3
{
 800c4cc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c4d0:	b933      	cbnz	r3, 800c4e0 <tcp_rst+0x28>
 800c4d2:	4b18      	ldr	r3, [pc, #96]	; (800c534 <tcp_rst+0x7c>)
 800c4d4:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c4d8:	4917      	ldr	r1, [pc, #92]	; (800c538 <tcp_rst+0x80>)
 800c4da:	4818      	ldr	r0, [pc, #96]	; (800c53c <tcp_rst+0x84>)
 800c4dc:	f001 f864 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c4e0:	f1b8 0f00 	cmp.w	r8, #0
 800c4e4:	d106      	bne.n	800c4f4 <tcp_rst+0x3c>
 800c4e6:	4b13      	ldr	r3, [pc, #76]	; (800c534 <tcp_rst+0x7c>)
 800c4e8:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c4ec:	4914      	ldr	r1, [pc, #80]	; (800c540 <tcp_rst+0x88>)
 800c4ee:	4813      	ldr	r0, [pc, #76]	; (800c53c <tcp_rst+0x84>)
 800c4f0:	f001 f85a 	bl	800d5a8 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f7fc f8f2 	bl	80086de <lwip_htonl>
 800c4fa:	2314      	movs	r3, #20
 800c4fc:	f646 010b 	movw	r1, #26635	; 0x680b
 800c500:	4602      	mov	r2, r0
 800c502:	f8cd a000 	str.w	sl, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c50c:	464b      	mov	r3, r9
 800c50e:	2100      	movs	r1, #0
 800c510:	f7ff fa3c 	bl	800b98c <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c514:	4604      	mov	r4, r0
 800c516:	b150      	cbz	r0, 800c52e <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c518:	f7ff faa0 	bl	800ba5c <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c51c:	4643      	mov	r3, r8
 800c51e:	462a      	mov	r2, r5
 800c520:	4621      	mov	r1, r4
 800c522:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c524:	b004      	add	sp, #16
 800c526:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c52a:	f7ff baa7 	b.w	800ba7c <tcp_output_control_segment>
}
 800c52e:	b004      	add	sp, #16
 800c530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c534:	0801a8ed 	.word	0x0801a8ed
 800c538:	0801aee0 	.word	0x0801aee0
 800c53c:	08017fc5 	.word	0x08017fc5
 800c540:	0801aefa 	.word	0x0801aefa

0800c544 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c544:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c546:	4604      	mov	r4, r0
 800c548:	b930      	cbnz	r0, 800c558 <tcp_send_empty_ack+0x14>
 800c54a:	4b14      	ldr	r3, [pc, #80]	; (800c59c <tcp_send_empty_ack+0x58>)
 800c54c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c550:	4913      	ldr	r1, [pc, #76]	; (800c5a0 <tcp_send_empty_ack+0x5c>)
 800c552:	4814      	ldr	r0, [pc, #80]	; (800c5a4 <tcp_send_empty_ack+0x60>)
 800c554:	f001 f828 	bl	800d5a8 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c558:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c55a:	f7fc f8c0 	bl	80086de <lwip_htonl>
 800c55e:	2100      	movs	r1, #0
 800c560:	4602      	mov	r2, r0
 800c562:	4620      	mov	r0, r4
 800c564:	f7ff fa54 	bl	800ba10 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c568:	4605      	mov	r5, r0
 800c56a:	b930      	cbnz	r0, 800c57a <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c56c:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c56e:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c572:	f043 0303 	orr.w	r3, r3, #3
 800c576:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800c578:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c57a:	f7ff fa6f 	bl	800ba5c <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c57e:	1d23      	adds	r3, r4, #4
 800c580:	4622      	mov	r2, r4
 800c582:	4629      	mov	r1, r5
 800c584:	4620      	mov	r0, r4
 800c586:	f7ff fa79 	bl	800ba7c <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c58a:	8b63      	ldrh	r3, [r4, #26]
 800c58c:	b118      	cbz	r0, 800c596 <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c58e:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c592:	8363      	strh	r3, [r4, #26]
 800c594:	e7f0      	b.n	800c578 <tcp_send_empty_ack+0x34>
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	e7fa      	b.n	800c592 <tcp_send_empty_ack+0x4e>
 800c59c:	0801a8ed 	.word	0x0801a8ed
 800c5a0:	0801af15 	.word	0x0801af15
 800c5a4:	08017fc5 	.word	0x08017fc5

0800c5a8 <tcp_output>:
{
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c5ac:	4604      	mov	r4, r0
{
 800c5ae:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c5b0:	b930      	cbnz	r0, 800c5c0 <tcp_output+0x18>
 800c5b2:	4b8f      	ldr	r3, [pc, #572]	; (800c7f0 <tcp_output+0x248>)
 800c5b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c5b8:	498e      	ldr	r1, [pc, #568]	; (800c7f4 <tcp_output+0x24c>)
 800c5ba:	488f      	ldr	r0, [pc, #572]	; (800c7f8 <tcp_output+0x250>)
 800c5bc:	f000 fff4 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c5c0:	7d23      	ldrb	r3, [r4, #20]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d106      	bne.n	800c5d4 <tcp_output+0x2c>
 800c5c6:	4b8a      	ldr	r3, [pc, #552]	; (800c7f0 <tcp_output+0x248>)
 800c5c8:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c5cc:	498b      	ldr	r1, [pc, #556]	; (800c7fc <tcp_output+0x254>)
 800c5ce:	488a      	ldr	r0, [pc, #552]	; (800c7f8 <tcp_output+0x250>)
 800c5d0:	f000 ffea 	bl	800d5a8 <iprintf>
  if (tcp_input_pcb == pcb) {
 800c5d4:	4b8a      	ldr	r3, [pc, #552]	; (800c800 <tcp_output+0x258>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	f000 8171 	beq.w	800c8c0 <tcp_output+0x318>
  seg = pcb->unsent;
 800c5de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c5e0:	b94d      	cbnz	r5, 800c5f6 <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800c5e2:	8b63      	ldrh	r3, [r4, #26]
 800c5e4:	0798      	lsls	r0, r3, #30
 800c5e6:	f140 8167 	bpl.w	800c8b8 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800c5ea:	4620      	mov	r0, r4
}
 800c5ec:	b007      	add	sp, #28
 800c5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800c5f2:	f7ff bfa7 	b.w	800c544 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c5f6:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c5f8:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c5fc:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800c600:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c604:	b340      	cbz	r0, 800c658 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800c606:	f7fc fd6d 	bl	80090e4 <netif_get_by_index>
    return ip_route(src, dst);
 800c60a:	4607      	mov	r7, r0
  if (netif == NULL) {
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f000 8170 	beq.w	800c8f2 <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	b90b      	cbnz	r3, 800c61a <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c616:	6843      	ldr	r3, [r0, #4]
 800c618:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c61a:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c61c:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c61e:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c620:	bf28      	it	cs
 800c622:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c624:	f7fc f85b 	bl	80086de <lwip_htonl>
 800c628:	892b      	ldrh	r3, [r5, #8]
 800c62a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c62c:	1a9b      	subs	r3, r3, r2
 800c62e:	4418      	add	r0, r3
 800c630:	4540      	cmp	r0, r8
 800c632:	d915      	bls.n	800c660 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c634:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c638:	4543      	cmp	r3, r8
 800c63a:	d1d2      	bne.n	800c5e2 <tcp_output+0x3a>
 800c63c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1cf      	bne.n	800c5e2 <tcp_output+0x3a>
 800c642:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1cb      	bne.n	800c5e2 <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800c64a:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800c64e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800c652:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800c656:	e7c4      	b.n	800c5e2 <tcp_output+0x3a>
    return ip_route(src, dst);
 800c658:	4648      	mov	r0, r9
 800c65a:	f7fb fac9 	bl	8007bf0 <ip4_route>
 800c65e:	e7d4      	b.n	800c60a <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800c660:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800c662:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800c664:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800c668:	b126      	cbz	r6, 800c674 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800c66a:	4633      	mov	r3, r6
 800c66c:	6836      	ldr	r6, [r6, #0]
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d1fb      	bne.n	800c66a <tcp_output+0xc2>
 800c672:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800c674:	f8df a178 	ldr.w	sl, [pc, #376]	; 800c7f0 <tcp_output+0x248>
 800c678:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800c7f8 <tcp_output+0x250>
 800c67c:	e0de      	b.n	800c83c <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800c67e:	7d23      	ldrb	r3, [r4, #20]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d009      	beq.n	800c698 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c684:	68eb      	ldr	r3, [r5, #12]
 800c686:	2010      	movs	r0, #16
 800c688:	899b      	ldrh	r3, [r3, #12]
 800c68a:	9304      	str	r3, [sp, #16]
 800c68c:	f7fc f824 	bl	80086d8 <lwip_htons>
 800c690:	9b04      	ldr	r3, [sp, #16]
 800c692:	68ea      	ldr	r2, [r5, #12]
 800c694:	4318      	orrs	r0, r3
 800c696:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800c698:	4628      	mov	r0, r5
 800c69a:	f7ff f8a3 	bl	800b7e4 <tcp_output_segment_busy>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d16f      	bne.n	800c782 <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c6a2:	68eb      	ldr	r3, [r5, #12]
 800c6a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	f7fc f819 	bl	80086de <lwip_htonl>
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c6b0:	68eb      	ldr	r3, [r5, #12]
 800c6b2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	f7fc f80f 	bl	80086d8 <lwip_htons>
 800c6ba:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c6be:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c2:	4413      	add	r3, r2
 800c6c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c6c6:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c6c8:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c6ca:	07d2      	lsls	r2, r2, #31
 800c6cc:	d449      	bmi.n	800c762 <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c6ce:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800c6d2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800c6d6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c6d8:	bfbc      	itt	lt
 800c6da:	2300      	movlt	r3, #0
 800c6dc:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c6de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6e0:	b94b      	cbnz	r3, 800c6f6 <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800c6e2:	4948      	ldr	r1, [pc, #288]	; (800c804 <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c6e4:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800c6e6:	6809      	ldr	r1, [r1, #0]
 800c6e8:	9204      	str	r2, [sp, #16]
 800c6ea:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c6ec:	6858      	ldr	r0, [r3, #4]
 800c6ee:	f7fb fff6 	bl	80086de <lwip_htonl>
 800c6f2:	9a04      	ldr	r2, [sp, #16]
 800c6f4:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c6f6:	6869      	ldr	r1, [r5, #4]
 800c6f8:	68eb      	ldr	r3, [r5, #12]
 800c6fa:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800c6fc:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c700:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800c702:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c704:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800c706:	ebac 0c00 	sub.w	ip, ip, r0
 800c70a:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800c70e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800c712:	ebac 0000 	sub.w	r0, ip, r0
 800c716:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800c718:	2100      	movs	r1, #0
 800c71a:	7419      	strb	r1, [r3, #16]
 800c71c:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c71e:	7aa9      	ldrb	r1, [r5, #10]
 800c720:	0089      	lsls	r1, r1, #2
 800c722:	f001 0104 	and.w	r1, r1, #4
 800c726:	3114      	adds	r1, #20
 800c728:	440b      	add	r3, r1
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d006      	beq.n	800c73c <tcp_output+0x194>
 800c72e:	4653      	mov	r3, sl
 800c730:	f240 621c 	movw	r2, #1564	; 0x61c
 800c734:	4934      	ldr	r1, [pc, #208]	; (800c808 <tcp_output+0x260>)
 800c736:	4658      	mov	r0, fp
 800c738:	f000 ff36 	bl	800d5a8 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c73c:	2306      	movs	r3, #6
 800c73e:	9702      	str	r7, [sp, #8]
 800c740:	464a      	mov	r2, r9
 800c742:	4621      	mov	r1, r4
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	7aa3      	ldrb	r3, [r4, #10]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	7ae3      	ldrb	r3, [r4, #11]
 800c74c:	6868      	ldr	r0, [r5, #4]
 800c74e:	f7fb fbbd 	bl	8007ecc <ip4_output_if>
    if (err != ERR_OK) {
 800c752:	b1b0      	cbz	r0, 800c782 <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c754:	8b63      	ldrh	r3, [r4, #26]
 800c756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c75a:	8363      	strh	r3, [r4, #26]
}
 800c75c:	b007      	add	sp, #28
 800c75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c762:	464a      	mov	r2, r9
 800c764:	4639      	mov	r1, r7
 800c766:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	f7fd ffe4 	bl	800a738 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c770:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c774:	f7fb ffb3 	bl	80086de <lwip_htonl>
 800c778:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800c77a:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c77e:	6158      	str	r0, [r3, #20]
    opts += 1;
 800c780:	e7a7      	b.n	800c6d2 <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800c782:	682b      	ldr	r3, [r5, #0]
 800c784:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c786:	7d23      	ldrb	r3, [r4, #20]
 800c788:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c78a:	bf1e      	ittt	ne
 800c78c:	8b63      	ldrhne	r3, [r4, #26]
 800c78e:	f023 0303 	bicne.w	r3, r3, #3
 800c792:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c794:	68eb      	ldr	r3, [r5, #12]
 800c796:	6858      	ldr	r0, [r3, #4]
 800c798:	f7fb ffa1 	bl	80086de <lwip_htonl>
 800c79c:	8929      	ldrh	r1, [r5, #8]
 800c79e:	68eb      	ldr	r3, [r5, #12]
 800c7a0:	9104      	str	r1, [sp, #16]
 800c7a2:	9005      	str	r0, [sp, #20]
 800c7a4:	8998      	ldrh	r0, [r3, #12]
 800c7a6:	f7fb ff97 	bl	80086d8 <lwip_htons>
 800c7aa:	f010 0303 	ands.w	r3, r0, #3
 800c7ae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800c7b2:	bf18      	it	ne
 800c7b4:	2301      	movne	r3, #1
 800c7b6:	440a      	add	r2, r1
 800c7b8:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c7ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c7bc:	1ad2      	subs	r2, r2, r3
 800c7be:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800c7c0:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800c7c2:	bfb8      	it	lt
 800c7c4:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c7c6:	892b      	ldrh	r3, [r5, #8]
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	8990      	ldrh	r0, [r2, #12]
 800c7cc:	f7fb ff84 	bl	80086d8 <lwip_htons>
 800c7d0:	f010 0003 	ands.w	r0, r0, #3
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	bf18      	it	ne
 800c7d8:	2001      	movne	r0, #1
 800c7da:	42d8      	cmn	r0, r3
 800c7dc:	f000 8085 	beq.w	800c8ea <tcp_output+0x342>
      seg->next = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800c7e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c7e6:	b98b      	cbnz	r3, 800c80c <tcp_output+0x264>
        pcb->unacked = seg;
 800c7e8:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800c7ea:	462e      	mov	r6, r5
 800c7ec:	e023      	b.n	800c836 <tcp_output+0x28e>
 800c7ee:	bf00      	nop
 800c7f0:	0801a8ed 	.word	0x0801a8ed
 800c7f4:	0801af35 	.word	0x0801af35
 800c7f8:	08017fc5 	.word	0x08017fc5
 800c7fc:	0801af4d 	.word	0x0801af4d
 800c800:	2000e45c 	.word	0x2000e45c
 800c804:	2000e410 	.word	0x2000e410
 800c808:	0801af8a 	.word	0x0801af8a
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c80c:	68eb      	ldr	r3, [r5, #12]
 800c80e:	6858      	ldr	r0, [r3, #4]
 800c810:	f7fb ff65 	bl	80086de <lwip_htonl>
 800c814:	68f2      	ldr	r2, [r6, #12]
 800c816:	9004      	str	r0, [sp, #16]
 800c818:	6850      	ldr	r0, [r2, #4]
 800c81a:	f7fb ff60 	bl	80086de <lwip_htonl>
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	1a18      	subs	r0, r3, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	da5f      	bge.n	800c8e6 <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c826:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	d149      	bne.n	800c8c4 <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800c834:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800c836:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800c838:	2d00      	cmp	r5, #0
 800c83a:	d03a      	beq.n	800c8b2 <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c83c:	68eb      	ldr	r3, [r5, #12]
 800c83e:	6858      	ldr	r0, [r3, #4]
 800c840:	f7fb ff4d 	bl	80086de <lwip_htonl>
 800c844:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c846:	1ac0      	subs	r0, r0, r3
 800c848:	892b      	ldrh	r3, [r5, #8]
 800c84a:	4418      	add	r0, r3
  while (seg != NULL &&
 800c84c:	4540      	cmp	r0, r8
 800c84e:	d82e      	bhi.n	800c8ae <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800c850:	68eb      	ldr	r3, [r5, #12]
 800c852:	8998      	ldrh	r0, [r3, #12]
 800c854:	f7fb ff40 	bl	80086d8 <lwip_htons>
 800c858:	0741      	lsls	r1, r0, #29
 800c85a:	d506      	bpl.n	800c86a <tcp_output+0x2c2>
 800c85c:	4653      	mov	r3, sl
 800c85e:	f240 5236 	movw	r2, #1334	; 0x536
 800c862:	4925      	ldr	r1, [pc, #148]	; (800c8f8 <tcp_output+0x350>)
 800c864:	4658      	mov	r0, fp
 800c866:	f000 fe9f 	bl	800d5a8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c86a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f43f af06 	beq.w	800c67e <tcp_output+0xd6>
 800c872:	8b62      	ldrh	r2, [r4, #26]
 800c874:	f012 0f44 	tst.w	r2, #68	; 0x44
 800c878:	f47f af01 	bne.w	800c67e <tcp_output+0xd6>
 800c87c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c87e:	b143      	cbz	r3, 800c892 <tcp_output+0x2ea>
 800c880:	6819      	ldr	r1, [r3, #0]
 800c882:	2900      	cmp	r1, #0
 800c884:	f47f aefb 	bne.w	800c67e <tcp_output+0xd6>
 800c888:	8919      	ldrh	r1, [r3, #8]
 800c88a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c88c:	4299      	cmp	r1, r3
 800c88e:	f4bf aef6 	bcs.w	800c67e <tcp_output+0xd6>
 800c892:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c896:	2b00      	cmp	r3, #0
 800c898:	f43f aef1 	beq.w	800c67e <tcp_output+0xd6>
 800c89c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	f63f aeec 	bhi.w	800c67e <tcp_output+0xd6>
 800c8a6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800c8aa:	f47f aee8 	bne.w	800c67e <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800c8ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c8b0:	b913      	cbnz	r3, 800c8b8 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c8b8:	8b63      	ldrh	r3, [r4, #26]
 800c8ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8be:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	e74b      	b.n	800c75c <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c8c4:	68d2      	ldr	r2, [r2, #12]
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	6850      	ldr	r0, [r2, #4]
 800c8ca:	f7fb ff08 	bl	80086de <lwip_htonl>
 800c8ce:	68e9      	ldr	r1, [r5, #12]
 800c8d0:	9004      	str	r0, [sp, #16]
 800c8d2:	6848      	ldr	r0, [r1, #4]
 800c8d4:	f7fb ff03 	bl	80086de <lwip_htonl>
 800c8d8:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800c8da:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c8dc:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	daa6      	bge.n	800c830 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	e7a1      	b.n	800c82a <tcp_output+0x282>
          useg->next = seg;
 800c8e6:	6035      	str	r5, [r6, #0]
 800c8e8:	e77f      	b.n	800c7ea <tcp_output+0x242>
      tcp_seg_free(seg);
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7fd f8e8 	bl	8009ac0 <tcp_seg_free>
 800c8f0:	e7a1      	b.n	800c836 <tcp_output+0x28e>
    return ERR_RTE;
 800c8f2:	f06f 0003 	mvn.w	r0, #3
 800c8f6:	e731      	b.n	800c75c <tcp_output+0x1b4>
 800c8f8:	0801af73 	.word	0x0801af73

0800c8fc <tcp_rexmit_rto_commit>:
{
 800c8fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c8fe:	4604      	mov	r4, r0
 800c900:	b930      	cbnz	r0, 800c910 <tcp_rexmit_rto_commit+0x14>
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <tcp_rexmit_rto_commit+0x2c>)
 800c904:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c908:	4908      	ldr	r1, [pc, #32]	; (800c92c <tcp_rexmit_rto_commit+0x30>)
 800c90a:	4809      	ldr	r0, [pc, #36]	; (800c930 <tcp_rexmit_rto_commit+0x34>)
 800c90c:	f000 fe4c 	bl	800d5a8 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800c910:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c914:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800c916:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c918:	bf1c      	itt	ne
 800c91a:	3301      	addne	r3, #1
 800c91c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800c920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800c924:	f7ff be40 	b.w	800c5a8 <tcp_output>
 800c928:	0801a8ed 	.word	0x0801a8ed
 800c92c:	0801af9d 	.word	0x0801af9d
 800c930:	08017fc5 	.word	0x08017fc5

0800c934 <tcp_rexmit_rto>:
{
 800c934:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c936:	4604      	mov	r4, r0
 800c938:	b930      	cbnz	r0, 800c948 <tcp_rexmit_rto+0x14>
 800c93a:	4b08      	ldr	r3, [pc, #32]	; (800c95c <tcp_rexmit_rto+0x28>)
 800c93c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c940:	4907      	ldr	r1, [pc, #28]	; (800c960 <tcp_rexmit_rto+0x2c>)
 800c942:	4808      	ldr	r0, [pc, #32]	; (800c964 <tcp_rexmit_rto+0x30>)
 800c944:	f000 fe30 	bl	800d5a8 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c948:	4620      	mov	r0, r4
 800c94a:	f7ff fcfd 	bl	800c348 <tcp_rexmit_rto_prepare>
 800c94e:	b920      	cbnz	r0, 800c95a <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800c950:	4620      	mov	r0, r4
}
 800c952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800c956:	f7ff bfd1 	b.w	800c8fc <tcp_rexmit_rto_commit>
}
 800c95a:	bd10      	pop	{r4, pc}
 800c95c:	0801a8ed 	.word	0x0801a8ed
 800c960:	0801afc0 	.word	0x0801afc0
 800c964:	08017fc5 	.word	0x08017fc5

0800c968 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c968:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c96a:	4604      	mov	r4, r0
 800c96c:	b930      	cbnz	r0, 800c97c <tcp_keepalive+0x14>
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <tcp_keepalive+0x44>)
 800c970:	f640 0224 	movw	r2, #2084	; 0x824
 800c974:	490e      	ldr	r1, [pc, #56]	; (800c9b0 <tcp_keepalive+0x48>)
 800c976:	480f      	ldr	r0, [pc, #60]	; (800c9b4 <tcp_keepalive+0x4c>)
 800c978:	f000 fe16 	bl	800d5a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c97c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c97e:	3801      	subs	r0, #1
 800c980:	f7fb fead 	bl	80086de <lwip_htonl>
 800c984:	2100      	movs	r1, #0
 800c986:	4602      	mov	r2, r0
 800c988:	4620      	mov	r0, r4
 800c98a:	f7ff f841 	bl	800ba10 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c98e:	4605      	mov	r5, r0
 800c990:	b148      	cbz	r0, 800c9a6 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c992:	f7ff f863 	bl	800ba5c <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c996:	1d23      	adds	r3, r4, #4
 800c998:	4622      	mov	r2, r4
 800c99a:	4629      	mov	r1, r5
 800c99c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c9a2:	f7ff b86b 	b.w	800ba7c <tcp_output_control_segment>
}
 800c9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	0801a8ed 	.word	0x0801a8ed
 800c9b0:	0801afdc 	.word	0x0801afdc
 800c9b4:	08017fc5 	.word	0x08017fc5

0800c9b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c9bc:	4606      	mov	r6, r0
 800c9be:	b930      	cbnz	r0, 800c9ce <tcp_zero_window_probe+0x16>
 800c9c0:	4b2c      	ldr	r3, [pc, #176]	; (800ca74 <tcp_zero_window_probe+0xbc>)
 800c9c2:	f640 024f 	movw	r2, #2127	; 0x84f
 800c9c6:	492c      	ldr	r1, [pc, #176]	; (800ca78 <tcp_zero_window_probe+0xc0>)
 800c9c8:	482c      	ldr	r0, [pc, #176]	; (800ca7c <tcp_zero_window_probe+0xc4>)
 800c9ca:	f000 fded 	bl	800d5a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c9ce:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	d048      	beq.n	800ca66 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c9d4:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800c9d8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800c9da:	bf1c      	itt	ne
 800c9dc:	3301      	addne	r3, #1
 800c9de:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c9e2:	68eb      	ldr	r3, [r5, #12]
 800c9e4:	8998      	ldrh	r0, [r3, #12]
 800c9e6:	f7fb fe77 	bl	80086d8 <lwip_htons>
 800c9ea:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c9ee:	68eb      	ldr	r3, [r5, #12]
 800c9f0:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c9f2:	bf18      	it	ne
 800c9f4:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c9f6:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c9f8:	bf1c      	itt	ne
 800c9fa:	fab4 f484 	clzne	r4, r4
 800c9fe:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ca00:	f084 0101 	eor.w	r1, r4, #1
 800ca04:	f7ff f804 	bl	800ba10 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ca08:	4607      	mov	r7, r0
 800ca0a:	b378      	cbz	r0, 800ca6c <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ca0c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800ca10:	b1f4      	cbz	r4, 800ca50 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ca12:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800ca16:	2011      	movs	r0, #17
 800ca18:	f7fb fe5e 	bl	80086d8 <lwip_htons>
 800ca1c:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800ca20:	4320      	orrs	r0, r4
 800ca22:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ca26:	68eb      	ldr	r3, [r5, #12]
 800ca28:	6858      	ldr	r0, [r3, #4]
 800ca2a:	f7fb fe58 	bl	80086de <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca2e:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ca30:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca32:	1a1b      	subs	r3, r3, r0
 800ca34:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800ca36:	bfb8      	it	lt
 800ca38:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f7ff f80e 	bl	800ba5c <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca40:	1d33      	adds	r3, r6, #4
 800ca42:	4632      	mov	r2, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ca48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca4c:	f7ff b816 	b.w	800ba7c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ca50:	6868      	ldr	r0, [r5, #4]
 800ca52:	f108 0114 	add.w	r1, r8, #20
 800ca56:	892a      	ldrh	r2, [r5, #8]
 800ca58:	8903      	ldrh	r3, [r0, #8]
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f7fc fe20 	bl	80096a4 <pbuf_copy_partial>
 800ca64:	e7df      	b.n	800ca26 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800ca66:	4628      	mov	r0, r5
}
 800ca68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	e7fa      	b.n	800ca68 <tcp_zero_window_probe+0xb0>
 800ca72:	bf00      	nop
 800ca74:	0801a8ed 	.word	0x0801a8ed
 800ca78:	0801aff7 	.word	0x0801aff7
 800ca7c:	08017fc5 	.word	0x08017fc5

0800ca80 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ca84:	200a      	movs	r0, #10
{
 800ca86:	460e      	mov	r6, r1
 800ca88:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ca8a:	f7fc f955 	bl	8008d38 <memp_malloc>
  if (timeout == NULL) {
 800ca8e:	b938      	cbnz	r0, 800caa0 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <sys_timeout_abs+0x54>)
 800ca92:	22be      	movs	r2, #190	; 0xbe
 800ca94:	4910      	ldr	r1, [pc, #64]	; (800cad8 <sys_timeout_abs+0x58>)
 800ca96:	4811      	ldr	r0, [pc, #68]	; (800cadc <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800ca98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ca9c:	f000 bd84 	b.w	800d5a8 <iprintf>
  timeout->next = NULL;
 800caa0:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800caa2:	4a0f      	ldr	r2, [pc, #60]	; (800cae0 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800caa4:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800caa6:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800caa8:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800caaa:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800caae:	b90b      	cbnz	r3, 800cab4 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800cab0:	6010      	str	r0, [r2, #0]
}
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cab4:	6859      	ldr	r1, [r3, #4]
 800cab6:	1a61      	subs	r1, r4, r1
 800cab8:	2900      	cmp	r1, #0
 800caba:	da01      	bge.n	800cac0 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	e7f7      	b.n	800cab0 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cac0:	4619      	mov	r1, r3
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	b11b      	cbz	r3, 800cace <sys_timeout_abs+0x4e>
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	1aa2      	subs	r2, r4, r2
 800caca:	2a00      	cmp	r2, #0
 800cacc:	daf8      	bge.n	800cac0 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800cace:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800cad0:	6008      	str	r0, [r1, #0]
        break;
 800cad2:	e7ee      	b.n	800cab2 <sys_timeout_abs+0x32>
 800cad4:	0801b01a 	.word	0x0801b01a
 800cad8:	0801b08c 	.word	0x0801b08c
 800cadc:	08017fc5 	.word	0x08017fc5
 800cae0:	2000e460 	.word	0x2000e460

0800cae4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cae4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cae6:	6843      	ldr	r3, [r0, #4]
{
 800cae8:	4604      	mov	r4, r0
  cyclic->handler();
 800caea:	4798      	blx	r3

  now = sys_now();
 800caec:	f7f3 ffec 	bl	8000ac8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <lwip_cyclic_timer+0x2c>)
 800caf2:	6825      	ldr	r5, [r4, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800caf6:	4907      	ldr	r1, [pc, #28]	; (800cb14 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800caf8:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cafa:	1a1a      	subs	r2, r3, r0
 800cafc:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cafe:	4622      	mov	r2, r4
 800cb00:	bfb4      	ite	lt
 800cb02:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cb04:	4618      	movge	r0, r3
#endif
  }
}
 800cb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cb0a:	f7ff bfb9 	b.w	800ca80 <sys_timeout_abs>
 800cb0e:	bf00      	nop
 800cb10:	2000e460 	.word	0x2000e460
 800cb14:	0800cae5 	.word	0x0800cae5

0800cb18 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cb18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	460d      	mov	r5, r1
 800cb22:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cb24:	d306      	bcc.n	800cb34 <sys_timeout+0x1c>
 800cb26:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <sys_timeout+0x30>)
 800cb28:	f240 1229 	movw	r2, #297	; 0x129
 800cb2c:	4907      	ldr	r1, [pc, #28]	; (800cb4c <sys_timeout+0x34>)
 800cb2e:	4808      	ldr	r0, [pc, #32]	; (800cb50 <sys_timeout+0x38>)
 800cb30:	f000 fd3a 	bl	800d5a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cb34:	f7f3 ffc8 	bl	8000ac8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4420      	add	r0, r4
#endif
}
 800cb3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cb42:	f7ff bf9d 	b.w	800ca80 <sys_timeout_abs>
 800cb46:	bf00      	nop
 800cb48:	0801b01a 	.word	0x0801b01a
 800cb4c:	0801b0c9 	.word	0x0801b0c9
 800cb50:	08017fc5 	.word	0x08017fc5

0800cb54 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cb54:	4b08      	ldr	r3, [pc, #32]	; (800cb78 <tcp_timer_needed+0x24>)
 800cb56:	689a      	ldr	r2, [r3, #8]
 800cb58:	b962      	cbnz	r2, 800cb74 <tcp_timer_needed+0x20>
 800cb5a:	4a08      	ldr	r2, [pc, #32]	; (800cb7c <tcp_timer_needed+0x28>)
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	b912      	cbnz	r2, 800cb66 <tcp_timer_needed+0x12>
 800cb60:	4a07      	ldr	r2, [pc, #28]	; (800cb80 <tcp_timer_needed+0x2c>)
 800cb62:	6812      	ldr	r2, [r2, #0]
 800cb64:	b132      	cbz	r2, 800cb74 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800cb66:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb68:	4906      	ldr	r1, [pc, #24]	; (800cb84 <tcp_timer_needed+0x30>)
 800cb6a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800cb6c:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f7ff bfd2 	b.w	800cb18 <sys_timeout>
}
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	2000e460 	.word	0x2000e460
 800cb7c:	2000e40c 	.word	0x2000e40c
 800cb80:	2000e418 	.word	0x2000e418
 800cb84:	0800cb89 	.word	0x0800cb89

0800cb88 <tcpip_tcp_timer>:
{
 800cb88:	b508      	push	{r3, lr}
  tcp_tmr();
 800cb8a:	f7fd fc0b 	bl	800a3a4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cb8e:	4b08      	ldr	r3, [pc, #32]	; (800cbb0 <tcpip_tcp_timer+0x28>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	b913      	cbnz	r3, 800cb9a <tcpip_tcp_timer+0x12>
 800cb94:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <tcpip_tcp_timer+0x2c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	b133      	cbz	r3, 800cba8 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4906      	ldr	r1, [pc, #24]	; (800cbb8 <tcpip_tcp_timer+0x30>)
 800cb9e:	20fa      	movs	r0, #250	; 0xfa
}
 800cba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cba4:	f7ff bfb8 	b.w	800cb18 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800cba8:	4a04      	ldr	r2, [pc, #16]	; (800cbbc <tcpip_tcp_timer+0x34>)
 800cbaa:	6093      	str	r3, [r2, #8]
}
 800cbac:	bd08      	pop	{r3, pc}
 800cbae:	bf00      	nop
 800cbb0:	2000e40c 	.word	0x2000e40c
 800cbb4:	2000e418 	.word	0x2000e418
 800cbb8:	0800cb89 	.word	0x0800cb89
 800cbbc:	2000e460 	.word	0x2000e460

0800cbc0 <sys_timeouts_init>:
{
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	4d06      	ldr	r5, [pc, #24]	; (800cbdc <sys_timeouts_init+0x1c>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cbc4:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cbc6:	4e06      	ldr	r6, [pc, #24]	; (800cbe0 <sys_timeouts_init+0x20>)
 800cbc8:	f855 0f08 	ldr.w	r0, [r5, #8]!
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cbcc:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cbce:	4631      	mov	r1, r6
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	f7ff ffa1 	bl	800cb18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cbd6:	2c05      	cmp	r4, #5
 800cbd8:	d1f6      	bne.n	800cbc8 <sys_timeouts_init+0x8>
}
 800cbda:	bd70      	pop	{r4, r5, r6, pc}
 800cbdc:	0800f258 	.word	0x0800f258
 800cbe0:	0800cae5 	.word	0x0800cae5

0800cbe4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cbe6:	f7f3 ff6f 	bl	8000ac8 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cbea:	4d0b      	ldr	r5, [pc, #44]	; (800cc18 <sys_check_timeouts+0x34>)
  now = sys_now();
 800cbec:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800cbee:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800cbf0:	b181      	cbz	r1, 800cc14 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cbf2:	684b      	ldr	r3, [r1, #4]
 800cbf4:	1ae2      	subs	r2, r4, r3
 800cbf6:	2a00      	cmp	r2, #0
 800cbf8:	db0c      	blt.n	800cc14 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cbfa:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cbfc:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800cbfe:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800cc00:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800cc02:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cc06:	f7fc f8c7 	bl	8008d98 <memp_free>
    if (handler != NULL) {
 800cc0a:	2e00      	cmp	r6, #0
 800cc0c:	d0ef      	beq.n	800cbee <sys_check_timeouts+0xa>
      handler(arg);
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47b0      	blx	r6
 800cc12:	e7ec      	b.n	800cbee <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc16:	bf00      	nop
 800cc18:	2000e460 	.word	0x2000e460

0800cc1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cc1c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cc1e:	4c07      	ldr	r4, [pc, #28]	; (800cc3c <sys_timeouts_sleeptime+0x20>)
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	b13b      	cbz	r3, 800cc34 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800cc24:	f7f3 ff50 	bl	8000ac8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
    return 0;
 800cc2c:	1a18      	subs	r0, r3, r0
 800cc2e:	bf48      	it	mi
 800cc30:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800cc32:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	e7fb      	b.n	800cc32 <sys_timeouts_sleeptime+0x16>
 800cc3a:	bf00      	nop
 800cc3c:	2000e460 	.word	0x2000e460

0800cc40 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cc40:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cc42:	f000 fcc9 	bl	800d5d8 <rand>
 800cc46:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cc4a:	4b02      	ldr	r3, [pc, #8]	; (800cc54 <udp_init+0x14>)
 800cc4c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cc50:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800cc52:	bd08      	pop	{r3, pc}
 800cc54:	2000003c 	.word	0x2000003c

0800cc58 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	4688      	mov	r8, r1
 800cc5e:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cc60:	4606      	mov	r6, r0
 800cc62:	b928      	cbnz	r0, 800cc70 <udp_input+0x18>
 800cc64:	4b5f      	ldr	r3, [pc, #380]	; (800cde4 <udp_input+0x18c>)
 800cc66:	22cf      	movs	r2, #207	; 0xcf
 800cc68:	495f      	ldr	r1, [pc, #380]	; (800cde8 <udp_input+0x190>)
 800cc6a:	4860      	ldr	r0, [pc, #384]	; (800cdec <udp_input+0x194>)
 800cc6c:	f000 fc9c 	bl	800d5a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cc70:	f1b8 0f00 	cmp.w	r8, #0
 800cc74:	d105      	bne.n	800cc82 <udp_input+0x2a>
 800cc76:	4b5b      	ldr	r3, [pc, #364]	; (800cde4 <udp_input+0x18c>)
 800cc78:	22d0      	movs	r2, #208	; 0xd0
 800cc7a:	495d      	ldr	r1, [pc, #372]	; (800cdf0 <udp_input+0x198>)
 800cc7c:	485b      	ldr	r0, [pc, #364]	; (800cdec <udp_input+0x194>)
 800cc7e:	f000 fc93 	bl	800d5a8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cc82:	8973      	ldrh	r3, [r6, #10]
 800cc84:	2b07      	cmp	r3, #7
 800cc86:	d805      	bhi.n	800cc94 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc88:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc8a:	b005      	add	sp, #20
 800cc8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800cc90:	f7fc bae2 	b.w	8009258 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cc94:	4f57      	ldr	r7, [pc, #348]	; (800cdf4 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800cc96:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800cc98:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cc9a:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800cc9c:	46aa      	mov	sl, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cc9e:	6978      	ldr	r0, [r7, #20]
 800cca0:	f7fb f925 	bl	8007eee <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cca4:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800ce04 <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cca8:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800ccaa:	8820      	ldrh	r0, [r4, #0]
 800ccac:	f7fb fd14 	bl	80086d8 <lwip_htons>
 800ccb0:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800ccb2:	8860      	ldrh	r0, [r4, #2]
 800ccb4:	f7fb fd10 	bl	80086d8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccb8:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ccbc:	f8df c124 	ldr.w	ip, [pc, #292]	; 800cde4 <udp_input+0x18c>
 800ccc0:	494d      	ldr	r1, [pc, #308]	; (800cdf8 <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800ccc2:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccc4:	b99c      	cbnz	r4, 800ccee <udp_input+0x96>
  if (pcb != NULL) {
 800ccc6:	b925      	cbnz	r5, 800ccd2 <udp_input+0x7a>
  if (for_us) {
 800ccc8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d1da      	bne.n	800cc88 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ccd2:	2108      	movs	r1, #8
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7fc fa8b 	bl	80091f0 <pbuf_remove_header>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d05e      	beq.n	800cd9c <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ccde:	4b41      	ldr	r3, [pc, #260]	; (800cde4 <udp_input+0x18c>)
 800cce0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cce4:	4945      	ldr	r1, [pc, #276]	; (800cdfc <udp_input+0x1a4>)
 800cce6:	4841      	ldr	r0, [pc, #260]	; (800cdec <udp_input+0x194>)
 800cce8:	f000 fc5e 	bl	800d5a8 <iprintf>
 800ccec:	e7cc      	b.n	800cc88 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800ccee:	8a62      	ldrh	r2, [r4, #18]
 800ccf0:	9803      	ldr	r0, [sp, #12]
 800ccf2:	4282      	cmp	r2, r0
 800ccf4:	d14d      	bne.n	800cd92 <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	d107      	bne.n	800cd0c <udp_input+0xb4>
 800ccfc:	4663      	mov	r3, ip
 800ccfe:	2288      	movs	r2, #136	; 0x88
 800cd00:	483a      	ldr	r0, [pc, #232]	; (800cdec <udp_input+0x194>)
 800cd02:	f000 fc51 	bl	800d5a8 <iprintf>
 800cd06:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cde4 <udp_input+0x18c>
 800cd0a:	493b      	ldr	r1, [pc, #236]	; (800cdf8 <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd0c:	7a20      	ldrb	r0, [r4, #8]
 800cd0e:	b130      	cbz	r0, 800cd1e <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800cd16:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	4290      	cmp	r0, r2
 800cd1c:	d139      	bne.n	800cd92 <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cd1e:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800cd20:	f1b9 0f00 	cmp.w	r9, #0
 800cd24:	d030      	beq.n	800cd88 <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cd26:	b13a      	cbz	r2, 800cd38 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cd28:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	d004      	beq.n	800cd38 <udp_input+0xe0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cd2e:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cd30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd34:	4218      	tst	r0, r3
 800cd36:	d12c      	bne.n	800cd92 <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cd38:	7c20      	ldrb	r0, [r4, #16]
 800cd3a:	0743      	lsls	r3, r0, #29
 800cd3c:	d40e      	bmi.n	800cd5c <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800cd3e:	b35d      	cbz	r5, 800cd98 <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cd40:	f1b9 0f00 	cmp.w	r9, #0
 800cd44:	d00a      	beq.n	800cd5c <udp_input+0x104>
 800cd46:	6978      	ldr	r0, [r7, #20]
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d107      	bne.n	800cd5c <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cd4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	4283      	cmp	r3, r0
 800cd54:	d002      	beq.n	800cd5c <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cd56:	4290      	cmp	r0, r2
 800cd58:	bf08      	it	eq
 800cd5a:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800cd5c:	8aa2      	ldrh	r2, [r4, #20]
 800cd5e:	9b02      	ldr	r3, [sp, #8]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d116      	bne.n	800cd92 <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cd64:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800cd66:	b112      	cbz	r2, 800cd6e <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cd68:	6938      	ldr	r0, [r7, #16]
 800cd6a:	4282      	cmp	r2, r0
 800cd6c:	d111      	bne.n	800cd92 <udp_input+0x13a>
        if (prev != NULL) {
 800cd6e:	f1ba 0f00 	cmp.w	sl, #0
 800cd72:	d007      	beq.n	800cd84 <udp_input+0x12c>
          prev->next = pcb->next;
 800cd74:	68e3      	ldr	r3, [r4, #12]
 800cd76:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800cd7a:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800cd7e:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800cd82:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800cd84:	4625      	mov	r5, r4
 800cd86:	e7a4      	b.n	800ccd2 <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	d0d5      	beq.n	800cd38 <udp_input+0xe0>
 800cd8c:	6978      	ldr	r0, [r7, #20]
 800cd8e:	4290      	cmp	r0, r2
 800cd90:	d0d2      	beq.n	800cd38 <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd92:	46a2      	mov	sl, r4
 800cd94:	68e4      	ldr	r4, [r4, #12]
 800cd96:	e795      	b.n	800ccc4 <udp_input+0x6c>
 800cd98:	4625      	mov	r5, r4
 800cd9a:	e7df      	b.n	800cd5c <udp_input+0x104>
    if (pcb != NULL) {
 800cd9c:	b16d      	cbz	r5, 800cdba <udp_input+0x162>
      if (pcb->recv != NULL) {
 800cd9e:	69ac      	ldr	r4, [r5, #24]
 800cda0:	2c00      	cmp	r4, #0
 800cda2:	f43f af71 	beq.w	800cc88 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cda6:	9b02      	ldr	r3, [sp, #8]
 800cda8:	4632      	mov	r2, r6
 800cdaa:	4629      	mov	r1, r5
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	4b14      	ldr	r3, [pc, #80]	; (800ce00 <udp_input+0x1a8>)
 800cdb0:	69e8      	ldr	r0, [r5, #28]
 800cdb2:	47a0      	blx	r4
}
 800cdb4:	b005      	add	sp, #20
 800cdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cdba:	f1b9 0f00 	cmp.w	r9, #0
 800cdbe:	f47f af63 	bne.w	800cc88 <udp_input+0x30>
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdc8:	2be0      	cmp	r3, #224	; 0xe0
 800cdca:	f43f af5d 	beq.w	800cc88 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cdce:	89b9      	ldrh	r1, [r7, #12]
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	3108      	adds	r1, #8
 800cdd4:	b209      	sxth	r1, r1
 800cdd6:	f7fc fa37 	bl	8009248 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cdda:	2103      	movs	r1, #3
 800cddc:	4630      	mov	r0, r6
 800cdde:	f7fa fee5 	bl	8007bac <icmp_dest_unreach>
 800cde2:	e751      	b.n	800cc88 <udp_input+0x30>
 800cde4:	0801b0ff 	.word	0x0801b0ff
 800cde8:	0801b16c 	.word	0x0801b16c
 800cdec:	08017fc5 	.word	0x08017fc5
 800cdf0:	0801b184 	.word	0x0801b184
 800cdf4:	2000a694 	.word	0x2000a694
 800cdf8:	0801b19d 	.word	0x0801b19d
 800cdfc:	0801b1c2 	.word	0x0801b1c2
 800ce00:	2000a6a4 	.word	0x2000a6a4
 800ce04:	2000e46c 	.word	0x2000e46c

0800ce08 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800ce0c:	4c2b      	ldr	r4, [pc, #172]	; (800cebc <udp_bind+0xb4>)
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	bf18      	it	ne
 800ce12:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce14:	b950      	cbnz	r0, 800ce2c <udp_bind+0x24>
 800ce16:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <udp_bind+0xb8>)
 800ce18:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ce1c:	4929      	ldr	r1, [pc, #164]	; (800cec4 <udp_bind+0xbc>)
 800ce1e:	482a      	ldr	r0, [pc, #168]	; (800cec8 <udp_bind+0xc0>)
 800ce20:	f000 fbc2 	bl	800d5a8 <iprintf>
 800ce24:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce2c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800ced0 <udp_bind+0xc8>
 800ce30:	f8dc 5000 	ldr.w	r5, [ip]
 800ce34:	4629      	mov	r1, r5
 800ce36:	b9c9      	cbnz	r1, 800ce6c <udp_bind+0x64>
  if (port == 0) {
 800ce38:	2a00      	cmp	r2, #0
 800ce3a:	d13c      	bne.n	800ceb6 <udp_bind+0xae>
 800ce3c:	4f23      	ldr	r7, [pc, #140]	; (800cecc <udp_bind+0xc4>)
 800ce3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ce42:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800ce46:	883a      	ldrh	r2, [r7, #0]
 800ce48:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce4a:	462e      	mov	r6, r5
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ce4c:	bf16      	itet	ne
 800ce4e:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ce50:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ce54:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce56:	b97e      	cbnz	r6, 800ce78 <udp_bind+0x70>
 800ce58:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ce5a:	6823      	ldr	r3, [r4, #0]
  pcb->local_port = port;
 800ce5c:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ce5e:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800ce60:	b911      	cbnz	r1, 800ce68 <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800ce62:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800ce64:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800ce68:	2000      	movs	r0, #0
 800ce6a:	e7dd      	b.n	800ce28 <udp_bind+0x20>
    if (pcb == ipcb) {
 800ce6c:	4281      	cmp	r1, r0
 800ce6e:	d001      	beq.n	800ce74 <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce70:	68c9      	ldr	r1, [r1, #12]
 800ce72:	e7e0      	b.n	800ce36 <udp_bind+0x2e>
      rebind = 1;
 800ce74:	2101      	movs	r1, #1
 800ce76:	e7df      	b.n	800ce38 <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800ce78:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800ce7c:	4590      	cmp	r8, r2
 800ce7e:	d107      	bne.n	800ce90 <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ce80:	3b01      	subs	r3, #1
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1df      	bne.n	800ce48 <udp_bind+0x40>
 800ce88:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800ce8a:	f06f 0007 	mvn.w	r0, #7
 800ce8e:	e7cb      	b.n	800ce28 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce90:	68f6      	ldr	r6, [r6, #12]
 800ce92:	e7e0      	b.n	800ce56 <udp_bind+0x4e>
      if (pcb != ipcb) {
 800ce94:	4283      	cmp	r3, r0
 800ce96:	d00a      	beq.n	800ceae <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800ce98:	8a5e      	ldrh	r6, [r3, #18]
 800ce9a:	4296      	cmp	r6, r2
 800ce9c:	d107      	bne.n	800ceae <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ce9e:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cea0:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800cea2:	42be      	cmp	r6, r7
 800cea4:	d0f1      	beq.n	800ce8a <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800cea6:	2f00      	cmp	r7, #0
 800cea8:	d0ef      	beq.n	800ce8a <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800ceaa:	2e00      	cmp	r6, #0
 800ceac:	d0ed      	beq.n	800ce8a <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1ef      	bne.n	800ce94 <udp_bind+0x8c>
 800ceb4:	e7d1      	b.n	800ce5a <udp_bind+0x52>
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	e7fa      	b.n	800ceb0 <udp_bind+0xa8>
 800ceba:	bf00      	nop
 800cebc:	0800f134 	.word	0x0800f134
 800cec0:	0801b0ff 	.word	0x0801b0ff
 800cec4:	0801b1dd 	.word	0x0801b1dd
 800cec8:	08017fc5 	.word	0x08017fc5
 800cecc:	2000003c 	.word	0x2000003c
 800ced0:	2000e46c 	.word	0x2000e46c

0800ced4 <udp_sendto_if_src>:
{
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	b085      	sub	sp, #20
 800ceda:	460e      	mov	r6, r1
 800cedc:	4690      	mov	r8, r2
 800cede:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cee0:	4607      	mov	r7, r0
{
 800cee2:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cee6:	b960      	cbnz	r0, 800cf02 <udp_sendto_if_src+0x2e>
 800cee8:	4b3e      	ldr	r3, [pc, #248]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800ceea:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ceee:	493e      	ldr	r1, [pc, #248]	; (800cfe8 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cef0:	f06f 040f 	mvn.w	r4, #15
 800cef4:	483d      	ldr	r0, [pc, #244]	; (800cfec <udp_sendto_if_src+0x118>)
 800cef6:	f000 fb57 	bl	800d5a8 <iprintf>
}
 800cefa:	4620      	mov	r0, r4
 800cefc:	b005      	add	sp, #20
 800cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cf02:	b921      	cbnz	r1, 800cf0e <udp_sendto_if_src+0x3a>
 800cf04:	4b37      	ldr	r3, [pc, #220]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800cf06:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cf0a:	4939      	ldr	r1, [pc, #228]	; (800cff0 <udp_sendto_if_src+0x11c>)
 800cf0c:	e7f0      	b.n	800cef0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cf0e:	b922      	cbnz	r2, 800cf1a <udp_sendto_if_src+0x46>
 800cf10:	4b34      	ldr	r3, [pc, #208]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800cf12:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cf16:	4937      	ldr	r1, [pc, #220]	; (800cff4 <udp_sendto_if_src+0x120>)
 800cf18:	e7ea      	b.n	800cef0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cf1a:	f1ba 0f00 	cmp.w	sl, #0
 800cf1e:	d104      	bne.n	800cf2a <udp_sendto_if_src+0x56>
 800cf20:	4b30      	ldr	r3, [pc, #192]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800cf22:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cf26:	4934      	ldr	r1, [pc, #208]	; (800cff8 <udp_sendto_if_src+0x124>)
 800cf28:	e7e2      	b.n	800cef0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cf2a:	f1bb 0f00 	cmp.w	fp, #0
 800cf2e:	d104      	bne.n	800cf3a <udp_sendto_if_src+0x66>
 800cf30:	4b2c      	ldr	r3, [pc, #176]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800cf32:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cf36:	4931      	ldr	r1, [pc, #196]	; (800cffc <udp_sendto_if_src+0x128>)
 800cf38:	e7da      	b.n	800cef0 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800cf3a:	8a42      	ldrh	r2, [r0, #18]
 800cf3c:	b13a      	cbz	r2, 800cf4e <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800cf3e:	8932      	ldrh	r2, [r6, #8]
 800cf40:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d909      	bls.n	800cf5c <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800cf48:	f04f 34ff 	mov.w	r4, #4294967295
 800cf4c:	e7d5      	b.n	800cefa <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cf4e:	4601      	mov	r1, r0
 800cf50:	f7ff ff5a 	bl	800ce08 <udp_bind>
    if (err != ERR_OK) {
 800cf54:	4604      	mov	r4, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0f1      	beq.n	800cf3e <udp_sendto_if_src+0x6a>
 800cf5a:	e7ce      	b.n	800cefa <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800cf5c:	2108      	movs	r1, #8
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7fc f942 	bl	80091e8 <pbuf_add_header>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d03a      	beq.n	800cfde <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cf68:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf6c:	2108      	movs	r1, #8
 800cf6e:	2022      	movs	r0, #34	; 0x22
 800cf70:	f7fc f9da 	bl	8009328 <pbuf_alloc>
    if (q == NULL) {
 800cf74:	4605      	mov	r5, r0
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d0e6      	beq.n	800cf48 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800cf7a:	8933      	ldrh	r3, [r6, #8]
 800cf7c:	b113      	cbz	r3, 800cf84 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800cf7e:	4631      	mov	r1, r6
 800cf80:	f7fc fb04 	bl	800958c <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cf84:	896b      	ldrh	r3, [r5, #10]
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	d806      	bhi.n	800cf98 <udp_sendto_if_src+0xc4>
 800cf8a:	4b16      	ldr	r3, [pc, #88]	; (800cfe4 <udp_sendto_if_src+0x110>)
 800cf8c:	f240 320d 	movw	r2, #781	; 0x30d
 800cf90:	491b      	ldr	r1, [pc, #108]	; (800d000 <udp_sendto_if_src+0x12c>)
 800cf92:	4816      	ldr	r0, [pc, #88]	; (800cfec <udp_sendto_if_src+0x118>)
 800cf94:	f000 fb08 	bl	800d5a8 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800cf98:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800cf9a:	8a78      	ldrh	r0, [r7, #18]
 800cf9c:	f7fb fb9c 	bl	80086d8 <lwip_htons>
 800cfa0:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cfa2:	4648      	mov	r0, r9
 800cfa4:	f7fb fb98 	bl	80086d8 <lwip_htons>
  udphdr->chksum = 0x0000;
 800cfa8:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800cfaa:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800cfac:	71a3      	strb	r3, [r4, #6]
 800cfae:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800cfb0:	8928      	ldrh	r0, [r5, #8]
 800cfb2:	f7fb fb91 	bl	80086d8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cfb6:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800cfb8:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cfba:	4642      	mov	r2, r8
 800cfbc:	f8cd b008 	str.w	fp, [sp, #8]
 800cfc0:	4651      	mov	r1, sl
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	7abb      	ldrb	r3, [r7, #10]
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	f7fa ff02 	bl	8007dd4 <ip4_output_if_src>
  if (q != p) {
 800cfd0:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cfd2:	4604      	mov	r4, r0
  if (q != p) {
 800cfd4:	d091      	beq.n	800cefa <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f7fc f93e 	bl	8009258 <pbuf_free>
    q = NULL;
 800cfdc:	e78d      	b.n	800cefa <udp_sendto_if_src+0x26>
 800cfde:	4635      	mov	r5, r6
 800cfe0:	e7d0      	b.n	800cf84 <udp_sendto_if_src+0xb0>
 800cfe2:	bf00      	nop
 800cfe4:	0801b0ff 	.word	0x0801b0ff
 800cfe8:	0801b1f3 	.word	0x0801b1f3
 800cfec:	08017fc5 	.word	0x08017fc5
 800cff0:	0801b212 	.word	0x0801b212
 800cff4:	0801b232 	.word	0x0801b232
 800cff8:	0801b254 	.word	0x0801b254
 800cffc:	0801b276 	.word	0x0801b276
 800d000:	0801b297 	.word	0x0801b297

0800d004 <udp_sendto_if>:
{
 800d004:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d006:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d008:	b950      	cbnz	r0, 800d020 <udp_sendto_if+0x1c>
 800d00a:	4b18      	ldr	r3, [pc, #96]	; (800d06c <udp_sendto_if+0x68>)
 800d00c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d010:	4917      	ldr	r1, [pc, #92]	; (800d070 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d012:	4818      	ldr	r0, [pc, #96]	; (800d074 <udp_sendto_if+0x70>)
 800d014:	f000 fac8 	bl	800d5a8 <iprintf>
 800d018:	f06f 000f 	mvn.w	r0, #15
}
 800d01c:	b002      	add	sp, #8
 800d01e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d020:	b921      	cbnz	r1, 800d02c <udp_sendto_if+0x28>
 800d022:	4b12      	ldr	r3, [pc, #72]	; (800d06c <udp_sendto_if+0x68>)
 800d024:	f240 2281 	movw	r2, #641	; 0x281
 800d028:	4913      	ldr	r1, [pc, #76]	; (800d078 <udp_sendto_if+0x74>)
 800d02a:	e7f2      	b.n	800d012 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d02c:	b922      	cbnz	r2, 800d038 <udp_sendto_if+0x34>
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <udp_sendto_if+0x68>)
 800d030:	f240 2282 	movw	r2, #642	; 0x282
 800d034:	4911      	ldr	r1, [pc, #68]	; (800d07c <udp_sendto_if+0x78>)
 800d036:	e7ec      	b.n	800d012 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d038:	b924      	cbnz	r4, 800d044 <udp_sendto_if+0x40>
 800d03a:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <udp_sendto_if+0x68>)
 800d03c:	f240 2283 	movw	r2, #643	; 0x283
 800d040:	490f      	ldr	r1, [pc, #60]	; (800d080 <udp_sendto_if+0x7c>)
 800d042:	e7e6      	b.n	800d012 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d044:	6805      	ldr	r5, [r0, #0]
 800d046:	b11d      	cbz	r5, 800d050 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d048:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d04c:	2ee0      	cmp	r6, #224	; 0xe0
 800d04e:	d105      	bne.n	800d05c <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800d050:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d052:	e9cd 4500 	strd	r4, r5, [sp]
 800d056:	f7ff ff3d 	bl	800ced4 <udp_sendto_if_src>
 800d05a:	e7df      	b.n	800d01c <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d05c:	6866      	ldr	r6, [r4, #4]
 800d05e:	42b5      	cmp	r5, r6
 800d060:	d101      	bne.n	800d066 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d062:	4605      	mov	r5, r0
 800d064:	e7f5      	b.n	800d052 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800d066:	f06f 0003 	mvn.w	r0, #3
 800d06a:	e7d7      	b.n	800d01c <udp_sendto_if+0x18>
 800d06c:	0801b0ff 	.word	0x0801b0ff
 800d070:	0801b2c5 	.word	0x0801b2c5
 800d074:	08017fc5 	.word	0x08017fc5
 800d078:	0801b2e0 	.word	0x0801b2e0
 800d07c:	0801b2fc 	.word	0x0801b2fc
 800d080:	0801b31a 	.word	0x0801b31a

0800d084 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	460d      	mov	r5, r1
 800d088:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d08a:	4604      	mov	r4, r0
 800d08c:	b948      	cbnz	r0, 800d0a2 <udp_connect+0x1e>
 800d08e:	4b16      	ldr	r3, [pc, #88]	; (800d0e8 <udp_connect+0x64>)
 800d090:	f240 4235 	movw	r2, #1077	; 0x435
 800d094:	4915      	ldr	r1, [pc, #84]	; (800d0ec <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d096:	4816      	ldr	r0, [pc, #88]	; (800d0f0 <udp_connect+0x6c>)
 800d098:	f000 fa86 	bl	800d5a8 <iprintf>
 800d09c:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800d0a0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d0a2:	b921      	cbnz	r1, 800d0ae <udp_connect+0x2a>
 800d0a4:	4b10      	ldr	r3, [pc, #64]	; (800d0e8 <udp_connect+0x64>)
 800d0a6:	f240 4236 	movw	r2, #1078	; 0x436
 800d0aa:	4912      	ldr	r1, [pc, #72]	; (800d0f4 <udp_connect+0x70>)
 800d0ac:	e7f3      	b.n	800d096 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800d0ae:	8a42      	ldrh	r2, [r0, #18]
 800d0b0:	b16a      	cbz	r2, 800d0ce <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d0b2:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800d0b4:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d0b6:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d0b8:	7c23      	ldrb	r3, [r4, #16]
 800d0ba:	f043 0304 	orr.w	r3, r3, #4
 800d0be:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0c0:	4b0d      	ldr	r3, [pc, #52]	; (800d0f8 <udp_connect+0x74>)
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	b940      	cbnz	r0, 800d0da <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800d0c8:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800d0ca:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d0cc:	e7e8      	b.n	800d0a0 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	f7ff fe9a 	bl	800ce08 <udp_bind>
    if (err != ERR_OK) {
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d0ec      	beq.n	800d0b2 <udp_connect+0x2e>
 800d0d8:	e7e2      	b.n	800d0a0 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800d0da:	42a0      	cmp	r0, r4
 800d0dc:	d001      	beq.n	800d0e2 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0de:	68c0      	ldr	r0, [r0, #12]
 800d0e0:	e7f1      	b.n	800d0c6 <udp_connect+0x42>
      return ERR_OK;
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	e7dc      	b.n	800d0a0 <udp_connect+0x1c>
 800d0e6:	bf00      	nop
 800d0e8:	0801b0ff 	.word	0x0801b0ff
 800d0ec:	0801b3b0 	.word	0x0801b3b0
 800d0f0:	08017fc5 	.word	0x08017fc5
 800d0f4:	0801b3c9 	.word	0x0801b3c9
 800d0f8:	2000e46c 	.word	0x2000e46c

0800d0fc <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d0fc:	b930      	cbnz	r0, 800d10c <udp_recv+0x10>
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <udp_recv+0x18>)
 800d100:	f240 428a 	movw	r2, #1162	; 0x48a
 800d104:	4904      	ldr	r1, [pc, #16]	; (800d118 <udp_recv+0x1c>)
 800d106:	4805      	ldr	r0, [pc, #20]	; (800d11c <udp_recv+0x20>)
 800d108:	f000 ba4e 	b.w	800d5a8 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800d10c:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	0801b0ff 	.word	0x0801b0ff
 800d118:	0801b401 	.word	0x0801b401
 800d11c:	08017fc5 	.word	0x08017fc5

0800d120 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d120:	4601      	mov	r1, r0
 800d122:	b930      	cbnz	r0, 800d132 <udp_remove+0x12>
 800d124:	4b0d      	ldr	r3, [pc, #52]	; (800d15c <udp_remove+0x3c>)
 800d126:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d12a:	490d      	ldr	r1, [pc, #52]	; (800d160 <udp_remove+0x40>)
 800d12c:	480d      	ldr	r0, [pc, #52]	; (800d164 <udp_remove+0x44>)
 800d12e:	f000 ba3b 	b.w	800d5a8 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d132:	4a0d      	ldr	r2, [pc, #52]	; (800d168 <udp_remove+0x48>)
 800d134:	6813      	ldr	r3, [r2, #0]
 800d136:	4283      	cmp	r3, r0
 800d138:	d105      	bne.n	800d146 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d13a:	68c3      	ldr	r3, [r0, #12]
 800d13c:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d13e:	2000      	movs	r0, #0
 800d140:	f7fb be2a 	b.w	8008d98 <memp_free>
 800d144:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0f9      	beq.n	800d13e <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	d0f6      	beq.n	800d13e <udp_remove+0x1e>
 800d150:	428a      	cmp	r2, r1
 800d152:	d1f7      	bne.n	800d144 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800d154:	68ca      	ldr	r2, [r1, #12]
 800d156:	60da      	str	r2, [r3, #12]
        break;
 800d158:	e7f1      	b.n	800d13e <udp_remove+0x1e>
 800d15a:	bf00      	nop
 800d15c:	0801b0ff 	.word	0x0801b0ff
 800d160:	0801b417 	.word	0x0801b417
 800d164:	08017fc5 	.word	0x08017fc5
 800d168:	2000e46c 	.word	0x2000e46c

0800d16c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d16c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d16e:	2000      	movs	r0, #0
 800d170:	f7fb fde2 	bl	8008d38 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d174:	4604      	mov	r4, r0
 800d176:	b128      	cbz	r0, 800d184 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d178:	2220      	movs	r2, #32
 800d17a:	2100      	movs	r1, #0
 800d17c:	f000 fa0c 	bl	800d598 <memset>
    pcb->ttl = UDP_TTL;
 800d180:	23ff      	movs	r3, #255	; 0xff
 800d182:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d184:	4620      	mov	r0, r4
 800d186:	bd10      	pop	{r4, pc}

0800d188 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d188:	f7ff bff0 	b.w	800d16c <udp_new>

0800d18c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d18c:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d18e:	b138      	cbz	r0, 800d1a0 <udp_netif_ip_addr_changed+0x14>
 800d190:	6803      	ldr	r3, [r0, #0]
 800d192:	b12b      	cbz	r3, 800d1a0 <udp_netif_ip_addr_changed+0x14>
 800d194:	b121      	cbz	r1, 800d1a0 <udp_netif_ip_addr_changed+0x14>
 800d196:	680b      	ldr	r3, [r1, #0]
 800d198:	b113      	cbz	r3, 800d1a0 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d19a:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <udp_netif_ip_addr_changed+0x28>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	b903      	cbnz	r3, 800d1a2 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800d1a0:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d1a2:	681c      	ldr	r4, [r3, #0]
 800d1a4:	6802      	ldr	r2, [r0, #0]
 800d1a6:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d1a8:	bf04      	itt	eq
 800d1aa:	680a      	ldreq	r2, [r1, #0]
 800d1ac:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	e7f5      	b.n	800d19e <udp_netif_ip_addr_changed+0x12>
 800d1b2:	bf00      	nop
 800d1b4:	2000e46c 	.word	0x2000e46c

0800d1b8 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d1b8:	8943      	ldrh	r3, [r0, #10]
 800d1ba:	2b0e      	cmp	r3, #14
{
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800d1c2:	d91a      	bls.n	800d1fa <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d1c4:	7bc3      	ldrb	r3, [r0, #15]
 800d1c6:	b91b      	cbnz	r3, 800d1d0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800d1c8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d1d0:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d1d2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d1d4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800d1d6:	07d9      	lsls	r1, r3, #31
 800d1d8:	d50a      	bpl.n	800d1f0 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d111      	bne.n	800d202 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d1de:	7843      	ldrb	r3, [r0, #1]
 800d1e0:	b933      	cbnz	r3, 800d1f0 <ethernet_input+0x38>
 800d1e2:	7883      	ldrb	r3, [r0, #2]
 800d1e4:	2b5e      	cmp	r3, #94	; 0x5e
 800d1e6:	d103      	bne.n	800d1f0 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d1e8:	7b63      	ldrb	r3, [r4, #13]
 800d1ea:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d1ee:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d1f0:	2e08      	cmp	r6, #8
 800d1f2:	d010      	beq.n	800d216 <ethernet_input+0x5e>
 800d1f4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800d1f8:	d01d      	beq.n	800d236 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f7fc f82c 	bl	8009258 <pbuf_free>
  return ERR_OK;
 800d200:	e017      	b.n	800d232 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d202:	2206      	movs	r2, #6
 800d204:	4913      	ldr	r1, [pc, #76]	; (800d254 <ethernet_input+0x9c>)
 800d206:	f000 f98f 	bl	800d528 <memcmp>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d1f0      	bne.n	800d1f0 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800d20e:	7b63      	ldrb	r3, [r4, #13]
 800d210:	f043 0308 	orr.w	r3, r3, #8
 800d214:	e7eb      	b.n	800d1ee <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d216:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800d21a:	071a      	lsls	r2, r3, #28
 800d21c:	d5ed      	bpl.n	800d1fa <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d21e:	210e      	movs	r1, #14
 800d220:	4620      	mov	r0, r4
 800d222:	f7fb ffe5 	bl	80091f0 <pbuf_remove_header>
 800d226:	2800      	cmp	r0, #0
 800d228:	d1e7      	bne.n	800d1fa <ethernet_input+0x42>
        ip4_input(p, netif);
 800d22a:	4629      	mov	r1, r5
 800d22c:	4620      	mov	r0, r4
 800d22e:	f7fa fd0d 	bl	8007c4c <ip4_input>
}
 800d232:	2000      	movs	r0, #0
 800d234:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d236:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800d23a:	071b      	lsls	r3, r3, #28
 800d23c:	d5dd      	bpl.n	800d1fa <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d23e:	210e      	movs	r1, #14
 800d240:	4620      	mov	r0, r4
 800d242:	f7fb ffd5 	bl	80091f0 <pbuf_remove_header>
 800d246:	2800      	cmp	r0, #0
 800d248:	d1d7      	bne.n	800d1fa <ethernet_input+0x42>
        etharp_input(p, netif);
 800d24a:	4629      	mov	r1, r5
 800d24c:	4620      	mov	r0, r4
 800d24e:	f7fa f94f 	bl	80074f0 <etharp_input>
      break;
 800d252:	e7ee      	b.n	800d232 <ethernet_input+0x7a>
 800d254:	0800f284 	.word	0x0800f284

0800d258 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25c:	460d      	mov	r5, r1
 800d25e:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d260:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800d264:	4616      	mov	r6, r2
 800d266:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d268:	f7fb fa36 	bl	80086d8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d26c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d26e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d270:	4628      	mov	r0, r5
 800d272:	f7fb ffb9 	bl	80091e8 <pbuf_add_header>
 800d276:	b9e0      	cbnz	r0, 800d2b2 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d278:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800d27a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	600b      	str	r3, [r1, #0]
 800d282:	88bb      	ldrh	r3, [r7, #4]
 800d284:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d286:	6833      	ldr	r3, [r6, #0]
 800d288:	f8c1 3006 	str.w	r3, [r1, #6]
 800d28c:	88b3      	ldrh	r3, [r6, #4]
 800d28e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d290:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d294:	2b06      	cmp	r3, #6
 800d296:	d006      	beq.n	800d2a6 <ethernet_output+0x4e>
 800d298:	4b08      	ldr	r3, [pc, #32]	; (800d2bc <ethernet_output+0x64>)
 800d29a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d29e:	4908      	ldr	r1, [pc, #32]	; (800d2c0 <ethernet_output+0x68>)
 800d2a0:	4808      	ldr	r0, [pc, #32]	; (800d2c4 <ethernet_output+0x6c>)
 800d2a2:	f000 f981 	bl	800d5a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d2a6:	69a3      	ldr	r3, [r4, #24]
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d2ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d2b0:	4718      	bx	r3
}
 800d2b2:	f06f 0001 	mvn.w	r0, #1
 800d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ba:	bf00      	nop
 800d2bc:	0801b42f 	.word	0x0801b42f
 800d2c0:	0801b4a2 	.word	0x0801b4a2
 800d2c4:	08017fc5 	.word	0x08017fc5

0800d2c8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d2c8:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800d2ca:	2304      	movs	r3, #4
{
 800d2cc:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800d2ce:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d2d0:	4668      	mov	r0, sp
 800d2d2:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800d2d4:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d2d6:	f7f7 f875 	bl	80043c4 <osMessageCreate>
 800d2da:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d2dc:	fab0 f080 	clz	r0, r0
 800d2e0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800d2e2:	4240      	negs	r0, r0
 800d2e4:	b002      	add	sp, #8
 800d2e6:	bd10      	pop	{r4, pc}

0800d2e8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800d2ec:	6800      	ldr	r0, [r0, #0]
 800d2ee:	f7f7 f8dd 	bl	80044ac <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800d2f2:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800d2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800d2f8:	f7f7 b8df 	b.w	80044ba <osMessageDelete>

0800d2fc <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	6800      	ldr	r0, [r0, #0]
{
 800d300:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d302:	f7f7 f864 	bl	80043ce <osMessagePut>
 800d306:	3800      	subs	r0, #0
 800d308:	bf18      	it	ne
 800d30a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800d30c:	4240      	negs	r0, r0
 800d30e:	bd08      	pop	{r3, pc}

0800d310 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d312:	4617      	mov	r7, r2
 800d314:	b085      	sub	sp, #20
 800d316:	4606      	mov	r6, r0
 800d318:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800d31a:	f7f6 ff94 	bl	8004246 <osKernelSysTick>
 800d31e:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800d320:	b177      	cbz	r7, 800d340 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800d322:	463a      	mov	r2, r7
 800d324:	6831      	ldr	r1, [r6, #0]
 800d326:	a801      	add	r0, sp, #4
 800d328:	f7f7 f879 	bl	800441e <osMessageGet>

    if(event.status == osEventMessage)
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	2b10      	cmp	r3, #16
 800d330:	d10d      	bne.n	800d34e <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800d336:	f7f6 ff86 	bl	8004246 <osKernelSysTick>
 800d33a:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800d33c:	b005      	add	sp, #20
 800d33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800d340:	f04f 32ff 	mov.w	r2, #4294967295
 800d344:	6831      	ldr	r1, [r6, #0]
 800d346:	a801      	add	r0, sp, #4
 800d348:	f7f7 f869 	bl	800441e <osMessageGet>
 800d34c:	e7f1      	b.n	800d332 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800d34e:	f04f 30ff 	mov.w	r0, #4294967295
 800d352:	e7f3      	b.n	800d33c <sys_arch_mbox_fetch+0x2c>

0800d354 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800d354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d356:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800d358:	2200      	movs	r2, #0
 800d35a:	6801      	ldr	r1, [r0, #0]
 800d35c:	a801      	add	r0, sp, #4
 800d35e:	f7f7 f85e 	bl	800441e <osMessageGet>

  if(event.status == osEventMessage)
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800d366:	bf05      	ittet	eq
 800d368:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800d36a:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800d36c:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800d370:	6023      	streq	r3, [r4, #0]
  }
}
 800d372:	b004      	add	sp, #16
 800d374:	bd10      	pop	{r4, pc}

0800d376 <sys_mbox_valid>:
 800d376:	6800      	ldr	r0, [r0, #0]
 800d378:	3800      	subs	r0, #0
 800d37a:	bf18      	it	ne
 800d37c:	2001      	movne	r0, #1
 800d37e:	4770      	bx	lr

0800d380 <sys_mbox_set_invalid>:
 800d380:	2300      	movs	r3, #0
 800d382:	6003      	str	r3, [r0, #0]
 800d384:	4770      	bx	lr

0800d386 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800d386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d388:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800d38a:	2400      	movs	r4, #0
{
 800d38c:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800d38e:	a801      	add	r0, sp, #4
 800d390:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800d392:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800d394:	f7f6 ffd8 	bl	8004348 <osSemaphoreCreate>
 800d398:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800d39a:	b130      	cbz	r0, 800d3aa <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800d39c:	b945      	cbnz	r5, 800d3b0 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f6 ffe7 	bl	8004372 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800d3a4:	4628      	mov	r0, r5
}
 800d3a6:	b002      	add	sp, #8
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800d3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ae:	e7fa      	b.n	800d3a6 <sys_sem_new+0x20>
  return ERR_OK;
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	e7f8      	b.n	800d3a6 <sys_sem_new+0x20>

0800d3b4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	460e      	mov	r6, r1
 800d3b8:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800d3ba:	f7f6 ff44 	bl	8004246 <osKernelSysTick>
 800d3be:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800d3c0:	b146      	cbz	r6, 800d3d4 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	6828      	ldr	r0, [r5, #0]
 800d3c6:	f7f6 ffd4 	bl	8004372 <osSemaphoreWait>
 800d3ca:	b958      	cbnz	r0, 800d3e4 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800d3cc:	f7f6 ff3b 	bl	8004246 <osKernelSysTick>
 800d3d0:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800d3d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d3d8:	6828      	ldr	r0, [r5, #0]
 800d3da:	f7f6 ffca 	bl	8004372 <osSemaphoreWait>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d1f8      	bne.n	800d3d4 <sys_arch_sem_wait+0x20>
 800d3e2:	e7f3      	b.n	800d3cc <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	e7f3      	b.n	800d3d2 <sys_arch_sem_wait+0x1e>

0800d3ea <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800d3ea:	6800      	ldr	r0, [r0, #0]
 800d3ec:	f7f6 bfe6 	b.w	80043bc <osSemaphoreRelease>

0800d3f0 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800d3f0:	6800      	ldr	r0, [r0, #0]
 800d3f2:	f7f6 bfe5 	b.w	80043c0 <osSemaphoreDelete>

0800d3f6 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800d3f6:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800d3f8:	3800      	subs	r0, #0
 800d3fa:	bf18      	it	ne
 800d3fc:	2001      	movne	r0, #1
 800d3fe:	4770      	bx	lr

0800d400 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800d400:	2300      	movs	r3, #0
 800d402:	6003      	str	r3, [r0, #0]
}
 800d404:	4770      	bx	lr
	...

0800d408 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d408:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800d40a:	4803      	ldr	r0, [pc, #12]	; (800d418 <sys_init+0x10>)
 800d40c:	f7f6 ff47 	bl	800429e <osMutexCreate>
 800d410:	4b02      	ldr	r3, [pc, #8]	; (800d41c <sys_init+0x14>)
 800d412:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800d414:	bd08      	pop	{r3, pc}
 800d416:	bf00      	nop
 800d418:	0800f290 	.word	0x0800f290
 800d41c:	2000e470 	.word	0x2000e470

0800d420 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d420:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800d422:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d424:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d426:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800d428:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d42a:	f7f6 ff38 	bl	800429e <osMutexCreate>
 800d42e:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800d430:	fab0 f080 	clz	r0, r0
 800d434:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d436:	4240      	negs	r0, r0
 800d438:	b002      	add	sp, #8
 800d43a:	bd10      	pop	{r4, pc}

0800d43c <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800d43c:	f04f 31ff 	mov.w	r1, #4294967295
 800d440:	6800      	ldr	r0, [r0, #0]
 800d442:	f7f6 bf2f 	b.w	80042a4 <osMutexWait>

0800d446 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	f7f6 bf51 	b.w	80042ee <osMutexRelease>

0800d44c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d44e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d452:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800d454:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d456:	f8ad 100c 	strh.w	r1, [sp, #12]
 800d45a:	2100      	movs	r1, #0
 800d45c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800d460:	4611      	mov	r1, r2
 800d462:	f7f6 fef7 	bl	8004254 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800d466:	b007      	add	sp, #28
 800d468:	f85d fb04 	ldr.w	pc, [sp], #4

0800d46c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d46c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800d46e:	4b04      	ldr	r3, [pc, #16]	; (800d480 <sys_arch_protect+0x14>)
 800d470:	f04f 31ff 	mov.w	r1, #4294967295
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f7f6 ff15 	bl	80042a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800d47a:	2001      	movs	r0, #1
 800d47c:	bd08      	pop	{r3, pc}
 800d47e:	bf00      	nop
 800d480:	2000e470 	.word	0x2000e470

0800d484 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d484:	4b01      	ldr	r3, [pc, #4]	; (800d48c <sys_arch_unprotect+0x8>)
 800d486:	6818      	ldr	r0, [r3, #0]
 800d488:	f7f6 bf31 	b.w	80042ee <osMutexRelease>
 800d48c:	2000e470 	.word	0x2000e470

0800d490 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800d494:	4604      	mov	r4, r0
 800d496:	b1a8      	cbz	r0, 800d4c4 <fs_open+0x34>
 800d498:	b1a1      	cbz	r1, 800d4c4 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800d49a:	4d0c      	ldr	r5, [pc, #48]	; (800d4cc <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800d49c:	6869      	ldr	r1, [r5, #4]
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7f2 feb6 	bl	8000210 <strcmp>
 800d4a4:	b940      	cbnz	r0, 800d4b8 <fs_open+0x28>
      file->data = (const char *)f->data;
 800d4a6:	68ab      	ldr	r3, [r5, #8]
 800d4a8:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800d4aa:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800d4ac:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800d4ae:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800d4b2:	7c2b      	ldrb	r3, [r5, #16]
 800d4b4:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800d4b6:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800d4b8:	682d      	ldr	r5, [r5, #0]
 800d4ba:	2d00      	cmp	r5, #0
 800d4bc:	d1ee      	bne.n	800d49c <fs_open+0xc>
  return ERR_VAL;
 800d4be:	f06f 0005 	mvn.w	r0, #5
 800d4c2:	e7f8      	b.n	800d4b6 <fs_open+0x26>
    return ERR_ARG;
 800d4c4:	f06f 000f 	mvn.w	r0, #15
 800d4c8:	e7f5      	b.n	800d4b6 <fs_open+0x26>
 800d4ca:	bf00      	nop
 800d4cc:	0800f294 	.word	0x0800f294

0800d4d0 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800d4d0:	4770      	bx	lr
	...

0800d4d4 <__errno>:
 800d4d4:	4b01      	ldr	r3, [pc, #4]	; (800d4dc <__errno+0x8>)
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	20000040 	.word	0x20000040

0800d4e0 <__libc_init_array>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	4d0d      	ldr	r5, [pc, #52]	; (800d518 <__libc_init_array+0x38>)
 800d4e4:	4c0d      	ldr	r4, [pc, #52]	; (800d51c <__libc_init_array+0x3c>)
 800d4e6:	1b64      	subs	r4, r4, r5
 800d4e8:	10a4      	asrs	r4, r4, #2
 800d4ea:	2600      	movs	r6, #0
 800d4ec:	42a6      	cmp	r6, r4
 800d4ee:	d109      	bne.n	800d504 <__libc_init_array+0x24>
 800d4f0:	4d0b      	ldr	r5, [pc, #44]	; (800d520 <__libc_init_array+0x40>)
 800d4f2:	4c0c      	ldr	r4, [pc, #48]	; (800d524 <__libc_init_array+0x44>)
 800d4f4:	f001 fa88 	bl	800ea08 <_init>
 800d4f8:	1b64      	subs	r4, r4, r5
 800d4fa:	10a4      	asrs	r4, r4, #2
 800d4fc:	2600      	movs	r6, #0
 800d4fe:	42a6      	cmp	r6, r4
 800d500:	d105      	bne.n	800d50e <__libc_init_array+0x2e>
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	f855 3b04 	ldr.w	r3, [r5], #4
 800d508:	4798      	blx	r3
 800d50a:	3601      	adds	r6, #1
 800d50c:	e7ee      	b.n	800d4ec <__libc_init_array+0xc>
 800d50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d512:	4798      	blx	r3
 800d514:	3601      	adds	r6, #1
 800d516:	e7f2      	b.n	800d4fe <__libc_init_array+0x1e>
 800d518:	0801b624 	.word	0x0801b624
 800d51c:	0801b624 	.word	0x0801b624
 800d520:	0801b624 	.word	0x0801b624
 800d524:	0801b628 	.word	0x0801b628

0800d528 <memcmp>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	3901      	subs	r1, #1
 800d52c:	4402      	add	r2, r0
 800d52e:	4290      	cmp	r0, r2
 800d530:	d101      	bne.n	800d536 <memcmp+0xe>
 800d532:	2000      	movs	r0, #0
 800d534:	e005      	b.n	800d542 <memcmp+0x1a>
 800d536:	7803      	ldrb	r3, [r0, #0]
 800d538:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	d001      	beq.n	800d544 <memcmp+0x1c>
 800d540:	1b18      	subs	r0, r3, r4
 800d542:	bd10      	pop	{r4, pc}
 800d544:	3001      	adds	r0, #1
 800d546:	e7f2      	b.n	800d52e <memcmp+0x6>

0800d548 <memcpy>:
 800d548:	440a      	add	r2, r1
 800d54a:	4291      	cmp	r1, r2
 800d54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d550:	d100      	bne.n	800d554 <memcpy+0xc>
 800d552:	4770      	bx	lr
 800d554:	b510      	push	{r4, lr}
 800d556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d55e:	4291      	cmp	r1, r2
 800d560:	d1f9      	bne.n	800d556 <memcpy+0xe>
 800d562:	bd10      	pop	{r4, pc}

0800d564 <memmove>:
 800d564:	4288      	cmp	r0, r1
 800d566:	b510      	push	{r4, lr}
 800d568:	eb01 0402 	add.w	r4, r1, r2
 800d56c:	d902      	bls.n	800d574 <memmove+0x10>
 800d56e:	4284      	cmp	r4, r0
 800d570:	4623      	mov	r3, r4
 800d572:	d807      	bhi.n	800d584 <memmove+0x20>
 800d574:	1e43      	subs	r3, r0, #1
 800d576:	42a1      	cmp	r1, r4
 800d578:	d008      	beq.n	800d58c <memmove+0x28>
 800d57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d582:	e7f8      	b.n	800d576 <memmove+0x12>
 800d584:	4402      	add	r2, r0
 800d586:	4601      	mov	r1, r0
 800d588:	428a      	cmp	r2, r1
 800d58a:	d100      	bne.n	800d58e <memmove+0x2a>
 800d58c:	bd10      	pop	{r4, pc}
 800d58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d596:	e7f7      	b.n	800d588 <memmove+0x24>

0800d598 <memset>:
 800d598:	4402      	add	r2, r0
 800d59a:	4603      	mov	r3, r0
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d100      	bne.n	800d5a2 <memset+0xa>
 800d5a0:	4770      	bx	lr
 800d5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d5a6:	e7f9      	b.n	800d59c <memset+0x4>

0800d5a8 <iprintf>:
 800d5a8:	b40f      	push	{r0, r1, r2, r3}
 800d5aa:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <iprintf+0x2c>)
 800d5ac:	b513      	push	{r0, r1, r4, lr}
 800d5ae:	681c      	ldr	r4, [r3, #0]
 800d5b0:	b124      	cbz	r4, 800d5bc <iprintf+0x14>
 800d5b2:	69a3      	ldr	r3, [r4, #24]
 800d5b4:	b913      	cbnz	r3, 800d5bc <iprintf+0x14>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f000 f90e 	bl	800d7d8 <__sinit>
 800d5bc:	ab05      	add	r3, sp, #20
 800d5be:	9a04      	ldr	r2, [sp, #16]
 800d5c0:	68a1      	ldr	r1, [r4, #8]
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 fc27 	bl	800de18 <_vfiprintf_r>
 800d5ca:	b002      	add	sp, #8
 800d5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d0:	b004      	add	sp, #16
 800d5d2:	4770      	bx	lr
 800d5d4:	20000040 	.word	0x20000040

0800d5d8 <rand>:
 800d5d8:	4b16      	ldr	r3, [pc, #88]	; (800d634 <rand+0x5c>)
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	681c      	ldr	r4, [r3, #0]
 800d5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5e0:	b9b3      	cbnz	r3, 800d610 <rand+0x38>
 800d5e2:	2018      	movs	r0, #24
 800d5e4:	f000 f9aa 	bl	800d93c <malloc>
 800d5e8:	63a0      	str	r0, [r4, #56]	; 0x38
 800d5ea:	b928      	cbnz	r0, 800d5f8 <rand+0x20>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	4b12      	ldr	r3, [pc, #72]	; (800d638 <rand+0x60>)
 800d5f0:	4812      	ldr	r0, [pc, #72]	; (800d63c <rand+0x64>)
 800d5f2:	214e      	movs	r1, #78	; 0x4e
 800d5f4:	f000 f87a 	bl	800d6ec <__assert_func>
 800d5f8:	4a11      	ldr	r2, [pc, #68]	; (800d640 <rand+0x68>)
 800d5fa:	4b12      	ldr	r3, [pc, #72]	; (800d644 <rand+0x6c>)
 800d5fc:	e9c0 2300 	strd	r2, r3, [r0]
 800d600:	4b11      	ldr	r3, [pc, #68]	; (800d648 <rand+0x70>)
 800d602:	6083      	str	r3, [r0, #8]
 800d604:	230b      	movs	r3, #11
 800d606:	8183      	strh	r3, [r0, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	2300      	movs	r3, #0
 800d60c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d610:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d612:	4a0e      	ldr	r2, [pc, #56]	; (800d64c <rand+0x74>)
 800d614:	6920      	ldr	r0, [r4, #16]
 800d616:	6963      	ldr	r3, [r4, #20]
 800d618:	490d      	ldr	r1, [pc, #52]	; (800d650 <rand+0x78>)
 800d61a:	4342      	muls	r2, r0
 800d61c:	fb01 2203 	mla	r2, r1, r3, r2
 800d620:	fba0 0101 	umull	r0, r1, r0, r1
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	eb42 0001 	adc.w	r0, r2, r1
 800d62a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d62e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d632:	bd10      	pop	{r4, pc}
 800d634:	20000040 	.word	0x20000040
 800d638:	0801b4d8 	.word	0x0801b4d8
 800d63c:	0801b4ef 	.word	0x0801b4ef
 800d640:	abcd330e 	.word	0xabcd330e
 800d644:	e66d1234 	.word	0xe66d1234
 800d648:	0005deec 	.word	0x0005deec
 800d64c:	5851f42d 	.word	0x5851f42d
 800d650:	4c957f2d 	.word	0x4c957f2d

0800d654 <siprintf>:
 800d654:	b40e      	push	{r1, r2, r3}
 800d656:	b500      	push	{lr}
 800d658:	b09c      	sub	sp, #112	; 0x70
 800d65a:	ab1d      	add	r3, sp, #116	; 0x74
 800d65c:	9002      	str	r0, [sp, #8]
 800d65e:	9006      	str	r0, [sp, #24]
 800d660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d664:	4809      	ldr	r0, [pc, #36]	; (800d68c <siprintf+0x38>)
 800d666:	9107      	str	r1, [sp, #28]
 800d668:	9104      	str	r1, [sp, #16]
 800d66a:	4909      	ldr	r1, [pc, #36]	; (800d690 <siprintf+0x3c>)
 800d66c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d670:	9105      	str	r1, [sp, #20]
 800d672:	6800      	ldr	r0, [r0, #0]
 800d674:	9301      	str	r3, [sp, #4]
 800d676:	a902      	add	r1, sp, #8
 800d678:	f000 faa4 	bl	800dbc4 <_svfiprintf_r>
 800d67c:	9b02      	ldr	r3, [sp, #8]
 800d67e:	2200      	movs	r2, #0
 800d680:	701a      	strb	r2, [r3, #0]
 800d682:	b01c      	add	sp, #112	; 0x70
 800d684:	f85d eb04 	ldr.w	lr, [sp], #4
 800d688:	b003      	add	sp, #12
 800d68a:	4770      	bx	lr
 800d68c:	20000040 	.word	0x20000040
 800d690:	ffff0208 	.word	0xffff0208

0800d694 <strcat>:
 800d694:	b510      	push	{r4, lr}
 800d696:	4602      	mov	r2, r0
 800d698:	7814      	ldrb	r4, [r2, #0]
 800d69a:	4613      	mov	r3, r2
 800d69c:	3201      	adds	r2, #1
 800d69e:	2c00      	cmp	r4, #0
 800d6a0:	d1fa      	bne.n	800d698 <strcat+0x4>
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6ac:	2a00      	cmp	r2, #0
 800d6ae:	d1f9      	bne.n	800d6a4 <strcat+0x10>
 800d6b0:	bd10      	pop	{r4, pc}

0800d6b2 <strcpy>:
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6b8:	f803 2b01 	strb.w	r2, [r3], #1
 800d6bc:	2a00      	cmp	r2, #0
 800d6be:	d1f9      	bne.n	800d6b4 <strcpy+0x2>
 800d6c0:	4770      	bx	lr

0800d6c2 <strncmp>:
 800d6c2:	b510      	push	{r4, lr}
 800d6c4:	b17a      	cbz	r2, 800d6e6 <strncmp+0x24>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	3901      	subs	r1, #1
 800d6ca:	1884      	adds	r4, r0, r2
 800d6cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d6d4:	4290      	cmp	r0, r2
 800d6d6:	d101      	bne.n	800d6dc <strncmp+0x1a>
 800d6d8:	42a3      	cmp	r3, r4
 800d6da:	d101      	bne.n	800d6e0 <strncmp+0x1e>
 800d6dc:	1a80      	subs	r0, r0, r2
 800d6de:	bd10      	pop	{r4, pc}
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1f3      	bne.n	800d6cc <strncmp+0xa>
 800d6e4:	e7fa      	b.n	800d6dc <strncmp+0x1a>
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	e7f9      	b.n	800d6de <strncmp+0x1c>
	...

0800d6ec <__assert_func>:
 800d6ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	4b09      	ldr	r3, [pc, #36]	; (800d718 <__assert_func+0x2c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	68d8      	ldr	r0, [r3, #12]
 800d6fa:	b14c      	cbz	r4, 800d710 <__assert_func+0x24>
 800d6fc:	4b07      	ldr	r3, [pc, #28]	; (800d71c <__assert_func+0x30>)
 800d6fe:	9100      	str	r1, [sp, #0]
 800d700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d704:	4906      	ldr	r1, [pc, #24]	; (800d720 <__assert_func+0x34>)
 800d706:	462b      	mov	r3, r5
 800d708:	f000 f8e4 	bl	800d8d4 <fiprintf>
 800d70c:	f000 ff6e 	bl	800e5ec <abort>
 800d710:	4b04      	ldr	r3, [pc, #16]	; (800d724 <__assert_func+0x38>)
 800d712:	461c      	mov	r4, r3
 800d714:	e7f3      	b.n	800d6fe <__assert_func+0x12>
 800d716:	bf00      	nop
 800d718:	20000040 	.word	0x20000040
 800d71c:	0801b54a 	.word	0x0801b54a
 800d720:	0801b557 	.word	0x0801b557
 800d724:	08018193 	.word	0x08018193

0800d728 <std>:
 800d728:	2300      	movs	r3, #0
 800d72a:	b510      	push	{r4, lr}
 800d72c:	4604      	mov	r4, r0
 800d72e:	e9c0 3300 	strd	r3, r3, [r0]
 800d732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d736:	6083      	str	r3, [r0, #8]
 800d738:	8181      	strh	r1, [r0, #12]
 800d73a:	6643      	str	r3, [r0, #100]	; 0x64
 800d73c:	81c2      	strh	r2, [r0, #14]
 800d73e:	6183      	str	r3, [r0, #24]
 800d740:	4619      	mov	r1, r3
 800d742:	2208      	movs	r2, #8
 800d744:	305c      	adds	r0, #92	; 0x5c
 800d746:	f7ff ff27 	bl	800d598 <memset>
 800d74a:	4b05      	ldr	r3, [pc, #20]	; (800d760 <std+0x38>)
 800d74c:	6263      	str	r3, [r4, #36]	; 0x24
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <std+0x3c>)
 800d750:	62a3      	str	r3, [r4, #40]	; 0x28
 800d752:	4b05      	ldr	r3, [pc, #20]	; (800d768 <std+0x40>)
 800d754:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d756:	4b05      	ldr	r3, [pc, #20]	; (800d76c <std+0x44>)
 800d758:	6224      	str	r4, [r4, #32]
 800d75a:	6323      	str	r3, [r4, #48]	; 0x30
 800d75c:	bd10      	pop	{r4, pc}
 800d75e:	bf00      	nop
 800d760:	0800e3c1 	.word	0x0800e3c1
 800d764:	0800e3e3 	.word	0x0800e3e3
 800d768:	0800e41b 	.word	0x0800e41b
 800d76c:	0800e43f 	.word	0x0800e43f

0800d770 <_cleanup_r>:
 800d770:	4901      	ldr	r1, [pc, #4]	; (800d778 <_cleanup_r+0x8>)
 800d772:	f000 b8c1 	b.w	800d8f8 <_fwalk_reent>
 800d776:	bf00      	nop
 800d778:	0800e729 	.word	0x0800e729

0800d77c <__sfmoreglue>:
 800d77c:	b570      	push	{r4, r5, r6, lr}
 800d77e:	2268      	movs	r2, #104	; 0x68
 800d780:	1e4d      	subs	r5, r1, #1
 800d782:	4355      	muls	r5, r2
 800d784:	460e      	mov	r6, r1
 800d786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d78a:	f000 f94b 	bl	800da24 <_malloc_r>
 800d78e:	4604      	mov	r4, r0
 800d790:	b140      	cbz	r0, 800d7a4 <__sfmoreglue+0x28>
 800d792:	2100      	movs	r1, #0
 800d794:	e9c0 1600 	strd	r1, r6, [r0]
 800d798:	300c      	adds	r0, #12
 800d79a:	60a0      	str	r0, [r4, #8]
 800d79c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7a0:	f7ff fefa 	bl	800d598 <memset>
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}

0800d7a8 <__sfp_lock_acquire>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	; (800d7b0 <__sfp_lock_acquire+0x8>)
 800d7aa:	f000 b8c5 	b.w	800d938 <__retarget_lock_acquire_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	2000e479 	.word	0x2000e479

0800d7b4 <__sfp_lock_release>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__sfp_lock_release+0x8>)
 800d7b6:	f000 b8c0 	b.w	800d93a <__retarget_lock_release_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	2000e479 	.word	0x2000e479

0800d7c0 <__sinit_lock_acquire>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__sinit_lock_acquire+0x8>)
 800d7c2:	f000 b8b9 	b.w	800d938 <__retarget_lock_acquire_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	2000e47a 	.word	0x2000e47a

0800d7cc <__sinit_lock_release>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__sinit_lock_release+0x8>)
 800d7ce:	f000 b8b4 	b.w	800d93a <__retarget_lock_release_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	2000e47a 	.word	0x2000e47a

0800d7d8 <__sinit>:
 800d7d8:	b510      	push	{r4, lr}
 800d7da:	4604      	mov	r4, r0
 800d7dc:	f7ff fff0 	bl	800d7c0 <__sinit_lock_acquire>
 800d7e0:	69a3      	ldr	r3, [r4, #24]
 800d7e2:	b11b      	cbz	r3, 800d7ec <__sinit+0x14>
 800d7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e8:	f7ff bff0 	b.w	800d7cc <__sinit_lock_release>
 800d7ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7f0:	6523      	str	r3, [r4, #80]	; 0x50
 800d7f2:	4b13      	ldr	r3, [pc, #76]	; (800d840 <__sinit+0x68>)
 800d7f4:	4a13      	ldr	r2, [pc, #76]	; (800d844 <__sinit+0x6c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	bf04      	itt	eq
 800d7fe:	2301      	moveq	r3, #1
 800d800:	61a3      	streq	r3, [r4, #24]
 800d802:	4620      	mov	r0, r4
 800d804:	f000 f820 	bl	800d848 <__sfp>
 800d808:	6060      	str	r0, [r4, #4]
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 f81c 	bl	800d848 <__sfp>
 800d810:	60a0      	str	r0, [r4, #8]
 800d812:	4620      	mov	r0, r4
 800d814:	f000 f818 	bl	800d848 <__sfp>
 800d818:	2200      	movs	r2, #0
 800d81a:	60e0      	str	r0, [r4, #12]
 800d81c:	2104      	movs	r1, #4
 800d81e:	6860      	ldr	r0, [r4, #4]
 800d820:	f7ff ff82 	bl	800d728 <std>
 800d824:	68a0      	ldr	r0, [r4, #8]
 800d826:	2201      	movs	r2, #1
 800d828:	2109      	movs	r1, #9
 800d82a:	f7ff ff7d 	bl	800d728 <std>
 800d82e:	68e0      	ldr	r0, [r4, #12]
 800d830:	2202      	movs	r2, #2
 800d832:	2112      	movs	r1, #18
 800d834:	f7ff ff78 	bl	800d728 <std>
 800d838:	2301      	movs	r3, #1
 800d83a:	61a3      	str	r3, [r4, #24]
 800d83c:	e7d2      	b.n	800d7e4 <__sinit+0xc>
 800d83e:	bf00      	nop
 800d840:	0801b4d4 	.word	0x0801b4d4
 800d844:	0800d771 	.word	0x0800d771

0800d848 <__sfp>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	4607      	mov	r7, r0
 800d84c:	f7ff ffac 	bl	800d7a8 <__sfp_lock_acquire>
 800d850:	4b1e      	ldr	r3, [pc, #120]	; (800d8cc <__sfp+0x84>)
 800d852:	681e      	ldr	r6, [r3, #0]
 800d854:	69b3      	ldr	r3, [r6, #24]
 800d856:	b913      	cbnz	r3, 800d85e <__sfp+0x16>
 800d858:	4630      	mov	r0, r6
 800d85a:	f7ff ffbd 	bl	800d7d8 <__sinit>
 800d85e:	3648      	adds	r6, #72	; 0x48
 800d860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d864:	3b01      	subs	r3, #1
 800d866:	d503      	bpl.n	800d870 <__sfp+0x28>
 800d868:	6833      	ldr	r3, [r6, #0]
 800d86a:	b30b      	cbz	r3, 800d8b0 <__sfp+0x68>
 800d86c:	6836      	ldr	r6, [r6, #0]
 800d86e:	e7f7      	b.n	800d860 <__sfp+0x18>
 800d870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d874:	b9d5      	cbnz	r5, 800d8ac <__sfp+0x64>
 800d876:	4b16      	ldr	r3, [pc, #88]	; (800d8d0 <__sfp+0x88>)
 800d878:	60e3      	str	r3, [r4, #12]
 800d87a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d87e:	6665      	str	r5, [r4, #100]	; 0x64
 800d880:	f000 f859 	bl	800d936 <__retarget_lock_init_recursive>
 800d884:	f7ff ff96 	bl	800d7b4 <__sfp_lock_release>
 800d888:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d88c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d890:	6025      	str	r5, [r4, #0]
 800d892:	61a5      	str	r5, [r4, #24]
 800d894:	2208      	movs	r2, #8
 800d896:	4629      	mov	r1, r5
 800d898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d89c:	f7ff fe7c 	bl	800d598 <memset>
 800d8a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ac:	3468      	adds	r4, #104	; 0x68
 800d8ae:	e7d9      	b.n	800d864 <__sfp+0x1c>
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	f7ff ff62 	bl	800d77c <__sfmoreglue>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	6030      	str	r0, [r6, #0]
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d1d5      	bne.n	800d86c <__sfp+0x24>
 800d8c0:	f7ff ff78 	bl	800d7b4 <__sfp_lock_release>
 800d8c4:	230c      	movs	r3, #12
 800d8c6:	603b      	str	r3, [r7, #0]
 800d8c8:	e7ee      	b.n	800d8a8 <__sfp+0x60>
 800d8ca:	bf00      	nop
 800d8cc:	0801b4d4 	.word	0x0801b4d4
 800d8d0:	ffff0001 	.word	0xffff0001

0800d8d4 <fiprintf>:
 800d8d4:	b40e      	push	{r1, r2, r3}
 800d8d6:	b503      	push	{r0, r1, lr}
 800d8d8:	4601      	mov	r1, r0
 800d8da:	ab03      	add	r3, sp, #12
 800d8dc:	4805      	ldr	r0, [pc, #20]	; (800d8f4 <fiprintf+0x20>)
 800d8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e2:	6800      	ldr	r0, [r0, #0]
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	f000 fa97 	bl	800de18 <_vfiprintf_r>
 800d8ea:	b002      	add	sp, #8
 800d8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f0:	b003      	add	sp, #12
 800d8f2:	4770      	bx	lr
 800d8f4:	20000040 	.word	0x20000040

0800d8f8 <_fwalk_reent>:
 800d8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	4688      	mov	r8, r1
 800d900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d904:	2700      	movs	r7, #0
 800d906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d90a:	f1b9 0901 	subs.w	r9, r9, #1
 800d90e:	d505      	bpl.n	800d91c <_fwalk_reent+0x24>
 800d910:	6824      	ldr	r4, [r4, #0]
 800d912:	2c00      	cmp	r4, #0
 800d914:	d1f7      	bne.n	800d906 <_fwalk_reent+0xe>
 800d916:	4638      	mov	r0, r7
 800d918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91c:	89ab      	ldrh	r3, [r5, #12]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d907      	bls.n	800d932 <_fwalk_reent+0x3a>
 800d922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d926:	3301      	adds	r3, #1
 800d928:	d003      	beq.n	800d932 <_fwalk_reent+0x3a>
 800d92a:	4629      	mov	r1, r5
 800d92c:	4630      	mov	r0, r6
 800d92e:	47c0      	blx	r8
 800d930:	4307      	orrs	r7, r0
 800d932:	3568      	adds	r5, #104	; 0x68
 800d934:	e7e9      	b.n	800d90a <_fwalk_reent+0x12>

0800d936 <__retarget_lock_init_recursive>:
 800d936:	4770      	bx	lr

0800d938 <__retarget_lock_acquire_recursive>:
 800d938:	4770      	bx	lr

0800d93a <__retarget_lock_release_recursive>:
 800d93a:	4770      	bx	lr

0800d93c <malloc>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	; (800d948 <malloc+0xc>)
 800d93e:	4601      	mov	r1, r0
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f000 b86f 	b.w	800da24 <_malloc_r>
 800d946:	bf00      	nop
 800d948:	20000040 	.word	0x20000040

0800d94c <_free_r>:
 800d94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d94e:	2900      	cmp	r1, #0
 800d950:	d044      	beq.n	800d9dc <_free_r+0x90>
 800d952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d956:	9001      	str	r0, [sp, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f1a1 0404 	sub.w	r4, r1, #4
 800d95e:	bfb8      	it	lt
 800d960:	18e4      	addlt	r4, r4, r3
 800d962:	f000 ff95 	bl	800e890 <__malloc_lock>
 800d966:	4a1e      	ldr	r2, [pc, #120]	; (800d9e0 <_free_r+0x94>)
 800d968:	9801      	ldr	r0, [sp, #4]
 800d96a:	6813      	ldr	r3, [r2, #0]
 800d96c:	b933      	cbnz	r3, 800d97c <_free_r+0x30>
 800d96e:	6063      	str	r3, [r4, #4]
 800d970:	6014      	str	r4, [r2, #0]
 800d972:	b003      	add	sp, #12
 800d974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d978:	f000 bf90 	b.w	800e89c <__malloc_unlock>
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	d908      	bls.n	800d992 <_free_r+0x46>
 800d980:	6825      	ldr	r5, [r4, #0]
 800d982:	1961      	adds	r1, r4, r5
 800d984:	428b      	cmp	r3, r1
 800d986:	bf01      	itttt	eq
 800d988:	6819      	ldreq	r1, [r3, #0]
 800d98a:	685b      	ldreq	r3, [r3, #4]
 800d98c:	1949      	addeq	r1, r1, r5
 800d98e:	6021      	streq	r1, [r4, #0]
 800d990:	e7ed      	b.n	800d96e <_free_r+0x22>
 800d992:	461a      	mov	r2, r3
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	b10b      	cbz	r3, 800d99c <_free_r+0x50>
 800d998:	42a3      	cmp	r3, r4
 800d99a:	d9fa      	bls.n	800d992 <_free_r+0x46>
 800d99c:	6811      	ldr	r1, [r2, #0]
 800d99e:	1855      	adds	r5, r2, r1
 800d9a0:	42a5      	cmp	r5, r4
 800d9a2:	d10b      	bne.n	800d9bc <_free_r+0x70>
 800d9a4:	6824      	ldr	r4, [r4, #0]
 800d9a6:	4421      	add	r1, r4
 800d9a8:	1854      	adds	r4, r2, r1
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	6011      	str	r1, [r2, #0]
 800d9ae:	d1e0      	bne.n	800d972 <_free_r+0x26>
 800d9b0:	681c      	ldr	r4, [r3, #0]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	6053      	str	r3, [r2, #4]
 800d9b6:	4421      	add	r1, r4
 800d9b8:	6011      	str	r1, [r2, #0]
 800d9ba:	e7da      	b.n	800d972 <_free_r+0x26>
 800d9bc:	d902      	bls.n	800d9c4 <_free_r+0x78>
 800d9be:	230c      	movs	r3, #12
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	e7d6      	b.n	800d972 <_free_r+0x26>
 800d9c4:	6825      	ldr	r5, [r4, #0]
 800d9c6:	1961      	adds	r1, r4, r5
 800d9c8:	428b      	cmp	r3, r1
 800d9ca:	bf04      	itt	eq
 800d9cc:	6819      	ldreq	r1, [r3, #0]
 800d9ce:	685b      	ldreq	r3, [r3, #4]
 800d9d0:	6063      	str	r3, [r4, #4]
 800d9d2:	bf04      	itt	eq
 800d9d4:	1949      	addeq	r1, r1, r5
 800d9d6:	6021      	streq	r1, [r4, #0]
 800d9d8:	6054      	str	r4, [r2, #4]
 800d9da:	e7ca      	b.n	800d972 <_free_r+0x26>
 800d9dc:	b003      	add	sp, #12
 800d9de:	bd30      	pop	{r4, r5, pc}
 800d9e0:	2000e47c 	.word	0x2000e47c

0800d9e4 <sbrk_aligned>:
 800d9e4:	b570      	push	{r4, r5, r6, lr}
 800d9e6:	4e0e      	ldr	r6, [pc, #56]	; (800da20 <sbrk_aligned+0x3c>)
 800d9e8:	460c      	mov	r4, r1
 800d9ea:	6831      	ldr	r1, [r6, #0]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	b911      	cbnz	r1, 800d9f6 <sbrk_aligned+0x12>
 800d9f0:	f000 fcd6 	bl	800e3a0 <_sbrk_r>
 800d9f4:	6030      	str	r0, [r6, #0]
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	f000 fcd1 	bl	800e3a0 <_sbrk_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d00a      	beq.n	800da18 <sbrk_aligned+0x34>
 800da02:	1cc4      	adds	r4, r0, #3
 800da04:	f024 0403 	bic.w	r4, r4, #3
 800da08:	42a0      	cmp	r0, r4
 800da0a:	d007      	beq.n	800da1c <sbrk_aligned+0x38>
 800da0c:	1a21      	subs	r1, r4, r0
 800da0e:	4628      	mov	r0, r5
 800da10:	f000 fcc6 	bl	800e3a0 <_sbrk_r>
 800da14:	3001      	adds	r0, #1
 800da16:	d101      	bne.n	800da1c <sbrk_aligned+0x38>
 800da18:	f04f 34ff 	mov.w	r4, #4294967295
 800da1c:	4620      	mov	r0, r4
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	2000e480 	.word	0x2000e480

0800da24 <_malloc_r>:
 800da24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	1ccd      	adds	r5, r1, #3
 800da2a:	f025 0503 	bic.w	r5, r5, #3
 800da2e:	3508      	adds	r5, #8
 800da30:	2d0c      	cmp	r5, #12
 800da32:	bf38      	it	cc
 800da34:	250c      	movcc	r5, #12
 800da36:	2d00      	cmp	r5, #0
 800da38:	4607      	mov	r7, r0
 800da3a:	db01      	blt.n	800da40 <_malloc_r+0x1c>
 800da3c:	42a9      	cmp	r1, r5
 800da3e:	d905      	bls.n	800da4c <_malloc_r+0x28>
 800da40:	230c      	movs	r3, #12
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	2600      	movs	r6, #0
 800da46:	4630      	mov	r0, r6
 800da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da4c:	4e2e      	ldr	r6, [pc, #184]	; (800db08 <_malloc_r+0xe4>)
 800da4e:	f000 ff1f 	bl	800e890 <__malloc_lock>
 800da52:	6833      	ldr	r3, [r6, #0]
 800da54:	461c      	mov	r4, r3
 800da56:	bb34      	cbnz	r4, 800daa6 <_malloc_r+0x82>
 800da58:	4629      	mov	r1, r5
 800da5a:	4638      	mov	r0, r7
 800da5c:	f7ff ffc2 	bl	800d9e4 <sbrk_aligned>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	4604      	mov	r4, r0
 800da64:	d14d      	bne.n	800db02 <_malloc_r+0xde>
 800da66:	6834      	ldr	r4, [r6, #0]
 800da68:	4626      	mov	r6, r4
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d140      	bne.n	800daf0 <_malloc_r+0xcc>
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	4631      	mov	r1, r6
 800da72:	4638      	mov	r0, r7
 800da74:	eb04 0803 	add.w	r8, r4, r3
 800da78:	f000 fc92 	bl	800e3a0 <_sbrk_r>
 800da7c:	4580      	cmp	r8, r0
 800da7e:	d13a      	bne.n	800daf6 <_malloc_r+0xd2>
 800da80:	6821      	ldr	r1, [r4, #0]
 800da82:	3503      	adds	r5, #3
 800da84:	1a6d      	subs	r5, r5, r1
 800da86:	f025 0503 	bic.w	r5, r5, #3
 800da8a:	3508      	adds	r5, #8
 800da8c:	2d0c      	cmp	r5, #12
 800da8e:	bf38      	it	cc
 800da90:	250c      	movcc	r5, #12
 800da92:	4629      	mov	r1, r5
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff ffa5 	bl	800d9e4 <sbrk_aligned>
 800da9a:	3001      	adds	r0, #1
 800da9c:	d02b      	beq.n	800daf6 <_malloc_r+0xd2>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	442b      	add	r3, r5
 800daa2:	6023      	str	r3, [r4, #0]
 800daa4:	e00e      	b.n	800dac4 <_malloc_r+0xa0>
 800daa6:	6822      	ldr	r2, [r4, #0]
 800daa8:	1b52      	subs	r2, r2, r5
 800daaa:	d41e      	bmi.n	800daea <_malloc_r+0xc6>
 800daac:	2a0b      	cmp	r2, #11
 800daae:	d916      	bls.n	800dade <_malloc_r+0xba>
 800dab0:	1961      	adds	r1, r4, r5
 800dab2:	42a3      	cmp	r3, r4
 800dab4:	6025      	str	r5, [r4, #0]
 800dab6:	bf18      	it	ne
 800dab8:	6059      	strne	r1, [r3, #4]
 800daba:	6863      	ldr	r3, [r4, #4]
 800dabc:	bf08      	it	eq
 800dabe:	6031      	streq	r1, [r6, #0]
 800dac0:	5162      	str	r2, [r4, r5]
 800dac2:	604b      	str	r3, [r1, #4]
 800dac4:	4638      	mov	r0, r7
 800dac6:	f104 060b 	add.w	r6, r4, #11
 800daca:	f000 fee7 	bl	800e89c <__malloc_unlock>
 800dace:	f026 0607 	bic.w	r6, r6, #7
 800dad2:	1d23      	adds	r3, r4, #4
 800dad4:	1af2      	subs	r2, r6, r3
 800dad6:	d0b6      	beq.n	800da46 <_malloc_r+0x22>
 800dad8:	1b9b      	subs	r3, r3, r6
 800dada:	50a3      	str	r3, [r4, r2]
 800dadc:	e7b3      	b.n	800da46 <_malloc_r+0x22>
 800dade:	6862      	ldr	r2, [r4, #4]
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	bf0c      	ite	eq
 800dae4:	6032      	streq	r2, [r6, #0]
 800dae6:	605a      	strne	r2, [r3, #4]
 800dae8:	e7ec      	b.n	800dac4 <_malloc_r+0xa0>
 800daea:	4623      	mov	r3, r4
 800daec:	6864      	ldr	r4, [r4, #4]
 800daee:	e7b2      	b.n	800da56 <_malloc_r+0x32>
 800daf0:	4634      	mov	r4, r6
 800daf2:	6876      	ldr	r6, [r6, #4]
 800daf4:	e7b9      	b.n	800da6a <_malloc_r+0x46>
 800daf6:	230c      	movs	r3, #12
 800daf8:	603b      	str	r3, [r7, #0]
 800dafa:	4638      	mov	r0, r7
 800dafc:	f000 fece 	bl	800e89c <__malloc_unlock>
 800db00:	e7a1      	b.n	800da46 <_malloc_r+0x22>
 800db02:	6025      	str	r5, [r4, #0]
 800db04:	e7de      	b.n	800dac4 <_malloc_r+0xa0>
 800db06:	bf00      	nop
 800db08:	2000e47c 	.word	0x2000e47c

0800db0c <__ssputs_r>:
 800db0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db10:	688e      	ldr	r6, [r1, #8]
 800db12:	429e      	cmp	r6, r3
 800db14:	4682      	mov	sl, r0
 800db16:	460c      	mov	r4, r1
 800db18:	4690      	mov	r8, r2
 800db1a:	461f      	mov	r7, r3
 800db1c:	d838      	bhi.n	800db90 <__ssputs_r+0x84>
 800db1e:	898a      	ldrh	r2, [r1, #12]
 800db20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db24:	d032      	beq.n	800db8c <__ssputs_r+0x80>
 800db26:	6825      	ldr	r5, [r4, #0]
 800db28:	6909      	ldr	r1, [r1, #16]
 800db2a:	eba5 0901 	sub.w	r9, r5, r1
 800db2e:	6965      	ldr	r5, [r4, #20]
 800db30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db38:	3301      	adds	r3, #1
 800db3a:	444b      	add	r3, r9
 800db3c:	106d      	asrs	r5, r5, #1
 800db3e:	429d      	cmp	r5, r3
 800db40:	bf38      	it	cc
 800db42:	461d      	movcc	r5, r3
 800db44:	0553      	lsls	r3, r2, #21
 800db46:	d531      	bpl.n	800dbac <__ssputs_r+0xa0>
 800db48:	4629      	mov	r1, r5
 800db4a:	f7ff ff6b 	bl	800da24 <_malloc_r>
 800db4e:	4606      	mov	r6, r0
 800db50:	b950      	cbnz	r0, 800db68 <__ssputs_r+0x5c>
 800db52:	230c      	movs	r3, #12
 800db54:	f8ca 3000 	str.w	r3, [sl]
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db5e:	81a3      	strh	r3, [r4, #12]
 800db60:	f04f 30ff 	mov.w	r0, #4294967295
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db68:	6921      	ldr	r1, [r4, #16]
 800db6a:	464a      	mov	r2, r9
 800db6c:	f7ff fcec 	bl	800d548 <memcpy>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db7a:	81a3      	strh	r3, [r4, #12]
 800db7c:	6126      	str	r6, [r4, #16]
 800db7e:	6165      	str	r5, [r4, #20]
 800db80:	444e      	add	r6, r9
 800db82:	eba5 0509 	sub.w	r5, r5, r9
 800db86:	6026      	str	r6, [r4, #0]
 800db88:	60a5      	str	r5, [r4, #8]
 800db8a:	463e      	mov	r6, r7
 800db8c:	42be      	cmp	r6, r7
 800db8e:	d900      	bls.n	800db92 <__ssputs_r+0x86>
 800db90:	463e      	mov	r6, r7
 800db92:	6820      	ldr	r0, [r4, #0]
 800db94:	4632      	mov	r2, r6
 800db96:	4641      	mov	r1, r8
 800db98:	f7ff fce4 	bl	800d564 <memmove>
 800db9c:	68a3      	ldr	r3, [r4, #8]
 800db9e:	1b9b      	subs	r3, r3, r6
 800dba0:	60a3      	str	r3, [r4, #8]
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	4433      	add	r3, r6
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7db      	b.n	800db64 <__ssputs_r+0x58>
 800dbac:	462a      	mov	r2, r5
 800dbae:	f000 fe7b 	bl	800e8a8 <_realloc_r>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d1e1      	bne.n	800db7c <__ssputs_r+0x70>
 800dbb8:	6921      	ldr	r1, [r4, #16]
 800dbba:	4650      	mov	r0, sl
 800dbbc:	f7ff fec6 	bl	800d94c <_free_r>
 800dbc0:	e7c7      	b.n	800db52 <__ssputs_r+0x46>
	...

0800dbc4 <_svfiprintf_r>:
 800dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc8:	4698      	mov	r8, r3
 800dbca:	898b      	ldrh	r3, [r1, #12]
 800dbcc:	061b      	lsls	r3, r3, #24
 800dbce:	b09d      	sub	sp, #116	; 0x74
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	4614      	mov	r4, r2
 800dbd6:	d50e      	bpl.n	800dbf6 <_svfiprintf_r+0x32>
 800dbd8:	690b      	ldr	r3, [r1, #16]
 800dbda:	b963      	cbnz	r3, 800dbf6 <_svfiprintf_r+0x32>
 800dbdc:	2140      	movs	r1, #64	; 0x40
 800dbde:	f7ff ff21 	bl	800da24 <_malloc_r>
 800dbe2:	6028      	str	r0, [r5, #0]
 800dbe4:	6128      	str	r0, [r5, #16]
 800dbe6:	b920      	cbnz	r0, 800dbf2 <_svfiprintf_r+0x2e>
 800dbe8:	230c      	movs	r3, #12
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf0:	e0d1      	b.n	800dd96 <_svfiprintf_r+0x1d2>
 800dbf2:	2340      	movs	r3, #64	; 0x40
 800dbf4:	616b      	str	r3, [r5, #20]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfa:	2320      	movs	r3, #32
 800dbfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc00:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc04:	2330      	movs	r3, #48	; 0x30
 800dc06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ddb0 <_svfiprintf_r+0x1ec>
 800dc0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc0e:	f04f 0901 	mov.w	r9, #1
 800dc12:	4623      	mov	r3, r4
 800dc14:	469a      	mov	sl, r3
 800dc16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc1a:	b10a      	cbz	r2, 800dc20 <_svfiprintf_r+0x5c>
 800dc1c:	2a25      	cmp	r2, #37	; 0x25
 800dc1e:	d1f9      	bne.n	800dc14 <_svfiprintf_r+0x50>
 800dc20:	ebba 0b04 	subs.w	fp, sl, r4
 800dc24:	d00b      	beq.n	800dc3e <_svfiprintf_r+0x7a>
 800dc26:	465b      	mov	r3, fp
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	f7ff ff6d 	bl	800db0c <__ssputs_r>
 800dc32:	3001      	adds	r0, #1
 800dc34:	f000 80aa 	beq.w	800dd8c <_svfiprintf_r+0x1c8>
 800dc38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc3a:	445a      	add	r2, fp
 800dc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc3e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 80a2 	beq.w	800dd8c <_svfiprintf_r+0x1c8>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc52:	f10a 0a01 	add.w	sl, sl, #1
 800dc56:	9304      	str	r3, [sp, #16]
 800dc58:	9307      	str	r3, [sp, #28]
 800dc5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc5e:	931a      	str	r3, [sp, #104]	; 0x68
 800dc60:	4654      	mov	r4, sl
 800dc62:	2205      	movs	r2, #5
 800dc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc68:	4851      	ldr	r0, [pc, #324]	; (800ddb0 <_svfiprintf_r+0x1ec>)
 800dc6a:	f7f2 fae9 	bl	8000240 <memchr>
 800dc6e:	9a04      	ldr	r2, [sp, #16]
 800dc70:	b9d8      	cbnz	r0, 800dcaa <_svfiprintf_r+0xe6>
 800dc72:	06d0      	lsls	r0, r2, #27
 800dc74:	bf44      	itt	mi
 800dc76:	2320      	movmi	r3, #32
 800dc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc7c:	0711      	lsls	r1, r2, #28
 800dc7e:	bf44      	itt	mi
 800dc80:	232b      	movmi	r3, #43	; 0x2b
 800dc82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc86:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8c:	d015      	beq.n	800dcba <_svfiprintf_r+0xf6>
 800dc8e:	9a07      	ldr	r2, [sp, #28]
 800dc90:	4654      	mov	r4, sl
 800dc92:	2000      	movs	r0, #0
 800dc94:	f04f 0c0a 	mov.w	ip, #10
 800dc98:	4621      	mov	r1, r4
 800dc9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc9e:	3b30      	subs	r3, #48	; 0x30
 800dca0:	2b09      	cmp	r3, #9
 800dca2:	d94e      	bls.n	800dd42 <_svfiprintf_r+0x17e>
 800dca4:	b1b0      	cbz	r0, 800dcd4 <_svfiprintf_r+0x110>
 800dca6:	9207      	str	r2, [sp, #28]
 800dca8:	e014      	b.n	800dcd4 <_svfiprintf_r+0x110>
 800dcaa:	eba0 0308 	sub.w	r3, r0, r8
 800dcae:	fa09 f303 	lsl.w	r3, r9, r3
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	9304      	str	r3, [sp, #16]
 800dcb6:	46a2      	mov	sl, r4
 800dcb8:	e7d2      	b.n	800dc60 <_svfiprintf_r+0x9c>
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	1d19      	adds	r1, r3, #4
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	9103      	str	r1, [sp, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	bfbb      	ittet	lt
 800dcc6:	425b      	neglt	r3, r3
 800dcc8:	f042 0202 	orrlt.w	r2, r2, #2
 800dccc:	9307      	strge	r3, [sp, #28]
 800dcce:	9307      	strlt	r3, [sp, #28]
 800dcd0:	bfb8      	it	lt
 800dcd2:	9204      	strlt	r2, [sp, #16]
 800dcd4:	7823      	ldrb	r3, [r4, #0]
 800dcd6:	2b2e      	cmp	r3, #46	; 0x2e
 800dcd8:	d10c      	bne.n	800dcf4 <_svfiprintf_r+0x130>
 800dcda:	7863      	ldrb	r3, [r4, #1]
 800dcdc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcde:	d135      	bne.n	800dd4c <_svfiprintf_r+0x188>
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	1d1a      	adds	r2, r3, #4
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	9203      	str	r2, [sp, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	bfb8      	it	lt
 800dcec:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcf0:	3402      	adds	r4, #2
 800dcf2:	9305      	str	r3, [sp, #20]
 800dcf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ddc0 <_svfiprintf_r+0x1fc>
 800dcf8:	7821      	ldrb	r1, [r4, #0]
 800dcfa:	2203      	movs	r2, #3
 800dcfc:	4650      	mov	r0, sl
 800dcfe:	f7f2 fa9f 	bl	8000240 <memchr>
 800dd02:	b140      	cbz	r0, 800dd16 <_svfiprintf_r+0x152>
 800dd04:	2340      	movs	r3, #64	; 0x40
 800dd06:	eba0 000a 	sub.w	r0, r0, sl
 800dd0a:	fa03 f000 	lsl.w	r0, r3, r0
 800dd0e:	9b04      	ldr	r3, [sp, #16]
 800dd10:	4303      	orrs	r3, r0
 800dd12:	3401      	adds	r4, #1
 800dd14:	9304      	str	r3, [sp, #16]
 800dd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1a:	4826      	ldr	r0, [pc, #152]	; (800ddb4 <_svfiprintf_r+0x1f0>)
 800dd1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd20:	2206      	movs	r2, #6
 800dd22:	f7f2 fa8d 	bl	8000240 <memchr>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d038      	beq.n	800dd9c <_svfiprintf_r+0x1d8>
 800dd2a:	4b23      	ldr	r3, [pc, #140]	; (800ddb8 <_svfiprintf_r+0x1f4>)
 800dd2c:	bb1b      	cbnz	r3, 800dd76 <_svfiprintf_r+0x1b2>
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	3307      	adds	r3, #7
 800dd32:	f023 0307 	bic.w	r3, r3, #7
 800dd36:	3308      	adds	r3, #8
 800dd38:	9303      	str	r3, [sp, #12]
 800dd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd3c:	4433      	add	r3, r6
 800dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd40:	e767      	b.n	800dc12 <_svfiprintf_r+0x4e>
 800dd42:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd46:	460c      	mov	r4, r1
 800dd48:	2001      	movs	r0, #1
 800dd4a:	e7a5      	b.n	800dc98 <_svfiprintf_r+0xd4>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	3401      	adds	r4, #1
 800dd50:	9305      	str	r3, [sp, #20]
 800dd52:	4619      	mov	r1, r3
 800dd54:	f04f 0c0a 	mov.w	ip, #10
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd5e:	3a30      	subs	r2, #48	; 0x30
 800dd60:	2a09      	cmp	r2, #9
 800dd62:	d903      	bls.n	800dd6c <_svfiprintf_r+0x1a8>
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0c5      	beq.n	800dcf4 <_svfiprintf_r+0x130>
 800dd68:	9105      	str	r1, [sp, #20]
 800dd6a:	e7c3      	b.n	800dcf4 <_svfiprintf_r+0x130>
 800dd6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd70:	4604      	mov	r4, r0
 800dd72:	2301      	movs	r3, #1
 800dd74:	e7f0      	b.n	800dd58 <_svfiprintf_r+0x194>
 800dd76:	ab03      	add	r3, sp, #12
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	4b0f      	ldr	r3, [pc, #60]	; (800ddbc <_svfiprintf_r+0x1f8>)
 800dd7e:	a904      	add	r1, sp, #16
 800dd80:	4638      	mov	r0, r7
 800dd82:	f3af 8000 	nop.w
 800dd86:	1c42      	adds	r2, r0, #1
 800dd88:	4606      	mov	r6, r0
 800dd8a:	d1d6      	bne.n	800dd3a <_svfiprintf_r+0x176>
 800dd8c:	89ab      	ldrh	r3, [r5, #12]
 800dd8e:	065b      	lsls	r3, r3, #25
 800dd90:	f53f af2c 	bmi.w	800dbec <_svfiprintf_r+0x28>
 800dd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd96:	b01d      	add	sp, #116	; 0x74
 800dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9c:	ab03      	add	r3, sp, #12
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	462a      	mov	r2, r5
 800dda2:	4b06      	ldr	r3, [pc, #24]	; (800ddbc <_svfiprintf_r+0x1f8>)
 800dda4:	a904      	add	r1, sp, #16
 800dda6:	4638      	mov	r0, r7
 800dda8:	f000 f9d4 	bl	800e154 <_printf_i>
 800ddac:	e7eb      	b.n	800dd86 <_svfiprintf_r+0x1c2>
 800ddae:	bf00      	nop
 800ddb0:	0801b5e8 	.word	0x0801b5e8
 800ddb4:	0801b5f2 	.word	0x0801b5f2
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	0800db0d 	.word	0x0800db0d
 800ddc0:	0801b5ee 	.word	0x0801b5ee

0800ddc4 <__sfputc_r>:
 800ddc4:	6893      	ldr	r3, [r2, #8]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	b410      	push	{r4}
 800ddcc:	6093      	str	r3, [r2, #8]
 800ddce:	da08      	bge.n	800dde2 <__sfputc_r+0x1e>
 800ddd0:	6994      	ldr	r4, [r2, #24]
 800ddd2:	42a3      	cmp	r3, r4
 800ddd4:	db01      	blt.n	800ddda <__sfputc_r+0x16>
 800ddd6:	290a      	cmp	r1, #10
 800ddd8:	d103      	bne.n	800dde2 <__sfputc_r+0x1e>
 800ddda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddde:	f000 bb33 	b.w	800e448 <__swbuf_r>
 800dde2:	6813      	ldr	r3, [r2, #0]
 800dde4:	1c58      	adds	r0, r3, #1
 800dde6:	6010      	str	r0, [r2, #0]
 800dde8:	7019      	strb	r1, [r3, #0]
 800ddea:	4608      	mov	r0, r1
 800ddec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <__sfputs_r>:
 800ddf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	460f      	mov	r7, r1
 800ddf8:	4614      	mov	r4, r2
 800ddfa:	18d5      	adds	r5, r2, r3
 800ddfc:	42ac      	cmp	r4, r5
 800ddfe:	d101      	bne.n	800de04 <__sfputs_r+0x12>
 800de00:	2000      	movs	r0, #0
 800de02:	e007      	b.n	800de14 <__sfputs_r+0x22>
 800de04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de08:	463a      	mov	r2, r7
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7ff ffda 	bl	800ddc4 <__sfputc_r>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d1f3      	bne.n	800ddfc <__sfputs_r+0xa>
 800de14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de18 <_vfiprintf_r>:
 800de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	460d      	mov	r5, r1
 800de1e:	b09d      	sub	sp, #116	; 0x74
 800de20:	4614      	mov	r4, r2
 800de22:	4698      	mov	r8, r3
 800de24:	4606      	mov	r6, r0
 800de26:	b118      	cbz	r0, 800de30 <_vfiprintf_r+0x18>
 800de28:	6983      	ldr	r3, [r0, #24]
 800de2a:	b90b      	cbnz	r3, 800de30 <_vfiprintf_r+0x18>
 800de2c:	f7ff fcd4 	bl	800d7d8 <__sinit>
 800de30:	4b89      	ldr	r3, [pc, #548]	; (800e058 <_vfiprintf_r+0x240>)
 800de32:	429d      	cmp	r5, r3
 800de34:	d11b      	bne.n	800de6e <_vfiprintf_r+0x56>
 800de36:	6875      	ldr	r5, [r6, #4]
 800de38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de3a:	07d9      	lsls	r1, r3, #31
 800de3c:	d405      	bmi.n	800de4a <_vfiprintf_r+0x32>
 800de3e:	89ab      	ldrh	r3, [r5, #12]
 800de40:	059a      	lsls	r2, r3, #22
 800de42:	d402      	bmi.n	800de4a <_vfiprintf_r+0x32>
 800de44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de46:	f7ff fd77 	bl	800d938 <__retarget_lock_acquire_recursive>
 800de4a:	89ab      	ldrh	r3, [r5, #12]
 800de4c:	071b      	lsls	r3, r3, #28
 800de4e:	d501      	bpl.n	800de54 <_vfiprintf_r+0x3c>
 800de50:	692b      	ldr	r3, [r5, #16]
 800de52:	b9eb      	cbnz	r3, 800de90 <_vfiprintf_r+0x78>
 800de54:	4629      	mov	r1, r5
 800de56:	4630      	mov	r0, r6
 800de58:	f000 fb5a 	bl	800e510 <__swsetup_r>
 800de5c:	b1c0      	cbz	r0, 800de90 <_vfiprintf_r+0x78>
 800de5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de60:	07dc      	lsls	r4, r3, #31
 800de62:	d50e      	bpl.n	800de82 <_vfiprintf_r+0x6a>
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	b01d      	add	sp, #116	; 0x74
 800de6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6e:	4b7b      	ldr	r3, [pc, #492]	; (800e05c <_vfiprintf_r+0x244>)
 800de70:	429d      	cmp	r5, r3
 800de72:	d101      	bne.n	800de78 <_vfiprintf_r+0x60>
 800de74:	68b5      	ldr	r5, [r6, #8]
 800de76:	e7df      	b.n	800de38 <_vfiprintf_r+0x20>
 800de78:	4b79      	ldr	r3, [pc, #484]	; (800e060 <_vfiprintf_r+0x248>)
 800de7a:	429d      	cmp	r5, r3
 800de7c:	bf08      	it	eq
 800de7e:	68f5      	ldreq	r5, [r6, #12]
 800de80:	e7da      	b.n	800de38 <_vfiprintf_r+0x20>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	0598      	lsls	r0, r3, #22
 800de86:	d4ed      	bmi.n	800de64 <_vfiprintf_r+0x4c>
 800de88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de8a:	f7ff fd56 	bl	800d93a <__retarget_lock_release_recursive>
 800de8e:	e7e9      	b.n	800de64 <_vfiprintf_r+0x4c>
 800de90:	2300      	movs	r3, #0
 800de92:	9309      	str	r3, [sp, #36]	; 0x24
 800de94:	2320      	movs	r3, #32
 800de96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de9e:	2330      	movs	r3, #48	; 0x30
 800dea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e064 <_vfiprintf_r+0x24c>
 800dea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dea8:	f04f 0901 	mov.w	r9, #1
 800deac:	4623      	mov	r3, r4
 800deae:	469a      	mov	sl, r3
 800deb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deb4:	b10a      	cbz	r2, 800deba <_vfiprintf_r+0xa2>
 800deb6:	2a25      	cmp	r2, #37	; 0x25
 800deb8:	d1f9      	bne.n	800deae <_vfiprintf_r+0x96>
 800deba:	ebba 0b04 	subs.w	fp, sl, r4
 800debe:	d00b      	beq.n	800ded8 <_vfiprintf_r+0xc0>
 800dec0:	465b      	mov	r3, fp
 800dec2:	4622      	mov	r2, r4
 800dec4:	4629      	mov	r1, r5
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7ff ff93 	bl	800ddf2 <__sfputs_r>
 800decc:	3001      	adds	r0, #1
 800dece:	f000 80aa 	beq.w	800e026 <_vfiprintf_r+0x20e>
 800ded2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ded4:	445a      	add	r2, fp
 800ded6:	9209      	str	r2, [sp, #36]	; 0x24
 800ded8:	f89a 3000 	ldrb.w	r3, [sl]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f000 80a2 	beq.w	800e026 <_vfiprintf_r+0x20e>
 800dee2:	2300      	movs	r3, #0
 800dee4:	f04f 32ff 	mov.w	r2, #4294967295
 800dee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deec:	f10a 0a01 	add.w	sl, sl, #1
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	9307      	str	r3, [sp, #28]
 800def4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800def8:	931a      	str	r3, [sp, #104]	; 0x68
 800defa:	4654      	mov	r4, sl
 800defc:	2205      	movs	r2, #5
 800defe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df02:	4858      	ldr	r0, [pc, #352]	; (800e064 <_vfiprintf_r+0x24c>)
 800df04:	f7f2 f99c 	bl	8000240 <memchr>
 800df08:	9a04      	ldr	r2, [sp, #16]
 800df0a:	b9d8      	cbnz	r0, 800df44 <_vfiprintf_r+0x12c>
 800df0c:	06d1      	lsls	r1, r2, #27
 800df0e:	bf44      	itt	mi
 800df10:	2320      	movmi	r3, #32
 800df12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df16:	0713      	lsls	r3, r2, #28
 800df18:	bf44      	itt	mi
 800df1a:	232b      	movmi	r3, #43	; 0x2b
 800df1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df20:	f89a 3000 	ldrb.w	r3, [sl]
 800df24:	2b2a      	cmp	r3, #42	; 0x2a
 800df26:	d015      	beq.n	800df54 <_vfiprintf_r+0x13c>
 800df28:	9a07      	ldr	r2, [sp, #28]
 800df2a:	4654      	mov	r4, sl
 800df2c:	2000      	movs	r0, #0
 800df2e:	f04f 0c0a 	mov.w	ip, #10
 800df32:	4621      	mov	r1, r4
 800df34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df38:	3b30      	subs	r3, #48	; 0x30
 800df3a:	2b09      	cmp	r3, #9
 800df3c:	d94e      	bls.n	800dfdc <_vfiprintf_r+0x1c4>
 800df3e:	b1b0      	cbz	r0, 800df6e <_vfiprintf_r+0x156>
 800df40:	9207      	str	r2, [sp, #28]
 800df42:	e014      	b.n	800df6e <_vfiprintf_r+0x156>
 800df44:	eba0 0308 	sub.w	r3, r0, r8
 800df48:	fa09 f303 	lsl.w	r3, r9, r3
 800df4c:	4313      	orrs	r3, r2
 800df4e:	9304      	str	r3, [sp, #16]
 800df50:	46a2      	mov	sl, r4
 800df52:	e7d2      	b.n	800defa <_vfiprintf_r+0xe2>
 800df54:	9b03      	ldr	r3, [sp, #12]
 800df56:	1d19      	adds	r1, r3, #4
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	9103      	str	r1, [sp, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	bfbb      	ittet	lt
 800df60:	425b      	neglt	r3, r3
 800df62:	f042 0202 	orrlt.w	r2, r2, #2
 800df66:	9307      	strge	r3, [sp, #28]
 800df68:	9307      	strlt	r3, [sp, #28]
 800df6a:	bfb8      	it	lt
 800df6c:	9204      	strlt	r2, [sp, #16]
 800df6e:	7823      	ldrb	r3, [r4, #0]
 800df70:	2b2e      	cmp	r3, #46	; 0x2e
 800df72:	d10c      	bne.n	800df8e <_vfiprintf_r+0x176>
 800df74:	7863      	ldrb	r3, [r4, #1]
 800df76:	2b2a      	cmp	r3, #42	; 0x2a
 800df78:	d135      	bne.n	800dfe6 <_vfiprintf_r+0x1ce>
 800df7a:	9b03      	ldr	r3, [sp, #12]
 800df7c:	1d1a      	adds	r2, r3, #4
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	9203      	str	r2, [sp, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	bfb8      	it	lt
 800df86:	f04f 33ff 	movlt.w	r3, #4294967295
 800df8a:	3402      	adds	r4, #2
 800df8c:	9305      	str	r3, [sp, #20]
 800df8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e074 <_vfiprintf_r+0x25c>
 800df92:	7821      	ldrb	r1, [r4, #0]
 800df94:	2203      	movs	r2, #3
 800df96:	4650      	mov	r0, sl
 800df98:	f7f2 f952 	bl	8000240 <memchr>
 800df9c:	b140      	cbz	r0, 800dfb0 <_vfiprintf_r+0x198>
 800df9e:	2340      	movs	r3, #64	; 0x40
 800dfa0:	eba0 000a 	sub.w	r0, r0, sl
 800dfa4:	fa03 f000 	lsl.w	r0, r3, r0
 800dfa8:	9b04      	ldr	r3, [sp, #16]
 800dfaa:	4303      	orrs	r3, r0
 800dfac:	3401      	adds	r4, #1
 800dfae:	9304      	str	r3, [sp, #16]
 800dfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfb4:	482c      	ldr	r0, [pc, #176]	; (800e068 <_vfiprintf_r+0x250>)
 800dfb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfba:	2206      	movs	r2, #6
 800dfbc:	f7f2 f940 	bl	8000240 <memchr>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d03f      	beq.n	800e044 <_vfiprintf_r+0x22c>
 800dfc4:	4b29      	ldr	r3, [pc, #164]	; (800e06c <_vfiprintf_r+0x254>)
 800dfc6:	bb1b      	cbnz	r3, 800e010 <_vfiprintf_r+0x1f8>
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	3307      	adds	r3, #7
 800dfcc:	f023 0307 	bic.w	r3, r3, #7
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	9303      	str	r3, [sp, #12]
 800dfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfd6:	443b      	add	r3, r7
 800dfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dfda:	e767      	b.n	800deac <_vfiprintf_r+0x94>
 800dfdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	e7a5      	b.n	800df32 <_vfiprintf_r+0x11a>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	3401      	adds	r4, #1
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	4619      	mov	r1, r3
 800dfee:	f04f 0c0a 	mov.w	ip, #10
 800dff2:	4620      	mov	r0, r4
 800dff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dff8:	3a30      	subs	r2, #48	; 0x30
 800dffa:	2a09      	cmp	r2, #9
 800dffc:	d903      	bls.n	800e006 <_vfiprintf_r+0x1ee>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d0c5      	beq.n	800df8e <_vfiprintf_r+0x176>
 800e002:	9105      	str	r1, [sp, #20]
 800e004:	e7c3      	b.n	800df8e <_vfiprintf_r+0x176>
 800e006:	fb0c 2101 	mla	r1, ip, r1, r2
 800e00a:	4604      	mov	r4, r0
 800e00c:	2301      	movs	r3, #1
 800e00e:	e7f0      	b.n	800dff2 <_vfiprintf_r+0x1da>
 800e010:	ab03      	add	r3, sp, #12
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	462a      	mov	r2, r5
 800e016:	4b16      	ldr	r3, [pc, #88]	; (800e070 <_vfiprintf_r+0x258>)
 800e018:	a904      	add	r1, sp, #16
 800e01a:	4630      	mov	r0, r6
 800e01c:	f3af 8000 	nop.w
 800e020:	4607      	mov	r7, r0
 800e022:	1c78      	adds	r0, r7, #1
 800e024:	d1d6      	bne.n	800dfd4 <_vfiprintf_r+0x1bc>
 800e026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e028:	07d9      	lsls	r1, r3, #31
 800e02a:	d405      	bmi.n	800e038 <_vfiprintf_r+0x220>
 800e02c:	89ab      	ldrh	r3, [r5, #12]
 800e02e:	059a      	lsls	r2, r3, #22
 800e030:	d402      	bmi.n	800e038 <_vfiprintf_r+0x220>
 800e032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e034:	f7ff fc81 	bl	800d93a <__retarget_lock_release_recursive>
 800e038:	89ab      	ldrh	r3, [r5, #12]
 800e03a:	065b      	lsls	r3, r3, #25
 800e03c:	f53f af12 	bmi.w	800de64 <_vfiprintf_r+0x4c>
 800e040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e042:	e711      	b.n	800de68 <_vfiprintf_r+0x50>
 800e044:	ab03      	add	r3, sp, #12
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	462a      	mov	r2, r5
 800e04a:	4b09      	ldr	r3, [pc, #36]	; (800e070 <_vfiprintf_r+0x258>)
 800e04c:	a904      	add	r1, sp, #16
 800e04e:	4630      	mov	r0, r6
 800e050:	f000 f880 	bl	800e154 <_printf_i>
 800e054:	e7e4      	b.n	800e020 <_vfiprintf_r+0x208>
 800e056:	bf00      	nop
 800e058:	0801b5a8 	.word	0x0801b5a8
 800e05c:	0801b5c8 	.word	0x0801b5c8
 800e060:	0801b588 	.word	0x0801b588
 800e064:	0801b5e8 	.word	0x0801b5e8
 800e068:	0801b5f2 	.word	0x0801b5f2
 800e06c:	00000000 	.word	0x00000000
 800e070:	0800ddf3 	.word	0x0800ddf3
 800e074:	0801b5ee 	.word	0x0801b5ee

0800e078 <_printf_common>:
 800e078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e07c:	4616      	mov	r6, r2
 800e07e:	4699      	mov	r9, r3
 800e080:	688a      	ldr	r2, [r1, #8]
 800e082:	690b      	ldr	r3, [r1, #16]
 800e084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e088:	4293      	cmp	r3, r2
 800e08a:	bfb8      	it	lt
 800e08c:	4613      	movlt	r3, r2
 800e08e:	6033      	str	r3, [r6, #0]
 800e090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e094:	4607      	mov	r7, r0
 800e096:	460c      	mov	r4, r1
 800e098:	b10a      	cbz	r2, 800e09e <_printf_common+0x26>
 800e09a:	3301      	adds	r3, #1
 800e09c:	6033      	str	r3, [r6, #0]
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	0699      	lsls	r1, r3, #26
 800e0a2:	bf42      	ittt	mi
 800e0a4:	6833      	ldrmi	r3, [r6, #0]
 800e0a6:	3302      	addmi	r3, #2
 800e0a8:	6033      	strmi	r3, [r6, #0]
 800e0aa:	6825      	ldr	r5, [r4, #0]
 800e0ac:	f015 0506 	ands.w	r5, r5, #6
 800e0b0:	d106      	bne.n	800e0c0 <_printf_common+0x48>
 800e0b2:	f104 0a19 	add.w	sl, r4, #25
 800e0b6:	68e3      	ldr	r3, [r4, #12]
 800e0b8:	6832      	ldr	r2, [r6, #0]
 800e0ba:	1a9b      	subs	r3, r3, r2
 800e0bc:	42ab      	cmp	r3, r5
 800e0be:	dc26      	bgt.n	800e10e <_printf_common+0x96>
 800e0c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e0c4:	1e13      	subs	r3, r2, #0
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	bf18      	it	ne
 800e0ca:	2301      	movne	r3, #1
 800e0cc:	0692      	lsls	r2, r2, #26
 800e0ce:	d42b      	bmi.n	800e128 <_printf_common+0xb0>
 800e0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	47c0      	blx	r8
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d01e      	beq.n	800e11c <_printf_common+0xa4>
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	68e5      	ldr	r5, [r4, #12]
 800e0e2:	6832      	ldr	r2, [r6, #0]
 800e0e4:	f003 0306 	and.w	r3, r3, #6
 800e0e8:	2b04      	cmp	r3, #4
 800e0ea:	bf08      	it	eq
 800e0ec:	1aad      	subeq	r5, r5, r2
 800e0ee:	68a3      	ldr	r3, [r4, #8]
 800e0f0:	6922      	ldr	r2, [r4, #16]
 800e0f2:	bf0c      	ite	eq
 800e0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0f8:	2500      	movne	r5, #0
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	bfc4      	itt	gt
 800e0fe:	1a9b      	subgt	r3, r3, r2
 800e100:	18ed      	addgt	r5, r5, r3
 800e102:	2600      	movs	r6, #0
 800e104:	341a      	adds	r4, #26
 800e106:	42b5      	cmp	r5, r6
 800e108:	d11a      	bne.n	800e140 <_printf_common+0xc8>
 800e10a:	2000      	movs	r0, #0
 800e10c:	e008      	b.n	800e120 <_printf_common+0xa8>
 800e10e:	2301      	movs	r3, #1
 800e110:	4652      	mov	r2, sl
 800e112:	4649      	mov	r1, r9
 800e114:	4638      	mov	r0, r7
 800e116:	47c0      	blx	r8
 800e118:	3001      	adds	r0, #1
 800e11a:	d103      	bne.n	800e124 <_printf_common+0xac>
 800e11c:	f04f 30ff 	mov.w	r0, #4294967295
 800e120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e124:	3501      	adds	r5, #1
 800e126:	e7c6      	b.n	800e0b6 <_printf_common+0x3e>
 800e128:	18e1      	adds	r1, r4, r3
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	2030      	movs	r0, #48	; 0x30
 800e12e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e132:	4422      	add	r2, r4
 800e134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e13c:	3302      	adds	r3, #2
 800e13e:	e7c7      	b.n	800e0d0 <_printf_common+0x58>
 800e140:	2301      	movs	r3, #1
 800e142:	4622      	mov	r2, r4
 800e144:	4649      	mov	r1, r9
 800e146:	4638      	mov	r0, r7
 800e148:	47c0      	blx	r8
 800e14a:	3001      	adds	r0, #1
 800e14c:	d0e6      	beq.n	800e11c <_printf_common+0xa4>
 800e14e:	3601      	adds	r6, #1
 800e150:	e7d9      	b.n	800e106 <_printf_common+0x8e>
	...

0800e154 <_printf_i>:
 800e154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e158:	7e0f      	ldrb	r7, [r1, #24]
 800e15a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e15c:	2f78      	cmp	r7, #120	; 0x78
 800e15e:	4691      	mov	r9, r2
 800e160:	4680      	mov	r8, r0
 800e162:	460c      	mov	r4, r1
 800e164:	469a      	mov	sl, r3
 800e166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e16a:	d807      	bhi.n	800e17c <_printf_i+0x28>
 800e16c:	2f62      	cmp	r7, #98	; 0x62
 800e16e:	d80a      	bhi.n	800e186 <_printf_i+0x32>
 800e170:	2f00      	cmp	r7, #0
 800e172:	f000 80d8 	beq.w	800e326 <_printf_i+0x1d2>
 800e176:	2f58      	cmp	r7, #88	; 0x58
 800e178:	f000 80a3 	beq.w	800e2c2 <_printf_i+0x16e>
 800e17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e184:	e03a      	b.n	800e1fc <_printf_i+0xa8>
 800e186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e18a:	2b15      	cmp	r3, #21
 800e18c:	d8f6      	bhi.n	800e17c <_printf_i+0x28>
 800e18e:	a101      	add	r1, pc, #4	; (adr r1, 800e194 <_printf_i+0x40>)
 800e190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e194:	0800e1ed 	.word	0x0800e1ed
 800e198:	0800e201 	.word	0x0800e201
 800e19c:	0800e17d 	.word	0x0800e17d
 800e1a0:	0800e17d 	.word	0x0800e17d
 800e1a4:	0800e17d 	.word	0x0800e17d
 800e1a8:	0800e17d 	.word	0x0800e17d
 800e1ac:	0800e201 	.word	0x0800e201
 800e1b0:	0800e17d 	.word	0x0800e17d
 800e1b4:	0800e17d 	.word	0x0800e17d
 800e1b8:	0800e17d 	.word	0x0800e17d
 800e1bc:	0800e17d 	.word	0x0800e17d
 800e1c0:	0800e30d 	.word	0x0800e30d
 800e1c4:	0800e231 	.word	0x0800e231
 800e1c8:	0800e2ef 	.word	0x0800e2ef
 800e1cc:	0800e17d 	.word	0x0800e17d
 800e1d0:	0800e17d 	.word	0x0800e17d
 800e1d4:	0800e32f 	.word	0x0800e32f
 800e1d8:	0800e17d 	.word	0x0800e17d
 800e1dc:	0800e231 	.word	0x0800e231
 800e1e0:	0800e17d 	.word	0x0800e17d
 800e1e4:	0800e17d 	.word	0x0800e17d
 800e1e8:	0800e2f7 	.word	0x0800e2f7
 800e1ec:	682b      	ldr	r3, [r5, #0]
 800e1ee:	1d1a      	adds	r2, r3, #4
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	602a      	str	r2, [r5, #0]
 800e1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e0a3      	b.n	800e348 <_printf_i+0x1f4>
 800e200:	6820      	ldr	r0, [r4, #0]
 800e202:	6829      	ldr	r1, [r5, #0]
 800e204:	0606      	lsls	r6, r0, #24
 800e206:	f101 0304 	add.w	r3, r1, #4
 800e20a:	d50a      	bpl.n	800e222 <_printf_i+0xce>
 800e20c:	680e      	ldr	r6, [r1, #0]
 800e20e:	602b      	str	r3, [r5, #0]
 800e210:	2e00      	cmp	r6, #0
 800e212:	da03      	bge.n	800e21c <_printf_i+0xc8>
 800e214:	232d      	movs	r3, #45	; 0x2d
 800e216:	4276      	negs	r6, r6
 800e218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e21c:	485e      	ldr	r0, [pc, #376]	; (800e398 <_printf_i+0x244>)
 800e21e:	230a      	movs	r3, #10
 800e220:	e019      	b.n	800e256 <_printf_i+0x102>
 800e222:	680e      	ldr	r6, [r1, #0]
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e22a:	bf18      	it	ne
 800e22c:	b236      	sxthne	r6, r6
 800e22e:	e7ef      	b.n	800e210 <_printf_i+0xbc>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	6820      	ldr	r0, [r4, #0]
 800e234:	1d19      	adds	r1, r3, #4
 800e236:	6029      	str	r1, [r5, #0]
 800e238:	0601      	lsls	r1, r0, #24
 800e23a:	d501      	bpl.n	800e240 <_printf_i+0xec>
 800e23c:	681e      	ldr	r6, [r3, #0]
 800e23e:	e002      	b.n	800e246 <_printf_i+0xf2>
 800e240:	0646      	lsls	r6, r0, #25
 800e242:	d5fb      	bpl.n	800e23c <_printf_i+0xe8>
 800e244:	881e      	ldrh	r6, [r3, #0]
 800e246:	4854      	ldr	r0, [pc, #336]	; (800e398 <_printf_i+0x244>)
 800e248:	2f6f      	cmp	r7, #111	; 0x6f
 800e24a:	bf0c      	ite	eq
 800e24c:	2308      	moveq	r3, #8
 800e24e:	230a      	movne	r3, #10
 800e250:	2100      	movs	r1, #0
 800e252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e256:	6865      	ldr	r5, [r4, #4]
 800e258:	60a5      	str	r5, [r4, #8]
 800e25a:	2d00      	cmp	r5, #0
 800e25c:	bfa2      	ittt	ge
 800e25e:	6821      	ldrge	r1, [r4, #0]
 800e260:	f021 0104 	bicge.w	r1, r1, #4
 800e264:	6021      	strge	r1, [r4, #0]
 800e266:	b90e      	cbnz	r6, 800e26c <_printf_i+0x118>
 800e268:	2d00      	cmp	r5, #0
 800e26a:	d04d      	beq.n	800e308 <_printf_i+0x1b4>
 800e26c:	4615      	mov	r5, r2
 800e26e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e272:	fb03 6711 	mls	r7, r3, r1, r6
 800e276:	5dc7      	ldrb	r7, [r0, r7]
 800e278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e27c:	4637      	mov	r7, r6
 800e27e:	42bb      	cmp	r3, r7
 800e280:	460e      	mov	r6, r1
 800e282:	d9f4      	bls.n	800e26e <_printf_i+0x11a>
 800e284:	2b08      	cmp	r3, #8
 800e286:	d10b      	bne.n	800e2a0 <_printf_i+0x14c>
 800e288:	6823      	ldr	r3, [r4, #0]
 800e28a:	07de      	lsls	r6, r3, #31
 800e28c:	d508      	bpl.n	800e2a0 <_printf_i+0x14c>
 800e28e:	6923      	ldr	r3, [r4, #16]
 800e290:	6861      	ldr	r1, [r4, #4]
 800e292:	4299      	cmp	r1, r3
 800e294:	bfde      	ittt	le
 800e296:	2330      	movle	r3, #48	; 0x30
 800e298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e29c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2a0:	1b52      	subs	r2, r2, r5
 800e2a2:	6122      	str	r2, [r4, #16]
 800e2a4:	f8cd a000 	str.w	sl, [sp]
 800e2a8:	464b      	mov	r3, r9
 800e2aa:	aa03      	add	r2, sp, #12
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f7ff fee2 	bl	800e078 <_printf_common>
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	d14c      	bne.n	800e352 <_printf_i+0x1fe>
 800e2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2bc:	b004      	add	sp, #16
 800e2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c2:	4835      	ldr	r0, [pc, #212]	; (800e398 <_printf_i+0x244>)
 800e2c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e2c8:	6829      	ldr	r1, [r5, #0]
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e2d0:	6029      	str	r1, [r5, #0]
 800e2d2:	061d      	lsls	r5, r3, #24
 800e2d4:	d514      	bpl.n	800e300 <_printf_i+0x1ac>
 800e2d6:	07df      	lsls	r7, r3, #31
 800e2d8:	bf44      	itt	mi
 800e2da:	f043 0320 	orrmi.w	r3, r3, #32
 800e2de:	6023      	strmi	r3, [r4, #0]
 800e2e0:	b91e      	cbnz	r6, 800e2ea <_printf_i+0x196>
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	f023 0320 	bic.w	r3, r3, #32
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	2310      	movs	r3, #16
 800e2ec:	e7b0      	b.n	800e250 <_printf_i+0xfc>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	f043 0320 	orr.w	r3, r3, #32
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	2378      	movs	r3, #120	; 0x78
 800e2f8:	4828      	ldr	r0, [pc, #160]	; (800e39c <_printf_i+0x248>)
 800e2fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e2fe:	e7e3      	b.n	800e2c8 <_printf_i+0x174>
 800e300:	0659      	lsls	r1, r3, #25
 800e302:	bf48      	it	mi
 800e304:	b2b6      	uxthmi	r6, r6
 800e306:	e7e6      	b.n	800e2d6 <_printf_i+0x182>
 800e308:	4615      	mov	r5, r2
 800e30a:	e7bb      	b.n	800e284 <_printf_i+0x130>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	6826      	ldr	r6, [r4, #0]
 800e310:	6961      	ldr	r1, [r4, #20]
 800e312:	1d18      	adds	r0, r3, #4
 800e314:	6028      	str	r0, [r5, #0]
 800e316:	0635      	lsls	r5, r6, #24
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	d501      	bpl.n	800e320 <_printf_i+0x1cc>
 800e31c:	6019      	str	r1, [r3, #0]
 800e31e:	e002      	b.n	800e326 <_printf_i+0x1d2>
 800e320:	0670      	lsls	r0, r6, #25
 800e322:	d5fb      	bpl.n	800e31c <_printf_i+0x1c8>
 800e324:	8019      	strh	r1, [r3, #0]
 800e326:	2300      	movs	r3, #0
 800e328:	6123      	str	r3, [r4, #16]
 800e32a:	4615      	mov	r5, r2
 800e32c:	e7ba      	b.n	800e2a4 <_printf_i+0x150>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	1d1a      	adds	r2, r3, #4
 800e332:	602a      	str	r2, [r5, #0]
 800e334:	681d      	ldr	r5, [r3, #0]
 800e336:	6862      	ldr	r2, [r4, #4]
 800e338:	2100      	movs	r1, #0
 800e33a:	4628      	mov	r0, r5
 800e33c:	f7f1 ff80 	bl	8000240 <memchr>
 800e340:	b108      	cbz	r0, 800e346 <_printf_i+0x1f2>
 800e342:	1b40      	subs	r0, r0, r5
 800e344:	6060      	str	r0, [r4, #4]
 800e346:	6863      	ldr	r3, [r4, #4]
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	2300      	movs	r3, #0
 800e34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e350:	e7a8      	b.n	800e2a4 <_printf_i+0x150>
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	462a      	mov	r2, r5
 800e356:	4649      	mov	r1, r9
 800e358:	4640      	mov	r0, r8
 800e35a:	47d0      	blx	sl
 800e35c:	3001      	adds	r0, #1
 800e35e:	d0ab      	beq.n	800e2b8 <_printf_i+0x164>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	079b      	lsls	r3, r3, #30
 800e364:	d413      	bmi.n	800e38e <_printf_i+0x23a>
 800e366:	68e0      	ldr	r0, [r4, #12]
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	4298      	cmp	r0, r3
 800e36c:	bfb8      	it	lt
 800e36e:	4618      	movlt	r0, r3
 800e370:	e7a4      	b.n	800e2bc <_printf_i+0x168>
 800e372:	2301      	movs	r3, #1
 800e374:	4632      	mov	r2, r6
 800e376:	4649      	mov	r1, r9
 800e378:	4640      	mov	r0, r8
 800e37a:	47d0      	blx	sl
 800e37c:	3001      	adds	r0, #1
 800e37e:	d09b      	beq.n	800e2b8 <_printf_i+0x164>
 800e380:	3501      	adds	r5, #1
 800e382:	68e3      	ldr	r3, [r4, #12]
 800e384:	9903      	ldr	r1, [sp, #12]
 800e386:	1a5b      	subs	r3, r3, r1
 800e388:	42ab      	cmp	r3, r5
 800e38a:	dcf2      	bgt.n	800e372 <_printf_i+0x21e>
 800e38c:	e7eb      	b.n	800e366 <_printf_i+0x212>
 800e38e:	2500      	movs	r5, #0
 800e390:	f104 0619 	add.w	r6, r4, #25
 800e394:	e7f5      	b.n	800e382 <_printf_i+0x22e>
 800e396:	bf00      	nop
 800e398:	0801b5f9 	.word	0x0801b5f9
 800e39c:	0801b60a 	.word	0x0801b60a

0800e3a0 <_sbrk_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d06      	ldr	r5, [pc, #24]	; (800e3bc <_sbrk_r+0x1c>)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	f7f2 f944 	bl	8000638 <_sbrk>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_sbrk_r+0x1a>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_sbrk_r+0x1a>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	2000e474 	.word	0x2000e474

0800e3c0 <__sread>:
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c8:	f000 fa9e 	bl	800e908 <_read_r>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	bfab      	itete	ge
 800e3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e3d4:	181b      	addge	r3, r3, r0
 800e3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3da:	bfac      	ite	ge
 800e3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3de:	81a3      	strhlt	r3, [r4, #12]
 800e3e0:	bd10      	pop	{r4, pc}

0800e3e2 <__swrite>:
 800e3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e6:	461f      	mov	r7, r3
 800e3e8:	898b      	ldrh	r3, [r1, #12]
 800e3ea:	05db      	lsls	r3, r3, #23
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	4616      	mov	r6, r2
 800e3f2:	d505      	bpl.n	800e400 <__swrite+0x1e>
 800e3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f000 f9d0 	bl	800e7a0 <_lseek_r>
 800e400:	89a3      	ldrh	r3, [r4, #12]
 800e402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	4632      	mov	r2, r6
 800e40e:	463b      	mov	r3, r7
 800e410:	4628      	mov	r0, r5
 800e412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e416:	f000 b869 	b.w	800e4ec <_write_r>

0800e41a <__sseek>:
 800e41a:	b510      	push	{r4, lr}
 800e41c:	460c      	mov	r4, r1
 800e41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e422:	f000 f9bd 	bl	800e7a0 <_lseek_r>
 800e426:	1c43      	adds	r3, r0, #1
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	bf15      	itete	ne
 800e42c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e436:	81a3      	strheq	r3, [r4, #12]
 800e438:	bf18      	it	ne
 800e43a:	81a3      	strhne	r3, [r4, #12]
 800e43c:	bd10      	pop	{r4, pc}

0800e43e <__sclose>:
 800e43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e442:	f000 b8db 	b.w	800e5fc <_close_r>
	...

0800e448 <__swbuf_r>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	460e      	mov	r6, r1
 800e44c:	4614      	mov	r4, r2
 800e44e:	4605      	mov	r5, r0
 800e450:	b118      	cbz	r0, 800e45a <__swbuf_r+0x12>
 800e452:	6983      	ldr	r3, [r0, #24]
 800e454:	b90b      	cbnz	r3, 800e45a <__swbuf_r+0x12>
 800e456:	f7ff f9bf 	bl	800d7d8 <__sinit>
 800e45a:	4b21      	ldr	r3, [pc, #132]	; (800e4e0 <__swbuf_r+0x98>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	d12b      	bne.n	800e4b8 <__swbuf_r+0x70>
 800e460:	686c      	ldr	r4, [r5, #4]
 800e462:	69a3      	ldr	r3, [r4, #24]
 800e464:	60a3      	str	r3, [r4, #8]
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	071a      	lsls	r2, r3, #28
 800e46a:	d52f      	bpl.n	800e4cc <__swbuf_r+0x84>
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	b36b      	cbz	r3, 800e4cc <__swbuf_r+0x84>
 800e470:	6923      	ldr	r3, [r4, #16]
 800e472:	6820      	ldr	r0, [r4, #0]
 800e474:	1ac0      	subs	r0, r0, r3
 800e476:	6963      	ldr	r3, [r4, #20]
 800e478:	b2f6      	uxtb	r6, r6
 800e47a:	4283      	cmp	r3, r0
 800e47c:	4637      	mov	r7, r6
 800e47e:	dc04      	bgt.n	800e48a <__swbuf_r+0x42>
 800e480:	4621      	mov	r1, r4
 800e482:	4628      	mov	r0, r5
 800e484:	f000 f950 	bl	800e728 <_fflush_r>
 800e488:	bb30      	cbnz	r0, 800e4d8 <__swbuf_r+0x90>
 800e48a:	68a3      	ldr	r3, [r4, #8]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	60a3      	str	r3, [r4, #8]
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	6022      	str	r2, [r4, #0]
 800e496:	701e      	strb	r6, [r3, #0]
 800e498:	6963      	ldr	r3, [r4, #20]
 800e49a:	3001      	adds	r0, #1
 800e49c:	4283      	cmp	r3, r0
 800e49e:	d004      	beq.n	800e4aa <__swbuf_r+0x62>
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	07db      	lsls	r3, r3, #31
 800e4a4:	d506      	bpl.n	800e4b4 <__swbuf_r+0x6c>
 800e4a6:	2e0a      	cmp	r6, #10
 800e4a8:	d104      	bne.n	800e4b4 <__swbuf_r+0x6c>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f000 f93b 	bl	800e728 <_fflush_r>
 800e4b2:	b988      	cbnz	r0, 800e4d8 <__swbuf_r+0x90>
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b8:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <__swbuf_r+0x9c>)
 800e4ba:	429c      	cmp	r4, r3
 800e4bc:	d101      	bne.n	800e4c2 <__swbuf_r+0x7a>
 800e4be:	68ac      	ldr	r4, [r5, #8]
 800e4c0:	e7cf      	b.n	800e462 <__swbuf_r+0x1a>
 800e4c2:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <__swbuf_r+0xa0>)
 800e4c4:	429c      	cmp	r4, r3
 800e4c6:	bf08      	it	eq
 800e4c8:	68ec      	ldreq	r4, [r5, #12]
 800e4ca:	e7ca      	b.n	800e462 <__swbuf_r+0x1a>
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f000 f81e 	bl	800e510 <__swsetup_r>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d0cb      	beq.n	800e470 <__swbuf_r+0x28>
 800e4d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e4dc:	e7ea      	b.n	800e4b4 <__swbuf_r+0x6c>
 800e4de:	bf00      	nop
 800e4e0:	0801b5a8 	.word	0x0801b5a8
 800e4e4:	0801b5c8 	.word	0x0801b5c8
 800e4e8:	0801b588 	.word	0x0801b588

0800e4ec <_write_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d07      	ldr	r5, [pc, #28]	; (800e50c <_write_r+0x20>)
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	602a      	str	r2, [r5, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f7f2 f8cc 	bl	8000698 <_write>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_write_r+0x1e>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_write_r+0x1e>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	2000e474 	.word	0x2000e474

0800e510 <__swsetup_r>:
 800e510:	4b32      	ldr	r3, [pc, #200]	; (800e5dc <__swsetup_r+0xcc>)
 800e512:	b570      	push	{r4, r5, r6, lr}
 800e514:	681d      	ldr	r5, [r3, #0]
 800e516:	4606      	mov	r6, r0
 800e518:	460c      	mov	r4, r1
 800e51a:	b125      	cbz	r5, 800e526 <__swsetup_r+0x16>
 800e51c:	69ab      	ldr	r3, [r5, #24]
 800e51e:	b913      	cbnz	r3, 800e526 <__swsetup_r+0x16>
 800e520:	4628      	mov	r0, r5
 800e522:	f7ff f959 	bl	800d7d8 <__sinit>
 800e526:	4b2e      	ldr	r3, [pc, #184]	; (800e5e0 <__swsetup_r+0xd0>)
 800e528:	429c      	cmp	r4, r3
 800e52a:	d10f      	bne.n	800e54c <__swsetup_r+0x3c>
 800e52c:	686c      	ldr	r4, [r5, #4]
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e534:	0719      	lsls	r1, r3, #28
 800e536:	d42c      	bmi.n	800e592 <__swsetup_r+0x82>
 800e538:	06dd      	lsls	r5, r3, #27
 800e53a:	d411      	bmi.n	800e560 <__swsetup_r+0x50>
 800e53c:	2309      	movs	r3, #9
 800e53e:	6033      	str	r3, [r6, #0]
 800e540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e544:	81a3      	strh	r3, [r4, #12]
 800e546:	f04f 30ff 	mov.w	r0, #4294967295
 800e54a:	e03e      	b.n	800e5ca <__swsetup_r+0xba>
 800e54c:	4b25      	ldr	r3, [pc, #148]	; (800e5e4 <__swsetup_r+0xd4>)
 800e54e:	429c      	cmp	r4, r3
 800e550:	d101      	bne.n	800e556 <__swsetup_r+0x46>
 800e552:	68ac      	ldr	r4, [r5, #8]
 800e554:	e7eb      	b.n	800e52e <__swsetup_r+0x1e>
 800e556:	4b24      	ldr	r3, [pc, #144]	; (800e5e8 <__swsetup_r+0xd8>)
 800e558:	429c      	cmp	r4, r3
 800e55a:	bf08      	it	eq
 800e55c:	68ec      	ldreq	r4, [r5, #12]
 800e55e:	e7e6      	b.n	800e52e <__swsetup_r+0x1e>
 800e560:	0758      	lsls	r0, r3, #29
 800e562:	d512      	bpl.n	800e58a <__swsetup_r+0x7a>
 800e564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e566:	b141      	cbz	r1, 800e57a <__swsetup_r+0x6a>
 800e568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e56c:	4299      	cmp	r1, r3
 800e56e:	d002      	beq.n	800e576 <__swsetup_r+0x66>
 800e570:	4630      	mov	r0, r6
 800e572:	f7ff f9eb 	bl	800d94c <_free_r>
 800e576:	2300      	movs	r3, #0
 800e578:	6363      	str	r3, [r4, #52]	; 0x34
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	2300      	movs	r3, #0
 800e584:	6063      	str	r3, [r4, #4]
 800e586:	6923      	ldr	r3, [r4, #16]
 800e588:	6023      	str	r3, [r4, #0]
 800e58a:	89a3      	ldrh	r3, [r4, #12]
 800e58c:	f043 0308 	orr.w	r3, r3, #8
 800e590:	81a3      	strh	r3, [r4, #12]
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	b94b      	cbnz	r3, 800e5aa <__swsetup_r+0x9a>
 800e596:	89a3      	ldrh	r3, [r4, #12]
 800e598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5a0:	d003      	beq.n	800e5aa <__swsetup_r+0x9a>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f000 f933 	bl	800e810 <__smakebuf_r>
 800e5aa:	89a0      	ldrh	r0, [r4, #12]
 800e5ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5b0:	f010 0301 	ands.w	r3, r0, #1
 800e5b4:	d00a      	beq.n	800e5cc <__swsetup_r+0xbc>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	60a3      	str	r3, [r4, #8]
 800e5ba:	6963      	ldr	r3, [r4, #20]
 800e5bc:	425b      	negs	r3, r3
 800e5be:	61a3      	str	r3, [r4, #24]
 800e5c0:	6923      	ldr	r3, [r4, #16]
 800e5c2:	b943      	cbnz	r3, 800e5d6 <__swsetup_r+0xc6>
 800e5c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5c8:	d1ba      	bne.n	800e540 <__swsetup_r+0x30>
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	0781      	lsls	r1, r0, #30
 800e5ce:	bf58      	it	pl
 800e5d0:	6963      	ldrpl	r3, [r4, #20]
 800e5d2:	60a3      	str	r3, [r4, #8]
 800e5d4:	e7f4      	b.n	800e5c0 <__swsetup_r+0xb0>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	e7f7      	b.n	800e5ca <__swsetup_r+0xba>
 800e5da:	bf00      	nop
 800e5dc:	20000040 	.word	0x20000040
 800e5e0:	0801b5a8 	.word	0x0801b5a8
 800e5e4:	0801b5c8 	.word	0x0801b5c8
 800e5e8:	0801b588 	.word	0x0801b588

0800e5ec <abort>:
 800e5ec:	b508      	push	{r3, lr}
 800e5ee:	2006      	movs	r0, #6
 800e5f0:	f000 f9c4 	bl	800e97c <raise>
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	f7f2 f849 	bl	800068c <_exit>
	...

0800e5fc <_close_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4d06      	ldr	r5, [pc, #24]	; (800e618 <_close_r+0x1c>)
 800e600:	2300      	movs	r3, #0
 800e602:	4604      	mov	r4, r0
 800e604:	4608      	mov	r0, r1
 800e606:	602b      	str	r3, [r5, #0]
 800e608:	f7f2 f854 	bl	80006b4 <_close>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d102      	bne.n	800e616 <_close_r+0x1a>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	b103      	cbz	r3, 800e616 <_close_r+0x1a>
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	bd38      	pop	{r3, r4, r5, pc}
 800e618:	2000e474 	.word	0x2000e474

0800e61c <__sflush_r>:
 800e61c:	898a      	ldrh	r2, [r1, #12]
 800e61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e622:	4605      	mov	r5, r0
 800e624:	0710      	lsls	r0, r2, #28
 800e626:	460c      	mov	r4, r1
 800e628:	d458      	bmi.n	800e6dc <__sflush_r+0xc0>
 800e62a:	684b      	ldr	r3, [r1, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dc05      	bgt.n	800e63c <__sflush_r+0x20>
 800e630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e632:	2b00      	cmp	r3, #0
 800e634:	dc02      	bgt.n	800e63c <__sflush_r+0x20>
 800e636:	2000      	movs	r0, #0
 800e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e63e:	2e00      	cmp	r6, #0
 800e640:	d0f9      	beq.n	800e636 <__sflush_r+0x1a>
 800e642:	2300      	movs	r3, #0
 800e644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e648:	682f      	ldr	r7, [r5, #0]
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	d032      	beq.n	800e6b4 <__sflush_r+0x98>
 800e64e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	075a      	lsls	r2, r3, #29
 800e654:	d505      	bpl.n	800e662 <__sflush_r+0x46>
 800e656:	6863      	ldr	r3, [r4, #4]
 800e658:	1ac0      	subs	r0, r0, r3
 800e65a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e65c:	b10b      	cbz	r3, 800e662 <__sflush_r+0x46>
 800e65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e660:	1ac0      	subs	r0, r0, r3
 800e662:	2300      	movs	r3, #0
 800e664:	4602      	mov	r2, r0
 800e666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e668:	6a21      	ldr	r1, [r4, #32]
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b0      	blx	r6
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	d106      	bne.n	800e682 <__sflush_r+0x66>
 800e674:	6829      	ldr	r1, [r5, #0]
 800e676:	291d      	cmp	r1, #29
 800e678:	d82c      	bhi.n	800e6d4 <__sflush_r+0xb8>
 800e67a:	4a2a      	ldr	r2, [pc, #168]	; (800e724 <__sflush_r+0x108>)
 800e67c:	40ca      	lsrs	r2, r1
 800e67e:	07d6      	lsls	r6, r2, #31
 800e680:	d528      	bpl.n	800e6d4 <__sflush_r+0xb8>
 800e682:	2200      	movs	r2, #0
 800e684:	6062      	str	r2, [r4, #4]
 800e686:	04d9      	lsls	r1, r3, #19
 800e688:	6922      	ldr	r2, [r4, #16]
 800e68a:	6022      	str	r2, [r4, #0]
 800e68c:	d504      	bpl.n	800e698 <__sflush_r+0x7c>
 800e68e:	1c42      	adds	r2, r0, #1
 800e690:	d101      	bne.n	800e696 <__sflush_r+0x7a>
 800e692:	682b      	ldr	r3, [r5, #0]
 800e694:	b903      	cbnz	r3, 800e698 <__sflush_r+0x7c>
 800e696:	6560      	str	r0, [r4, #84]	; 0x54
 800e698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e69a:	602f      	str	r7, [r5, #0]
 800e69c:	2900      	cmp	r1, #0
 800e69e:	d0ca      	beq.n	800e636 <__sflush_r+0x1a>
 800e6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6a4:	4299      	cmp	r1, r3
 800e6a6:	d002      	beq.n	800e6ae <__sflush_r+0x92>
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f7ff f94f 	bl	800d94c <_free_r>
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	6360      	str	r0, [r4, #52]	; 0x34
 800e6b2:	e7c1      	b.n	800e638 <__sflush_r+0x1c>
 800e6b4:	6a21      	ldr	r1, [r4, #32]
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	47b0      	blx	r6
 800e6bc:	1c41      	adds	r1, r0, #1
 800e6be:	d1c7      	bne.n	800e650 <__sflush_r+0x34>
 800e6c0:	682b      	ldr	r3, [r5, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0c4      	beq.n	800e650 <__sflush_r+0x34>
 800e6c6:	2b1d      	cmp	r3, #29
 800e6c8:	d001      	beq.n	800e6ce <__sflush_r+0xb2>
 800e6ca:	2b16      	cmp	r3, #22
 800e6cc:	d101      	bne.n	800e6d2 <__sflush_r+0xb6>
 800e6ce:	602f      	str	r7, [r5, #0]
 800e6d0:	e7b1      	b.n	800e636 <__sflush_r+0x1a>
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d8:	81a3      	strh	r3, [r4, #12]
 800e6da:	e7ad      	b.n	800e638 <__sflush_r+0x1c>
 800e6dc:	690f      	ldr	r7, [r1, #16]
 800e6de:	2f00      	cmp	r7, #0
 800e6e0:	d0a9      	beq.n	800e636 <__sflush_r+0x1a>
 800e6e2:	0793      	lsls	r3, r2, #30
 800e6e4:	680e      	ldr	r6, [r1, #0]
 800e6e6:	bf08      	it	eq
 800e6e8:	694b      	ldreq	r3, [r1, #20]
 800e6ea:	600f      	str	r7, [r1, #0]
 800e6ec:	bf18      	it	ne
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	eba6 0807 	sub.w	r8, r6, r7
 800e6f4:	608b      	str	r3, [r1, #8]
 800e6f6:	f1b8 0f00 	cmp.w	r8, #0
 800e6fa:	dd9c      	ble.n	800e636 <__sflush_r+0x1a>
 800e6fc:	6a21      	ldr	r1, [r4, #32]
 800e6fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e700:	4643      	mov	r3, r8
 800e702:	463a      	mov	r2, r7
 800e704:	4628      	mov	r0, r5
 800e706:	47b0      	blx	r6
 800e708:	2800      	cmp	r0, #0
 800e70a:	dc06      	bgt.n	800e71a <__sflush_r+0xfe>
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	e78e      	b.n	800e638 <__sflush_r+0x1c>
 800e71a:	4407      	add	r7, r0
 800e71c:	eba8 0800 	sub.w	r8, r8, r0
 800e720:	e7e9      	b.n	800e6f6 <__sflush_r+0xda>
 800e722:	bf00      	nop
 800e724:	20400001 	.word	0x20400001

0800e728 <_fflush_r>:
 800e728:	b538      	push	{r3, r4, r5, lr}
 800e72a:	690b      	ldr	r3, [r1, #16]
 800e72c:	4605      	mov	r5, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	b913      	cbnz	r3, 800e738 <_fflush_r+0x10>
 800e732:	2500      	movs	r5, #0
 800e734:	4628      	mov	r0, r5
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	b118      	cbz	r0, 800e742 <_fflush_r+0x1a>
 800e73a:	6983      	ldr	r3, [r0, #24]
 800e73c:	b90b      	cbnz	r3, 800e742 <_fflush_r+0x1a>
 800e73e:	f7ff f84b 	bl	800d7d8 <__sinit>
 800e742:	4b14      	ldr	r3, [pc, #80]	; (800e794 <_fflush_r+0x6c>)
 800e744:	429c      	cmp	r4, r3
 800e746:	d11b      	bne.n	800e780 <_fflush_r+0x58>
 800e748:	686c      	ldr	r4, [r5, #4]
 800e74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d0ef      	beq.n	800e732 <_fflush_r+0xa>
 800e752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e754:	07d0      	lsls	r0, r2, #31
 800e756:	d404      	bmi.n	800e762 <_fflush_r+0x3a>
 800e758:	0599      	lsls	r1, r3, #22
 800e75a:	d402      	bmi.n	800e762 <_fflush_r+0x3a>
 800e75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e75e:	f7ff f8eb 	bl	800d938 <__retarget_lock_acquire_recursive>
 800e762:	4628      	mov	r0, r5
 800e764:	4621      	mov	r1, r4
 800e766:	f7ff ff59 	bl	800e61c <__sflush_r>
 800e76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e76c:	07da      	lsls	r2, r3, #31
 800e76e:	4605      	mov	r5, r0
 800e770:	d4e0      	bmi.n	800e734 <_fflush_r+0xc>
 800e772:	89a3      	ldrh	r3, [r4, #12]
 800e774:	059b      	lsls	r3, r3, #22
 800e776:	d4dd      	bmi.n	800e734 <_fflush_r+0xc>
 800e778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e77a:	f7ff f8de 	bl	800d93a <__retarget_lock_release_recursive>
 800e77e:	e7d9      	b.n	800e734 <_fflush_r+0xc>
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <_fflush_r+0x70>)
 800e782:	429c      	cmp	r4, r3
 800e784:	d101      	bne.n	800e78a <_fflush_r+0x62>
 800e786:	68ac      	ldr	r4, [r5, #8]
 800e788:	e7df      	b.n	800e74a <_fflush_r+0x22>
 800e78a:	4b04      	ldr	r3, [pc, #16]	; (800e79c <_fflush_r+0x74>)
 800e78c:	429c      	cmp	r4, r3
 800e78e:	bf08      	it	eq
 800e790:	68ec      	ldreq	r4, [r5, #12]
 800e792:	e7da      	b.n	800e74a <_fflush_r+0x22>
 800e794:	0801b5a8 	.word	0x0801b5a8
 800e798:	0801b5c8 	.word	0x0801b5c8
 800e79c:	0801b588 	.word	0x0801b588

0800e7a0 <_lseek_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d07      	ldr	r5, [pc, #28]	; (800e7c0 <_lseek_r+0x20>)
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	4608      	mov	r0, r1
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	602a      	str	r2, [r5, #0]
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	f7f1 ff8a 	bl	80006c8 <_lseek>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	d102      	bne.n	800e7be <_lseek_r+0x1e>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	b103      	cbz	r3, 800e7be <_lseek_r+0x1e>
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	2000e474 	.word	0x2000e474

0800e7c4 <__swhatbuf_r>:
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	460e      	mov	r6, r1
 800e7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	b096      	sub	sp, #88	; 0x58
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	461d      	mov	r5, r3
 800e7d4:	da08      	bge.n	800e7e8 <__swhatbuf_r+0x24>
 800e7d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	061a      	lsls	r2, r3, #24
 800e7e0:	d410      	bmi.n	800e804 <__swhatbuf_r+0x40>
 800e7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7e6:	e00e      	b.n	800e806 <__swhatbuf_r+0x42>
 800e7e8:	466a      	mov	r2, sp
 800e7ea:	f000 f8e3 	bl	800e9b4 <_fstat_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dbf1      	blt.n	800e7d6 <__swhatbuf_r+0x12>
 800e7f2:	9a01      	ldr	r2, [sp, #4]
 800e7f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7fc:	425a      	negs	r2, r3
 800e7fe:	415a      	adcs	r2, r3
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	e7ee      	b.n	800e7e2 <__swhatbuf_r+0x1e>
 800e804:	2340      	movs	r3, #64	; 0x40
 800e806:	2000      	movs	r0, #0
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	b016      	add	sp, #88	; 0x58
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e810 <__smakebuf_r>:
 800e810:	898b      	ldrh	r3, [r1, #12]
 800e812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e814:	079d      	lsls	r5, r3, #30
 800e816:	4606      	mov	r6, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	d507      	bpl.n	800e82c <__smakebuf_r+0x1c>
 800e81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2301      	movs	r3, #1
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	b002      	add	sp, #8
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	ab01      	add	r3, sp, #4
 800e82e:	466a      	mov	r2, sp
 800e830:	f7ff ffc8 	bl	800e7c4 <__swhatbuf_r>
 800e834:	9900      	ldr	r1, [sp, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff f8f3 	bl	800da24 <_malloc_r>
 800e83e:	b948      	cbnz	r0, 800e854 <__smakebuf_r+0x44>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d4ef      	bmi.n	800e828 <__smakebuf_r+0x18>
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	e7e3      	b.n	800e81c <__smakebuf_r+0xc>
 800e854:	4b0d      	ldr	r3, [pc, #52]	; (800e88c <__smakebuf_r+0x7c>)
 800e856:	62b3      	str	r3, [r6, #40]	; 0x28
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	6020      	str	r0, [r4, #0]
 800e85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	6163      	str	r3, [r4, #20]
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	6120      	str	r0, [r4, #16]
 800e86a:	b15b      	cbz	r3, 800e884 <__smakebuf_r+0x74>
 800e86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e870:	4630      	mov	r0, r6
 800e872:	f000 f8b1 	bl	800e9d8 <_isatty_r>
 800e876:	b128      	cbz	r0, 800e884 <__smakebuf_r+0x74>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f023 0303 	bic.w	r3, r3, #3
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	89a0      	ldrh	r0, [r4, #12]
 800e886:	4305      	orrs	r5, r0
 800e888:	81a5      	strh	r5, [r4, #12]
 800e88a:	e7cd      	b.n	800e828 <__smakebuf_r+0x18>
 800e88c:	0800d771 	.word	0x0800d771

0800e890 <__malloc_lock>:
 800e890:	4801      	ldr	r0, [pc, #4]	; (800e898 <__malloc_lock+0x8>)
 800e892:	f7ff b851 	b.w	800d938 <__retarget_lock_acquire_recursive>
 800e896:	bf00      	nop
 800e898:	2000e478 	.word	0x2000e478

0800e89c <__malloc_unlock>:
 800e89c:	4801      	ldr	r0, [pc, #4]	; (800e8a4 <__malloc_unlock+0x8>)
 800e89e:	f7ff b84c 	b.w	800d93a <__retarget_lock_release_recursive>
 800e8a2:	bf00      	nop
 800e8a4:	2000e478 	.word	0x2000e478

0800e8a8 <_realloc_r>:
 800e8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4614      	mov	r4, r2
 800e8b0:	460e      	mov	r6, r1
 800e8b2:	b921      	cbnz	r1, 800e8be <_realloc_r+0x16>
 800e8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	f7ff b8b3 	b.w	800da24 <_malloc_r>
 800e8be:	b92a      	cbnz	r2, 800e8cc <_realloc_r+0x24>
 800e8c0:	f7ff f844 	bl	800d94c <_free_r>
 800e8c4:	4625      	mov	r5, r4
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8cc:	f000 f894 	bl	800e9f8 <_malloc_usable_size_r>
 800e8d0:	4284      	cmp	r4, r0
 800e8d2:	4607      	mov	r7, r0
 800e8d4:	d802      	bhi.n	800e8dc <_realloc_r+0x34>
 800e8d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8da:	d812      	bhi.n	800e902 <_realloc_r+0x5a>
 800e8dc:	4621      	mov	r1, r4
 800e8de:	4640      	mov	r0, r8
 800e8e0:	f7ff f8a0 	bl	800da24 <_malloc_r>
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d0ed      	beq.n	800e8c6 <_realloc_r+0x1e>
 800e8ea:	42bc      	cmp	r4, r7
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4631      	mov	r1, r6
 800e8f0:	bf28      	it	cs
 800e8f2:	463a      	movcs	r2, r7
 800e8f4:	f7fe fe28 	bl	800d548 <memcpy>
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	f7ff f826 	bl	800d94c <_free_r>
 800e900:	e7e1      	b.n	800e8c6 <_realloc_r+0x1e>
 800e902:	4635      	mov	r5, r6
 800e904:	e7df      	b.n	800e8c6 <_realloc_r+0x1e>
	...

0800e908 <_read_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_read_r+0x20>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	4608      	mov	r0, r1
 800e910:	4611      	mov	r1, r2
 800e912:	2200      	movs	r2, #0
 800e914:	602a      	str	r2, [r5, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	f7f1 fed8 	bl	80006cc <_read>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d102      	bne.n	800e926 <_read_r+0x1e>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	b103      	cbz	r3, 800e926 <_read_r+0x1e>
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	bd38      	pop	{r3, r4, r5, pc}
 800e928:	2000e474 	.word	0x2000e474

0800e92c <_raise_r>:
 800e92c:	291f      	cmp	r1, #31
 800e92e:	b538      	push	{r3, r4, r5, lr}
 800e930:	4604      	mov	r4, r0
 800e932:	460d      	mov	r5, r1
 800e934:	d904      	bls.n	800e940 <_raise_r+0x14>
 800e936:	2316      	movs	r3, #22
 800e938:	6003      	str	r3, [r0, #0]
 800e93a:	f04f 30ff 	mov.w	r0, #4294967295
 800e93e:	bd38      	pop	{r3, r4, r5, pc}
 800e940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e942:	b112      	cbz	r2, 800e94a <_raise_r+0x1e>
 800e944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e948:	b94b      	cbnz	r3, 800e95e <_raise_r+0x32>
 800e94a:	4620      	mov	r0, r4
 800e94c:	f000 f830 	bl	800e9b0 <_getpid_r>
 800e950:	462a      	mov	r2, r5
 800e952:	4601      	mov	r1, r0
 800e954:	4620      	mov	r0, r4
 800e956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e95a:	f000 b817 	b.w	800e98c <_kill_r>
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d00a      	beq.n	800e978 <_raise_r+0x4c>
 800e962:	1c59      	adds	r1, r3, #1
 800e964:	d103      	bne.n	800e96e <_raise_r+0x42>
 800e966:	2316      	movs	r3, #22
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	2001      	movs	r0, #1
 800e96c:	e7e7      	b.n	800e93e <_raise_r+0x12>
 800e96e:	2400      	movs	r4, #0
 800e970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e974:	4628      	mov	r0, r5
 800e976:	4798      	blx	r3
 800e978:	2000      	movs	r0, #0
 800e97a:	e7e0      	b.n	800e93e <_raise_r+0x12>

0800e97c <raise>:
 800e97c:	4b02      	ldr	r3, [pc, #8]	; (800e988 <raise+0xc>)
 800e97e:	4601      	mov	r1, r0
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	f7ff bfd3 	b.w	800e92c <_raise_r>
 800e986:	bf00      	nop
 800e988:	20000040 	.word	0x20000040

0800e98c <_kill_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4d07      	ldr	r5, [pc, #28]	; (800e9ac <_kill_r+0x20>)
 800e990:	2300      	movs	r3, #0
 800e992:	4604      	mov	r4, r0
 800e994:	4608      	mov	r0, r1
 800e996:	4611      	mov	r1, r2
 800e998:	602b      	str	r3, [r5, #0]
 800e99a:	f7f1 fe6f 	bl	800067c <_kill>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	d102      	bne.n	800e9a8 <_kill_r+0x1c>
 800e9a2:	682b      	ldr	r3, [r5, #0]
 800e9a4:	b103      	cbz	r3, 800e9a8 <_kill_r+0x1c>
 800e9a6:	6023      	str	r3, [r4, #0]
 800e9a8:	bd38      	pop	{r3, r4, r5, pc}
 800e9aa:	bf00      	nop
 800e9ac:	2000e474 	.word	0x2000e474

0800e9b0 <_getpid_r>:
 800e9b0:	f7f1 be62 	b.w	8000678 <_getpid>

0800e9b4 <_fstat_r>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4d07      	ldr	r5, [pc, #28]	; (800e9d4 <_fstat_r+0x20>)
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	f7f1 fe7a 	bl	80006ba <_fstat>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d102      	bne.n	800e9d0 <_fstat_r+0x1c>
 800e9ca:	682b      	ldr	r3, [r5, #0]
 800e9cc:	b103      	cbz	r3, 800e9d0 <_fstat_r+0x1c>
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
 800e9d2:	bf00      	nop
 800e9d4:	2000e474 	.word	0x2000e474

0800e9d8 <_isatty_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	4d06      	ldr	r5, [pc, #24]	; (800e9f4 <_isatty_r+0x1c>)
 800e9dc:	2300      	movs	r3, #0
 800e9de:	4604      	mov	r4, r0
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	602b      	str	r3, [r5, #0]
 800e9e4:	f7f1 fe6e 	bl	80006c4 <_isatty>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d102      	bne.n	800e9f2 <_isatty_r+0x1a>
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	b103      	cbz	r3, 800e9f2 <_isatty_r+0x1a>
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}
 800e9f4:	2000e474 	.word	0x2000e474

0800e9f8 <_malloc_usable_size_r>:
 800e9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9fc:	1f18      	subs	r0, r3, #4
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	bfbc      	itt	lt
 800ea02:	580b      	ldrlt	r3, [r1, r0]
 800ea04:	18c0      	addlt	r0, r0, r3
 800ea06:	4770      	bx	lr

0800ea08 <_init>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	bf00      	nop
 800ea0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0e:	bc08      	pop	{r3}
 800ea10:	469e      	mov	lr, r3
 800ea12:	4770      	bx	lr

0800ea14 <_fini>:
 800ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea16:	bf00      	nop
 800ea18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea1a:	bc08      	pop	{r3}
 800ea1c:	469e      	mov	lr, r3
 800ea1e:	4770      	bx	lr
