
004_TCPServer_Raw_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002de4  0800fef8  0800fef8  0001fef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cdc  08012cdc  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012cdc  08012cdc  00022cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ce4  08012ce4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ce4  08012ce4  00022ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ce8  08012ce8  00022ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012cec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a50  20000078  08012d64  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ac8  08012d64  00038ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c14  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b48  00000000  00000000  00048cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0004d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0004e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000309ae  00000000  00000000  0004f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd7c  00000000  00000000  00080276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fabfa  00000000  00000000  0009fff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019abec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  0019ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fee0 	.word	0x0800fee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800fee0 	.word	0x0800fee0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fda6 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f832 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f89c 	bl	800070c <MX_GPIO_Init>
  MX_LWIP_Init();
 80005d4:	f002 ff80 	bl	80034d8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80005d8:	f000 face 	bl	8000b78 <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0x60>)
 80005de:	f003 fb6b 	bl	8003cb8 <ethernetif_input>

	sys_check_timeouts();
 80005e2:	f00b fbfd 	bl	800bde0 <sys_check_timeouts>

	// UDP Client needs to have a linksetup if cable is disconnected at power on
	// if user disconnects cable after power it works fine
	// but it doesnt work if cable is disconnected at power on
	// This function is used to set the link and indicate link down, it glows red LED when is link down
	ethernetif_set_link(&gnetif);
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0x60>)
 80005e8:	f003 fbbc 	bl	8003d64 <ethernetif_set_link>

	if (HAL_GetTick() - LEDBlinkTimer >= 1000)
 80005ec:	f000 fdee 	bl	80011cc <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <main+0x64>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fc:	d3ee      	bcc.n	80005dc <main+0x18>
	{
	  printf("Hello from UART\r\n");
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x68>)
 8000600:	f00e fa5e 	bl	800eac0 <puts>
	  LEDBlinkTimer = HAL_GetTick();
 8000604:	f000 fde2 	bl	80011cc <HAL_GetTick>
 8000608:	4603      	mov	r3, r0
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <main+0x64>)
 800060c:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800060e:	2101      	movs	r1, #1
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x6c>)
 8000612:	f002 fa54 	bl	8002abe <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x6c>)
 800061c:	f002 fa36 	bl	8002a8c <HAL_GPIO_WritePin>
	ethernetif_input(&gnetif);
 8000620:	e7dc      	b.n	80005dc <main+0x18>
 8000622:	bf00      	nop
 8000624:	200000a0 	.word	0x200000a0
 8000628:	20000094 	.word	0x20000094
 800062c:	0800fef8 	.word	0x0800fef8
 8000630:	40020400 	.word	0x40020400

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00e f9ae 	bl	800e9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a29      	ldr	r2, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a24      	ldr	r2, [pc, #144]	; (8000708 <SystemClock_Config+0xd4>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a0:	23d8      	movs	r3, #216	; 0xd8
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fa6f 	bl	8002b94 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f8fa 	bl	80008b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f002 fa18 	bl	8002af4 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f000 f8f3 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2107      	movs	r1, #7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fcf5 	bl	80030dc <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f8:	f000 f8dc 	bl	80008b4 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b5e      	ldr	r3, [pc, #376]	; (800089c <MX_GPIO_Init+0x190>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a5d      	ldr	r2, [pc, #372]	; (800089c <MX_GPIO_Init+0x190>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b5b      	ldr	r3, [pc, #364]	; (800089c <MX_GPIO_Init+0x190>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b58      	ldr	r3, [pc, #352]	; (800089c <MX_GPIO_Init+0x190>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a57      	ldr	r2, [pc, #348]	; (800089c <MX_GPIO_Init+0x190>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b55      	ldr	r3, [pc, #340]	; (800089c <MX_GPIO_Init+0x190>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b52      	ldr	r3, [pc, #328]	; (800089c <MX_GPIO_Init+0x190>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a51      	ldr	r2, [pc, #324]	; (800089c <MX_GPIO_Init+0x190>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b4f      	ldr	r3, [pc, #316]	; (800089c <MX_GPIO_Init+0x190>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b4c      	ldr	r3, [pc, #304]	; (800089c <MX_GPIO_Init+0x190>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a4b      	ldr	r2, [pc, #300]	; (800089c <MX_GPIO_Init+0x190>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <MX_GPIO_Init+0x190>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <MX_GPIO_Init+0x190>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a45      	ldr	r2, [pc, #276]	; (800089c <MX_GPIO_Init+0x190>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <MX_GPIO_Init+0x190>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	4b40      	ldr	r3, [pc, #256]	; (800089c <MX_GPIO_Init+0x190>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3f      	ldr	r2, [pc, #252]	; (800089c <MX_GPIO_Init+0x190>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <MX_GPIO_Init+0x190>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007b8:	4839      	ldr	r0, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x194>)
 80007ba:	f002 f967 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	4838      	ldr	r0, [pc, #224]	; (80008a4 <MX_GPIO_Init+0x198>)
 80007c4:	f002 f962 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4832      	ldr	r0, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x19c>)
 80007e0:	f001 ffa8 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4828      	ldr	r0, [pc, #160]	; (80008a0 <MX_GPIO_Init+0x194>)
 80007fe:	f001 ff99 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000814:	2307      	movs	r3, #7
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x1a0>)
 8000820:	f001 ff88 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x198>)
 800083c:	f001 ff7a 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_GPIO_Init+0x198>)
 8000854:	f001 ff6e 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000858:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086a:	230a      	movs	r3, #10
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_GPIO_Init+0x1a4>)
 8000876:	f001 ff5d 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x1a4>)
 8000890:	f001 ff50 	bl	8002734 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	; 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40020000 	.word	0x40020000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x44>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 fc26 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <ETH_IRQHandler+0x10>)
 8000962:	f001 f94f 	bl	8001c04 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000318c 	.word	0x2000318c

08000970 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d013      	beq.n	80009b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000988:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800098c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000990:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00b      	beq.n	80009b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000998:	e000      	b.n	800099c <ITM_SendChar+0x2c>
    {
      __NOP();
 800099a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800099c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f9      	beq.n	800099a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
	return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <_kill>:

int _kill(int pid, int sig)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <_kill+0x20>)
 80009dc:	2216      	movs	r2, #22
 80009de:	601a      	str	r2, [r3, #0]
	return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20008ab8 	.word	0x20008ab8

080009f4 <_exit>:

void _exit (int status)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffe5 	bl	80009d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a06:	e7fe      	b.n	8000a06 <_exit+0x12>

08000a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
	}

return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff87 	bl	8000970 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
	}
	return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d205      	bcs.n	8000b20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <_sbrk+0x6c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20050000 	.word	0x20050000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	20008ac8 	.word	0x20008ac8
 8000b50:	20008ab8 	.word	0x20008ab8

08000b54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000b7e:	f006 fb11 	bl	80071a4 <tcp_new>
 8000b82:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 29, 123);
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <tcp_server_init+0x4c>)
 8000b86:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	220a      	movs	r2, #10
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f005 fa64 	bl	800605c <tcp_bind>
 8000b94:	4603      	mov	r3, r0
 8000b96:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000b98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000ba0:	21ff      	movs	r1, #255	; 0xff
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f005 fb12 	bl	80061cc <tcp_listen_with_backlog>
 8000ba8:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000baa:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <tcp_server_init+0x50>)
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f006 fb79 	bl	80072a4 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000bb2:	e003      	b.n	8000bbc <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000bb4:	68f9      	ldr	r1, [r7, #12]
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f003 fe36 	bl	8004828 <memp_free>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	7b1da8c0 	.word	0x7b1da8c0
 8000bc8:	08000bcd 	.word	0x08000bcd

08000bcc <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	68b8      	ldr	r0, [r7, #8]
 8000bde:	f006 f8ef 	bl	8006dc0 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000be2:	200c      	movs	r0, #12
 8000be4:	f003 fc66 	bl	80044b4 <mem_malloc>
 8000be8:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d01f      	beq.n	8000c30 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000c08:	6939      	ldr	r1, [r7, #16]
 8000c0a:	68b8      	ldr	r0, [r7, #8]
 8000c0c:	f006 fad2 	bl	80071b4 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000c10:	490d      	ldr	r1, [pc, #52]	; (8000c48 <tcp_server_accept+0x7c>)
 8000c12:	68b8      	ldr	r0, [r7, #8]
 8000c14:	f006 fae0 	bl	80071d8 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <tcp_server_accept+0x80>)
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f006 fb20 	bl	8007260 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	490b      	ldr	r1, [pc, #44]	; (8000c50 <tcp_server_accept+0x84>)
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f006 fb55 	bl	80072d4 <tcp_poll>

    ret_err = ERR_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75fb      	strb	r3, [r7, #23]
 8000c2e:	e005      	b.n	8000c3c <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000c30:	6939      	ldr	r1, [r7, #16]
 8000c32:	68b8      	ldr	r0, [r7, #8]
 8000c34:	f000 f965 	bl	8000f02 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000c38:	23ff      	movs	r3, #255	; 0xff
 8000c3a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08000c55 	.word	0x08000c55
 8000c4c:	08000d89 	.word	0x08000d89
 8000c50:	08000dad 	.word	0x08000dad

08000c54 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <tcp_server_recv+0x20>
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <tcp_server_recv+0x124>)
 8000c6a:	22c5      	movs	r2, #197	; 0xc5
 8000c6c:	4943      	ldr	r1, [pc, #268]	; (8000d7c <tcp_server_recv+0x128>)
 8000c6e:	4844      	ldr	r0, [pc, #272]	; (8000d80 <tcp_server_recv+0x12c>)
 8000c70:	f00d fea0 	bl	800e9b4 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d116      	bne.n	8000cac <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2203      	movs	r2, #3
 8000c82:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000c8c:	69b9      	ldr	r1, [r7, #24]
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f000 f937 	bl	8000f02 <tcp_server_connection_close>
 8000c94:	e007      	b.n	8000ca6 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000c96:	493b      	ldr	r1, [pc, #236]	; (8000d84 <tcp_server_recv+0x130>)
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f006 fabf 	bl	800721c <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f000 f8db 	bl	8000e5c <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	77fb      	strb	r3, [r7, #31]
 8000caa:	e05f      	b.n	8000d6c <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00b      	beq.n	8000ccc <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f004 fc27 	bl	8005514 <pbuf_free>
    }
    ret_err = err;
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	77fb      	strb	r3, [r7, #31]
 8000cca:	e04f      	b.n	8000d6c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d110      	bne.n	8000cf6 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000ce0:	4928      	ldr	r1, [pc, #160]	; (8000d84 <tcp_server_recv+0x130>)
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f006 fa9a 	bl	800721c <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000ce8:	69b9      	ldr	r1, [r7, #24]
 8000cea:	68b8      	ldr	r0, [r7, #8]
 8000cec:	f000 f930 	bl	8000f50 <tcp_server_handle>

    ret_err = ERR_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	77fb      	strb	r3, [r7, #31]
 8000cf4:	e03a      	b.n	8000d6c <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d115      	bne.n	8000d2a <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d107      	bne.n	8000d16 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000d0c:	69b9      	ldr	r1, [r7, #24]
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f000 f91e 	bl	8000f50 <tcp_server_handle>
 8000d14:	e006      	b.n	8000d24 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f004 fd10 	bl	8005744 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	77fb      	strb	r3, [r7, #31]
 8000d28:	e020      	b.n	8000d6c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d10e      	bne.n	8000d50 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	891b      	ldrh	r3, [r3, #8]
 8000d36:	4619      	mov	r1, r3
 8000d38:	68b8      	ldr	r0, [r7, #8]
 8000d3a:	f005 fb5d 	bl	80063f8 <tcp_recved>
    es->p = NULL;
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f004 fbe5 	bl	8005514 <pbuf_free>
    ret_err = ERR_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	77fb      	strb	r3, [r7, #31]
 8000d4e:	e00d      	b.n	8000d6c <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	891b      	ldrh	r3, [r3, #8]
 8000d54:	4619      	mov	r1, r3
 8000d56:	68b8      	ldr	r0, [r7, #8]
 8000d58:	f005 fb4e 	bl	80063f8 <tcp_recved>
    es->p = NULL;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f004 fbd6 	bl	8005514 <pbuf_free>
    ret_err = ERR_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000d6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0800ff0c 	.word	0x0800ff0c
 8000d7c:	0800ff28 	.word	0x0800ff28
 8000d80:	0800ff34 	.word	0x0800ff34
 8000d84:	08000e0d 	.word	0x08000e0d

08000d88 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f003 fa22 	bl	80041e8 <mem_free>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d017      	beq.n	8000df0 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8000dc8:	490f      	ldr	r1, [pc, #60]	; (8000e08 <tcp_server_poll+0x5c>)
 8000dca:	6838      	ldr	r0, [r7, #0]
 8000dcc:	f006 fa26 	bl	800721c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f000 f842 	bl	8000e5c <tcp_server_send>
 8000dd8:	e007      	b.n	8000dea <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d103      	bne.n	8000dea <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f000 f88c 	bl	8000f02 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e004      	b.n	8000dfa <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	f005 f927 	bl	8006044 <tcp_abort>
    ret_err = ERR_ABRT;
 8000df6:	23f3      	movs	r3, #243	; 0xf3
 8000df8:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08000e0d 	.word	0x08000e0d

08000e0c <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d008      	beq.n	8000e3e <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8000e2c:	490a      	ldr	r1, [pc, #40]	; (8000e58 <tcp_server_sent+0x4c>)
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f006 f9f4 	bl	800721c <tcp_sent>
    tcp_server_send(tpcb, es);
 8000e34:	6979      	ldr	r1, [r7, #20]
 8000e36:	68b8      	ldr	r0, [r7, #8]
 8000e38:	f000 f810 	bl	8000e5c <tcp_server_send>
 8000e3c:	e007      	b.n	8000e4e <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d103      	bne.n	8000e4e <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8000e46:	6979      	ldr	r1, [r7, #20]
 8000e48:	68b8      	ldr	r0, [r7, #8]
 8000e4a:	f000 f85a 	bl	8000f02 <tcp_server_connection_close>
  }
  return ERR_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08000e0d 	.word	0x08000e0d

08000e5c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000e6a:	e036      	b.n	8000eda <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6859      	ldr	r1, [r3, #4]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	895a      	ldrh	r2, [r3, #10]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f009 f8dd 	bl	800a03c <tcp_write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d11d      	bne.n	8000eca <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	895b      	ldrh	r3, [r3, #10]
 8000e92:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fbd3 	bl	8005654 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000eae:	6938      	ldr	r0, [r7, #16]
 8000eb0:	f004 fb30 	bl	8005514 <pbuf_free>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f7      	beq.n	8000eae <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f005 fa98 	bl	80063f8 <tcp_recved>
 8000ec8:	e007      	b.n	8000eda <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d102      	bne.n	8000eda <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10b      	bne.n	8000efa <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	895a      	ldrh	r2, [r3, #10]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d9b8      	bls.n	8000e6c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f006 f950 	bl	80071b4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f006 f980 	bl	800721c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f006 f95a 	bl	80071d8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000f24:	2100      	movs	r1, #0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f006 f99a 	bl	8007260 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f006 f9cf 	bl	80072d4 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f003 f953 	bl	80041e8 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f004 ff94 	bl	8005e70 <tcp_close>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b0a5      	sub	sp, #148	; 0x94
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx;
	char buf[100];

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	60bb      	str	r3, [r7, #8]
	uint16_t inPort = tpcb->remote_port;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	8b1b      	ldrh	r3, [r3, #24]
 8000f64:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f00c fd19 	bl	800d9a4 <ip4addr_ntoa>
 8000f72:	67b8      	str	r0, [r7, #120]	; 0x78

	printf("IP Address: %s\n", remIP);
 8000f74:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f76:	483a      	ldr	r0, [pc, #232]	; (8001060 <tcp_server_handle+0x110>)
 8000f78:	f00d fd1c 	bl	800e9b4 <iprintf>
	printf("Port Used: %d\n", inPort);
 8000f7c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000f80:	4619      	mov	r1, r3
 8000f82:	4838      	ldr	r0, [pc, #224]	; (8001064 <tcp_server_handle+0x114>)
 8000f84:	f00d fd16 	bl	800e9b4 <iprintf>
	printf("Msg Length: %d\n",es->p->tot_len);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	891b      	ldrh	r3, [r3, #8]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <tcp_server_handle+0x118>)
 8000f92:	f00d fd0f 	bl	800e9b4 <iprintf>
	printf("Message: %.*s\n", es->p->tot_len , (char*) es->p->payload);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	891b      	ldrh	r3, [r3, #8]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4831      	ldr	r0, [pc, #196]	; (800106c <tcp_server_handle+0x11c>)
 8000fa8:	f00d fd04 	bl	800e9b4 <iprintf>

	strcpy(buf, es->p->payload);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00d fdfb 	bl	800ebb4 <strcpy>

	if((buf[0] == 0xAA) && (buf[1] == 0x55))
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	2baa      	cmp	r3, #170	; 0xaa
 8000fc2:	d107      	bne.n	8000fd4 <tcp_server_handle+0x84>
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	2b55      	cmp	r3, #85	; 0x55
 8000fc8:	d104      	bne.n	8000fd4 <tcp_server_handle+0x84>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <tcp_server_handle+0x120>)
 8000fd0:	f001 fd5c 	bl	8002a8c <HAL_GPIO_WritePin>

	int j = snprintf(buf, 100,
 8000fd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
		                 "IP Address: %s\n"
		                 "Port Used: %d\n"
		                 "Msg Length: %d\n"
		                 "Message: %.*s\n",
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6892      	ldr	r2, [r2, #8]
 8000fdc:	8912      	ldrh	r2, [r2, #8]
	int j = snprintf(buf, 100,
 8000fde:	4611      	mov	r1, r2
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	6892      	ldr	r2, [r2, #8]
 8000fe4:	8912      	ldrh	r2, [r2, #8]
	int j = snprintf(buf, 100,
 8000fe6:	4614      	mov	r4, r2
						 remIP, inPort, es->p->tot_len, es->p->tot_len, (char*) es->p->payload);
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	6892      	ldr	r2, [r2, #8]
 8000fec:	6852      	ldr	r2, [r2, #4]
	int j = snprintf(buf, 100,
 8000fee:	f107 000c 	add.w	r0, r7, #12
 8000ff2:	9203      	str	r2, [sp, #12]
 8000ff4:	9402      	str	r4, [sp, #8]
 8000ff6:	9101      	str	r1, [sp, #4]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <tcp_server_handle+0x124>)
 8000ffe:	2164      	movs	r1, #100	; 0x64
 8001000:	f00d fda4 	bl	800eb4c <sniprintf>
 8001004:	6778      	str	r0, [r7, #116]	; 0x74

	esTx = es;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	673b      	str	r3, [r7, #112]	; 0x70

	esTx->p->payload = (void*) buf;
 800100a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = strlen (buf);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f8f9 	bl	8000210 <strlen>
 800101e:	4602      	mov	r2, r0
 8001020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	b292      	uxth	r2, r2
 8001026:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen(buf);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f8ef 	bl	8000210 <strlen>
 8001032:	4602      	mov	r2, r0
 8001034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	b292      	uxth	r2, r2
 800103a:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 800103c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff0c 	bl	8000e5c <tcp_server_send>

	if(es->p != NULL)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <tcp_server_handle+0x106>
		pbuf_free(es->p);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fa5f 	bl	8005514 <pbuf_free>
}
 8001056:	bf00      	nop
 8001058:	3784      	adds	r7, #132	; 0x84
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}
 800105e:	bf00      	nop
 8001060:	0800ff5c 	.word	0x0800ff5c
 8001064:	0800ff6c 	.word	0x0800ff6c
 8001068:	0800ff7c 	.word	0x0800ff7c
 800106c:	0800ff8c 	.word	0x0800ff8c
 8001070:	40020400 	.word	0x40020400
 8001074:	0800ff9c 	.word	0x0800ff9c

08001078 <ethernetif_notify_conn_changed>:

void ethernetif_notify_conn_changed(struct netif *netif)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	if(netif_is_link_up(netif))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <ethernetif_notify_conn_changed+0x2e>
	{
		netif_set_up(netif);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f003 fdbc 	bl	8004c10 <netif_set_up>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <ethernetif_notify_conn_changed+0x48>)
 80010a0:	f001 fcf4 	bl	8002a8c <HAL_GPIO_WritePin>
	else
	{
		netif_set_down(netif);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 80010a4:	e008      	b.n	80010b8 <ethernetif_notify_conn_changed+0x40>
		netif_set_down(netif);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f003 fe1e 	bl	8004ce8 <netif_set_down>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <ethernetif_notify_conn_changed+0x48>)
 80010b4:	f001 fcea 	bl	8002a8c <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020400 	.word	0x40020400

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff fd31 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f00d fbfb 	bl	800e8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fa65 	bl	80005c4 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001108:	08012cec 	.word	0x08012cec
  ldr r2, =_sbss
 800110c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001110:	20008ac8 	.word	0x20008ac8

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f94f 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fbc4 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f967 	bl	8001436 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f92f 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	2000009c 	.word	0x2000009c

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000009c 	.word	0x2000009c

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <__NVIC_SetPriorityGrouping>:
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	4313      	orrs	r3, r2
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00
 8001270:	05fa0000 	.word	0x05fa0000

08001274 <__NVIC_GetPriorityGrouping>:
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff29 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff3e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff31 	bl	8001290 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001460:	4ba0      	ldr	r3, [pc, #640]	; (80016e4 <HAL_ETH_Init+0x294>)
 8001462:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e180      	b.n	8001778 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f002 f956 	bl	800373c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b95      	ldr	r3, [pc, #596]	; (80016e8 <HAL_ETH_Init+0x298>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_ETH_Init+0x298>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6453      	str	r3, [r2, #68]	; 0x44
 800149c:	4b92      	ldr	r3, [pc, #584]	; (80016e8 <HAL_ETH_Init+0x298>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014a8:	4b90      	ldr	r3, [pc, #576]	; (80016ec <HAL_ETH_Init+0x29c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a8f      	ldr	r2, [pc, #572]	; (80016ec <HAL_ETH_Init+0x29c>)
 80014ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014b4:	4b8d      	ldr	r3, [pc, #564]	; (80016ec <HAL_ETH_Init+0x29c>)
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	498b      	ldr	r1, [pc, #556]	; (80016ec <HAL_ETH_Init+0x29c>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014d8:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014da:	f7ff fe77 	bl	80011cc <HAL_GetTick>
 80014de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014e0:	e011      	b.n	8001506 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014e2:	f7ff fe73 	bl	80011cc <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f0:	d909      	bls.n	8001506 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e138      	b.n	8001778 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e4      	bne.n	80014e2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f023 031c 	bic.w	r3, r3, #28
 8001526:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001528:	f001 ffca 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 800152c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_ETH_Init+0x2a0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d908      	bls.n	8001548 <HAL_ETH_Init+0xf8>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_ETH_Init+0x2a4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d804      	bhi.n	8001548 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e027      	b.n	8001598 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_ETH_Init+0x2a4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d908      	bls.n	8001562 <HAL_ETH_Init+0x112>
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	4a64      	ldr	r2, [pc, #400]	; (80016e4 <HAL_ETH_Init+0x294>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d204      	bcs.n	8001562 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f043 030c 	orr.w	r3, r3, #12
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e01a      	b.n	8001598 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4a5f      	ldr	r2, [pc, #380]	; (80016e4 <HAL_ETH_Init+0x294>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d303      	bcc.n	8001572 <HAL_ETH_Init+0x122>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4a62      	ldr	r2, [pc, #392]	; (80016f8 <HAL_ETH_Init+0x2a8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d911      	bls.n	8001596 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <HAL_ETH_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d908      	bls.n	800158c <HAL_ETH_Init+0x13c>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_ETH_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d804      	bhi.n	800158c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e005      	b.n	8001598 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e000      	b.n	8001598 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001596:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fc16 	bl	8001dd8 <HAL_ETH_WritePHYRegister>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fdcb 	bl	8002154 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0d6      	b.n	8001778 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015ca:	20ff      	movs	r0, #255	; 0xff
 80015cc:	f7ff fe0a 	bl	80011e4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a4 	beq.w	8001722 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015da:	f7ff fdf7 	bl	80011cc <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	461a      	mov	r2, r3
 80015e6:	2101      	movs	r1, #1
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb8d 	bl	8001d08 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015ee:	f7ff fded 	bl	80011cc <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d90f      	bls.n	8001620 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fda4 	bl	8002154 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0ab      	b.n	8001778 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0da      	beq.n	80015e0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800162a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fbd1 	bl	8001dd8 <HAL_ETH_WritePHYRegister>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fd86 	bl	8002154 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001650:	2301      	movs	r3, #1
 8001652:	e091      	b.n	8001778 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fdba 	bl	80011cc <HAL_GetTick>
 8001658:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	461a      	mov	r2, r3
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fb50 	bl	8001d08 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001668:	f7ff fdb0 	bl	80011cc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d90f      	bls.n	800169a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fd67 	bl	8002154 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e06e      	b.n	8001778 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0da      	beq.n	800165a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	461a      	mov	r2, r3
 80016aa:	2110      	movs	r1, #16
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fb2b 	bl	8001d08 <HAL_ETH_ReadPHYRegister>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016bc:	6939      	ldr	r1, [r7, #16]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fd48 	bl	8002154 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016cc:	2301      	movs	r3, #1
 80016ce:	e053      	b.n	8001778 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	e010      	b.n	8001706 <HAL_ETH_Init+0x2b6>
 80016e4:	03938700 	.word	0x03938700
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	01312cff 	.word	0x01312cff
 80016f4:	02160ebf 	.word	0x02160ebf
 80016f8:	05f5e0ff 	.word	0x05f5e0ff
 80016fc:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	e026      	b.n	8001766 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e021      	b.n	8001766 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001732:	4313      	orrs	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fb4c 	bl	8001dd8 <HAL_ETH_WritePHYRegister>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800174a:	6939      	ldr	r1, [r7, #16]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fd01 	bl	8002154 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00c      	b.n	8001778 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800175e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001762:	f7ff fd3f 	bl	80011e4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fcf3 	bl	8002154 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_ETH_DMATxDescListInit+0x20>
 800179c:	2302      	movs	r3, #2
 800179e:	e051      	b.n	8001844 <HAL_ETH_DMATxDescListInit+0xc4>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e030      	b.n	800181e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017cc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d208      	bcs.n	8001812 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4413      	add	r3, r2
 800180a:	461a      	mov	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	e002      	b.n	8001818 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3ca      	bcc.n	80017bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001830:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ETH_DMARxDescListInit+0x20>
 800186c:	2302      	movs	r3, #2
 800186e:	e055      	b.n	800191c <HAL_ETH_DMARxDescListInit+0xcc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e034      	b.n	80018f6 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	4413      	add	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018a4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d208      	bcs.n	80018ea <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	015b      	lsls	r3, r3, #5
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	461a      	mov	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	e002      	b.n	80018f0 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3c6      	bcc.n	800188c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001908:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ETH_TransmitFrame+0x24>
 8001948:	2302      	movs	r3, #2
 800194a:	e0cc      	b.n	8001ae6 <HAL_ETH_TransmitFrame+0x1be>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001972:	2301      	movs	r3, #1
 8001974:	e0b7      	b.n	8001ae6 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da09      	bge.n	8001994 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2212      	movs	r2, #18
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0a8      	b.n	8001ae6 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800199a:	4293      	cmp	r3, r2
 800199c:	d915      	bls.n	80019ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_ETH_TransmitFrame+0x1cc>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <HAL_ETH_TransmitFrame+0x1cc>)
 80019ae:	fba3 1302 	umull	r1, r3, r3, r2
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e001      	b.n	80019ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d11c      	bne.n	8001a0e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	461a      	mov	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a0c:	e04b      	b.n	8001aa6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e044      	b.n	8001a9e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a22:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a38:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a42:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d116      	bne.n	8001a7c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a5c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a62:	fb03 f202 	mul.w	r2, r3, r2
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a6e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a7a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3b6      	bcc.n	8001a14 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	ac02b00b 	.word	0xac02b00b
 8001af8:	fffffa0c 	.word	0xfffffa0c

08001afc <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ETH_GetReceivedFrame+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e070      	b.n	8001bf8 <HAL_ETH_GetReceivedFrame+0xfc>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db5a      	blt.n	8001be6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d030      	beq.n	8001ba0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d103      	bne.n	8001b58 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b6c:	3b04      	subs	r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e02b      	b.n	8001bf8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8001bce:	e00a      	b.n	8001be6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d112      	bne.n	8001c44 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f85e 	bl	8001ce0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c42:	e01a      	b.n	8001c7a <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d111      	bne.n	8001c7a <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f838 	bl	8001ccc <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	461a      	mov	r2, r3
 8001c66:	2301      	movs	r3, #1
 8001c68:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	461a      	mov	r2, r3
 8001c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c88:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9c:	d112      	bne.n	8001cc4 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f828 	bl	8001cf4 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	461a      	mov	r2, r3
 8001cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb2:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	460b      	mov	r3, r1
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b82      	cmp	r3, #130	; 0x82
 8001d28:	d101      	bne.n	8001d2e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e050      	b.n	8001dd0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2282      	movs	r2, #130	; 0x82
 8001d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 031c 	and.w	r3, r3, #28
 8001d44:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8a1b      	ldrh	r3, [r3, #16]
 8001d4a:	02db      	lsls	r3, r3, #11
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	019b      	lsls	r3, r3, #6
 8001d58:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d7a:	f7ff fa27 	bl	80011cc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d80:	e015      	b.n	8001dae <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d82:	f7ff fa23 	bl	80011cc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d309      	bcc.n	8001da6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e014      	b.n	8001dd0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e4      	bne.n	8001d82 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	460b      	mov	r3, r1
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b42      	cmp	r3, #66	; 0x42
 8001df8:	d101      	bne.n	8001dfe <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e04e      	b.n	8001e9c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2242      	movs	r2, #66	; 0x42
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 031c 	and.w	r3, r3, #28
 8001e14:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8a1b      	ldrh	r3, [r3, #16]
 8001e1a:	02db      	lsls	r3, r3, #11
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e24:	897b      	ldrh	r3, [r7, #10]
 8001e26:	019b      	lsls	r3, r3, #6
 8001e28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff f9ba 	bl	80011cc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e5a:	e015      	b.n	8001e88 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e5c:	f7ff f9b6 	bl	80011cc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d309      	bcc.n	8001e80 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e00d      	b.n	8001e9c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e4      	bne.n	8001e5c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ETH_Start+0x16>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01f      	b.n	8001efa <HAL_ETH_Start+0x56>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb40 	bl	8002550 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fb77 	bl	80025c4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fc06 	bl	80026e8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fbab 	bl	8002638 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fbd4 	bl	8002690 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ETH_Stop+0x16>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e01f      	b.n	8001f58 <HAL_ETH_Stop+0x56>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fb9b 	bl	8002664 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fbc4 	bl	80026bc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb62 	bl	80025fe <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fbd4 	bl	80026e8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fb22 	bl	800258a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_ETH_ConfigMAC+0x1c>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0e4      	b.n	8002146 <HAL_ETH_ConfigMAC+0x1e6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <HAL_ETH_ConfigMAC+0x1f0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fac:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001fb2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001fb8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001fbe:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001fc4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001fca:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fd0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001fd6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fdc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fe2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fe8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fee:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f8ec 	bl	80011e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800201c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002022:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002028:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800202e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002034:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800203a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002046:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002048:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff f8c6 	bl	80011e4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002068:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002072:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002090:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002096:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800209c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80020a2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020a8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7ff f88f 	bl	80011e4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff f87c 	bl	80011e4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	61da      	str	r2, [r3, #28]
 80020f4:	e01e      	b.n	8002134 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002104:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff f85c 	bl	80011e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	ff20810f 	.word	0xff20810f

08002154 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0b0      	sub	sp, #192	; 0xc0
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002170:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002178:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002182:	2300      	movs	r3, #0
 8002184:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	663b      	str	r3, [r7, #96]	; 0x60
 80021a0:	e001      	b.n	80021a6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021aa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021b0:	2300      	movs	r3, #0
 80021b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002228:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222c:	4ba9      	ldr	r3, [pc, #676]	; (80024d4 <ETH_MACDMAConfig+0x380>)
 800222e:	4013      	ands	r3, r2
 8002230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002234:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002238:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800223a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800223c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002240:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002246:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800224a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800224c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800224e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002254:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002258:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800225a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800225c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800225e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002260:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002264:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002268:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800226a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800227c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002288:	2001      	movs	r0, #1
 800228a:	f7fe ffab 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002296:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002298:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800229a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800229c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800229e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022a0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022a6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022ac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022b2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022b8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022c4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022c6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7fe ff86 	bl	80011e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022ea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022f4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002304:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002308:	4013      	ands	r3, r2
 800230a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800230e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002312:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002314:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002318:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800231a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800231e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002324:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800232a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800232c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002330:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002344:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe ff47 	bl	80011e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800235e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002360:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002364:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe ff32 	bl	80011e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002388:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800239c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023ae:	2304      	movs	r3, #4
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <ETH_MACDMAConfig+0x384>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023f0:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023f2:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023f4:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023f6:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023f8:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023fa:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023fc:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023fe:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002400:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002402:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002404:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002406:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002408:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800240c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002410:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	461a      	mov	r2, r3
 8002426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800242a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800243a:	2001      	movs	r0, #1
 800243c:	f7fe fed2 	bl	80011e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	461a      	mov	r2, r3
 800244a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800244e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002454:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002458:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800245c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002460:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002464:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002466:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800246a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002478:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002488:	2001      	movs	r0, #1
 800248a:	f7fe feab 	bl	80011e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	461a      	mov	r2, r3
 8002498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800249c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10b      	bne.n	80024be <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ae:	69d9      	ldr	r1, [r3, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <ETH_MACDMAConfig+0x388>)
 80024b6:	430b      	orrs	r3, r1
 80024b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024bc:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f80a 	bl	80024e0 <ETH_MACAddressConfig>
}
 80024cc:	bf00      	nop
 80024ce:	37c0      	adds	r7, #192	; 0xc0
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	ff20810f 	.word	0xff20810f
 80024d8:	f8de3f23 	.word	0xf8de3f23
 80024dc:	00010040 	.word	0x00010040

080024e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3305      	adds	r3, #5
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	3204      	adds	r2, #4
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <ETH_MACAddressConfig+0x68>)
 8002502:	4413      	add	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3303      	adds	r3, #3
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3302      	adds	r3, #2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3301      	adds	r3, #1
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4313      	orrs	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <ETH_MACAddressConfig+0x6c>)
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40028040 	.word	0x40028040
 800254c:	40028044 	.word	0x40028044

08002550 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0208 	orr.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002574:	2001      	movs	r0, #1
 8002576:	f7fe fe35 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7fe fe18 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0204 	orr.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7fe fdfb 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0204 	bic.w	r2, r2, #4
 8002618:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002622:	2001      	movs	r0, #1
 8002624:	f7fe fdde 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002656:	6193      	str	r3, [r2, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002682:	6193      	str	r3, [r2, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ae:	6193      	str	r3, [r2, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	f023 0302 	bic.w	r3, r3, #2
 80026d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026da:	6193      	str	r3, [r2, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800270a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002718:	2001      	movs	r0, #1
 800271a:	f7fe fd63 	bl	80011e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002728:	6193      	str	r3, [r2, #24]
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e175      	b.n	8002a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8164 	bne.w	8002a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d005      	beq.n	800278a <HAL_GPIO_Init+0x56>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d130      	bne.n	80027ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0201 	and.w	r2, r3, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d017      	beq.n	8002828 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80be 	beq.w	8002a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028d6:	4a61      	ldr	r2, [pc, #388]	; (8002a5c <HAL_GPIO_Init+0x328>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_GPIO_Init+0x32c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d037      	beq.n	8002972 <HAL_GPIO_Init+0x23e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_GPIO_Init+0x330>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d031      	beq.n	800296e <HAL_GPIO_Init+0x23a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a56      	ldr	r2, [pc, #344]	; (8002a68 <HAL_GPIO_Init+0x334>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x236>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a55      	ldr	r2, [pc, #340]	; (8002a6c <HAL_GPIO_Init+0x338>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x232>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a54      	ldr	r2, [pc, #336]	; (8002a70 <HAL_GPIO_Init+0x33c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a53      	ldr	r2, [pc, #332]	; (8002a74 <HAL_GPIO_Init+0x340>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x22a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_GPIO_Init+0x344>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x226>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <HAL_GPIO_Init+0x348>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x222>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a50      	ldr	r2, [pc, #320]	; (8002a80 <HAL_GPIO_Init+0x34c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4f      	ldr	r2, [pc, #316]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x21a>
 800294a:	2309      	movs	r3, #9
 800294c:	e012      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800294e:	230a      	movs	r3, #10
 8002950:	e010      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002952:	2308      	movs	r3, #8
 8002954:	e00e      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002956:	2307      	movs	r3, #7
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295a:	2306      	movs	r3, #6
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x328>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_GPIO_Init+0x354>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_GPIO_Init+0x354>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae86 	bls.w	8002754 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40021c00 	.word	0x40021c00
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40022400 	.word	0x40022400
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	400b      	ands	r3, r1
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b22:	f7fe fb53 	bl	80011cc <HAL_GetTick>
 8002b26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b28:	e009      	b.n	8002b3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b2a:	f7fe fb4f 	bl	80011cc <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b38:	d901      	bls.n	8002b3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e022      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7fe fb38 	bl	80011cc <HAL_GetTick>
 8002b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b5e:	e009      	b.n	8002b74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b60:	f7fe fb34 	bl	80011cc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b6e:	d901      	bls.n	8002b74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e007      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b80:	d1ee      	bne.n	8002b60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e291      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc4:	4b93      	ldr	r3, [pc, #588]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62>
 8002bd0:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b8d      	ldr	r3, [pc, #564]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x130>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e26b      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x7a>
 8002c00:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x9c>
 8002c16:	4b7f      	ldr	r3, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7e      	ldr	r2, [pc, #504]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6b      	ldr	r2, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe faaa 	bl	80011cc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe faa6 	bl	80011cc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e21f      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fa96 	bl	80011cc <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fa92 	bl	80011cc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e20b      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b57      	ldr	r3, [pc, #348]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x110>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d069      	beq.n	8002da6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x190>
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1df      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	493d      	ldr	r1, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e040      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fa48 	bl	80011cc <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fa44 	bl	80011cc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1bd      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4929      	ldr	r1, [pc, #164]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
 8002d72:	e018      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa24 	bl	80011cc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe fa20 	bl	80011cc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e199      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d038      	beq.n	8002e24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa01 	bl	80011cc <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe f9fd 	bl	80011cc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e176      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x23a>
 8002dec:	e01a      	b.n	8002e24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f9e7 	bl	80011cc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f9e3 	bl	80011cc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d903      	bls.n	8002e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e15c      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
 8002e14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a4 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe f9ab 	bl	80011cc <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe f9a7 	bl	80011cc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e120      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x31a>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x33c>
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x35e>
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f95b 	bl	80011cc <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f957 	bl	80011cc <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0ce      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x386>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe f945 	bl	80011cc <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe f941 	bl	80011cc <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80a4 	beq.w	80030cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d06b      	beq.n	8003068 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d149      	bne.n	800302c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f912 	bl	80011cc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f90e 	bl	80011cc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e087      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ff6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe f8e2 	bl	80011cc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f8de 	bl	80011cc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e057      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x478>
 800302a:	e04f      	b.n	80030cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe f8c8 	bl	80011cc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe f8c4 	bl	80011cc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e03d      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x4ac>
 800305e:	e035      	b.n	80030cc <HAL_RCC_OscConfig+0x538>
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x544>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d028      	beq.n	80030c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	4965      	ldr	r1, [pc, #404]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800315e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d040      	beq.n	8003200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e073      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4936      	ldr	r1, [pc, #216]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fd fffc 	bl	80011cc <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fd fff8 	bl	80011cc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e053      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4922      	ldr	r1, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1d0>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd ff58 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	08012a7c 	.word	0x08012a7c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b094      	sub	sp, #80	; 0x50
 80032ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
 80032c0:	2300      	movs	r3, #0
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032cc:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x40>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	f200 80e1 	bhi.w	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x3a>
 80032e6:	e0db      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ec:	e0db      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_GetSysClockFreq+0x208>)
 80032f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f2:	e0d8      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032fe:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d063      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	2200      	movs	r2, #0
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
 8003314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003338:	0150      	lsls	r0, r2, #5
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4621      	mov	r1, r4
 8003340:	1a51      	subs	r1, r2, r1
 8003342:	6139      	str	r1, [r7, #16]
 8003344:	4629      	mov	r1, r5
 8003346:	eb63 0301 	sbc.w	r3, r3, r1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003358:	4659      	mov	r1, fp
 800335a:	018b      	lsls	r3, r1, #6
 800335c:	4651      	mov	r1, sl
 800335e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003362:	4651      	mov	r1, sl
 8003364:	018a      	lsls	r2, r1, #6
 8003366:	4651      	mov	r1, sl
 8003368:	ebb2 0801 	subs.w	r8, r2, r1
 800336c:	4659      	mov	r1, fp
 800336e:	eb63 0901 	sbc.w	r9, r3, r1
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800337e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003386:	4690      	mov	r8, r2
 8003388:	4699      	mov	r9, r3
 800338a:	4623      	mov	r3, r4
 800338c:	eb18 0303 	adds.w	r3, r8, r3
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	462b      	mov	r3, r5
 8003394:	eb49 0303 	adc.w	r3, r9, r3
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033a6:	4629      	mov	r1, r5
 80033a8:	024b      	lsls	r3, r1, #9
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b0:	4621      	mov	r1, r4
 80033b2:	024a      	lsls	r2, r1, #9
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ba:	2200      	movs	r2, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c4:	f7fc ff7c 	bl	80002c0 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	e058      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	4611      	mov	r1, r2
 80033de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0159      	lsls	r1, r3, #5
 80033fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fe:	0150      	lsls	r0, r2, #5
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4641      	mov	r1, r8
 8003406:	ebb2 0a01 	subs.w	sl, r2, r1
 800340a:	4649      	mov	r1, r9
 800340c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800341c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003424:	ebb2 040a 	subs.w	r4, r2, sl
 8003428:	eb63 050b 	sbc.w	r5, r3, fp
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345a:	4629      	mov	r1, r5
 800345c:	028b      	lsls	r3, r1, #10
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003464:	4621      	mov	r1, r4
 8003466:	028a      	lsls	r2, r1, #10
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346e:	2200      	movs	r2, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	61fa      	str	r2, [r7, #28]
 8003474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003478:	f7fc ff22 	bl	80002c0 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349e:	e002      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3750      	adds	r7, #80	; 0x50
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80034de:	4b8d      	ldr	r3, [pc, #564]	; (8003714 <MX_LWIP_Init+0x23c>)
 80034e0:	22c0      	movs	r2, #192	; 0xc0
 80034e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80034e4:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <MX_LWIP_Init+0x23c>)
 80034e6:	22a8      	movs	r2, #168	; 0xa8
 80034e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 29;
 80034ea:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <MX_LWIP_Init+0x23c>)
 80034ec:	221d      	movs	r2, #29
 80034ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 80034f0:	4b88      	ldr	r3, [pc, #544]	; (8003714 <MX_LWIP_Init+0x23c>)
 80034f2:	227b      	movs	r2, #123	; 0x7b
 80034f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <MX_LWIP_Init+0x240>)
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80034fc:	4b86      	ldr	r3, [pc, #536]	; (8003718 <MX_LWIP_Init+0x240>)
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003502:	4b85      	ldr	r3, [pc, #532]	; (8003718 <MX_LWIP_Init+0x240>)
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003508:	4b83      	ldr	r3, [pc, #524]	; (8003718 <MX_LWIP_Init+0x240>)
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800350e:	4b83      	ldr	r3, [pc, #524]	; (800371c <MX_LWIP_Init+0x244>)
 8003510:	22c0      	movs	r2, #192	; 0xc0
 8003512:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <MX_LWIP_Init+0x244>)
 8003516:	22a8      	movs	r2, #168	; 0xa8
 8003518:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 29;
 800351a:	4b80      	ldr	r3, [pc, #512]	; (800371c <MX_LWIP_Init+0x244>)
 800351c:	221d      	movs	r2, #29
 800351e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <MX_LWIP_Init+0x244>)
 8003522:	2201      	movs	r2, #1
 8003524:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003526:	f000 fd0b 	bl	8003f40 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800352a:	4b7a      	ldr	r3, [pc, #488]	; (8003714 <MX_LWIP_Init+0x23c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	061a      	lsls	r2, r3, #24
 8003530:	4b78      	ldr	r3, [pc, #480]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	4b76      	ldr	r3, [pc, #472]	; (8003714 <MX_LWIP_Init+0x23c>)
 800353a:	789b      	ldrb	r3, [r3, #2]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	4313      	orrs	r3, r2
 8003540:	4a74      	ldr	r2, [pc, #464]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003542:	78d2      	ldrb	r2, [r2, #3]
 8003544:	4313      	orrs	r3, r2
 8003546:	061a      	lsls	r2, r3, #24
 8003548:	4b72      	ldr	r3, [pc, #456]	; (8003714 <MX_LWIP_Init+0x23c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	0619      	lsls	r1, r3, #24
 800354e:	4b71      	ldr	r3, [pc, #452]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	4319      	orrs	r1, r3
 8003556:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	430b      	orrs	r3, r1
 800355e:	496d      	ldr	r1, [pc, #436]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003560:	78c9      	ldrb	r1, [r1, #3]
 8003562:	430b      	orrs	r3, r1
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800356a:	431a      	orrs	r2, r3
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <MX_LWIP_Init+0x23c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	0619      	lsls	r1, r3, #24
 8003572:	4b68      	ldr	r3, [pc, #416]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	4319      	orrs	r1, r3
 800357a:	4b66      	ldr	r3, [pc, #408]	; (8003714 <MX_LWIP_Init+0x23c>)
 800357c:	789b      	ldrb	r3, [r3, #2]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	430b      	orrs	r3, r1
 8003582:	4964      	ldr	r1, [pc, #400]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003584:	78c9      	ldrb	r1, [r1, #3]
 8003586:	430b      	orrs	r3, r1
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800358e:	431a      	orrs	r2, r3
 8003590:	4b60      	ldr	r3, [pc, #384]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	0619      	lsls	r1, r3, #24
 8003596:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <MX_LWIP_Init+0x23c>)
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	4319      	orrs	r1, r3
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <MX_LWIP_Init+0x23c>)
 80035a0:	789b      	ldrb	r3, [r3, #2]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	430b      	orrs	r3, r1
 80035a6:	495b      	ldr	r1, [pc, #364]	; (8003714 <MX_LWIP_Init+0x23c>)
 80035a8:	78c9      	ldrb	r1, [r1, #3]
 80035aa:	430b      	orrs	r3, r1
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	4313      	orrs	r3, r2
 80035b0:	4a5b      	ldr	r2, [pc, #364]	; (8003720 <MX_LWIP_Init+0x248>)
 80035b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80035b4:	4b58      	ldr	r3, [pc, #352]	; (8003718 <MX_LWIP_Init+0x240>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	061a      	lsls	r2, r3, #24
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <MX_LWIP_Init+0x240>)
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	4b55      	ldr	r3, [pc, #340]	; (8003718 <MX_LWIP_Init+0x240>)
 80035c4:	789b      	ldrb	r3, [r3, #2]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	4313      	orrs	r3, r2
 80035ca:	4a53      	ldr	r2, [pc, #332]	; (8003718 <MX_LWIP_Init+0x240>)
 80035cc:	78d2      	ldrb	r2, [r2, #3]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	061a      	lsls	r2, r3, #24
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <MX_LWIP_Init+0x240>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0619      	lsls	r1, r3, #24
 80035d8:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <MX_LWIP_Init+0x240>)
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	4319      	orrs	r1, r3
 80035e0:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <MX_LWIP_Init+0x240>)
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	430b      	orrs	r3, r1
 80035e8:	494b      	ldr	r1, [pc, #300]	; (8003718 <MX_LWIP_Init+0x240>)
 80035ea:	78c9      	ldrb	r1, [r1, #3]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035f4:	431a      	orrs	r2, r3
 80035f6:	4b48      	ldr	r3, [pc, #288]	; (8003718 <MX_LWIP_Init+0x240>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	0619      	lsls	r1, r3, #24
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <MX_LWIP_Init+0x240>)
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4319      	orrs	r1, r3
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <MX_LWIP_Init+0x240>)
 8003606:	789b      	ldrb	r3, [r3, #2]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	430b      	orrs	r3, r1
 800360c:	4942      	ldr	r1, [pc, #264]	; (8003718 <MX_LWIP_Init+0x240>)
 800360e:	78c9      	ldrb	r1, [r1, #3]
 8003610:	430b      	orrs	r3, r1
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003618:	431a      	orrs	r2, r3
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <MX_LWIP_Init+0x240>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	0619      	lsls	r1, r3, #24
 8003620:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <MX_LWIP_Init+0x240>)
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	4319      	orrs	r1, r3
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <MX_LWIP_Init+0x240>)
 800362a:	789b      	ldrb	r3, [r3, #2]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	430b      	orrs	r3, r1
 8003630:	4939      	ldr	r1, [pc, #228]	; (8003718 <MX_LWIP_Init+0x240>)
 8003632:	78c9      	ldrb	r1, [r1, #3]
 8003634:	430b      	orrs	r3, r1
 8003636:	0e1b      	lsrs	r3, r3, #24
 8003638:	4313      	orrs	r3, r2
 800363a:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <MX_LWIP_Init+0x24c>)
 800363c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <MX_LWIP_Init+0x244>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	061a      	lsls	r2, r3, #24
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <MX_LWIP_Init+0x244>)
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	431a      	orrs	r2, r3
 800364c:	4b33      	ldr	r3, [pc, #204]	; (800371c <MX_LWIP_Init+0x244>)
 800364e:	789b      	ldrb	r3, [r3, #2]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4313      	orrs	r3, r2
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <MX_LWIP_Init+0x244>)
 8003656:	78d2      	ldrb	r2, [r2, #3]
 8003658:	4313      	orrs	r3, r2
 800365a:	061a      	lsls	r2, r3, #24
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <MX_LWIP_Init+0x244>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	0619      	lsls	r1, r3, #24
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <MX_LWIP_Init+0x244>)
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	4319      	orrs	r1, r3
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <MX_LWIP_Init+0x244>)
 800366c:	789b      	ldrb	r3, [r3, #2]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	430b      	orrs	r3, r1
 8003672:	492a      	ldr	r1, [pc, #168]	; (800371c <MX_LWIP_Init+0x244>)
 8003674:	78c9      	ldrb	r1, [r1, #3]
 8003676:	430b      	orrs	r3, r1
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800367e:	431a      	orrs	r2, r3
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <MX_LWIP_Init+0x244>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	0619      	lsls	r1, r3, #24
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <MX_LWIP_Init+0x244>)
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	4319      	orrs	r1, r3
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <MX_LWIP_Init+0x244>)
 8003690:	789b      	ldrb	r3, [r3, #2]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	430b      	orrs	r3, r1
 8003696:	4921      	ldr	r1, [pc, #132]	; (800371c <MX_LWIP_Init+0x244>)
 8003698:	78c9      	ldrb	r1, [r1, #3]
 800369a:	430b      	orrs	r3, r1
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80036a2:	431a      	orrs	r2, r3
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <MX_LWIP_Init+0x244>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	0619      	lsls	r1, r3, #24
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <MX_LWIP_Init+0x244>)
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	4319      	orrs	r1, r3
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <MX_LWIP_Init+0x244>)
 80036b4:	789b      	ldrb	r3, [r3, #2]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	430b      	orrs	r3, r1
 80036ba:	4918      	ldr	r1, [pc, #96]	; (800371c <MX_LWIP_Init+0x244>)
 80036bc:	78c9      	ldrb	r1, [r1, #3]
 80036be:	430b      	orrs	r3, r1
 80036c0:	0e1b      	lsrs	r3, r3, #24
 80036c2:	4313      	orrs	r3, r2
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <MX_LWIP_Init+0x250>)
 80036c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_LWIP_Init+0x254>)
 80036ca:	9302      	str	r3, [sp, #8]
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <MX_LWIP_Init+0x258>)
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2300      	movs	r3, #0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_LWIP_Init+0x250>)
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <MX_LWIP_Init+0x24c>)
 80036d8:	4911      	ldr	r1, [pc, #68]	; (8003720 <MX_LWIP_Init+0x248>)
 80036da:	4816      	ldr	r0, [pc, #88]	; (8003734 <MX_LWIP_Init+0x25c>)
 80036dc:	f001 f8d6 	bl	800488c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036e0:	4814      	ldr	r0, [pc, #80]	; (8003734 <MX_LWIP_Init+0x25c>)
 80036e2:	f001 fa85 	bl	8004bf0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <MX_LWIP_Init+0x25c>)
 80036e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036f8:	480e      	ldr	r0, [pc, #56]	; (8003734 <MX_LWIP_Init+0x25c>)
 80036fa:	f001 fa89 	bl	8004c10 <netif_set_up>
 80036fe:	e002      	b.n	8003706 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <MX_LWIP_Init+0x25c>)
 8003702:	f001 faf1 	bl	8004ce8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003706:	490c      	ldr	r1, [pc, #48]	; (8003738 <MX_LWIP_Init+0x260>)
 8003708:	480a      	ldr	r0, [pc, #40]	; (8003734 <MX_LWIP_Init+0x25c>)
 800370a:	f001 fb83 	bl	8004e14 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200000e0 	.word	0x200000e0
 8003718:	200000e4 	.word	0x200000e4
 800371c:	200000e8 	.word	0x200000e8
 8003720:	200000d4 	.word	0x200000d4
 8003724:	200000d8 	.word	0x200000d8
 8003728:	200000dc 	.word	0x200000dc
 800372c:	0800e741 	.word	0x0800e741
 8003730:	08003cf9 	.word	0x08003cf9
 8003734:	200000a0 	.word	0x200000a0
 8003738:	08003ded 	.word	0x08003ded

0800373c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_ETH_MspInit+0x168>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f040 809e 	bne.w	800389c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003760:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 8003766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800376a:	6313      	str	r3, [r2, #48]	; 0x30
 800376c:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 800377e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 8003796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800379a:	6313      	str	r3, [r2, #48]	; 0x30
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	4a3e      	ldr	r2, [pc, #248]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6313      	str	r3, [r2, #48]	; 0x30
 80037b4:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6313      	str	r3, [r2, #48]	; 0x30
 80037cc:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fa:	6313      	str	r3, [r2, #48]	; 0x30
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_ETH_MspInit+0x16c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003808:	2332      	movs	r3, #50	; 0x32
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003814:	2303      	movs	r3, #3
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003818:	230b      	movs	r3, #11
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003820:	4619      	mov	r1, r3
 8003822:	4822      	ldr	r0, [pc, #136]	; (80038ac <HAL_ETH_MspInit+0x170>)
 8003824:	f7fe ff86 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003828:	2386      	movs	r3, #134	; 0x86
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382c:	2302      	movs	r3, #2
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003834:	2303      	movs	r3, #3
 8003836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003838:	230b      	movs	r3, #11
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	4619      	mov	r1, r3
 8003842:	481b      	ldr	r0, [pc, #108]	; (80038b0 <HAL_ETH_MspInit+0x174>)
 8003844:	f7fe ff76 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800385a:	230b      	movs	r3, #11
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800385e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003862:	4619      	mov	r1, r3
 8003864:	4813      	ldr	r0, [pc, #76]	; (80038b4 <HAL_ETH_MspInit+0x178>)
 8003866:	f7fe ff65 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800386a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003878:	2303      	movs	r3, #3
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387c:	230b      	movs	r3, #11
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003884:	4619      	mov	r1, r3
 8003886:	480c      	ldr	r0, [pc, #48]	; (80038b8 <HAL_ETH_MspInit+0x17c>)
 8003888:	f7fe ff54 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800388c:	2200      	movs	r2, #0
 800388e:	2100      	movs	r1, #0
 8003890:	203d      	movs	r0, #61	; 0x3d
 8003892:	f7fd fda6 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003896:	203d      	movs	r0, #61	; 0x3d
 8003898:	f7fd fdbf 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800389c:	bf00      	nop
 800389e:	3738      	adds	r7, #56	; 0x38
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40028000 	.word	0x40028000
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40020800 	.word	0x40020800
 80038b0:	40020000 	.word	0x40020000
 80038b4:	40020400 	.word	0x40020400
 80038b8:	40021800 	.word	0x40021800

080038bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038c8:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <low_level_init+0x144>)
 80038ca:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <low_level_init+0x148>)
 80038cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038ce:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <low_level_init+0x144>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <low_level_init+0x144>)
 80038d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038da:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <low_level_init+0x144>)
 80038de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <low_level_init+0x144>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80038ea:	2300      	movs	r3, #0
 80038ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80038f2:	23e1      	movs	r3, #225	; 0xe1
 80038f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80038fa:	2300      	movs	r3, #0
 80038fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80038fe:	2300      	movs	r3, #0
 8003900:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003902:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <low_level_init+0x144>)
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <low_level_init+0x144>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <low_level_init+0x144>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <low_level_init+0x144>)
 8003918:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800391c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800391e:	4838      	ldr	r0, [pc, #224]	; (8003a00 <low_level_init+0x144>)
 8003920:	f7fd fd96 	bl	8001450 <HAL_ETH_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	b2da      	uxtb	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003940:	2304      	movs	r3, #4
 8003942:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <low_level_init+0x14c>)
 8003944:	4931      	ldr	r1, [pc, #196]	; (8003a0c <low_level_init+0x150>)
 8003946:	482e      	ldr	r0, [pc, #184]	; (8003a00 <low_level_init+0x144>)
 8003948:	f7fd ff1a 	bl	8001780 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800394c:	2304      	movs	r3, #4
 800394e:	4a30      	ldr	r2, [pc, #192]	; (8003a10 <low_level_init+0x154>)
 8003950:	4930      	ldr	r1, [pc, #192]	; (8003a14 <low_level_init+0x158>)
 8003952:	482b      	ldr	r0, [pc, #172]	; (8003a00 <low_level_init+0x144>)
 8003954:	f7fd ff7c 	bl	8001850 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2206      	movs	r2, #6
 800395c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <low_level_init+0x144>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <low_level_init+0x144>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	785a      	ldrb	r2, [r3, #1]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <low_level_init+0x144>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	789a      	ldrb	r2, [r3, #2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <low_level_init+0x144>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	78da      	ldrb	r2, [r3, #3]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <low_level_init+0x144>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	791a      	ldrb	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <low_level_init+0x144>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	795a      	ldrb	r2, [r3, #5]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039ae:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039b6:	f043 030a 	orr.w	r3, r3, #10
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80039c2:	480f      	ldr	r0, [pc, #60]	; (8003a00 <low_level_init+0x144>)
 80039c4:	f7fe fa6e 	bl	8001ea4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	461a      	mov	r2, r3
 80039ce:	211d      	movs	r1, #29
 80039d0:	480b      	ldr	r0, [pc, #44]	; (8003a00 <low_level_init+0x144>)
 80039d2:	f7fe f999 	bl	8001d08 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f043 030b 	orr.w	r3, r3, #11
 80039dc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	461a      	mov	r2, r3
 80039e2:	211d      	movs	r1, #29
 80039e4:	4806      	ldr	r0, [pc, #24]	; (8003a00 <low_level_init+0x144>)
 80039e6:	f7fe f9f7 	bl	8001dd8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	461a      	mov	r2, r3
 80039f0:	211d      	movs	r1, #29
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <low_level_init+0x144>)
 80039f4:	f7fe f988 	bl	8001d08 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2000318c 	.word	0x2000318c
 8003a04:	40028000 	.word	0x40028000
 8003a08:	200019bc 	.word	0x200019bc
 8003a0c:	2000016c 	.word	0x2000016c
 8003a10:	200001ec 	.word	0x200001ec
 8003a14:	200000ec 	.word	0x200000ec

08003a18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <low_level_output+0x138>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <low_level_output+0x138>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	e05a      	b.n	8003b00 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da03      	bge.n	8003a5a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a52:	23f8      	movs	r3, #248	; 0xf8
 8003a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a58:	e05c      	b.n	8003b14 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	895b      	ldrh	r3, [r3, #10]
 8003a5e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a64:	e02f      	b.n	8003ac6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	18d0      	adds	r0, r2, r3
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	18d1      	adds	r1, r2, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f00a ff69 	bl	800e954 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da03      	bge.n	8003a98 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a90:	23f8      	movs	r3, #248	; 0xf8
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a96:	e03d      	b.n	8003b14 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003aa8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ab4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ac0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d8c8      	bhi.n	8003a66 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	18d0      	adds	r0, r2, r3
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f00a ff35 	bl	800e954 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1a1      	bne.n	8003a4a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	4811      	ldr	r0, [pc, #68]	; (8003b50 <low_level_output+0x138>)
 8003b0a:	f7fd ff0d 	bl	8001928 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <low_level_output+0x138>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <low_level_output+0x138>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2320      	movs	r3, #32
 8003b32:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <low_level_output+0x138>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003b42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000318c 	.word	0x2000318c

08003b54 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003b78:	484e      	ldr	r0, [pc, #312]	; (8003cb4 <low_level_input+0x160>)
 8003b7a:	f7fd ffbf 	bl	8001afc <HAL_ETH_GetReceivedFrame>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <low_level_input+0x34>

    return NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e091      	b.n	8003cac <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <low_level_input+0x160>)
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <low_level_input+0x160>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003b94:	89fb      	ldrh	r3, [r7, #14]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f001 f9d2 	bl	8004f4c <pbuf_alloc>
 8003ba8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d04b      	beq.n	8003c48 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bb0:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <low_level_input+0x160>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	e040      	b.n	8003c42 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	895b      	ldrh	r3, [r3, #10]
 8003bc4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003bca:	e021      	b.n	8003c10 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	18d0      	adds	r0, r2, r3
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	18d1      	adds	r1, r2, r3
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	461a      	mov	r2, r3
 8003be4:	f00a feb6 	bl	800e954 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003bfe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c0a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d8d6      	bhi.n	8003bcc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	18d0      	adds	r0, r2, r3
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f00a fe90 	bl	800e954 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1bb      	bne.n	8003bc0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <low_level_input+0x160>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e00b      	b.n	8003c6c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <low_level_input+0x160>)
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3ee      	bcc.n	8003c54 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <low_level_input+0x160>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <low_level_input+0x160>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <low_level_input+0x160>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c96:	461a      	mov	r2, r3
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <low_level_input+0x160>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	; 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2000318c 	.word	0x2000318c

08003cb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff47 	bl	8003b54 <low_level_input>
 8003cc6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	4798      	blx	r3
 8003cd8:	4603      	mov	r3, r0
 8003cda:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003cdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f001 fc15 	bl	8005514 <pbuf_free>
    p = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e000      	b.n	8003cf2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <ethernetif_init+0x1c>
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <ethernetif_init+0x48>)
 8003d08:	f44f 7206 	mov.w	r2, #536	; 0x218
 8003d0c:	490d      	ldr	r1, [pc, #52]	; (8003d44 <ethernetif_init+0x4c>)
 8003d0e:	480e      	ldr	r0, [pc, #56]	; (8003d48 <ethernetif_init+0x50>)
 8003d10:	f00a fe50 	bl	800e9b4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2273      	movs	r2, #115	; 0x73
 8003d18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2274      	movs	r2, #116	; 0x74
 8003d20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <ethernetif_init+0x54>)
 8003d28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <ethernetif_init+0x58>)
 8003d2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fdc3 	bl	80038bc <low_level_init>

  return ERR_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800ffd8 	.word	0x0800ffd8
 8003d44:	0800fff4 	.word	0x0800fff4
 8003d48:	08010004 	.word	0x08010004
 8003d4c:	0800cacd 	.word	0x0800cacd
 8003d50:	08003a19 	.word	0x08003a19

08003d54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d58:	f7fd fa38 	bl	80011cc <HAL_GetTick>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8003d70:	f7fd fa2c 	bl	80011cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <ethernetif_set_link+0x80>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2bc7      	cmp	r3, #199	; 0xc7
 8003d7e:	d92c      	bls.n	8003dda <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003d80:	f7fd fa24 	bl	80011cc <HAL_GetTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <ethernetif_set_link+0x80>)
 8003d88:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d8a:	f107 030c 	add.w	r3, r7, #12
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2101      	movs	r1, #1
 8003d92:	4815      	ldr	r0, [pc, #84]	; (8003de8 <ethernetif_set_link+0x84>)
 8003d94:	f7fd ffb8 	bl	8001d08 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <ethernetif_set_link+0x58>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 ffc9 	bl	8004d4c <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 8003dba:	e00e      	b.n	8003dda <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <ethernetif_set_link+0x76>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 ffed 	bl	8004db4 <netif_set_link_down>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200031d4 	.word	0x200031d4
 8003de8:	2000318c 	.word	0x2000318c

08003dec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d05d      	beq.n	8003eca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d03f      	beq.n	8003e96 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4830      	ldr	r0, [pc, #192]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e1e:	f7fd ffdb 	bl	8001dd8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fd f9d3 	bl	80011cc <HAL_GetTick>
 8003e26:	4603      	mov	r3, r0
 8003e28:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e2a:	f107 0308 	add.w	r3, r7, #8
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2101      	movs	r1, #1
 8003e32:	482b      	ldr	r0, [pc, #172]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e34:	f7fd ff68 	bl	8001d08 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003e38:	f7fd f9c8 	bl	80011cc <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e46:	d828      	bhi.n	8003e9a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0eb      	beq.n	8003e2a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	461a      	mov	r2, r3
 8003e58:	2110      	movs	r1, #16
 8003e5a:	4821      	ldr	r0, [pc, #132]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e5c:	f7fd ff54 	bl	8001d08 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e002      	b.n	8003e7a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e016      	b.n	8003eba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	e011      	b.n	8003eba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <ethernetif_update_config+0xb0>
          goto error;
 8003e9a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	480a      	ldr	r0, [pc, #40]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003eb6:	f7fd ff8f 	bl	8001dd8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003ebe:	f7fe f84f 	bl	8001f60 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003ec4:	f7fd ffee 	bl	8001ea4 <HAL_ETH_Start>
 8003ec8:	e002      	b.n	8003ed0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003eca:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <ethernetif_update_config+0xf4>)
 8003ecc:	f7fe f819 	bl	8001f02 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fd f8d1 	bl	8001078 <ethernetif_notify_conn_changed>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000318c 	.word	0x2000318c

08003ee4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	b29b      	uxth	r3, r3
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	061a      	lsls	r2, r3, #24
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	4313      	orrs	r3, r2
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003f4a:	f000 f8d5 	bl	80040f8 <mem_init>
  memp_init();
 8003f4e:	f000 fbdb 	bl	8004708 <memp_init>
  pbuf_init();
  netif_init();
 8003f52:	f000 fc93 	bl	800487c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003f56:	f007 ff85 	bl	800be64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003f5a:	f001 fd79 	bl	8005a50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003f5e:	f007 fef7 	bl	800bd50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <ptr_to_mem+0x20>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4413      	add	r3, r2
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20005a04 	.word	0x20005a04

08003f90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <mem_to_ptr+0x20>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b29b      	uxth	r3, r3
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20005a04 	.word	0x20005a04

08003fb4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003fbc:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <plug_holes+0x120>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d206      	bcs.n	8003fd4 <plug_holes+0x20>
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <plug_holes+0x124>)
 8003fc8:	f240 12df 	movw	r2, #479	; 0x1df
 8003fcc:	4943      	ldr	r1, [pc, #268]	; (80040dc <plug_holes+0x128>)
 8003fce:	4844      	ldr	r0, [pc, #272]	; (80040e0 <plug_holes+0x12c>)
 8003fd0:	f00a fcf0 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003fd4:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <plug_holes+0x130>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d306      	bcc.n	8003fec <plug_holes+0x38>
 8003fde:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <plug_holes+0x124>)
 8003fe0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003fe4:	4940      	ldr	r1, [pc, #256]	; (80040e8 <plug_holes+0x134>)
 8003fe6:	483e      	ldr	r0, [pc, #248]	; (80040e0 <plug_holes+0x12c>)
 8003fe8:	f00a fce4 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	791b      	ldrb	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <plug_holes+0x4e>
 8003ff4:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <plug_holes+0x124>)
 8003ff6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003ffa:	493c      	ldr	r1, [pc, #240]	; (80040ec <plug_holes+0x138>)
 8003ffc:	4838      	ldr	r0, [pc, #224]	; (80040e0 <plug_holes+0x12c>)
 8003ffe:	f00a fcd9 	bl	800e9b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800400a:	d906      	bls.n	800401a <plug_holes+0x66>
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <plug_holes+0x124>)
 800400e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004012:	4937      	ldr	r1, [pc, #220]	; (80040f0 <plug_holes+0x13c>)
 8004014:	4832      	ldr	r0, [pc, #200]	; (80040e0 <plug_holes+0x12c>)
 8004016:	f00a fccd 	bl	800e9b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ffa4 	bl	8003f6c <ptr_to_mem>
 8004024:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	429a      	cmp	r2, r3
 800402c:	d024      	beq.n	8004078 <plug_holes+0xc4>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d120      	bne.n	8004078 <plug_holes+0xc4>
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <plug_holes+0x130>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d01b      	beq.n	8004078 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <plug_holes+0x140>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	429a      	cmp	r2, r3
 8004048:	d102      	bne.n	8004050 <plug_holes+0x9c>
      lfree = mem;
 800404a:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <plug_holes+0x140>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004060:	d00a      	beq.n	8004078 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff80 	bl	8003f6c <ptr_to_mem>
 800406c:	4604      	mov	r4, r0
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff8e 	bl	8003f90 <mem_to_ptr>
 8004074:	4603      	mov	r3, r0
 8004076:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	885b      	ldrh	r3, [r3, #2]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff75 	bl	8003f6c <ptr_to_mem>
 8004082:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d01f      	beq.n	80040cc <plug_holes+0x118>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	791b      	ldrb	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11b      	bne.n	80040cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <plug_holes+0x140>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d102      	bne.n	80040a4 <plug_holes+0xf0>
      lfree = pmem;
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <plug_holes+0x140>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80040b4:	d00a      	beq.n	80040cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff56 	bl	8003f6c <ptr_to_mem>
 80040c0:	4604      	mov	r4, r0
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f7ff ff64 	bl	8003f90 <mem_to_ptr>
 80040c8:	4603      	mov	r3, r0
 80040ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd90      	pop	{r4, r7, pc}
 80040d4:	20005a04 	.word	0x20005a04
 80040d8:	0801002c 	.word	0x0801002c
 80040dc:	0801005c 	.word	0x0801005c
 80040e0:	08010074 	.word	0x08010074
 80040e4:	20005a08 	.word	0x20005a08
 80040e8:	0801009c 	.word	0x0801009c
 80040ec:	080100b8 	.word	0x080100b8
 80040f0:	080100d4 	.word	0x080100d4
 80040f4:	20005a0c 	.word	0x20005a0c

080040f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <mem_init+0x68>)
 8004100:	3303      	adds	r3, #3
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	461a      	mov	r2, r3
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <mem_init+0x6c>)
 800410a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <mem_init+0x6c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004118:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004126:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800412a:	f7ff ff1f 	bl	8003f6c <ptr_to_mem>
 800412e:	4603      	mov	r3, r0
 8004130:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <mem_init+0x70>)
 8004132:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <mem_init+0x70>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <mem_init+0x70>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004144:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <mem_init+0x70>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800414e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <mem_init+0x6c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a05      	ldr	r2, [pc, #20]	; (800416c <mem_init+0x74>)
 8004156:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200031f0 	.word	0x200031f0
 8004164:	20005a04 	.word	0x20005a04
 8004168:	20005a08 	.word	0x20005a08
 800416c:	20005a0c 	.word	0x20005a0c

08004170 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff09 	bl	8003f90 <mem_to_ptr>
 800417e:	4603      	mov	r3, r0
 8004180:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fef0 	bl	8003f6c <ptr_to_mem>
 800418c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	885b      	ldrh	r3, [r3, #2]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff feea 	bl	8003f6c <ptr_to_mem>
 8004198:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041a2:	d818      	bhi.n	80041d6 <mem_link_valid+0x66>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	885b      	ldrh	r3, [r3, #2]
 80041a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041ac:	d813      	bhi.n	80041d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041b2:	8afa      	ldrh	r2, [r7, #22]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d004      	beq.n	80041c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	8afa      	ldrh	r2, [r7, #22]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d109      	bne.n	80041d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <mem_link_valid+0x74>)
 80041c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d006      	beq.n	80041da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	8afa      	ldrh	r2, [r7, #22]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <mem_link_valid+0x6a>
    return 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <mem_link_valid+0x6c>
  }
  return 1;
 80041da:	2301      	movs	r3, #1
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20005a08 	.word	0x20005a08

080041e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04c      	beq.n	8004290 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <mem_free+0xb0>)
 8004202:	f240 2273 	movw	r2, #627	; 0x273
 8004206:	4925      	ldr	r1, [pc, #148]	; (800429c <mem_free+0xb4>)
 8004208:	4825      	ldr	r0, [pc, #148]	; (80042a0 <mem_free+0xb8>)
 800420a:	f00a fbd3 	bl	800e9b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800420e:	e040      	b.n	8004292 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b08      	subs	r3, #8
 8004214:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <mem_free+0xbc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d306      	bcc.n	800422e <mem_free+0x46>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f103 020c 	add.w	r2, r3, #12
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <mem_free+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d907      	bls.n	800423e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <mem_free+0xb0>)
 8004230:	f240 227f 	movw	r2, #639	; 0x27f
 8004234:	491d      	ldr	r1, [pc, #116]	; (80042ac <mem_free+0xc4>)
 8004236:	481a      	ldr	r0, [pc, #104]	; (80042a0 <mem_free+0xb8>)
 8004238:	f00a fbbc 	bl	800e9b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800423c:	e029      	b.n	8004292 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	791b      	ldrb	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <mem_free+0xb0>)
 8004248:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800424c:	4918      	ldr	r1, [pc, #96]	; (80042b0 <mem_free+0xc8>)
 800424e:	4814      	ldr	r0, [pc, #80]	; (80042a0 <mem_free+0xb8>)
 8004250:	f00a fbb0 	bl	800e9b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004254:	e01d      	b.n	8004292 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff8a 	bl	8004170 <mem_link_valid>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <mem_free+0xb0>)
 8004264:	f240 2295 	movw	r2, #661	; 0x295
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <mem_free+0xcc>)
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <mem_free+0xb8>)
 800426c:	f00a fba2 	bl	800e9b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004270:	e00f      	b.n	8004292 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <mem_free+0xd0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	429a      	cmp	r2, r3
 8004280:	d202      	bcs.n	8004288 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004282:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <mem_free+0xd0>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fe93 	bl	8003fb4 <plug_holes>
 800428e:	e000      	b.n	8004292 <mem_free+0xaa>
    return;
 8004290:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0801002c 	.word	0x0801002c
 800429c:	08010100 	.word	0x08010100
 80042a0:	08010074 	.word	0x08010074
 80042a4:	20005a04 	.word	0x20005a04
 80042a8:	20005a08 	.word	0x20005a08
 80042ac:	08010124 	.word	0x08010124
 80042b0:	08010140 	.word	0x08010140
 80042b4:	08010168 	.word	0x08010168
 80042b8:	20005a0c 	.word	0x20005a0c

080042bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	3303      	adds	r3, #3
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80042d4:	8bfb      	ldrh	r3, [r7, #30]
 80042d6:	2b0b      	cmp	r3, #11
 80042d8:	d801      	bhi.n	80042de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80042da:	230c      	movs	r3, #12
 80042dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80042de:	8bfb      	ldrh	r3, [r7, #30]
 80042e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042e4:	d803      	bhi.n	80042ee <mem_trim+0x32>
 80042e6:	8bfa      	ldrh	r2, [r7, #30]
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d201      	bcs.n	80042f2 <mem_trim+0x36>
    return NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e0cc      	b.n	800448c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80042f2:	4b68      	ldr	r3, [pc, #416]	; (8004494 <mem_trim+0x1d8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d304      	bcc.n	8004306 <mem_trim+0x4a>
 80042fc:	4b66      	ldr	r3, [pc, #408]	; (8004498 <mem_trim+0x1dc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d306      	bcc.n	8004314 <mem_trim+0x58>
 8004306:	4b65      	ldr	r3, [pc, #404]	; (800449c <mem_trim+0x1e0>)
 8004308:	f240 22d1 	movw	r2, #721	; 0x2d1
 800430c:	4964      	ldr	r1, [pc, #400]	; (80044a0 <mem_trim+0x1e4>)
 800430e:	4865      	ldr	r0, [pc, #404]	; (80044a4 <mem_trim+0x1e8>)
 8004310:	f00a fb50 	bl	800e9b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004314:	4b5f      	ldr	r3, [pc, #380]	; (8004494 <mem_trim+0x1d8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d304      	bcc.n	8004328 <mem_trim+0x6c>
 800431e:	4b5e      	ldr	r3, [pc, #376]	; (8004498 <mem_trim+0x1dc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d301      	bcc.n	800432c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	e0af      	b.n	800448c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b08      	subs	r3, #8
 8004330:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f7ff fe2c 	bl	8003f90 <mem_to_ptr>
 8004338:	4603      	mov	r3, r0
 800433a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	881a      	ldrh	r2, [r3, #0]
 8004340:	8afb      	ldrh	r3, [r7, #22]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b08      	subs	r3, #8
 8004348:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800434a:	8bfa      	ldrh	r2, [r7, #30]
 800434c:	8abb      	ldrh	r3, [r7, #20]
 800434e:	429a      	cmp	r2, r3
 8004350:	d906      	bls.n	8004360 <mem_trim+0xa4>
 8004352:	4b52      	ldr	r3, [pc, #328]	; (800449c <mem_trim+0x1e0>)
 8004354:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004358:	4953      	ldr	r1, [pc, #332]	; (80044a8 <mem_trim+0x1ec>)
 800435a:	4852      	ldr	r0, [pc, #328]	; (80044a4 <mem_trim+0x1e8>)
 800435c:	f00a fb2a 	bl	800e9b4 <iprintf>
  if (newsize > size) {
 8004360:	8bfa      	ldrh	r2, [r7, #30]
 8004362:	8abb      	ldrh	r3, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d901      	bls.n	800436c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	e08f      	b.n	800448c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800436c:	8bfa      	ldrh	r2, [r7, #30]
 800436e:	8abb      	ldrh	r3, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	d101      	bne.n	8004378 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	e089      	b.n	800448c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fdf5 	bl	8003f6c <ptr_to_mem>
 8004382:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d13f      	bne.n	800440c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004394:	d106      	bne.n	80043a4 <mem_trim+0xe8>
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <mem_trim+0x1e0>)
 8004398:	f240 22f5 	movw	r2, #757	; 0x2f5
 800439c:	4943      	ldr	r1, [pc, #268]	; (80044ac <mem_trim+0x1f0>)
 800439e:	4841      	ldr	r0, [pc, #260]	; (80044a4 <mem_trim+0x1e8>)
 80043a0:	f00a fb08 	bl	800e9b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80043aa:	8afa      	ldrh	r2, [r7, #22]
 80043ac:	8bfb      	ldrh	r3, [r7, #30]
 80043ae:	4413      	add	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3308      	adds	r3, #8
 80043b4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <mem_trim+0x1f4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d106      	bne.n	80043ce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80043c0:	89fb      	ldrh	r3, [r7, #14]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fdd2 	bl	8003f6c <ptr_to_mem>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4a39      	ldr	r2, [pc, #228]	; (80044b0 <mem_trim+0x1f4>)
 80043cc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80043ce:	89fb      	ldrh	r3, [r7, #14]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fdcb 	bl	8003f6c <ptr_to_mem>
 80043d6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2200      	movs	r2, #0
 80043dc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	89ba      	ldrh	r2, [r7, #12]
 80043e2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	8afa      	ldrh	r2, [r7, #22]
 80043e8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	89fa      	ldrh	r2, [r7, #14]
 80043ee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043f8:	d047      	beq.n	800448a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fdb4 	bl	8003f6c <ptr_to_mem>
 8004404:	4602      	mov	r2, r0
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	8053      	strh	r3, [r2, #2]
 800440a:	e03e      	b.n	800448a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800440c:	8bfb      	ldrh	r3, [r7, #30]
 800440e:	f103 0214 	add.w	r2, r3, #20
 8004412:	8abb      	ldrh	r3, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	d838      	bhi.n	800448a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004418:	8afa      	ldrh	r2, [r7, #22]
 800441a:	8bfb      	ldrh	r3, [r7, #30]
 800441c:	4413      	add	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	3308      	adds	r3, #8
 8004422:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800442c:	d106      	bne.n	800443c <mem_trim+0x180>
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <mem_trim+0x1e0>)
 8004430:	f240 3216 	movw	r2, #790	; 0x316
 8004434:	491d      	ldr	r1, [pc, #116]	; (80044ac <mem_trim+0x1f0>)
 8004436:	481b      	ldr	r0, [pc, #108]	; (80044a4 <mem_trim+0x1e8>)
 8004438:	f00a fabc 	bl	800e9b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800443c:	89fb      	ldrh	r3, [r7, #14]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fd94 	bl	8003f6c <ptr_to_mem>
 8004444:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004446:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <mem_trim+0x1f4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	429a      	cmp	r2, r3
 800444e:	d202      	bcs.n	8004456 <mem_trim+0x19a>
      lfree = mem2;
 8004450:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <mem_trim+0x1f4>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2200      	movs	r2, #0
 800445a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	8afa      	ldrh	r2, [r7, #22]
 8004468:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	89fa      	ldrh	r2, [r7, #14]
 800446e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004478:	d007      	beq.n	800448a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fd74 	bl	8003f6c <ptr_to_mem>
 8004484:	4602      	mov	r2, r0
 8004486:	89fb      	ldrh	r3, [r7, #14]
 8004488:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800448a:	687b      	ldr	r3, [r7, #4]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20005a04 	.word	0x20005a04
 8004498:	20005a08 	.word	0x20005a08
 800449c:	0801002c 	.word	0x0801002c
 80044a0:	0801019c 	.word	0x0801019c
 80044a4:	08010074 	.word	0x08010074
 80044a8:	080101b4 	.word	0x080101b4
 80044ac:	080101d4 	.word	0x080101d4
 80044b0:	20005a0c 	.word	0x20005a0c

080044b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <mem_malloc+0x14>
    return NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e0d9      	b.n	800467c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	3303      	adds	r3, #3
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80044d4:	8bbb      	ldrh	r3, [r7, #28]
 80044d6:	2b0b      	cmp	r3, #11
 80044d8:	d801      	bhi.n	80044de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80044da:	230c      	movs	r3, #12
 80044dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80044de:	8bbb      	ldrh	r3, [r7, #28]
 80044e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044e4:	d803      	bhi.n	80044ee <mem_malloc+0x3a>
 80044e6:	8bba      	ldrh	r2, [r7, #28]
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d201      	bcs.n	80044f2 <mem_malloc+0x3e>
    return NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e0c4      	b.n	800467c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80044f2:	4b64      	ldr	r3, [pc, #400]	; (8004684 <mem_malloc+0x1d0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fd4a 	bl	8003f90 <mem_to_ptr>
 80044fc:	4603      	mov	r3, r0
 80044fe:	83fb      	strh	r3, [r7, #30]
 8004500:	e0b4      	b.n	800466c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004502:	8bfb      	ldrh	r3, [r7, #30]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fd31 	bl	8003f6c <ptr_to_mem>
 800450a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	791b      	ldrb	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f040 80a4 	bne.w	800465e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f1a3 0208 	sub.w	r2, r3, #8
 8004524:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004526:	429a      	cmp	r2, r3
 8004528:	f0c0 8099 	bcc.w	800465e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	8bfb      	ldrh	r3, [r7, #30]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f1a3 0208 	sub.w	r2, r3, #8
 800453a:	8bbb      	ldrh	r3, [r7, #28]
 800453c:	3314      	adds	r3, #20
 800453e:	429a      	cmp	r2, r3
 8004540:	d333      	bcc.n	80045aa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004542:	8bfa      	ldrh	r2, [r7, #30]
 8004544:	8bbb      	ldrh	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	3308      	adds	r3, #8
 800454c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800454e:	8a7b      	ldrh	r3, [r7, #18]
 8004550:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004554:	d106      	bne.n	8004564 <mem_malloc+0xb0>
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <mem_malloc+0x1d4>)
 8004558:	f240 3287 	movw	r2, #903	; 0x387
 800455c:	494b      	ldr	r1, [pc, #300]	; (800468c <mem_malloc+0x1d8>)
 800455e:	484c      	ldr	r0, [pc, #304]	; (8004690 <mem_malloc+0x1dc>)
 8004560:	f00a fa28 	bl	800e9b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004564:	8a7b      	ldrh	r3, [r7, #18]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fd00 	bl	8003f6c <ptr_to_mem>
 800456c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8bfa      	ldrh	r2, [r7, #30]
 8004580:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	8a7a      	ldrh	r2, [r7, #18]
 8004586:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2201      	movs	r2, #1
 800458c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004596:	d00b      	beq.n	80045b0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fce5 	bl	8003f6c <ptr_to_mem>
 80045a2:	4602      	mov	r2, r0
 80045a4:	8a7b      	ldrh	r3, [r7, #18]
 80045a6:	8053      	strh	r3, [r2, #2]
 80045a8:	e002      	b.n	80045b0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2201      	movs	r2, #1
 80045ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <mem_malloc+0x1d0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d127      	bne.n	800460a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80045ba:	4b32      	ldr	r3, [pc, #200]	; (8004684 <mem_malloc+0x1d0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80045c0:	e005      	b.n	80045ce <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fcd0 	bl	8003f6c <ptr_to_mem>
 80045cc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <mem_malloc+0x12c>
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <mem_malloc+0x1e0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1f0      	bne.n	80045c2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80045e0:	4a28      	ldr	r2, [pc, #160]	; (8004684 <mem_malloc+0x1d0>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <mem_malloc+0x1d0>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <mem_malloc+0x1e0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d00b      	beq.n	800460a <mem_malloc+0x156>
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <mem_malloc+0x1d0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d006      	beq.n	800460a <mem_malloc+0x156>
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <mem_malloc+0x1d4>)
 80045fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004602:	4925      	ldr	r1, [pc, #148]	; (8004698 <mem_malloc+0x1e4>)
 8004604:	4822      	ldr	r0, [pc, #136]	; (8004690 <mem_malloc+0x1dc>)
 8004606:	f00a f9d5 	bl	800e9b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800460a:	8bba      	ldrh	r2, [r7, #28]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	3308      	adds	r3, #8
 8004612:	4a20      	ldr	r2, [pc, #128]	; (8004694 <mem_malloc+0x1e0>)
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	4293      	cmp	r3, r2
 8004618:	d906      	bls.n	8004628 <mem_malloc+0x174>
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <mem_malloc+0x1d4>)
 800461c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004620:	491e      	ldr	r1, [pc, #120]	; (800469c <mem_malloc+0x1e8>)
 8004622:	481b      	ldr	r0, [pc, #108]	; (8004690 <mem_malloc+0x1dc>)
 8004624:	f00a f9c6 	bl	800e9b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <mem_malloc+0x18c>
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <mem_malloc+0x1d4>)
 8004634:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004638:	4919      	ldr	r1, [pc, #100]	; (80046a0 <mem_malloc+0x1ec>)
 800463a:	4815      	ldr	r0, [pc, #84]	; (8004690 <mem_malloc+0x1dc>)
 800463c:	f00a f9ba 	bl	800e9b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <mem_malloc+0x1a4>
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <mem_malloc+0x1d4>)
 800464c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004650:	4914      	ldr	r1, [pc, #80]	; (80046a4 <mem_malloc+0x1f0>)
 8004652:	480f      	ldr	r0, [pc, #60]	; (8004690 <mem_malloc+0x1dc>)
 8004654:	f00a f9ae 	bl	800e9b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3308      	adds	r3, #8
 800465c:	e00e      	b.n	800467c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800465e:	8bfb      	ldrh	r3, [r7, #30]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fc83 	bl	8003f6c <ptr_to_mem>
 8004666:	4603      	mov	r3, r0
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800466c:	8bfa      	ldrh	r2, [r7, #30]
 800466e:	8bbb      	ldrh	r3, [r7, #28]
 8004670:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004674:	429a      	cmp	r2, r3
 8004676:	f4ff af44 	bcc.w	8004502 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20005a0c 	.word	0x20005a0c
 8004688:	0801002c 	.word	0x0801002c
 800468c:	080101d4 	.word	0x080101d4
 8004690:	08010074 	.word	0x08010074
 8004694:	20005a08 	.word	0x20005a08
 8004698:	080101e8 	.word	0x080101e8
 800469c:	08010204 	.word	0x08010204
 80046a0:	08010234 	.word	0x08010234
 80046a4:	08010264 	.word	0x08010264

080046a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	3303      	adds	r3, #3
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e011      	b.n	80046ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	889b      	ldrh	r3, [r3, #4]
 80046e0:	461a      	mov	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4413      	add	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	88db      	ldrh	r3, [r3, #6]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	dbe7      	blt.n	80046ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800470e:	2300      	movs	r3, #0
 8004710:	80fb      	strh	r3, [r7, #6]
 8004712:	e009      	b.n	8004728 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <memp_init+0x30>)
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ffc3 	bl	80046a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	3301      	adds	r3, #1
 8004726:	80fb      	strh	r3, [r7, #6]
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d9f2      	bls.n	8004714 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08012b1c 	.word	0x08012b1c

0800473c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d012      	beq.n	8004778 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <do_memp_malloc_pool+0x38>
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <do_memp_malloc_pool+0x48>)
 8004768:	f44f 728c 	mov.w	r2, #280	; 0x118
 800476c:	4906      	ldr	r1, [pc, #24]	; (8004788 <do_memp_malloc_pool+0x4c>)
 800476e:	4807      	ldr	r0, [pc, #28]	; (800478c <do_memp_malloc_pool+0x50>)
 8004770:	f00a f920 	bl	800e9b4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	e000      	b.n	800477a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	080102f0 	.word	0x080102f0
 8004788:	08010320 	.word	0x08010320
 800478c:	08010344 	.word	0x08010344

08004790 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d908      	bls.n	80047b2 <memp_malloc+0x22>
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <memp_malloc+0x3c>)
 80047a2:	f240 1257 	movw	r2, #343	; 0x157
 80047a6:	490a      	ldr	r1, [pc, #40]	; (80047d0 <memp_malloc+0x40>)
 80047a8:	480a      	ldr	r0, [pc, #40]	; (80047d4 <memp_malloc+0x44>)
 80047aa:	f00a f903 	bl	800e9b4 <iprintf>
 80047ae:	2300      	movs	r3, #0
 80047b0:	e008      	b.n	80047c4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <memp_malloc+0x48>)
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff ffbe 	bl	800473c <do_memp_malloc_pool>
 80047c0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080102f0 	.word	0x080102f0
 80047d0:	08010380 	.word	0x08010380
 80047d4:	08010344 	.word	0x08010344
 80047d8:	08012b1c 	.word	0x08012b1c

080047dc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <do_memp_free_pool+0x22>
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <do_memp_free_pool+0x40>)
 80047f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80047f6:	490a      	ldr	r1, [pc, #40]	; (8004820 <do_memp_free_pool+0x44>)
 80047f8:	480a      	ldr	r0, [pc, #40]	; (8004824 <do_memp_free_pool+0x48>)
 80047fa:	f00a f8db 	bl	800e9b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	080102f0 	.word	0x080102f0
 8004820:	080103a0 	.word	0x080103a0
 8004824:	08010344 	.word	0x08010344

08004828 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	2b08      	cmp	r3, #8
 8004838:	d907      	bls.n	800484a <memp_free+0x22>
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <memp_free+0x44>)
 800483c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004840:	490b      	ldr	r1, [pc, #44]	; (8004870 <memp_free+0x48>)
 8004842:	480c      	ldr	r0, [pc, #48]	; (8004874 <memp_free+0x4c>)
 8004844:	f00a f8b6 	bl	800e9b4 <iprintf>
 8004848:	e00c      	b.n	8004864 <memp_free+0x3c>

  if (mem == NULL) {
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <memp_free+0x50>)
 8004854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ffbe 	bl	80047dc <do_memp_free_pool>
 8004860:	e000      	b.n	8004864 <memp_free+0x3c>
    return;
 8004862:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	080102f0 	.word	0x080102f0
 8004870:	080103c0 	.word	0x080103c0
 8004874:	08010344 	.word	0x08010344
 8004878:	08012b1c 	.word	0x08012b1c

0800487c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <netif_add+0x26>
 80048a0:	4b57      	ldr	r3, [pc, #348]	; (8004a00 <netif_add+0x174>)
 80048a2:	f240 1227 	movw	r2, #295	; 0x127
 80048a6:	4957      	ldr	r1, [pc, #348]	; (8004a04 <netif_add+0x178>)
 80048a8:	4857      	ldr	r0, [pc, #348]	; (8004a08 <netif_add+0x17c>)
 80048aa:	f00a f883 	bl	800e9b4 <iprintf>
 80048ae:	2300      	movs	r3, #0
 80048b0:	e0a2      	b.n	80049f8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <netif_add+0x3e>
 80048b8:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <netif_add+0x174>)
 80048ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 80048be:	4953      	ldr	r1, [pc, #332]	; (8004a0c <netif_add+0x180>)
 80048c0:	4851      	ldr	r0, [pc, #324]	; (8004a08 <netif_add+0x17c>)
 80048c2:	f00a f877 	bl	800e9b4 <iprintf>
 80048c6:	2300      	movs	r3, #0
 80048c8:	e096      	b.n	80049f8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80048d0:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <netif_add+0x184>)
 80048d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <netif_add+0x184>)
 80048dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80048e4:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <netif_add+0x184>)
 80048e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a45      	ldr	r2, [pc, #276]	; (8004a14 <netif_add+0x188>)
 80048fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a3a      	ldr	r2, [r7, #32]
 8004918:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <netif_add+0x18c>)
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004928:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f913 	bl	8004b5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	4798      	blx	r3
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <netif_add+0xba>
    return NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	e058      	b.n	80049f8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800494c:	2bff      	cmp	r3, #255	; 0xff
 800494e:	d103      	bne.n	8004958 <netif_add+0xcc>
        netif->num = 0;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800495c:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <netif_add+0x190>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e02b      	b.n	80049bc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d106      	bne.n	800497a <netif_add+0xee>
 800496c:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <netif_add+0x174>)
 800496e:	f240 128b 	movw	r2, #395	; 0x18b
 8004972:	492b      	ldr	r1, [pc, #172]	; (8004a20 <netif_add+0x194>)
 8004974:	4824      	ldr	r0, [pc, #144]	; (8004a08 <netif_add+0x17c>)
 8004976:	f00a f81d 	bl	800e9b4 <iprintf>
        num_netifs++;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2bff      	cmp	r3, #255	; 0xff
 8004984:	dd06      	ble.n	8004994 <netif_add+0x108>
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <netif_add+0x174>)
 8004988:	f240 128d 	movw	r2, #397	; 0x18d
 800498c:	4925      	ldr	r1, [pc, #148]	; (8004a24 <netif_add+0x198>)
 800498e:	481e      	ldr	r0, [pc, #120]	; (8004a08 <netif_add+0x17c>)
 8004990:	f00a f810 	bl	800e9b4 <iprintf>
        if (netif2->num == netif->num) {
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d108      	bne.n	80049b6 <netif_add+0x12a>
          netif->num++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049aa:	3301      	adds	r3, #1
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80049b4:	e005      	b.n	80049c2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1d0      	bne.n	8004964 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1be      	bne.n	8004946 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049ce:	2bfe      	cmp	r3, #254	; 0xfe
 80049d0:	d103      	bne.n	80049da <netif_add+0x14e>
    netif_num = 0;
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <netif_add+0x18c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e006      	b.n	80049e8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049e0:	3301      	adds	r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <netif_add+0x18c>)
 80049e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <netif_add+0x190>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <netif_add+0x190>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	080103dc 	.word	0x080103dc
 8004a04:	08010470 	.word	0x08010470
 8004a08:	0801042c 	.word	0x0801042c
 8004a0c:	0801048c 	.word	0x0801048c
 8004a10:	08012b80 	.word	0x08012b80
 8004a14:	08004e37 	.word	0x08004e37
 8004a18:	20008944 	.word	0x20008944
 8004a1c:	2000893c 	.word	0x2000893c
 8004a20:	080104b0 	.word	0x080104b0
 8004a24:	080104c4 	.word	0x080104c4

08004a28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f002 fdf3 	bl	8007620 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f007 fb9b 	bl	800c178 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <netif_do_set_ipaddr+0x20>
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <netif_do_set_ipaddr+0x88>)
 8004a60:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004a64:	491c      	ldr	r1, [pc, #112]	; (8004ad8 <netif_do_set_ipaddr+0x8c>)
 8004a66:	481d      	ldr	r0, [pc, #116]	; (8004adc <netif_do_set_ipaddr+0x90>)
 8004a68:	f009 ffa4 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <netif_do_set_ipaddr+0x34>
 8004a72:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <netif_do_set_ipaddr+0x88>)
 8004a74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004a78:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <netif_do_set_ipaddr+0x8c>)
 8004a7a:	4818      	ldr	r0, [pc, #96]	; (8004adc <netif_do_set_ipaddr+0x90>)
 8004a7c:	f009 ff9a 	bl	800e9b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d01c      	beq.n	8004ac8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3304      	adds	r3, #4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ffbf 	bl	8004a28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <netif_do_set_ipaddr+0x6a>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	e000      	b.n	8004ab8 <netif_do_set_ipaddr+0x6c>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004abc:	2101      	movs	r1, #1
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f8d2 	bl	8004c68 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	080103dc 	.word	0x080103dc
 8004ad8:	080104f4 	.word	0x080104f4
 8004adc:	0801042c 	.word	0x0801042c

08004ae0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3308      	adds	r3, #8
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d00a      	beq.n	8004b10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <netif_do_set_netmask+0x26>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	e000      	b.n	8004b08 <netif_do_set_netmask+0x28>
 8004b06:	2300      	movs	r3, #0
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	330c      	adds	r3, #12
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d00a      	beq.n	8004b4e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <netif_do_set_gw+0x26>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	e000      	b.n	8004b46 <netif_do_set_gw+0x28>
 8004b44:	2300      	movs	r3, #0
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <netif_set_addr+0x90>)
 8004b7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <netif_set_addr+0x90>)
 8004b84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <netif_set_addr+0x90>)
 8004b8e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <netif_set_addr+0x42>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <netif_set_addr+0x46>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <netif_set_addr+0x48>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff ff49 	bl	8004a4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff ff8e 	bl	8004ae0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ffa8 	bl	8004b1e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004bd4:	f107 0310 	add.w	r3, r7, #16
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff ff35 	bl	8004a4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004be2:	bf00      	nop
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	08012b80 	.word	0x08012b80

08004bf0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <netif_set_default+0x1c>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20008940 	.word	0x20008940

08004c10 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <netif_set_up+0x1e>
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <netif_set_up+0x4c>)
 8004c20:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004c24:	490e      	ldr	r1, [pc, #56]	; (8004c60 <netif_set_up+0x50>)
 8004c26:	480f      	ldr	r0, [pc, #60]	; (8004c64 <netif_set_up+0x54>)
 8004c28:	f009 fec4 	bl	800e9b4 <iprintf>
 8004c2c:	e013      	b.n	8004c56 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10c      	bne.n	8004c56 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004c4e:	2103      	movs	r1, #3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f809 	bl	8004c68 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	080103dc 	.word	0x080103dc
 8004c60:	08010564 	.word	0x08010564
 8004c64:	0801042c 	.word	0x0801042c

08004c68 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <netif_issue_reports+0x20>
 8004c7a:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <netif_issue_reports+0x74>)
 8004c7c:	f240 326d 	movw	r2, #877	; 0x36d
 8004c80:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <netif_issue_reports+0x78>)
 8004c82:	4818      	ldr	r0, [pc, #96]	; (8004ce4 <netif_issue_reports+0x7c>)
 8004c84:	f009 fe96 	bl	800e9b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01e      	beq.n	8004cd4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c9c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d017      	beq.n	8004cd4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d013      	beq.n	8004cd6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f008 f9eb 	bl	800d0a8 <etharp_request>
 8004cd2:	e000      	b.n	8004cd6 <netif_issue_reports+0x6e>
    return;
 8004cd4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	080103dc 	.word	0x080103dc
 8004ce0:	08010580 	.word	0x08010580
 8004ce4:	0801042c 	.word	0x0801042c

08004ce8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <netif_set_down+0x1e>
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <netif_set_down+0x58>)
 8004cf8:	f240 329b 	movw	r2, #923	; 0x39b
 8004cfc:	4911      	ldr	r1, [pc, #68]	; (8004d44 <netif_set_down+0x5c>)
 8004cfe:	4812      	ldr	r0, [pc, #72]	; (8004d48 <netif_set_down+0x60>)
 8004d00:	f009 fe58 	bl	800e9b4 <iprintf>
 8004d04:	e019      	b.n	8004d3a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f007 fd75 	bl	800c824 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	080103dc 	.word	0x080103dc
 8004d44:	080105a4 	.word	0x080105a4
 8004d48:	0801042c 	.word	0x0801042c

08004d4c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <netif_set_link_up+0x1e>
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <netif_set_link_up+0x5c>)
 8004d5c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004d60:	4912      	ldr	r1, [pc, #72]	; (8004dac <netif_set_link_up+0x60>)
 8004d62:	4813      	ldr	r0, [pc, #76]	; (8004db0 <netif_set_link_up+0x64>)
 8004d64:	f009 fe26 	bl	800e9b4 <iprintf>
 8004d68:	e01b      	b.n	8004da2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d114      	bne.n	8004da2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d7e:	f043 0304 	orr.w	r3, r3, #4
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff6b 	bl	8004c68 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <netif_set_link_up+0x56>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	080103dc 	.word	0x080103dc
 8004dac:	080105c4 	.word	0x080105c4
 8004db0:	0801042c 	.word	0x0801042c

08004db4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <netif_set_link_down+0x1e>
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <netif_set_link_down+0x54>)
 8004dc4:	f240 4206 	movw	r2, #1030	; 0x406
 8004dc8:	4910      	ldr	r1, [pc, #64]	; (8004e0c <netif_set_link_down+0x58>)
 8004dca:	4811      	ldr	r0, [pc, #68]	; (8004e10 <netif_set_link_down+0x5c>)
 8004dcc:	f009 fdf2 	bl	800e9b4 <iprintf>
 8004dd0:	e017      	b.n	8004e02 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004de6:	f023 0304 	bic.w	r3, r3, #4
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <netif_set_link_down+0x4e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	080103dc 	.word	0x080103dc
 8004e0c:	080105e8 	.word	0x080105e8
 8004e10:	0801042c 	.word	0x0801042c

08004e14 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	61da      	str	r2, [r3, #28]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004e42:	f06f 030b 	mvn.w	r3, #11
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <netif_get_by_index+0x48>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e00c      	b.n	8004e86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e72:	3301      	adds	r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	79fa      	ldrb	r2, [r7, #7]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d101      	bne.n	8004e80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e006      	b.n	8004e8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ef      	bne.n	8004e6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000893c 	.word	0x2000893c

08004ea0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <pbuf_free_ooseq+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <pbuf_free_ooseq+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	e00a      	b.n	8004eca <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f002 fbed 	bl	800769c <tcp_free_ooseq>
      return;
 8004ec2:	e005      	b.n	8004ed0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f1      	bne.n	8004eb4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20008945 	.word	0x20008945
 8004edc:	20008954 	.word	0x20008954

08004ee0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <pbuf_pool_is_empty+0x14>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	20008945 	.word	0x20008945

08004ef8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	460b      	mov	r3, r1
 8004f08:	80fb      	strh	r3, [r7, #6]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	88fa      	ldrh	r2, [r7, #6]
 8004f1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88ba      	ldrh	r2, [r7, #4]
 8004f24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004f26:	8b3b      	ldrh	r3, [r7, #24]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	7f3a      	ldrb	r2, [r7, #28]
 8004f32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	73da      	strb	r2, [r3, #15]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
 8004f56:	460b      	mov	r3, r1
 8004f58:	80bb      	strh	r3, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004f68:	d07f      	beq.n	800506a <pbuf_alloc+0x11e>
 8004f6a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004f6e:	f300 80c8 	bgt.w	8005102 <pbuf_alloc+0x1b6>
 8004f72:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004f76:	d010      	beq.n	8004f9a <pbuf_alloc+0x4e>
 8004f78:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004f7c:	f300 80c1 	bgt.w	8005102 <pbuf_alloc+0x1b6>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <pbuf_alloc+0x3e>
 8004f84:	2b41      	cmp	r3, #65	; 0x41
 8004f86:	f040 80bc 	bne.w	8005102 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	88bb      	ldrh	r3, [r7, #4]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	2000      	movs	r0, #0
 8004f92:	f000 f8d1 	bl	8005138 <pbuf_alloc_reference>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004f98:	e0bd      	b.n	8005116 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004fa2:	88bb      	ldrh	r3, [r7, #4]
 8004fa4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004fa6:	2008      	movs	r0, #8
 8004fa8:	f7ff fbf2 	bl	8004790 <memp_malloc>
 8004fac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004fb4:	f7ff ff94 	bl	8004ee0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fc0:	f000 faa8 	bl	8005514 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e0a7      	b.n	8005118 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fca:	3303      	adds	r3, #3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8b7a      	ldrh	r2, [r7, #26]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	bf28      	it	cs
 8004fe0:	4613      	movcs	r3, r2
 8004fe2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	3303      	adds	r3, #3
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	89f9      	ldrh	r1, [r7, #14]
 8004ff6:	8b7a      	ldrh	r2, [r7, #26]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	460b      	mov	r3, r1
 8005002:	4601      	mov	r1, r0
 8005004:	6938      	ldr	r0, [r7, #16]
 8005006:	f7ff ff77 	bl	8004ef8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <pbuf_alloc+0xd8>
 8005016:	4b42      	ldr	r3, [pc, #264]	; (8005120 <pbuf_alloc+0x1d4>)
 8005018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800501c:	4941      	ldr	r1, [pc, #260]	; (8005124 <pbuf_alloc+0x1d8>)
 800501e:	4842      	ldr	r0, [pc, #264]	; (8005128 <pbuf_alloc+0x1dc>)
 8005020:	f009 fcc8 	bl	800e9b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005026:	3303      	adds	r3, #3
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005030:	d106      	bne.n	8005040 <pbuf_alloc+0xf4>
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <pbuf_alloc+0x1d4>)
 8005034:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005038:	493c      	ldr	r1, [pc, #240]	; (800512c <pbuf_alloc+0x1e0>)
 800503a:	483b      	ldr	r0, [pc, #236]	; (8005128 <pbuf_alloc+0x1dc>)
 800503c:	f009 fcba 	bl	800e9b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
 800504a:	e002      	b.n	8005052 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005056:	8b7a      	ldrh	r2, [r7, #26]
 8005058:	89fb      	ldrh	r3, [r7, #14]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d19e      	bne.n	8004fa6 <pbuf_alloc+0x5a>
      break;
 8005068:	e055      	b.n	8005116 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800506a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800506c:	3303      	adds	r3, #3
 800506e:	b29b      	uxth	r3, r3
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	b29a      	uxth	r2, r3
 8005076:	88bb      	ldrh	r3, [r7, #4]
 8005078:	3303      	adds	r3, #3
 800507a:	b29b      	uxth	r3, r3
 800507c:	f023 0303 	bic.w	r3, r3, #3
 8005080:	b29b      	uxth	r3, r3
 8005082:	4413      	add	r3, r2
 8005084:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005086:	8b3b      	ldrh	r3, [r7, #24]
 8005088:	3310      	adds	r3, #16
 800508a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800508c:	8b3a      	ldrh	r2, [r7, #24]
 800508e:	88bb      	ldrh	r3, [r7, #4]
 8005090:	3303      	adds	r3, #3
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	429a      	cmp	r2, r3
 8005098:	d306      	bcc.n	80050a8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800509a:	8afa      	ldrh	r2, [r7, #22]
 800509c:	88bb      	ldrh	r3, [r7, #4]
 800509e:	3303      	adds	r3, #3
 80050a0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d201      	bcs.n	80050ac <pbuf_alloc+0x160>
        return NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e035      	b.n	8005118 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80050ac:	8afb      	ldrh	r3, [r7, #22]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fa00 	bl	80044b4 <mem_malloc>
 80050b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <pbuf_alloc+0x174>
        return NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	e02b      	b.n	8005118 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80050c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050c2:	3310      	adds	r3, #16
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	4413      	add	r3, r2
 80050c8:	3303      	adds	r3, #3
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	4618      	mov	r0, r3
 80050d0:	88b9      	ldrh	r1, [r7, #4]
 80050d2:	88ba      	ldrh	r2, [r7, #4]
 80050d4:	2300      	movs	r3, #0
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	460b      	mov	r3, r1
 80050de:	4601      	mov	r1, r0
 80050e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e2:	f7ff ff09 	bl	8004ef8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d010      	beq.n	8005114 <pbuf_alloc+0x1c8>
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <pbuf_alloc+0x1d4>)
 80050f4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80050f8:	490d      	ldr	r1, [pc, #52]	; (8005130 <pbuf_alloc+0x1e4>)
 80050fa:	480b      	ldr	r0, [pc, #44]	; (8005128 <pbuf_alloc+0x1dc>)
 80050fc:	f009 fc5a 	bl	800e9b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005100:	e008      	b.n	8005114 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <pbuf_alloc+0x1d4>)
 8005104:	f240 1227 	movw	r2, #295	; 0x127
 8005108:	490a      	ldr	r1, [pc, #40]	; (8005134 <pbuf_alloc+0x1e8>)
 800510a:	4807      	ldr	r0, [pc, #28]	; (8005128 <pbuf_alloc+0x1dc>)
 800510c:	f009 fc52 	bl	800e9b4 <iprintf>
      return NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	e001      	b.n	8005118 <pbuf_alloc+0x1cc>
      break;
 8005114:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	; 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	0801060c 	.word	0x0801060c
 8005124:	0801063c 	.word	0x0801063c
 8005128:	0801066c 	.word	0x0801066c
 800512c:	08010694 	.word	0x08010694
 8005130:	080106c8 	.word	0x080106c8
 8005134:	080106f4 	.word	0x080106f4

08005138 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	807b      	strh	r3, [r7, #2]
 8005144:	4613      	mov	r3, r2
 8005146:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005148:	883b      	ldrh	r3, [r7, #0]
 800514a:	2b41      	cmp	r3, #65	; 0x41
 800514c:	d009      	beq.n	8005162 <pbuf_alloc_reference+0x2a>
 800514e:	883b      	ldrh	r3, [r7, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d006      	beq.n	8005162 <pbuf_alloc_reference+0x2a>
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <pbuf_alloc_reference+0x5c>)
 8005156:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800515a:	490f      	ldr	r1, [pc, #60]	; (8005198 <pbuf_alloc_reference+0x60>)
 800515c:	480f      	ldr	r0, [pc, #60]	; (800519c <pbuf_alloc_reference+0x64>)
 800515e:	f009 fc29 	bl	800e9b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005162:	2007      	movs	r0, #7
 8005164:	f7ff fb14 	bl	8004790 <memp_malloc>
 8005168:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	e00b      	b.n	800518c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005174:	8879      	ldrh	r1, [r7, #2]
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	2300      	movs	r3, #0
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	883b      	ldrh	r3, [r7, #0]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	460b      	mov	r3, r1
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff feb7 	bl	8004ef8 <pbuf_init_alloced_pbuf>
  return p;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	0801060c 	.word	0x0801060c
 8005198:	08010710 	.word	0x08010710
 800519c:	0801066c 	.word	0x0801066c

080051a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	460b      	mov	r3, r1
 80051ae:	81bb      	strh	r3, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80051b8:	8a7b      	ldrh	r3, [r7, #18]
 80051ba:	3303      	adds	r3, #3
 80051bc:	f023 0203 	bic.w	r2, r3, #3
 80051c0:	89bb      	ldrh	r3, [r7, #12]
 80051c2:	441a      	add	r2, r3
 80051c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d901      	bls.n	80051ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e018      	b.n	8005200 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80051d4:	8a7b      	ldrh	r3, [r7, #18]
 80051d6:	3303      	adds	r3, #3
 80051d8:	f023 0303 	bic.w	r3, r3, #3
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	4413      	add	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e001      	b.n	80051e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	89b9      	ldrh	r1, [r7, #12]
 80051ec:	89ba      	ldrh	r2, [r7, #12]
 80051ee:	2302      	movs	r3, #2
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	460b      	mov	r3, r1
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	f7ff fe7d 	bl	8004ef8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80051fe:	687b      	ldr	r3, [r7, #4]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <pbuf_realloc+0x20>
 800521a:	4b3a      	ldr	r3, [pc, #232]	; (8005304 <pbuf_realloc+0xfc>)
 800521c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005220:	4939      	ldr	r1, [pc, #228]	; (8005308 <pbuf_realloc+0x100>)
 8005222:	483a      	ldr	r0, [pc, #232]	; (800530c <pbuf_realloc+0x104>)
 8005224:	f009 fbc6 	bl	800e9b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	891b      	ldrh	r3, [r3, #8]
 800522c:	887a      	ldrh	r2, [r7, #2]
 800522e:	429a      	cmp	r2, r3
 8005230:	d263      	bcs.n	80052fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	891a      	ldrh	r2, [r3, #8]
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005244:	e018      	b.n	8005278 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	895b      	ldrh	r3, [r3, #10]
 800524a:	897a      	ldrh	r2, [r7, #10]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	891a      	ldrh	r2, [r3, #8]
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <pbuf_realloc+0x70>
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <pbuf_realloc+0xfc>)
 800526c:	f240 12af 	movw	r2, #431	; 0x1af
 8005270:	4927      	ldr	r1, [pc, #156]	; (8005310 <pbuf_realloc+0x108>)
 8005272:	4826      	ldr	r0, [pc, #152]	; (800530c <pbuf_realloc+0x104>)
 8005274:	f009 fb9e 	bl	800e9b4 <iprintf>
  while (rem_len > q->len) {
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	897a      	ldrh	r2, [r7, #10]
 800527e:	429a      	cmp	r2, r3
 8005280:	d8e1      	bhi.n	8005246 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	7b1b      	ldrb	r3, [r3, #12]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	2b00      	cmp	r3, #0
 800528c:	d121      	bne.n	80052d2 <pbuf_realloc+0xca>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	895b      	ldrh	r3, [r3, #10]
 8005292:	897a      	ldrh	r2, [r7, #10]
 8005294:	429a      	cmp	r2, r3
 8005296:	d01c      	beq.n	80052d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	7b5b      	ldrb	r3, [r3, #13]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	897b      	ldrh	r3, [r7, #10]
 80052b0:	4413      	add	r3, r2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff f800 	bl	80042bc <mem_trim>
 80052bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <pbuf_realloc+0xca>
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <pbuf_realloc+0xfc>)
 80052c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80052ca:	4912      	ldr	r1, [pc, #72]	; (8005314 <pbuf_realloc+0x10c>)
 80052cc:	480f      	ldr	r0, [pc, #60]	; (800530c <pbuf_realloc+0x104>)
 80052ce:	f009 fb71 	bl	800e9b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	897a      	ldrh	r2, [r7, #10]
 80052d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	895a      	ldrh	r2, [r3, #10]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f911 	bl	8005514 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e000      	b.n	80052fc <pbuf_realloc+0xf4>
    return;
 80052fa:	bf00      	nop

}
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	0801060c 	.word	0x0801060c
 8005308:	08010724 	.word	0x08010724
 800530c:	0801066c 	.word	0x0801066c
 8005310:	0801073c 	.word	0x0801073c
 8005314:	08010754 	.word	0x08010754

08005318 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <pbuf_add_header_impl+0x22>
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <pbuf_add_header_impl+0xc4>)
 800532e:	f240 12df 	movw	r2, #479	; 0x1df
 8005332:	492b      	ldr	r1, [pc, #172]	; (80053e0 <pbuf_add_header_impl+0xc8>)
 8005334:	482b      	ldr	r0, [pc, #172]	; (80053e4 <pbuf_add_header_impl+0xcc>)
 8005336:	f009 fb3d 	bl	800e9b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <pbuf_add_header_impl+0x30>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005346:	d301      	bcc.n	800534c <pbuf_add_header_impl+0x34>
    return 1;
 8005348:	2301      	movs	r3, #1
 800534a:	e043      	b.n	80053d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <pbuf_add_header_impl+0x3e>
    return 0;
 8005352:	2300      	movs	r3, #0
 8005354:	e03e      	b.n	80053d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	891a      	ldrh	r2, [r3, #8]
 800535e:	8a7b      	ldrh	r3, [r7, #18]
 8005360:	4413      	add	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	8a7a      	ldrh	r2, [r7, #18]
 8005366:	429a      	cmp	r2, r3
 8005368:	d901      	bls.n	800536e <pbuf_add_header_impl+0x56>
    return 1;
 800536a:	2301      	movs	r3, #1
 800536c:	e032      	b.n	80053d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	7b1b      	ldrb	r3, [r3, #12]
 8005372:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005374:	8a3b      	ldrh	r3, [r7, #16]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	425b      	negs	r3, r3
 8005386:	4413      	add	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3310      	adds	r3, #16
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	429a      	cmp	r2, r3
 8005392:	d20d      	bcs.n	80053b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005394:	2301      	movs	r3, #1
 8005396:	e01d      	b.n	80053d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	425b      	negs	r3, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e001      	b.n	80053b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e011      	b.n	80053d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	895a      	ldrh	r2, [r3, #10]
 80053ba:	8a7b      	ldrh	r3, [r7, #18]
 80053bc:	4413      	add	r3, r2
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	891a      	ldrh	r2, [r3, #8]
 80053c8:	8a7b      	ldrh	r3, [r7, #18]
 80053ca:	4413      	add	r3, r2
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	811a      	strh	r2, [r3, #8]


  return 0;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	0801060c 	.word	0x0801060c
 80053e0:	08010770 	.word	0x08010770
 80053e4:	0801066c 	.word	0x0801066c

080053e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80053f2:	2200      	movs	r2, #0
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff8e 	bl	8005318 <pbuf_add_header_impl>
 80053fc:	4603      	mov	r3, r0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <pbuf_remove_header+0x1e>
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <pbuf_remove_header+0x94>)
 800541a:	f240 224b 	movw	r2, #587	; 0x24b
 800541e:	4920      	ldr	r1, [pc, #128]	; (80054a0 <pbuf_remove_header+0x98>)
 8005420:	4820      	ldr	r0, [pc, #128]	; (80054a4 <pbuf_remove_header+0x9c>)
 8005422:	f009 fac7 	bl	800e9b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <pbuf_remove_header+0x2c>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d301      	bcc.n	8005438 <pbuf_remove_header+0x30>
    return 1;
 8005434:	2301      	movs	r3, #1
 8005436:	e02c      	b.n	8005492 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <pbuf_remove_header+0x3a>
    return 0;
 800543e:	2300      	movs	r3, #0
 8005440:	e027      	b.n	8005492 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	895b      	ldrh	r3, [r3, #10]
 800544a:	89fa      	ldrh	r2, [r7, #14]
 800544c:	429a      	cmp	r2, r3
 800544e:	d908      	bls.n	8005462 <pbuf_remove_header+0x5a>
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <pbuf_remove_header+0x94>)
 8005452:	f240 2255 	movw	r2, #597	; 0x255
 8005456:	4914      	ldr	r1, [pc, #80]	; (80054a8 <pbuf_remove_header+0xa0>)
 8005458:	4812      	ldr	r0, [pc, #72]	; (80054a4 <pbuf_remove_header+0x9c>)
 800545a:	f009 faab 	bl	800e9b4 <iprintf>
 800545e:	2301      	movs	r3, #1
 8005460:	e017      	b.n	8005492 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	895a      	ldrh	r2, [r3, #10]
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	891a      	ldrh	r2, [r3, #8]
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	0801060c 	.word	0x0801060c
 80054a0:	08010770 	.word	0x08010770
 80054a4:	0801066c 	.word	0x0801066c
 80054a8:	0801077c 	.word	0x0801077c

080054ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
 80054b8:	4613      	mov	r3, r2
 80054ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80054bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da08      	bge.n	80054d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80054c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054c8:	425b      	negs	r3, r3
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ff9b 	bl	8005408 <pbuf_remove_header>
 80054d2:	4603      	mov	r3, r0
 80054d4:	e007      	b.n	80054e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80054d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054da:	787a      	ldrb	r2, [r7, #1]
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff1a 	bl	8005318 <pbuf_add_header_impl>
 80054e4:	4603      	mov	r3, r0
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80054fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054fe:	2201      	movs	r2, #1
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff ffd2 	bl	80054ac <pbuf_header_impl>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <pbuf_free+0x22>
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <pbuf_free+0xf8>)
 800552a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800552e:	4938      	ldr	r1, [pc, #224]	; (8005610 <pbuf_free+0xfc>)
 8005530:	4838      	ldr	r0, [pc, #224]	; (8005614 <pbuf_free+0x100>)
 8005532:	f009 fa3f 	bl	800e9b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005536:	2300      	movs	r3, #0
 8005538:	e063      	b.n	8005602 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800553e:	e05c      	b.n	80055fa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7b9b      	ldrb	r3, [r3, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <pbuf_free+0x42>
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <pbuf_free+0xf8>)
 800554a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800554e:	4932      	ldr	r1, [pc, #200]	; (8005618 <pbuf_free+0x104>)
 8005550:	4830      	ldr	r0, [pc, #192]	; (8005614 <pbuf_free+0x100>)
 8005552:	f009 fa2f 	bl	800e9b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7b9b      	ldrb	r3, [r3, #14]
 800555a:	3b01      	subs	r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	739a      	strb	r2, [r3, #14]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7b9b      	ldrb	r3, [r3, #14]
 8005566:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005568:	7dbb      	ldrb	r3, [r7, #22]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d143      	bne.n	80055f6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7b1b      	ldrb	r3, [r3, #12]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7b5b      	ldrb	r3, [r3, #13]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d011      	beq.n	80055ae <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <pbuf_free+0x90>
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <pbuf_free+0xf8>)
 8005598:	f240 22ff 	movw	r2, #767	; 0x2ff
 800559c:	491f      	ldr	r1, [pc, #124]	; (800561c <pbuf_free+0x108>)
 800559e:	481d      	ldr	r0, [pc, #116]	; (8005614 <pbuf_free+0x100>)
 80055a0:	f009 fa08 	bl	800e9b4 <iprintf>
        pc->custom_free_function(p);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	e01d      	b.n	80055ea <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d104      	bne.n	80055be <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	2008      	movs	r0, #8
 80055b8:	f7ff f936 	bl	8004828 <memp_free>
 80055bc:	e015      	b.n	80055ea <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d104      	bne.n	80055ce <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	2007      	movs	r0, #7
 80055c8:	f7ff f92e 	bl	8004828 <memp_free>
 80055cc:	e00d      	b.n	80055ea <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d103      	bne.n	80055dc <pbuf_free+0xc8>
          mem_free(p);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fe fe07 	bl	80041e8 <mem_free>
 80055da:	e006      	b.n	80055ea <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <pbuf_free+0xf8>)
 80055de:	f240 320f 	movw	r2, #783	; 0x30f
 80055e2:	490f      	ldr	r1, [pc, #60]	; (8005620 <pbuf_free+0x10c>)
 80055e4:	480b      	ldr	r0, [pc, #44]	; (8005614 <pbuf_free+0x100>)
 80055e6:	f009 f9e5 	bl	800e9b4 <iprintf>
        }
      }
      count++;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	3301      	adds	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e001      	b.n	80055fa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d19f      	bne.n	8005540 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	0801060c 	.word	0x0801060c
 8005610:	08010770 	.word	0x08010770
 8005614:	0801066c 	.word	0x0801066c
 8005618:	0801079c 	.word	0x0801079c
 800561c:	080107b4 	.word	0x080107b4
 8005620:	080107d8 	.word	0x080107d8

08005624 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005630:	e005      	b.n	800563e <pbuf_clen+0x1a>
    ++len;
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	3301      	adds	r3, #1
 8005636:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f6      	bne.n	8005632 <pbuf_clen+0xe>
  }
  return len;
 8005644:	89fb      	ldrh	r3, [r7, #14]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d010      	beq.n	8005684 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	7b9b      	ldrb	r3, [r3, #14]
 8005666:	3301      	adds	r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7b9b      	ldrb	r3, [r3, #14]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <pbuf_ref+0x30>
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <pbuf_ref+0x38>)
 8005678:	f240 3242 	movw	r2, #834	; 0x342
 800567c:	4904      	ldr	r1, [pc, #16]	; (8005690 <pbuf_ref+0x3c>)
 800567e:	4805      	ldr	r0, [pc, #20]	; (8005694 <pbuf_ref+0x40>)
 8005680:	f009 f998 	bl	800e9b4 <iprintf>
  }
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0801060c 	.word	0x0801060c
 8005690:	080107ec 	.word	0x080107ec
 8005694:	0801066c 	.word	0x0801066c

08005698 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <pbuf_cat+0x16>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <pbuf_cat+0x26>
 80056ae:	4b20      	ldr	r3, [pc, #128]	; (8005730 <pbuf_cat+0x98>)
 80056b0:	f240 3259 	movw	r2, #857	; 0x359
 80056b4:	491f      	ldr	r1, [pc, #124]	; (8005734 <pbuf_cat+0x9c>)
 80056b6:	4820      	ldr	r0, [pc, #128]	; (8005738 <pbuf_cat+0xa0>)
 80056b8:	f009 f97c 	bl	800e9b4 <iprintf>
 80056bc:	e034      	b.n	8005728 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e00a      	b.n	80056da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	891a      	ldrh	r2, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	891b      	ldrh	r3, [r3, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	891a      	ldrh	r2, [r3, #8]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	895b      	ldrh	r3, [r3, #10]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d006      	beq.n	80056fc <pbuf_cat+0x64>
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <pbuf_cat+0x98>)
 80056f0:	f240 3262 	movw	r2, #866	; 0x362
 80056f4:	4911      	ldr	r1, [pc, #68]	; (800573c <pbuf_cat+0xa4>)
 80056f6:	4810      	ldr	r0, [pc, #64]	; (8005738 <pbuf_cat+0xa0>)
 80056f8:	f009 f95c 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <pbuf_cat+0x7a>
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <pbuf_cat+0x98>)
 8005706:	f240 3263 	movw	r2, #867	; 0x363
 800570a:	490d      	ldr	r1, [pc, #52]	; (8005740 <pbuf_cat+0xa8>)
 800570c:	480a      	ldr	r0, [pc, #40]	; (8005738 <pbuf_cat+0xa0>)
 800570e:	f009 f951 	bl	800e9b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	891a      	ldrh	r2, [r3, #8]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	891b      	ldrh	r3, [r3, #8]
 800571a:	4413      	add	r3, r2
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	0801060c 	.word	0x0801060c
 8005734:	08010800 	.word	0x08010800
 8005738:	0801066c 	.word	0x0801066c
 800573c:	08010838 	.word	0x08010838
 8005740:	08010868 	.word	0x08010868

08005744 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ffa1 	bl	8005698 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005756:	6838      	ldr	r0, [r7, #0]
 8005758:	f7ff ff7c 	bl	8005654 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <pbuf_copy+0x2a>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <pbuf_copy+0x2a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	891a      	ldrh	r2, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	891b      	ldrh	r3, [r3, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d209      	bcs.n	80057a2 <pbuf_copy+0x3e>
 800578e:	4b57      	ldr	r3, [pc, #348]	; (80058ec <pbuf_copy+0x188>)
 8005790:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005794:	4956      	ldr	r1, [pc, #344]	; (80058f0 <pbuf_copy+0x18c>)
 8005796:	4857      	ldr	r0, [pc, #348]	; (80058f4 <pbuf_copy+0x190>)
 8005798:	f009 f90c 	bl	800e9b4 <iprintf>
 800579c:	f06f 030f 	mvn.w	r3, #15
 80057a0:	e09f      	b.n	80058e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	461a      	mov	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad2      	subs	r2, r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	4619      	mov	r1, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1acb      	subs	r3, r1, r3
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d306      	bcc.n	80057c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	461a      	mov	r2, r3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e005      	b.n	80057d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	895b      	ldrh	r3, [r3, #10]
 80057cc:	461a      	mov	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	18d0      	adds	r0, r2, r3
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4619      	mov	r1, r3
 80057e8:	f009 f8b4 	bl	800e954 <memcpy>
    offset_to += len;
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	895b      	ldrh	r3, [r3, #10]
 8005800:	461a      	mov	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4293      	cmp	r3, r2
 8005806:	d906      	bls.n	8005816 <pbuf_copy+0xb2>
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <pbuf_copy+0x188>)
 800580a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800580e:	493a      	ldr	r1, [pc, #232]	; (80058f8 <pbuf_copy+0x194>)
 8005810:	4838      	ldr	r0, [pc, #224]	; (80058f4 <pbuf_copy+0x190>)
 8005812:	f009 f8cf 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	895b      	ldrh	r3, [r3, #10]
 800581a:	461a      	mov	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4293      	cmp	r3, r2
 8005820:	d906      	bls.n	8005830 <pbuf_copy+0xcc>
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <pbuf_copy+0x188>)
 8005824:	f240 32da 	movw	r2, #986	; 0x3da
 8005828:	4934      	ldr	r1, [pc, #208]	; (80058fc <pbuf_copy+0x198>)
 800582a:	4832      	ldr	r0, [pc, #200]	; (80058f4 <pbuf_copy+0x190>)
 800582c:	f009 f8c2 	bl	800e9b4 <iprintf>
    if (offset_from >= p_from->len) {
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	895b      	ldrh	r3, [r3, #10]
 8005834:	461a      	mov	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4293      	cmp	r3, r2
 800583a:	d304      	bcc.n	8005846 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	895b      	ldrh	r3, [r3, #10]
 800584a:	461a      	mov	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4293      	cmp	r3, r2
 8005850:	d114      	bne.n	800587c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10c      	bne.n	800587c <pbuf_copy+0x118>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <pbuf_copy+0x118>
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <pbuf_copy+0x188>)
 800586a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800586e:	4924      	ldr	r1, [pc, #144]	; (8005900 <pbuf_copy+0x19c>)
 8005870:	4820      	ldr	r0, [pc, #128]	; (80058f4 <pbuf_copy+0x190>)
 8005872:	f009 f89f 	bl	800e9b4 <iprintf>
 8005876:	f06f 030f 	mvn.w	r3, #15
 800587a:	e032      	b.n	80058e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d013      	beq.n	80058aa <pbuf_copy+0x146>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	895a      	ldrh	r2, [r3, #10]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	891b      	ldrh	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d10d      	bne.n	80058aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <pbuf_copy+0x146>
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <pbuf_copy+0x188>)
 8005898:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800589c:	4919      	ldr	r1, [pc, #100]	; (8005904 <pbuf_copy+0x1a0>)
 800589e:	4815      	ldr	r0, [pc, #84]	; (80058f4 <pbuf_copy+0x190>)
 80058a0:	f009 f888 	bl	800e9b4 <iprintf>
 80058a4:	f06f 0305 	mvn.w	r3, #5
 80058a8:	e01b      	b.n	80058e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <pbuf_copy+0x174>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	895a      	ldrh	r2, [r3, #10]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	891b      	ldrh	r3, [r3, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d10d      	bne.n	80058d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <pbuf_copy+0x174>
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <pbuf_copy+0x188>)
 80058c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80058ca:	490e      	ldr	r1, [pc, #56]	; (8005904 <pbuf_copy+0x1a0>)
 80058cc:	4809      	ldr	r0, [pc, #36]	; (80058f4 <pbuf_copy+0x190>)
 80058ce:	f009 f871 	bl	800e9b4 <iprintf>
 80058d2:	f06f 0305 	mvn.w	r3, #5
 80058d6:	e004      	b.n	80058e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f47f af61 	bne.w	80057a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	0801060c 	.word	0x0801060c
 80058f0:	080108b4 	.word	0x080108b4
 80058f4:	0801066c 	.word	0x0801066c
 80058f8:	080108e4 	.word	0x080108e4
 80058fc:	080108fc 	.word	0x080108fc
 8005900:	08010918 	.word	0x08010918
 8005904:	08010928 	.word	0x08010928

08005908 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4611      	mov	r1, r2
 8005914:	461a      	mov	r2, r3
 8005916:	460b      	mov	r3, r1
 8005918:	80fb      	strh	r3, [r7, #6]
 800591a:	4613      	mov	r3, r2
 800591c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <pbuf_copy_partial+0x36>
 800592c:	4b2b      	ldr	r3, [pc, #172]	; (80059dc <pbuf_copy_partial+0xd4>)
 800592e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005932:	492b      	ldr	r1, [pc, #172]	; (80059e0 <pbuf_copy_partial+0xd8>)
 8005934:	482b      	ldr	r0, [pc, #172]	; (80059e4 <pbuf_copy_partial+0xdc>)
 8005936:	f009 f83d 	bl	800e9b4 <iprintf>
 800593a:	2300      	movs	r3, #0
 800593c:	e04a      	b.n	80059d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d108      	bne.n	8005956 <pbuf_copy_partial+0x4e>
 8005944:	4b25      	ldr	r3, [pc, #148]	; (80059dc <pbuf_copy_partial+0xd4>)
 8005946:	f240 420b 	movw	r2, #1035	; 0x40b
 800594a:	4927      	ldr	r1, [pc, #156]	; (80059e8 <pbuf_copy_partial+0xe0>)
 800594c:	4825      	ldr	r0, [pc, #148]	; (80059e4 <pbuf_copy_partial+0xdc>)
 800594e:	f009 f831 	bl	800e9b4 <iprintf>
 8005952:	2300      	movs	r3, #0
 8005954:	e03e      	b.n	80059d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e034      	b.n	80059c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <pbuf_copy_partial+0x70>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	88ba      	ldrh	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d305      	bcc.n	8005978 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	895b      	ldrh	r3, [r3, #10]
 8005970:	88ba      	ldrh	r2, [r7, #4]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	80bb      	strh	r3, [r7, #4]
 8005976:	e023      	b.n	80059c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	895a      	ldrh	r2, [r3, #10]
 800597c:	88bb      	ldrh	r3, [r7, #4]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005982:	8b3a      	ldrh	r2, [r7, #24]
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	429a      	cmp	r2, r3
 8005988:	d901      	bls.n	800598e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800598e:	8b7b      	ldrh	r3, [r7, #26]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	18d0      	adds	r0, r2, r3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	88bb      	ldrh	r3, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	8b3a      	ldrh	r2, [r7, #24]
 800599e:	4619      	mov	r1, r3
 80059a0:	f008 ffd8 	bl	800e954 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80059a4:	8afa      	ldrh	r2, [r7, #22]
 80059a6:	8b3b      	ldrh	r3, [r7, #24]
 80059a8:	4413      	add	r3, r2
 80059aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80059ac:	8b7a      	ldrh	r2, [r7, #26]
 80059ae:	8b3b      	ldrh	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	8b3b      	ldrh	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <pbuf_copy_partial+0xca>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1c4      	bne.n	800595c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80059d2:	8afb      	ldrh	r3, [r7, #22]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	0801060c 	.word	0x0801060c
 80059e0:	08010954 	.word	0x08010954
 80059e4:	0801066c 	.word	0x0801066c
 80059e8:	08010974 	.word	0x08010974

080059ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	603a      	str	r2, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
 80059f8:	460b      	mov	r3, r1
 80059fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	8919      	ldrh	r1, [r3, #8]
 8005a00:	88ba      	ldrh	r2, [r7, #4]
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff faa1 	bl	8004f4c <pbuf_alloc>
 8005a0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <pbuf_clone+0x2a>
    return NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e011      	b.n	8005a3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff fea3 	bl	8005764 <pbuf_copy>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005a22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <pbuf_clone+0x4c>
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <pbuf_clone+0x58>)
 8005a2c:	f240 5224 	movw	r2, #1316	; 0x524
 8005a30:	4905      	ldr	r1, [pc, #20]	; (8005a48 <pbuf_clone+0x5c>)
 8005a32:	4806      	ldr	r0, [pc, #24]	; (8005a4c <pbuf_clone+0x60>)
 8005a34:	f008 ffbe 	bl	800e9b4 <iprintf>
  return q;
 8005a38:	68fb      	ldr	r3, [r7, #12]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	0801060c 	.word	0x0801060c
 8005a48:	08010a80 	.word	0x08010a80
 8005a4c:	0801066c 	.word	0x0801066c

08005a50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005a54:	f009 f83c 	bl	800ead0 <rand>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	4b01      	ldr	r3, [pc, #4]	; (8005a70 <tcp_init+0x20>)
 8005a6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000000a 	.word	0x2000000a

08005a74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7d1b      	ldrb	r3, [r3, #20]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d105      	bne.n	8005a90 <tcp_free+0x1c>
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <tcp_free+0x2c>)
 8005a86:	22d4      	movs	r2, #212	; 0xd4
 8005a88:	4906      	ldr	r1, [pc, #24]	; (8005aa4 <tcp_free+0x30>)
 8005a8a:	4807      	ldr	r0, [pc, #28]	; (8005aa8 <tcp_free+0x34>)
 8005a8c:	f008 ff92 	bl	800e9b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	2001      	movs	r0, #1
 8005a94:	f7fe fec8 	bl	8004828 <memp_free>
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	08010b0c 	.word	0x08010b0c
 8005aa4:	08010b3c 	.word	0x08010b3c
 8005aa8:	08010b50 	.word	0x08010b50

08005aac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7d1b      	ldrb	r3, [r3, #20]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <tcp_free_listen+0x1c>
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <tcp_free_listen+0x2c>)
 8005abe:	22df      	movs	r2, #223	; 0xdf
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <tcp_free_listen+0x30>)
 8005ac2:	4807      	ldr	r0, [pc, #28]	; (8005ae0 <tcp_free_listen+0x34>)
 8005ac4:	f008 ff76 	bl	800e9b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	2002      	movs	r0, #2
 8005acc:	f7fe feac 	bl	8004828 <memp_free>
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	08010b0c 	.word	0x08010b0c
 8005adc:	08010b78 	.word	0x08010b78
 8005ae0:	08010b50 	.word	0x08010b50

08005ae4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005ae8:	f001 f85c 	bl	8006ba4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <tcp_tmr+0x28>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <tcp_tmr+0x28>)
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <tcp_tmr+0x28>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005b04:	f000 fd0e 	bl	8006524 <tcp_slowtmr>
  }
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	2000895d 	.word	0x2000895d

08005b10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <tcp_remove_listener+0x1c>
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <tcp_remove_listener+0x48>)
 8005b22:	22ff      	movs	r2, #255	; 0xff
 8005b24:	490d      	ldr	r1, [pc, #52]	; (8005b5c <tcp_remove_listener+0x4c>)
 8005b26:	480e      	ldr	r0, [pc, #56]	; (8005b60 <tcp_remove_listener+0x50>)
 8005b28:	f008 ff44 	bl	800e9b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e00a      	b.n	8005b48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d102      	bne.n	8005b42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f1      	bne.n	8005b32 <tcp_remove_listener+0x22>
    }
  }
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08010b0c 	.word	0x08010b0c
 8005b5c:	08010b94 	.word	0x08010b94
 8005b60:	08010b50 	.word	0x08010b50

08005b64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <tcp_listen_closed+0x1c>
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <tcp_listen_closed+0x60>)
 8005b74:	f240 1211 	movw	r2, #273	; 0x111
 8005b78:	4913      	ldr	r1, [pc, #76]	; (8005bc8 <tcp_listen_closed+0x64>)
 8005b7a:	4814      	ldr	r0, [pc, #80]	; (8005bcc <tcp_listen_closed+0x68>)
 8005b7c:	f008 ff1a 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7d1b      	ldrb	r3, [r3, #20]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d006      	beq.n	8005b96 <tcp_listen_closed+0x32>
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <tcp_listen_closed+0x60>)
 8005b8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005b8e:	4910      	ldr	r1, [pc, #64]	; (8005bd0 <tcp_listen_closed+0x6c>)
 8005b90:	480e      	ldr	r0, [pc, #56]	; (8005bcc <tcp_listen_closed+0x68>)
 8005b92:	f008 ff0f 	bl	800e9b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b96:	2301      	movs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e00b      	b.n	8005bb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <tcp_listen_closed+0x70>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ffb1 	bl	8005b10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d9f0      	bls.n	8005b9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	08010b0c 	.word	0x08010b0c
 8005bc8:	08010bbc 	.word	0x08010bbc
 8005bcc:	08010b50 	.word	0x08010b50
 8005bd0:	08010bc8 	.word	0x08010bc8
 8005bd4:	08012b58 	.word	0x08012b58

08005bd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af04      	add	r7, sp, #16
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <tcp_close_shutdown+0x20>
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <tcp_close_shutdown+0x1a0>)
 8005bec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005bf0:	4962      	ldr	r1, [pc, #392]	; (8005d7c <tcp_close_shutdown+0x1a4>)
 8005bf2:	4863      	ldr	r0, [pc, #396]	; (8005d80 <tcp_close_shutdown+0x1a8>)
 8005bf4:	f008 fede 	bl	800e9b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d066      	beq.n	8005ccc <tcp_close_shutdown+0xf4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7d1b      	ldrb	r3, [r3, #20]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <tcp_close_shutdown+0x36>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7d1b      	ldrb	r3, [r3, #20]
 8005c0a:	2b07      	cmp	r3, #7
 8005c0c:	d15e      	bne.n	8005ccc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <tcp_close_shutdown+0x48>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005c1e:	d055      	beq.n	8005ccc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8b5b      	ldrh	r3, [r3, #26]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <tcp_close_shutdown+0x62>
 8005c2c:	4b52      	ldr	r3, [pc, #328]	; (8005d78 <tcp_close_shutdown+0x1a0>)
 8005c2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005c32:	4954      	ldr	r1, [pc, #336]	; (8005d84 <tcp_close_shutdown+0x1ac>)
 8005c34:	4852      	ldr	r0, [pc, #328]	; (8005d80 <tcp_close_shutdown+0x1a8>)
 8005c36:	f008 febd 	bl	800e9b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c42:	687d      	ldr	r5, [r7, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	8ad2      	ldrh	r2, [r2, #22]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	8b09      	ldrh	r1, [r1, #24]
 8005c50:	9102      	str	r1, [sp, #8]
 8005c52:	9201      	str	r2, [sp, #4]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	462b      	mov	r3, r5
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f005 fdf5 	bl	800b84c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fb66 	bl	8007334 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005c68:	4b47      	ldr	r3, [pc, #284]	; (8005d88 <tcp_close_shutdown+0x1b0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d105      	bne.n	8005c7e <tcp_close_shutdown+0xa6>
 8005c72:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <tcp_close_shutdown+0x1b0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a43      	ldr	r2, [pc, #268]	; (8005d88 <tcp_close_shutdown+0x1b0>)
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e013      	b.n	8005ca6 <tcp_close_shutdown+0xce>
 8005c7e:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <tcp_close_shutdown+0x1b0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e00c      	b.n	8005ca0 <tcp_close_shutdown+0xc8>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d104      	bne.n	8005c9a <tcp_close_shutdown+0xc2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e005      	b.n	8005ca6 <tcp_close_shutdown+0xce>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ef      	bne.n	8005c86 <tcp_close_shutdown+0xae>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <tcp_close_shutdown+0x1b4>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005cb2:	4b37      	ldr	r3, [pc, #220]	; (8005d90 <tcp_close_shutdown+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d102      	bne.n	8005cc2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005cbc:	f003 fffe 	bl	8009cbc <tcp_trigger_input_pcb_close>
 8005cc0:	e002      	b.n	8005cc8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fed6 	bl	8005a74 <tcp_free>
      }
      return ERR_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e050      	b.n	8005d6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7d1b      	ldrb	r3, [r3, #20]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d03b      	beq.n	8005d4c <tcp_close_shutdown+0x174>
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	dc44      	bgt.n	8005d62 <tcp_close_shutdown+0x18a>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <tcp_close_shutdown+0x10a>
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d02a      	beq.n	8005d36 <tcp_close_shutdown+0x15e>
 8005ce0:	e03f      	b.n	8005d62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8adb      	ldrh	r3, [r3, #22]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d021      	beq.n	8005d2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005cea:	4b2a      	ldr	r3, [pc, #168]	; (8005d94 <tcp_close_shutdown+0x1bc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d105      	bne.n	8005d00 <tcp_close_shutdown+0x128>
 8005cf4:	4b27      	ldr	r3, [pc, #156]	; (8005d94 <tcp_close_shutdown+0x1bc>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <tcp_close_shutdown+0x1bc>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e013      	b.n	8005d28 <tcp_close_shutdown+0x150>
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <tcp_close_shutdown+0x1bc>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	e00c      	b.n	8005d22 <tcp_close_shutdown+0x14a>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d104      	bne.n	8005d1c <tcp_close_shutdown+0x144>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	e005      	b.n	8005d28 <tcp_close_shutdown+0x150>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ef      	bne.n	8005d08 <tcp_close_shutdown+0x130>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fea0 	bl	8005a74 <tcp_free>
      break;
 8005d34:	e01a      	b.n	8005d6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ff14 	bl	8005b64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4816      	ldr	r0, [pc, #88]	; (8005d98 <tcp_close_shutdown+0x1c0>)
 8005d40:	f001 fb48 	bl	80073d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff feb1 	bl	8005aac <tcp_free_listen>
      break;
 8005d4a:	e00f      	b.n	8005d6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	480e      	ldr	r0, [pc, #56]	; (8005d88 <tcp_close_shutdown+0x1b0>)
 8005d50:	f001 fb40 	bl	80073d4 <tcp_pcb_remove>
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <tcp_close_shutdown+0x1b4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fe8a 	bl	8005a74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005d60:	e004      	b.n	8005d6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f81a 	bl	8005d9c <tcp_close_shutdown_fin>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e000      	b.n	8005d6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08010b0c 	.word	0x08010b0c
 8005d7c:	08010be0 	.word	0x08010be0
 8005d80:	08010b50 	.word	0x08010b50
 8005d84:	08010c00 	.word	0x08010c00
 8005d88:	20008954 	.word	0x20008954
 8005d8c:	2000895c 	.word	0x2000895c
 8005d90:	20008998 	.word	0x20008998
 8005d94:	2000894c 	.word	0x2000894c
 8005d98:	20008950 	.word	0x20008950

08005d9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <tcp_close_shutdown_fin+0x1c>
 8005daa:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <tcp_close_shutdown_fin+0xc8>)
 8005dac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005db0:	492d      	ldr	r1, [pc, #180]	; (8005e68 <tcp_close_shutdown_fin+0xcc>)
 8005db2:	482e      	ldr	r0, [pc, #184]	; (8005e6c <tcp_close_shutdown_fin+0xd0>)
 8005db4:	f008 fdfe 	bl	800e9b4 <iprintf>

  switch (pcb->state) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7d1b      	ldrb	r3, [r3, #20]
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d020      	beq.n	8005e02 <tcp_close_shutdown_fin+0x66>
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	dc2b      	bgt.n	8005e1c <tcp_close_shutdown_fin+0x80>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d002      	beq.n	8005dce <tcp_close_shutdown_fin+0x32>
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d00d      	beq.n	8005de8 <tcp_close_shutdown_fin+0x4c>
 8005dcc:	e026      	b.n	8005e1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f004 fe3e 	bl	800aa50 <tcp_send_fin>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d11f      	bne.n	8005e20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2205      	movs	r2, #5
 8005de4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005de6:	e01b      	b.n	8005e20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f004 fe31 	bl	800aa50 <tcp_send_fin>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d114      	bne.n	8005e24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e00:	e010      	b.n	8005e24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f004 fe24 	bl	800aa50 <tcp_send_fin>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2209      	movs	r2, #9
 8005e18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e1a:	e005      	b.n	8005e28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e01c      	b.n	8005e5a <tcp_close_shutdown_fin+0xbe>
      break;
 8005e20:	bf00      	nop
 8005e22:	e002      	b.n	8005e2a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f004 ff4a 	bl	800accc <tcp_output>
 8005e38:	e00d      	b.n	8005e56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d108      	bne.n	8005e56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8b5b      	ldrh	r3, [r3, #26]
 8005e48:	f043 0308 	orr.w	r3, r3, #8
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e001      	b.n	8005e5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	08010b0c 	.word	0x08010b0c
 8005e68:	08010bbc 	.word	0x08010bbc
 8005e6c:	08010b50 	.word	0x08010b50

08005e70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <tcp_close+0x22>
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <tcp_close+0x4c>)
 8005e80:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005e84:	490e      	ldr	r1, [pc, #56]	; (8005ec0 <tcp_close+0x50>)
 8005e86:	480f      	ldr	r0, [pc, #60]	; (8005ec4 <tcp_close+0x54>)
 8005e88:	f008 fd94 	bl	800e9b4 <iprintf>
 8005e8c:	f06f 030f 	mvn.w	r3, #15
 8005e90:	e00f      	b.n	8005eb2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	7d1b      	ldrb	r3, [r3, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d006      	beq.n	8005ea8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8b5b      	ldrh	r3, [r3, #26]
 8005e9e:	f043 0310 	orr.w	r3, r3, #16
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fe94 	bl	8005bd8 <tcp_close_shutdown>
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08010b0c 	.word	0x08010b0c
 8005ec0:	08010c1c 	.word	0x08010c1c
 8005ec4:	08010b50 	.word	0x08010b50

08005ec8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08e      	sub	sp, #56	; 0x38
 8005ecc:	af04      	add	r7, sp, #16
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <tcp_abandon+0x20>
 8005ed8:	4b52      	ldr	r3, [pc, #328]	; (8006024 <tcp_abandon+0x15c>)
 8005eda:	f240 223d 	movw	r2, #573	; 0x23d
 8005ede:	4952      	ldr	r1, [pc, #328]	; (8006028 <tcp_abandon+0x160>)
 8005ee0:	4852      	ldr	r0, [pc, #328]	; (800602c <tcp_abandon+0x164>)
 8005ee2:	f008 fd67 	bl	800e9b4 <iprintf>
 8005ee6:	e099      	b.n	800601c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7d1b      	ldrb	r3, [r3, #20]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d106      	bne.n	8005efe <tcp_abandon+0x36>
 8005ef0:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <tcp_abandon+0x15c>)
 8005ef2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005ef6:	494e      	ldr	r1, [pc, #312]	; (8006030 <tcp_abandon+0x168>)
 8005ef8:	484c      	ldr	r0, [pc, #304]	; (800602c <tcp_abandon+0x164>)
 8005efa:	f008 fd5b 	bl	800e9b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	2b0a      	cmp	r3, #10
 8005f04:	d107      	bne.n	8005f16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	484a      	ldr	r0, [pc, #296]	; (8006034 <tcp_abandon+0x16c>)
 8005f0a:	f001 fa63 	bl	80073d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff fdb0 	bl	8005a74 <tcp_free>
 8005f14:	e082      	b.n	800601c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	7d1b      	ldrb	r3, [r3, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d126      	bne.n	8005f8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8adb      	ldrh	r3, [r3, #22]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02e      	beq.n	8005fa6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f48:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <tcp_abandon+0x170>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d105      	bne.n	8005f5e <tcp_abandon+0x96>
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <tcp_abandon+0x170>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a37      	ldr	r2, [pc, #220]	; (8006038 <tcp_abandon+0x170>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e013      	b.n	8005f86 <tcp_abandon+0xbe>
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <tcp_abandon+0x170>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e00c      	b.n	8005f80 <tcp_abandon+0xb8>
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d104      	bne.n	8005f7a <tcp_abandon+0xb2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e005      	b.n	8005f86 <tcp_abandon+0xbe>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ef      	bne.n	8005f66 <tcp_abandon+0x9e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	e00b      	b.n	8005fa6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8adb      	ldrh	r3, [r3, #22]
 8005f96:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4828      	ldr	r0, [pc, #160]	; (800603c <tcp_abandon+0x174>)
 8005f9c:	f001 fa1a 	bl	80073d4 <tcp_pcb_remove>
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <tcp_abandon+0x178>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fed6 	bl	8006d64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fecd 	bl	8006d64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fec4 	bl	8006d64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	8b12      	ldrh	r2, [r2, #24]
 8005fec:	9202      	str	r2, [sp, #8]
 8005fee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005ff0:	9201      	str	r2, [sp, #4]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f005 fc26 	bl	800b84c <tcp_rst>
    }
    last_state = pcb->state;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7d1b      	ldrb	r3, [r3, #20]
 8006004:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fd34 	bl	8005a74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <tcp_abandon+0x154>
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f06f 010c 	mvn.w	r1, #12
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3
  }
}
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	08010b0c 	.word	0x08010b0c
 8006028:	08010c50 	.word	0x08010c50
 800602c:	08010b50 	.word	0x08010b50
 8006030:	08010c6c 	.word	0x08010c6c
 8006034:	20008958 	.word	0x20008958
 8006038:	2000894c 	.word	0x2000894c
 800603c:	20008954 	.word	0x20008954
 8006040:	2000895c 	.word	0x2000895c

08006044 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800604c:	2101      	movs	r1, #1
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff3a 	bl	8005ec8 <tcp_abandon>
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800606a:	2304      	movs	r3, #4
 800606c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006074:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <tcp_bind+0x114>)
 8006076:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <tcp_bind+0x36>
 800607e:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <tcp_bind+0x118>)
 8006080:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006084:	493c      	ldr	r1, [pc, #240]	; (8006178 <tcp_bind+0x11c>)
 8006086:	483d      	ldr	r0, [pc, #244]	; (800617c <tcp_bind+0x120>)
 8006088:	f008 fc94 	bl	800e9b4 <iprintf>
 800608c:	f06f 030f 	mvn.w	r3, #15
 8006090:	e06a      	b.n	8006168 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	7d1b      	ldrb	r3, [r3, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <tcp_bind+0x52>
 800609a:	4b36      	ldr	r3, [pc, #216]	; (8006174 <tcp_bind+0x118>)
 800609c:	f240 22ab 	movw	r2, #683	; 0x2ab
 80060a0:	4937      	ldr	r1, [pc, #220]	; (8006180 <tcp_bind+0x124>)
 80060a2:	4836      	ldr	r0, [pc, #216]	; (800617c <tcp_bind+0x120>)
 80060a4:	f008 fc86 	bl	800e9b4 <iprintf>
 80060a8:	f06f 0305 	mvn.w	r3, #5
 80060ac:	e05c      	b.n	8006168 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80060b4:	f000 f9f0 	bl	8006498 <tcp_new_port>
 80060b8:	4603      	mov	r3, r0
 80060ba:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d135      	bne.n	800612e <tcp_bind+0xd2>
      return ERR_BUF;
 80060c2:	f06f 0301 	mvn.w	r3, #1
 80060c6:	e04f      	b.n	8006168 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e02b      	b.n	8006126 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80060ce:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <tcp_bind+0x128>)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e01e      	b.n	800611a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	8adb      	ldrh	r3, [r3, #22]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d116      	bne.n	8006114 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80060e6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <tcp_bind+0xb2>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800610a:	429a      	cmp	r2, r3
 800610c:	d102      	bne.n	8006114 <tcp_bind+0xb8>
              return ERR_USE;
 800610e:	f06f 0307 	mvn.w	r3, #7
 8006112:	e029      	b.n	8006168 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1dd      	bne.n	80060dc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	429a      	cmp	r2, r3
 800612c:	dbcf      	blt.n	80060ce <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <tcp_bind+0xf2>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <tcp_bind+0xec>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	e000      	b.n	800614a <tcp_bind+0xee>
 8006148:	2300      	movs	r3, #0
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <tcp_bind+0x12c>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <tcp_bind+0x12c>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	f005 fd35 	bl	800bbd0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	08012b80 	.word	0x08012b80
 8006174:	08010b0c 	.word	0x08010b0c
 8006178:	08010ca0 	.word	0x08010ca0
 800617c:	08010b50 	.word	0x08010b50
 8006180:	08010cb8 	.word	0x08010cb8
 8006184:	08012b58 	.word	0x08012b58
 8006188:	2000894c 	.word	0x2000894c

0800618c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <tcp_accept_null+0x22>
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <tcp_accept_null+0x34>)
 80061a2:	f240 320f 	movw	r2, #783	; 0x30f
 80061a6:	4907      	ldr	r1, [pc, #28]	; (80061c4 <tcp_accept_null+0x38>)
 80061a8:	4807      	ldr	r0, [pc, #28]	; (80061c8 <tcp_accept_null+0x3c>)
 80061aa:	f008 fc03 	bl	800e9b4 <iprintf>

  tcp_abort(pcb);
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f7ff ff48 	bl	8006044 <tcp_abort>

  return ERR_ABRT;
 80061b4:	f06f 030c 	mvn.w	r3, #12
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	08010b0c 	.word	0x08010b0c
 80061c4:	08010ce0 	.word	0x08010ce0
 80061c8:	08010b50 	.word	0x08010b50

080061cc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2200      	movs	r2, #0
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f806 	bl	80061f0 <tcp_listen_with_backlog_and_err>
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	460b      	mov	r3, r1
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <tcp_listen_with_backlog_and_err+0x2c>
 8006208:	4b47      	ldr	r3, [pc, #284]	; (8006328 <tcp_listen_with_backlog_and_err+0x138>)
 800620a:	f240 3259 	movw	r2, #857	; 0x359
 800620e:	4947      	ldr	r1, [pc, #284]	; (800632c <tcp_listen_with_backlog_and_err+0x13c>)
 8006210:	4847      	ldr	r0, [pc, #284]	; (8006330 <tcp_listen_with_backlog_and_err+0x140>)
 8006212:	f008 fbcf 	bl	800e9b4 <iprintf>
 8006216:	23f0      	movs	r3, #240	; 0xf0
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e079      	b.n	8006310 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7d1b      	ldrb	r3, [r3, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <tcp_listen_with_backlog_and_err+0x48>
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <tcp_listen_with_backlog_and_err+0x138>)
 8006226:	f240 325a 	movw	r2, #858	; 0x35a
 800622a:	4942      	ldr	r1, [pc, #264]	; (8006334 <tcp_listen_with_backlog_and_err+0x144>)
 800622c:	4840      	ldr	r0, [pc, #256]	; (8006330 <tcp_listen_with_backlog_and_err+0x140>)
 800622e:	f008 fbc1 	bl	800e9b4 <iprintf>
 8006232:	23f1      	movs	r3, #241	; 0xf1
 8006234:	76fb      	strb	r3, [r7, #27]
 8006236:	e06b      	b.n	8006310 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7d1b      	ldrb	r3, [r3, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d104      	bne.n	800624a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006244:	23f7      	movs	r3, #247	; 0xf7
 8006246:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006248:	e062      	b.n	8006310 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800624a:	2002      	movs	r0, #2
 800624c:	f7fe faa0 	bl	8004790 <memp_malloc>
 8006250:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006258:	23ff      	movs	r3, #255	; 0xff
 800625a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800625c:	e058      	b.n	8006310 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8ada      	ldrh	r2, [r3, #22]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2201      	movs	r2, #1
 8006272:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	7d5a      	ldrb	r2, [r3, #21]
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	7a5a      	ldrb	r2, [r3, #9]
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2200      	movs	r2, #0
 8006288:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	7ada      	ldrb	r2, [r3, #11]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	7a9a      	ldrb	r2, [r3, #10]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8adb      	ldrh	r3, [r3, #22]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d021      	beq.n	80062ee <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80062aa:	4b23      	ldr	r3, [pc, #140]	; (8006338 <tcp_listen_with_backlog_and_err+0x148>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d105      	bne.n	80062c0 <tcp_listen_with_backlog_and_err+0xd0>
 80062b4:	4b20      	ldr	r3, [pc, #128]	; (8006338 <tcp_listen_with_backlog_and_err+0x148>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <tcp_listen_with_backlog_and_err+0x148>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e013      	b.n	80062e8 <tcp_listen_with_backlog_and_err+0xf8>
 80062c0:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <tcp_listen_with_backlog_and_err+0x148>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e00c      	b.n	80062e2 <tcp_listen_with_backlog_and_err+0xf2>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d104      	bne.n	80062dc <tcp_listen_with_backlog_and_err+0xec>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e005      	b.n	80062e8 <tcp_listen_with_backlog_and_err+0xf8>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ef      	bne.n	80062c8 <tcp_listen_with_backlog_and_err+0xd8>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fbc0 	bl	8005a74 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4a11      	ldr	r2, [pc, #68]	; (800633c <tcp_listen_with_backlog_and_err+0x14c>)
 80062f8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <tcp_listen_with_backlog_and_err+0x150>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <tcp_listen_with_backlog_and_err+0x150>)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	f005 fc62 	bl	800bbd0 <tcp_timer_needed>
  res = ERR_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7efa      	ldrb	r2, [r7, #27]
 800631a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800631c:	69fb      	ldr	r3, [r7, #28]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	08010b0c 	.word	0x08010b0c
 800632c:	08010d00 	.word	0x08010d00
 8006330:	08010b50 	.word	0x08010b50
 8006334:	08010d30 	.word	0x08010d30
 8006338:	2000894c 	.word	0x2000894c
 800633c:	0800618d 	.word	0x0800618d
 8006340:	20008950 	.word	0x20008950

08006344 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <tcp_update_rcv_ann_wnd+0x1c>
 8006352:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006354:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006358:	4924      	ldr	r1, [pc, #144]	; (80063ec <tcp_update_rcv_ann_wnd+0xa8>)
 800635a:	4825      	ldr	r0, [pc, #148]	; (80063f0 <tcp_update_rcv_ann_wnd+0xac>)
 800635c:	f008 fb2a 	bl	800e9b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006368:	4413      	add	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006374:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006378:	bf28      	it	cs
 800637a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800637e:	b292      	uxth	r2, r2
 8006380:	4413      	add	r3, r2
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	db08      	blt.n	800639c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	e020      	b.n	80063de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dd03      	ble.n	80063b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063b0:	e014      	b.n	80063dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d306      	bcc.n	80063d4 <tcp_update_rcv_ann_wnd+0x90>
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <tcp_update_rcv_ann_wnd+0xa4>)
 80063c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80063cc:	4909      	ldr	r1, [pc, #36]	; (80063f4 <tcp_update_rcv_ann_wnd+0xb0>)
 80063ce:	4808      	ldr	r0, [pc, #32]	; (80063f0 <tcp_update_rcv_ann_wnd+0xac>)
 80063d0:	f008 faf0 	bl	800e9b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80063dc:	2300      	movs	r3, #0
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	08010b0c 	.word	0x08010b0c
 80063ec:	08010d68 	.word	0x08010d68
 80063f0:	08010b50 	.word	0x08010b50
 80063f4:	08010d8c 	.word	0x08010d8c

080063f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d107      	bne.n	800641a <tcp_recved+0x22>
 800640a:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <tcp_recved+0x90>)
 800640c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006410:	491e      	ldr	r1, [pc, #120]	; (800648c <tcp_recved+0x94>)
 8006412:	481f      	ldr	r0, [pc, #124]	; (8006490 <tcp_recved+0x98>)
 8006414:	f008 face 	bl	800e9b4 <iprintf>
 8006418:	e032      	b.n	8006480 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7d1b      	ldrb	r3, [r3, #20]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d106      	bne.n	8006430 <tcp_recved+0x38>
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <tcp_recved+0x90>)
 8006424:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006428:	491a      	ldr	r1, [pc, #104]	; (8006494 <tcp_recved+0x9c>)
 800642a:	4819      	ldr	r0, [pc, #100]	; (8006490 <tcp_recved+0x98>)
 800642c:	f008 fac2 	bl	800e9b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006434:	887b      	ldrh	r3, [r7, #2]
 8006436:	4413      	add	r3, r2
 8006438:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006440:	d804      	bhi.n	800644c <tcp_recved+0x54>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	89fa      	ldrh	r2, [r7, #14]
 8006448:	429a      	cmp	r2, r3
 800644a:	d204      	bcs.n	8006456 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006452:	851a      	strh	r2, [r3, #40]	; 0x28
 8006454:	e002      	b.n	800645c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	89fa      	ldrh	r2, [r7, #14]
 800645a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ff71 	bl	8006344 <tcp_update_rcv_ann_wnd>
 8006462:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800646a:	d309      	bcc.n	8006480 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8b5b      	ldrh	r3, [r3, #26]
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f004 fc26 	bl	800accc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	08010b0c 	.word	0x08010b0c
 800648c:	08010da8 	.word	0x08010da8
 8006490:	08010b50 	.word	0x08010b50
 8006494:	08010dc0 	.word	0x08010dc0

08006498 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <tcp_new_port+0x84>)
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	4b1c      	ldr	r3, [pc, #112]	; (800651c <tcp_new_port+0x84>)
 80064ac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <tcp_new_port+0x84>)
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d103      	bne.n	80064c2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <tcp_new_port+0x84>)
 80064bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80064c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80064c2:	2300      	movs	r3, #0
 80064c4:	71fb      	strb	r3, [r7, #7]
 80064c6:	e01e      	b.n	8006506 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	4a15      	ldr	r2, [pc, #84]	; (8006520 <tcp_new_port+0x88>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	e011      	b.n	80064fa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	8ada      	ldrh	r2, [r3, #22]
 80064da:	4b10      	ldr	r3, [pc, #64]	; (800651c <tcp_new_port+0x84>)
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d108      	bne.n	80064f4 <tcp_new_port+0x5c>
        n++;
 80064e2:	88bb      	ldrh	r3, [r7, #4]
 80064e4:	3301      	adds	r3, #1
 80064e6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80064e8:	88bb      	ldrh	r3, [r7, #4]
 80064ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ee:	d3d8      	bcc.n	80064a2 <tcp_new_port+0xa>
          return 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e00d      	b.n	8006510 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1ea      	bne.n	80064d6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	3301      	adds	r3, #1
 8006504:	71fb      	strb	r3, [r7, #7]
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d9dd      	bls.n	80064c8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <tcp_new_port+0x84>)
 800650e:	881b      	ldrh	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	2000000a 	.word	0x2000000a
 8006520:	08012b58 	.word	0x08012b58

08006524 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006524:	b5b0      	push	{r4, r5, r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006530:	4b94      	ldr	r3, [pc, #592]	; (8006784 <tcp_slowtmr+0x260>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a93      	ldr	r2, [pc, #588]	; (8006784 <tcp_slowtmr+0x260>)
 8006538:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800653a:	4b93      	ldr	r3, [pc, #588]	; (8006788 <tcp_slowtmr+0x264>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	b2da      	uxtb	r2, r3
 8006542:	4b91      	ldr	r3, [pc, #580]	; (8006788 <tcp_slowtmr+0x264>)
 8006544:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006546:	2300      	movs	r3, #0
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800654a:	4b90      	ldr	r3, [pc, #576]	; (800678c <tcp_slowtmr+0x268>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006550:	e29d      	b.n	8006a8e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	7d1b      	ldrb	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <tcp_slowtmr+0x44>
 800655a:	4b8d      	ldr	r3, [pc, #564]	; (8006790 <tcp_slowtmr+0x26c>)
 800655c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006560:	498c      	ldr	r1, [pc, #560]	; (8006794 <tcp_slowtmr+0x270>)
 8006562:	488d      	ldr	r0, [pc, #564]	; (8006798 <tcp_slowtmr+0x274>)
 8006564:	f008 fa26 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	7d1b      	ldrb	r3, [r3, #20]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d106      	bne.n	800657e <tcp_slowtmr+0x5a>
 8006570:	4b87      	ldr	r3, [pc, #540]	; (8006790 <tcp_slowtmr+0x26c>)
 8006572:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006576:	4989      	ldr	r1, [pc, #548]	; (800679c <tcp_slowtmr+0x278>)
 8006578:	4887      	ldr	r0, [pc, #540]	; (8006798 <tcp_slowtmr+0x274>)
 800657a:	f008 fa1b 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	7d1b      	ldrb	r3, [r3, #20]
 8006582:	2b0a      	cmp	r3, #10
 8006584:	d106      	bne.n	8006594 <tcp_slowtmr+0x70>
 8006586:	4b82      	ldr	r3, [pc, #520]	; (8006790 <tcp_slowtmr+0x26c>)
 8006588:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800658c:	4984      	ldr	r1, [pc, #528]	; (80067a0 <tcp_slowtmr+0x27c>)
 800658e:	4882      	ldr	r0, [pc, #520]	; (8006798 <tcp_slowtmr+0x274>)
 8006590:	f008 fa10 	bl	800e9b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	7f9a      	ldrb	r2, [r3, #30]
 8006598:	4b7b      	ldr	r3, [pc, #492]	; (8006788 <tcp_slowtmr+0x264>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d105      	bne.n	80065ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80065aa:	e270      	b.n	8006a8e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80065ac:	4b76      	ldr	r3, [pc, #472]	; (8006788 <tcp_slowtmr+0x264>)
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	7d1b      	ldrb	r3, [r3, #20]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d10a      	bne.n	80065de <tcp_slowtmr+0xba>
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d905      	bls.n	80065de <tcp_slowtmr+0xba>
      ++pcb_remove;
 80065d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d6:	3301      	adds	r3, #1
 80065d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80065dc:	e11e      	b.n	800681c <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065e4:	2b0b      	cmp	r3, #11
 80065e6:	d905      	bls.n	80065f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80065e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ec:	3301      	adds	r3, #1
 80065ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065f2:	e113      	b.n	800681c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d075      	beq.n	80066ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <tcp_slowtmr+0xf0>
 8006606:	4b62      	ldr	r3, [pc, #392]	; (8006790 <tcp_slowtmr+0x26c>)
 8006608:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800660c:	4965      	ldr	r1, [pc, #404]	; (80067a4 <tcp_slowtmr+0x280>)
 800660e:	4862      	ldr	r0, [pc, #392]	; (8006798 <tcp_slowtmr+0x274>)
 8006610:	f008 f9d0 	bl	800e9b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <tcp_slowtmr+0x106>
 800661c:	4b5c      	ldr	r3, [pc, #368]	; (8006790 <tcp_slowtmr+0x26c>)
 800661e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006622:	4961      	ldr	r1, [pc, #388]	; (80067a8 <tcp_slowtmr+0x284>)
 8006624:	485c      	ldr	r0, [pc, #368]	; (8006798 <tcp_slowtmr+0x274>)
 8006626:	f008 f9c5 	bl	800e9b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006630:	2b0b      	cmp	r3, #11
 8006632:	d905      	bls.n	8006640 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006638:	3301      	adds	r3, #1
 800663a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800663e:	e0ed      	b.n	800681c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006646:	3b01      	subs	r3, #1
 8006648:	4a58      	ldr	r2, [pc, #352]	; (80067ac <tcp_slowtmr+0x288>)
 800664a:	5cd3      	ldrb	r3, [r2, r3]
 800664c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006654:	7c7a      	ldrb	r2, [r7, #17]
 8006656:	429a      	cmp	r2, r3
 8006658:	d907      	bls.n	800666a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006660:	3301      	adds	r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006670:	7c7a      	ldrb	r2, [r7, #17]
 8006672:	429a      	cmp	r2, r3
 8006674:	f200 80d2 	bhi.w	800681c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006678:	2301      	movs	r3, #1
 800667a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006682:	2b00      	cmp	r3, #0
 8006684:	d108      	bne.n	8006698 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006688:	f005 f9d4 	bl	800ba34 <tcp_zero_window_probe>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d014      	beq.n	80066bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006692:	2300      	movs	r3, #0
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	e011      	b.n	80066bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800669e:	4619      	mov	r1, r3
 80066a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066a2:	f004 f889 	bl	800a7b8 <tcp_split_unsent_seg>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80066ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ae:	f004 fb0d 	bl	800accc <tcp_output>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80ac 	beq.w	800681c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	f200 80a2 	bhi.w	800681c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066de:	3301      	adds	r3, #1
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80066e8:	e098      	b.n	800681c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db0f      	blt.n	8006714 <tcp_slowtmr+0x1f0>
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80066fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80066fe:	4293      	cmp	r3, r2
 8006700:	d008      	beq.n	8006714 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006708:	b29b      	uxth	r3, r3
 800670a:	3301      	adds	r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	b21a      	sxth	r2, r3
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006720:	429a      	cmp	r2, r3
 8006722:	db7b      	blt.n	800681c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006726:	f004 fdc5 	bl	800b2b4 <tcp_rexmit_rto_prepare>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <tcp_slowtmr+0x21c>
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	2b00      	cmp	r3, #0
 8006736:	d171      	bne.n	800681c <tcp_slowtmr+0x2f8>
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d06d      	beq.n	800681c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	7d1b      	ldrb	r3, [r3, #20]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d03a      	beq.n	80067be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800674e:	2b0c      	cmp	r3, #12
 8006750:	bf28      	it	cs
 8006752:	230c      	movcs	r3, #12
 8006754:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800675c:	10db      	asrs	r3, r3, #3
 800675e:	b21b      	sxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006768:	4413      	add	r3, r2
 800676a:	7efa      	ldrb	r2, [r7, #27]
 800676c:	4910      	ldr	r1, [pc, #64]	; (80067b0 <tcp_slowtmr+0x28c>)
 800676e:	5c8a      	ldrb	r2, [r1, r2]
 8006770:	4093      	lsls	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800677a:	4293      	cmp	r3, r2
 800677c:	dc1a      	bgt.n	80067b4 <tcp_slowtmr+0x290>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	b21a      	sxth	r2, r3
 8006782:	e019      	b.n	80067b8 <tcp_slowtmr+0x294>
 8006784:	20008948 	.word	0x20008948
 8006788:	2000895e 	.word	0x2000895e
 800678c:	20008954 	.word	0x20008954
 8006790:	08010b0c 	.word	0x08010b0c
 8006794:	08010e50 	.word	0x08010e50
 8006798:	08010b50 	.word	0x08010b50
 800679c:	08010e7c 	.word	0x08010e7c
 80067a0:	08010ea8 	.word	0x08010ea8
 80067a4:	08010ed8 	.word	0x08010ed8
 80067a8:	08010f0c 	.word	0x08010f0c
 80067ac:	08012b50 	.word	0x08012b50
 80067b0:	08012b40 	.word	0x08012b40
 80067b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2200      	movs	r2, #0
 80067c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bf28      	it	cs
 80067d4:	4613      	movcs	r3, r2
 80067d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80067d8:	8a7b      	ldrh	r3, [r7, #18]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d206      	bcs.n	8006804 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	2200      	movs	r2, #0
 8006812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006818:	f004 fdc6 	bl	800b3a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	7d1b      	ldrb	r3, [r3, #20]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d111      	bne.n	8006848 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	8b5b      	ldrh	r3, [r3, #26]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006830:	4b9c      	ldr	r3, [pc, #624]	; (8006aa4 <tcp_slowtmr+0x580>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b28      	cmp	r3, #40	; 0x28
 800683c:	d904      	bls.n	8006848 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800683e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006842:	3301      	adds	r3, #1
 8006844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	7a5b      	ldrb	r3, [r3, #9]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d04a      	beq.n	80068ea <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006858:	2b04      	cmp	r3, #4
 800685a:	d003      	beq.n	8006864 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006860:	2b07      	cmp	r3, #7
 8006862:	d142      	bne.n	80068ea <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006864:	4b8f      	ldr	r3, [pc, #572]	; (8006aa4 <tcp_slowtmr+0x580>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006874:	4b8c      	ldr	r3, [pc, #560]	; (8006aa8 <tcp_slowtmr+0x584>)
 8006876:	440b      	add	r3, r1
 8006878:	498c      	ldr	r1, [pc, #560]	; (8006aac <tcp_slowtmr+0x588>)
 800687a:	fba1 1303 	umull	r1, r3, r1, r3
 800687e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006880:	429a      	cmp	r2, r3
 8006882:	d90a      	bls.n	800689a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006888:	3301      	adds	r3, #1
 800688a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800688e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006892:	3301      	adds	r3, #1
 8006894:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006898:	e027      	b.n	80068ea <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800689a:	4b82      	ldr	r3, [pc, #520]	; (8006aa4 <tcp_slowtmr+0x580>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80068b0:	4618      	mov	r0, r3
 80068b2:	4b7f      	ldr	r3, [pc, #508]	; (8006ab0 <tcp_slowtmr+0x58c>)
 80068b4:	fb00 f303 	mul.w	r3, r0, r3
 80068b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80068ba:	497c      	ldr	r1, [pc, #496]	; (8006aac <tcp_slowtmr+0x588>)
 80068bc:	fba1 1303 	umull	r1, r3, r1, r3
 80068c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d911      	bls.n	80068ea <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80068c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c8:	f005 f874 	bl	800b9b4 <tcp_keepalive>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80068d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d107      	bne.n	80068ea <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80068e0:	3301      	adds	r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d011      	beq.n	8006916 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80068f2:	4b6c      	ldr	r3, [pc, #432]	; (8006aa4 <tcp_slowtmr+0x580>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006902:	4619      	mov	r1, r3
 8006904:	460b      	mov	r3, r1
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	440b      	add	r3, r1
 800690a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006912:	f000 fec3 	bl	800769c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	7d1b      	ldrb	r3, [r3, #20]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d10b      	bne.n	8006936 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800691e:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <tcp_slowtmr+0x580>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b28      	cmp	r3, #40	; 0x28
 800692a:	d904      	bls.n	8006936 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006930:	3301      	adds	r3, #1
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	7d1b      	ldrb	r3, [r3, #20]
 800693a:	2b09      	cmp	r3, #9
 800693c:	d10b      	bne.n	8006956 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800693e:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <tcp_slowtmr+0x580>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2bf0      	cmp	r3, #240	; 0xf0
 800694a:	d904      	bls.n	8006956 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800694c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006950:	3301      	adds	r3, #1
 8006952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695a:	2b00      	cmp	r3, #0
 800695c:	d060      	beq.n	8006a20 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006968:	f000 fce4 	bl	8007334 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006972:	4b50      	ldr	r3, [pc, #320]	; (8006ab4 <tcp_slowtmr+0x590>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006978:	429a      	cmp	r2, r3
 800697a:	d106      	bne.n	800698a <tcp_slowtmr+0x466>
 800697c:	4b4e      	ldr	r3, [pc, #312]	; (8006ab8 <tcp_slowtmr+0x594>)
 800697e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006982:	494e      	ldr	r1, [pc, #312]	; (8006abc <tcp_slowtmr+0x598>)
 8006984:	484e      	ldr	r0, [pc, #312]	; (8006ac0 <tcp_slowtmr+0x59c>)
 8006986:	f008 f815 	bl	800e9b4 <iprintf>
        prev->next = pcb->next;
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e00f      	b.n	80069b4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006994:	4b47      	ldr	r3, [pc, #284]	; (8006ab4 <tcp_slowtmr+0x590>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800699a:	429a      	cmp	r2, r3
 800699c:	d006      	beq.n	80069ac <tcp_slowtmr+0x488>
 800699e:	4b46      	ldr	r3, [pc, #280]	; (8006ab8 <tcp_slowtmr+0x594>)
 80069a0:	f240 5271 	movw	r2, #1393	; 0x571
 80069a4:	4947      	ldr	r1, [pc, #284]	; (8006ac4 <tcp_slowtmr+0x5a0>)
 80069a6:	4846      	ldr	r0, [pc, #280]	; (8006ac0 <tcp_slowtmr+0x59c>)
 80069a8:	f008 f804 	bl	800e9b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4a40      	ldr	r2, [pc, #256]	; (8006ab4 <tcp_slowtmr+0x590>)
 80069b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80069b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d013      	beq.n	80069e4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80069c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	3304      	adds	r3, #4
 80069ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069cc:	8ad2      	ldrh	r2, [r2, #22]
 80069ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d0:	8b09      	ldrh	r1, [r1, #24]
 80069d2:	9102      	str	r1, [sp, #8]
 80069d4:	9201      	str	r2, [sp, #4]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	462b      	mov	r3, r5
 80069da:	4622      	mov	r2, r4
 80069dc:	4601      	mov	r1, r0
 80069de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069e0:	f004 ff34 	bl	800b84c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	7d1b      	ldrb	r3, [r3, #20]
 80069ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80069fa:	6838      	ldr	r0, [r7, #0]
 80069fc:	f7ff f83a 	bl	8005a74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006a00:	4b31      	ldr	r3, [pc, #196]	; (8006ac8 <tcp_slowtmr+0x5a4>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <tcp_slowtmr+0x4f2>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f06f 010c 	mvn.w	r1, #12
 8006a12:	68b8      	ldr	r0, [r7, #8]
 8006a14:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006a16:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <tcp_slowtmr+0x5a4>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d037      	beq.n	8006a8e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006a1e:	e592      	b.n	8006546 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	7f1b      	ldrb	r3, [r3, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	7f1a      	ldrb	r2, [r3, #28]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	7f5b      	ldrb	r3, [r3, #29]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d325      	bcc.n	8006a8e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <tcp_slowtmr+0x5a4>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <tcp_slowtmr+0x54c>
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	6912      	ldr	r2, [r2, #16]
 8006a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006a6e:	e002      	b.n	8006a76 <tcp_slowtmr+0x552>
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <tcp_slowtmr+0x5a4>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d000      	beq.n	8006a80 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006a7e:	e562      	b.n	8006546 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006a80:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8006a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8a:	f004 f91f 	bl	800accc <tcp_output>
  while (pcb != NULL) {
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f ad5e 	bne.w	8006552 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <tcp_slowtmr+0x5a8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006aa0:	e069      	b.n	8006b76 <tcp_slowtmr+0x652>
 8006aa2:	bf00      	nop
 8006aa4:	20008948 	.word	0x20008948
 8006aa8:	000a4cb8 	.word	0x000a4cb8
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	000124f8 	.word	0x000124f8
 8006ab4:	20008954 	.word	0x20008954
 8006ab8:	08010b0c 	.word	0x08010b0c
 8006abc:	08010f44 	.word	0x08010f44
 8006ac0:	08010b50 	.word	0x08010b50
 8006ac4:	08010f70 	.word	0x08010f70
 8006ac8:	2000895c 	.word	0x2000895c
 8006acc:	20008958 	.word	0x20008958
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	7d1b      	ldrb	r3, [r3, #20]
 8006ad4:	2b0a      	cmp	r3, #10
 8006ad6:	d006      	beq.n	8006ae6 <tcp_slowtmr+0x5c2>
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <tcp_slowtmr+0x664>)
 8006ada:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006ade:	492b      	ldr	r1, [pc, #172]	; (8006b8c <tcp_slowtmr+0x668>)
 8006ae0:	482b      	ldr	r0, [pc, #172]	; (8006b90 <tcp_slowtmr+0x66c>)
 8006ae2:	f007 ff67 	bl	800e9b4 <iprintf>
    pcb_remove = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006aec:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <tcp_slowtmr+0x670>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2bf0      	cmp	r3, #240	; 0xf0
 8006af8:	d904      	bls.n	8006b04 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006afe:	3301      	adds	r3, #1
 8006b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d02f      	beq.n	8006b6c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b0e:	f000 fc11 	bl	8007334 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006b18:	4b1f      	ldr	r3, [pc, #124]	; (8006b98 <tcp_slowtmr+0x674>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d106      	bne.n	8006b30 <tcp_slowtmr+0x60c>
 8006b22:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <tcp_slowtmr+0x664>)
 8006b24:	f240 52af 	movw	r2, #1455	; 0x5af
 8006b28:	491c      	ldr	r1, [pc, #112]	; (8006b9c <tcp_slowtmr+0x678>)
 8006b2a:	4819      	ldr	r0, [pc, #100]	; (8006b90 <tcp_slowtmr+0x66c>)
 8006b2c:	f007 ff42 	bl	800e9b4 <iprintf>
        prev->next = pcb->next;
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	e00f      	b.n	8006b5a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b3a:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <tcp_slowtmr+0x674>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d006      	beq.n	8006b52 <tcp_slowtmr+0x62e>
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <tcp_slowtmr+0x664>)
 8006b46:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006b4a:	4915      	ldr	r1, [pc, #84]	; (8006ba0 <tcp_slowtmr+0x67c>)
 8006b4c:	4810      	ldr	r0, [pc, #64]	; (8006b90 <tcp_slowtmr+0x66c>)
 8006b4e:	f007 ff31 	bl	800e9b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <tcp_slowtmr+0x674>)
 8006b58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006b64:	69f8      	ldr	r0, [r7, #28]
 8006b66:	f7fe ff85 	bl	8005a74 <tcp_free>
 8006b6a:	e004      	b.n	8006b76 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1a9      	bne.n	8006ad0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3730      	adds	r7, #48	; 0x30
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bdb0      	pop	{r4, r5, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08010b0c 	.word	0x08010b0c
 8006b8c:	08010f9c 	.word	0x08010f9c
 8006b90:	08010b50 	.word	0x08010b50
 8006b94:	20008948 	.word	0x20008948
 8006b98:	20008958 	.word	0x20008958
 8006b9c:	08010fcc 	.word	0x08010fcc
 8006ba0:	08010ff4 	.word	0x08010ff4

08006ba4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006baa:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <tcp_fasttmr+0xbc>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <tcp_fasttmr+0xbc>)
 8006bb4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006bb6:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <tcp_fasttmr+0xc0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006bbc:	e048      	b.n	8006c50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	7f9a      	ldrb	r2, [r3, #30]
 8006bc2:	4b27      	ldr	r3, [pc, #156]	; (8006c60 <tcp_fasttmr+0xbc>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d03f      	beq.n	8006c4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006bca:	4b25      	ldr	r3, [pc, #148]	; (8006c60 <tcp_fasttmr+0xbc>)
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8b5b      	ldrh	r3, [r3, #26]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8b5b      	ldrh	r3, [r3, #26]
 8006be2:	f043 0302 	orr.w	r3, r3, #2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f004 f86d 	bl	800accc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8b5b      	ldrh	r3, [r3, #26]
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8b5b      	ldrh	r3, [r3, #26]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8b5b      	ldrh	r3, [r3, #26]
 8006c10:	f023 0308 	bic.w	r3, r3, #8
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff f8be 	bl	8005d9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <tcp_fasttmr+0xc4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f819 	bl	8006c6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <tcp_fasttmr+0xc4>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d000      	beq.n	8006c44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006c42:	e7b8      	b.n	8006bb6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e002      	b.n	8006c50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1b3      	bne.n	8006bbe <tcp_fasttmr+0x1a>
    }
  }
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	2000895e 	.word	0x2000895e
 8006c64:	20008954 	.word	0x20008954
 8006c68:	2000895c 	.word	0x2000895c

08006c6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <tcp_process_refused_data+0x22>
 8006c7a:	4b37      	ldr	r3, [pc, #220]	; (8006d58 <tcp_process_refused_data+0xec>)
 8006c7c:	f240 6209 	movw	r2, #1545	; 0x609
 8006c80:	4936      	ldr	r1, [pc, #216]	; (8006d5c <tcp_process_refused_data+0xf0>)
 8006c82:	4837      	ldr	r0, [pc, #220]	; (8006d60 <tcp_process_refused_data+0xf4>)
 8006c84:	f007 fe96 	bl	800e9b4 <iprintf>
 8006c88:	f06f 030f 	mvn.w	r3, #15
 8006c8c:	e060      	b.n	8006d50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c92:	7b5b      	ldrb	r3, [r3, #13]
 8006c94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <tcp_process_refused_data+0x58>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6918      	ldr	r0, [r3, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	47a0      	blx	r4
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e007      	b.n	8006cd4 <tcp_process_refused_data+0x68>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f000 f8c2 	bl	8006e54 <tcp_recv_null>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d12a      	bne.n	8006d32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d033      	beq.n	8006d4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006cee:	d005      	beq.n	8006cfc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <tcp_process_refused_data+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6918      	ldr	r0, [r3, #16]
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	47a0      	blx	r4
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e001      	b.n	8006d22 <tcp_process_refused_data+0xb6>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d26:	f113 0f0d 	cmn.w	r3, #13
 8006d2a:	d110      	bne.n	8006d4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006d2c:	f06f 030c 	mvn.w	r3, #12
 8006d30:	e00e      	b.n	8006d50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d36:	f113 0f0d 	cmn.w	r3, #13
 8006d3a:	d102      	bne.n	8006d42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006d3c:	f06f 030c 	mvn.w	r3, #12
 8006d40:	e006      	b.n	8006d50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006d48:	f06f 0304 	mvn.w	r3, #4
 8006d4c:	e000      	b.n	8006d50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd90      	pop	{r4, r7, pc}
 8006d58:	08010b0c 	.word	0x08010b0c
 8006d5c:	0801101c 	.word	0x0801101c
 8006d60:	08010b50 	.word	0x08010b50

08006d64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006d6c:	e007      	b.n	8006d7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f80a 	bl	8006d8e <tcp_seg_free>
    seg = next;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f4      	bne.n	8006d6e <tcp_segs_free+0xa>
  }
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fbb3 	bl	8005514 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	2003      	movs	r0, #3
 8006db2:	f7fd fd39 	bl	8004828 <memp_free>
  }
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d107      	bne.n	8006de2 <tcp_setprio+0x22>
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <tcp_setprio+0x30>)
 8006dd4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006dd8:	4906      	ldr	r1, [pc, #24]	; (8006df4 <tcp_setprio+0x34>)
 8006dda:	4807      	ldr	r0, [pc, #28]	; (8006df8 <tcp_setprio+0x38>)
 8006ddc:	f007 fdea 	bl	800e9b4 <iprintf>
 8006de0:	e002      	b.n	8006de8 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	755a      	strb	r2, [r3, #21]
}
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	08010b0c 	.word	0x08010b0c
 8006df4:	08011044 	.word	0x08011044
 8006df8:	08010b50 	.word	0x08010b50

08006dfc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <tcp_seg_copy+0x1c>
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <tcp_seg_copy+0x4c>)
 8006e0c:	f240 6282 	movw	r2, #1666	; 0x682
 8006e10:	490e      	ldr	r1, [pc, #56]	; (8006e4c <tcp_seg_copy+0x50>)
 8006e12:	480f      	ldr	r0, [pc, #60]	; (8006e50 <tcp_seg_copy+0x54>)
 8006e14:	f007 fdce 	bl	800e9b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006e18:	2003      	movs	r0, #3
 8006e1a:	f7fd fcb9 	bl	8004790 <memp_malloc>
 8006e1e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <tcp_seg_copy+0x2e>
    return NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e00a      	b.n	8006e40 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006e2a:	2214      	movs	r2, #20
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f007 fd90 	bl	800e954 <memcpy>
  pbuf_ref(cseg->p);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fc0b 	bl	8005654 <pbuf_ref>
  return cseg;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	08010b0c 	.word	0x08010b0c
 8006e4c:	08011060 	.word	0x08011060
 8006e50:	08010b50 	.word	0x08010b50

08006e54 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d109      	bne.n	8006e7c <tcp_recv_null+0x28>
 8006e68:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <tcp_recv_null+0x60>)
 8006e6a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006e6e:	4912      	ldr	r1, [pc, #72]	; (8006eb8 <tcp_recv_null+0x64>)
 8006e70:	4812      	ldr	r0, [pc, #72]	; (8006ebc <tcp_recv_null+0x68>)
 8006e72:	f007 fd9f 	bl	800e9b4 <iprintf>
 8006e76:	f06f 030f 	mvn.w	r3, #15
 8006e7a:	e016      	b.n	8006eaa <tcp_recv_null+0x56>

  if (p != NULL) {
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	891b      	ldrh	r3, [r3, #8]
 8006e86:	4619      	mov	r1, r3
 8006e88:	68b8      	ldr	r0, [r7, #8]
 8006e8a:	f7ff fab5 	bl	80063f8 <tcp_recved>
    pbuf_free(p);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fe fb40 	bl	8005514 <pbuf_free>
 8006e94:	e008      	b.n	8006ea8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7fe ffe6 	bl	8005e70 <tcp_close>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	e000      	b.n	8006eaa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08010b0c 	.word	0x08010b0c
 8006eb8:	0801107c 	.word	0x0801107c
 8006ebc:	08010b50 	.word	0x08010b50

08006ec0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	db01      	blt.n	8006ed6 <tcp_kill_prio+0x16>
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	e000      	b.n	8006ed8 <tcp_kill_prio+0x18>
 8006ed6:	237f      	movs	r3, #127	; 0x7f
 8006ed8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d034      	beq.n	8006f4a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <tcp_kill_prio+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e01f      	b.n	8006f36 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	7d5b      	ldrb	r3, [r3, #21]
 8006efa:	7afa      	ldrb	r2, [r7, #11]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d80c      	bhi.n	8006f1a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006f04:	7afa      	ldrb	r2, [r7, #11]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d112      	bne.n	8006f30 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <tcp_kill_prio+0x98>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d80a      	bhi.n	8006f30 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <tcp_kill_prio+0x98>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	7d5b      	ldrb	r3, [r3, #21]
 8006f2e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1dc      	bne.n	8006ef6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006f42:	6938      	ldr	r0, [r7, #16]
 8006f44:	f7ff f87e 	bl	8006044 <tcp_abort>
 8006f48:	e000      	b.n	8006f4c <tcp_kill_prio+0x8c>
    return;
 8006f4a:	bf00      	nop
  }
}
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20008954 	.word	0x20008954
 8006f58:	20008948 	.word	0x20008948

08006f5c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d009      	beq.n	8006f80 <tcp_kill_state+0x24>
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b09      	cmp	r3, #9
 8006f70:	d006      	beq.n	8006f80 <tcp_kill_state+0x24>
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <tcp_kill_state+0x80>)
 8006f74:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006f78:	4919      	ldr	r1, [pc, #100]	; (8006fe0 <tcp_kill_state+0x84>)
 8006f7a:	481a      	ldr	r0, [pc, #104]	; (8006fe4 <tcp_kill_state+0x88>)
 8006f7c:	f007 fd1a 	bl	800e9b4 <iprintf>

  inactivity = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f88:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <tcp_kill_state+0x8c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e017      	b.n	8006fc0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	7d1b      	ldrb	r3, [r3, #20]
 8006f94:	79fa      	ldrb	r2, [r7, #7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d10f      	bne.n	8006fba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006f9a:	4b14      	ldr	r3, [pc, #80]	; (8006fec <tcp_kill_state+0x90>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d807      	bhi.n	8006fba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <tcp_kill_state+0x90>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e4      	bne.n	8006f90 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6938      	ldr	r0, [r7, #16]
 8006fd0:	f7fe ff7a 	bl	8005ec8 <tcp_abandon>
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	08010b0c 	.word	0x08010b0c
 8006fe0:	08011098 	.word	0x08011098
 8006fe4:	08010b50 	.word	0x08010b50
 8006fe8:	20008954 	.word	0x20008954
 8006fec:	20008948 	.word	0x20008948

08006ff0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <tcp_kill_timewait+0x58>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e012      	b.n	800702c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <tcp_kill_timewait+0x5c>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d807      	bhi.n	8007026 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <tcp_kill_timewait+0x5c>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e9      	bne.n	8007006 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007038:	68b8      	ldr	r0, [r7, #8]
 800703a:	f7ff f803 	bl	8006044 <tcp_abort>
  }
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20008958 	.word	0x20008958
 800704c:	20008948 	.word	0x20008948

08007050 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007056:	4b10      	ldr	r3, [pc, #64]	; (8007098 <tcp_handle_closepend+0x48>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800705c:	e014      	b.n	8007088 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8b5b      	ldrh	r3, [r3, #26]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8b5b      	ldrh	r3, [r3, #26]
 8007074:	f023 0308 	bic.w	r3, r3, #8
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fe fe8c 	bl	8005d9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e7      	bne.n	800705e <tcp_handle_closepend+0xe>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20008954 	.word	0x20008954

0800709c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070a6:	2001      	movs	r0, #1
 80070a8:	f7fd fb72 	bl	8004790 <memp_malloc>
 80070ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d126      	bne.n	8007102 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80070b4:	f7ff ffcc 	bl	8007050 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80070b8:	f7ff ff9a 	bl	8006ff0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070bc:	2001      	movs	r0, #1
 80070be:	f7fd fb67 	bl	8004790 <memp_malloc>
 80070c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d11b      	bne.n	8007102 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80070ca:	2009      	movs	r0, #9
 80070cc:	f7ff ff46 	bl	8006f5c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7fd fb5d 	bl	8004790 <memp_malloc>
 80070d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d111      	bne.n	8007102 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80070de:	2008      	movs	r0, #8
 80070e0:	f7ff ff3c 	bl	8006f5c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070e4:	2001      	movs	r0, #1
 80070e6:	f7fd fb53 	bl	8004790 <memp_malloc>
 80070ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fee3 	bl	8006ec0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070fa:	2001      	movs	r0, #1
 80070fc:	f7fd fb48 	bl	8004790 <memp_malloc>
 8007100:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d03f      	beq.n	8007188 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007108:	229c      	movs	r2, #156	; 0x9c
 800710a:	2100      	movs	r1, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f007 fc49 	bl	800e9a4 <memset>
    pcb->prio = prio;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	79fa      	ldrb	r2, [r7, #7]
 8007116:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800711e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800713e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2206      	movs	r2, #6
 8007144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2206      	movs	r2, #6
 800714c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007154:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <tcp_alloc+0xf8>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <tcp_alloc+0xfc>)
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4a08      	ldr	r2, [pc, #32]	; (800719c <tcp_alloc+0x100>)
 800717c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <tcp_alloc+0x104>)
 8007184:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007188:	68fb      	ldr	r3, [r7, #12]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20008948 	.word	0x20008948
 8007198:	2000895e 	.word	0x2000895e
 800719c:	08006e55 	.word	0x08006e55
 80071a0:	006ddd00 	.word	0x006ddd00

080071a4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80071a8:	2040      	movs	r0, #64	; 0x40
 80071aa:	f7ff ff77 	bl	800709c <tcp_alloc>
 80071ae:	4603      	mov	r3, r0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	611a      	str	r2, [r3, #16]
  }
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00e      	beq.n	8007206 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7d1b      	ldrb	r3, [r3, #20]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d106      	bne.n	80071fe <tcp_recv+0x26>
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <tcp_recv+0x38>)
 80071f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80071f6:	4907      	ldr	r1, [pc, #28]	; (8007214 <tcp_recv+0x3c>)
 80071f8:	4807      	ldr	r0, [pc, #28]	; (8007218 <tcp_recv+0x40>)
 80071fa:	f007 fbdb 	bl	800e9b4 <iprintf>
    pcb->recv = recv;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	08010b0c 	.word	0x08010b0c
 8007214:	080110a8 	.word	0x080110a8
 8007218:	08010b50 	.word	0x08010b50

0800721c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7d1b      	ldrb	r3, [r3, #20]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <tcp_sent+0x26>
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <tcp_sent+0x38>)
 8007236:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800723a:	4907      	ldr	r1, [pc, #28]	; (8007258 <tcp_sent+0x3c>)
 800723c:	4807      	ldr	r0, [pc, #28]	; (800725c <tcp_sent+0x40>)
 800723e:	f007 fbb9 	bl	800e9b4 <iprintf>
    pcb->sent = sent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	08010b0c 	.word	0x08010b0c
 8007258:	080110d0 	.word	0x080110d0
 800725c:	08010b50 	.word	0x08010b50

08007260 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7d1b      	ldrb	r3, [r3, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <tcp_err+0x26>
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <tcp_err+0x38>)
 800727a:	f640 020d 	movw	r2, #2061	; 0x80d
 800727e:	4907      	ldr	r1, [pc, #28]	; (800729c <tcp_err+0x3c>)
 8007280:	4807      	ldr	r0, [pc, #28]	; (80072a0 <tcp_err+0x40>)
 8007282:	f007 fb97 	bl	800e9b4 <iprintf>
    pcb->errf = err;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	08010b0c 	.word	0x08010b0c
 800729c:	080110f8 	.word	0x080110f8
 80072a0:	08010b50 	.word	0x08010b50

080072a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <tcp_accept+0x22>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7d1b      	ldrb	r3, [r3, #20]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d104      	bne.n	80072c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	619a      	str	r2, [r3, #24]
  }
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	4613      	mov	r3, r2
 80072e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d107      	bne.n	80072f8 <tcp_poll+0x24>
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <tcp_poll+0x50>)
 80072ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80072ee:	490e      	ldr	r1, [pc, #56]	; (8007328 <tcp_poll+0x54>)
 80072f0:	480e      	ldr	r0, [pc, #56]	; (800732c <tcp_poll+0x58>)
 80072f2:	f007 fb5f 	bl	800e9b4 <iprintf>
 80072f6:	e011      	b.n	800731c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d106      	bne.n	800730e <tcp_poll+0x3a>
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <tcp_poll+0x50>)
 8007302:	f640 023e 	movw	r2, #2110	; 0x83e
 8007306:	490a      	ldr	r1, [pc, #40]	; (8007330 <tcp_poll+0x5c>)
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <tcp_poll+0x58>)
 800730a:	f007 fb53 	bl	800e9b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	79fa      	ldrb	r2, [r7, #7]
 800731a:	775a      	strb	r2, [r3, #29]
}
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	08010b0c 	.word	0x08010b0c
 8007328:	08011120 	.word	0x08011120
 800732c:	08010b50 	.word	0x08010b50
 8007330:	08011138 	.word	0x08011138

08007334 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <tcp_pcb_purge+0x1e>
 8007342:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <tcp_pcb_purge+0x94>)
 8007344:	f640 0251 	movw	r2, #2129	; 0x851
 8007348:	4920      	ldr	r1, [pc, #128]	; (80073cc <tcp_pcb_purge+0x98>)
 800734a:	4821      	ldr	r0, [pc, #132]	; (80073d0 <tcp_pcb_purge+0x9c>)
 800734c:	f007 fb32 	bl	800e9b4 <iprintf>
 8007350:	e037      	b.n	80073c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7d1b      	ldrb	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d033      	beq.n	80073c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800735e:	2b0a      	cmp	r3, #10
 8007360:	d02f      	beq.n	80073c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007366:	2b01      	cmp	r3, #1
 8007368:	d02b      	beq.n	80073c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe f8cc 	bl	8005514 <pbuf_free>
      pcb->refused_data = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f986 	bl	800769c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007396:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fce1 	bl	8006d64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fcdc 	bl	8006d64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08010b0c 	.word	0x08010b0c
 80073cc:	08011158 	.word	0x08011158
 80073d0:	08010b50 	.word	0x08010b50

080073d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <tcp_pcb_remove+0x1e>
 80073e4:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <tcp_pcb_remove+0x10c>)
 80073e6:	f640 0283 	movw	r2, #2179	; 0x883
 80073ea:	493e      	ldr	r1, [pc, #248]	; (80074e4 <tcp_pcb_remove+0x110>)
 80073ec:	483e      	ldr	r0, [pc, #248]	; (80074e8 <tcp_pcb_remove+0x114>)
 80073ee:	f007 fae1 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <tcp_pcb_remove+0x32>
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <tcp_pcb_remove+0x10c>)
 80073fa:	f640 0284 	movw	r2, #2180	; 0x884
 80073fe:	493b      	ldr	r1, [pc, #236]	; (80074ec <tcp_pcb_remove+0x118>)
 8007400:	4839      	ldr	r0, [pc, #228]	; (80074e8 <tcp_pcb_remove+0x114>)
 8007402:	f007 fad7 	bl	800e9b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d105      	bne.n	800741c <tcp_pcb_remove+0x48>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e013      	b.n	8007444 <tcp_pcb_remove+0x70>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	e00c      	b.n	800743e <tcp_pcb_remove+0x6a>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d104      	bne.n	8007438 <tcp_pcb_remove+0x64>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	e005      	b.n	8007444 <tcp_pcb_remove+0x70>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ef      	bne.n	8007424 <tcp_pcb_remove+0x50>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2200      	movs	r2, #0
 8007448:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f7ff ff72 	bl	8007334 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	7d1b      	ldrb	r3, [r3, #20]
 8007454:	2b0a      	cmp	r3, #10
 8007456:	d013      	beq.n	8007480 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800745c:	2b01      	cmp	r3, #1
 800745e:	d00f      	beq.n	8007480 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	8b5b      	ldrh	r3, [r3, #26]
 8007464:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	8b5b      	ldrh	r3, [r3, #26]
 8007470:	f043 0302 	orr.w	r3, r3, #2
 8007474:	b29a      	uxth	r2, r3
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800747a:	6838      	ldr	r0, [r7, #0]
 800747c:	f003 fc26 	bl	800accc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	7d1b      	ldrb	r3, [r3, #20]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d020      	beq.n	80074ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <tcp_pcb_remove+0xca>
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <tcp_pcb_remove+0x10c>)
 8007492:	f640 0293 	movw	r2, #2195	; 0x893
 8007496:	4916      	ldr	r1, [pc, #88]	; (80074f0 <tcp_pcb_remove+0x11c>)
 8007498:	4813      	ldr	r0, [pc, #76]	; (80074e8 <tcp_pcb_remove+0x114>)
 800749a:	f007 fa8b 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <tcp_pcb_remove+0xe0>
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <tcp_pcb_remove+0x10c>)
 80074a8:	f640 0294 	movw	r2, #2196	; 0x894
 80074ac:	4911      	ldr	r1, [pc, #68]	; (80074f4 <tcp_pcb_remove+0x120>)
 80074ae:	480e      	ldr	r0, [pc, #56]	; (80074e8 <tcp_pcb_remove+0x114>)
 80074b0:	f007 fa80 	bl	800e9b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <tcp_pcb_remove+0xf6>
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <tcp_pcb_remove+0x10c>)
 80074be:	f640 0296 	movw	r2, #2198	; 0x896
 80074c2:	490d      	ldr	r1, [pc, #52]	; (80074f8 <tcp_pcb_remove+0x124>)
 80074c4:	4808      	ldr	r0, [pc, #32]	; (80074e8 <tcp_pcb_remove+0x114>)
 80074c6:	f007 fa75 	bl	800e9b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2200      	movs	r2, #0
 80074ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2200      	movs	r2, #0
 80074d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	08010b0c 	.word	0x08010b0c
 80074e4:	08011174 	.word	0x08011174
 80074e8:	08010b50 	.word	0x08010b50
 80074ec:	08011190 	.word	0x08011190
 80074f0:	080111b0 	.word	0x080111b0
 80074f4:	080111c8 	.word	0x080111c8
 80074f8:	080111e4 	.word	0x080111e4

080074fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <tcp_next_iss+0x1c>
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <tcp_next_iss+0x38>)
 800750c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007510:	4909      	ldr	r1, [pc, #36]	; (8007538 <tcp_next_iss+0x3c>)
 8007512:	480a      	ldr	r0, [pc, #40]	; (800753c <tcp_next_iss+0x40>)
 8007514:	f007 fa4e 	bl	800e9b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <tcp_next_iss+0x44>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <tcp_next_iss+0x48>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4413      	add	r3, r2
 8007522:	4a07      	ldr	r2, [pc, #28]	; (8007540 <tcp_next_iss+0x44>)
 8007524:	6013      	str	r3, [r2, #0]
  return iss;
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <tcp_next_iss+0x44>)
 8007528:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	08010b0c 	.word	0x08010b0c
 8007538:	080111fc 	.word	0x080111fc
 800753c:	08010b50 	.word	0x08010b50
 8007540:	2000000c 	.word	0x2000000c
 8007544:	20008948 	.word	0x20008948

08007548 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <tcp_eff_send_mss_netif+0x22>
 800755c:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <tcp_eff_send_mss_netif+0x68>)
 800755e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007562:	4914      	ldr	r1, [pc, #80]	; (80075b4 <tcp_eff_send_mss_netif+0x6c>)
 8007564:	4814      	ldr	r0, [pc, #80]	; (80075b8 <tcp_eff_send_mss_netif+0x70>)
 8007566:	f007 fa25 	bl	800e9b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	e019      	b.n	80075a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007578:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800757a:	8afb      	ldrh	r3, [r7, #22]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d012      	beq.n	80075a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007580:	2328      	movs	r3, #40	; 0x28
 8007582:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007584:	8afa      	ldrh	r2, [r7, #22]
 8007586:	8abb      	ldrh	r3, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d904      	bls.n	8007596 <tcp_eff_send_mss_netif+0x4e>
 800758c:	8afa      	ldrh	r2, [r7, #22]
 800758e:	8abb      	ldrh	r3, [r7, #20]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	b29b      	uxth	r3, r3
 8007594:	e000      	b.n	8007598 <tcp_eff_send_mss_netif+0x50>
 8007596:	2300      	movs	r3, #0
 8007598:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800759a:	8a7a      	ldrh	r2, [r7, #18]
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	4293      	cmp	r3, r2
 80075a0:	bf28      	it	cs
 80075a2:	4613      	movcs	r3, r2
 80075a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80075a6:	89fb      	ldrh	r3, [r7, #14]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	08010b0c 	.word	0x08010b0c
 80075b4:	08011218 	.word	0x08011218
 80075b8:	08010b50 	.word	0x08010b50

080075bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d119      	bne.n	8007604 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80075d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80075d6:	4910      	ldr	r1, [pc, #64]	; (8007618 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80075d8:	4810      	ldr	r0, [pc, #64]	; (800761c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80075da:	f007 f9eb 	bl	800e9b4 <iprintf>

  while (pcb != NULL) {
 80075de:	e011      	b.n	8007604 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d108      	bne.n	80075fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7fe fd26 	bl	8006044 <tcp_abort>
      pcb = next;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e002      	b.n	8007604 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1ea      	bne.n	80075e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	08010b0c 	.word	0x08010b0c
 8007618:	08011240 	.word	0x08011240
 800761c:	08010b50 	.word	0x08010b50

08007620 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d02a      	beq.n	8007686 <tcp_netif_ip_addr_changed+0x66>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d026      	beq.n	8007686 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <tcp_netif_ip_addr_changed+0x70>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff ffbc 	bl	80075bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007644:	4b13      	ldr	r3, [pc, #76]	; (8007694 <tcp_netif_ip_addr_changed+0x74>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff ffb6 	bl	80075bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d017      	beq.n	8007686 <tcp_netif_ip_addr_changed+0x66>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <tcp_netif_ip_addr_changed+0x78>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e00c      	b.n	8007680 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1ef      	bne.n	8007666 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20008954 	.word	0x20008954
 8007694:	2000894c 	.word	0x2000894c
 8007698:	20008950 	.word	0x20008950

0800769c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fb57 	bl	8006d64 <tcp_segs_free>
    pcb->ooseq = NULL;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b08d      	sub	sp, #52	; 0x34
 80076c8:	af04      	add	r7, sp, #16
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <tcp_input+0x1c>
 80076d4:	4b9b      	ldr	r3, [pc, #620]	; (8007944 <tcp_input+0x280>)
 80076d6:	2283      	movs	r2, #131	; 0x83
 80076d8:	499b      	ldr	r1, [pc, #620]	; (8007948 <tcp_input+0x284>)
 80076da:	489c      	ldr	r0, [pc, #624]	; (800794c <tcp_input+0x288>)
 80076dc:	f007 f96a 	bl	800e9b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4a9a      	ldr	r2, [pc, #616]	; (8007950 <tcp_input+0x28c>)
 80076e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	895b      	ldrh	r3, [r3, #10]
 80076ec:	2b13      	cmp	r3, #19
 80076ee:	f240 83d1 	bls.w	8007e94 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80076f2:	4b98      	ldr	r3, [pc, #608]	; (8007954 <tcp_input+0x290>)
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4a97      	ldr	r2, [pc, #604]	; (8007954 <tcp_input+0x290>)
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f006 f90f 	bl	800d920 <ip4_addr_isbroadcast_u32>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 83c7 	bne.w	8007e98 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800770a:	4b92      	ldr	r3, [pc, #584]	; (8007954 <tcp_input+0x290>)
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007712:	2be0      	cmp	r3, #224	; 0xe0
 8007714:	f000 83c0 	beq.w	8007e98 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007718:	4b8d      	ldr	r3, [pc, #564]	; (8007950 <tcp_input+0x28c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	899b      	ldrh	r3, [r3, #12]
 800771e:	b29b      	uxth	r3, r3
 8007720:	4618      	mov	r0, r3
 8007722:	f7fc fbdf 	bl	8003ee4 <lwip_htons>
 8007726:	4603      	mov	r3, r0
 8007728:	0b1b      	lsrs	r3, r3, #12
 800772a:	b29b      	uxth	r3, r3
 800772c:	b2db      	uxtb	r3, r3
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007732:	7cbb      	ldrb	r3, [r7, #18]
 8007734:	2b13      	cmp	r3, #19
 8007736:	f240 83b1 	bls.w	8007e9c <tcp_input+0x7d8>
 800773a:	7cbb      	ldrb	r3, [r7, #18]
 800773c:	b29a      	uxth	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	891b      	ldrh	r3, [r3, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	f200 83aa 	bhi.w	8007e9c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007748:	7cbb      	ldrb	r3, [r7, #18]
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b14      	subs	r3, #20
 800774e:	b29a      	uxth	r2, r3
 8007750:	4b81      	ldr	r3, [pc, #516]	; (8007958 <tcp_input+0x294>)
 8007752:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007754:	4b81      	ldr	r3, [pc, #516]	; (800795c <tcp_input+0x298>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	895a      	ldrh	r2, [r3, #10]
 800775e:	7cbb      	ldrb	r3, [r7, #18]
 8007760:	b29b      	uxth	r3, r3
 8007762:	429a      	cmp	r2, r3
 8007764:	d309      	bcc.n	800777a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007766:	4b7c      	ldr	r3, [pc, #496]	; (8007958 <tcp_input+0x294>)
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	4b7d      	ldr	r3, [pc, #500]	; (8007960 <tcp_input+0x29c>)
 800776c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800776e:	7cbb      	ldrb	r3, [r7, #18]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fd fe48 	bl	8005408 <pbuf_remove_header>
 8007778:	e04e      	b.n	8007818 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d105      	bne.n	800778e <tcp_input+0xca>
 8007782:	4b70      	ldr	r3, [pc, #448]	; (8007944 <tcp_input+0x280>)
 8007784:	22c2      	movs	r2, #194	; 0xc2
 8007786:	4977      	ldr	r1, [pc, #476]	; (8007964 <tcp_input+0x2a0>)
 8007788:	4870      	ldr	r0, [pc, #448]	; (800794c <tcp_input+0x288>)
 800778a:	f007 f913 	bl	800e9b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800778e:	2114      	movs	r1, #20
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7fd fe39 	bl	8005408 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	895a      	ldrh	r2, [r3, #10]
 800779a:	4b71      	ldr	r3, [pc, #452]	; (8007960 <tcp_input+0x29c>)
 800779c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <tcp_input+0x294>)
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	4b6f      	ldr	r3, [pc, #444]	; (8007960 <tcp_input+0x29c>)
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80077aa:	4b6d      	ldr	r3, [pc, #436]	; (8007960 <tcp_input+0x29c>)
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fd fe29 	bl	8005408 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	895b      	ldrh	r3, [r3, #10]
 80077bc:	8a3a      	ldrh	r2, [r7, #16]
 80077be:	429a      	cmp	r2, r3
 80077c0:	f200 836e 	bhi.w	8007ea0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	4a64      	ldr	r2, [pc, #400]	; (800795c <tcp_input+0x298>)
 80077cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	8a3a      	ldrh	r2, [r7, #16]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fd fe16 	bl	8005408 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	891a      	ldrh	r2, [r3, #8]
 80077e0:	8a3b      	ldrh	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	895b      	ldrh	r3, [r3, #10]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <tcp_input+0x13a>
 80077f2:	4b54      	ldr	r3, [pc, #336]	; (8007944 <tcp_input+0x280>)
 80077f4:	22df      	movs	r2, #223	; 0xdf
 80077f6:	495c      	ldr	r1, [pc, #368]	; (8007968 <tcp_input+0x2a4>)
 80077f8:	4854      	ldr	r0, [pc, #336]	; (800794c <tcp_input+0x288>)
 80077fa:	f007 f8db 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	891a      	ldrh	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	891b      	ldrh	r3, [r3, #8]
 8007808:	429a      	cmp	r2, r3
 800780a:	d005      	beq.n	8007818 <tcp_input+0x154>
 800780c:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <tcp_input+0x280>)
 800780e:	22e0      	movs	r2, #224	; 0xe0
 8007810:	4956      	ldr	r1, [pc, #344]	; (800796c <tcp_input+0x2a8>)
 8007812:	484e      	ldr	r0, [pc, #312]	; (800794c <tcp_input+0x288>)
 8007814:	f007 f8ce 	bl	800e9b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007818:	4b4d      	ldr	r3, [pc, #308]	; (8007950 <tcp_input+0x28c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	4a4b      	ldr	r2, [pc, #300]	; (8007950 <tcp_input+0x28c>)
 8007822:	6814      	ldr	r4, [r2, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7fc fb5d 	bl	8003ee4 <lwip_htons>
 800782a:	4603      	mov	r3, r0
 800782c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800782e:	4b48      	ldr	r3, [pc, #288]	; (8007950 <tcp_input+0x28c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	b29b      	uxth	r3, r3
 8007836:	4a46      	ldr	r2, [pc, #280]	; (8007950 <tcp_input+0x28c>)
 8007838:	6814      	ldr	r4, [r2, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f7fc fb52 	bl	8003ee4 <lwip_htons>
 8007840:	4603      	mov	r3, r0
 8007842:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007844:	4b42      	ldr	r3, [pc, #264]	; (8007950 <tcp_input+0x28c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4a41      	ldr	r2, [pc, #260]	; (8007950 <tcp_input+0x28c>)
 800784c:	6814      	ldr	r4, [r2, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fc fb5d 	bl	8003f0e <lwip_htonl>
 8007854:	4603      	mov	r3, r0
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	4a45      	ldr	r2, [pc, #276]	; (8007970 <tcp_input+0x2ac>)
 800785c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800785e:	4b3c      	ldr	r3, [pc, #240]	; (8007950 <tcp_input+0x28c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4a3a      	ldr	r2, [pc, #232]	; (8007950 <tcp_input+0x28c>)
 8007866:	6814      	ldr	r4, [r2, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7fc fb50 	bl	8003f0e <lwip_htonl>
 800786e:	4603      	mov	r3, r0
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	4a3f      	ldr	r2, [pc, #252]	; (8007974 <tcp_input+0x2b0>)
 8007876:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007878:	4b35      	ldr	r3, [pc, #212]	; (8007950 <tcp_input+0x28c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	89db      	ldrh	r3, [r3, #14]
 800787e:	b29b      	uxth	r3, r3
 8007880:	4a33      	ldr	r2, [pc, #204]	; (8007950 <tcp_input+0x28c>)
 8007882:	6814      	ldr	r4, [r2, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f7fc fb2d 	bl	8003ee4 <lwip_htons>
 800788a:	4603      	mov	r3, r0
 800788c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800788e:	4b30      	ldr	r3, [pc, #192]	; (8007950 <tcp_input+0x28c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	899b      	ldrh	r3, [r3, #12]
 8007894:	b29b      	uxth	r3, r3
 8007896:	4618      	mov	r0, r3
 8007898:	f7fc fb24 	bl	8003ee4 <lwip_htons>
 800789c:	4603      	mov	r3, r0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	4b34      	ldr	r3, [pc, #208]	; (8007978 <tcp_input+0x2b4>)
 80078a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	891a      	ldrh	r2, [r3, #8]
 80078ae:	4b33      	ldr	r3, [pc, #204]	; (800797c <tcp_input+0x2b8>)
 80078b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80078b2:	4b31      	ldr	r3, [pc, #196]	; (8007978 <tcp_input+0x2b4>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00c      	beq.n	80078d8 <tcp_input+0x214>
    tcplen++;
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <tcp_input+0x2b8>)
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <tcp_input+0x2b8>)
 80078c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	891a      	ldrh	r2, [r3, #8]
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <tcp_input+0x2b8>)
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	f200 82e6 	bhi.w	8007ea4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078dc:	4b28      	ldr	r3, [pc, #160]	; (8007980 <tcp_input+0x2bc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e09d      	b.n	8007a20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	7d1b      	ldrb	r3, [r3, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <tcp_input+0x234>
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <tcp_input+0x280>)
 80078ee:	22fb      	movs	r2, #251	; 0xfb
 80078f0:	4924      	ldr	r1, [pc, #144]	; (8007984 <tcp_input+0x2c0>)
 80078f2:	4816      	ldr	r0, [pc, #88]	; (800794c <tcp_input+0x288>)
 80078f4:	f007 f85e 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	7d1b      	ldrb	r3, [r3, #20]
 80078fc:	2b0a      	cmp	r3, #10
 80078fe:	d105      	bne.n	800790c <tcp_input+0x248>
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <tcp_input+0x280>)
 8007902:	22fc      	movs	r2, #252	; 0xfc
 8007904:	4920      	ldr	r1, [pc, #128]	; (8007988 <tcp_input+0x2c4>)
 8007906:	4811      	ldr	r0, [pc, #68]	; (800794c <tcp_input+0x288>)
 8007908:	f007 f854 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	7d1b      	ldrb	r3, [r3, #20]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d105      	bne.n	8007920 <tcp_input+0x25c>
 8007914:	4b0b      	ldr	r3, [pc, #44]	; (8007944 <tcp_input+0x280>)
 8007916:	22fd      	movs	r2, #253	; 0xfd
 8007918:	491c      	ldr	r1, [pc, #112]	; (800798c <tcp_input+0x2c8>)
 800791a:	480c      	ldr	r0, [pc, #48]	; (800794c <tcp_input+0x288>)
 800791c:	f007 f84a 	bl	800e9b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	7a1b      	ldrb	r3, [r3, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d033      	beq.n	8007990 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	7a1a      	ldrb	r2, [r3, #8]
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <tcp_input+0x290>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007934:	3301      	adds	r3, #1
 8007936:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007938:	429a      	cmp	r2, r3
 800793a:	d029      	beq.n	8007990 <tcp_input+0x2cc>
      prev = pcb;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	61fb      	str	r3, [r7, #28]
      continue;
 8007940:	e06b      	b.n	8007a1a <tcp_input+0x356>
 8007942:	bf00      	nop
 8007944:	08011274 	.word	0x08011274
 8007948:	080112a8 	.word	0x080112a8
 800794c:	080112c0 	.word	0x080112c0
 8007950:	20008974 	.word	0x20008974
 8007954:	200031d8 	.word	0x200031d8
 8007958:	20008978 	.word	0x20008978
 800795c:	2000897c 	.word	0x2000897c
 8007960:	2000897a 	.word	0x2000897a
 8007964:	080112e8 	.word	0x080112e8
 8007968:	080112f8 	.word	0x080112f8
 800796c:	08011304 	.word	0x08011304
 8007970:	20008984 	.word	0x20008984
 8007974:	20008988 	.word	0x20008988
 8007978:	20008990 	.word	0x20008990
 800797c:	2000898e 	.word	0x2000898e
 8007980:	20008954 	.word	0x20008954
 8007984:	08011324 	.word	0x08011324
 8007988:	0801134c 	.word	0x0801134c
 800798c:	08011378 	.word	0x08011378
    }

    if (pcb->remote_port == tcphdr->src &&
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	8b1a      	ldrh	r2, [r3, #24]
 8007994:	4b72      	ldr	r3, [pc, #456]	; (8007b60 <tcp_input+0x49c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	429a      	cmp	r2, r3
 800799e:	d13a      	bne.n	8007a16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	8ada      	ldrh	r2, [r3, #22]
 80079a4:	4b6e      	ldr	r3, [pc, #440]	; (8007b60 <tcp_input+0x49c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d132      	bne.n	8007a16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	4b6b      	ldr	r3, [pc, #428]	; (8007b64 <tcp_input+0x4a0>)
 80079b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d12c      	bne.n	8007a16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4b68      	ldr	r3, [pc, #416]	; (8007b64 <tcp_input+0x4a0>)
 80079c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d126      	bne.n	8007a16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d106      	bne.n	80079e0 <tcp_input+0x31c>
 80079d2:	4b65      	ldr	r3, [pc, #404]	; (8007b68 <tcp_input+0x4a4>)
 80079d4:	f240 120d 	movw	r2, #269	; 0x10d
 80079d8:	4964      	ldr	r1, [pc, #400]	; (8007b6c <tcp_input+0x4a8>)
 80079da:	4865      	ldr	r0, [pc, #404]	; (8007b70 <tcp_input+0x4ac>)
 80079dc:	f006 ffea 	bl	800e9b4 <iprintf>
      if (prev != NULL) {
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <tcp_input+0x338>
        prev->next = pcb->next;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80079ee:	4b61      	ldr	r3, [pc, #388]	; (8007b74 <tcp_input+0x4b0>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80079f6:	4a5f      	ldr	r2, [pc, #380]	; (8007b74 <tcp_input+0x4b0>)
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d111      	bne.n	8007a2a <tcp_input+0x366>
 8007a06:	4b58      	ldr	r3, [pc, #352]	; (8007b68 <tcp_input+0x4a4>)
 8007a08:	f240 1215 	movw	r2, #277	; 0x115
 8007a0c:	495a      	ldr	r1, [pc, #360]	; (8007b78 <tcp_input+0x4b4>)
 8007a0e:	4858      	ldr	r0, [pc, #352]	; (8007b70 <tcp_input+0x4ac>)
 8007a10:	f006 ffd0 	bl	800e9b4 <iprintf>
      break;
 8007a14:	e009      	b.n	8007a2a <tcp_input+0x366>
    }
    prev = pcb;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f47f af5e 	bne.w	80078e4 <tcp_input+0x220>
 8007a28:	e000      	b.n	8007a2c <tcp_input+0x368>
      break;
 8007a2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f040 80aa 	bne.w	8007b88 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a34:	4b51      	ldr	r3, [pc, #324]	; (8007b7c <tcp_input+0x4b8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e03f      	b.n	8007abc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	7d1b      	ldrb	r3, [r3, #20]
 8007a40:	2b0a      	cmp	r3, #10
 8007a42:	d006      	beq.n	8007a52 <tcp_input+0x38e>
 8007a44:	4b48      	ldr	r3, [pc, #288]	; (8007b68 <tcp_input+0x4a4>)
 8007a46:	f240 121f 	movw	r2, #287	; 0x11f
 8007a4a:	494d      	ldr	r1, [pc, #308]	; (8007b80 <tcp_input+0x4bc>)
 8007a4c:	4848      	ldr	r0, [pc, #288]	; (8007b70 <tcp_input+0x4ac>)
 8007a4e:	f006 ffb1 	bl	800e9b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	7a1b      	ldrb	r3, [r3, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	7a1a      	ldrb	r2, [r3, #8]
 8007a5e:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <tcp_input+0x4a0>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a66:	3301      	adds	r3, #1
 8007a68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d122      	bne.n	8007ab4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	8b1a      	ldrh	r2, [r3, #24]
 8007a72:	4b3b      	ldr	r3, [pc, #236]	; (8007b60 <tcp_input+0x49c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d11b      	bne.n	8007ab6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	8ada      	ldrh	r2, [r3, #22]
 8007a82:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <tcp_input+0x49c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	885b      	ldrh	r3, [r3, #2]
 8007a88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d113      	bne.n	8007ab6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4b34      	ldr	r3, [pc, #208]	; (8007b64 <tcp_input+0x4a0>)
 8007a94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d10d      	bne.n	8007ab6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <tcp_input+0x4a0>)
 8007aa0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d107      	bne.n	8007ab6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007aa6:	69b8      	ldr	r0, [r7, #24]
 8007aa8:	f000 fb56 	bl	8008158 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fd fd31 	bl	8005514 <pbuf_free>
        return;
 8007ab2:	e1fd      	b.n	8007eb0 <tcp_input+0x7ec>
        continue;
 8007ab4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1bc      	bne.n	8007a3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ac6:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <tcp_input+0x4c0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e02a      	b.n	8007b24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	7a1b      	ldrb	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	7a1a      	ldrb	r2, [r3, #8]
 8007ada:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <tcp_input+0x4a0>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d002      	beq.n	8007af0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	61fb      	str	r3, [r7, #28]
        continue;
 8007aee:	e016      	b.n	8007b1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	8ada      	ldrh	r2, [r3, #22]
 8007af4:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <tcp_input+0x49c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d10c      	bne.n	8007b1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <tcp_input+0x4a0>)
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d00f      	beq.n	8007b2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <tcp_input+0x46a>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d1      	bne.n	8007ace <tcp_input+0x40a>
 8007b2a:	e000      	b.n	8007b2e <tcp_input+0x46a>
            break;
 8007b2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d029      	beq.n	8007b88 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <tcp_input+0x4c0>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <tcp_input+0x4c0>)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f000 fa03 	bl	8007f5c <tcp_listen_input>
      }
      pbuf_free(p);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fd fcdc 	bl	8005514 <pbuf_free>
      return;
 8007b5c:	e1a8      	b.n	8007eb0 <tcp_input+0x7ec>
 8007b5e:	bf00      	nop
 8007b60:	20008974 	.word	0x20008974
 8007b64:	200031d8 	.word	0x200031d8
 8007b68:	08011274 	.word	0x08011274
 8007b6c:	080113a0 	.word	0x080113a0
 8007b70:	080112c0 	.word	0x080112c0
 8007b74:	20008954 	.word	0x20008954
 8007b78:	080113cc 	.word	0x080113cc
 8007b7c:	20008958 	.word	0x20008958
 8007b80:	080113f8 	.word	0x080113f8
 8007b84:	20008950 	.word	0x20008950
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 8158 	beq.w	8007e40 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007b90:	4b95      	ldr	r3, [pc, #596]	; (8007de8 <tcp_input+0x724>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	891a      	ldrh	r2, [r3, #8]
 8007b9a:	4b93      	ldr	r3, [pc, #588]	; (8007de8 <tcp_input+0x724>)
 8007b9c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007b9e:	4a92      	ldr	r2, [pc, #584]	; (8007de8 <tcp_input+0x724>)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007ba4:	4b91      	ldr	r3, [pc, #580]	; (8007dec <tcp_input+0x728>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a8f      	ldr	r2, [pc, #572]	; (8007de8 <tcp_input+0x724>)
 8007baa:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <tcp_input+0x72c>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007bb2:	4b90      	ldr	r3, [pc, #576]	; (8007df4 <tcp_input+0x730>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007bb8:	4b8f      	ldr	r3, [pc, #572]	; (8007df8 <tcp_input+0x734>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007bbe:	4b8f      	ldr	r3, [pc, #572]	; (8007dfc <tcp_input+0x738>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7b5b      	ldrb	r3, [r3, #13]
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007be0:	69b8      	ldr	r0, [r7, #24]
 8007be2:	f7ff f843 	bl	8006c6c <tcp_process_refused_data>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f113 0f0d 	cmn.w	r3, #13
 8007bec:	d007      	beq.n	8007bfe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007bf6:	4b82      	ldr	r3, [pc, #520]	; (8007e00 <tcp_input+0x73c>)
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f040 80e3 	bne.w	8007dce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007c08:	69b8      	ldr	r0, [r7, #24]
 8007c0a:	f003 fe71 	bl	800b8f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007c0e:	e0de      	b.n	8007dce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007c10:	4a7c      	ldr	r2, [pc, #496]	; (8007e04 <tcp_input+0x740>)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007c16:	69b8      	ldr	r0, [r7, #24]
 8007c18:	f000 fb18 	bl	800824c <tcp_process>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c24:	f113 0f0d 	cmn.w	r3, #13
 8007c28:	f000 80d3 	beq.w	8007dd2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007c2c:	4b71      	ldr	r3, [pc, #452]	; (8007df4 <tcp_input+0x730>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d015      	beq.n	8007c64 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <tcp_input+0x590>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	6912      	ldr	r2, [r2, #16]
 8007c4c:	f06f 010d 	mvn.w	r1, #13
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	486c      	ldr	r0, [pc, #432]	; (8007e08 <tcp_input+0x744>)
 8007c58:	f7ff fbbc 	bl	80073d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007c5c:	69b8      	ldr	r0, [r7, #24]
 8007c5e:	f7fd ff09 	bl	8005a74 <tcp_free>
 8007c62:	e0da      	b.n	8007e1a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007c68:	4b63      	ldr	r3, [pc, #396]	; (8007df8 <tcp_input+0x734>)
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01d      	beq.n	8007cac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007c70:	4b61      	ldr	r3, [pc, #388]	; (8007df8 <tcp_input+0x734>)
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <tcp_input+0x5d2>
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	6910      	ldr	r0, [r2, #16]
 8007c8a:	89fa      	ldrh	r2, [r7, #14]
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	74fb      	strb	r3, [r7, #19]
 8007c94:	e001      	b.n	8007c9a <tcp_input+0x5d6>
 8007c96:	2300      	movs	r3, #0
 8007c98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c9e:	f113 0f0d 	cmn.w	r3, #13
 8007ca2:	f000 8098 	beq.w	8007dd6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ca6:	4b54      	ldr	r3, [pc, #336]	; (8007df8 <tcp_input+0x734>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	f000 f915 	bl	8007edc <tcp_input_delayed_close>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8090 	bne.w	8007dda <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007cba:	4b4d      	ldr	r3, [pc, #308]	; (8007df0 <tcp_input+0x72c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d041      	beq.n	8007d46 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d006      	beq.n	8007cd8 <tcp_input+0x614>
 8007cca:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <tcp_input+0x748>)
 8007ccc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007cd0:	494f      	ldr	r1, [pc, #316]	; (8007e10 <tcp_input+0x74c>)
 8007cd2:	4850      	ldr	r0, [pc, #320]	; (8007e14 <tcp_input+0x750>)
 8007cd4:	f006 fe6e 	bl	800e9b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	8b5b      	ldrh	r3, [r3, #26]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007ce4:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <tcp_input+0x72c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fc13 	bl	8005514 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007cee:	69b8      	ldr	r0, [r7, #24]
 8007cf0:	f7fe f9a8 	bl	8006044 <tcp_abort>
            goto aborted;
 8007cf4:	e091      	b.n	8007e1a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00c      	beq.n	8007d1a <tcp_input+0x656>
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	6918      	ldr	r0, [r3, #16]
 8007d0a:	4b39      	ldr	r3, [pc, #228]	; (8007df0 <tcp_input+0x72c>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	47a0      	blx	r4
 8007d14:	4603      	mov	r3, r0
 8007d16:	74fb      	strb	r3, [r7, #19]
 8007d18:	e008      	b.n	8007d2c <tcp_input+0x668>
 8007d1a:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <tcp_input+0x72c>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7ff f896 	bl	8006e54 <tcp_recv_null>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007d2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d30:	f113 0f0d 	cmn.w	r3, #13
 8007d34:	d053      	beq.n	8007dde <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007d3e:	4b2c      	ldr	r3, [pc, #176]	; (8007df0 <tcp_input+0x72c>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <tcp_input+0x730>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d030      	beq.n	8007db4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5e:	7b5a      	ldrb	r2, [r3, #13]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d64:	f042 0220 	orr.w	r2, r2, #32
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	735a      	strb	r2, [r3, #13]
 8007d6c:	e022      	b.n	8007db4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007d76:	d005      	beq.n	8007d84 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <tcp_input+0x6e2>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	6918      	ldr	r0, [r3, #16]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	47a0      	blx	r4
 8007da0:	4603      	mov	r3, r0
 8007da2:	74fb      	strb	r3, [r7, #19]
 8007da4:	e001      	b.n	8007daa <tcp_input+0x6e6>
 8007da6:	2300      	movs	r3, #0
 8007da8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007daa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007dae:	f113 0f0d 	cmn.w	r3, #13
 8007db2:	d016      	beq.n	8007de2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007db4:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <tcp_input+0x740>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007dba:	69b8      	ldr	r0, [r7, #24]
 8007dbc:	f000 f88e 	bl	8007edc <tcp_input_delayed_close>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d128      	bne.n	8007e18 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007dc6:	69b8      	ldr	r0, [r7, #24]
 8007dc8:	f002 ff80 	bl	800accc <tcp_output>
 8007dcc:	e025      	b.n	8007e1a <tcp_input+0x756>
        goto aborted;
 8007dce:	bf00      	nop
 8007dd0:	e023      	b.n	8007e1a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007dd2:	bf00      	nop
 8007dd4:	e021      	b.n	8007e1a <tcp_input+0x756>
              goto aborted;
 8007dd6:	bf00      	nop
 8007dd8:	e01f      	b.n	8007e1a <tcp_input+0x756>
          goto aborted;
 8007dda:	bf00      	nop
 8007ddc:	e01d      	b.n	8007e1a <tcp_input+0x756>
            goto aborted;
 8007dde:	bf00      	nop
 8007de0:	e01b      	b.n	8007e1a <tcp_input+0x756>
              goto aborted;
 8007de2:	bf00      	nop
 8007de4:	e019      	b.n	8007e1a <tcp_input+0x756>
 8007de6:	bf00      	nop
 8007de8:	20008960 	.word	0x20008960
 8007dec:	20008974 	.word	0x20008974
 8007df0:	20008994 	.word	0x20008994
 8007df4:	20008991 	.word	0x20008991
 8007df8:	2000898c 	.word	0x2000898c
 8007dfc:	20008990 	.word	0x20008990
 8007e00:	2000898e 	.word	0x2000898e
 8007e04:	20008998 	.word	0x20008998
 8007e08:	20008954 	.word	0x20008954
 8007e0c:	08011274 	.word	0x08011274
 8007e10:	08011428 	.word	0x08011428
 8007e14:	080112c0 	.word	0x080112c0
          goto aborted;
 8007e18:	bf00      	nop
    tcp_input_pcb = NULL;
 8007e1a:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <tcp_input+0x7f4>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007e20:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <tcp_input+0x7f8>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007e26:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <tcp_input+0x7fc>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d03f      	beq.n	8007eae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007e2e:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <tcp_input+0x7fc>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fb6e 	bl	8005514 <pbuf_free>
      inseg.p = NULL;
 8007e38:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <tcp_input+0x7fc>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007e3e:	e036      	b.n	8007eae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007e40:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <tcp_input+0x800>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	899b      	ldrh	r3, [r3, #12]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fc f84b 	bl	8003ee4 <lwip_htons>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d118      	bne.n	8007e8c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <tcp_input+0x804>)
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <tcp_input+0x808>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <tcp_input+0x80c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e6a:	4b16      	ldr	r3, [pc, #88]	; (8007ec4 <tcp_input+0x800>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e6e:	885b      	ldrh	r3, [r3, #2]
 8007e70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e72:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <tcp_input+0x800>)
 8007e74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	b292      	uxth	r2, r2
 8007e7a:	9202      	str	r2, [sp, #8]
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <tcp_input+0x810>)
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <tcp_input+0x814>)
 8007e84:	4602      	mov	r2, r0
 8007e86:	2000      	movs	r0, #0
 8007e88:	f003 fce0 	bl	800b84c <tcp_rst>
    pbuf_free(p);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fd fb41 	bl	8005514 <pbuf_free>
  return;
 8007e92:	e00c      	b.n	8007eae <tcp_input+0x7ea>
    goto dropped;
 8007e94:	bf00      	nop
 8007e96:	e006      	b.n	8007ea6 <tcp_input+0x7e2>
    goto dropped;
 8007e98:	bf00      	nop
 8007e9a:	e004      	b.n	8007ea6 <tcp_input+0x7e2>
    goto dropped;
 8007e9c:	bf00      	nop
 8007e9e:	e002      	b.n	8007ea6 <tcp_input+0x7e2>
      goto dropped;
 8007ea0:	bf00      	nop
 8007ea2:	e000      	b.n	8007ea6 <tcp_input+0x7e2>
      goto dropped;
 8007ea4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fd fb34 	bl	8005514 <pbuf_free>
 8007eac:	e000      	b.n	8007eb0 <tcp_input+0x7ec>
  return;
 8007eae:	bf00      	nop
}
 8007eb0:	3724      	adds	r7, #36	; 0x24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd90      	pop	{r4, r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20008998 	.word	0x20008998
 8007ebc:	20008994 	.word	0x20008994
 8007ec0:	20008960 	.word	0x20008960
 8007ec4:	20008974 	.word	0x20008974
 8007ec8:	20008988 	.word	0x20008988
 8007ecc:	2000898e 	.word	0x2000898e
 8007ed0:	20008984 	.word	0x20008984
 8007ed4:	200031e8 	.word	0x200031e8
 8007ed8:	200031ec 	.word	0x200031ec

08007edc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <tcp_input_delayed_close+0x1c>
 8007eea:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <tcp_input_delayed_close+0x6c>)
 8007eec:	f240 225a 	movw	r2, #602	; 0x25a
 8007ef0:	4916      	ldr	r1, [pc, #88]	; (8007f4c <tcp_input_delayed_close+0x70>)
 8007ef2:	4817      	ldr	r0, [pc, #92]	; (8007f50 <tcp_input_delayed_close+0x74>)
 8007ef4:	f006 fd5e 	bl	800e9b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007ef8:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <tcp_input_delayed_close+0x78>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01c      	beq.n	8007f3e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8b5b      	ldrh	r3, [r3, #26]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10d      	bne.n	8007f2c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <tcp_input_delayed_close+0x50>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6912      	ldr	r2, [r2, #16]
 8007f24:	f06f 010e 	mvn.w	r1, #14
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	480a      	ldr	r0, [pc, #40]	; (8007f58 <tcp_input_delayed_close+0x7c>)
 8007f30:	f7ff fa50 	bl	80073d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fd fd9d 	bl	8005a74 <tcp_free>
    return 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	08011274 	.word	0x08011274
 8007f4c:	08011444 	.word	0x08011444
 8007f50:	080112c0 	.word	0x080112c0
 8007f54:	20008991 	.word	0x20008991
 8007f58:	20008954 	.word	0x20008954

08007f5c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007f5c:	b590      	push	{r4, r7, lr}
 8007f5e:	b08b      	sub	sp, #44	; 0x2c
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007f64:	4b6f      	ldr	r3, [pc, #444]	; (8008124 <tcp_listen_input+0x1c8>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 80d2 	bne.w	8008116 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <tcp_listen_input+0x2a>
 8007f78:	4b6b      	ldr	r3, [pc, #428]	; (8008128 <tcp_listen_input+0x1cc>)
 8007f7a:	f240 2281 	movw	r2, #641	; 0x281
 8007f7e:	496b      	ldr	r1, [pc, #428]	; (800812c <tcp_listen_input+0x1d0>)
 8007f80:	486b      	ldr	r0, [pc, #428]	; (8008130 <tcp_listen_input+0x1d4>)
 8007f82:	f006 fd17 	bl	800e9b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007f86:	4b67      	ldr	r3, [pc, #412]	; (8008124 <tcp_listen_input+0x1c8>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 0310 	and.w	r3, r3, #16
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d019      	beq.n	8007fc6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f92:	4b68      	ldr	r3, [pc, #416]	; (8008134 <tcp_listen_input+0x1d8>)
 8007f94:	6819      	ldr	r1, [r3, #0]
 8007f96:	4b68      	ldr	r3, [pc, #416]	; (8008138 <tcp_listen_input+0x1dc>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4b67      	ldr	r3, [pc, #412]	; (800813c <tcp_listen_input+0x1e0>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fa2:	4b67      	ldr	r3, [pc, #412]	; (8008140 <tcp_listen_input+0x1e4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fa6:	885b      	ldrh	r3, [r3, #2]
 8007fa8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007faa:	4a65      	ldr	r2, [pc, #404]	; (8008140 <tcp_listen_input+0x1e4>)
 8007fac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fae:	8812      	ldrh	r2, [r2, #0]
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	9202      	str	r2, [sp, #8]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	4b63      	ldr	r3, [pc, #396]	; (8008144 <tcp_listen_input+0x1e8>)
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4b63      	ldr	r3, [pc, #396]	; (8008148 <tcp_listen_input+0x1ec>)
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f003 fc44 	bl	800b84c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007fc4:	e0a9      	b.n	800811a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007fc6:	4b57      	ldr	r3, [pc, #348]	; (8008124 <tcp_listen_input+0x1c8>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80a3 	beq.w	800811a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7d5b      	ldrb	r3, [r3, #21]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff f85f 	bl	800709c <tcp_alloc>
 8007fde:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d111      	bne.n	800800a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <tcp_listen_input+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6910      	ldr	r0, [r2, #16]
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4798      	blx	r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]
      return;
 8008002:	e08b      	b.n	800811c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008004:	23f0      	movs	r3, #240	; 0xf0
 8008006:	73bb      	strb	r3, [r7, #14]
      return;
 8008008:	e088      	b.n	800811c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800800a:	4b50      	ldr	r3, [pc, #320]	; (800814c <tcp_listen_input+0x1f0>)
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008012:	4b4e      	ldr	r3, [pc, #312]	; (800814c <tcp_listen_input+0x1f0>)
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8ada      	ldrh	r2, [r3, #22]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008022:	4b47      	ldr	r3, [pc, #284]	; (8008140 <tcp_listen_input+0x1e4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29a      	uxth	r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2203      	movs	r2, #3
 8008032:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008034:	4b41      	ldr	r3, [pc, #260]	; (800813c <tcp_listen_input+0x1e0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f7ff fa58 	bl	80074fc <tcp_next_iss>
 800804c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008066:	4b35      	ldr	r3, [pc, #212]	; (800813c <tcp_listen_input+0x1e0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7a5b      	ldrb	r3, [r3, #9]
 8008082:	f003 030c 	and.w	r3, r3, #12
 8008086:	b2da      	uxtb	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7a1a      	ldrb	r2, [r3, #8]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008094:	4b2e      	ldr	r3, [pc, #184]	; (8008150 <tcp_listen_input+0x1f4>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	60da      	str	r2, [r3, #12]
 800809c:	4a2c      	ldr	r2, [pc, #176]	; (8008150 <tcp_listen_input+0x1f4>)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	f003 fd95 	bl	800bbd0 <tcp_timer_needed>
 80080a6:	4b2b      	ldr	r3, [pc, #172]	; (8008154 <tcp_listen_input+0x1f8>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	f001 fd8f 	bl	8009bd0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <tcp_listen_input+0x1e4>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	89db      	ldrh	r3, [r3, #14]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f005 f98d 	bl	800d3f4 <ip4_route>
 80080da:	4601      	mov	r1, r0
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3304      	adds	r3, #4
 80080e0:	461a      	mov	r2, r3
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff fa30 	bl	8007548 <tcp_eff_send_mss_netif>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461a      	mov	r2, r3
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80080f0:	2112      	movs	r1, #18
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	f002 fcfc 	bl	800aaf0 <tcp_enqueue_flags>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80080fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008104:	2100      	movs	r1, #0
 8008106:	6978      	ldr	r0, [r7, #20]
 8008108:	f7fd fede 	bl	8005ec8 <tcp_abandon>
      return;
 800810c:	e006      	b.n	800811c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800810e:	6978      	ldr	r0, [r7, #20]
 8008110:	f002 fddc 	bl	800accc <tcp_output>
  return;
 8008114:	e001      	b.n	800811a <tcp_listen_input+0x1be>
    return;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <tcp_listen_input+0x1c0>
  return;
 800811a:	bf00      	nop
}
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	bd90      	pop	{r4, r7, pc}
 8008122:	bf00      	nop
 8008124:	20008990 	.word	0x20008990
 8008128:	08011274 	.word	0x08011274
 800812c:	0801146c 	.word	0x0801146c
 8008130:	080112c0 	.word	0x080112c0
 8008134:	20008988 	.word	0x20008988
 8008138:	2000898e 	.word	0x2000898e
 800813c:	20008984 	.word	0x20008984
 8008140:	20008974 	.word	0x20008974
 8008144:	200031e8 	.word	0x200031e8
 8008148:	200031ec 	.word	0x200031ec
 800814c:	200031d8 	.word	0x200031d8
 8008150:	20008954 	.word	0x20008954
 8008154:	2000895c 	.word	0x2000895c

08008158 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af04      	add	r7, sp, #16
 800815e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008160:	4b2f      	ldr	r3, [pc, #188]	; (8008220 <tcp_timewait_input+0xc8>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d153      	bne.n	8008214 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <tcp_timewait_input+0x28>
 8008172:	4b2c      	ldr	r3, [pc, #176]	; (8008224 <tcp_timewait_input+0xcc>)
 8008174:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008178:	492b      	ldr	r1, [pc, #172]	; (8008228 <tcp_timewait_input+0xd0>)
 800817a:	482c      	ldr	r0, [pc, #176]	; (800822c <tcp_timewait_input+0xd4>)
 800817c:	f006 fc1a 	bl	800e9b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008180:	4b27      	ldr	r3, [pc, #156]	; (8008220 <tcp_timewait_input+0xc8>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d02a      	beq.n	80081e2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <tcp_timewait_input+0xd8>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	db2d      	blt.n	80081f6 <tcp_timewait_input+0x9e>
 800819a:	4b25      	ldr	r3, [pc, #148]	; (8008230 <tcp_timewait_input+0xd8>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081a6:	440b      	add	r3, r1
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dc23      	bgt.n	80081f6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ae:	4b21      	ldr	r3, [pc, #132]	; (8008234 <tcp_timewait_input+0xdc>)
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	4b21      	ldr	r3, [pc, #132]	; (8008238 <tcp_timewait_input+0xe0>)
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <tcp_timewait_input+0xd8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081be:	4b1f      	ldr	r3, [pc, #124]	; (800823c <tcp_timewait_input+0xe4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081c6:	4a1d      	ldr	r2, [pc, #116]	; (800823c <tcp_timewait_input+0xe4>)
 80081c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ca:	8812      	ldrh	r2, [r2, #0]
 80081cc:	b292      	uxth	r2, r2
 80081ce:	9202      	str	r2, [sp, #8]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <tcp_timewait_input+0xe8>)
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4b1b      	ldr	r3, [pc, #108]	; (8008244 <tcp_timewait_input+0xec>)
 80081d8:	4602      	mov	r2, r0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f003 fb36 	bl	800b84c <tcp_rst>
      return;
 80081e0:	e01b      	b.n	800821a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <tcp_timewait_input+0xc8>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80081ee:	4b16      	ldr	r3, [pc, #88]	; (8008248 <tcp_timewait_input+0xf0>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <tcp_timewait_input+0xe0>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8b5b      	ldrh	r3, [r3, #26]
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fd5d 	bl	800accc <tcp_output>
  }
  return;
 8008212:	e001      	b.n	8008218 <tcp_timewait_input+0xc0>
    return;
 8008214:	bf00      	nop
 8008216:	e000      	b.n	800821a <tcp_timewait_input+0xc2>
  return;
 8008218:	bf00      	nop
}
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20008990 	.word	0x20008990
 8008224:	08011274 	.word	0x08011274
 8008228:	0801148c 	.word	0x0801148c
 800822c:	080112c0 	.word	0x080112c0
 8008230:	20008984 	.word	0x20008984
 8008234:	20008988 	.word	0x20008988
 8008238:	2000898e 	.word	0x2000898e
 800823c:	20008974 	.word	0x20008974
 8008240:	200031e8 	.word	0x200031e8
 8008244:	200031ec 	.word	0x200031ec
 8008248:	20008948 	.word	0x20008948

0800824c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800824c:	b590      	push	{r4, r7, lr}
 800824e:	b08d      	sub	sp, #52	; 0x34
 8008250:	af04      	add	r7, sp, #16
 8008252:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <tcp_process+0x24>
 8008262:	4b9d      	ldr	r3, [pc, #628]	; (80084d8 <tcp_process+0x28c>)
 8008264:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008268:	499c      	ldr	r1, [pc, #624]	; (80084dc <tcp_process+0x290>)
 800826a:	489d      	ldr	r0, [pc, #628]	; (80084e0 <tcp_process+0x294>)
 800826c:	f006 fba2 	bl	800e9b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008270:	4b9c      	ldr	r3, [pc, #624]	; (80084e4 <tcp_process+0x298>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d04e      	beq.n	800831a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d108      	bne.n	8008296 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008288:	4b97      	ldr	r3, [pc, #604]	; (80084e8 <tcp_process+0x29c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d123      	bne.n	80082d8 <tcp_process+0x8c>
        acceptable = 1;
 8008290:	2301      	movs	r3, #1
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e020      	b.n	80082d8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829a:	4b94      	ldr	r3, [pc, #592]	; (80084ec <tcp_process+0x2a0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d102      	bne.n	80082a8 <tcp_process+0x5c>
        acceptable = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	77fb      	strb	r3, [r7, #31]
 80082a6:	e017      	b.n	80082d8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80082a8:	4b90      	ldr	r3, [pc, #576]	; (80084ec <tcp_process+0x2a0>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	db10      	blt.n	80082d8 <tcp_process+0x8c>
 80082b6:	4b8d      	ldr	r3, [pc, #564]	; (80084ec <tcp_process+0x2a0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80082c2:	440b      	add	r3, r1
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc06      	bgt.n	80082d8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8b5b      	ldrh	r3, [r3, #26]
 80082ce:	f043 0302 	orr.w	r3, r3, #2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80082d8:	7ffb      	ldrb	r3, [r7, #31]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01b      	beq.n	8008316 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7d1b      	ldrb	r3, [r3, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <tcp_process+0xa8>
 80082e6:	4b7c      	ldr	r3, [pc, #496]	; (80084d8 <tcp_process+0x28c>)
 80082e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80082ec:	4980      	ldr	r1, [pc, #512]	; (80084f0 <tcp_process+0x2a4>)
 80082ee:	487c      	ldr	r0, [pc, #496]	; (80084e0 <tcp_process+0x294>)
 80082f0:	f006 fb60 	bl	800e9b4 <iprintf>
      recv_flags |= TF_RESET;
 80082f4:	4b7f      	ldr	r3, [pc, #508]	; (80084f4 <tcp_process+0x2a8>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f043 0308 	orr.w	r3, r3, #8
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b7d      	ldr	r3, [pc, #500]	; (80084f4 <tcp_process+0x2a8>)
 8008300:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	8b5b      	ldrh	r3, [r3, #26]
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008310:	f06f 030d 	mvn.w	r3, #13
 8008314:	e37a      	b.n	8008a0c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e378      	b.n	8008a0c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800831a:	4b72      	ldr	r3, [pc, #456]	; (80084e4 <tcp_process+0x298>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <tcp_process+0xfc>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7d1b      	ldrb	r3, [r3, #20]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d00c      	beq.n	8008348 <tcp_process+0xfc>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7d1b      	ldrb	r3, [r3, #20]
 8008332:	2b03      	cmp	r3, #3
 8008334:	d008      	beq.n	8008348 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8b5b      	ldrh	r3, [r3, #26]
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e361      	b.n	8008a0c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8b5b      	ldrh	r3, [r3, #26]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008354:	4b68      	ldr	r3, [pc, #416]	; (80084f8 <tcp_process+0x2ac>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fc2f 	bl	8009bd0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7d1b      	ldrb	r3, [r3, #20]
 8008376:	3b02      	subs	r3, #2
 8008378:	2b07      	cmp	r3, #7
 800837a:	f200 8337 	bhi.w	80089ec <tcp_process+0x7a0>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <tcp_process+0x138>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	080083a5 	.word	0x080083a5
 8008388:	080085d5 	.word	0x080085d5
 800838c:	0800874d 	.word	0x0800874d
 8008390:	08008777 	.word	0x08008777
 8008394:	0800889b 	.word	0x0800889b
 8008398:	0800874d 	.word	0x0800874d
 800839c:	08008927 	.word	0x08008927
 80083a0:	080089b7 	.word	0x080089b7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80083a4:	4b4f      	ldr	r3, [pc, #316]	; (80084e4 <tcp_process+0x298>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 80e4 	beq.w	800857a <tcp_process+0x32e>
 80083b2:	4b4c      	ldr	r3, [pc, #304]	; (80084e4 <tcp_process+0x298>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80dd 	beq.w	800857a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	4b48      	ldr	r3, [pc, #288]	; (80084e8 <tcp_process+0x29c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	f040 80d5 	bne.w	800857a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80083d0:	4b46      	ldr	r3, [pc, #280]	; (80084ec <tcp_process+0x2a0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <tcp_process+0x29c>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80083ea:	4b44      	ldr	r3, [pc, #272]	; (80084fc <tcp_process+0x2b0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	89db      	ldrh	r3, [r3, #14]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008404:	4b39      	ldr	r3, [pc, #228]	; (80084ec <tcp_process+0x2a0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2204      	movs	r2, #4
 8008412:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3304      	adds	r3, #4
 800841c:	4618      	mov	r0, r3
 800841e:	f004 ffe9 	bl	800d3f4 <ip4_route>
 8008422:	4601      	mov	r1, r0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	461a      	mov	r2, r3
 800842a:	4620      	mov	r0, r4
 800842c:	f7ff f88c 	bl	8007548 <tcp_eff_send_mss_netif>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800843c:	009a      	lsls	r2, r3, #2
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	f241 111c 	movw	r1, #4380	; 0x111c
 8008448:	428b      	cmp	r3, r1
 800844a:	bf38      	it	cc
 800844c:	460b      	movcc	r3, r1
 800844e:	429a      	cmp	r2, r3
 8008450:	d204      	bcs.n	800845c <tcp_process+0x210>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	b29b      	uxth	r3, r3
 800845a:	e00d      	b.n	8008478 <tcp_process+0x22c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	f241 121c 	movw	r2, #4380	; 0x111c
 8008466:	4293      	cmp	r3, r2
 8008468:	d904      	bls.n	8008474 <tcp_process+0x228>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	b29b      	uxth	r3, r3
 8008472:	e001      	b.n	8008478 <tcp_process+0x22c>
 8008474:	f241 131c 	movw	r3, #4380	; 0x111c
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <tcp_process+0x24a>
 8008488:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <tcp_process+0x28c>)
 800848a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800848e:	491c      	ldr	r1, [pc, #112]	; (8008500 <tcp_process+0x2b4>)
 8008490:	4813      	ldr	r0, [pc, #76]	; (80084e0 <tcp_process+0x294>)
 8008492:	f006 fa8f 	bl	800e9b4 <iprintf>
        --pcb->snd_queuelen;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12a      	bne.n	8008508 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b6:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <tcp_process+0x280>
 80084be:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <tcp_process+0x28c>)
 80084c0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80084c4:	490f      	ldr	r1, [pc, #60]	; (8008504 <tcp_process+0x2b8>)
 80084c6:	4806      	ldr	r0, [pc, #24]	; (80084e0 <tcp_process+0x294>)
 80084c8:	f006 fa74 	bl	800e9b4 <iprintf>
          pcb->unsent = rseg->next;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80084d4:	e01c      	b.n	8008510 <tcp_process+0x2c4>
 80084d6:	bf00      	nop
 80084d8:	08011274 	.word	0x08011274
 80084dc:	080114ac 	.word	0x080114ac
 80084e0:	080112c0 	.word	0x080112c0
 80084e4:	20008990 	.word	0x20008990
 80084e8:	20008988 	.word	0x20008988
 80084ec:	20008984 	.word	0x20008984
 80084f0:	080114c8 	.word	0x080114c8
 80084f4:	20008991 	.word	0x20008991
 80084f8:	20008948 	.word	0x20008948
 80084fc:	20008974 	.word	0x20008974
 8008500:	080114e8 	.word	0x080114e8
 8008504:	08011500 	.word	0x08011500
        } else {
          pcb->unacked = rseg->next;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008510:	6978      	ldr	r0, [r7, #20]
 8008512:	f7fe fc3c 	bl	8006d8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008524:	861a      	strh	r2, [r3, #48]	; 0x30
 8008526:	e006      	b.n	8008536 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <tcp_process+0x30a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6910      	ldr	r0, [r2, #16]
 800854a:	2200      	movs	r2, #0
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	77bb      	strb	r3, [r7, #30]
 8008554:	e001      	b.n	800855a <tcp_process+0x30e>
 8008556:	2300      	movs	r3, #0
 8008558:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800855a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800855e:	f113 0f0d 	cmn.w	r3, #13
 8008562:	d102      	bne.n	800856a <tcp_process+0x31e>
          return ERR_ABRT;
 8008564:	f06f 030c 	mvn.w	r3, #12
 8008568:	e250      	b.n	8008a0c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8b5b      	ldrh	r3, [r3, #26]
 800856e:	f043 0302 	orr.w	r3, r3, #2
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008578:	e23a      	b.n	80089f0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800857a:	4b98      	ldr	r3, [pc, #608]	; (80087dc <tcp_process+0x590>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0310 	and.w	r3, r3, #16
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8234 	beq.w	80089f0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008588:	4b95      	ldr	r3, [pc, #596]	; (80087e0 <tcp_process+0x594>)
 800858a:	6819      	ldr	r1, [r3, #0]
 800858c:	4b95      	ldr	r3, [pc, #596]	; (80087e4 <tcp_process+0x598>)
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	4b95      	ldr	r3, [pc, #596]	; (80087e8 <tcp_process+0x59c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008598:	4b94      	ldr	r3, [pc, #592]	; (80087ec <tcp_process+0x5a0>)
 800859a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085a0:	4a92      	ldr	r2, [pc, #584]	; (80087ec <tcp_process+0x5a0>)
 80085a2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085a4:	8812      	ldrh	r2, [r2, #0]
 80085a6:	b292      	uxth	r2, r2
 80085a8:	9202      	str	r2, [sp, #8]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	4b90      	ldr	r3, [pc, #576]	; (80087f0 <tcp_process+0x5a4>)
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4b90      	ldr	r3, [pc, #576]	; (80087f4 <tcp_process+0x5a8>)
 80085b2:	4602      	mov	r2, r0
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f003 f949 	bl	800b84c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	f200 8215 	bhi.w	80089f0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f002 ff13 	bl	800b3f8 <tcp_rexmit_rto>
      break;
 80085d2:	e20d      	b.n	80089f0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80085d4:	4b81      	ldr	r3, [pc, #516]	; (80087dc <tcp_process+0x590>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80a1 	beq.w	8008724 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80085e2:	4b7f      	ldr	r3, [pc, #508]	; (80087e0 <tcp_process+0x594>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	db7e      	blt.n	80086f0 <tcp_process+0x4a4>
 80085f2:	4b7b      	ldr	r3, [pc, #492]	; (80087e0 <tcp_process+0x594>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dc77      	bgt.n	80086f0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2204      	movs	r2, #4
 8008604:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800860e:	23fa      	movs	r3, #250	; 0xfa
 8008610:	77bb      	strb	r3, [r7, #30]
 8008612:	e01d      	b.n	8008650 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <tcp_process+0x3e0>
 800861e:	4b76      	ldr	r3, [pc, #472]	; (80087f8 <tcp_process+0x5ac>)
 8008620:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008624:	4975      	ldr	r1, [pc, #468]	; (80087fc <tcp_process+0x5b0>)
 8008626:	4876      	ldr	r0, [pc, #472]	; (8008800 <tcp_process+0x5b4>)
 8008628:	f006 f9c4 	bl	800e9b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <tcp_process+0x400>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6910      	ldr	r0, [r2, #16]
 8008640:	2200      	movs	r2, #0
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	77bb      	strb	r3, [r7, #30]
 800864a:	e001      	b.n	8008650 <tcp_process+0x404>
 800864c:	23f0      	movs	r3, #240	; 0xf0
 800864e:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8008650:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008658:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800865c:	f113 0f0d 	cmn.w	r3, #13
 8008660:	d002      	beq.n	8008668 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7fd fcee 	bl	8006044 <tcp_abort>
            }
            return ERR_ABRT;
 8008668:	f06f 030c 	mvn.w	r3, #12
 800866c:	e1ce      	b.n	8008a0c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fae0 	bl	8008c34 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008674:	4b63      	ldr	r3, [pc, #396]	; (8008804 <tcp_process+0x5b8>)
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <tcp_process+0x43c>
            recv_acked--;
 800867c:	4b61      	ldr	r3, [pc, #388]	; (8008804 <tcp_process+0x5b8>)
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	4b5f      	ldr	r3, [pc, #380]	; (8008804 <tcp_process+0x5b8>)
 8008686:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800868c:	009a      	lsls	r2, r3, #2
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	f241 111c 	movw	r1, #4380	; 0x111c
 8008698:	428b      	cmp	r3, r1
 800869a:	bf38      	it	cc
 800869c:	460b      	movcc	r3, r1
 800869e:	429a      	cmp	r2, r3
 80086a0:	d204      	bcs.n	80086ac <tcp_process+0x460>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	e00d      	b.n	80086c8 <tcp_process+0x47c>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	f241 121c 	movw	r2, #4380	; 0x111c
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d904      	bls.n	80086c4 <tcp_process+0x478>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	e001      	b.n	80086c8 <tcp_process+0x47c>
 80086c4:	f241 131c 	movw	r3, #4380	; 0x111c
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80086ce:	4b4e      	ldr	r3, [pc, #312]	; (8008808 <tcp_process+0x5bc>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d037      	beq.n	800874a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8b5b      	ldrh	r3, [r3, #26]
 80086de:	f043 0302 	orr.w	r3, r3, #2
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2207      	movs	r2, #7
 80086ec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80086ee:	e02c      	b.n	800874a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086f0:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <tcp_process+0x594>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	4b3b      	ldr	r3, [pc, #236]	; (80087e4 <tcp_process+0x598>)
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b3b      	ldr	r3, [pc, #236]	; (80087e8 <tcp_process+0x59c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008700:	4b3a      	ldr	r3, [pc, #232]	; (80087ec <tcp_process+0x5a0>)
 8008702:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008708:	4a38      	ldr	r2, [pc, #224]	; (80087ec <tcp_process+0x5a0>)
 800870a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800870c:	8812      	ldrh	r2, [r2, #0]
 800870e:	b292      	uxth	r2, r2
 8008710:	9202      	str	r2, [sp, #8]
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	4b36      	ldr	r3, [pc, #216]	; (80087f0 <tcp_process+0x5a4>)
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4b36      	ldr	r3, [pc, #216]	; (80087f4 <tcp_process+0x5a8>)
 800871a:	4602      	mov	r2, r0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f003 f895 	bl	800b84c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008722:	e167      	b.n	80089f4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008724:	4b2d      	ldr	r3, [pc, #180]	; (80087dc <tcp_process+0x590>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8161 	beq.w	80089f4 <tcp_process+0x7a8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	4b2b      	ldr	r3, [pc, #172]	; (80087e8 <tcp_process+0x59c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	f040 8159 	bne.w	80089f4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 fe7a 	bl	800b43c <tcp_rexmit>
      break;
 8008748:	e154      	b.n	80089f4 <tcp_process+0x7a8>
 800874a:	e153      	b.n	80089f4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa71 	bl	8008c34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008752:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <tcp_process+0x5bc>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 814c 	beq.w	80089f8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8b5b      	ldrh	r3, [r3, #26]
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2207      	movs	r2, #7
 8008772:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008774:	e140      	b.n	80089f8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa5c 	bl	8008c34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800877c:	4b22      	ldr	r3, [pc, #136]	; (8008808 <tcp_process+0x5bc>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b00      	cmp	r3, #0
 8008786:	d071      	beq.n	800886c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008788:	4b14      	ldr	r3, [pc, #80]	; (80087dc <tcp_process+0x590>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	d060      	beq.n	8008856 <tcp_process+0x60a>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008798:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <tcp_process+0x594>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d15a      	bne.n	8008856 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d156      	bne.n	8008856 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8b5b      	ldrh	r3, [r3, #26]
 80087ac:	f043 0302 	orr.w	r3, r3, #2
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fe fdbc 	bl	8007334 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80087bc:	4b13      	ldr	r3, [pc, #76]	; (800880c <tcp_process+0x5c0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d105      	bne.n	80087d2 <tcp_process+0x586>
 80087c6:	4b11      	ldr	r3, [pc, #68]	; (800880c <tcp_process+0x5c0>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	4a0f      	ldr	r2, [pc, #60]	; (800880c <tcp_process+0x5c0>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e02e      	b.n	8008830 <tcp_process+0x5e4>
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <tcp_process+0x5c0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	e027      	b.n	800882a <tcp_process+0x5de>
 80087da:	bf00      	nop
 80087dc:	20008990 	.word	0x20008990
 80087e0:	20008988 	.word	0x20008988
 80087e4:	2000898e 	.word	0x2000898e
 80087e8:	20008984 	.word	0x20008984
 80087ec:	20008974 	.word	0x20008974
 80087f0:	200031e8 	.word	0x200031e8
 80087f4:	200031ec 	.word	0x200031ec
 80087f8:	08011274 	.word	0x08011274
 80087fc:	08011514 	.word	0x08011514
 8008800:	080112c0 	.word	0x080112c0
 8008804:	2000898c 	.word	0x2000898c
 8008808:	20008991 	.word	0x20008991
 800880c:	20008954 	.word	0x20008954
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d104      	bne.n	8008824 <tcp_process+0x5d8>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	e005      	b.n	8008830 <tcp_process+0x5e4>
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1ef      	bne.n	8008810 <tcp_process+0x5c4>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	4b77      	ldr	r3, [pc, #476]	; (8008a14 <tcp_process+0x7c8>)
 8008838:	2201      	movs	r2, #1
 800883a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	220a      	movs	r2, #10
 8008840:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008842:	4b75      	ldr	r3, [pc, #468]	; (8008a18 <tcp_process+0x7cc>)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	4a73      	ldr	r2, [pc, #460]	; (8008a18 <tcp_process+0x7cc>)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	f003 f9be 	bl	800bbd0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008854:	e0d2      	b.n	80089fc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	8b5b      	ldrh	r3, [r3, #26]
 800885a:	f043 0302 	orr.w	r3, r3, #2
 800885e:	b29a      	uxth	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2208      	movs	r2, #8
 8008868:	751a      	strb	r2, [r3, #20]
      break;
 800886a:	e0c7      	b.n	80089fc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800886c:	4b6b      	ldr	r3, [pc, #428]	; (8008a1c <tcp_process+0x7d0>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80c1 	beq.w	80089fc <tcp_process+0x7b0>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800887e:	4b68      	ldr	r3, [pc, #416]	; (8008a20 <tcp_process+0x7d4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	f040 80ba 	bne.w	80089fc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 80b5 	bne.w	80089fc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2206      	movs	r2, #6
 8008896:	751a      	strb	r2, [r3, #20]
      break;
 8008898:	e0b0      	b.n	80089fc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9ca 	bl	8008c34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80088a0:	4b60      	ldr	r3, [pc, #384]	; (8008a24 <tcp_process+0x7d8>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 0320 	and.w	r3, r3, #32
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80a9 	beq.w	8008a00 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8b5b      	ldrh	r3, [r3, #26]
 80088b2:	f043 0302 	orr.w	r3, r3, #2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7fe fd39 	bl	8007334 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80088c2:	4b59      	ldr	r3, [pc, #356]	; (8008a28 <tcp_process+0x7dc>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d105      	bne.n	80088d8 <tcp_process+0x68c>
 80088cc:	4b56      	ldr	r3, [pc, #344]	; (8008a28 <tcp_process+0x7dc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	4a55      	ldr	r2, [pc, #340]	; (8008a28 <tcp_process+0x7dc>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e013      	b.n	8008900 <tcp_process+0x6b4>
 80088d8:	4b53      	ldr	r3, [pc, #332]	; (8008a28 <tcp_process+0x7dc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	e00c      	b.n	80088fa <tcp_process+0x6ae>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d104      	bne.n	80088f4 <tcp_process+0x6a8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	e005      	b.n	8008900 <tcp_process+0x6b4>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1ef      	bne.n	80088e0 <tcp_process+0x694>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	4b43      	ldr	r3, [pc, #268]	; (8008a14 <tcp_process+0x7c8>)
 8008908:	2201      	movs	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	220a      	movs	r2, #10
 8008910:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008912:	4b41      	ldr	r3, [pc, #260]	; (8008a18 <tcp_process+0x7cc>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	4a3f      	ldr	r2, [pc, #252]	; (8008a18 <tcp_process+0x7cc>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	f003 f956 	bl	800bbd0 <tcp_timer_needed>
      }
      break;
 8008924:	e06c      	b.n	8008a00 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f984 	bl	8008c34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800892c:	4b3b      	ldr	r3, [pc, #236]	; (8008a1c <tcp_process+0x7d0>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d065      	beq.n	8008a04 <tcp_process+0x7b8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800893c:	4b38      	ldr	r3, [pc, #224]	; (8008a20 <tcp_process+0x7d4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d15f      	bne.n	8008a04 <tcp_process+0x7b8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d15b      	bne.n	8008a04 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe fcf1 	bl	8007334 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008952:	4b35      	ldr	r3, [pc, #212]	; (8008a28 <tcp_process+0x7dc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	429a      	cmp	r2, r3
 800895a:	d105      	bne.n	8008968 <tcp_process+0x71c>
 800895c:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <tcp_process+0x7dc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	4a31      	ldr	r2, [pc, #196]	; (8008a28 <tcp_process+0x7dc>)
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e013      	b.n	8008990 <tcp_process+0x744>
 8008968:	4b2f      	ldr	r3, [pc, #188]	; (8008a28 <tcp_process+0x7dc>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	e00c      	b.n	800898a <tcp_process+0x73e>
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d104      	bne.n	8008984 <tcp_process+0x738>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	60da      	str	r2, [r3, #12]
 8008982:	e005      	b.n	8008990 <tcp_process+0x744>
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1ef      	bne.n	8008970 <tcp_process+0x724>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	4b1f      	ldr	r3, [pc, #124]	; (8008a14 <tcp_process+0x7c8>)
 8008998:	2201      	movs	r2, #1
 800899a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	220a      	movs	r2, #10
 80089a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80089a2:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <tcp_process+0x7cc>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	4a1b      	ldr	r2, [pc, #108]	; (8008a18 <tcp_process+0x7cc>)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	f003 f90e 	bl	800bbd0 <tcp_timer_needed>
      }
      break;
 80089b4:	e026      	b.n	8008a04 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f93c 	bl	8008c34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80089bc:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <tcp_process+0x7d0>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01f      	beq.n	8008a08 <tcp_process+0x7bc>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089cc:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <tcp_process+0x7d4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d119      	bne.n	8008a08 <tcp_process+0x7bc>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d115      	bne.n	8008a08 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <tcp_process+0x7d8>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f043 0310 	orr.w	r3, r3, #16
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <tcp_process+0x7d8>)
 80089e8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80089ea:	e00d      	b.n	8008a08 <tcp_process+0x7bc>
    default:
      break;
 80089ec:	bf00      	nop
 80089ee:	e00c      	b.n	8008a0a <tcp_process+0x7be>
      break;
 80089f0:	bf00      	nop
 80089f2:	e00a      	b.n	8008a0a <tcp_process+0x7be>
      break;
 80089f4:	bf00      	nop
 80089f6:	e008      	b.n	8008a0a <tcp_process+0x7be>
      break;
 80089f8:	bf00      	nop
 80089fa:	e006      	b.n	8008a0a <tcp_process+0x7be>
      break;
 80089fc:	bf00      	nop
 80089fe:	e004      	b.n	8008a0a <tcp_process+0x7be>
      break;
 8008a00:	bf00      	nop
 8008a02:	e002      	b.n	8008a0a <tcp_process+0x7be>
      break;
 8008a04:	bf00      	nop
 8008a06:	e000      	b.n	8008a0a <tcp_process+0x7be>
      break;
 8008a08:	bf00      	nop
  }
  return ERR_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3724      	adds	r7, #36	; 0x24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}
 8008a14:	2000895c 	.word	0x2000895c
 8008a18:	20008958 	.word	0x20008958
 8008a1c:	20008990 	.word	0x20008990
 8008a20:	20008988 	.word	0x20008988
 8008a24:	20008991 	.word	0x20008991
 8008a28:	20008954 	.word	0x20008954

08008a2c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <tcp_oos_insert_segment+0x1e>
 8008a3c:	4b3b      	ldr	r3, [pc, #236]	; (8008b2c <tcp_oos_insert_segment+0x100>)
 8008a3e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008a42:	493b      	ldr	r1, [pc, #236]	; (8008b30 <tcp_oos_insert_segment+0x104>)
 8008a44:	483b      	ldr	r0, [pc, #236]	; (8008b34 <tcp_oos_insert_segment+0x108>)
 8008a46:	f005 ffb5 	bl	800e9b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	899b      	ldrh	r3, [r3, #12]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fb fa46 	bl	8003ee4 <lwip_htons>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d028      	beq.n	8008ab6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008a64:	6838      	ldr	r0, [r7, #0]
 8008a66:	f7fe f97d 	bl	8006d64 <tcp_segs_free>
    next = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	e056      	b.n	8008b1e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fb fa33 	bl	8003ee4 <lwip_htons>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	899b      	ldrh	r3, [r3, #12]
 8008a90:	b29c      	uxth	r4, r3
 8008a92:	2001      	movs	r0, #1
 8008a94:	f7fb fa26 	bl	8003ee4 <lwip_htons>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	4322      	orrs	r2, r4
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7fe f96c 	bl	8006d8e <tcp_seg_free>
    while (next &&
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00e      	beq.n	8008ada <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <tcp_oos_insert_segment+0x10c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	441a      	add	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	8909      	ldrh	r1, [r1, #8]
 8008ad2:	440b      	add	r3, r1
 8008ad4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	daca      	bge.n	8008a70 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	891b      	ldrh	r3, [r3, #8]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <tcp_oos_insert_segment+0x10c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	441a      	add	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd12      	ble.n	8008b1e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <tcp_oos_insert_segment+0x10c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	891b      	ldrh	r3, [r3, #8]
 8008b16:	4619      	mov	r1, r3
 8008b18:	4610      	mov	r0, r2
 8008b1a:	f7fc fb75 	bl	8005208 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	601a      	str	r2, [r3, #0]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd90      	pop	{r4, r7, pc}
 8008b2c:	08011274 	.word	0x08011274
 8008b30:	08011534 	.word	0x08011534
 8008b34:	080112c0 	.word	0x080112c0
 8008b38:	20008984 	.word	0x20008984

08008b3c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008b3c:	b5b0      	push	{r4, r5, r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008b4a:	e03e      	b.n	8008bca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fc fd62 	bl	8005624 <pbuf_clen>
 8008b60:	4603      	mov	r3, r0
 8008b62:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b6a:	8a7a      	ldrh	r2, [r7, #18]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d906      	bls.n	8008b7e <tcp_free_acked_segments+0x42>
 8008b70:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <tcp_free_acked_segments+0xe0>)
 8008b72:	f240 4257 	movw	r2, #1111	; 0x457
 8008b76:	492a      	ldr	r1, [pc, #168]	; (8008c20 <tcp_free_acked_segments+0xe4>)
 8008b78:	482a      	ldr	r0, [pc, #168]	; (8008c24 <tcp_free_acked_segments+0xe8>)
 8008b7a:	f005 ff1b 	bl	800e9b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008b84:	8a7b      	ldrh	r3, [r7, #18]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	891a      	ldrh	r2, [r3, #8]
 8008b94:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <tcp_free_acked_segments+0xec>)
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	4413      	add	r3, r2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	4b22      	ldr	r3, [pc, #136]	; (8008c28 <tcp_free_acked_segments+0xec>)
 8008b9e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008ba0:	6978      	ldr	r0, [r7, #20]
 8008ba2:	f7fe f8f4 	bl	8006d8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <tcp_free_acked_segments+0x8e>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <tcp_free_acked_segments+0x8e>
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <tcp_free_acked_segments+0xe0>)
 8008bbe:	f240 4261 	movw	r2, #1121	; 0x461
 8008bc2:	491a      	ldr	r1, [pc, #104]	; (8008c2c <tcp_free_acked_segments+0xf0>)
 8008bc4:	4817      	ldr	r0, [pc, #92]	; (8008c24 <tcp_free_acked_segments+0xe8>)
 8008bc6:	f005 fef5 	bl	800e9b4 <iprintf>
  while (seg_list != NULL &&
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fb f999 	bl	8003f0e <lwip_htonl>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	891b      	ldrh	r3, [r3, #8]
 8008be2:	461d      	mov	r5, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	899b      	ldrh	r3, [r3, #12]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fb f979 	bl	8003ee4 <lwip_htons>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <tcp_free_acked_segments+0xc6>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <tcp_free_acked_segments+0xc8>
 8008c02:	2300      	movs	r3, #0
 8008c04:	442b      	add	r3, r5
 8008c06:	18e2      	adds	r2, r4, r3
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <tcp_free_acked_segments+0xf4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dd9c      	ble.n	8008b4c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008c12:	68bb      	ldr	r3, [r7, #8]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c1c:	08011274 	.word	0x08011274
 8008c20:	0801155c 	.word	0x0801155c
 8008c24:	080112c0 	.word	0x080112c0
 8008c28:	2000898c 	.word	0x2000898c
 8008c2c:	08011584 	.word	0x08011584
 8008c30:	20008988 	.word	0x20008988

08008c34 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008c34:	b5b0      	push	{r4, r5, r7, lr}
 8008c36:	b094      	sub	sp, #80	; 0x50
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <tcp_receive+0x20>
 8008c46:	4b91      	ldr	r3, [pc, #580]	; (8008e8c <tcp_receive+0x258>)
 8008c48:	f240 427b 	movw	r2, #1147	; 0x47b
 8008c4c:	4990      	ldr	r1, [pc, #576]	; (8008e90 <tcp_receive+0x25c>)
 8008c4e:	4891      	ldr	r0, [pc, #580]	; (8008e94 <tcp_receive+0x260>)
 8008c50:	f005 feb0 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	7d1b      	ldrb	r3, [r3, #20]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d806      	bhi.n	8008c6a <tcp_receive+0x36>
 8008c5c:	4b8b      	ldr	r3, [pc, #556]	; (8008e8c <tcp_receive+0x258>)
 8008c5e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008c62:	498d      	ldr	r1, [pc, #564]	; (8008e98 <tcp_receive+0x264>)
 8008c64:	488b      	ldr	r0, [pc, #556]	; (8008e94 <tcp_receive+0x260>)
 8008c66:	f005 fea5 	bl	800e9b4 <iprintf>

  if (flags & TCP_ACK) {
 8008c6a:	4b8c      	ldr	r3, [pc, #560]	; (8008e9c <tcp_receive+0x268>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0310 	and.w	r3, r3, #16
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 8264 	beq.w	8009140 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c84:	4413      	add	r3, r2
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c8c:	4b84      	ldr	r3, [pc, #528]	; (8008ea0 <tcp_receive+0x26c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	db1b      	blt.n	8008cce <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c9a:	4b81      	ldr	r3, [pc, #516]	; (8008ea0 <tcp_receive+0x26c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d106      	bne.n	8008cb0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ca6:	4b7f      	ldr	r3, [pc, #508]	; (8008ea4 <tcp_receive+0x270>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db0e      	blt.n	8008cce <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cb4:	4b7b      	ldr	r3, [pc, #492]	; (8008ea4 <tcp_receive+0x270>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d125      	bne.n	8008d08 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008cbc:	4b7a      	ldr	r3, [pc, #488]	; (8008ea8 <tcp_receive+0x274>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	89db      	ldrh	r3, [r3, #14]
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d91c      	bls.n	8008d08 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008cce:	4b76      	ldr	r3, [pc, #472]	; (8008ea8 <tcp_receive+0x274>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	89db      	ldrh	r3, [r3, #14]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d205      	bcs.n	8008cf8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008cf8:	4b69      	ldr	r3, [pc, #420]	; (8008ea0 <tcp_receive+0x26c>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008d00:	4b68      	ldr	r3, [pc, #416]	; (8008ea4 <tcp_receive+0x270>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008d08:	4b66      	ldr	r3, [pc, #408]	; (8008ea4 <tcp_receive+0x270>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc58      	bgt.n	8008dc8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008d16:	4b65      	ldr	r3, [pc, #404]	; (8008eac <tcp_receive+0x278>)
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d14b      	bne.n	8008db6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008d28:	4413      	add	r3, r2
 8008d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d142      	bne.n	8008db6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	db3d      	blt.n	8008db6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3e:	4b59      	ldr	r3, [pc, #356]	; (8008ea4 <tcp_receive+0x270>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d137      	bne.n	8008db6 <tcp_receive+0x182>
              found_dupack = 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d50:	2bff      	cmp	r3, #255	; 0xff
 8008d52:	d007      	beq.n	8008d64 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d91b      	bls.n	8008da6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d78:	4413      	add	r3, r2
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d30a      	bcc.n	8008d9c <tcp_receive+0x168>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d90:	4413      	add	r3, r2
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d9a:	e004      	b.n	8008da6 <tcp_receive+0x172>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008da2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d902      	bls.n	8008db6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 fbaf 	bl	800b514 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 8161 	bne.w	8009080 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dc6:	e15b      	b.n	8009080 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008dc8:	4b36      	ldr	r3, [pc, #216]	; (8008ea4 <tcp_receive+0x270>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f2c0 814e 	blt.w	8009076 <tcp_receive+0x442>
 8008dda:	4b32      	ldr	r3, [pc, #200]	; (8008ea4 <tcp_receive+0x270>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f300 8146 	bgt.w	8009076 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	8b5b      	ldrh	r3, [r3, #26]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d010      	beq.n	8008e18 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8b5b      	ldrh	r3, [r3, #26]
 8008dfa:	f023 0304 	bic.w	r3, r3, #4
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008e26:	10db      	asrs	r3, r3, #3
 8008e28:	b21b      	sxth	r3, r3
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4413      	add	r3, r2
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	b21a      	sxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008e40:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <tcp_receive+0x270>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <tcp_receive+0x270>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7d1b      	ldrb	r3, [r3, #20]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	f240 8097 	bls.w	8008f98 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d245      	bcs.n	8008f06 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	8b5b      	ldrh	r3, [r3, #26]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d014      	beq.n	8008eb0 <tcp_receive+0x27c>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e013      	b.n	8008eb2 <tcp_receive+0x27e>
 8008e8a:	bf00      	nop
 8008e8c:	08011274 	.word	0x08011274
 8008e90:	080115a4 	.word	0x080115a4
 8008e94:	080112c0 	.word	0x080112c0
 8008e98:	080115c0 	.word	0x080115c0
 8008e9c:	20008990 	.word	0x20008990
 8008ea0:	20008984 	.word	0x20008984
 8008ea4:	20008988 	.word	0x20008988
 8008ea8:	20008974 	.word	0x20008974
 8008eac:	2000898e 	.word	0x2000898e
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec0:	fb12 f303 	smulbb	r3, r2, r3
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bf28      	it	cs
 8008ecc:	4613      	movcs	r3, r2
 8008ece:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ed6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ed8:	4413      	add	r3, r2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d309      	bcc.n	8008efa <tcp_receive+0x2c6>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008eec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008eee:	4413      	add	r3, r2
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008ef8:	e04e      	b.n	8008f98 <tcp_receive+0x364>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f04:	e048      	b.n	8008f98 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f0e:	4413      	add	r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d309      	bcc.n	8008f30 <tcp_receive+0x2fc>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f24:	4413      	add	r3, r2
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008f2e:	e004      	b.n	8008f3a <tcp_receive+0x306>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d326      	bcc.n	8008f98 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f6a:	4413      	add	r3, r2
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d30a      	bcc.n	8008f8e <tcp_receive+0x35a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f82:	4413      	add	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f8c:	e004      	b.n	8008f98 <tcp_receive+0x364>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	4a98      	ldr	r2, [pc, #608]	; (8009204 <tcp_receive+0x5d0>)
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fdca 	bl	8008b3c <tcp_free_acked_segments>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb6:	4a94      	ldr	r2, [pc, #592]	; (8009208 <tcp_receive+0x5d4>)
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fdbf 	bl	8008b3c <tcp_free_acked_segments>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fd2:	861a      	strh	r2, [r3, #48]	; 0x30
 8008fd4:	e002      	b.n	8008fdc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008ff8:	4b84      	ldr	r3, [pc, #528]	; (800920c <tcp_receive+0x5d8>)
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8b5b      	ldrh	r3, [r3, #26]
 800900a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800900e:	2b00      	cmp	r3, #0
 8009010:	d035      	beq.n	800907e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009016:	2b00      	cmp	r3, #0
 8009018:	d118      	bne.n	800904c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4618      	mov	r0, r3
 8009030:	f7fa ff6d 	bl	8003f0e <lwip_htonl>
 8009034:	4603      	mov	r3, r0
 8009036:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc20      	bgt.n	800907e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8b5b      	ldrh	r3, [r3, #26]
 8009040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009044:	b29a      	uxth	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800904a:	e018      	b.n	800907e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4618      	mov	r0, r3
 800905a:	f7fa ff58 	bl	8003f0e <lwip_htonl>
 800905e:	4603      	mov	r3, r0
 8009060:	1ae3      	subs	r3, r4, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	dc0b      	bgt.n	800907e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8b5b      	ldrh	r3, [r3, #26]
 800906a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800906e:	b29a      	uxth	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009074:	e003      	b.n	800907e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f002 fc3a 	bl	800b8f0 <tcp_send_empty_ack>
 800907c:	e000      	b.n	8009080 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800907e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05b      	beq.n	8009140 <tcp_receive+0x50c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800908c:	4b60      	ldr	r3, [pc, #384]	; (8009210 <tcp_receive+0x5dc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	da54      	bge.n	8009140 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009096:	4b5f      	ldr	r3, [pc, #380]	; (8009214 <tcp_receive+0x5e0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80090aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090b4:	10db      	asrs	r3, r3, #3
 80090b6:	b21b      	sxth	r3, r3
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090ce:	4413      	add	r3, r2
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	b21a      	sxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80090d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da05      	bge.n	80090ec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80090e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090e4:	425b      	negs	r3, r3
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80090ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80090f6:	109b      	asrs	r3, r3, #2
 80090f8:	b21b      	sxth	r3, r3
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800910a:	b29a      	uxth	r2, r3
 800910c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009110:	4413      	add	r3, r2
 8009112:	b29b      	uxth	r3, r3
 8009114:	b21a      	sxth	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009120:	10db      	asrs	r3, r3, #3
 8009122:	b21b      	sxth	r3, r3
 8009124:	b29a      	uxth	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800912c:	b29b      	uxth	r3, r3
 800912e:	4413      	add	r3, r2
 8009130:	b29b      	uxth	r3, r3
 8009132:	b21a      	sxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009140:	4b35      	ldr	r3, [pc, #212]	; (8009218 <tcp_receive+0x5e4>)
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 84e2 	beq.w	8009b0e <tcp_receive+0xeda>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7d1b      	ldrb	r3, [r3, #20]
 800914e:	2b06      	cmp	r3, #6
 8009150:	f200 84dd 	bhi.w	8009b0e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009158:	4b30      	ldr	r3, [pc, #192]	; (800921c <tcp_receive+0x5e8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	f2c0 808f 	blt.w	8009284 <tcp_receive+0x650>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800916a:	4b2b      	ldr	r3, [pc, #172]	; (8009218 <tcp_receive+0x5e4>)
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	4b2a      	ldr	r3, [pc, #168]	; (800921c <tcp_receive+0x5e8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	440b      	add	r3, r1
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	3301      	adds	r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	f300 8082 	bgt.w	8009284 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009180:	4b27      	ldr	r3, [pc, #156]	; (8009220 <tcp_receive+0x5ec>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800918a:	4b24      	ldr	r3, [pc, #144]	; (800921c <tcp_receive+0x5e8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009192:	4b23      	ldr	r3, [pc, #140]	; (8009220 <tcp_receive+0x5ec>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <tcp_receive+0x574>
 800919a:	4b22      	ldr	r3, [pc, #136]	; (8009224 <tcp_receive+0x5f0>)
 800919c:	f240 5294 	movw	r2, #1428	; 0x594
 80091a0:	4921      	ldr	r1, [pc, #132]	; (8009228 <tcp_receive+0x5f4>)
 80091a2:	4822      	ldr	r0, [pc, #136]	; (800922c <tcp_receive+0x5f8>)
 80091a4:	f005 fc06 	bl	800e9b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d906      	bls.n	80091c0 <tcp_receive+0x58c>
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <tcp_receive+0x5f0>)
 80091b4:	f240 5295 	movw	r2, #1429	; 0x595
 80091b8:	491d      	ldr	r1, [pc, #116]	; (8009230 <tcp_receive+0x5fc>)
 80091ba:	481c      	ldr	r0, [pc, #112]	; (800922c <tcp_receive+0x5f8>)
 80091bc:	f005 fbfa 	bl	800e9b4 <iprintf>
      off = (u16_t)off32;
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80091c6:	4b16      	ldr	r3, [pc, #88]	; (8009220 <tcp_receive+0x5ec>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	891b      	ldrh	r3, [r3, #8]
 80091cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d906      	bls.n	80091e2 <tcp_receive+0x5ae>
 80091d4:	4b13      	ldr	r3, [pc, #76]	; (8009224 <tcp_receive+0x5f0>)
 80091d6:	f240 5297 	movw	r2, #1431	; 0x597
 80091da:	4916      	ldr	r1, [pc, #88]	; (8009234 <tcp_receive+0x600>)
 80091dc:	4813      	ldr	r0, [pc, #76]	; (800922c <tcp_receive+0x5f8>)
 80091de:	f005 fbe9 	bl	800e9b4 <iprintf>
      inseg.len -= off;
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <tcp_receive+0x5ec>)
 80091e4:	891a      	ldrh	r2, [r3, #8]
 80091e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <tcp_receive+0x5ec>)
 80091f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80091f2:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <tcp_receive+0x5ec>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	891a      	ldrh	r2, [r3, #8]
 80091f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009200:	e02a      	b.n	8009258 <tcp_receive+0x624>
 8009202:	bf00      	nop
 8009204:	080115dc 	.word	0x080115dc
 8009208:	080115e4 	.word	0x080115e4
 800920c:	2000898c 	.word	0x2000898c
 8009210:	20008988 	.word	0x20008988
 8009214:	20008948 	.word	0x20008948
 8009218:	2000898e 	.word	0x2000898e
 800921c:	20008984 	.word	0x20008984
 8009220:	20008960 	.word	0x20008960
 8009224:	08011274 	.word	0x08011274
 8009228:	080115ec 	.word	0x080115ec
 800922c:	080112c0 	.word	0x080112c0
 8009230:	080115fc 	.word	0x080115fc
 8009234:	0801160c 	.word	0x0801160c
        off -= p->len;
 8009238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923a:	895b      	ldrh	r3, [r3, #10]
 800923c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009248:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800924a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	2200      	movs	r2, #0
 8009250:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925a:	895b      	ldrh	r3, [r3, #10]
 800925c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009260:	429a      	cmp	r2, r3
 8009262:	d8e9      	bhi.n	8009238 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009268:	4619      	mov	r1, r3
 800926a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800926c:	f7fc f8cc 	bl	8005408 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	4a91      	ldr	r2, [pc, #580]	; (80094bc <tcp_receive+0x888>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	4b91      	ldr	r3, [pc, #580]	; (80094c0 <tcp_receive+0x88c>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	4a8f      	ldr	r2, [pc, #572]	; (80094bc <tcp_receive+0x888>)
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009282:	e00d      	b.n	80092a0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009284:	4b8d      	ldr	r3, [pc, #564]	; (80094bc <tcp_receive+0x888>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	da06      	bge.n	80092a0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	8b5b      	ldrh	r3, [r3, #26]
 8009296:	f043 0302 	orr.w	r3, r3, #2
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80092a0:	4b86      	ldr	r3, [pc, #536]	; (80094bc <tcp_receive+0x888>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f2c0 842a 	blt.w	8009b04 <tcp_receive+0xed0>
 80092b0:	4b82      	ldr	r3, [pc, #520]	; (80094bc <tcp_receive+0x888>)
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80092bc:	440b      	add	r3, r1
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	3301      	adds	r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f300 841e 	bgt.w	8009b04 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092cc:	4b7b      	ldr	r3, [pc, #492]	; (80094bc <tcp_receive+0x888>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	f040 829a 	bne.w	800980a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80092d6:	4b7a      	ldr	r3, [pc, #488]	; (80094c0 <tcp_receive+0x88c>)
 80092d8:	891c      	ldrh	r4, [r3, #8]
 80092da:	4b79      	ldr	r3, [pc, #484]	; (80094c0 <tcp_receive+0x88c>)
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	899b      	ldrh	r3, [r3, #12]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fa fdfe 	bl	8003ee4 <lwip_htons>
 80092e8:	4603      	mov	r3, r0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <tcp_receive+0x6c4>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <tcp_receive+0x6c6>
 80092f8:	2300      	movs	r3, #0
 80092fa:	4423      	add	r3, r4
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	4b71      	ldr	r3, [pc, #452]	; (80094c4 <tcp_receive+0x890>)
 8009300:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009306:	4b6f      	ldr	r3, [pc, #444]	; (80094c4 <tcp_receive+0x890>)
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d275      	bcs.n	80093fa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800930e:	4b6c      	ldr	r3, [pc, #432]	; (80094c0 <tcp_receive+0x88c>)
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	899b      	ldrh	r3, [r3, #12]
 8009314:	b29b      	uxth	r3, r3
 8009316:	4618      	mov	r0, r3
 8009318:	f7fa fde4 	bl	8003ee4 <lwip_htons>
 800931c:	4603      	mov	r3, r0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d01f      	beq.n	8009368 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009328:	4b65      	ldr	r3, [pc, #404]	; (80094c0 <tcp_receive+0x88c>)
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	899b      	ldrh	r3, [r3, #12]
 800932e:	b29b      	uxth	r3, r3
 8009330:	b21b      	sxth	r3, r3
 8009332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009336:	b21c      	sxth	r4, r3
 8009338:	4b61      	ldr	r3, [pc, #388]	; (80094c0 <tcp_receive+0x88c>)
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	899b      	ldrh	r3, [r3, #12]
 800933e:	b29b      	uxth	r3, r3
 8009340:	4618      	mov	r0, r3
 8009342:	f7fa fdcf 	bl	8003ee4 <lwip_htons>
 8009346:	4603      	mov	r3, r0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	b29b      	uxth	r3, r3
 800934c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009350:	b29b      	uxth	r3, r3
 8009352:	4618      	mov	r0, r3
 8009354:	f7fa fdc6 	bl	8003ee4 <lwip_htons>
 8009358:	4603      	mov	r3, r0
 800935a:	b21b      	sxth	r3, r3
 800935c:	4323      	orrs	r3, r4
 800935e:	b21a      	sxth	r2, r3
 8009360:	4b57      	ldr	r3, [pc, #348]	; (80094c0 <tcp_receive+0x88c>)
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	b292      	uxth	r2, r2
 8009366:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800936c:	4b54      	ldr	r3, [pc, #336]	; (80094c0 <tcp_receive+0x88c>)
 800936e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009370:	4b53      	ldr	r3, [pc, #332]	; (80094c0 <tcp_receive+0x88c>)
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	899b      	ldrh	r3, [r3, #12]
 8009376:	b29b      	uxth	r3, r3
 8009378:	4618      	mov	r0, r3
 800937a:	f7fa fdb3 	bl	8003ee4 <lwip_htons>
 800937e:	4603      	mov	r3, r0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <tcp_receive+0x762>
            inseg.len -= 1;
 800938a:	4b4d      	ldr	r3, [pc, #308]	; (80094c0 <tcp_receive+0x88c>)
 800938c:	891b      	ldrh	r3, [r3, #8]
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	4b4b      	ldr	r3, [pc, #300]	; (80094c0 <tcp_receive+0x88c>)
 8009394:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009396:	4b4a      	ldr	r3, [pc, #296]	; (80094c0 <tcp_receive+0x88c>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	4a49      	ldr	r2, [pc, #292]	; (80094c0 <tcp_receive+0x88c>)
 800939c:	8912      	ldrh	r2, [r2, #8]
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fb ff31 	bl	8005208 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80093a6:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <tcp_receive+0x88c>)
 80093a8:	891c      	ldrh	r4, [r3, #8]
 80093aa:	4b45      	ldr	r3, [pc, #276]	; (80094c0 <tcp_receive+0x88c>)
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fa fd96 	bl	8003ee4 <lwip_htons>
 80093b8:	4603      	mov	r3, r0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <tcp_receive+0x794>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e000      	b.n	80093ca <tcp_receive+0x796>
 80093c8:	2300      	movs	r3, #0
 80093ca:	4423      	add	r3, r4
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	4b3d      	ldr	r3, [pc, #244]	; (80094c4 <tcp_receive+0x890>)
 80093d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093d2:	4b3c      	ldr	r3, [pc, #240]	; (80094c4 <tcp_receive+0x890>)
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	4b38      	ldr	r3, [pc, #224]	; (80094bc <tcp_receive+0x888>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	441a      	add	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093e6:	440b      	add	r3, r1
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d006      	beq.n	80093fa <tcp_receive+0x7c6>
 80093ec:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <tcp_receive+0x894>)
 80093ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80093f2:	4936      	ldr	r1, [pc, #216]	; (80094cc <tcp_receive+0x898>)
 80093f4:	4836      	ldr	r0, [pc, #216]	; (80094d0 <tcp_receive+0x89c>)
 80093f6:	f005 fadd 	bl	800e9b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 80e7 	beq.w	80095d2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009404:	4b2e      	ldr	r3, [pc, #184]	; (80094c0 <tcp_receive+0x88c>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	899b      	ldrh	r3, [r3, #12]
 800940a:	b29b      	uxth	r3, r3
 800940c:	4618      	mov	r0, r3
 800940e:	f7fa fd69 	bl	8003ee4 <lwip_htons>
 8009412:	4603      	mov	r3, r0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d010      	beq.n	8009440 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800941e:	e00a      	b.n	8009436 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009424:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7fd fcac 	bl	8006d8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1f0      	bne.n	8009420 <tcp_receive+0x7ec>
 800943e:	e0c8      	b.n	80095d2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009446:	e052      	b.n	80094ee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	b29b      	uxth	r3, r3
 8009450:	4618      	mov	r0, r3
 8009452:	f7fa fd47 	bl	8003ee4 <lwip_htons>
 8009456:	4603      	mov	r3, r0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d03d      	beq.n	80094de <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009462:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <tcp_receive+0x88c>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	899b      	ldrh	r3, [r3, #12]
 8009468:	b29b      	uxth	r3, r3
 800946a:	4618      	mov	r0, r3
 800946c:	f7fa fd3a 	bl	8003ee4 <lwip_htons>
 8009470:	4603      	mov	r3, r0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009478:	2b00      	cmp	r3, #0
 800947a:	d130      	bne.n	80094de <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <tcp_receive+0x88c>)
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	899b      	ldrh	r3, [r3, #12]
 8009482:	b29c      	uxth	r4, r3
 8009484:	2001      	movs	r0, #1
 8009486:	f7fa fd2d 	bl	8003ee4 <lwip_htons>
 800948a:	4603      	mov	r3, r0
 800948c:	461a      	mov	r2, r3
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <tcp_receive+0x88c>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	4322      	orrs	r2, r4
 8009494:	b292      	uxth	r2, r2
 8009496:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009498:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <tcp_receive+0x88c>)
 800949a:	891c      	ldrh	r4, [r3, #8]
 800949c:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <tcp_receive+0x88c>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	899b      	ldrh	r3, [r3, #12]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fa fd1d 	bl	8003ee4 <lwip_htons>
 80094aa:	4603      	mov	r3, r0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00e      	beq.n	80094d4 <tcp_receive+0x8a0>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e00d      	b.n	80094d6 <tcp_receive+0x8a2>
 80094ba:	bf00      	nop
 80094bc:	20008984 	.word	0x20008984
 80094c0:	20008960 	.word	0x20008960
 80094c4:	2000898e 	.word	0x2000898e
 80094c8:	08011274 	.word	0x08011274
 80094cc:	0801161c 	.word	0x0801161c
 80094d0:	080112c0 	.word	0x080112c0
 80094d4:	2300      	movs	r3, #0
 80094d6:	4423      	add	r3, r4
 80094d8:	b29a      	uxth	r2, r3
 80094da:	4b98      	ldr	r3, [pc, #608]	; (800973c <tcp_receive+0xb08>)
 80094dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80094e8:	6938      	ldr	r0, [r7, #16]
 80094ea:	f7fd fc50 	bl	8006d8e <tcp_seg_free>
            while (next &&
 80094ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80094f4:	4b91      	ldr	r3, [pc, #580]	; (800973c <tcp_receive+0xb08>)
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	4b91      	ldr	r3, [pc, #580]	; (8009740 <tcp_receive+0xb0c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	441a      	add	r2, r3
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009508:	8909      	ldrh	r1, [r1, #8]
 800950a:	440b      	add	r3, r1
 800950c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800950e:	2b00      	cmp	r3, #0
 8009510:	da9a      	bge.n	8009448 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d059      	beq.n	80095cc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009518:	4b88      	ldr	r3, [pc, #544]	; (800973c <tcp_receive+0xb08>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	4b88      	ldr	r3, [pc, #544]	; (8009740 <tcp_receive+0xb0c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	441a      	add	r2, r3
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd4d      	ble.n	80095cc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	b29a      	uxth	r2, r3
 8009538:	4b81      	ldr	r3, [pc, #516]	; (8009740 <tcp_receive+0xb0c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	b29a      	uxth	r2, r3
 8009542:	4b80      	ldr	r3, [pc, #512]	; (8009744 <tcp_receive+0xb10>)
 8009544:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009546:	4b7f      	ldr	r3, [pc, #508]	; (8009744 <tcp_receive+0xb10>)
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	899b      	ldrh	r3, [r3, #12]
 800954c:	b29b      	uxth	r3, r3
 800954e:	4618      	mov	r0, r3
 8009550:	f7fa fcc8 	bl	8003ee4 <lwip_htons>
 8009554:	4603      	mov	r3, r0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <tcp_receive+0x938>
                inseg.len -= 1;
 8009560:	4b78      	ldr	r3, [pc, #480]	; (8009744 <tcp_receive+0xb10>)
 8009562:	891b      	ldrh	r3, [r3, #8]
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	4b76      	ldr	r3, [pc, #472]	; (8009744 <tcp_receive+0xb10>)
 800956a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800956c:	4b75      	ldr	r3, [pc, #468]	; (8009744 <tcp_receive+0xb10>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a74      	ldr	r2, [pc, #464]	; (8009744 <tcp_receive+0xb10>)
 8009572:	8912      	ldrh	r2, [r2, #8]
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7fb fe46 	bl	8005208 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800957c:	4b71      	ldr	r3, [pc, #452]	; (8009744 <tcp_receive+0xb10>)
 800957e:	891c      	ldrh	r4, [r3, #8]
 8009580:	4b70      	ldr	r3, [pc, #448]	; (8009744 <tcp_receive+0xb10>)
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	899b      	ldrh	r3, [r3, #12]
 8009586:	b29b      	uxth	r3, r3
 8009588:	4618      	mov	r0, r3
 800958a:	f7fa fcab 	bl	8003ee4 <lwip_htons>
 800958e:	4603      	mov	r3, r0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <tcp_receive+0x96a>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <tcp_receive+0x96c>
 800959e:	2300      	movs	r3, #0
 80095a0:	4423      	add	r3, r4
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	4b65      	ldr	r3, [pc, #404]	; (800973c <tcp_receive+0xb08>)
 80095a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80095a8:	4b64      	ldr	r3, [pc, #400]	; (800973c <tcp_receive+0xb08>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	4b64      	ldr	r3, [pc, #400]	; (8009740 <tcp_receive+0xb0c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	441a      	add	r2, r3
 80095b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d006      	beq.n	80095cc <tcp_receive+0x998>
 80095be:	4b62      	ldr	r3, [pc, #392]	; (8009748 <tcp_receive+0xb14>)
 80095c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80095c4:	4961      	ldr	r1, [pc, #388]	; (800974c <tcp_receive+0xb18>)
 80095c6:	4862      	ldr	r0, [pc, #392]	; (8009750 <tcp_receive+0xb1c>)
 80095c8:	f005 f9f4 	bl	800e9b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80095d2:	4b5a      	ldr	r3, [pc, #360]	; (800973c <tcp_receive+0xb08>)
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	4b59      	ldr	r3, [pc, #356]	; (8009740 <tcp_receive+0xb0c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	441a      	add	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095e6:	4b55      	ldr	r3, [pc, #340]	; (800973c <tcp_receive+0xb08>)
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d206      	bcs.n	80095fc <tcp_receive+0x9c8>
 80095ee:	4b56      	ldr	r3, [pc, #344]	; (8009748 <tcp_receive+0xb14>)
 80095f0:	f240 6207 	movw	r2, #1543	; 0x607
 80095f4:	4957      	ldr	r1, [pc, #348]	; (8009754 <tcp_receive+0xb20>)
 80095f6:	4856      	ldr	r0, [pc, #344]	; (8009750 <tcp_receive+0xb1c>)
 80095f8:	f005 f9dc 	bl	800e9b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009600:	4b4e      	ldr	r3, [pc, #312]	; (800973c <tcp_receive+0xb08>)
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7fc fe99 	bl	8006344 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009612:	4b4c      	ldr	r3, [pc, #304]	; (8009744 <tcp_receive+0xb10>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	891b      	ldrh	r3, [r3, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d006      	beq.n	800962a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800961c:	4b49      	ldr	r3, [pc, #292]	; (8009744 <tcp_receive+0xb10>)
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a4d      	ldr	r2, [pc, #308]	; (8009758 <tcp_receive+0xb24>)
 8009622:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009624:	4b47      	ldr	r3, [pc, #284]	; (8009744 <tcp_receive+0xb10>)
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800962a:	4b46      	ldr	r3, [pc, #280]	; (8009744 <tcp_receive+0xb10>)
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	899b      	ldrh	r3, [r3, #12]
 8009630:	b29b      	uxth	r3, r3
 8009632:	4618      	mov	r0, r3
 8009634:	f7fa fc56 	bl	8003ee4 <lwip_htons>
 8009638:	4603      	mov	r3, r0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80b8 	beq.w	80097b6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009646:	4b45      	ldr	r3, [pc, #276]	; (800975c <tcp_receive+0xb28>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f043 0320 	orr.w	r3, r3, #32
 800964e:	b2da      	uxtb	r2, r3
 8009650:	4b42      	ldr	r3, [pc, #264]	; (800975c <tcp_receive+0xb28>)
 8009652:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009654:	e0af      	b.n	80097b6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4a36      	ldr	r2, [pc, #216]	; (8009740 <tcp_receive+0xb0c>)
 8009666:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	891b      	ldrh	r3, [r3, #8]
 800966c:	461c      	mov	r4, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	899b      	ldrh	r3, [r3, #12]
 8009674:	b29b      	uxth	r3, r3
 8009676:	4618      	mov	r0, r3
 8009678:	f7fa fc34 	bl	8003ee4 <lwip_htons>
 800967c:	4603      	mov	r3, r0
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0303 	and.w	r3, r3, #3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <tcp_receive+0xa58>
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <tcp_receive+0xa5a>
 800968c:	2300      	movs	r3, #0
 800968e:	191a      	adds	r2, r3, r4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	441a      	add	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969e:	461c      	mov	r4, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	891b      	ldrh	r3, [r3, #8]
 80096a4:	461d      	mov	r5, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	899b      	ldrh	r3, [r3, #12]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fa fc18 	bl	8003ee4 <lwip_htons>
 80096b4:	4603      	mov	r3, r0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <tcp_receive+0xa90>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <tcp_receive+0xa92>
 80096c4:	2300      	movs	r3, #0
 80096c6:	442b      	add	r3, r5
 80096c8:	429c      	cmp	r4, r3
 80096ca:	d206      	bcs.n	80096da <tcp_receive+0xaa6>
 80096cc:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <tcp_receive+0xb14>)
 80096ce:	f240 622b 	movw	r2, #1579	; 0x62b
 80096d2:	4923      	ldr	r1, [pc, #140]	; (8009760 <tcp_receive+0xb2c>)
 80096d4:	481e      	ldr	r0, [pc, #120]	; (8009750 <tcp_receive+0xb1c>)
 80096d6:	f005 f96d 	bl	800e9b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	891b      	ldrh	r3, [r3, #8]
 80096de:	461c      	mov	r4, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fa fbfb 	bl	8003ee4 <lwip_htons>
 80096ee:	4603      	mov	r3, r0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <tcp_receive+0xaca>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <tcp_receive+0xacc>
 80096fe:	2300      	movs	r3, #0
 8009700:	1919      	adds	r1, r3, r4
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009706:	b28b      	uxth	r3, r1
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fc fe17 	bl	8006344 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	891b      	ldrh	r3, [r3, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d028      	beq.n	8009772 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009720:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <tcp_receive+0xb24>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01d      	beq.n	8009764 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <tcp_receive+0xb24>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f7fb ffb0 	bl	8005698 <pbuf_cat>
 8009738:	e018      	b.n	800976c <tcp_receive+0xb38>
 800973a:	bf00      	nop
 800973c:	2000898e 	.word	0x2000898e
 8009740:	20008984 	.word	0x20008984
 8009744:	20008960 	.word	0x20008960
 8009748:	08011274 	.word	0x08011274
 800974c:	08011654 	.word	0x08011654
 8009750:	080112c0 	.word	0x080112c0
 8009754:	08011690 	.word	0x08011690
 8009758:	20008994 	.word	0x20008994
 800975c:	20008991 	.word	0x20008991
 8009760:	080116b0 	.word	0x080116b0
            } else {
              recv_data = cseg->p;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4a70      	ldr	r2, [pc, #448]	; (800992c <tcp_receive+0xcf8>)
 800976a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2200      	movs	r2, #0
 8009770:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	899b      	ldrh	r3, [r3, #12]
 8009778:	b29b      	uxth	r3, r3
 800977a:	4618      	mov	r0, r3
 800977c:	f7fa fbb2 	bl	8003ee4 <lwip_htons>
 8009780:	4603      	mov	r3, r0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00d      	beq.n	80097a8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800978c:	4b68      	ldr	r3, [pc, #416]	; (8009930 <tcp_receive+0xcfc>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f043 0320 	orr.w	r3, r3, #32
 8009794:	b2da      	uxtb	r2, r3
 8009796:	4b66      	ldr	r3, [pc, #408]	; (8009930 <tcp_receive+0xcfc>)
 8009798:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7d1b      	ldrb	r3, [r3, #20]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d102      	bne.n	80097a8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2207      	movs	r2, #7
 80097a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80097b0:	68b8      	ldr	r0, [r7, #8]
 80097b2:	f7fd faec 	bl	8006d8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80097ca:	429a      	cmp	r2, r3
 80097cc:	f43f af43 	beq.w	8009656 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	8b5b      	ldrh	r3, [r3, #26]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00e      	beq.n	80097fa <tcp_receive+0xbc6>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8b5b      	ldrh	r3, [r3, #26]
 80097e0:	f023 0301 	bic.w	r3, r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	835a      	strh	r2, [r3, #26]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f043 0302 	orr.w	r3, r3, #2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80097f8:	e188      	b.n	8009b0c <tcp_receive+0xed8>
        tcp_ack(pcb);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8b5b      	ldrh	r3, [r3, #26]
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	b29a      	uxth	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009808:	e180      	b.n	8009b0c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800980e:	2b00      	cmp	r3, #0
 8009810:	d106      	bne.n	8009820 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009812:	4848      	ldr	r0, [pc, #288]	; (8009934 <tcp_receive+0xd00>)
 8009814:	f7fd faf2 	bl	8006dfc <tcp_seg_copy>
 8009818:	4602      	mov	r2, r0
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	675a      	str	r2, [r3, #116]	; 0x74
 800981e:	e16d      	b.n	8009afc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009828:	63bb      	str	r3, [r7, #56]	; 0x38
 800982a:	e157      	b.n	8009adc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	4b41      	ldr	r3, [pc, #260]	; (8009938 <tcp_receive+0xd04>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d11d      	bne.n	8009876 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800983a:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <tcp_receive+0xd00>)
 800983c:	891a      	ldrh	r2, [r3, #8]
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	891b      	ldrh	r3, [r3, #8]
 8009842:	429a      	cmp	r2, r3
 8009844:	f240 814f 	bls.w	8009ae6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009848:	483a      	ldr	r0, [pc, #232]	; (8009934 <tcp_receive+0xd00>)
 800984a:	f7fd fad7 	bl	8006dfc <tcp_seg_copy>
 800984e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 8149 	beq.w	8009aea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <tcp_receive+0xc32>
                    prev->next = cseg;
 800985e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e002      	b.n	800986c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800986c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7ff f8dc 	bl	8008a2c <tcp_oos_insert_segment>
                }
                break;
 8009874:	e139      	b.n	8009aea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	2b00      	cmp	r3, #0
 800987a:	d117      	bne.n	80098ac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800987c:	4b2e      	ldr	r3, [pc, #184]	; (8009938 <tcp_receive+0xd04>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	da57      	bge.n	800993c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800988c:	4829      	ldr	r0, [pc, #164]	; (8009934 <tcp_receive+0xd00>)
 800988e:	f7fd fab5 	bl	8006dfc <tcp_seg_copy>
 8009892:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8129 	beq.w	8009aee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80098a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098a4:	69b8      	ldr	r0, [r7, #24]
 80098a6:	f7ff f8c1 	bl	8008a2c <tcp_oos_insert_segment>
                  }
                  break;
 80098aa:	e120      	b.n	8009aee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80098ac:	4b22      	ldr	r3, [pc, #136]	; (8009938 <tcp_receive+0xd04>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	db3e      	blt.n	800993c <tcp_receive+0xd08>
 80098be:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <tcp_receive+0xd04>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	3301      	adds	r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dc35      	bgt.n	800993c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098d0:	4818      	ldr	r0, [pc, #96]	; (8009934 <tcp_receive+0xd00>)
 80098d2:	f7fd fa93 	bl	8006dfc <tcp_seg_copy>
 80098d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8109 	beq.w	8009af2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e8:	8912      	ldrh	r2, [r2, #8]
 80098ea:	441a      	add	r2, r3
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <tcp_receive+0xd04>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd12      	ble.n	800991c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80098f6:	4b10      	ldr	r3, [pc, #64]	; (8009938 <tcp_receive+0xd04>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	b29b      	uxth	r3, r3
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	b29a      	uxth	r2, r3
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800990c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	891b      	ldrh	r3, [r3, #8]
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7fb fc76 	bl	8005208 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009924:	69f8      	ldr	r0, [r7, #28]
 8009926:	f7ff f881 	bl	8008a2c <tcp_oos_insert_segment>
                  }
                  break;
 800992a:	e0e2      	b.n	8009af2 <tcp_receive+0xebe>
 800992c:	20008994 	.word	0x20008994
 8009930:	20008991 	.word	0x20008991
 8009934:	20008960 	.word	0x20008960
 8009938:	20008984 	.word	0x20008984
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 80c6 	bne.w	8009ad6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800994a:	4b80      	ldr	r3, [pc, #512]	; (8009b4c <tcp_receive+0xf18>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009956:	2b00      	cmp	r3, #0
 8009958:	f340 80bd 	ble.w	8009ad6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	899b      	ldrh	r3, [r3, #12]
 8009962:	b29b      	uxth	r3, r3
 8009964:	4618      	mov	r0, r3
 8009966:	f7fa fabd 	bl	8003ee4 <lwip_htons>
 800996a:	4603      	mov	r3, r0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	f040 80bf 	bne.w	8009af6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009978:	4875      	ldr	r0, [pc, #468]	; (8009b50 <tcp_receive+0xf1c>)
 800997a:	f7fd fa3f 	bl	8006dfc <tcp_seg_copy>
 800997e:	4602      	mov	r2, r0
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 80b6 	beq.w	8009afa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009996:	8912      	ldrh	r2, [r2, #8]
 8009998:	441a      	add	r2, r3
 800999a:	4b6c      	ldr	r3, [pc, #432]	; (8009b4c <tcp_receive+0xf18>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dd12      	ble.n	80099ca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80099a4:	4b69      	ldr	r3, [pc, #420]	; (8009b4c <tcp_receive+0xf18>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	891b      	ldrh	r3, [r3, #8]
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f7fb fc1f 	bl	8005208 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80099ca:	4b62      	ldr	r3, [pc, #392]	; (8009b54 <tcp_receive+0xf20>)
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	4b5e      	ldr	r3, [pc, #376]	; (8009b4c <tcp_receive+0xf18>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80099de:	440b      	add	r3, r1
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f340 8089 	ble.w	8009afa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	899b      	ldrh	r3, [r3, #12]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fa fa76 	bl	8003ee4 <lwip_htons>
 80099f8:	4603      	mov	r3, r0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d022      	beq.n	8009a4a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	899b      	ldrh	r3, [r3, #12]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a14:	b21c      	sxth	r4, r3
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	899b      	ldrh	r3, [r3, #12]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fa fa5f 	bl	8003ee4 <lwip_htons>
 8009a26:	4603      	mov	r3, r0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fa fa56 	bl	8003ee4 <lwip_htons>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	b21b      	sxth	r3, r3
 8009a3c:	4323      	orrs	r3, r4
 8009a3e:	b21a      	sxth	r2, r3
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	b292      	uxth	r2, r2
 8009a48:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a54:	4413      	add	r3, r2
 8009a56:	b299      	uxth	r1, r3
 8009a58:	4b3c      	ldr	r3, [pc, #240]	; (8009b4c <tcp_receive+0xf18>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	1a8a      	subs	r2, r1, r2
 8009a64:	b292      	uxth	r2, r2
 8009a66:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	891b      	ldrh	r3, [r3, #8]
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f7fb fbc6 	bl	8005208 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	891c      	ldrh	r4, [r3, #8]
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	899b      	ldrh	r3, [r3, #12]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fa fa29 	bl	8003ee4 <lwip_htons>
 8009a92:	4603      	mov	r3, r0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <tcp_receive+0xe6e>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e000      	b.n	8009aa4 <tcp_receive+0xe70>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4423      	add	r3, r4
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	4b2a      	ldr	r3, [pc, #168]	; (8009b54 <tcp_receive+0xf20>)
 8009aaa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009aac:	4b29      	ldr	r3, [pc, #164]	; (8009b54 <tcp_receive+0xf20>)
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b26      	ldr	r3, [pc, #152]	; (8009b4c <tcp_receive+0xf18>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	441a      	add	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ac0:	440b      	add	r3, r1
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d019      	beq.n	8009afa <tcp_receive+0xec6>
 8009ac6:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <tcp_receive+0xf24>)
 8009ac8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009acc:	4923      	ldr	r1, [pc, #140]	; (8009b5c <tcp_receive+0xf28>)
 8009ace:	4824      	ldr	r0, [pc, #144]	; (8009b60 <tcp_receive+0xf2c>)
 8009ad0:	f004 ff70 	bl	800e9b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009ad4:	e011      	b.n	8009afa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f47f aea4 	bne.w	800982c <tcp_receive+0xbf8>
 8009ae4:	e00a      	b.n	8009afc <tcp_receive+0xec8>
                break;
 8009ae6:	bf00      	nop
 8009ae8:	e008      	b.n	8009afc <tcp_receive+0xec8>
                break;
 8009aea:	bf00      	nop
 8009aec:	e006      	b.n	8009afc <tcp_receive+0xec8>
                  break;
 8009aee:	bf00      	nop
 8009af0:	e004      	b.n	8009afc <tcp_receive+0xec8>
                  break;
 8009af2:	bf00      	nop
 8009af4:	e002      	b.n	8009afc <tcp_receive+0xec8>
                  break;
 8009af6:	bf00      	nop
 8009af8:	e000      	b.n	8009afc <tcp_receive+0xec8>
                break;
 8009afa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fef7 	bl	800b8f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009b02:	e003      	b.n	8009b0c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fef3 	bl	800b8f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b0a:	e01a      	b.n	8009b42 <tcp_receive+0xf0e>
 8009b0c:	e019      	b.n	8009b42 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <tcp_receive+0xf18>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	db0a      	blt.n	8009b32 <tcp_receive+0xefe>
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <tcp_receive+0xf18>)
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b28:	440b      	add	r3, r1
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dd07      	ble.n	8009b42 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8b5b      	ldrh	r3, [r3, #26]
 8009b36:	f043 0302 	orr.w	r3, r3, #2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009b40:	e7ff      	b.n	8009b42 <tcp_receive+0xf0e>
 8009b42:	bf00      	nop
 8009b44:	3750      	adds	r7, #80	; 0x50
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20008984 	.word	0x20008984
 8009b50:	20008960 	.word	0x20008960
 8009b54:	2000898e 	.word	0x2000898e
 8009b58:	08011274 	.word	0x08011274
 8009b5c:	0801161c 	.word	0x0801161c
 8009b60:	080112c0 	.word	0x080112c0

08009b64 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009b6a:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <tcp_get_next_optbyte+0x5c>)
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	b291      	uxth	r1, r2
 8009b72:	4a13      	ldr	r2, [pc, #76]	; (8009bc0 <tcp_get_next_optbyte+0x5c>)
 8009b74:	8011      	strh	r1, [r2, #0]
 8009b76:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <tcp_get_next_optbyte+0x60>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <tcp_get_next_optbyte+0x26>
 8009b80:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <tcp_get_next_optbyte+0x64>)
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	88fa      	ldrh	r2, [r7, #6]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d208      	bcs.n	8009b9c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <tcp_get_next_optbyte+0x68>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009b92:	88fb      	ldrh	r3, [r7, #6]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	4413      	add	r3, r2
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	e00b      	b.n	8009bb4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <tcp_get_next_optbyte+0x64>)
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <tcp_get_next_optbyte+0x60>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	797b      	ldrb	r3, [r7, #5]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	20008980 	.word	0x20008980
 8009bc4:	2000897c 	.word	0x2000897c
 8009bc8:	2000897a 	.word	0x2000897a
 8009bcc:	20008974 	.word	0x20008974

08009bd0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <tcp_parseopt+0x1c>
 8009bde:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <tcp_parseopt+0xd8>)
 8009be0:	f240 727d 	movw	r2, #1917	; 0x77d
 8009be4:	4931      	ldr	r1, [pc, #196]	; (8009cac <tcp_parseopt+0xdc>)
 8009be6:	4832      	ldr	r0, [pc, #200]	; (8009cb0 <tcp_parseopt+0xe0>)
 8009be8:	f004 fee4 	bl	800e9b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009bec:	4b31      	ldr	r3, [pc, #196]	; (8009cb4 <tcp_parseopt+0xe4>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d055      	beq.n	8009ca0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009bf4:	4b30      	ldr	r3, [pc, #192]	; (8009cb8 <tcp_parseopt+0xe8>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	801a      	strh	r2, [r3, #0]
 8009bfa:	e045      	b.n	8009c88 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009bfc:	f7ff ffb2 	bl	8009b64 <tcp_get_next_optbyte>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d006      	beq.n	8009c18 <tcp_parseopt+0x48>
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	dc2b      	bgt.n	8009c66 <tcp_parseopt+0x96>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d041      	beq.n	8009c96 <tcp_parseopt+0xc6>
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d127      	bne.n	8009c66 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009c16:	e037      	b.n	8009c88 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009c18:	f7ff ffa4 	bl	8009b64 <tcp_get_next_optbyte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d13b      	bne.n	8009c9a <tcp_parseopt+0xca>
 8009c22:	4b25      	ldr	r3, [pc, #148]	; (8009cb8 <tcp_parseopt+0xe8>)
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	4a22      	ldr	r2, [pc, #136]	; (8009cb4 <tcp_parseopt+0xe4>)
 8009c2a:	8812      	ldrh	r2, [r2, #0]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	da34      	bge.n	8009c9a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009c30:	f7ff ff98 	bl	8009b64 <tcp_get_next_optbyte>
 8009c34:	4603      	mov	r3, r0
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	021b      	lsls	r3, r3, #8
 8009c3a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009c3c:	f7ff ff92 	bl	8009b64 <tcp_get_next_optbyte>
 8009c40:	4603      	mov	r3, r0
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	89bb      	ldrh	r3, [r7, #12]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009c4a:	89bb      	ldrh	r3, [r7, #12]
 8009c4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009c50:	d804      	bhi.n	8009c5c <tcp_parseopt+0x8c>
 8009c52:	89bb      	ldrh	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <tcp_parseopt+0x8c>
 8009c58:	89ba      	ldrh	r2, [r7, #12]
 8009c5a:	e001      	b.n	8009c60 <tcp_parseopt+0x90>
 8009c5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009c64:	e010      	b.n	8009c88 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009c66:	f7ff ff7d 	bl	8009b64 <tcp_get_next_optbyte>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d914      	bls.n	8009c9e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <tcp_parseopt+0xe8>)
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3b02      	subs	r3, #2
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <tcp_parseopt+0xe8>)
 8009c86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009c88:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <tcp_parseopt+0xe8>)
 8009c8a:	881a      	ldrh	r2, [r3, #0]
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <tcp_parseopt+0xe4>)
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3b3      	bcc.n	8009bfc <tcp_parseopt+0x2c>
 8009c94:	e004      	b.n	8009ca0 <tcp_parseopt+0xd0>
          return;
 8009c96:	bf00      	nop
 8009c98:	e002      	b.n	8009ca0 <tcp_parseopt+0xd0>
            return;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <tcp_parseopt+0xd0>
            return;
 8009c9e:	bf00      	nop
      }
    }
  }
}
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	08011274 	.word	0x08011274
 8009cac:	080116d8 	.word	0x080116d8
 8009cb0:	080112c0 	.word	0x080112c0
 8009cb4:	20008978 	.word	0x20008978
 8009cb8:	20008980 	.word	0x20008980

08009cbc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <tcp_trigger_input_pcb_close+0x1c>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f043 0310 	orr.w	r3, r3, #16
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <tcp_trigger_input_pcb_close+0x1c>)
 8009ccc:	701a      	strb	r2, [r3, #0]
}
 8009cce:	bf00      	nop
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	20008991 	.word	0x20008991

08009cdc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <tcp_route+0x28>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	7a1b      	ldrb	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d006      	beq.n	8009d04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	7a1b      	ldrb	r3, [r3, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fb f8aa 	bl	8004e54 <netif_get_by_index>
 8009d00:	4603      	mov	r3, r0
 8009d02:	e003      	b.n	8009d0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f003 fb75 	bl	800d3f4 <ip4_route>
 8009d0a:	4603      	mov	r3, r0
  }
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	4613      	mov	r3, r2
 8009d22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <tcp_create_segment+0x22>
 8009d2a:	4b45      	ldr	r3, [pc, #276]	; (8009e40 <tcp_create_segment+0x12c>)
 8009d2c:	22a3      	movs	r2, #163	; 0xa3
 8009d2e:	4945      	ldr	r1, [pc, #276]	; (8009e44 <tcp_create_segment+0x130>)
 8009d30:	4845      	ldr	r0, [pc, #276]	; (8009e48 <tcp_create_segment+0x134>)
 8009d32:	f004 fe3f 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d105      	bne.n	8009d48 <tcp_create_segment+0x34>
 8009d3c:	4b40      	ldr	r3, [pc, #256]	; (8009e40 <tcp_create_segment+0x12c>)
 8009d3e:	22a4      	movs	r2, #164	; 0xa4
 8009d40:	4942      	ldr	r1, [pc, #264]	; (8009e4c <tcp_create_segment+0x138>)
 8009d42:	4841      	ldr	r0, [pc, #260]	; (8009e48 <tcp_create_segment+0x134>)
 8009d44:	f004 fe36 	bl	800e9b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009d48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009d56:	2003      	movs	r0, #3
 8009d58:	f7fa fd1a 	bl	8004790 <memp_malloc>
 8009d5c:	6138      	str	r0, [r7, #16]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f7fb fbd5 	bl	8005514 <pbuf_free>
    return NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e064      	b.n	8009e38 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009d74:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	891a      	ldrh	r2, [r3, #8]
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d205      	bcs.n	8009d9a <tcp_create_segment+0x86>
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <tcp_create_segment+0x12c>)
 8009d90:	22b0      	movs	r2, #176	; 0xb0
 8009d92:	492f      	ldr	r1, [pc, #188]	; (8009e50 <tcp_create_segment+0x13c>)
 8009d94:	482c      	ldr	r0, [pc, #176]	; (8009e48 <tcp_create_segment+0x134>)
 8009d96:	f004 fe0d 	bl	800e9b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	891a      	ldrh	r2, [r3, #8]
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2200      	movs	r2, #0
 8009dae:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009db0:	2114      	movs	r1, #20
 8009db2:	68b8      	ldr	r0, [r7, #8]
 8009db4:	f7fb fb18 	bl	80053e8 <pbuf_add_header>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009dbe:	6938      	ldr	r0, [r7, #16]
 8009dc0:	f7fc ffe5 	bl	8006d8e <tcp_seg_free>
    return NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e037      	b.n	8009e38 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	8ada      	ldrh	r2, [r3, #22]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	691c      	ldr	r4, [r3, #16]
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7fa f882 	bl	8003ee4 <lwip_htons>
 8009de0:	4603      	mov	r3, r0
 8009de2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	8b1a      	ldrh	r2, [r3, #24]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	691c      	ldr	r4, [r3, #16]
 8009dec:	4610      	mov	r0, r2
 8009dee:	f7fa f879 	bl	8003ee4 <lwip_htons>
 8009df2:	4603      	mov	r3, r0
 8009df4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	691c      	ldr	r4, [r3, #16]
 8009dfa:	6838      	ldr	r0, [r7, #0]
 8009dfc:	f7fa f887 	bl	8003f0e <lwip_htonl>
 8009e00:	4603      	mov	r3, r0
 8009e02:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	089b      	lsrs	r3, r3, #2
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3305      	adds	r3, #5
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	691c      	ldr	r4, [r3, #16]
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7fa f85f 	bl	8003ee4 <lwip_htons>
 8009e26:	4603      	mov	r3, r0
 8009e28:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	749a      	strb	r2, [r3, #18]
 8009e32:	2200      	movs	r2, #0
 8009e34:	74da      	strb	r2, [r3, #19]
  return seg;
 8009e36:	693b      	ldr	r3, [r7, #16]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	371c      	adds	r7, #28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd90      	pop	{r4, r7, pc}
 8009e40:	080116f4 	.word	0x080116f4
 8009e44:	08011728 	.word	0x08011728
 8009e48:	08011748 	.word	0x08011748
 8009e4c:	08011770 	.word	0x08011770
 8009e50:	08011794 	.word	0x08011794

08009e54 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	607b      	str	r3, [r7, #4]
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]
 8009e60:	460b      	mov	r3, r1
 8009e62:	81bb      	strh	r3, [r7, #12]
 8009e64:	4613      	mov	r3, r2
 8009e66:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009e68:	89bb      	ldrh	r3, [r7, #12]
 8009e6a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d105      	bne.n	8009e7e <tcp_pbuf_prealloc+0x2a>
 8009e72:	4b30      	ldr	r3, [pc, #192]	; (8009f34 <tcp_pbuf_prealloc+0xe0>)
 8009e74:	22e8      	movs	r2, #232	; 0xe8
 8009e76:	4930      	ldr	r1, [pc, #192]	; (8009f38 <tcp_pbuf_prealloc+0xe4>)
 8009e78:	4830      	ldr	r0, [pc, #192]	; (8009f3c <tcp_pbuf_prealloc+0xe8>)
 8009e7a:	f004 fd9b 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <tcp_pbuf_prealloc+0x3c>
 8009e84:	4b2b      	ldr	r3, [pc, #172]	; (8009f34 <tcp_pbuf_prealloc+0xe0>)
 8009e86:	22e9      	movs	r2, #233	; 0xe9
 8009e88:	492d      	ldr	r1, [pc, #180]	; (8009f40 <tcp_pbuf_prealloc+0xec>)
 8009e8a:	482c      	ldr	r0, [pc, #176]	; (8009f3c <tcp_pbuf_prealloc+0xe8>)
 8009e8c:	f004 fd92 	bl	800e9b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009e90:	89ba      	ldrh	r2, [r7, #12]
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d221      	bcs.n	8009edc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009e98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d111      	bne.n	8009ec8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	8b5b      	ldrh	r3, [r3, #26]
 8009ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d115      	bne.n	8009edc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009eb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d007      	beq.n	8009ec8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009ec8:	89bb      	ldrh	r3, [r7, #12]
 8009eca:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009ece:	f023 0203 	bic.w	r2, r3, #3
 8009ed2:	897b      	ldrh	r3, [r7, #10]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	bf28      	it	cs
 8009ed8:	4613      	movcs	r3, r2
 8009eda:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009edc:	8af9      	ldrh	r1, [r7, #22]
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fb f831 	bl	8004f4c <pbuf_alloc>
 8009eea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e019      	b.n	8009f2a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d006      	beq.n	8009f0c <tcp_pbuf_prealloc+0xb8>
 8009efe:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <tcp_pbuf_prealloc+0xe0>)
 8009f00:	f240 120b 	movw	r2, #267	; 0x10b
 8009f04:	490f      	ldr	r1, [pc, #60]	; (8009f44 <tcp_pbuf_prealloc+0xf0>)
 8009f06:	480d      	ldr	r0, [pc, #52]	; (8009f3c <tcp_pbuf_prealloc+0xe8>)
 8009f08:	f004 fd54 	bl	800e9b4 <iprintf>
  *oversize = p->len - length;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	895a      	ldrh	r2, [r3, #10]
 8009f10:	89bb      	ldrh	r3, [r7, #12]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	89ba      	ldrh	r2, [r7, #12]
 8009f1e:	811a      	strh	r2, [r3, #8]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	891a      	ldrh	r2, [r3, #8]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	815a      	strh	r2, [r3, #10]
  return p;
 8009f28:	693b      	ldr	r3, [r7, #16]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	080116f4 	.word	0x080116f4
 8009f38:	080117ac 	.word	0x080117ac
 8009f3c:	08011748 	.word	0x08011748
 8009f40:	080117d0 	.word	0x080117d0
 8009f44:	080117f0 	.word	0x080117f0

08009f48 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <tcp_write_checks+0x20>
 8009f5a:	4b33      	ldr	r3, [pc, #204]	; (800a028 <tcp_write_checks+0xe0>)
 8009f5c:	f240 1233 	movw	r2, #307	; 0x133
 8009f60:	4932      	ldr	r1, [pc, #200]	; (800a02c <tcp_write_checks+0xe4>)
 8009f62:	4833      	ldr	r0, [pc, #204]	; (800a030 <tcp_write_checks+0xe8>)
 8009f64:	f004 fd26 	bl	800e9b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7d1b      	ldrb	r3, [r3, #20]
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d00e      	beq.n	8009f8e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009f74:	2b07      	cmp	r3, #7
 8009f76:	d00a      	beq.n	8009f8e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d006      	beq.n	8009f8e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d002      	beq.n	8009f8e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009f88:	f06f 030a 	mvn.w	r3, #10
 8009f8c:	e048      	b.n	800a020 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8009f8e:	887b      	ldrh	r3, [r7, #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <tcp_write_checks+0x50>
    return ERR_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	e043      	b.n	800a020 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f9e:	887a      	ldrh	r2, [r7, #2]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d909      	bls.n	8009fb8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8b5b      	ldrh	r3, [r3, #26]
 8009fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb6:	e033      	b.n	800a020 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fbe:	2b08      	cmp	r3, #8
 8009fc0:	d909      	bls.n	8009fd6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8b5b      	ldrh	r3, [r3, #26]
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd4:	e024      	b.n	800a020 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00f      	beq.n	800a000 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d11a      	bne.n	800a01e <tcp_write_checks+0xd6>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d116      	bne.n	800a01e <tcp_write_checks+0xd6>
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <tcp_write_checks+0xe0>)
 8009ff2:	f240 1255 	movw	r2, #341	; 0x155
 8009ff6:	490f      	ldr	r1, [pc, #60]	; (800a034 <tcp_write_checks+0xec>)
 8009ff8:	480d      	ldr	r0, [pc, #52]	; (800a030 <tcp_write_checks+0xe8>)
 8009ffa:	f004 fcdb 	bl	800e9b4 <iprintf>
 8009ffe:	e00e      	b.n	800a01e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <tcp_write_checks+0xc8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <tcp_write_checks+0xd6>
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <tcp_write_checks+0xe0>)
 800a012:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a016:	4908      	ldr	r1, [pc, #32]	; (800a038 <tcp_write_checks+0xf0>)
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <tcp_write_checks+0xe8>)
 800a01a:	f004 fccb 	bl	800e9b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	080116f4 	.word	0x080116f4
 800a02c:	08011804 	.word	0x08011804
 800a030:	08011748 	.word	0x08011748
 800a034:	08011824 	.word	0x08011824
 800a038:	08011860 	.word	0x08011860

0800a03c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b09d      	sub	sp, #116	; 0x74
 800a040:	af04      	add	r7, sp, #16
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4611      	mov	r1, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	460b      	mov	r3, r1
 800a04c:	80fb      	strh	r3, [r7, #6]
 800a04e:	4613      	mov	r3, r2
 800a050:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	643b      	str	r3, [r7, #64]	; 0x40
 800a05a:	2300      	movs	r3, #0
 800a05c:	657b      	str	r3, [r7, #84]	; 0x54
 800a05e:	2300      	movs	r3, #0
 800a060:	653b      	str	r3, [r7, #80]	; 0x50
 800a062:	2300      	movs	r3, #0
 800a064:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 800a066:	2300      	movs	r3, #0
 800a068:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <tcp_write+0x66>
 800a08e:	4b9c      	ldr	r3, [pc, #624]	; (800a300 <tcp_write+0x2c4>)
 800a090:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a094:	499b      	ldr	r1, [pc, #620]	; (800a304 <tcp_write+0x2c8>)
 800a096:	489c      	ldr	r0, [pc, #624]	; (800a308 <tcp_write+0x2cc>)
 800a098:	f004 fc8c 	bl	800e9b4 <iprintf>
 800a09c:	f06f 030f 	mvn.w	r3, #15
 800a0a0:	e379      	b.n	800a796 <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	bf28      	it	cs
 800a0b4:	4613      	movcs	r3, r2
 800a0b6:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 800a0b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <tcp_write+0x88>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0c2:	e000      	b.n	800a0c6 <tcp_write+0x8a>
 800a0c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0c6:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d109      	bne.n	800a0e2 <tcp_write+0xa6>
 800a0ce:	4b8c      	ldr	r3, [pc, #560]	; (800a300 <tcp_write+0x2c4>)
 800a0d0:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a0d4:	498d      	ldr	r1, [pc, #564]	; (800a30c <tcp_write+0x2d0>)
 800a0d6:	488c      	ldr	r0, [pc, #560]	; (800a308 <tcp_write+0x2cc>)
 800a0d8:	f004 fc6c 	bl	800e9b4 <iprintf>
 800a0dc:	f06f 030f 	mvn.w	r3, #15
 800a0e0:	e359      	b.n	800a796 <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff ff2e 	bl	8009f48 <tcp_write_checks>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800a0f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <tcp_write+0xc4>
    return err;
 800a0fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0fe:	e34a      	b.n	800a796 <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a106:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8127 	beq.w	800a368 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11e:	643b      	str	r3, [r7, #64]	; 0x40
 800a120:	e002      	b.n	800a128 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 800a122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1f8      	bne.n	800a122 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a132:	7b1b      	ldrb	r3, [r3, #12]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	b29b      	uxth	r3, r3
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a13e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a142:	891b      	ldrh	r3, [r3, #8]
 800a144:	4619      	mov	r1, r3
 800a146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a148:	440b      	add	r3, r1
 800a14a:	429a      	cmp	r2, r3
 800a14c:	da06      	bge.n	800a15c <tcp_write+0x120>
 800a14e:	4b6c      	ldr	r3, [pc, #432]	; (800a300 <tcp_write+0x2c4>)
 800a150:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a154:	496e      	ldr	r1, [pc, #440]	; (800a310 <tcp_write+0x2d4>)
 800a156:	486c      	ldr	r0, [pc, #432]	; (800a308 <tcp_write+0x2cc>)
 800a158:	f004 fc2c 	bl	800e9b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15e:	891a      	ldrh	r2, [r3, #8]
 800a160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a162:	4413      	add	r3, r2
 800a164:	b29b      	uxth	r3, r3
 800a166:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800a174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a176:	895b      	ldrh	r3, [r3, #10]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d006      	beq.n	800a18a <tcp_write+0x14e>
 800a17c:	4b60      	ldr	r3, [pc, #384]	; (800a300 <tcp_write+0x2c4>)
 800a17e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a182:	4964      	ldr	r1, [pc, #400]	; (800a314 <tcp_write+0x2d8>)
 800a184:	4860      	ldr	r0, [pc, #384]	; (800a308 <tcp_write+0x2cc>)
 800a186:	f004 fc15 	bl	800e9b4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a190:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 800a192:	8afb      	ldrh	r3, [r7, #22]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d02e      	beq.n	800a1f6 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a198:	8afb      	ldrh	r3, [r7, #22]
 800a19a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d206      	bcs.n	800a1b0 <tcp_write+0x174>
 800a1a2:	4b57      	ldr	r3, [pc, #348]	; (800a300 <tcp_write+0x2c4>)
 800a1a4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a1a8:	495b      	ldr	r1, [pc, #364]	; (800a318 <tcp_write+0x2dc>)
 800a1aa:	4857      	ldr	r0, [pc, #348]	; (800a308 <tcp_write+0x2cc>)
 800a1ac:	f004 fc02 	bl	800e9b4 <iprintf>
      seg = last_unsent;
 800a1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b2:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a1b4:	8afb      	ldrh	r3, [r7, #22]
 800a1b6:	88fa      	ldrh	r2, [r7, #6]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	bf28      	it	cs
 800a1bc:	4613      	movcs	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	bf28      	it	cs
 800a1c8:	4613      	movcs	r3, r2
 800a1ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 800a1ce:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a1d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 800a1dc:	8afa      	ldrh	r2, [r7, #22]
 800a1de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 800a1e8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a1ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a1f6:	8afb      	ldrh	r3, [r7, #22]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <tcp_write+0x1d8>
 800a1fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	429a      	cmp	r2, r3
 800a204:	d006      	beq.n	800a214 <tcp_write+0x1d8>
 800a206:	4b3e      	ldr	r3, [pc, #248]	; (800a300 <tcp_write+0x2c4>)
 800a208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a20c:	4943      	ldr	r1, [pc, #268]	; (800a31c <tcp_write+0x2e0>)
 800a20e:	483e      	ldr	r0, [pc, #248]	; (800a308 <tcp_write+0x2cc>)
 800a210:	f004 fbd0 	bl	800e9b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a214:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a218:	88fb      	ldrh	r3, [r7, #6]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	f080 8172 	bcs.w	800a504 <tcp_write+0x4c8>
 800a220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 816d 	beq.w	800a504 <tcp_write+0x4c8>
 800a22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a22c:	891b      	ldrh	r3, [r3, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 8168 	beq.w	800a504 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a234:	88fa      	ldrh	r2, [r7, #6]
 800a236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a240:	4293      	cmp	r3, r2
 800a242:	bfa8      	it	ge
 800a244:	4613      	movge	r3, r2
 800a246:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 800a248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a24a:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a24c:	797b      	ldrb	r3, [r7, #5]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d02b      	beq.n	800a2ae <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a256:	f107 0016 	add.w	r0, r7, #22
 800a25a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a25e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800a260:	2301      	movs	r3, #1
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	797b      	ldrb	r3, [r7, #5]
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4603      	mov	r3, r0
 800a26e:	2000      	movs	r0, #0
 800a270:	f7ff fdf0 	bl	8009e54 <tcp_pbuf_prealloc>
 800a274:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 825a 	beq.w	800a732 <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800a27e:	8afb      	ldrh	r3, [r7, #22]
 800a280:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	6858      	ldr	r0, [r3, #4]
 800a288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	4413      	add	r3, r2
 800a290:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a292:	4619      	mov	r1, r3
 800a294:	f004 fb5e 	bl	800e954 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a298:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a29a:	f7fb f9c3 	bl	8005624 <pbuf_clen>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a2ac:	e055      	b.n	800a35a <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2b4:	e002      	b.n	800a2bc <tcp_write+0x280>
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1f8      	bne.n	800a2b6 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	7b1b      	ldrb	r3, [r3, #12]
 800a2c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d129      	bne.n	800a324 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2d6:	8952      	ldrh	r2, [r2, #10]
 800a2d8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d121      	bne.n	800a324 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a2e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <tcp_write+0x2ba>
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <tcp_write+0x2c4>)
 800a2ea:	f240 2231 	movw	r2, #561	; 0x231
 800a2ee:	490c      	ldr	r1, [pc, #48]	; (800a320 <tcp_write+0x2e4>)
 800a2f0:	4805      	ldr	r0, [pc, #20]	; (800a308 <tcp_write+0x2cc>)
 800a2f2:	f004 fb5f 	bl	800e9b4 <iprintf>
          extendlen = seglen;
 800a2f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a2fc:	e02d      	b.n	800a35a <tcp_write+0x31e>
 800a2fe:	bf00      	nop
 800a300:	080116f4 	.word	0x080116f4
 800a304:	08011894 	.word	0x08011894
 800a308:	08011748 	.word	0x08011748
 800a30c:	080118ac 	.word	0x080118ac
 800a310:	080118e0 	.word	0x080118e0
 800a314:	080118f8 	.word	0x080118f8
 800a318:	08011928 	.word	0x08011928
 800a31c:	08011948 	.word	0x08011948
 800a320:	08011968 	.word	0x08011968
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a326:	2201      	movs	r2, #1
 800a328:	4619      	mov	r1, r3
 800a32a:	2000      	movs	r0, #0
 800a32c:	f7fa fe0e 	bl	8004f4c <pbuf_alloc>
 800a330:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 81fe 	beq.w	800a736 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a33a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	441a      	add	r2, r3
 800a342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a344:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a346:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a348:	f7fb f96c 	bl	8005624 <pbuf_clen>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a354:	4413      	add	r3, r2
 800a356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a35a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a360:	4413      	add	r3, r2
 800a362:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a366:	e0cd      	b.n	800a504 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 80c8 	beq.w	800a504 <tcp_write+0x4c8>
 800a374:	4b72      	ldr	r3, [pc, #456]	; (800a540 <tcp_write+0x504>)
 800a376:	f240 224a 	movw	r2, #586	; 0x24a
 800a37a:	4972      	ldr	r1, [pc, #456]	; (800a544 <tcp_write+0x508>)
 800a37c:	4872      	ldr	r0, [pc, #456]	; (800a548 <tcp_write+0x50c>)
 800a37e:	f004 fb19 	bl	800e9b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a382:	e0bf      	b.n	800a504 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 800a384:	88fa      	ldrh	r2, [r7, #6]
 800a386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 800a38e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a392:	b29b      	uxth	r3, r3
 800a394:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a39a:	8bfa      	ldrh	r2, [r7, #30]
 800a39c:	8c3b      	ldrh	r3, [r7, #32]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bf28      	it	cs
 800a3a2:	4613      	movcs	r3, r2
 800a3a4:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a3a6:	797b      	ldrb	r3, [r7, #5]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d036      	beq.n	800a41e <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a3b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	8bbb      	ldrh	r3, [r7, #28]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	b299      	uxth	r1, r3
 800a3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bf0c      	ite	eq
 800a3c2:	2301      	moveq	r3, #1
 800a3c4:	2300      	movne	r3, #0
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f107 0016 	add.w	r0, r7, #22
 800a3cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a3ce:	9302      	str	r3, [sp, #8]
 800a3d0:	797b      	ldrb	r3, [r7, #5]
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2036      	movs	r0, #54	; 0x36
 800a3dc:	f7ff fd3a 	bl	8009e54 <tcp_pbuf_prealloc>
 800a3e0:	6378      	str	r0, [r7, #52]	; 0x34
 800a3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 81a8 	beq.w	800a73a <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	895b      	ldrh	r3, [r3, #10]
 800a3ee:	8bba      	ldrh	r2, [r7, #28]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d906      	bls.n	800a402 <tcp_write+0x3c6>
 800a3f4:	4b52      	ldr	r3, [pc, #328]	; (800a540 <tcp_write+0x504>)
 800a3f6:	f240 2266 	movw	r2, #614	; 0x266
 800a3fa:	4954      	ldr	r1, [pc, #336]	; (800a54c <tcp_write+0x510>)
 800a3fc:	4852      	ldr	r0, [pc, #328]	; (800a548 <tcp_write+0x50c>)
 800a3fe:	f004 fad9 	bl	800e9b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a40a:	18d0      	adds	r0, r2, r3
 800a40c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	4413      	add	r3, r2
 800a414:	8bba      	ldrh	r2, [r7, #28]
 800a416:	4619      	mov	r1, r3
 800a418:	f004 fa9c 	bl	800e954 <memcpy>
 800a41c:	e02f      	b.n	800a47e <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a41e:	8afb      	ldrh	r3, [r7, #22]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <tcp_write+0x3f6>
 800a424:	4b46      	ldr	r3, [pc, #280]	; (800a540 <tcp_write+0x504>)
 800a426:	f240 2271 	movw	r2, #625	; 0x271
 800a42a:	4949      	ldr	r1, [pc, #292]	; (800a550 <tcp_write+0x514>)
 800a42c:	4846      	ldr	r0, [pc, #280]	; (800a548 <tcp_write+0x50c>)
 800a42e:	f004 fac1 	bl	800e9b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a432:	8bbb      	ldrh	r3, [r7, #28]
 800a434:	2201      	movs	r2, #1
 800a436:	4619      	mov	r1, r3
 800a438:	2036      	movs	r0, #54	; 0x36
 800a43a:	f7fa fd87 	bl	8004f4c <pbuf_alloc>
 800a43e:	61b8      	str	r0, [r7, #24]
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 817b 	beq.w	800a73e <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	441a      	add	r2, r3
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a45e:	4619      	mov	r1, r3
 800a460:	2036      	movs	r0, #54	; 0x36
 800a462:	f7fa fd73 	bl	8004f4c <pbuf_alloc>
 800a466:	6378      	str	r0, [r7, #52]	; 0x34
 800a468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a46e:	69b8      	ldr	r0, [r7, #24]
 800a470:	f7fb f850 	bl	8005514 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a474:	e166      	b.n	800a744 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a476:	69b9      	ldr	r1, [r7, #24]
 800a478:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a47a:	f7fb f90d 	bl	8005698 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a47e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a480:	f7fb f8d0 	bl	8005624 <pbuf_clen>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a48c:	4413      	add	r3, r2
 800a48e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a492:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a496:	2b09      	cmp	r3, #9
 800a498:	d903      	bls.n	800a4a2 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a49a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a49c:	f7fb f83a 	bl	8005514 <pbuf_free>
      goto memerr;
 800a4a0:	e150      	b.n	800a744 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a4aa:	441a      	add	r2, r3
 800a4ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff fc2b 	bl	8009d14 <tcp_create_segment>
 800a4be:	6578      	str	r0, [r7, #84]	; 0x54
 800a4c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 813d 	beq.w	800a742 <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800a4c8:	8afa      	ldrh	r2, [r7, #22]
 800a4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4cc:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <tcp_write+0x49e>
      queue = seg;
 800a4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4d8:	e00c      	b.n	800a4f4 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <tcp_write+0x4b2>
 800a4e0:	4b17      	ldr	r3, [pc, #92]	; (800a540 <tcp_write+0x504>)
 800a4e2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a4e6:	491b      	ldr	r1, [pc, #108]	; (800a554 <tcp_write+0x518>)
 800a4e8:	4817      	ldr	r0, [pc, #92]	; (800a548 <tcp_write+0x50c>)
 800a4ea:	f004 fa63 	bl	800e9b4 <iprintf>
      prev_seg->next = seg;
 800a4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4f2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f6:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a4f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a4fc:	8bbb      	ldrh	r3, [r7, #28]
 800a4fe:	4413      	add	r3, r2
 800a500:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 800a504:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f4ff af3a 	bcc.w	800a384 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800a510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <tcp_write+0x4f2>
 800a516:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 800a51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a520:	895a      	ldrh	r2, [r3, #10]
 800a522:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a526:	4413      	add	r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a52c:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a52e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a532:	2b00      	cmp	r3, #0
 800a534:	d052      	beq.n	800a5dc <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	633b      	str	r3, [r7, #48]	; 0x30
 800a53c:	e02e      	b.n	800a59c <tcp_write+0x560>
 800a53e:	bf00      	nop
 800a540:	080116f4 	.word	0x080116f4
 800a544:	08011994 	.word	0x08011994
 800a548:	08011748 	.word	0x08011748
 800a54c:	080119c4 	.word	0x080119c4
 800a550:	08011a04 	.word	0x08011a04
 800a554:	08011a14 	.word	0x08011a14
      p->tot_len += oversize_used;
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	891a      	ldrh	r2, [r3, #8]
 800a55c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a560:	4413      	add	r3, r2
 800a562:	b29a      	uxth	r2, r3
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d112      	bne.n	800a596 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	8952      	ldrh	r2, [r2, #10]
 800a578:	4413      	add	r3, r2
 800a57a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	4618      	mov	r0, r3
 800a582:	f004 f9e7 	bl	800e954 <memcpy>
        p->len += oversize_used;
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	895a      	ldrh	r2, [r3, #10]
 800a58a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a58e:	4413      	add	r3, r2
 800a590:	b29a      	uxth	r2, r3
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1da      	bne.n	800a558 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 800a5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a4:	891a      	ldrh	r2, [r3, #8]
 800a5a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a5aa:	4413      	add	r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b0:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	895b      	ldrh	r3, [r3, #10]
 800a5b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d906      	bls.n	800a5cc <tcp_write+0x590>
 800a5be:	4b78      	ldr	r3, [pc, #480]	; (800a7a0 <tcp_write+0x764>)
 800a5c0:	f240 22d3 	movw	r2, #723	; 0x2d3
 800a5c4:	4977      	ldr	r1, [pc, #476]	; (800a7a4 <tcp_write+0x768>)
 800a5c6:	4878      	ldr	r0, [pc, #480]	; (800a7a8 <tcp_write+0x76c>)
 800a5c8:	f004 f9f4 	bl	800e9b4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ce:	895a      	ldrh	r2, [r3, #10]
 800a5d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5da:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a5dc:	8afa      	ldrh	r2, [r7, #22]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d018      	beq.n	800a61c <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <tcp_write+0x5c2>
 800a5f0:	4b6b      	ldr	r3, [pc, #428]	; (800a7a0 <tcp_write+0x764>)
 800a5f2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a5f6:	496d      	ldr	r1, [pc, #436]	; (800a7ac <tcp_write+0x770>)
 800a5f8:	486b      	ldr	r0, [pc, #428]	; (800a7a8 <tcp_write+0x76c>)
 800a5fa:	f004 f9db 	bl	800e9b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a604:	4618      	mov	r0, r3
 800a606:	f7fb f847 	bl	8005698 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60c:	891a      	ldrh	r2, [r3, #8]
 800a60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a610:	891b      	ldrh	r3, [r3, #8]
 800a612:	4413      	add	r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a618:	811a      	strh	r2, [r3, #8]
 800a61a:	e03c      	b.n	800a696 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 800a61c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a620:	2b00      	cmp	r3, #0
 800a622:	d038      	beq.n	800a696 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <tcp_write+0x5f6>
 800a62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <tcp_write+0x604>
 800a632:	4b5b      	ldr	r3, [pc, #364]	; (800a7a0 <tcp_write+0x764>)
 800a634:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a638:	495d      	ldr	r1, [pc, #372]	; (800a7b0 <tcp_write+0x774>)
 800a63a:	485b      	ldr	r0, [pc, #364]	; (800a7a8 <tcp_write+0x76c>)
 800a63c:	f004 f9ba 	bl	800e9b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a646:	e00a      	b.n	800a65e <tcp_write+0x622>
      p->tot_len += extendlen;
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	891a      	ldrh	r2, [r3, #8]
 800a64c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a650:	4413      	add	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1f0      	bne.n	800a648 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	891a      	ldrh	r2, [r3, #8]
 800a66a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a66e:	4413      	add	r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	895a      	ldrh	r2, [r3, #10]
 800a67a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a67e:	4413      	add	r3, r2
 800a680:	b29a      	uxth	r2, r3
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	891a      	ldrh	r2, [r3, #8]
 800a68a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a68e:	4413      	add	r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a694:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <tcp_write+0x668>
    pcb->unsent = queue;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800a6a2:	e002      	b.n	800a6aa <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 800a6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6a8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6ae:	88fb      	ldrh	r3, [r7, #6]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a6ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00e      	beq.n	800a6fa <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <tcp_write+0x6be>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d106      	bne.n	800a6fa <tcp_write+0x6be>
 800a6ec:	4b2c      	ldr	r3, [pc, #176]	; (800a7a0 <tcp_write+0x764>)
 800a6ee:	f240 3212 	movw	r2, #786	; 0x312
 800a6f2:	4930      	ldr	r1, [pc, #192]	; (800a7b4 <tcp_write+0x778>)
 800a6f4:	482c      	ldr	r0, [pc, #176]	; (800a7a8 <tcp_write+0x76c>)
 800a6f6:	f004 f95d 	bl	800e9b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d016      	beq.n	800a72e <tcp_write+0x6f2>
 800a700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d012      	beq.n	800a72e <tcp_write+0x6f2>
 800a708:	797b      	ldrb	r3, [r7, #5]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10d      	bne.n	800a72e <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	899b      	ldrh	r3, [r3, #12]
 800a718:	b29c      	uxth	r4, r3
 800a71a:	2008      	movs	r0, #8
 800a71c:	f7f9 fbe2 	bl	8003ee4 <lwip_htons>
 800a720:	4603      	mov	r3, r0
 800a722:	461a      	mov	r2, r3
 800a724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	4322      	orrs	r2, r4
 800a72a:	b292      	uxth	r2, r2
 800a72c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	e031      	b.n	800a796 <tcp_write+0x75a>
          goto memerr;
 800a732:	bf00      	nop
 800a734:	e006      	b.n	800a744 <tcp_write+0x708>
            goto memerr;
 800a736:	bf00      	nop
 800a738:	e004      	b.n	800a744 <tcp_write+0x708>
        goto memerr;
 800a73a:	bf00      	nop
 800a73c:	e002      	b.n	800a744 <tcp_write+0x708>
        goto memerr;
 800a73e:	bf00      	nop
 800a740:	e000      	b.n	800a744 <tcp_write+0x708>
      goto memerr;
 800a742:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8b5b      	ldrh	r3, [r3, #26]
 800a748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <tcp_write+0x722>
    pbuf_free(concat_p);
 800a758:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a75a:	f7fa fedb 	bl	8005514 <pbuf_free>
  }
  if (queue != NULL) {
 800a75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <tcp_write+0x72e>
    tcp_segs_free(queue);
 800a764:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a766:	f7fc fafd 	bl	8006d64 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00e      	beq.n	800a792 <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <tcp_write+0x756>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d106      	bne.n	800a792 <tcp_write+0x756>
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <tcp_write+0x764>)
 800a786:	f240 3227 	movw	r2, #807	; 0x327
 800a78a:	490a      	ldr	r1, [pc, #40]	; (800a7b4 <tcp_write+0x778>)
 800a78c:	4806      	ldr	r0, [pc, #24]	; (800a7a8 <tcp_write+0x76c>)
 800a78e:	f004 f911 	bl	800e9b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a796:	4618      	mov	r0, r3
 800a798:	3764      	adds	r7, #100	; 0x64
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd90      	pop	{r4, r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	080116f4 	.word	0x080116f4
 800a7a4:	08011a28 	.word	0x08011a28
 800a7a8:	08011748 	.word	0x08011748
 800a7ac:	08011a54 	.word	0x08011a54
 800a7b0:	08011a8c 	.word	0x08011a8c
 800a7b4:	08011ac4 	.word	0x08011ac4

0800a7b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a7b8:	b590      	push	{r4, r7, lr}
 800a7ba:	b08b      	sub	sp, #44	; 0x2c
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61bb      	str	r3, [r7, #24]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_split_unsent_seg+0x2c>
 800a7d6:	4b97      	ldr	r3, [pc, #604]	; (800aa34 <tcp_split_unsent_seg+0x27c>)
 800a7d8:	f240 324b 	movw	r2, #843	; 0x34b
 800a7dc:	4996      	ldr	r1, [pc, #600]	; (800aa38 <tcp_split_unsent_seg+0x280>)
 800a7de:	4897      	ldr	r0, [pc, #604]	; (800aa3c <tcp_split_unsent_seg+0x284>)
 800a7e0:	f004 f8e8 	bl	800e9b4 <iprintf>

  useg = pcb->unsent;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	e119      	b.n	800aa2a <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800a7f6:	887b      	ldrh	r3, [r7, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a7fc:	4b8d      	ldr	r3, [pc, #564]	; (800aa34 <tcp_split_unsent_seg+0x27c>)
 800a7fe:	f240 3253 	movw	r2, #851	; 0x353
 800a802:	498f      	ldr	r1, [pc, #572]	; (800aa40 <tcp_split_unsent_seg+0x288>)
 800a804:	488d      	ldr	r0, [pc, #564]	; (800aa3c <tcp_split_unsent_seg+0x284>)
 800a806:	f004 f8d5 	bl	800e9b4 <iprintf>
    return ERR_VAL;
 800a80a:	f06f 0305 	mvn.w	r3, #5
 800a80e:	e10c      	b.n	800aa2a <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	891b      	ldrh	r3, [r3, #8]
 800a814:	887a      	ldrh	r2, [r7, #2]
 800a816:	429a      	cmp	r2, r3
 800a818:	d301      	bcc.n	800a81e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e105      	b.n	800aa2a <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a822:	887a      	ldrh	r2, [r7, #2]
 800a824:	429a      	cmp	r2, r3
 800a826:	d906      	bls.n	800a836 <tcp_split_unsent_seg+0x7e>
 800a828:	4b82      	ldr	r3, [pc, #520]	; (800aa34 <tcp_split_unsent_seg+0x27c>)
 800a82a:	f240 325b 	movw	r2, #859	; 0x35b
 800a82e:	4985      	ldr	r1, [pc, #532]	; (800aa44 <tcp_split_unsent_seg+0x28c>)
 800a830:	4882      	ldr	r0, [pc, #520]	; (800aa3c <tcp_split_unsent_seg+0x284>)
 800a832:	f004 f8bf 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	891b      	ldrh	r3, [r3, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <tcp_split_unsent_seg+0x94>
 800a83e:	4b7d      	ldr	r3, [pc, #500]	; (800aa34 <tcp_split_unsent_seg+0x27c>)
 800a840:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a844:	4980      	ldr	r1, [pc, #512]	; (800aa48 <tcp_split_unsent_seg+0x290>)
 800a846:	487d      	ldr	r0, [pc, #500]	; (800aa3c <tcp_split_unsent_seg+0x284>)
 800a848:	f004 f8b4 	bl	800e9b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	7b1b      	ldrb	r3, [r3, #12]
 800a850:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	891a      	ldrh	r2, [r3, #8]
 800a862:	887b      	ldrh	r3, [r7, #2]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	89bb      	ldrh	r3, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	b29b      	uxth	r3, r3
 800a872:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a876:	4619      	mov	r1, r3
 800a878:	2036      	movs	r0, #54	; 0x36
 800a87a:	f7fa fb67 	bl	8004f4c <pbuf_alloc>
 800a87e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80ba 	beq.w	800a9fc <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	891a      	ldrh	r2, [r3, #8]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	891b      	ldrh	r3, [r3, #8]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	b29a      	uxth	r2, r3
 800a896:	887b      	ldrh	r3, [r7, #2]
 800a898:	4413      	add	r3, r2
 800a89a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	6858      	ldr	r0, [r3, #4]
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	18d1      	adds	r1, r2, r3
 800a8a8:	897b      	ldrh	r3, [r7, #10]
 800a8aa:	89ba      	ldrh	r2, [r7, #12]
 800a8ac:	f7fb f82c 	bl	8005908 <pbuf_copy_partial>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	89bb      	ldrh	r3, [r7, #12]
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	f040 80a2 	bne.w	800aa00 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	899b      	ldrh	r3, [r3, #12]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f9 fb0d 	bl	8003ee4 <lwip_htons>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8d2:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800a8d8:	7ffb      	ldrb	r3, [r7, #31]
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a8e2:	7ffb      	ldrb	r3, [r7, #31]
 800a8e4:	f023 0308 	bic.w	r3, r3, #8
 800a8e8:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800a8ea:	7fbb      	ldrb	r3, [r7, #30]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800a8f2:	7ffb      	ldrb	r3, [r7, #31]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d007      	beq.n	800a90c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a8fc:	7ffb      	ldrb	r3, [r7, #31]
 800a8fe:	f023 0301 	bic.w	r3, r3, #1
 800a902:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800a904:	7fbb      	ldrb	r3, [r7, #30]
 800a906:	f043 0301 	orr.w	r3, r3, #1
 800a90a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	4618      	mov	r0, r3
 800a914:	f7f9 fafb 	bl	8003f0e <lwip_htonl>
 800a918:	4602      	mov	r2, r0
 800a91a:	887b      	ldrh	r3, [r7, #2]
 800a91c:	18d1      	adds	r1, r2, r3
 800a91e:	7fba      	ldrb	r2, [r7, #30]
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	460b      	mov	r3, r1
 800a926:	6939      	ldr	r1, [r7, #16]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff f9f3 	bl	8009d14 <tcp_create_segment>
 800a92e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d066      	beq.n	800aa04 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fa fe72 	bl	8005624 <pbuf_clen>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a94a:	1a9b      	subs	r3, r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6858      	ldr	r0, [r3, #4]
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	891a      	ldrh	r2, [r3, #8]
 800a95e:	89bb      	ldrh	r3, [r7, #12]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	f7fa fc4f 	bl	8005208 <pbuf_realloc>
  useg->len -= remainder;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	891a      	ldrh	r2, [r3, #8]
 800a96e:	89bb      	ldrh	r3, [r7, #12]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	b29a      	uxth	r2, r3
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	899b      	ldrh	r3, [r3, #12]
 800a97e:	b29c      	uxth	r4, r3
 800a980:	7ffb      	ldrb	r3, [r7, #31]
 800a982:	b29b      	uxth	r3, r3
 800a984:	4618      	mov	r0, r3
 800a986:	f7f9 faad 	bl	8003ee4 <lwip_htons>
 800a98a:	4603      	mov	r3, r0
 800a98c:	461a      	mov	r2, r3
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	4322      	orrs	r2, r4
 800a994:	b292      	uxth	r2, r2
 800a996:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2200      	movs	r2, #0
 800a99c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fa fe3e 	bl	8005624 <pbuf_clen>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fa fe2f 	bl	8005624 <pbuf_clen>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9d0:	4413      	add	r3, r2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e016      	b.n	800aa2a <tcp_split_unsent_seg+0x272>
    goto memerr;
 800a9fc:	bf00      	nop
 800a9fe:	e002      	b.n	800aa06 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800aa00:	bf00      	nop
 800aa02:	e000      	b.n	800aa06 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800aa04:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d006      	beq.n	800aa1a <tcp_split_unsent_seg+0x262>
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <tcp_split_unsent_seg+0x27c>)
 800aa0e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800aa12:	490e      	ldr	r1, [pc, #56]	; (800aa4c <tcp_split_unsent_seg+0x294>)
 800aa14:	4809      	ldr	r0, [pc, #36]	; (800aa3c <tcp_split_unsent_seg+0x284>)
 800aa16:	f003 ffcd 	bl	800e9b4 <iprintf>
  if (p != NULL) {
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800aa20:	6938      	ldr	r0, [r7, #16]
 800aa22:	f7fa fd77 	bl	8005514 <pbuf_free>
  }

  return ERR_MEM;
 800aa26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3724      	adds	r7, #36	; 0x24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd90      	pop	{r4, r7, pc}
 800aa32:	bf00      	nop
 800aa34:	080116f4 	.word	0x080116f4
 800aa38:	08011ae4 	.word	0x08011ae4
 800aa3c:	08011748 	.word	0x08011748
 800aa40:	08011b08 	.word	0x08011b08
 800aa44:	08011b2c 	.word	0x08011b2c
 800aa48:	08011b3c 	.word	0x08011b3c
 800aa4c:	08011b4c 	.word	0x08011b4c

0800aa50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <tcp_send_fin+0x1c>
 800aa5e:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <tcp_send_fin+0x94>)
 800aa60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aa64:	4920      	ldr	r1, [pc, #128]	; (800aae8 <tcp_send_fin+0x98>)
 800aa66:	4821      	ldr	r0, [pc, #132]	; (800aaec <tcp_send_fin+0x9c>)
 800aa68:	f003 ffa4 	bl	800e9b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d02e      	beq.n	800aad2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e002      	b.n	800aa82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1f8      	bne.n	800aa7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	899b      	ldrh	r3, [r3, #12]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f9 fa26 	bl	8003ee4 <lwip_htons>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d116      	bne.n	800aad2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	899b      	ldrh	r3, [r3, #12]
 800aaaa:	b29c      	uxth	r4, r3
 800aaac:	2001      	movs	r0, #1
 800aaae:	f7f9 fa19 	bl	8003ee4 <lwip_htons>
 800aab2:	4603      	mov	r3, r0
 800aab4:	461a      	mov	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	4322      	orrs	r2, r4
 800aabc:	b292      	uxth	r2, r2
 800aabe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	8b5b      	ldrh	r3, [r3, #26]
 800aac4:	f043 0320 	orr.w	r3, r3, #32
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	e004      	b.n	800aadc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aad2:	2101      	movs	r1, #1
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f80b 	bl	800aaf0 <tcp_enqueue_flags>
 800aada:	4603      	mov	r3, r0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd90      	pop	{r4, r7, pc}
 800aae4:	080116f4 	.word	0x080116f4
 800aae8:	08011b58 	.word	0x08011b58
 800aaec:	08011748 	.word	0x08011748

0800aaf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af02      	add	r7, sp, #8
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	f003 0303 	and.w	r3, r3, #3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <tcp_enqueue_flags+0x2c>
 800ab0e:	4b67      	ldr	r3, [pc, #412]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800ab10:	f240 4211 	movw	r2, #1041	; 0x411
 800ab14:	4966      	ldr	r1, [pc, #408]	; (800acb0 <tcp_enqueue_flags+0x1c0>)
 800ab16:	4867      	ldr	r0, [pc, #412]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800ab18:	f003 ff4c 	bl	800e9b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <tcp_enqueue_flags+0x40>
 800ab22:	4b62      	ldr	r3, [pc, #392]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800ab24:	f240 4213 	movw	r2, #1043	; 0x413
 800ab28:	4963      	ldr	r1, [pc, #396]	; (800acb8 <tcp_enqueue_flags+0x1c8>)
 800ab2a:	4862      	ldr	r0, [pc, #392]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800ab2c:	f003 ff42 	bl	800e9b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ab4a:	7dbb      	ldrb	r3, [r7, #22]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab52:	4619      	mov	r1, r3
 800ab54:	2036      	movs	r0, #54	; 0x36
 800ab56:	f7fa f9f9 	bl	8004f4c <pbuf_alloc>
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8b5b      	ldrh	r3, [r3, #26]
 800ab66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab70:	f04f 33ff 	mov.w	r3, #4294967295
 800ab74:	e095      	b.n	800aca2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	895a      	ldrh	r2, [r3, #10]
 800ab7a:	7dbb      	ldrb	r3, [r7, #22]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d206      	bcs.n	800ab90 <tcp_enqueue_flags+0xa0>
 800ab82:	4b4a      	ldr	r3, [pc, #296]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800ab84:	f240 4239 	movw	r2, #1081	; 0x439
 800ab88:	494c      	ldr	r1, [pc, #304]	; (800acbc <tcp_enqueue_flags+0x1cc>)
 800ab8a:	484a      	ldr	r0, [pc, #296]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800ab8c:	f003 ff12 	bl	800e9b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	68f9      	ldr	r1, [r7, #12]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff f8b8 	bl	8009d14 <tcp_create_segment>
 800aba4:	60b8      	str	r0, [r7, #8]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d109      	bne.n	800abc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8b5b      	ldrh	r3, [r3, #26]
 800abb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	e070      	b.n	800aca2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d006      	beq.n	800abda <tcp_enqueue_flags+0xea>
 800abcc:	4b37      	ldr	r3, [pc, #220]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800abce:	f240 4242 	movw	r2, #1090	; 0x442
 800abd2:	493b      	ldr	r1, [pc, #236]	; (800acc0 <tcp_enqueue_flags+0x1d0>)
 800abd4:	4837      	ldr	r0, [pc, #220]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800abd6:	f003 feed 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	891b      	ldrh	r3, [r3, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <tcp_enqueue_flags+0x100>
 800abe2:	4b32      	ldr	r3, [pc, #200]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800abe4:	f240 4243 	movw	r2, #1091	; 0x443
 800abe8:	4936      	ldr	r1, [pc, #216]	; (800acc4 <tcp_enqueue_flags+0x1d4>)
 800abea:	4832      	ldr	r0, [pc, #200]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800abec:	f003 fee2 	bl	800e9b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d103      	bne.n	800ac00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	66da      	str	r2, [r3, #108]	; 0x6c
 800abfe:	e00d      	b.n	800ac1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	e002      	b.n	800ac0e <tcp_enqueue_flags+0x11e>
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1f8      	bne.n	800ac08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <tcp_enqueue_flags+0x148>
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	8b5b      	ldrh	r3, [r3, #26]
 800ac50:	f043 0320 	orr.w	r3, r3, #32
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fa fce0 	bl	8005624 <pbuf_clen>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac6e:	4413      	add	r3, r2
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10a      	bne.n	800aca0 <tcp_enqueue_flags+0x1b0>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <tcp_enqueue_flags+0x1b0>
 800ac92:	4b06      	ldr	r3, [pc, #24]	; (800acac <tcp_enqueue_flags+0x1bc>)
 800ac94:	f240 4265 	movw	r2, #1125	; 0x465
 800ac98:	490b      	ldr	r1, [pc, #44]	; (800acc8 <tcp_enqueue_flags+0x1d8>)
 800ac9a:	4806      	ldr	r0, [pc, #24]	; (800acb4 <tcp_enqueue_flags+0x1c4>)
 800ac9c:	f003 fe8a 	bl	800e9b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	080116f4 	.word	0x080116f4
 800acb0:	08011b74 	.word	0x08011b74
 800acb4:	08011748 	.word	0x08011748
 800acb8:	08011bcc 	.word	0x08011bcc
 800acbc:	08011bec 	.word	0x08011bec
 800acc0:	08011c28 	.word	0x08011c28
 800acc4:	08011c40 	.word	0x08011c40
 800acc8:	08011c6c 	.word	0x08011c6c

0800accc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800accc:	b5b0      	push	{r4, r5, r7, lr}
 800acce:	b08a      	sub	sp, #40	; 0x28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <tcp_output+0x1c>
 800acda:	4b8a      	ldr	r3, [pc, #552]	; (800af04 <tcp_output+0x238>)
 800acdc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ace0:	4989      	ldr	r1, [pc, #548]	; (800af08 <tcp_output+0x23c>)
 800ace2:	488a      	ldr	r0, [pc, #552]	; (800af0c <tcp_output+0x240>)
 800ace4:	f003 fe66 	bl	800e9b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	7d1b      	ldrb	r3, [r3, #20]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d106      	bne.n	800acfe <tcp_output+0x32>
 800acf0:	4b84      	ldr	r3, [pc, #528]	; (800af04 <tcp_output+0x238>)
 800acf2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800acf6:	4986      	ldr	r1, [pc, #536]	; (800af10 <tcp_output+0x244>)
 800acf8:	4884      	ldr	r0, [pc, #528]	; (800af0c <tcp_output+0x240>)
 800acfa:	f003 fe5b 	bl	800e9b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800acfe:	4b85      	ldr	r3, [pc, #532]	; (800af14 <tcp_output+0x248>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d101      	bne.n	800ad0c <tcp_output+0x40>
    return ERR_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e1d1      	b.n	800b0b0 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	bf28      	it	cs
 800ad1c:	4613      	movcs	r3, r2
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10b      	bne.n	800ad46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	8b5b      	ldrh	r3, [r3, #26]
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 81ad 	beq.w	800b096 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fdd7 	bl	800b8f0 <tcp_send_empty_ack>
 800ad42:	4603      	mov	r3, r0
 800ad44:	e1b4      	b.n	800b0b0 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fe ffc4 	bl	8009cdc <tcp_route>
 800ad54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <tcp_output+0x96>
    return ERR_RTE;
 800ad5c:	f06f 0303 	mvn.w	r3, #3
 800ad60:	e1a6      	b.n	800b0b0 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <tcp_output+0xa4>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d111      	bne.n	800ad94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <tcp_output+0xb0>
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	e000      	b.n	800ad7e <tcp_output+0xb2>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <tcp_output+0xc0>
      return ERR_RTE;
 800ad86:	f06f 0303 	mvn.w	r3, #3
 800ad8a:	e191      	b.n	800b0b0 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7f9 f8b7 	bl	8003f0e <lwip_htonl>
 800ada0:	4602      	mov	r2, r0
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adaa:	8912      	ldrh	r2, [r2, #8]
 800adac:	4413      	add	r3, r2
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d227      	bcs.n	800ae04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adba:	461a      	mov	r2, r3
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d114      	bne.n	800adec <tcp_output+0x120>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d110      	bne.n	800adec <tcp_output+0x120>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10b      	bne.n	800adec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	8b5b      	ldrh	r3, [r3, #26]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8150 	beq.w	800b09a <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fd78 	bl	800b8f0 <tcp_send_empty_ack>
 800ae00:	4603      	mov	r3, r0
 800ae02:	e155      	b.n	800b0b0 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 811f 	beq.w	800b058 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800ae1a:	e002      	b.n	800ae22 <tcp_output+0x156>
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	623b      	str	r3, [r7, #32]
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1f8      	bne.n	800ae1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ae2a:	e115      	b.n	800b058 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	899b      	ldrh	r3, [r3, #12]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f9 f855 	bl	8003ee4 <lwip_htons>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <tcp_output+0x188>
 800ae46:	4b2f      	ldr	r3, [pc, #188]	; (800af04 <tcp_output+0x238>)
 800ae48:	f240 5236 	movw	r2, #1334	; 0x536
 800ae4c:	4932      	ldr	r1, [pc, #200]	; (800af18 <tcp_output+0x24c>)
 800ae4e:	482f      	ldr	r0, [pc, #188]	; (800af0c <tcp_output+0x240>)
 800ae50:	f003 fdb0 	bl	800e9b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01f      	beq.n	800ae9c <tcp_output+0x1d0>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8b5b      	ldrh	r3, [r3, #26]
 800ae60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d119      	bne.n	800ae9c <tcp_output+0x1d0>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <tcp_output+0x1bc>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d110      	bne.n	800ae9c <tcp_output+0x1d0>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7e:	891a      	ldrh	r2, [r3, #8]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d209      	bcs.n	800ae9c <tcp_output+0x1d0>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <tcp_output+0x1d0>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d901      	bls.n	800aea0 <tcp_output+0x1d4>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <tcp_output+0x1d6>
 800aea0:	2300      	movs	r3, #0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d106      	bne.n	800aeb4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8b5b      	ldrh	r3, [r3, #26]
 800aeaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80e7 	beq.w	800b082 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7d1b      	ldrb	r3, [r3, #20]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d00d      	beq.n	800aed8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	899b      	ldrh	r3, [r3, #12]
 800aec2:	b29c      	uxth	r4, r3
 800aec4:	2010      	movs	r0, #16
 800aec6:	f7f9 f80d 	bl	8003ee4 <lwip_htons>
 800aeca:	4603      	mov	r3, r0
 800aecc:	461a      	mov	r2, r3
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	4322      	orrs	r2, r4
 800aed4:	b292      	uxth	r2, r2
 800aed6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aede:	f000 f90b 	bl	800b0f8 <tcp_output_segment>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d016      	beq.n	800af1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8b5b      	ldrh	r3, [r3, #26]
 800aef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	835a      	strh	r2, [r3, #26]
      return err;
 800aefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af00:	e0d6      	b.n	800b0b0 <tcp_output+0x3e4>
 800af02:	bf00      	nop
 800af04:	080116f4 	.word	0x080116f4
 800af08:	08011c94 	.word	0x08011c94
 800af0c:	08011748 	.word	0x08011748
 800af10:	08011cac 	.word	0x08011cac
 800af14:	20008998 	.word	0x20008998
 800af18:	08011cd4 	.word	0x08011cd4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	2200      	movs	r2, #0
 800af20:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7d1b      	ldrb	r3, [r3, #20]
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d006      	beq.n	800af40 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	8b5b      	ldrh	r3, [r3, #26]
 800af36:	f023 0303 	bic.w	r3, r3, #3
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	f7f8 ffe1 	bl	8003f0e <lwip_htonl>
 800af4c:	4604      	mov	r4, r0
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	891b      	ldrh	r3, [r3, #8]
 800af52:	461d      	mov	r5, r3
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	899b      	ldrh	r3, [r3, #12]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7f8 ffc1 	bl	8003ee4 <lwip_htons>
 800af62:	4603      	mov	r3, r0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <tcp_output+0x2a6>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <tcp_output+0x2a8>
 800af72:	2300      	movs	r3, #0
 800af74:	442b      	add	r3, r5
 800af76:	4423      	add	r3, r4
 800af78:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	da02      	bge.n	800af8c <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	891b      	ldrh	r3, [r3, #8]
 800af90:	461c      	mov	r4, r3
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	899b      	ldrh	r3, [r3, #12]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f8 ffa2 	bl	8003ee4 <lwip_htons>
 800afa0:	4603      	mov	r3, r0
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <tcp_output+0x2e4>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <tcp_output+0x2e6>
 800afb0:	2300      	movs	r3, #0
 800afb2:	4423      	add	r3, r4
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d049      	beq.n	800b04c <tcp_output+0x380>
      seg->next = NULL;
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d105      	bne.n	800afd2 <tcp_output+0x306>
        pcb->unacked = seg;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afca:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	623b      	str	r3, [r7, #32]
 800afd0:	e03f      	b.n	800b052 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f8 ff98 	bl	8003f0e <lwip_htonl>
 800afde:	4604      	mov	r4, r0
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f8 ff91 	bl	8003f0e <lwip_htonl>
 800afec:	4603      	mov	r3, r0
 800afee:	1ae3      	subs	r3, r4, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da24      	bge.n	800b03e <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3370      	adds	r3, #112	; 0x70
 800aff8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800affa:	e002      	b.n	800b002 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d011      	beq.n	800b02e <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4618      	mov	r0, r3
 800b014:	f7f8 ff7b 	bl	8003f0e <lwip_htonl>
 800b018:	4604      	mov	r4, r0
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	4618      	mov	r0, r3
 800b022:	f7f8 ff74 	bl	8003f0e <lwip_htonl>
 800b026:	4603      	mov	r3, r0
 800b028:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dbe6      	blt.n	800affc <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	e009      	b.n	800b052 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	623b      	str	r3, [r7, #32]
 800b04a:	e002      	b.n	800b052 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b04e:	f7fb fe9e 	bl	8006d8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d012      	beq.n	800b084 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	4618      	mov	r0, r3
 800b066:	f7f8 ff52 	bl	8003f0e <lwip_htonl>
 800b06a:	4602      	mov	r2, r0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b074:	8912      	ldrh	r2, [r2, #8]
 800b076:	4413      	add	r3, r2
  while (seg != NULL &&
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	f4bf aed6 	bcs.w	800ae2c <tcp_output+0x160>
 800b080:	e000      	b.n	800b084 <tcp_output+0x3b8>
      break;
 800b082:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d108      	bne.n	800b09e <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b094:	e004      	b.n	800b0a0 <tcp_output+0x3d4>
    goto output_done;
 800b096:	bf00      	nop
 800b098:	e002      	b.n	800b0a0 <tcp_output+0x3d4>
    goto output_done;
 800b09a:	bf00      	nop
 800b09c:	e000      	b.n	800b0a0 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b09e:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	8b5b      	ldrh	r3, [r3, #26]
 800b0a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3728      	adds	r7, #40	; 0x28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bdb0      	pop	{r4, r5, r7, pc}

0800b0b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <tcp_output_segment_busy+0x1c>
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <tcp_output_segment_busy+0x34>)
 800b0c8:	f240 529a 	movw	r2, #1434	; 0x59a
 800b0cc:	4908      	ldr	r1, [pc, #32]	; (800b0f0 <tcp_output_segment_busy+0x38>)
 800b0ce:	4809      	ldr	r0, [pc, #36]	; (800b0f4 <tcp_output_segment_busy+0x3c>)
 800b0d0:	f003 fc70 	bl	800e9b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	7b9b      	ldrb	r3, [r3, #14]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d001      	beq.n	800b0e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	080116f4 	.word	0x080116f4
 800b0f0:	08011cec 	.word	0x08011cec
 800b0f4:	08011748 	.word	0x08011748

0800b0f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b0f8:	b5b0      	push	{r4, r5, r7, lr}
 800b0fa:	b08c      	sub	sp, #48	; 0x30
 800b0fc:	af04      	add	r7, sp, #16
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <tcp_output_segment+0x20>
 800b10a:	4b63      	ldr	r3, [pc, #396]	; (800b298 <tcp_output_segment+0x1a0>)
 800b10c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b110:	4962      	ldr	r1, [pc, #392]	; (800b29c <tcp_output_segment+0x1a4>)
 800b112:	4863      	ldr	r0, [pc, #396]	; (800b2a0 <tcp_output_segment+0x1a8>)
 800b114:	f003 fc4e 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_output_segment+0x34>
 800b11e:	4b5e      	ldr	r3, [pc, #376]	; (800b298 <tcp_output_segment+0x1a0>)
 800b120:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b124:	495f      	ldr	r1, [pc, #380]	; (800b2a4 <tcp_output_segment+0x1ac>)
 800b126:	485e      	ldr	r0, [pc, #376]	; (800b2a0 <tcp_output_segment+0x1a8>)
 800b128:	f003 fc44 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <tcp_output_segment+0x48>
 800b132:	4b59      	ldr	r3, [pc, #356]	; (800b298 <tcp_output_segment+0x1a0>)
 800b134:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b138:	495b      	ldr	r1, [pc, #364]	; (800b2a8 <tcp_output_segment+0x1b0>)
 800b13a:	4859      	ldr	r0, [pc, #356]	; (800b2a0 <tcp_output_segment+0x1a8>)
 800b13c:	f003 fc3a 	bl	800e9b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7ff ffb9 	bl	800b0b8 <tcp_output_segment_busy>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e09f      	b.n	800b290 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	691c      	ldr	r4, [r3, #16]
 800b158:	4610      	mov	r0, r2
 800b15a:	f7f8 fed8 	bl	8003f0e <lwip_htonl>
 800b15e:	4603      	mov	r3, r0
 800b160:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	691c      	ldr	r4, [r3, #16]
 800b16a:	4610      	mov	r0, r2
 800b16c:	f7f8 feba 	bl	8003ee4 <lwip_htons>
 800b170:	4603      	mov	r3, r0
 800b172:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b17c:	441a      	add	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	3314      	adds	r3, #20
 800b188:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	7b1b      	ldrb	r3, [r3, #12]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d015      	beq.n	800b1c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	3304      	adds	r3, #4
 800b19a:	461a      	mov	r2, r3
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b1a2:	f7fc f9d1 	bl	8007548 <tcp_eff_send_mss_netif>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b1aa:	8b7b      	ldrh	r3, [r7, #26]
 800b1ac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7f8 feac 	bl	8003f0e <lwip_htonl>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	da02      	bge.n	800b1d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10c      	bne.n	800b1f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b1da:	4b34      	ldr	r3, [pc, #208]	; (800b2ac <tcp_output_segment+0x1b4>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f8 fe90 	bl	8003f0e <lwip_htonl>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	691a      	ldr	r2, [r3, #16]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	8959      	ldrh	r1, [r3, #10]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	8b3a      	ldrh	r2, [r7, #24]
 800b20e:	1a8a      	subs	r2, r1, r2
 800b210:	b292      	uxth	r2, r2
 800b212:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	8919      	ldrh	r1, [r3, #8]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	8b3a      	ldrh	r2, [r7, #24]
 800b220:	1a8a      	subs	r2, r1, r2
 800b222:	b292      	uxth	r2, r2
 800b224:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	6912      	ldr	r2, [r2, #16]
 800b22e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	2200      	movs	r2, #0
 800b236:	741a      	strb	r2, [r3, #16]
 800b238:	2200      	movs	r2, #0
 800b23a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f103 0214 	add.w	r2, r3, #20
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	7b1b      	ldrb	r3, [r3, #12]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	4413      	add	r3, r2
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	429a      	cmp	r2, r3
 800b254:	d006      	beq.n	800b264 <tcp_output_segment+0x16c>
 800b256:	4b10      	ldr	r3, [pc, #64]	; (800b298 <tcp_output_segment+0x1a0>)
 800b258:	f240 621c 	movw	r2, #1564	; 0x61c
 800b25c:	4914      	ldr	r1, [pc, #80]	; (800b2b0 <tcp_output_segment+0x1b8>)
 800b25e:	4810      	ldr	r0, [pc, #64]	; (800b2a0 <tcp_output_segment+0x1a8>)
 800b260:	f003 fba8 	bl	800e9b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6858      	ldr	r0, [r3, #4]
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	1d1c      	adds	r4, r3, #4
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	7add      	ldrb	r5, [r3, #11]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	7a9b      	ldrb	r3, [r3, #10]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	9202      	str	r2, [sp, #8]
 800b27a:	2206      	movs	r2, #6
 800b27c:	9201      	str	r2, [sp, #4]
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	462b      	mov	r3, r5
 800b282:	4622      	mov	r2, r4
 800b284:	f002 fa74 	bl	800d770 <ip4_output_if>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3720      	adds	r7, #32
 800b294:	46bd      	mov	sp, r7
 800b296:	bdb0      	pop	{r4, r5, r7, pc}
 800b298:	080116f4 	.word	0x080116f4
 800b29c:	08011d14 	.word	0x08011d14
 800b2a0:	08011748 	.word	0x08011748
 800b2a4:	08011d34 	.word	0x08011d34
 800b2a8:	08011d54 	.word	0x08011d54
 800b2ac:	20008948 	.word	0x20008948
 800b2b0:	08011d78 	.word	0x08011d78

0800b2b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b2b4:	b5b0      	push	{r4, r5, r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_rexmit_rto_prepare+0x1c>
 800b2c2:	4b36      	ldr	r3, [pc, #216]	; (800b39c <tcp_rexmit_rto_prepare+0xe8>)
 800b2c4:	f240 6263 	movw	r2, #1635	; 0x663
 800b2c8:	4935      	ldr	r1, [pc, #212]	; (800b3a0 <tcp_rexmit_rto_prepare+0xec>)
 800b2ca:	4836      	ldr	r0, [pc, #216]	; (800b3a4 <tcp_rexmit_rto_prepare+0xf0>)
 800b2cc:	f003 fb72 	bl	800e9b4 <iprintf>

  if (pcb->unacked == NULL) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b2d8:	f06f 0305 	mvn.w	r3, #5
 800b2dc:	e059      	b.n	800b392 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e00b      	b.n	800b2fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f7ff fee6 	bl	800b0b8 <tcp_output_segment_busy>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b2f2:	f06f 0305 	mvn.w	r3, #5
 800b2f6:	e04c      	b.n	800b392 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1ef      	bne.n	800b2e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff fed6 	bl	800b0b8 <tcp_output_segment_busy>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b312:	f06f 0305 	mvn.w	r3, #5
 800b316:	e03c      	b.n	800b392 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d104      	bne.n	800b332 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	895a      	ldrh	r2, [r3, #10]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b348:	b29a      	uxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	f7f8 fdda 	bl	8003f0e <lwip_htonl>
 800b35a:	4604      	mov	r4, r0
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	891b      	ldrh	r3, [r3, #8]
 800b360:	461d      	mov	r5, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	899b      	ldrh	r3, [r3, #12]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f8 fdba 	bl	8003ee4 <lwip_htons>
 800b370:	4603      	mov	r3, r0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	f003 0303 	and.w	r3, r3, #3
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <tcp_rexmit_rto_prepare+0xcc>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e000      	b.n	800b382 <tcp_rexmit_rto_prepare+0xce>
 800b380:	2300      	movs	r3, #0
 800b382:	442b      	add	r3, r5
 800b384:	18e2      	adds	r2, r4, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bdb0      	pop	{r4, r5, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	080116f4 	.word	0x080116f4
 800b3a0:	08011d8c 	.word	0x08011d8c
 800b3a4:	08011748 	.word	0x08011748

0800b3a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <tcp_rexmit_rto_commit+0x1c>
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <tcp_rexmit_rto_commit+0x44>)
 800b3b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b3bc:	490c      	ldr	r1, [pc, #48]	; (800b3f0 <tcp_rexmit_rto_commit+0x48>)
 800b3be:	480d      	ldr	r0, [pc, #52]	; (800b3f4 <tcp_rexmit_rto_commit+0x4c>)
 800b3c0:	f003 faf8 	bl	800e9b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3ca:	2bff      	cmp	r3, #255	; 0xff
 800b3cc:	d007      	beq.n	800b3de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7ff fc74 	bl	800accc <tcp_output>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	080116f4 	.word	0x080116f4
 800b3f0:	08011db0 	.word	0x08011db0
 800b3f4:	08011748 	.word	0x08011748

0800b3f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <tcp_rexmit_rto+0x1c>
 800b406:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <tcp_rexmit_rto+0x38>)
 800b408:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b40c:	4909      	ldr	r1, [pc, #36]	; (800b434 <tcp_rexmit_rto+0x3c>)
 800b40e:	480a      	ldr	r0, [pc, #40]	; (800b438 <tcp_rexmit_rto+0x40>)
 800b410:	f003 fad0 	bl	800e9b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ff4d 	bl	800b2b4 <tcp_rexmit_rto_prepare>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff ffc1 	bl	800b3a8 <tcp_rexmit_rto_commit>
  }
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	080116f4 	.word	0x080116f4
 800b434:	08011dd4 	.word	0x08011dd4
 800b438:	08011748 	.word	0x08011748

0800b43c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <tcp_rexmit+0x1c>
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <tcp_rexmit+0xcc>)
 800b44c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b450:	492e      	ldr	r1, [pc, #184]	; (800b50c <tcp_rexmit+0xd0>)
 800b452:	482f      	ldr	r0, [pc, #188]	; (800b510 <tcp_rexmit+0xd4>)
 800b454:	f003 faae 	bl	800e9b4 <iprintf>

  if (pcb->unacked == NULL) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b460:	f06f 0305 	mvn.w	r3, #5
 800b464:	e04c      	b.n	800b500 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b46c:	68b8      	ldr	r0, [r7, #8]
 800b46e:	f7ff fe23 	bl	800b0b8 <tcp_output_segment_busy>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b478:	f06f 0305 	mvn.w	r3, #5
 800b47c:	e040      	b.n	800b500 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	336c      	adds	r3, #108	; 0x6c
 800b48a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b48c:	e002      	b.n	800b494 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d011      	beq.n	800b4c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f8 fd32 	bl	8003f0e <lwip_htonl>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f8 fd2b 	bl	8003f0e <lwip_htonl>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dbe6      	blt.n	800b48e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d103      	bne.n	800b4de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4e4:	2bff      	cmp	r3, #255	; 0xff
 800b4e6:	d007      	beq.n	800b4f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}
 800b508:	080116f4 	.word	0x080116f4
 800b50c:	08011df0 	.word	0x08011df0
 800b510:	08011748 	.word	0x08011748

0800b514 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <tcp_rexmit_fast+0x1c>
 800b522:	4b2a      	ldr	r3, [pc, #168]	; (800b5cc <tcp_rexmit_fast+0xb8>)
 800b524:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b528:	4929      	ldr	r1, [pc, #164]	; (800b5d0 <tcp_rexmit_fast+0xbc>)
 800b52a:	482a      	ldr	r0, [pc, #168]	; (800b5d4 <tcp_rexmit_fast+0xc0>)
 800b52c:	f003 fa42 	bl	800e9b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b534:	2b00      	cmp	r3, #0
 800b536:	d045      	beq.n	800b5c4 <tcp_rexmit_fast+0xb0>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8b5b      	ldrh	r3, [r3, #26]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b00      	cmp	r3, #0
 800b542:	d13f      	bne.n	800b5c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff79 	bl	800b43c <tcp_rexmit>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d139      	bne.n	800b5c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b55c:	4293      	cmp	r3, r2
 800b55e:	bf28      	it	cs
 800b560:	4613      	movcs	r3, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	da00      	bge.n	800b56a <tcp_rexmit_fast+0x56>
 800b568:	3301      	adds	r3, #1
 800b56a:	105b      	asrs	r3, r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b580:	005b      	lsls	r3, r3, #1
 800b582:	429a      	cmp	r2, r3
 800b584:	d206      	bcs.n	800b594 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b59e:	4619      	mov	r1, r3
 800b5a0:	0049      	lsls	r1, r1, #1
 800b5a2:	440b      	add	r3, r1
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	4413      	add	r3, r2
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	8b5b      	ldrh	r3, [r3, #26]
 800b5b4:	f043 0304 	orr.w	r3, r3, #4
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	080116f4 	.word	0x080116f4
 800b5d0:	08011e08 	.word	0x08011e08
 800b5d4:	08011748 	.word	0x08011748

0800b5d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	607b      	str	r3, [r7, #4]
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	817b      	strh	r3, [r7, #10]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b5ea:	897a      	ldrh	r2, [r7, #10]
 800b5ec:	893b      	ldrh	r3, [r7, #8]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3314      	adds	r3, #20
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	2022      	movs	r0, #34	; 0x22
 800b5fe:	f7f9 fca5 	bl	8004f4c <pbuf_alloc>
 800b602:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d04d      	beq.n	800b6a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	3313      	adds	r3, #19
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	8952      	ldrh	r2, [r2, #10]
 800b612:	4293      	cmp	r3, r2
 800b614:	db06      	blt.n	800b624 <tcp_output_alloc_header_common+0x4c>
 800b616:	4b26      	ldr	r3, [pc, #152]	; (800b6b0 <tcp_output_alloc_header_common+0xd8>)
 800b618:	f240 7223 	movw	r2, #1827	; 0x723
 800b61c:	4925      	ldr	r1, [pc, #148]	; (800b6b4 <tcp_output_alloc_header_common+0xdc>)
 800b61e:	4826      	ldr	r0, [pc, #152]	; (800b6b8 <tcp_output_alloc_header_common+0xe0>)
 800b620:	f003 f9c8 	bl	800e9b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b62a:	8c3b      	ldrh	r3, [r7, #32]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f8 fc59 	bl	8003ee4 <lwip_htons>
 800b632:	4603      	mov	r3, r0
 800b634:	461a      	mov	r2, r3
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7f8 fc51 	bl	8003ee4 <lwip_htons>
 800b642:	4603      	mov	r3, r0
 800b644:	461a      	mov	r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7f8 fc5c 	bl	8003f0e <lwip_htonl>
 800b656:	4602      	mov	r2, r0
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b65c:	897b      	ldrh	r3, [r7, #10]
 800b65e:	089b      	lsrs	r3, r3, #2
 800b660:	b29b      	uxth	r3, r3
 800b662:	3305      	adds	r3, #5
 800b664:	b29b      	uxth	r3, r3
 800b666:	031b      	lsls	r3, r3, #12
 800b668:	b29a      	uxth	r2, r3
 800b66a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4313      	orrs	r3, r2
 800b672:	b29b      	uxth	r3, r3
 800b674:	4618      	mov	r0, r3
 800b676:	f7f8 fc35 	bl	8003ee4 <lwip_htons>
 800b67a:	4603      	mov	r3, r0
 800b67c:	461a      	mov	r2, r3
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b684:	4618      	mov	r0, r3
 800b686:	f7f8 fc2d 	bl	8003ee4 <lwip_htons>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2200      	movs	r2, #0
 800b696:	741a      	strb	r2, [r3, #16]
 800b698:	2200      	movs	r2, #0
 800b69a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	749a      	strb	r2, [r3, #18]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b6a6:	697b      	ldr	r3, [r7, #20]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	080116f4 	.word	0x080116f4
 800b6b4:	08011e28 	.word	0x08011e28
 800b6b8:	08011748 	.word	0x08011748

0800b6bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b6bc:	b5b0      	push	{r4, r5, r7, lr}
 800b6be:	b08a      	sub	sp, #40	; 0x28
 800b6c0:	af04      	add	r7, sp, #16
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	817b      	strh	r3, [r7, #10]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d106      	bne.n	800b6e2 <tcp_output_alloc_header+0x26>
 800b6d4:	4b15      	ldr	r3, [pc, #84]	; (800b72c <tcp_output_alloc_header+0x70>)
 800b6d6:	f240 7242 	movw	r2, #1858	; 0x742
 800b6da:	4915      	ldr	r1, [pc, #84]	; (800b730 <tcp_output_alloc_header+0x74>)
 800b6dc:	4815      	ldr	r0, [pc, #84]	; (800b734 <tcp_output_alloc_header+0x78>)
 800b6de:	f003 f969 	bl	800e9b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	8adb      	ldrh	r3, [r3, #22]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	8b12      	ldrh	r2, [r2, #24]
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b6f2:	893d      	ldrh	r5, [r7, #8]
 800b6f4:	897c      	ldrh	r4, [r7, #10]
 800b6f6:	9103      	str	r1, [sp, #12]
 800b6f8:	2110      	movs	r1, #16
 800b6fa:	9102      	str	r1, [sp, #8]
 800b6fc:	9201      	str	r2, [sp, #4]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	462a      	mov	r2, r5
 800b704:	4621      	mov	r1, r4
 800b706:	f7ff ff67 	bl	800b5d8 <tcp_output_alloc_header_common>
 800b70a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b71a:	441a      	add	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b720:	697b      	ldr	r3, [r7, #20]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bdb0      	pop	{r4, r5, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	080116f4 	.word	0x080116f4
 800b730:	08011e58 	.word	0x08011e58
 800b734:	08011748 	.word	0x08011748

0800b738 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	4611      	mov	r1, r2
 800b744:	461a      	mov	r2, r3
 800b746:	460b      	mov	r3, r1
 800b748:	71fb      	strb	r3, [r7, #7]
 800b74a:	4613      	mov	r3, r2
 800b74c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <tcp_output_fill_options+0x2e>
 800b758:	4b13      	ldr	r3, [pc, #76]	; (800b7a8 <tcp_output_fill_options+0x70>)
 800b75a:	f240 7256 	movw	r2, #1878	; 0x756
 800b75e:	4913      	ldr	r1, [pc, #76]	; (800b7ac <tcp_output_fill_options+0x74>)
 800b760:	4813      	ldr	r0, [pc, #76]	; (800b7b0 <tcp_output_fill_options+0x78>)
 800b762:	f003 f927 	bl	800e9b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	3314      	adds	r3, #20
 800b770:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	f103 0214 	add.w	r2, r3, #20
 800b778:	8bfb      	ldrh	r3, [r7, #30]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4619      	mov	r1, r3
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	440b      	add	r3, r1
 800b788:	4413      	add	r3, r2
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d006      	beq.n	800b79e <tcp_output_fill_options+0x66>
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <tcp_output_fill_options+0x70>)
 800b792:	f240 7275 	movw	r2, #1909	; 0x775
 800b796:	4907      	ldr	r1, [pc, #28]	; (800b7b4 <tcp_output_fill_options+0x7c>)
 800b798:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <tcp_output_fill_options+0x78>)
 800b79a:	f003 f90b 	bl	800e9b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b79e:	bf00      	nop
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	080116f4 	.word	0x080116f4
 800b7ac:	08011e80 	.word	0x08011e80
 800b7b0:	08011748 	.word	0x08011748
 800b7b4:	08011d78 	.word	0x08011d78

0800b7b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08a      	sub	sp, #40	; 0x28
 800b7bc:	af04      	add	r7, sp, #16
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
 800b7c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d106      	bne.n	800b7da <tcp_output_control_segment+0x22>
 800b7cc:	4b1c      	ldr	r3, [pc, #112]	; (800b840 <tcp_output_control_segment+0x88>)
 800b7ce:	f240 7287 	movw	r2, #1927	; 0x787
 800b7d2:	491c      	ldr	r1, [pc, #112]	; (800b844 <tcp_output_control_segment+0x8c>)
 800b7d4:	481c      	ldr	r0, [pc, #112]	; (800b848 <tcp_output_control_segment+0x90>)
 800b7d6:	f003 f8ed 	bl	800e9b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7fe fa7c 	bl	8009cdc <tcp_route>
 800b7e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b7ec:	23fc      	movs	r3, #252	; 0xfc
 800b7ee:	75fb      	strb	r3, [r7, #23]
 800b7f0:	e01c      	b.n	800b82c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	7adb      	ldrb	r3, [r3, #11]
 800b7fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	7a9b      	ldrb	r3, [r3, #10]
 800b802:	757b      	strb	r3, [r7, #21]
 800b804:	e003      	b.n	800b80e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b806:	23ff      	movs	r3, #255	; 0xff
 800b808:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b80e:	7dba      	ldrb	r2, [r7, #22]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	9302      	str	r3, [sp, #8]
 800b814:	2306      	movs	r3, #6
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	7d7b      	ldrb	r3, [r7, #21]
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	4613      	mov	r3, r2
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	68b8      	ldr	r0, [r7, #8]
 800b824:	f001 ffa4 	bl	800d770 <ip4_output_if>
 800b828:	4603      	mov	r3, r0
 800b82a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b82c:	68b8      	ldr	r0, [r7, #8]
 800b82e:	f7f9 fe71 	bl	8005514 <pbuf_free>
  return err;
 800b832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	080116f4 	.word	0x080116f4
 800b844:	08011ea8 	.word	0x08011ea8
 800b848:	08011748 	.word	0x08011748

0800b84c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b08b      	sub	sp, #44	; 0x2c
 800b850:	af04      	add	r7, sp, #16
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <tcp_rst+0x22>
 800b860:	4b1f      	ldr	r3, [pc, #124]	; (800b8e0 <tcp_rst+0x94>)
 800b862:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b866:	491f      	ldr	r1, [pc, #124]	; (800b8e4 <tcp_rst+0x98>)
 800b868:	481f      	ldr	r0, [pc, #124]	; (800b8e8 <tcp_rst+0x9c>)
 800b86a:	f003 f8a3 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <tcp_rst+0x36>
 800b874:	4b1a      	ldr	r3, [pc, #104]	; (800b8e0 <tcp_rst+0x94>)
 800b876:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b87a:	491c      	ldr	r1, [pc, #112]	; (800b8ec <tcp_rst+0xa0>)
 800b87c:	481a      	ldr	r0, [pc, #104]	; (800b8e8 <tcp_rst+0x9c>)
 800b87e:	f003 f899 	bl	800e9b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b886:	f246 0308 	movw	r3, #24584	; 0x6008
 800b88a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	b29c      	uxth	r4, r3
 800b890:	68b8      	ldr	r0, [r7, #8]
 800b892:	f7f8 fb3c 	bl	8003f0e <lwip_htonl>
 800b896:	4602      	mov	r2, r0
 800b898:	8abb      	ldrh	r3, [r7, #20]
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	2314      	movs	r3, #20
 800b89e:	9302      	str	r3, [sp, #8]
 800b8a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff fe92 	bl	800b5d8 <tcp_output_alloc_header_common>
 800b8b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00c      	beq.n	800b8d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	6939      	ldr	r1, [r7, #16]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff ff38 	bl	800b738 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	6939      	ldr	r1, [r7, #16]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7ff ff72 	bl	800b7b8 <tcp_output_control_segment>
 800b8d4:	e000      	b.n	800b8d8 <tcp_rst+0x8c>
    return;
 800b8d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd90      	pop	{r4, r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	080116f4 	.word	0x080116f4
 800b8e4:	08011ed4 	.word	0x08011ed4
 800b8e8:	08011748 	.word	0x08011748
 800b8ec:	08011ef0 	.word	0x08011ef0

0800b8f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <tcp_send_empty_ack+0x24>
 800b906:	4b28      	ldr	r3, [pc, #160]	; (800b9a8 <tcp_send_empty_ack+0xb8>)
 800b908:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b90c:	4927      	ldr	r1, [pc, #156]	; (800b9ac <tcp_send_empty_ack+0xbc>)
 800b90e:	4828      	ldr	r0, [pc, #160]	; (800b9b0 <tcp_send_empty_ack+0xc0>)
 800b910:	f003 f850 	bl	800e9b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	f003 0304 	and.w	r3, r3, #4
 800b91e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b920:	7d7b      	ldrb	r3, [r7, #21]
 800b922:	b29c      	uxth	r4, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f8 faf0 	bl	8003f0e <lwip_htonl>
 800b92e:	4603      	mov	r3, r0
 800b930:	2200      	movs	r2, #0
 800b932:	4621      	mov	r1, r4
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff fec1 	bl	800b6bc <tcp_output_alloc_header>
 800b93a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	8b5b      	ldrh	r3, [r3, #26]
 800b946:	f043 0303 	orr.w	r3, r3, #3
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b950:	f06f 0301 	mvn.w	r3, #1
 800b954:	e023      	b.n	800b99e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b956:	7dbb      	ldrb	r3, [r7, #22]
 800b958:	7dfa      	ldrb	r2, [r7, #23]
 800b95a:	6939      	ldr	r1, [r7, #16]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff feeb 	bl	800b738 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3304      	adds	r3, #4
 800b968:	6939      	ldr	r1, [r7, #16]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff ff24 	bl	800b7b8 <tcp_output_control_segment>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d007      	beq.n	800b98c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8b5b      	ldrh	r3, [r3, #26]
 800b980:	f043 0303 	orr.w	r3, r3, #3
 800b984:	b29a      	uxth	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	835a      	strh	r2, [r3, #26]
 800b98a:	e006      	b.n	800b99a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	8b5b      	ldrh	r3, [r3, #26]
 800b990:	f023 0303 	bic.w	r3, r3, #3
 800b994:	b29a      	uxth	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd90      	pop	{r4, r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	080116f4 	.word	0x080116f4
 800b9ac:	08011f0c 	.word	0x08011f0c
 800b9b0:	08011748 	.word	0x08011748

0800b9b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b9bc:	2300      	movs	r3, #0
 800b9be:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <tcp_keepalive+0x20>
 800b9c6:	4b18      	ldr	r3, [pc, #96]	; (800ba28 <tcp_keepalive+0x74>)
 800b9c8:	f640 0224 	movw	r2, #2084	; 0x824
 800b9cc:	4917      	ldr	r1, [pc, #92]	; (800ba2c <tcp_keepalive+0x78>)
 800b9ce:	4818      	ldr	r0, [pc, #96]	; (800ba30 <tcp_keepalive+0x7c>)
 800b9d0:	f002 fff0 	bl	800e9b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b9d4:	7abb      	ldrb	r3, [r7, #10]
 800b9d6:	b29c      	uxth	r4, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f8 fa95 	bl	8003f0e <lwip_htonl>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff fe66 	bl	800b6bc <tcp_output_alloc_header>
 800b9f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	e010      	b.n	800ba20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9fe:	7abb      	ldrb	r3, [r7, #10]
 800ba00:	2200      	movs	r2, #0
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fe97 	bl	800b738 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	68f9      	ldr	r1, [r7, #12]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fed0 	bl	800b7b8 <tcp_output_control_segment>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ba1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd90      	pop	{r4, r7, pc}
 800ba28:	080116f4 	.word	0x080116f4
 800ba2c:	08011f2c 	.word	0x08011f2c
 800ba30:	08011748 	.word	0x08011748

0800ba34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ba34:	b590      	push	{r4, r7, lr}
 800ba36:	b08b      	sub	sp, #44	; 0x2c
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <tcp_zero_window_probe+0x20>
 800ba46:	4b4d      	ldr	r3, [pc, #308]	; (800bb7c <tcp_zero_window_probe+0x148>)
 800ba48:	f640 024f 	movw	r2, #2127	; 0x84f
 800ba4c:	494c      	ldr	r1, [pc, #304]	; (800bb80 <tcp_zero_window_probe+0x14c>)
 800ba4e:	484d      	ldr	r0, [pc, #308]	; (800bb84 <tcp_zero_window_probe+0x150>)
 800ba50:	f002 ffb0 	bl	800e9b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	e087      	b.n	800bb74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba6a:	2bff      	cmp	r3, #255	; 0xff
 800ba6c:	d007      	beq.n	800ba7e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba74:	3301      	adds	r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	899b      	ldrh	r3, [r3, #12]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f8 fa2c 	bl	8003ee4 <lwip_htons>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <tcp_zero_window_probe+0x70>
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	891b      	ldrh	r3, [r3, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <tcp_zero_window_probe+0x70>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e000      	b.n	800baa6 <tcp_zero_window_probe+0x72>
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800baaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800baae:	2b00      	cmp	r3, #0
 800bab0:	bf0c      	ite	eq
 800bab2:	2301      	moveq	r3, #1
 800bab4:	2300      	movne	r3, #0
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800baba:	7cfb      	ldrb	r3, [r7, #19]
 800babc:	b299      	uxth	r1, r3
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	8c3a      	ldrh	r2, [r7, #32]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fdf8 	bl	800b6bc <tcp_output_alloc_header>
 800bacc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bad4:	f04f 33ff 	mov.w	r3, #4294967295
 800bad8:	e04c      	b.n	800bb74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800bae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d011      	beq.n	800bb0c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	899b      	ldrh	r3, [r3, #12]
 800baec:	b29b      	uxth	r3, r3
 800baee:	b21b      	sxth	r3, r3
 800baf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800baf4:	b21c      	sxth	r4, r3
 800baf6:	2011      	movs	r0, #17
 800baf8:	f7f8 f9f4 	bl	8003ee4 <lwip_htons>
 800bafc:	4603      	mov	r3, r0
 800bafe:	b21b      	sxth	r3, r3
 800bb00:	4323      	orrs	r3, r4
 800bb02:	b21b      	sxth	r3, r3
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	819a      	strh	r2, [r3, #12]
 800bb0a:	e010      	b.n	800bb2e <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	3314      	adds	r3, #20
 800bb12:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	6858      	ldr	r0, [r3, #4]
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	891a      	ldrh	r2, [r3, #8]
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	891b      	ldrh	r3, [r3, #8]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	2201      	movs	r2, #1
 800bb28:	6979      	ldr	r1, [r7, #20]
 800bb2a:	f7f9 feed 	bl	8005908 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7f8 f9ea 	bl	8003f0e <lwip_htonl>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	da02      	bge.n	800bb52 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb52:	7cfb      	ldrb	r3, [r7, #19]
 800bb54:	2200      	movs	r2, #0
 800bb56:	69f9      	ldr	r1, [r7, #28]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff fded 	bl	800b738 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3304      	adds	r3, #4
 800bb64:	69f9      	ldr	r1, [r7, #28]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fe26 	bl	800b7b8 <tcp_output_control_segment>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	372c      	adds	r7, #44	; 0x2c
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd90      	pop	{r4, r7, pc}
 800bb7c:	080116f4 	.word	0x080116f4
 800bb80:	08011f48 	.word	0x08011f48
 800bb84:	08011748 	.word	0x08011748

0800bb88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bb90:	f7f9 ffa8 	bl	8005ae4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bb94:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <tcpip_tcp_timer+0x38>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d103      	bne.n	800bba4 <tcpip_tcp_timer+0x1c>
 800bb9c:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <tcpip_tcp_timer+0x3c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bba4:	2200      	movs	r2, #0
 800bba6:	4908      	ldr	r1, [pc, #32]	; (800bbc8 <tcpip_tcp_timer+0x40>)
 800bba8:	20fa      	movs	r0, #250	; 0xfa
 800bbaa:	f000 f8f3 	bl	800bd94 <sys_timeout>
 800bbae:	e003      	b.n	800bbb8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <tcpip_tcp_timer+0x44>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
  }
}
 800bbb6:	bf00      	nop
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20008954 	.word	0x20008954
 800bbc4:	20008958 	.word	0x20008958
 800bbc8:	0800bb89 	.word	0x0800bb89
 800bbcc:	200089a4 	.word	0x200089a4

0800bbd0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <tcp_timer_needed+0x30>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10f      	bne.n	800bbfc <tcp_timer_needed+0x2c>
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <tcp_timer_needed+0x34>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d103      	bne.n	800bbec <tcp_timer_needed+0x1c>
 800bbe4:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <tcp_timer_needed+0x38>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d007      	beq.n	800bbfc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bbec:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <tcp_timer_needed+0x30>)
 800bbee:	2201      	movs	r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4905      	ldr	r1, [pc, #20]	; (800bc0c <tcp_timer_needed+0x3c>)
 800bbf6:	20fa      	movs	r0, #250	; 0xfa
 800bbf8:	f000 f8cc 	bl	800bd94 <sys_timeout>
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200089a4 	.word	0x200089a4
 800bc04:	20008954 	.word	0x20008954
 800bc08:	20008958 	.word	0x20008958
 800bc0c:	0800bb89 	.word	0x0800bb89

0800bc10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bc1c:	2006      	movs	r0, #6
 800bc1e:	f7f8 fdb7 	bl	8004790 <memp_malloc>
 800bc22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d109      	bne.n	800bc3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d151      	bne.n	800bcd4 <sys_timeout_abs+0xc4>
 800bc30:	4b2a      	ldr	r3, [pc, #168]	; (800bcdc <sys_timeout_abs+0xcc>)
 800bc32:	22be      	movs	r2, #190	; 0xbe
 800bc34:	492a      	ldr	r1, [pc, #168]	; (800bce0 <sys_timeout_abs+0xd0>)
 800bc36:	482b      	ldr	r0, [pc, #172]	; (800bce4 <sys_timeout_abs+0xd4>)
 800bc38:	f002 febc 	bl	800e9b4 <iprintf>
    return;
 800bc3c:	e04a      	b.n	800bcd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bc56:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bc5e:	4a22      	ldr	r2, [pc, #136]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6013      	str	r3, [r2, #0]
    return;
 800bc64:	e037      	b.n	800bcd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	4b1f      	ldr	r3, [pc, #124]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	0fdb      	lsrs	r3, r3, #31
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bc7e:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bc86:	4a18      	ldr	r2, [pc, #96]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	e023      	b.n	800bcd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <sys_timeout_abs+0xd8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	617b      	str	r3, [r7, #20]
 800bc94:	e01a      	b.n	800bccc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00b      	beq.n	800bcb6 <sys_timeout_abs+0xa6>
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	0fdb      	lsrs	r3, r3, #31
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d007      	beq.n	800bcc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	601a      	str	r2, [r3, #0]
        break;
 800bcc4:	e007      	b.n	800bcd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e1      	bne.n	800bc96 <sys_timeout_abs+0x86>
 800bcd2:	e000      	b.n	800bcd6 <sys_timeout_abs+0xc6>
    return;
 800bcd4:	bf00      	nop
      }
    }
  }
}
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	08011f6c 	.word	0x08011f6c
 800bce0:	08011fa0 	.word	0x08011fa0
 800bce4:	08011fe0 	.word	0x08011fe0
 800bce8:	2000899c 	.word	0x2000899c

0800bcec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	4798      	blx	r3

  now = sys_now();
 800bcfe:	f7f8 f829 	bl	8003d54 <sys_now>
 800bd02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <lwip_cyclic_timer+0x5c>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	0fdb      	lsrs	r3, r3, #31
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d009      	beq.n	800bd36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	4413      	add	r3, r2
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	4907      	ldr	r1, [pc, #28]	; (800bd4c <lwip_cyclic_timer+0x60>)
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff ff6e 	bl	800bc10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bd34:	e004      	b.n	800bd40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4904      	ldr	r1, [pc, #16]	; (800bd4c <lwip_cyclic_timer+0x60>)
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff ff68 	bl	800bc10 <sys_timeout_abs>
}
 800bd40:	bf00      	nop
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	200089a0 	.word	0x200089a0
 800bd4c:	0800bced 	.word	0x0800bced

0800bd50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd56:	2301      	movs	r3, #1
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	e00e      	b.n	800bd7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd5c:	4a0b      	ldr	r2, [pc, #44]	; (800bd8c <sys_timeouts_init+0x3c>)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4a08      	ldr	r2, [pc, #32]	; (800bd8c <sys_timeouts_init+0x3c>)
 800bd6a:	4413      	add	r3, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4908      	ldr	r1, [pc, #32]	; (800bd90 <sys_timeouts_init+0x40>)
 800bd70:	f000 f810 	bl	800bd94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3301      	adds	r3, #1
 800bd78:	607b      	str	r3, [r7, #4]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d9ed      	bls.n	800bd5c <sys_timeouts_init+0xc>
  }
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	08012b68 	.word	0x08012b68
 800bd90:	0800bced 	.word	0x0800bced

0800bd94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda6:	d306      	bcc.n	800bdb6 <sys_timeout+0x22>
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <sys_timeout+0x40>)
 800bdaa:	f240 1229 	movw	r2, #297	; 0x129
 800bdae:	490a      	ldr	r1, [pc, #40]	; (800bdd8 <sys_timeout+0x44>)
 800bdb0:	480a      	ldr	r0, [pc, #40]	; (800bddc <sys_timeout+0x48>)
 800bdb2:	f002 fdff 	bl	800e9b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bdb6:	f7f7 ffcd 	bl	8003d54 <sys_now>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	6978      	ldr	r0, [r7, #20]
 800bdc8:	f7ff ff22 	bl	800bc10 <sys_timeout_abs>
#endif
}
 800bdcc:	bf00      	nop
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	08011f6c 	.word	0x08011f6c
 800bdd8:	08012008 	.word	0x08012008
 800bddc:	08011fe0 	.word	0x08011fe0

0800bde0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bde6:	f7f7 ffb5 	bl	8003d54 <sys_now>
 800bdea:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bdec:	4b1a      	ldr	r3, [pc, #104]	; (800be58 <sys_check_timeouts+0x78>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <sys_check_timeouts+0x1a>
 800bdf6:	f7f9 f853 	bl	8004ea0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bdfa:	4b18      	ldr	r3, [pc, #96]	; (800be5c <sys_check_timeouts+0x7c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d022      	beq.n	800be4c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	0fdb      	lsrs	r3, r3, #31
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d11a      	bne.n	800be50 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a0f      	ldr	r2, [pc, #60]	; (800be5c <sys_check_timeouts+0x7c>)
 800be20:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	4a0b      	ldr	r2, [pc, #44]	; (800be60 <sys_check_timeouts+0x80>)
 800be34:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	2006      	movs	r0, #6
 800be3a:	f7f8 fcf5 	bl	8004828 <memp_free>
    if (handler != NULL) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0d3      	beq.n	800bdec <sys_check_timeouts+0xc>
      handler(arg);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6838      	ldr	r0, [r7, #0]
 800be48:	4798      	blx	r3
  do {
 800be4a:	e7cf      	b.n	800bdec <sys_check_timeouts+0xc>
      return;
 800be4c:	bf00      	nop
 800be4e:	e000      	b.n	800be52 <sys_check_timeouts+0x72>
      return;
 800be50:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20008945 	.word	0x20008945
 800be5c:	2000899c 	.word	0x2000899c
 800be60:	200089a0 	.word	0x200089a0

0800be64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be68:	f002 fe32 	bl	800ead0 <rand>
 800be6c:	4603      	mov	r3, r0
 800be6e:	b29b      	uxth	r3, r3
 800be70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be74:	b29b      	uxth	r3, r3
 800be76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	4b01      	ldr	r3, [pc, #4]	; (800be84 <udp_init+0x20>)
 800be7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be80:	bf00      	nop
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20000010 	.word	0x20000010

0800be88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d105      	bne.n	800bea8 <udp_input_local_match+0x20>
 800be9c:	4b27      	ldr	r3, [pc, #156]	; (800bf3c <udp_input_local_match+0xb4>)
 800be9e:	2287      	movs	r2, #135	; 0x87
 800bea0:	4927      	ldr	r1, [pc, #156]	; (800bf40 <udp_input_local_match+0xb8>)
 800bea2:	4828      	ldr	r0, [pc, #160]	; (800bf44 <udp_input_local_match+0xbc>)
 800bea4:	f002 fd86 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <udp_input_local_match+0x32>
 800beae:	4b23      	ldr	r3, [pc, #140]	; (800bf3c <udp_input_local_match+0xb4>)
 800beb0:	2288      	movs	r2, #136	; 0x88
 800beb2:	4925      	ldr	r1, [pc, #148]	; (800bf48 <udp_input_local_match+0xc0>)
 800beb4:	4823      	ldr	r0, [pc, #140]	; (800bf44 <udp_input_local_match+0xbc>)
 800beb6:	f002 fd7d 	bl	800e9b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	7a1b      	ldrb	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00b      	beq.n	800beda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	7a1a      	ldrb	r2, [r3, #8]
 800bec6:	4b21      	ldr	r3, [pc, #132]	; (800bf4c <udp_input_local_match+0xc4>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bece:	3301      	adds	r3, #1
 800bed0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d001      	beq.n	800beda <udp_input_local_match+0x52>
    return 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	e02b      	b.n	800bf32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d018      	beq.n	800bf12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d013      	beq.n	800bf0e <udp_input_local_match+0x86>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00f      	beq.n	800bf0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800beee:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <udp_input_local_match+0xc4>)
 800bef0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef6:	d00a      	beq.n	800bf0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <udp_input_local_match+0xc4>)
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	405a      	eors	r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	3308      	adds	r3, #8
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d110      	bne.n	800bf30 <udp_input_local_match+0xa8>
          return 1;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e00f      	b.n	800bf32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d009      	beq.n	800bf2c <udp_input_local_match+0xa4>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <udp_input_local_match+0xa4>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	4b09      	ldr	r3, [pc, #36]	; (800bf4c <udp_input_local_match+0xc4>)
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d101      	bne.n	800bf30 <udp_input_local_match+0xa8>
        return 1;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	08012054 	.word	0x08012054
 800bf40:	08012084 	.word	0x08012084
 800bf44:	080120a8 	.word	0x080120a8
 800bf48:	080120d0 	.word	0x080120d0
 800bf4c:	200031d8 	.word	0x200031d8

0800bf50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b08d      	sub	sp, #52	; 0x34
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d105      	bne.n	800bf70 <udp_input+0x20>
 800bf64:	4b7c      	ldr	r3, [pc, #496]	; (800c158 <udp_input+0x208>)
 800bf66:	22cf      	movs	r2, #207	; 0xcf
 800bf68:	497c      	ldr	r1, [pc, #496]	; (800c15c <udp_input+0x20c>)
 800bf6a:	487d      	ldr	r0, [pc, #500]	; (800c160 <udp_input+0x210>)
 800bf6c:	f002 fd22 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d105      	bne.n	800bf82 <udp_input+0x32>
 800bf76:	4b78      	ldr	r3, [pc, #480]	; (800c158 <udp_input+0x208>)
 800bf78:	22d0      	movs	r2, #208	; 0xd0
 800bf7a:	497a      	ldr	r1, [pc, #488]	; (800c164 <udp_input+0x214>)
 800bf7c:	4878      	ldr	r0, [pc, #480]	; (800c160 <udp_input+0x210>)
 800bf7e:	f002 fd19 	bl	800e9b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	895b      	ldrh	r3, [r3, #10]
 800bf86:	2b07      	cmp	r3, #7
 800bf88:	d803      	bhi.n	800bf92 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7f9 fac2 	bl	8005514 <pbuf_free>
    goto end;
 800bf90:	e0de      	b.n	800c150 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf98:	4b73      	ldr	r3, [pc, #460]	; (800c168 <udp_input+0x218>)
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	4a72      	ldr	r2, [pc, #456]	; (800c168 <udp_input+0x218>)
 800bf9e:	6812      	ldr	r2, [r2, #0]
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 fcbc 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7f7 ff96 	bl	8003ee4 <lwip_htons>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	885b      	ldrh	r3, [r3, #2]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7f7 ff8e 	bl	8003ee4 <lwip_htons>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfd8:	4b64      	ldr	r3, [pc, #400]	; (800c16c <udp_input+0x21c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	e054      	b.n	800c08a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	8a5b      	ldrh	r3, [r3, #18]
 800bfe4:	89fa      	ldrh	r2, [r7, #14]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d14a      	bne.n	800c080 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bfea:	7cfb      	ldrb	r3, [r7, #19]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6a38      	ldr	r0, [r7, #32]
 800bff2:	f7ff ff49 	bl	800be88 <udp_input_local_match>
 800bff6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d041      	beq.n	800c080 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	7c1b      	ldrb	r3, [r3, #16]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d11d      	bne.n	800c044 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	61bb      	str	r3, [r7, #24]
 800c012:	e017      	b.n	800c044 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c014:	7cfb      	ldrb	r3, [r7, #19]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d014      	beq.n	800c044 <udp_input+0xf4>
 800c01a:	4b53      	ldr	r3, [pc, #332]	; (800c168 <udp_input+0x218>)
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c022:	d10f      	bne.n	800c044 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	3304      	adds	r3, #4
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d008      	beq.n	800c044 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	3304      	adds	r3, #4
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d101      	bne.n	800c044 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	8a9b      	ldrh	r3, [r3, #20]
 800c048:	8a3a      	ldrh	r2, [r7, #16]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d118      	bne.n	800c080 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c052:	2b00      	cmp	r3, #0
 800c054:	d005      	beq.n	800c062 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	4b43      	ldr	r3, [pc, #268]	; (800c168 <udp_input+0x218>)
 800c05c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c05e:	429a      	cmp	r2, r3
 800c060:	d10e      	bne.n	800c080 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d014      	beq.n	800c092 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	68da      	ldr	r2, [r3, #12]
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c070:	4b3e      	ldr	r3, [pc, #248]	; (800c16c <udp_input+0x21c>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c078:	4a3c      	ldr	r2, [pc, #240]	; (800c16c <udp_input+0x21c>)
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c07e:	e008      	b.n	800c092 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	623b      	str	r3, [r7, #32]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1a7      	bne.n	800bfe0 <udp_input+0x90>
 800c090:	e000      	b.n	800c094 <udp_input+0x144>
        break;
 800c092:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <udp_input+0x14e>
    pcb = uncon_pcb;
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <udp_input+0x15a>
    for_us = 1;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	77fb      	strb	r3, [r7, #31]
 800c0a8:	e00a      	b.n	800c0c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <udp_input+0x218>)
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	bf0c      	ite	eq
 800c0b8:	2301      	moveq	r3, #1
 800c0ba:	2300      	movne	r3, #0
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c0c0:	7ffb      	ldrb	r3, [r7, #31]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d041      	beq.n	800c14a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c0c6:	2108      	movs	r1, #8
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7f9 f99d 	bl	8005408 <pbuf_remove_header>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00a      	beq.n	800c0ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c0d4:	4b20      	ldr	r3, [pc, #128]	; (800c158 <udp_input+0x208>)
 800c0d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c0da:	4925      	ldr	r1, [pc, #148]	; (800c170 <udp_input+0x220>)
 800c0dc:	4820      	ldr	r0, [pc, #128]	; (800c160 <udp_input+0x210>)
 800c0de:	f002 fc69 	bl	800e9b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7f9 fa16 	bl	8005514 <pbuf_free>
      goto end;
 800c0e8:	e032      	b.n	800c150 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d012      	beq.n	800c116 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00a      	beq.n	800c10e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	699c      	ldr	r4, [r3, #24]
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	69d8      	ldr	r0, [r3, #28]
 800c100:	8a3b      	ldrh	r3, [r7, #16]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	4b1b      	ldr	r3, [pc, #108]	; (800c174 <udp_input+0x224>)
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6a39      	ldr	r1, [r7, #32]
 800c10a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c10c:	e021      	b.n	800c152 <udp_input+0x202>
        pbuf_free(p);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f9 fa00 	bl	8005514 <pbuf_free>
        goto end;
 800c114:	e01c      	b.n	800c150 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c116:	7cfb      	ldrb	r3, [r7, #19]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d112      	bne.n	800c142 <udp_input+0x1f2>
 800c11c:	4b12      	ldr	r3, [pc, #72]	; (800c168 <udp_input+0x218>)
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c124:	2be0      	cmp	r3, #224	; 0xe0
 800c126:	d00c      	beq.n	800c142 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c128:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <udp_input+0x218>)
 800c12a:	899b      	ldrh	r3, [r3, #12]
 800c12c:	3308      	adds	r3, #8
 800c12e:	b29b      	uxth	r3, r3
 800c130:	b21b      	sxth	r3, r3
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7f9 f9da 	bl	80054ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c13a:	2103      	movs	r1, #3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 f8cf 	bl	800d2e0 <icmp_dest_unreach>
      pbuf_free(p);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7f9 f9e6 	bl	8005514 <pbuf_free>
  return;
 800c148:	e003      	b.n	800c152 <udp_input+0x202>
    pbuf_free(p);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7f9 f9e2 	bl	8005514 <pbuf_free>
  return;
 800c150:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c152:	372c      	adds	r7, #44	; 0x2c
 800c154:	46bd      	mov	sp, r7
 800c156:	bd90      	pop	{r4, r7, pc}
 800c158:	08012054 	.word	0x08012054
 800c15c:	080120f8 	.word	0x080120f8
 800c160:	080120a8 	.word	0x080120a8
 800c164:	08012110 	.word	0x08012110
 800c168:	200031d8 	.word	0x200031d8
 800c16c:	200089a8 	.word	0x200089a8
 800c170:	0801212c 	.word	0x0801212c
 800c174:	200031e8 	.word	0x200031e8

0800c178 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01e      	beq.n	800c1c6 <udp_netif_ip_addr_changed+0x4e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01a      	beq.n	800c1c6 <udp_netif_ip_addr_changed+0x4e>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d017      	beq.n	800c1c6 <udp_netif_ip_addr_changed+0x4e>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d013      	beq.n	800c1c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c19e:	4b0d      	ldr	r3, [pc, #52]	; (800c1d4 <udp_netif_ip_addr_changed+0x5c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]
 800c1a4:	e00c      	b.n	800c1c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d103      	bne.n	800c1ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1ef      	bne.n	800c1a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c1c6:	bf00      	nop
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200089a8 	.word	0x200089a8

0800c1d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c1e0:	492b      	ldr	r1, [pc, #172]	; (800c290 <etharp_free_entry+0xb8>)
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	005b      	lsls	r3, r3, #1
 800c1e8:	4413      	add	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	440b      	add	r3, r1
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d013      	beq.n	800c21c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c1f4:	4926      	ldr	r1, [pc, #152]	; (800c290 <etharp_free_entry+0xb8>)
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	4413      	add	r3, r2
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	440b      	add	r3, r1
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f7f9 f985 	bl	8005514 <pbuf_free>
    arp_table[i].q = NULL;
 800c20a:	4921      	ldr	r1, [pc, #132]	; (800c290 <etharp_free_entry+0xb8>)
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4413      	add	r3, r2
 800c214:	00db      	lsls	r3, r3, #3
 800c216:	440b      	add	r3, r1
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c21c:	491c      	ldr	r1, [pc, #112]	; (800c290 <etharp_free_entry+0xb8>)
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	3314      	adds	r3, #20
 800c22c:	2200      	movs	r2, #0
 800c22e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800c230:	4917      	ldr	r1, [pc, #92]	; (800c290 <etharp_free_entry+0xb8>)
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4613      	mov	r3, r2
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	4413      	add	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	440b      	add	r3, r1
 800c23e:	3312      	adds	r3, #18
 800c240:	2200      	movs	r2, #0
 800c242:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800c244:	4912      	ldr	r1, [pc, #72]	; (800c290 <etharp_free_entry+0xb8>)
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	440b      	add	r3, r1
 800c252:	3308      	adds	r3, #8
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800c258:	490d      	ldr	r1, [pc, #52]	; (800c290 <etharp_free_entry+0xb8>)
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	440b      	add	r3, r1
 800c266:	3304      	adds	r3, #4
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800c26c:	4908      	ldr	r1, [pc, #32]	; (800c290 <etharp_free_entry+0xb8>)
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4613      	mov	r3, r2
 800c272:	005b      	lsls	r3, r3, #1
 800c274:	4413      	add	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	440b      	add	r3, r1
 800c27a:	3308      	adds	r3, #8
 800c27c:	4a05      	ldr	r2, [pc, #20]	; (800c294 <etharp_free_entry+0xbc>)
 800c27e:	3304      	adds	r3, #4
 800c280:	6810      	ldr	r0, [r2, #0]
 800c282:	6018      	str	r0, [r3, #0]
 800c284:	8892      	ldrh	r2, [r2, #4]
 800c286:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200089ac 	.word	0x200089ac
 800c294:	08012b8c 	.word	0x08012b8c

0800c298 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c29e:	2300      	movs	r3, #0
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	e096      	b.n	800c3d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c2a4:	494f      	ldr	r1, [pc, #316]	; (800c3e4 <etharp_tmr+0x14c>)
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	4413      	add	r3, r2
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	440b      	add	r3, r1
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8086 	beq.w	800c3cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c2c0:	4948      	ldr	r1, [pc, #288]	; (800c3e4 <etharp_tmr+0x14c>)
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	440b      	add	r3, r1
 800c2ce:	3312      	adds	r3, #18
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	b298      	uxth	r0, r3
 800c2d6:	4943      	ldr	r1, [pc, #268]	; (800c3e4 <etharp_tmr+0x14c>)
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3312      	adds	r3, #18
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c2ea:	493e      	ldr	r1, [pc, #248]	; (800c3e4 <etharp_tmr+0x14c>)
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	4413      	add	r3, r2
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	440b      	add	r3, r1
 800c2f8:	3312      	adds	r3, #18
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c300:	d215      	bcs.n	800c32e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c302:	4938      	ldr	r1, [pc, #224]	; (800c3e4 <etharp_tmr+0x14c>)
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3314      	adds	r3, #20
 800c312:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c314:	2b01      	cmp	r3, #1
 800c316:	d10e      	bne.n	800c336 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c318:	4932      	ldr	r1, [pc, #200]	; (800c3e4 <etharp_tmr+0x14c>)
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	4613      	mov	r3, r2
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	4413      	add	r3, r2
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	440b      	add	r3, r1
 800c326:	3312      	adds	r3, #18
 800c328:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d903      	bls.n	800c336 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7ff ff52 	bl	800c1d8 <etharp_free_entry>
 800c334:	e04a      	b.n	800c3cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c336:	492b      	ldr	r1, [pc, #172]	; (800c3e4 <etharp_tmr+0x14c>)
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	4613      	mov	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4413      	add	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	440b      	add	r3, r1
 800c344:	3314      	adds	r3, #20
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b03      	cmp	r3, #3
 800c34a:	d10a      	bne.n	800c362 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c34c:	4925      	ldr	r1, [pc, #148]	; (800c3e4 <etharp_tmr+0x14c>)
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	4613      	mov	r3, r2
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	4413      	add	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	3314      	adds	r3, #20
 800c35c:	2204      	movs	r2, #4
 800c35e:	701a      	strb	r2, [r3, #0]
 800c360:	e034      	b.n	800c3cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c362:	4920      	ldr	r1, [pc, #128]	; (800c3e4 <etharp_tmr+0x14c>)
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	3314      	adds	r3, #20
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b04      	cmp	r3, #4
 800c376:	d10a      	bne.n	800c38e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c378:	491a      	ldr	r1, [pc, #104]	; (800c3e4 <etharp_tmr+0x14c>)
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4613      	mov	r3, r2
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	4413      	add	r3, r2
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	440b      	add	r3, r1
 800c386:	3314      	adds	r3, #20
 800c388:	2202      	movs	r2, #2
 800c38a:	701a      	strb	r2, [r3, #0]
 800c38c:	e01e      	b.n	800c3cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c38e:	4915      	ldr	r1, [pc, #84]	; (800c3e4 <etharp_tmr+0x14c>)
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	4613      	mov	r3, r2
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	4413      	add	r3, r2
 800c398:	00db      	lsls	r3, r3, #3
 800c39a:	440b      	add	r3, r1
 800c39c:	3314      	adds	r3, #20
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d113      	bne.n	800c3cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c3a4:	490f      	ldr	r1, [pc, #60]	; (800c3e4 <etharp_tmr+0x14c>)
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	4413      	add	r3, r2
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	440b      	add	r3, r1
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	4413      	add	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	4a08      	ldr	r2, [pc, #32]	; (800c3e4 <etharp_tmr+0x14c>)
 800c3c2:	4413      	add	r3, r2
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	f000 fe6e 	bl	800d0a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b09      	cmp	r3, #9
 800c3d6:	f77f af65 	ble.w	800c2a4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	200089ac 	.word	0x200089ac

0800c3e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	; 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c3f6:	230a      	movs	r3, #10
 800c3f8:	843b      	strh	r3, [r7, #32]
 800c3fa:	230a      	movs	r3, #10
 800c3fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800c3fe:	230a      	movs	r3, #10
 800c400:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c406:	230a      	movs	r3, #10
 800c408:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	83bb      	strh	r3, [r7, #28]
 800c40e:	2300      	movs	r3, #0
 800c410:	837b      	strh	r3, [r7, #26]
 800c412:	2300      	movs	r3, #0
 800c414:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c416:	2300      	movs	r3, #0
 800c418:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c41a:	e0ae      	b.n	800c57a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c41c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c420:	49a6      	ldr	r1, [pc, #664]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	3314      	adds	r3, #20
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c432:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c436:	2b0a      	cmp	r3, #10
 800c438:	d105      	bne.n	800c446 <etharp_find_entry+0x5e>
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c442:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c444:	e095      	b.n	800c572 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 8092 	beq.w	800c572 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d009      	beq.n	800c468 <etharp_find_entry+0x80>
 800c454:	7dfb      	ldrb	r3, [r7, #23]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d806      	bhi.n	800c468 <etharp_find_entry+0x80>
 800c45a:	4b99      	ldr	r3, [pc, #612]	; (800c6c0 <etharp_find_entry+0x2d8>)
 800c45c:	f240 1223 	movw	r2, #291	; 0x123
 800c460:	4998      	ldr	r1, [pc, #608]	; (800c6c4 <etharp_find_entry+0x2dc>)
 800c462:	4899      	ldr	r0, [pc, #612]	; (800c6c8 <etharp_find_entry+0x2e0>)
 800c464:	f002 faa6 	bl	800e9b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d020      	beq.n	800c4b0 <etharp_find_entry+0xc8>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6819      	ldr	r1, [r3, #0]
 800c472:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c476:	4891      	ldr	r0, [pc, #580]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	4403      	add	r3, r0
 800c482:	3304      	adds	r3, #4
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4299      	cmp	r1, r3
 800c488:	d112      	bne.n	800c4b0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00c      	beq.n	800c4aa <etharp_find_entry+0xc2>
 800c490:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c494:	4989      	ldr	r1, [pc, #548]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c496:	4613      	mov	r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	440b      	add	r3, r1
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d102      	bne.n	800c4b0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c4aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c4ae:	e100      	b.n	800c6b2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d140      	bne.n	800c538 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c4b6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c4ba:	4980      	ldr	r1, [pc, #512]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c4bc:	4613      	mov	r3, r2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	4413      	add	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	440b      	add	r3, r1
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01a      	beq.n	800c502 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c4cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c4d0:	497a      	ldr	r1, [pc, #488]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	4413      	add	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	440b      	add	r3, r1
 800c4dc:	3312      	adds	r3, #18
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	8bba      	ldrh	r2, [r7, #28]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d845      	bhi.n	800c572 <etharp_find_entry+0x18a>
            old_queue = i;
 800c4e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4e8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c4ea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c4ee:	4973      	ldr	r1, [pc, #460]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	4413      	add	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	440b      	add	r3, r1
 800c4fa:	3312      	adds	r3, #18
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	83bb      	strh	r3, [r7, #28]
 800c500:	e037      	b.n	800c572 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c502:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c506:	496d      	ldr	r1, [pc, #436]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c508:	4613      	mov	r3, r2
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	440b      	add	r3, r1
 800c512:	3312      	adds	r3, #18
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	8b7a      	ldrh	r2, [r7, #26]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d82a      	bhi.n	800c572 <etharp_find_entry+0x18a>
            old_pending = i;
 800c51c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c51e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800c520:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c524:	4965      	ldr	r1, [pc, #404]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c526:	4613      	mov	r3, r2
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4413      	add	r3, r2
 800c52c:	00db      	lsls	r3, r3, #3
 800c52e:	440b      	add	r3, r1
 800c530:	3312      	adds	r3, #18
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	837b      	strh	r3, [r7, #26]
 800c536:	e01c      	b.n	800c572 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d919      	bls.n	800c572 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c53e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c542:	495e      	ldr	r1, [pc, #376]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c544:	4613      	mov	r3, r2
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	4413      	add	r3, r2
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	440b      	add	r3, r1
 800c54e:	3312      	adds	r3, #18
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	8b3a      	ldrh	r2, [r7, #24]
 800c554:	429a      	cmp	r2, r3
 800c556:	d80c      	bhi.n	800c572 <etharp_find_entry+0x18a>
            old_stable = i;
 800c558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c55a:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 800c55c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c560:	4956      	ldr	r1, [pc, #344]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	440b      	add	r3, r1
 800c56c:	3312      	adds	r3, #18
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c574:	3301      	adds	r3, #1
 800c576:	b29b      	uxth	r3, r3
 800c578:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c57a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c57e:	2b09      	cmp	r3, #9
 800c580:	f77f af4c 	ble.w	800c41c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c584:	7afb      	ldrb	r3, [r7, #11]
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d108      	bne.n	800c5a0 <etharp_find_entry+0x1b8>
 800c58e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c592:	2b0a      	cmp	r3, #10
 800c594:	d107      	bne.n	800c5a6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a4:	e085      	b.n	800c6b2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c5a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	dc02      	bgt.n	800c5b4 <etharp_find_entry+0x1cc>
    i = empty;
 800c5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c5b2:	e039      	b.n	800c628 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c5b4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5b8:	2b09      	cmp	r3, #9
 800c5ba:	dc14      	bgt.n	800c5e6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c5bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5be:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c5c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c5c4:	493d      	ldr	r1, [pc, #244]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	440b      	add	r3, r1
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d018      	beq.n	800c608 <etharp_find_entry+0x220>
 800c5d6:	4b3a      	ldr	r3, [pc, #232]	; (800c6c0 <etharp_find_entry+0x2d8>)
 800c5d8:	f240 126d 	movw	r2, #365	; 0x16d
 800c5dc:	493b      	ldr	r1, [pc, #236]	; (800c6cc <etharp_find_entry+0x2e4>)
 800c5de:	483a      	ldr	r0, [pc, #232]	; (800c6c8 <etharp_find_entry+0x2e0>)
 800c5e0:	f002 f9e8 	bl	800e9b4 <iprintf>
 800c5e4:	e010      	b.n	800c608 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c5e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5ea:	2b09      	cmp	r3, #9
 800c5ec:	dc02      	bgt.n	800c5f4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c5ee:	8c3b      	ldrh	r3, [r7, #32]
 800c5f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c5f2:	e009      	b.n	800c608 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c5f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c5f8:	2b09      	cmp	r3, #9
 800c5fa:	dc02      	bgt.n	800c602 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c5fc:	8bfb      	ldrh	r3, [r7, #30]
 800c5fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c600:	e002      	b.n	800c608 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c602:	f04f 33ff 	mov.w	r3, #4294967295
 800c606:	e054      	b.n	800c6b2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c608:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c60c:	2b09      	cmp	r3, #9
 800c60e:	dd06      	ble.n	800c61e <etharp_find_entry+0x236>
 800c610:	4b2b      	ldr	r3, [pc, #172]	; (800c6c0 <etharp_find_entry+0x2d8>)
 800c612:	f240 127f 	movw	r2, #383	; 0x17f
 800c616:	492e      	ldr	r1, [pc, #184]	; (800c6d0 <etharp_find_entry+0x2e8>)
 800c618:	482b      	ldr	r0, [pc, #172]	; (800c6c8 <etharp_find_entry+0x2e0>)
 800c61a:	f002 f9cb 	bl	800e9b4 <iprintf>
    etharp_free_entry(i);
 800c61e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff fdd8 	bl	800c1d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c628:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c62c:	2b09      	cmp	r3, #9
 800c62e:	dd06      	ble.n	800c63e <etharp_find_entry+0x256>
 800c630:	4b23      	ldr	r3, [pc, #140]	; (800c6c0 <etharp_find_entry+0x2d8>)
 800c632:	f240 1283 	movw	r2, #387	; 0x183
 800c636:	4926      	ldr	r1, [pc, #152]	; (800c6d0 <etharp_find_entry+0x2e8>)
 800c638:	4823      	ldr	r0, [pc, #140]	; (800c6c8 <etharp_find_entry+0x2e0>)
 800c63a:	f002 f9bb 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c63e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c642:	491e      	ldr	r1, [pc, #120]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c644:	4613      	mov	r3, r2
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	4413      	add	r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	440b      	add	r3, r1
 800c64e:	3314      	adds	r3, #20
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d006      	beq.n	800c664 <etharp_find_entry+0x27c>
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <etharp_find_entry+0x2d8>)
 800c658:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c65c:	491d      	ldr	r1, [pc, #116]	; (800c6d4 <etharp_find_entry+0x2ec>)
 800c65e:	481a      	ldr	r0, [pc, #104]	; (800c6c8 <etharp_find_entry+0x2e0>)
 800c660:	f002 f9a8 	bl	800e9b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00b      	beq.n	800c682 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c66a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6819      	ldr	r1, [r3, #0]
 800c672:	4812      	ldr	r0, [pc, #72]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c674:	4613      	mov	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	4413      	add	r3, r2
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	4403      	add	r3, r0
 800c67e:	3304      	adds	r3, #4
 800c680:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c682:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c686:	490d      	ldr	r1, [pc, #52]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c688:	4613      	mov	r3, r2
 800c68a:	005b      	lsls	r3, r3, #1
 800c68c:	4413      	add	r3, r2
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	440b      	add	r3, r1
 800c692:	3312      	adds	r3, #18
 800c694:	2200      	movs	r2, #0
 800c696:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c698:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c69c:	4907      	ldr	r1, [pc, #28]	; (800c6bc <etharp_find_entry+0x2d4>)
 800c69e:	4613      	mov	r3, r2
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3308      	adds	r3, #8
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c6ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3728      	adds	r7, #40	; 0x28
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	200089ac 	.word	0x200089ac
 800c6c0:	080123b8 	.word	0x080123b8
 800c6c4:	080123f0 	.word	0x080123f0
 800c6c8:	08012430 	.word	0x08012430
 800c6cc:	08012458 	.word	0x08012458
 800c6d0:	08012470 	.word	0x08012470
 800c6d4:	08012484 	.word	0x08012484

0800c6d8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6ec:	2b06      	cmp	r3, #6
 800c6ee:	d006      	beq.n	800c6fe <etharp_update_arp_entry+0x26>
 800c6f0:	4b48      	ldr	r3, [pc, #288]	; (800c814 <etharp_update_arp_entry+0x13c>)
 800c6f2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c6f6:	4948      	ldr	r1, [pc, #288]	; (800c818 <etharp_update_arp_entry+0x140>)
 800c6f8:	4848      	ldr	r0, [pc, #288]	; (800c81c <etharp_update_arp_entry+0x144>)
 800c6fa:	f002 f95b 	bl	800e9b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d012      	beq.n	800c72a <etharp_update_arp_entry+0x52>
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00e      	beq.n	800c72a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68f9      	ldr	r1, [r7, #12]
 800c712:	4618      	mov	r0, r3
 800c714:	f001 f904 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800c718:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d105      	bne.n	800c72a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c726:	2be0      	cmp	r3, #224	; 0xe0
 800c728:	d102      	bne.n	800c730 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c72a:	f06f 030f 	mvn.w	r3, #15
 800c72e:	e06c      	b.n	800c80a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	4619      	mov	r1, r3
 800c736:	68b8      	ldr	r0, [r7, #8]
 800c738:	f7ff fe56 	bl	800c3e8 <etharp_find_entry>
 800c73c:	4603      	mov	r3, r0
 800c73e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c740:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c744:	2b00      	cmp	r3, #0
 800c746:	da02      	bge.n	800c74e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c748:	8afb      	ldrh	r3, [r7, #22]
 800c74a:	b25b      	sxtb	r3, r3
 800c74c:	e05d      	b.n	800c80a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c74e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c752:	4933      	ldr	r1, [pc, #204]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	440b      	add	r3, r1
 800c75e:	3314      	adds	r3, #20
 800c760:	2202      	movs	r2, #2
 800c762:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c764:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c768:	492d      	ldr	r1, [pc, #180]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c76a:	4613      	mov	r3, r2
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	4413      	add	r3, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	440b      	add	r3, r1
 800c774:	3308      	adds	r3, #8
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c77a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	3308      	adds	r3, #8
 800c788:	4a25      	ldr	r2, [pc, #148]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c78a:	4413      	add	r3, r2
 800c78c:	3304      	adds	r3, #4
 800c78e:	2206      	movs	r2, #6
 800c790:	6879      	ldr	r1, [r7, #4]
 800c792:	4618      	mov	r0, r3
 800c794:	f002 f8de 	bl	800e954 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c798:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c79c:	4920      	ldr	r1, [pc, #128]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3312      	adds	r3, #18
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c7ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7b2:	491b      	ldr	r1, [pc, #108]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	440b      	add	r3, r1
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d021      	beq.n	800c808 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c7c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7c8:	4915      	ldr	r1, [pc, #84]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	440b      	add	r3, r1
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c7d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7dc:	4910      	ldr	r1, [pc, #64]	; (800c820 <etharp_update_arp_entry+0x148>)
 800c7de:	4613      	mov	r3, r2
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	4413      	add	r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	440b      	add	r3, r1
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c7f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6939      	ldr	r1, [r7, #16]
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f002 f82d 	bl	800e85c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c802:	6938      	ldr	r0, [r7, #16]
 800c804:	f7f8 fe86 	bl	8005514 <pbuf_free>
  }
  return ERR_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	080123b8 	.word	0x080123b8
 800c818:	080124b0 	.word	0x080124b0
 800c81c:	08012430 	.word	0x08012430
 800c820:	200089ac 	.word	0x200089ac

0800c824 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e01e      	b.n	800c870 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c832:	4913      	ldr	r1, [pc, #76]	; (800c880 <etharp_cleanup_netif+0x5c>)
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4613      	mov	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3314      	adds	r3, #20
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c846:	7afb      	ldrb	r3, [r7, #11]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <etharp_cleanup_netif+0x46>
 800c84c:	490c      	ldr	r1, [pc, #48]	; (800c880 <etharp_cleanup_netif+0x5c>)
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	4613      	mov	r3, r2
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	4413      	add	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	440b      	add	r3, r1
 800c85a:	3308      	adds	r3, #8
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	429a      	cmp	r2, r3
 800c862:	d102      	bne.n	800c86a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7ff fcb7 	bl	800c1d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b09      	cmp	r3, #9
 800c874:	dddd      	ble.n	800c832 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c876:	bf00      	nop
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	200089ac 	.word	0x200089ac

0800c884 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c884:	b5b0      	push	{r4, r5, r7, lr}
 800c886:	b08a      	sub	sp, #40	; 0x28
 800c888:	af04      	add	r7, sp, #16
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d107      	bne.n	800c8a4 <etharp_input+0x20>
 800c894:	4b3d      	ldr	r3, [pc, #244]	; (800c98c <etharp_input+0x108>)
 800c896:	f240 228a 	movw	r2, #650	; 0x28a
 800c89a:	493d      	ldr	r1, [pc, #244]	; (800c990 <etharp_input+0x10c>)
 800c89c:	483d      	ldr	r0, [pc, #244]	; (800c994 <etharp_input+0x110>)
 800c89e:	f002 f889 	bl	800e9b4 <iprintf>
 800c8a2:	e06f      	b.n	800c984 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b4:	d10c      	bne.n	800c8d0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c8ba:	2b06      	cmp	r3, #6
 800c8bc:	d108      	bne.n	800c8d0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d104      	bne.n	800c8d0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	885b      	ldrh	r3, [r3, #2]
 800c8ca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c8cc:	2b08      	cmp	r3, #8
 800c8ce:	d003      	beq.n	800c8d8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7f8 fe1f 	bl	8005514 <pbuf_free>
    return;
 800c8d6:	e055      	b.n	800c984 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	330e      	adds	r3, #14
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	3318      	adds	r3, #24
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d102      	bne.n	800c8f8 <etharp_input+0x74>
    for_us = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	74fb      	strb	r3, [r7, #19]
 800c8f6:	e009      	b.n	800c90c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	bf0c      	ite	eq
 800c904:	2301      	moveq	r3, #1
 800c906:	2300      	movne	r3, #0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f103 0208 	add.w	r2, r3, #8
 800c912:	7cfb      	ldrb	r3, [r7, #19]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <etharp_input+0x98>
 800c918:	2301      	movs	r3, #1
 800c91a:	e000      	b.n	800c91e <etharp_input+0x9a>
 800c91c:	2302      	movs	r3, #2
 800c91e:	f107 010c 	add.w	r1, r7, #12
 800c922:	6838      	ldr	r0, [r7, #0]
 800c924:	f7ff fed8 	bl	800c6d8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	88db      	ldrh	r3, [r3, #6]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c932:	d003      	beq.n	800c93c <etharp_input+0xb8>
 800c934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c938:	d01e      	beq.n	800c978 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c93a:	e020      	b.n	800c97e <etharp_input+0xfa>
      if (for_us) {
 800c93c:	7cfb      	ldrb	r3, [r7, #19]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d01c      	beq.n	800c97c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c95c:	2102      	movs	r1, #2
 800c95e:	9103      	str	r1, [sp, #12]
 800c960:	f107 010c 	add.w	r1, r7, #12
 800c964:	9102      	str	r1, [sp, #8]
 800c966:	9201      	str	r2, [sp, #4]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462b      	mov	r3, r5
 800c96c:	4622      	mov	r2, r4
 800c96e:	4601      	mov	r1, r0
 800c970:	6838      	ldr	r0, [r7, #0]
 800c972:	f000 faeb 	bl	800cf4c <etharp_raw>
      break;
 800c976:	e001      	b.n	800c97c <etharp_input+0xf8>
      break;
 800c978:	bf00      	nop
 800c97a:	e000      	b.n	800c97e <etharp_input+0xfa>
      break;
 800c97c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7f8 fdc8 	bl	8005514 <pbuf_free>
}
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bdb0      	pop	{r4, r5, r7, pc}
 800c98a:	bf00      	nop
 800c98c:	080123b8 	.word	0x080123b8
 800c990:	08012508 	.word	0x08012508
 800c994:	08012430 	.word	0x08012430

0800c998 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c9a6:	79fa      	ldrb	r2, [r7, #7]
 800c9a8:	4944      	ldr	r1, [pc, #272]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3314      	adds	r3, #20
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d806      	bhi.n	800c9ca <etharp_output_to_arp_index+0x32>
 800c9bc:	4b40      	ldr	r3, [pc, #256]	; (800cac0 <etharp_output_to_arp_index+0x128>)
 800c9be:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c9c2:	4940      	ldr	r1, [pc, #256]	; (800cac4 <etharp_output_to_arp_index+0x12c>)
 800c9c4:	4840      	ldr	r0, [pc, #256]	; (800cac8 <etharp_output_to_arp_index+0x130>)
 800c9c6:	f001 fff5 	bl	800e9b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c9ca:	79fa      	ldrb	r2, [r7, #7]
 800c9cc:	493b      	ldr	r1, [pc, #236]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3314      	adds	r3, #20
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d153      	bne.n	800ca88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c9e0:	79fa      	ldrb	r2, [r7, #7]
 800c9e2:	4936      	ldr	r1, [pc, #216]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	440b      	add	r3, r1
 800c9ee:	3312      	adds	r3, #18
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c9f6:	d919      	bls.n	800ca2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4413      	add	r3, r2
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	4a2e      	ldr	r2, [pc, #184]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca04:	4413      	add	r3, r2
 800ca06:	3304      	adds	r3, #4
 800ca08:	4619      	mov	r1, r3
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 fb4c 	bl	800d0a8 <etharp_request>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d138      	bne.n	800ca88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca16:	79fa      	ldrb	r2, [r7, #7]
 800ca18:	4928      	ldr	r1, [pc, #160]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	4413      	add	r3, r2
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	440b      	add	r3, r1
 800ca24:	3314      	adds	r3, #20
 800ca26:	2203      	movs	r2, #3
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	e02d      	b.n	800ca88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ca2c:	79fa      	ldrb	r2, [r7, #7]
 800ca2e:	4923      	ldr	r1, [pc, #140]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	3312      	adds	r3, #18
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ca42:	d321      	bcc.n	800ca88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ca44:	79fa      	ldrb	r2, [r7, #7]
 800ca46:	4613      	mov	r3, r2
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	4413      	add	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	4a1b      	ldr	r2, [pc, #108]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca50:	4413      	add	r3, r2
 800ca52:	1d19      	adds	r1, r3, #4
 800ca54:	79fa      	ldrb	r2, [r7, #7]
 800ca56:	4613      	mov	r3, r2
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	4413      	add	r3, r2
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	3308      	adds	r3, #8
 800ca60:	4a16      	ldr	r2, [pc, #88]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca62:	4413      	add	r3, r2
 800ca64:	3304      	adds	r3, #4
 800ca66:	461a      	mov	r2, r3
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f000 fafb 	bl	800d064 <etharp_request_dst>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d109      	bne.n	800ca88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ca74:	79fa      	ldrb	r2, [r7, #7]
 800ca76:	4911      	ldr	r1, [pc, #68]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	3314      	adds	r3, #20
 800ca84:	2203      	movs	r2, #3
 800ca86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ca8e:	79fa      	ldrb	r2, [r7, #7]
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	3308      	adds	r3, #8
 800ca9a:	4a08      	ldr	r2, [pc, #32]	; (800cabc <etharp_output_to_arp_index+0x124>)
 800ca9c:	4413      	add	r3, r2
 800ca9e:	3304      	adds	r3, #4
 800caa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800caa4:	9200      	str	r2, [sp, #0]
 800caa6:	460a      	mov	r2, r1
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f001 fed6 	bl	800e85c <ethernet_output>
 800cab0:	4603      	mov	r3, r0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	200089ac 	.word	0x200089ac
 800cac0:	080123b8 	.word	0x080123b8
 800cac4:	08012528 	.word	0x08012528
 800cac8:	08012430 	.word	0x08012430

0800cacc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b08a      	sub	sp, #40	; 0x28
 800cad0:	af02      	add	r7, sp, #8
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <etharp_output+0x24>
 800cae2:	4b73      	ldr	r3, [pc, #460]	; (800ccb0 <etharp_output+0x1e4>)
 800cae4:	f240 321e 	movw	r2, #798	; 0x31e
 800cae8:	4972      	ldr	r1, [pc, #456]	; (800ccb4 <etharp_output+0x1e8>)
 800caea:	4873      	ldr	r0, [pc, #460]	; (800ccb8 <etharp_output+0x1ec>)
 800caec:	f001 ff62 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d106      	bne.n	800cb04 <etharp_output+0x38>
 800caf6:	4b6e      	ldr	r3, [pc, #440]	; (800ccb0 <etharp_output+0x1e4>)
 800caf8:	f240 321f 	movw	r2, #799	; 0x31f
 800cafc:	496f      	ldr	r1, [pc, #444]	; (800ccbc <etharp_output+0x1f0>)
 800cafe:	486e      	ldr	r0, [pc, #440]	; (800ccb8 <etharp_output+0x1ec>)
 800cb00:	f001 ff58 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <etharp_output+0x4c>
 800cb0a:	4b69      	ldr	r3, [pc, #420]	; (800ccb0 <etharp_output+0x1e4>)
 800cb0c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cb10:	496b      	ldr	r1, [pc, #428]	; (800ccc0 <etharp_output+0x1f4>)
 800cb12:	4869      	ldr	r0, [pc, #420]	; (800ccb8 <etharp_output+0x1ec>)
 800cb14:	f001 ff4e 	bl	800e9b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68f9      	ldr	r1, [r7, #12]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fefe 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d002      	beq.n	800cb30 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cb2a:	4b66      	ldr	r3, [pc, #408]	; (800ccc4 <etharp_output+0x1f8>)
 800cb2c:	61fb      	str	r3, [r7, #28]
 800cb2e:	e0af      	b.n	800cc90 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb38:	2be0      	cmp	r3, #224	; 0xe0
 800cb3a:	d118      	bne.n	800cb6e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cb40:	2300      	movs	r3, #0
 800cb42:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cb44:	235e      	movs	r3, #94	; 0x5e
 800cb46:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3302      	adds	r3, #2
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3303      	adds	r3, #3
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cb66:	f107 0310 	add.w	r3, r7, #16
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	e090      	b.n	800cc90 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3304      	adds	r3, #4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	405a      	eors	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4013      	ands	r3, r2
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d012      	beq.n	800cbac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cb8c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d00b      	beq.n	800cbac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	330c      	adds	r3, #12
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	330c      	adds	r3, #12
 800cba2:	61bb      	str	r3, [r7, #24]
 800cba4:	e002      	b.n	800cbac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cba6:	f06f 0303 	mvn.w	r3, #3
 800cbaa:	e07d      	b.n	800cca8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cbac:	4b46      	ldr	r3, [pc, #280]	; (800ccc8 <etharp_output+0x1fc>)
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4a46      	ldr	r2, [pc, #280]	; (800cccc <etharp_output+0x200>)
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	440b      	add	r3, r1
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3314      	adds	r3, #20
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d925      	bls.n	800cc12 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cbc6:	4b40      	ldr	r3, [pc, #256]	; (800ccc8 <etharp_output+0x1fc>)
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4a3f      	ldr	r2, [pc, #252]	; (800cccc <etharp_output+0x200>)
 800cbce:	460b      	mov	r3, r1
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	440b      	add	r3, r1
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3308      	adds	r3, #8
 800cbda:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d117      	bne.n	800cc12 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	4b38      	ldr	r3, [pc, #224]	; (800ccc8 <etharp_output+0x1fc>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	4937      	ldr	r1, [pc, #220]	; (800cccc <etharp_output+0x200>)
 800cbee:	4603      	mov	r3, r0
 800cbf0:	005b      	lsls	r3, r3, #1
 800cbf2:	4403      	add	r3, r0
 800cbf4:	00db      	lsls	r3, r3, #3
 800cbf6:	440b      	add	r3, r1
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d108      	bne.n	800cc12 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cc00:	4b31      	ldr	r3, [pc, #196]	; (800ccc8 <etharp_output+0x1fc>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f7ff fec5 	bl	800c998 <etharp_output_to_arp_index>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	e04a      	b.n	800cca8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]
 800cc16:	e031      	b.n	800cc7c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc18:	7dfa      	ldrb	r2, [r7, #23]
 800cc1a:	492c      	ldr	r1, [pc, #176]	; (800cccc <etharp_output+0x200>)
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4413      	add	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	440b      	add	r3, r1
 800cc26:	3314      	adds	r3, #20
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d923      	bls.n	800cc76 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cc2e:	7dfa      	ldrb	r2, [r7, #23]
 800cc30:	4926      	ldr	r1, [pc, #152]	; (800cccc <etharp_output+0x200>)
 800cc32:	4613      	mov	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4413      	add	r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d117      	bne.n	800cc76 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	6819      	ldr	r1, [r3, #0]
 800cc4a:	7dfa      	ldrb	r2, [r7, #23]
 800cc4c:	481f      	ldr	r0, [pc, #124]	; (800cccc <etharp_output+0x200>)
 800cc4e:	4613      	mov	r3, r2
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	4413      	add	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	4403      	add	r3, r0
 800cc58:	3304      	adds	r3, #4
 800cc5a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cc5c:	4299      	cmp	r1, r3
 800cc5e:	d10a      	bne.n	800cc76 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cc60:	4a19      	ldr	r2, [pc, #100]	; (800ccc8 <etharp_output+0x1fc>)
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	68b9      	ldr	r1, [r7, #8]
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fe93 	bl	800c998 <etharp_output_to_arp_index>
 800cc72:	4603      	mov	r3, r0
 800cc74:	e018      	b.n	800cca8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
 800cc7e:	2b09      	cmp	r3, #9
 800cc80:	d9ca      	bls.n	800cc18 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	69b9      	ldr	r1, [r7, #24]
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f000 f822 	bl	800ccd0 <etharp_query>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	e00b      	b.n	800cca8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cc96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	68b9      	ldr	r1, [r7, #8]
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f001 fddb 	bl	800e85c <ethernet_output>
 800cca6:	4603      	mov	r3, r0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	080123b8 	.word	0x080123b8
 800ccb4:	08012508 	.word	0x08012508
 800ccb8:	08012430 	.word	0x08012430
 800ccbc:	08012558 	.word	0x08012558
 800ccc0:	080124f8 	.word	0x080124f8
 800ccc4:	08012b84 	.word	0x08012b84
 800ccc8:	20008a9c 	.word	0x20008a9c
 800cccc:	200089ac 	.word	0x200089ac

0800ccd0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08c      	sub	sp, #48	; 0x30
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3326      	adds	r3, #38	; 0x26
 800cce0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cce2:	23ff      	movs	r3, #255	; 0xff
 800cce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68f9      	ldr	r1, [r7, #12]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fe14 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10c      	bne.n	800cd18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd06:	2be0      	cmp	r3, #224	; 0xe0
 800cd08:	d006      	beq.n	800cd18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d102      	bne.n	800cd1e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cd18:	f06f 030f 	mvn.w	r3, #15
 800cd1c:	e101      	b.n	800cf22 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	2101      	movs	r1, #1
 800cd22:	68b8      	ldr	r0, [r7, #8]
 800cd24:	f7ff fb60 	bl	800c3e8 <etharp_find_entry>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cd2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	da02      	bge.n	800cd3a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cd34:	8a7b      	ldrh	r3, [r7, #18]
 800cd36:	b25b      	sxtb	r3, r3
 800cd38:	e0f3      	b.n	800cf22 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cd3a:	8a7b      	ldrh	r3, [r7, #18]
 800cd3c:	2b7e      	cmp	r3, #126	; 0x7e
 800cd3e:	d906      	bls.n	800cd4e <etharp_query+0x7e>
 800cd40:	4b7a      	ldr	r3, [pc, #488]	; (800cf2c <etharp_query+0x25c>)
 800cd42:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cd46:	497a      	ldr	r1, [pc, #488]	; (800cf30 <etharp_query+0x260>)
 800cd48:	487a      	ldr	r0, [pc, #488]	; (800cf34 <etharp_query+0x264>)
 800cd4a:	f001 fe33 	bl	800e9b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cd52:	7c7a      	ldrb	r2, [r7, #17]
 800cd54:	4978      	ldr	r1, [pc, #480]	; (800cf38 <etharp_query+0x268>)
 800cd56:	4613      	mov	r3, r2
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4413      	add	r3, r2
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	440b      	add	r3, r1
 800cd60:	3314      	adds	r3, #20
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d115      	bne.n	800cd94 <etharp_query+0xc4>
    is_new_entry = 1;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cd6c:	7c7a      	ldrb	r2, [r7, #17]
 800cd6e:	4972      	ldr	r1, [pc, #456]	; (800cf38 <etharp_query+0x268>)
 800cd70:	4613      	mov	r3, r2
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	4413      	add	r3, r2
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	440b      	add	r3, r1
 800cd7a:	3314      	adds	r3, #20
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cd80:	7c7a      	ldrb	r2, [r7, #17]
 800cd82:	496d      	ldr	r1, [pc, #436]	; (800cf38 <etharp_query+0x268>)
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	440b      	add	r3, r1
 800cd8e:	3308      	adds	r3, #8
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cd94:	7c7a      	ldrb	r2, [r7, #17]
 800cd96:	4968      	ldr	r1, [pc, #416]	; (800cf38 <etharp_query+0x268>)
 800cd98:	4613      	mov	r3, r2
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	440b      	add	r3, r1
 800cda2:	3314      	adds	r3, #20
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d011      	beq.n	800cdce <etharp_query+0xfe>
 800cdaa:	7c7a      	ldrb	r2, [r7, #17]
 800cdac:	4962      	ldr	r1, [pc, #392]	; (800cf38 <etharp_query+0x268>)
 800cdae:	4613      	mov	r3, r2
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	440b      	add	r3, r1
 800cdb8:	3314      	adds	r3, #20
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d806      	bhi.n	800cdce <etharp_query+0xfe>
 800cdc0:	4b5a      	ldr	r3, [pc, #360]	; (800cf2c <etharp_query+0x25c>)
 800cdc2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cdc6:	495d      	ldr	r1, [pc, #372]	; (800cf3c <etharp_query+0x26c>)
 800cdc8:	485a      	ldr	r0, [pc, #360]	; (800cf34 <etharp_query+0x264>)
 800cdca:	f001 fdf3 	bl	800e9b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <etharp_query+0x10a>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10c      	bne.n	800cdf4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f000 f963 	bl	800d0a8 <etharp_request>
 800cde2:	4603      	mov	r3, r0
 800cde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d102      	bne.n	800cdf4 <etharp_query+0x124>
      return result;
 800cdee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdf2:	e096      	b.n	800cf22 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <etharp_query+0x138>
 800cdfa:	4b4c      	ldr	r3, [pc, #304]	; (800cf2c <etharp_query+0x25c>)
 800cdfc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ce00:	494f      	ldr	r1, [pc, #316]	; (800cf40 <etharp_query+0x270>)
 800ce02:	484c      	ldr	r0, [pc, #304]	; (800cf34 <etharp_query+0x264>)
 800ce04:	f001 fdd6 	bl	800e9b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce08:	7c7a      	ldrb	r2, [r7, #17]
 800ce0a:	494b      	ldr	r1, [pc, #300]	; (800cf38 <etharp_query+0x268>)
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	3314      	adds	r3, #20
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d917      	bls.n	800ce4e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ce1e:	4a49      	ldr	r2, [pc, #292]	; (800cf44 <etharp_query+0x274>)
 800ce20:	7c7b      	ldrb	r3, [r7, #17]
 800ce22:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ce24:	7c7a      	ldrb	r2, [r7, #17]
 800ce26:	4613      	mov	r3, r2
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	4413      	add	r3, r2
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	3308      	adds	r3, #8
 800ce30:	4a41      	ldr	r2, [pc, #260]	; (800cf38 <etharp_query+0x268>)
 800ce32:	4413      	add	r3, r2
 800ce34:	3304      	adds	r3, #4
 800ce36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce3a:	9200      	str	r2, [sp, #0]
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f001 fd0b 	bl	800e85c <ethernet_output>
 800ce46:	4603      	mov	r3, r0
 800ce48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce4c:	e067      	b.n	800cf1e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce4e:	7c7a      	ldrb	r2, [r7, #17]
 800ce50:	4939      	ldr	r1, [pc, #228]	; (800cf38 <etharp_query+0x268>)
 800ce52:	4613      	mov	r3, r2
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	4413      	add	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3314      	adds	r3, #20
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d15c      	bne.n	800cf1e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce6c:	e01c      	b.n	800cea8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	895a      	ldrh	r2, [r3, #10]
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	891b      	ldrh	r3, [r3, #8]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d10a      	bne.n	800ce90 <etharp_query+0x1c0>
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d006      	beq.n	800ce90 <etharp_query+0x1c0>
 800ce82:	4b2a      	ldr	r3, [pc, #168]	; (800cf2c <etharp_query+0x25c>)
 800ce84:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ce88:	492f      	ldr	r1, [pc, #188]	; (800cf48 <etharp_query+0x278>)
 800ce8a:	482a      	ldr	r0, [pc, #168]	; (800cf34 <etharp_query+0x264>)
 800ce8c:	f001 fd92 	bl	800e9b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	7b1b      	ldrb	r3, [r3, #12]
 800ce94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <etharp_query+0x1d2>
        copy_needed = 1;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	61bb      	str	r3, [r7, #24]
        break;
 800cea0:	e005      	b.n	800ceae <etharp_query+0x1de>
      }
      p = p->next;
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1df      	bne.n	800ce6e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d007      	beq.n	800cec4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ceba:	200e      	movs	r0, #14
 800cebc:	f7f8 fd96 	bl	80059ec <pbuf_clone>
 800cec0:	61f8      	str	r0, [r7, #28]
 800cec2:	e004      	b.n	800cece <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cec8:	69f8      	ldr	r0, [r7, #28]
 800ceca:	f7f8 fbc3 	bl	8005654 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d021      	beq.n	800cf18 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ced4:	7c7a      	ldrb	r2, [r7, #17]
 800ced6:	4918      	ldr	r1, [pc, #96]	; (800cf38 <etharp_query+0x268>)
 800ced8:	4613      	mov	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	4413      	add	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	440b      	add	r3, r1
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cee8:	7c7a      	ldrb	r2, [r7, #17]
 800ceea:	4913      	ldr	r1, [pc, #76]	; (800cf38 <etharp_query+0x268>)
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	440b      	add	r3, r1
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f8 fb0b 	bl	8005514 <pbuf_free>
      }
      arp_table[i].q = p;
 800cefe:	7c7a      	ldrb	r2, [r7, #17]
 800cf00:	490d      	ldr	r1, [pc, #52]	; (800cf38 <etharp_query+0x268>)
 800cf02:	4613      	mov	r3, r2
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4413      	add	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	69fa      	ldr	r2, [r7, #28]
 800cf0e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cf10:	2300      	movs	r3, #0
 800cf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf16:	e002      	b.n	800cf1e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cf18:	23ff      	movs	r3, #255	; 0xff
 800cf1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cf1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3728      	adds	r7, #40	; 0x28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	080123b8 	.word	0x080123b8
 800cf30:	08012564 	.word	0x08012564
 800cf34:	08012430 	.word	0x08012430
 800cf38:	200089ac 	.word	0x200089ac
 800cf3c:	08012574 	.word	0x08012574
 800cf40:	08012558 	.word	0x08012558
 800cf44:	20008a9c 	.word	0x20008a9c
 800cf48:	0801259c 	.word	0x0801259c

0800cf4c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08a      	sub	sp, #40	; 0x28
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <etharp_raw+0x26>
 800cf64:	4b3a      	ldr	r3, [pc, #232]	; (800d050 <etharp_raw+0x104>)
 800cf66:	f240 4257 	movw	r2, #1111	; 0x457
 800cf6a:	493a      	ldr	r1, [pc, #232]	; (800d054 <etharp_raw+0x108>)
 800cf6c:	483a      	ldr	r0, [pc, #232]	; (800d058 <etharp_raw+0x10c>)
 800cf6e:	f001 fd21 	bl	800e9b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cf72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf76:	211c      	movs	r1, #28
 800cf78:	200e      	movs	r0, #14
 800cf7a:	f7f7 ffe7 	bl	8004f4c <pbuf_alloc>
 800cf7e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cf86:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8a:	e05d      	b.n	800d048 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	895b      	ldrh	r3, [r3, #10]
 800cf90:	2b1b      	cmp	r3, #27
 800cf92:	d806      	bhi.n	800cfa2 <etharp_raw+0x56>
 800cf94:	4b2e      	ldr	r3, [pc, #184]	; (800d050 <etharp_raw+0x104>)
 800cf96:	f240 4262 	movw	r2, #1122	; 0x462
 800cf9a:	4930      	ldr	r1, [pc, #192]	; (800d05c <etharp_raw+0x110>)
 800cf9c:	482e      	ldr	r0, [pc, #184]	; (800d058 <etharp_raw+0x10c>)
 800cf9e:	f001 fd09 	bl	800e9b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cfa8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f6 ff9a 	bl	8003ee4 <lwip_htons>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cfbe:	2b06      	cmp	r3, #6
 800cfc0:	d006      	beq.n	800cfd0 <etharp_raw+0x84>
 800cfc2:	4b23      	ldr	r3, [pc, #140]	; (800d050 <etharp_raw+0x104>)
 800cfc4:	f240 4269 	movw	r2, #1129	; 0x469
 800cfc8:	4925      	ldr	r1, [pc, #148]	; (800d060 <etharp_raw+0x114>)
 800cfca:	4823      	ldr	r0, [pc, #140]	; (800d058 <etharp_raw+0x10c>)
 800cfcc:	f001 fcf2 	bl	800e9b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	2206      	movs	r2, #6
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f001 fcbb 	bl	800e954 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	3312      	adds	r3, #18
 800cfe2:	2206      	movs	r2, #6
 800cfe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f001 fcb4 	bl	800e954 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	330e      	adds	r3, #14
 800cff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cff2:	6812      	ldr	r2, [r2, #0]
 800cff4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	3318      	adds	r3, #24
 800cffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cffc:	6812      	ldr	r2, [r2, #0]
 800cffe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2200      	movs	r2, #0
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	2200      	movs	r2, #0
 800d008:	f042 0201 	orr.w	r2, r2, #1
 800d00c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	2200      	movs	r2, #0
 800d012:	f042 0208 	orr.w	r2, r2, #8
 800d016:	709a      	strb	r2, [r3, #2]
 800d018:	2200      	movs	r2, #0
 800d01a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2206      	movs	r2, #6
 800d020:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2204      	movs	r2, #4
 800d026:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d028:	f640 0306 	movw	r3, #2054	; 0x806
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	69b9      	ldr	r1, [r7, #24]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f001 fc11 	bl	800e85c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d03a:	69b8      	ldr	r0, [r7, #24]
 800d03c:	f7f8 fa6a 	bl	8005514 <pbuf_free>
  p = NULL;
 800d040:	2300      	movs	r3, #0
 800d042:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d044:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	080123b8 	.word	0x080123b8
 800d054:	08012508 	.word	0x08012508
 800d058:	08012430 	.word	0x08012430
 800d05c:	080125b8 	.word	0x080125b8
 800d060:	080125ec 	.word	0x080125ec

0800d064 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af04      	add	r7, sp, #16
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d080:	2201      	movs	r2, #1
 800d082:	9203      	str	r2, [sp, #12]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	9202      	str	r2, [sp, #8]
 800d088:	4a06      	ldr	r2, [pc, #24]	; (800d0a4 <etharp_request_dst+0x40>)
 800d08a:	9201      	str	r2, [sp, #4]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	4603      	mov	r3, r0
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f7ff ff5a 	bl	800cf4c <etharp_raw>
 800d098:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	08012b8c 	.word	0x08012b8c

0800d0a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d0b2:	4a05      	ldr	r2, [pc, #20]	; (800d0c8 <etharp_request+0x20>)
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff ffd4 	bl	800d064 <etharp_request_dst>
 800d0bc:	4603      	mov	r3, r0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	08012b84 	.word	0x08012b84

0800d0cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08e      	sub	sp, #56	; 0x38
 800d0d0:	af04      	add	r7, sp, #16
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d0d6:	4b7c      	ldr	r3, [pc, #496]	; (800d2c8 <icmp_input+0x1fc>)
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	f003 030f 	and.w	r3, r3, #15
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d0ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0ee:	2b13      	cmp	r3, #19
 800d0f0:	f240 80d2 	bls.w	800d298 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	895b      	ldrh	r3, [r3, #10]
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	f240 80cf 	bls.w	800d29c <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	785b      	ldrb	r3, [r3, #1]
 800d10e:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d112:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 80b7 	beq.w	800d28a <icmp_input+0x1be>
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	f040 80b7 	bne.w	800d290 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d122:	4b6a      	ldr	r3, [pc, #424]	; (800d2cc <icmp_input+0x200>)
 800d124:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d126:	4b68      	ldr	r3, [pc, #416]	; (800d2c8 <icmp_input+0x1fc>)
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d12e:	2be0      	cmp	r3, #224	; 0xe0
 800d130:	f000 80bb 	beq.w	800d2aa <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d134:	4b64      	ldr	r3, [pc, #400]	; (800d2c8 <icmp_input+0x1fc>)
 800d136:	695b      	ldr	r3, [r3, #20]
 800d138:	4a63      	ldr	r2, [pc, #396]	; (800d2c8 <icmp_input+0x1fc>)
 800d13a:	6812      	ldr	r2, [r2, #0]
 800d13c:	4611      	mov	r1, r2
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 fbee 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	f040 80b1 	bne.w	800d2ae <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	891b      	ldrh	r3, [r3, #8]
 800d150:	2b07      	cmp	r3, #7
 800d152:	f240 80a5 	bls.w	800d2a0 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d158:	330e      	adds	r3, #14
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7f8 f943 	bl	80053e8 <pbuf_add_header>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d04b      	beq.n	800d200 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	891a      	ldrh	r2, [r3, #8]
 800d16c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d16e:	4413      	add	r3, r2
 800d170:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	891b      	ldrh	r3, [r3, #8]
 800d176:	8b7a      	ldrh	r2, [r7, #26]
 800d178:	429a      	cmp	r2, r3
 800d17a:	f0c0 809a 	bcc.w	800d2b2 <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d17e:	8b7b      	ldrh	r3, [r7, #26]
 800d180:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d184:	4619      	mov	r1, r3
 800d186:	200e      	movs	r0, #14
 800d188:	f7f7 fee0 	bl	8004f4c <pbuf_alloc>
 800d18c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 8090 	beq.w	800d2b6 <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	895b      	ldrh	r3, [r3, #10]
 800d19a:	461a      	mov	r2, r3
 800d19c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d19e:	3308      	adds	r3, #8
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d203      	bcs.n	800d1ac <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d1a4:	6978      	ldr	r0, [r7, #20]
 800d1a6:	f7f8 f9b5 	bl	8005514 <pbuf_free>
          goto icmperr;
 800d1aa:	e085      	b.n	800d2b8 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 fbcd 	bl	800e954 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d1ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7f8 f922 	bl	8005408 <pbuf_remove_header>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d1ca:	4b41      	ldr	r3, [pc, #260]	; (800d2d0 <icmp_input+0x204>)
 800d1cc:	22b6      	movs	r2, #182	; 0xb6
 800d1ce:	4941      	ldr	r1, [pc, #260]	; (800d2d4 <icmp_input+0x208>)
 800d1d0:	4841      	ldr	r0, [pc, #260]	; (800d2d8 <icmp_input+0x20c>)
 800d1d2:	f001 fbef 	bl	800e9b4 <iprintf>
          pbuf_free(r);
 800d1d6:	6978      	ldr	r0, [r7, #20]
 800d1d8:	f7f8 f99c 	bl	8005514 <pbuf_free>
          goto icmperr;
 800d1dc:	e06c      	b.n	800d2b8 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	6978      	ldr	r0, [r7, #20]
 800d1e2:	f7f8 fabf 	bl	8005764 <pbuf_copy>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d1ec:	6978      	ldr	r0, [r7, #20]
 800d1ee:	f7f8 f991 	bl	8005514 <pbuf_free>
          goto icmperr;
 800d1f2:	e061      	b.n	800d2b8 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7f8 f98d 	bl	8005514 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	607b      	str	r3, [r7, #4]
 800d1fe:	e00f      	b.n	800d220 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d202:	330e      	adds	r3, #14
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7f8 f8fe 	bl	8005408 <pbuf_remove_header>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d006      	beq.n	800d220 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d212:	4b2f      	ldr	r3, [pc, #188]	; (800d2d0 <icmp_input+0x204>)
 800d214:	22c7      	movs	r2, #199	; 0xc7
 800d216:	4931      	ldr	r1, [pc, #196]	; (800d2dc <icmp_input+0x210>)
 800d218:	482f      	ldr	r0, [pc, #188]	; (800d2d8 <icmp_input+0x20c>)
 800d21a:	f001 fbcb 	bl	800e9b4 <iprintf>
          goto icmperr;
 800d21e:	e04b      	b.n	800d2b8 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7f8 f8dc 	bl	80053e8 <pbuf_add_header>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d12b      	bne.n	800d28e <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d244:	4b20      	ldr	r3, [pc, #128]	; (800d2c8 <icmp_input+0x1fc>)
 800d246:	691a      	ldr	r2, [r3, #16]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2200      	movs	r2, #0
 800d250:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2200      	movs	r2, #0
 800d256:	709a      	strb	r2, [r3, #2]
 800d258:	2200      	movs	r2, #0
 800d25a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	22ff      	movs	r2, #255	; 0xff
 800d260:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	729a      	strb	r2, [r3, #10]
 800d268:	2200      	movs	r2, #0
 800d26a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	9302      	str	r3, [sp, #8]
 800d270:	2301      	movs	r3, #1
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	2300      	movs	r3, #0
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	23ff      	movs	r3, #255	; 0xff
 800d27a:	2200      	movs	r2, #0
 800d27c:	69f9      	ldr	r1, [r7, #28]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fa76 	bl	800d770 <ip4_output_if>
 800d284:	4603      	mov	r3, r0
 800d286:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d288:	e001      	b.n	800d28e <icmp_input+0x1c2>
      break;
 800d28a:	bf00      	nop
 800d28c:	e000      	b.n	800d290 <icmp_input+0x1c4>
      break;
 800d28e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7f8 f93f 	bl	8005514 <pbuf_free>
  return;
 800d296:	e013      	b.n	800d2c0 <icmp_input+0x1f4>
    goto lenerr;
 800d298:	bf00      	nop
 800d29a:	e002      	b.n	800d2a2 <icmp_input+0x1d6>
    goto lenerr;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <icmp_input+0x1d6>
        goto lenerr;
 800d2a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7f8 f936 	bl	8005514 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2a8:	e00a      	b.n	800d2c0 <icmp_input+0x1f4>
        goto icmperr;
 800d2aa:	bf00      	nop
 800d2ac:	e004      	b.n	800d2b8 <icmp_input+0x1ec>
        goto icmperr;
 800d2ae:	bf00      	nop
 800d2b0:	e002      	b.n	800d2b8 <icmp_input+0x1ec>
          goto icmperr;
 800d2b2:	bf00      	nop
 800d2b4:	e000      	b.n	800d2b8 <icmp_input+0x1ec>
          goto icmperr;
 800d2b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7f8 f92b 	bl	8005514 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d2c0:	3728      	adds	r7, #40	; 0x28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	200031d8 	.word	0x200031d8
 800d2cc:	200031ec 	.word	0x200031ec
 800d2d0:	08012630 	.word	0x08012630
 800d2d4:	08012668 	.word	0x08012668
 800d2d8:	080126a0 	.word	0x080126a0
 800d2dc:	080126c8 	.word	0x080126c8

0800d2e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	2103      	movs	r1, #3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f814 	bl	800d320 <icmp_send_response>
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	461a      	mov	r2, r3
 800d310:	210b      	movs	r1, #11
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f804 	bl	800d320 <icmp_send_response>
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08c      	sub	sp, #48	; 0x30
 800d324:	af04      	add	r7, sp, #16
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
 800d32c:	4613      	mov	r3, r2
 800d32e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d330:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d334:	2124      	movs	r1, #36	; 0x24
 800d336:	2022      	movs	r0, #34	; 0x22
 800d338:	f7f7 fe08 	bl	8004f4c <pbuf_alloc>
 800d33c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d04c      	beq.n	800d3de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	895b      	ldrh	r3, [r3, #10]
 800d348:	2b23      	cmp	r3, #35	; 0x23
 800d34a:	d806      	bhi.n	800d35a <icmp_send_response+0x3a>
 800d34c:	4b26      	ldr	r3, [pc, #152]	; (800d3e8 <icmp_send_response+0xc8>)
 800d34e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d352:	4926      	ldr	r1, [pc, #152]	; (800d3ec <icmp_send_response+0xcc>)
 800d354:	4826      	ldr	r0, [pc, #152]	; (800d3f0 <icmp_send_response+0xd0>)
 800d356:	f001 fb2d 	bl	800e9b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	78fa      	ldrb	r2, [r7, #3]
 800d36a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	78ba      	ldrb	r2, [r7, #2]
 800d370:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	2200      	movs	r2, #0
 800d376:	711a      	strb	r2, [r3, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	2200      	movs	r2, #0
 800d380:	719a      	strb	r2, [r3, #6]
 800d382:	2200      	movs	r2, #0
 800d384:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f103 0008 	add.w	r0, r3, #8
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	221c      	movs	r2, #28
 800d394:	4619      	mov	r1, r3
 800d396:	f001 fadd 	bl	800e954 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d3a0:	f107 030c 	add.w	r3, r7, #12
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 f825 	bl	800d3f4 <ip4_route>
 800d3aa:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d011      	beq.n	800d3d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	709a      	strb	r2, [r3, #2]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d3bc:	f107 020c 	add.w	r2, r7, #12
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	9302      	str	r3, [sp, #8]
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	23ff      	movs	r3, #255	; 0xff
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	69b8      	ldr	r0, [r7, #24]
 800d3d2:	f000 f9cd 	bl	800d770 <ip4_output_if>
  }
  pbuf_free(q);
 800d3d6:	69b8      	ldr	r0, [r7, #24]
 800d3d8:	f7f8 f89c 	bl	8005514 <pbuf_free>
 800d3dc:	e000      	b.n	800d3e0 <icmp_send_response+0xc0>
    return;
 800d3de:	bf00      	nop
}
 800d3e0:	3720      	adds	r7, #32
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	08012630 	.word	0x08012630
 800d3ec:	080126fc 	.word	0x080126fc
 800d3f0:	080126a0 	.word	0x080126a0

0800d3f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d3fc:	4b33      	ldr	r3, [pc, #204]	; (800d4cc <ip4_route+0xd8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	e036      	b.n	800d472 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d02b      	beq.n	800d46c <ip4_route+0x78>
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d41a:	089b      	lsrs	r3, r3, #2
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d022      	beq.n	800d46c <ip4_route+0x78>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3304      	adds	r3, #4
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01d      	beq.n	800d46c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	3304      	adds	r3, #4
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	405a      	eors	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	3308      	adds	r3, #8
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4013      	ands	r3, r2
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	e038      	b.n	800d4be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d108      	bne.n	800d46c <ip4_route+0x78>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	330c      	adds	r3, #12
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	429a      	cmp	r2, r3
 800d466:	d101      	bne.n	800d46c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	e028      	b.n	800d4be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1c5      	bne.n	800d404 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d478:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <ip4_route+0xdc>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01a      	beq.n	800d4b6 <ip4_route+0xc2>
 800d480:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <ip4_route+0xdc>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d012      	beq.n	800d4b6 <ip4_route+0xc2>
 800d490:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <ip4_route+0xdc>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d498:	f003 0304 	and.w	r3, r3, #4
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00a      	beq.n	800d4b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <ip4_route+0xdc>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d004      	beq.n	800d4b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d4b4:	d101      	bne.n	800d4ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	e001      	b.n	800d4be <ip4_route+0xca>
  }

  return netif_default;
 800d4ba:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <ip4_route+0xdc>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	2000893c 	.word	0x2000893c
 800d4d0:	20008940 	.word	0x20008940

0800d4d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d016      	beq.n	800d51a <ip4_input_accept+0x46>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d011      	beq.n	800d51a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <ip4_input_accept+0x50>)
 800d4f8:	695a      	ldr	r2, [r3, #20]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d008      	beq.n	800d516 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d504:	4b07      	ldr	r3, [pc, #28]	; (800d524 <ip4_input_accept+0x50>)
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fa08 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800d510:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	200031d8 	.word	0x200031d8

0800d528 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	091b      	lsrs	r3, r3, #4
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b04      	cmp	r3, #4
 800d542:	d004      	beq.n	800d54e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7f7 ffe5 	bl	8005514 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	e107      	b.n	800d75e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f003 030f 	and.w	r3, r3, #15
 800d556:	b2db      	uxtb	r3, r3
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	885b      	ldrh	r3, [r3, #2]
 800d562:	b29b      	uxth	r3, r3
 800d564:	4618      	mov	r0, r3
 800d566:	f7f6 fcbd 	bl	8003ee4 <lwip_htons>
 800d56a:	4603      	mov	r3, r0
 800d56c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	891b      	ldrh	r3, [r3, #8]
 800d572:	89ba      	ldrh	r2, [r7, #12]
 800d574:	429a      	cmp	r2, r3
 800d576:	d204      	bcs.n	800d582 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d578:	89bb      	ldrh	r3, [r7, #12]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7f7 fe43 	bl	8005208 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	895b      	ldrh	r3, [r3, #10]
 800d586:	89fa      	ldrh	r2, [r7, #14]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d807      	bhi.n	800d59c <ip4_input+0x74>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	891b      	ldrh	r3, [r3, #8]
 800d590:	89ba      	ldrh	r2, [r7, #12]
 800d592:	429a      	cmp	r2, r3
 800d594:	d802      	bhi.n	800d59c <ip4_input+0x74>
 800d596:	89fb      	ldrh	r3, [r7, #14]
 800d598:	2b13      	cmp	r3, #19
 800d59a:	d804      	bhi.n	800d5a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7f7 ffb9 	bl	8005514 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	e0db      	b.n	800d75e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	4a6f      	ldr	r2, [pc, #444]	; (800d768 <ip4_input+0x240>)
 800d5ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	4a6d      	ldr	r2, [pc, #436]	; (800d768 <ip4_input+0x240>)
 800d5b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d5b6:	4b6c      	ldr	r3, [pc, #432]	; (800d768 <ip4_input+0x240>)
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5be:	2be0      	cmp	r3, #224	; 0xe0
 800d5c0:	d112      	bne.n	800d5e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5c8:	f003 0301 	and.w	r3, r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d007      	beq.n	800d5e2 <ip4_input+0xba>
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <ip4_input+0xba>
      netif = inp;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	e02a      	b.n	800d638 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	617b      	str	r3, [r7, #20]
 800d5e6:	e027      	b.n	800d638 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d5e8:	6838      	ldr	r0, [r7, #0]
 800d5ea:	f7ff ff73 	bl	800d4d4 <ip4_input_accept>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <ip4_input+0xd2>
      netif = inp;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e01e      	b.n	800d638 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d5fe:	4b5a      	ldr	r3, [pc, #360]	; (800d768 <ip4_input+0x240>)
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b7f      	cmp	r3, #127	; 0x7f
 800d606:	d017      	beq.n	800d638 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d608:	4b58      	ldr	r3, [pc, #352]	; (800d76c <ip4_input+0x244>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	617b      	str	r3, [r7, #20]
 800d60e:	e00e      	b.n	800d62e <ip4_input+0x106>
          if (netif == inp) {
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	429a      	cmp	r2, r3
 800d616:	d006      	beq.n	800d626 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d618:	6978      	ldr	r0, [r7, #20]
 800d61a:	f7ff ff5b 	bl	800d4d4 <ip4_input_accept>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d108      	bne.n	800d636 <ip4_input+0x10e>
 800d624:	e000      	b.n	800d628 <ip4_input+0x100>
            continue;
 800d626:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	617b      	str	r3, [r7, #20]
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1ed      	bne.n	800d610 <ip4_input+0xe8>
 800d634:	e000      	b.n	800d638 <ip4_input+0x110>
            break;
 800d636:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d638:	4b4b      	ldr	r3, [pc, #300]	; (800d768 <ip4_input+0x240>)
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 f96e 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d64a:	4b47      	ldr	r3, [pc, #284]	; (800d768 <ip4_input+0x240>)
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d652:	2be0      	cmp	r3, #224	; 0xe0
 800d654:	d104      	bne.n	800d660 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7f7 ff5c 	bl	8005514 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e07e      	b.n	800d75e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d104      	bne.n	800d670 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7f7 ff54 	bl	8005514 <pbuf_free>
    return ERR_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e076      	b.n	800d75e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	88db      	ldrh	r3, [r3, #6]
 800d674:	b29b      	uxth	r3, r3
 800d676:	461a      	mov	r2, r3
 800d678:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fd22 	bl	800e0cc <ip4_reass>
 800d688:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <ip4_input+0x16c>
      return ERR_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	e064      	b.n	800d75e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d69a:	4a33      	ldr	r2, [pc, #204]	; (800d768 <ip4_input+0x240>)
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d6a0:	4a31      	ldr	r2, [pc, #196]	; (800d768 <ip4_input+0x240>)
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d6a6:	4a30      	ldr	r2, [pc, #192]	; (800d768 <ip4_input+0x240>)
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	4b2a      	ldr	r3, [pc, #168]	; (800d768 <ip4_input+0x240>)
 800d6be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d6c0:	89fb      	ldrh	r3, [r7, #14]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7f7 fe9f 	bl	8005408 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	7a5b      	ldrb	r3, [r3, #9]
 800d6ce:	2b11      	cmp	r3, #17
 800d6d0:	d006      	beq.n	800d6e0 <ip4_input+0x1b8>
 800d6d2:	2b11      	cmp	r3, #17
 800d6d4:	dc13      	bgt.n	800d6fe <ip4_input+0x1d6>
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d00c      	beq.n	800d6f4 <ip4_input+0x1cc>
 800d6da:	2b06      	cmp	r3, #6
 800d6dc:	d005      	beq.n	800d6ea <ip4_input+0x1c2>
 800d6de:	e00e      	b.n	800d6fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7fe fc34 	bl	800bf50 <udp_input>
        break;
 800d6e8:	e026      	b.n	800d738 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7f9 ffe9 	bl	80076c4 <tcp_input>
        break;
 800d6f2:	e021      	b.n	800d738 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d6f4:	6839      	ldr	r1, [r7, #0]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff fce8 	bl	800d0cc <icmp_input>
        break;
 800d6fc:	e01c      	b.n	800d738 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d6fe:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <ip4_input+0x240>)
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	6979      	ldr	r1, [r7, #20]
 800d704:	4618      	mov	r0, r3
 800d706:	f000 f90b 	bl	800d920 <ip4_addr_isbroadcast_u32>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10f      	bne.n	800d730 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d710:	4b15      	ldr	r3, [pc, #84]	; (800d768 <ip4_input+0x240>)
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d718:	2be0      	cmp	r3, #224	; 0xe0
 800d71a:	d009      	beq.n	800d730 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d71c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7f7 fee3 	bl	80054ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d728:	2102      	movs	r1, #2
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fdd8 	bl	800d2e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7f7 feef 	bl	8005514 <pbuf_free>
        break;
 800d736:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d738:	4b0b      	ldr	r3, [pc, #44]	; (800d768 <ip4_input+0x240>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d73e:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <ip4_input+0x240>)
 800d740:	2200      	movs	r2, #0
 800d742:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d744:	4b08      	ldr	r3, [pc, #32]	; (800d768 <ip4_input+0x240>)
 800d746:	2200      	movs	r2, #0
 800d748:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <ip4_input+0x240>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d750:	4b05      	ldr	r3, [pc, #20]	; (800d768 <ip4_input+0x240>)
 800d752:	2200      	movs	r2, #0
 800d754:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d756:	4b04      	ldr	r3, [pc, #16]	; (800d768 <ip4_input+0x240>)
 800d758:	2200      	movs	r2, #0
 800d75a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	200031d8 	.word	0x200031d8
 800d76c:	2000893c 	.word	0x2000893c

0800d770 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b08a      	sub	sp, #40	; 0x28
 800d774:	af04      	add	r7, sp, #16
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d009      	beq.n	800d79c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <ip4_output_if+0x26>
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d102      	bne.n	800d79c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	3304      	adds	r3, #4
 800d79a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d79c:	78fa      	ldrb	r2, [r7, #3]
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	9302      	str	r3, [sp, #8]
 800d7a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	6979      	ldr	r1, [r7, #20]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f000 f805 	bl	800d7c4 <ip4_output_if_src>
 800d7ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	7b9b      	ldrb	r3, [r3, #14]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d006      	beq.n	800d7e8 <ip4_output_if_src+0x24>
 800d7da:	4b4b      	ldr	r3, [pc, #300]	; (800d908 <ip4_output_if_src+0x144>)
 800d7dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d7e0:	494a      	ldr	r1, [pc, #296]	; (800d90c <ip4_output_if_src+0x148>)
 800d7e2:	484b      	ldr	r0, [pc, #300]	; (800d910 <ip4_output_if_src+0x14c>)
 800d7e4:	f001 f8e6 	bl	800e9b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d060      	beq.n	800d8b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d7ee:	2314      	movs	r3, #20
 800d7f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d7f2:	2114      	movs	r1, #20
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7f7 fdf7 	bl	80053e8 <pbuf_add_header>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d800:	f06f 0301 	mvn.w	r3, #1
 800d804:	e07c      	b.n	800d900 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	895b      	ldrh	r3, [r3, #10]
 800d810:	2b13      	cmp	r3, #19
 800d812:	d806      	bhi.n	800d822 <ip4_output_if_src+0x5e>
 800d814:	4b3c      	ldr	r3, [pc, #240]	; (800d908 <ip4_output_if_src+0x144>)
 800d816:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d81a:	493e      	ldr	r1, [pc, #248]	; (800d914 <ip4_output_if_src+0x150>)
 800d81c:	483c      	ldr	r0, [pc, #240]	; (800d910 <ip4_output_if_src+0x14c>)
 800d81e:	f001 f8c9 	bl	800e9b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d82e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d838:	8b7b      	ldrh	r3, [r7, #26]
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d844:	b2da      	uxtb	r2, r3
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d850:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	891b      	ldrh	r3, [r3, #8]
 800d856:	4618      	mov	r0, r3
 800d858:	f7f6 fb44 	bl	8003ee4 <lwip_htons>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2200      	movs	r2, #0
 800d868:	719a      	strb	r2, [r3, #6]
 800d86a:	2200      	movs	r2, #0
 800d86c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d86e:	4b2a      	ldr	r3, [pc, #168]	; (800d918 <ip4_output_if_src+0x154>)
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f7f6 fb36 	bl	8003ee4 <lwip_htons>
 800d878:	4603      	mov	r3, r0
 800d87a:	461a      	mov	r2, r3
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d880:	4b25      	ldr	r3, [pc, #148]	; (800d918 <ip4_output_if_src+0x154>)
 800d882:	881b      	ldrh	r3, [r3, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	b29a      	uxth	r2, r3
 800d888:	4b23      	ldr	r3, [pc, #140]	; (800d918 <ip4_output_if_src+0x154>)
 800d88a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d104      	bne.n	800d89c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d892:	4b22      	ldr	r3, [pc, #136]	; (800d91c <ip4_output_if_src+0x158>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	60da      	str	r2, [r3, #12]
 800d89a:	e003      	b.n	800d8a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	729a      	strb	r2, [r3, #10]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	72da      	strb	r2, [r3, #11]
 800d8ae:	e00f      	b.n	800d8d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	895b      	ldrh	r3, [r3, #10]
 800d8b4:	2b13      	cmp	r3, #19
 800d8b6:	d802      	bhi.n	800d8be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8b8:	f06f 0301 	mvn.w	r3, #1
 800d8bc:	e020      	b.n	800d900 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d8ca:	f107 0314 	add.w	r3, r7, #20
 800d8ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00c      	beq.n	800d8f2 <ip4_output_if_src+0x12e>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	891a      	ldrh	r2, [r3, #8]
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d906      	bls.n	800d8f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f000 fde3 	bl	800e4b4 <ip4_frag>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	e006      	b.n	800d900 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	68f9      	ldr	r1, [r7, #12]
 800d8fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8fc:	4798      	blx	r3
 800d8fe:	4603      	mov	r3, r0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	08012728 	.word	0x08012728
 800d90c:	0801275c 	.word	0x0801275c
 800d910:	08012768 	.word	0x08012768
 800d914:	08012790 	.word	0x08012790
 800d918:	20008a9e 	.word	0x20008a9e
 800d91c:	08012b80 	.word	0x08012b80

0800d920 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d934:	d002      	beq.n	800d93c <ip4_addr_isbroadcast_u32+0x1c>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d93c:	2301      	movs	r3, #1
 800d93e:	e02a      	b.n	800d996 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	e021      	b.n	800d996 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	3304      	adds	r3, #4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d101      	bne.n	800d962 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	e019      	b.n	800d996 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	3304      	adds	r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	405a      	eors	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	3308      	adds	r3, #8
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4013      	ands	r3, r2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10d      	bne.n	800d994 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	43da      	mvns	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3308      	adds	r3, #8
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d101      	bne.n	800d994 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d990:	2301      	movs	r3, #1
 800d992:	e000      	b.n	800d996 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d994:	2300      	movs	r3, #0
  }
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
	...

0800d9a4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d9ac:	2210      	movs	r2, #16
 800d9ae:	4904      	ldr	r1, [pc, #16]	; (800d9c0 <ip4addr_ntoa+0x1c>)
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f807 	bl	800d9c4 <ip4addr_ntoa_r>
 800d9b6:	4603      	mov	r3, r0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20008aa0 	.word	0x20008aa0

0800d9c4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b08d      	sub	sp, #52	; 0x34
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800d9de:	f107 0318 	add.w	r3, r7, #24
 800d9e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9ea:	e058      	b.n	800da9e <ip4addr_ntoa_r+0xda>
    i = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f4:	781a      	ldrb	r2, [r3, #0]
 800d9f6:	4b32      	ldr	r3, [pc, #200]	; (800dac0 <ip4addr_ntoa_r+0xfc>)
 800d9f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d9fc:	08d9      	lsrs	r1, r3, #3
 800d9fe:	460b      	mov	r3, r1
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	440b      	add	r3, r1
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800da0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	4a2c      	ldr	r2, [pc, #176]	; (800dac0 <ip4addr_ntoa_r+0xfc>)
 800da10:	fba2 2303 	umull	r2, r3, r2, r3
 800da14:	08db      	lsrs	r3, r3, #3
 800da16:	b2da      	uxtb	r2, r3
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800da1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800da26:	4619      	mov	r1, r3
 800da28:	7ffb      	ldrb	r3, [r7, #31]
 800da2a:	3330      	adds	r3, #48	; 0x30
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800da32:	443b      	add	r3, r7
 800da34:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1d8      	bne.n	800d9f2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800da40:	e011      	b.n	800da66 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	623a      	str	r2, [r7, #32]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	dc01      	bgt.n	800da52 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	e030      	b.n	800dab4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800da52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	1c59      	adds	r1, r3, #1
 800da5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800da5c:	3230      	adds	r2, #48	; 0x30
 800da5e:	443a      	add	r2, r7
 800da60:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800da64:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800da66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da6a:	1e5a      	subs	r2, r3, #1
 800da6c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1e6      	bne.n	800da42 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	623a      	str	r2, [r7, #32]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	dc01      	bgt.n	800da84 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800da80:	2300      	movs	r3, #0
 800da82:	e017      	b.n	800dab4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da8a:	222e      	movs	r2, #46	; 0x2e
 800da8c:	701a      	strb	r2, [r3, #0]
    ap++;
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	3301      	adds	r3, #1
 800da92:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800da94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da98:	3301      	adds	r3, #1
 800da9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d9a2      	bls.n	800d9ec <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa8:	3b01      	subs	r3, #1
 800daaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
  return buf;
 800dab2:	68bb      	ldr	r3, [r7, #8]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3734      	adds	r7, #52	; 0x34
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	cccccccd 	.word	0xcccccccd

0800dac4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dace:	4b12      	ldr	r3, [pc, #72]	; (800db18 <ip_reass_tmr+0x54>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dad4:	e018      	b.n	800db08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	7fdb      	ldrb	r3, [r3, #31]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00b      	beq.n	800daf6 <ip_reass_tmr+0x32>
      r->timer--;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	7fdb      	ldrb	r3, [r3, #31]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e008      	b.n	800db08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f80a 	bl	800db1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e3      	bne.n	800dad6 <ip_reass_tmr+0x12>
    }
  }
}
 800db0e:	bf00      	nop
 800db10:	bf00      	nop
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20008ab0 	.word	0x20008ab0

0800db1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b088      	sub	sp, #32
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d105      	bne.n	800db3e <ip_reass_free_complete_datagram+0x22>
 800db32:	4b45      	ldr	r3, [pc, #276]	; (800dc48 <ip_reass_free_complete_datagram+0x12c>)
 800db34:	22ab      	movs	r2, #171	; 0xab
 800db36:	4945      	ldr	r1, [pc, #276]	; (800dc4c <ip_reass_free_complete_datagram+0x130>)
 800db38:	4845      	ldr	r0, [pc, #276]	; (800dc50 <ip_reass_free_complete_datagram+0x134>)
 800db3a:	f000 ff3b 	bl	800e9b4 <iprintf>
  if (prev != NULL) {
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00a      	beq.n	800db5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d005      	beq.n	800db5a <ip_reass_free_complete_datagram+0x3e>
 800db4e:	4b3e      	ldr	r3, [pc, #248]	; (800dc48 <ip_reass_free_complete_datagram+0x12c>)
 800db50:	22ad      	movs	r2, #173	; 0xad
 800db52:	4940      	ldr	r1, [pc, #256]	; (800dc54 <ip_reass_free_complete_datagram+0x138>)
 800db54:	483e      	ldr	r0, [pc, #248]	; (800dc50 <ip_reass_free_complete_datagram+0x134>)
 800db56:	f000 ff2d 	bl	800e9b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	889b      	ldrh	r3, [r3, #4]
 800db66:	b29b      	uxth	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d12a      	bne.n	800dbc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	6858      	ldr	r0, [r3, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	3308      	adds	r3, #8
 800db82:	2214      	movs	r2, #20
 800db84:	4619      	mov	r1, r3
 800db86:	f000 fee5 	bl	800e954 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800db8a:	2101      	movs	r1, #1
 800db8c:	69b8      	ldr	r0, [r7, #24]
 800db8e:	f7ff fbb7 	bl	800d300 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800db92:	69b8      	ldr	r0, [r7, #24]
 800db94:	f7f7 fd46 	bl	8005624 <pbuf_clen>
 800db98:	4603      	mov	r3, r0
 800db9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db9c:	8bfa      	ldrh	r2, [r7, #30]
 800db9e:	8a7b      	ldrh	r3, [r7, #18]
 800dba0:	4413      	add	r3, r2
 800dba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba6:	db05      	blt.n	800dbb4 <ip_reass_free_complete_datagram+0x98>
 800dba8:	4b27      	ldr	r3, [pc, #156]	; (800dc48 <ip_reass_free_complete_datagram+0x12c>)
 800dbaa:	22bc      	movs	r2, #188	; 0xbc
 800dbac:	492a      	ldr	r1, [pc, #168]	; (800dc58 <ip_reass_free_complete_datagram+0x13c>)
 800dbae:	4828      	ldr	r0, [pc, #160]	; (800dc50 <ip_reass_free_complete_datagram+0x134>)
 800dbb0:	f000 ff00 	bl	800e9b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbb4:	8bfa      	ldrh	r2, [r7, #30]
 800dbb6:	8a7b      	ldrh	r3, [r7, #18]
 800dbb8:	4413      	add	r3, r2
 800dbba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dbbc:	69b8      	ldr	r0, [r7, #24]
 800dbbe:	f7f7 fca9 	bl	8005514 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dbc8:	e01f      	b.n	800dc0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7f7 fd22 	bl	8005624 <pbuf_clen>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dbe4:	8bfa      	ldrh	r2, [r7, #30]
 800dbe6:	8a7b      	ldrh	r3, [r7, #18]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbee:	db05      	blt.n	800dbfc <ip_reass_free_complete_datagram+0xe0>
 800dbf0:	4b15      	ldr	r3, [pc, #84]	; (800dc48 <ip_reass_free_complete_datagram+0x12c>)
 800dbf2:	22cc      	movs	r2, #204	; 0xcc
 800dbf4:	4918      	ldr	r1, [pc, #96]	; (800dc58 <ip_reass_free_complete_datagram+0x13c>)
 800dbf6:	4816      	ldr	r0, [pc, #88]	; (800dc50 <ip_reass_free_complete_datagram+0x134>)
 800dbf8:	f000 fedc 	bl	800e9b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbfc:	8bfa      	ldrh	r2, [r7, #30]
 800dbfe:	8a7b      	ldrh	r3, [r7, #18]
 800dc00:	4413      	add	r3, r2
 800dc02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7f7 fc85 	bl	8005514 <pbuf_free>
  while (p != NULL) {
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1dc      	bne.n	800dbca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f8c2 	bl	800dd9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dc18:	4b10      	ldr	r3, [pc, #64]	; (800dc5c <ip_reass_free_complete_datagram+0x140>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	8bfa      	ldrh	r2, [r7, #30]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d905      	bls.n	800dc2e <ip_reass_free_complete_datagram+0x112>
 800dc22:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <ip_reass_free_complete_datagram+0x12c>)
 800dc24:	22d2      	movs	r2, #210	; 0xd2
 800dc26:	490e      	ldr	r1, [pc, #56]	; (800dc60 <ip_reass_free_complete_datagram+0x144>)
 800dc28:	4809      	ldr	r0, [pc, #36]	; (800dc50 <ip_reass_free_complete_datagram+0x134>)
 800dc2a:	f000 fec3 	bl	800e9b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dc2e:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <ip_reass_free_complete_datagram+0x140>)
 800dc30:	881a      	ldrh	r2, [r3, #0]
 800dc32:	8bfb      	ldrh	r3, [r7, #30]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <ip_reass_free_complete_datagram+0x140>)
 800dc3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dc3c:	8bfb      	ldrh	r3, [r7, #30]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3720      	adds	r7, #32
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	080127c0 	.word	0x080127c0
 800dc4c:	080127fc 	.word	0x080127fc
 800dc50:	08012808 	.word	0x08012808
 800dc54:	08012830 	.word	0x08012830
 800dc58:	08012844 	.word	0x08012844
 800dc5c:	20008ab4 	.word	0x20008ab4
 800dc60:	08012864 	.word	0x08012864

0800dc64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08a      	sub	sp, #40	; 0x28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dc82:	4b28      	ldr	r3, [pc, #160]	; (800dd24 <ip_reass_remove_oldest_datagram+0xc0>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc88:	e030      	b.n	800dcec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	695a      	ldr	r2, [r3, #20]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d10c      	bne.n	800dcb0 <ip_reass_remove_oldest_datagram+0x4c>
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	699a      	ldr	r2, [r3, #24]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d106      	bne.n	800dcb0 <ip_reass_remove_oldest_datagram+0x4c>
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	899a      	ldrh	r2, [r3, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	889b      	ldrh	r3, [r3, #4]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d014      	beq.n	800dcda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d104      	bne.n	800dcc6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	61bb      	str	r3, [r7, #24]
 800dcc4:	e009      	b.n	800dcda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	7fda      	ldrb	r2, [r3, #31]
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	7fdb      	ldrb	r3, [r3, #31]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d803      	bhi.n	800dcda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d001      	beq.n	800dce6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1cb      	bne.n	800dc8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dcf2:	6a3b      	ldr	r3, [r7, #32]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d008      	beq.n	800dd0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dcf8:	69b9      	ldr	r1, [r7, #24]
 800dcfa:	6a38      	ldr	r0, [r7, #32]
 800dcfc:	f7ff ff0e 	bl	800db1c <ip_reass_free_complete_datagram>
 800dd00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	4413      	add	r3, r2
 800dd08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	da02      	bge.n	800dd18 <ip_reass_remove_oldest_datagram+0xb4>
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	dcac      	bgt.n	800dc72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dd18:	697b      	ldr	r3, [r7, #20]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3728      	adds	r7, #40	; 0x28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	20008ab0 	.word	0x20008ab0

0800dd28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd32:	2004      	movs	r0, #4
 800dd34:	f7f6 fd2c 	bl	8004790 <memp_malloc>
 800dd38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d110      	bne.n	800dd62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff ff8e 	bl	800dc64 <ip_reass_remove_oldest_datagram>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	dc03      	bgt.n	800dd58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd50:	2004      	movs	r0, #4
 800dd52:	f7f6 fd1d 	bl	8004790 <memp_malloc>
 800dd56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e016      	b.n	800dd90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dd62:	2220      	movs	r2, #32
 800dd64:	2100      	movs	r1, #0
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f000 fe1c 	bl	800e9a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	220f      	movs	r2, #15
 800dd70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <ip_reass_enqueue_new_datagram+0x70>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dd7a:	4a07      	ldr	r2, [pc, #28]	; (800dd98 <ip_reass_enqueue_new_datagram+0x70>)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3308      	adds	r3, #8
 800dd84:	2214      	movs	r2, #20
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 fde3 	bl	800e954 <memcpy>
  return ipr;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20008ab0 	.word	0x20008ab0

0800dd9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dda6:	4b10      	ldr	r3, [pc, #64]	; (800dde8 <ip_reass_dequeue_datagram+0x4c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d104      	bne.n	800ddba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a0c      	ldr	r2, [pc, #48]	; (800dde8 <ip_reass_dequeue_datagram+0x4c>)
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	e00d      	b.n	800ddd6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <ip_reass_dequeue_datagram+0x32>
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <ip_reass_dequeue_datagram+0x50>)
 800ddc2:	f240 1245 	movw	r2, #325	; 0x145
 800ddc6:	490a      	ldr	r1, [pc, #40]	; (800ddf0 <ip_reass_dequeue_datagram+0x54>)
 800ddc8:	480a      	ldr	r0, [pc, #40]	; (800ddf4 <ip_reass_dequeue_datagram+0x58>)
 800ddca:	f000 fdf3 	bl	800e9b4 <iprintf>
    prev->next = ipr->next;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	2004      	movs	r0, #4
 800ddda:	f7f6 fd25 	bl	8004828 <memp_free>
}
 800ddde:	bf00      	nop
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	20008ab0 	.word	0x20008ab0
 800ddec:	080127c0 	.word	0x080127c0
 800ddf0:	08012888 	.word	0x08012888
 800ddf4:	08012808 	.word	0x08012808

0800ddf8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08c      	sub	sp, #48	; 0x30
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800de04:	2300      	movs	r3, #0
 800de06:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800de08:	2301      	movs	r3, #1
 800de0a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	b29b      	uxth	r3, r3
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f6 f863 	bl	8003ee4 <lwip_htons>
 800de1e:	4603      	mov	r3, r0
 800de20:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	f003 030f 	and.w	r3, r3, #15
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800de30:	7e7b      	ldrb	r3, [r7, #25]
 800de32:	b29b      	uxth	r3, r3
 800de34:	8b7a      	ldrh	r2, [r7, #26]
 800de36:	429a      	cmp	r2, r3
 800de38:	d202      	bcs.n	800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de3a:	f04f 33ff 	mov.w	r3, #4294967295
 800de3e:	e135      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800de40:	7e7b      	ldrb	r3, [r7, #25]
 800de42:	b29b      	uxth	r3, r3
 800de44:	8b7a      	ldrh	r2, [r7, #26]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	88db      	ldrh	r3, [r3, #6]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	4618      	mov	r0, r3
 800de52:	f7f6 f847 	bl	8003ee4 <lwip_htons>
 800de56:	4603      	mov	r3, r0
 800de58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	2200      	movs	r2, #0
 800de70:	705a      	strb	r2, [r3, #1]
 800de72:	2200      	movs	r2, #0
 800de74:	709a      	strb	r2, [r3, #2]
 800de76:	2200      	movs	r2, #0
 800de78:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	8afa      	ldrh	r2, [r7, #22]
 800de7e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800de80:	8afa      	ldrh	r2, [r7, #22]
 800de82:	8b7b      	ldrh	r3, [r7, #26]
 800de84:	4413      	add	r3, r2
 800de86:	b29a      	uxth	r2, r3
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	88db      	ldrh	r3, [r3, #6]
 800de90:	b29b      	uxth	r3, r3
 800de92:	8afa      	ldrh	r2, [r7, #22]
 800de94:	429a      	cmp	r2, r3
 800de96:	d902      	bls.n	800de9e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de98:	f04f 33ff 	mov.w	r3, #4294967295
 800de9c:	e106      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	627b      	str	r3, [r7, #36]	; 0x24
 800dea4:	e068      	b.n	800df78 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	889b      	ldrh	r3, [r3, #4]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	889b      	ldrh	r3, [r3, #4]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	429a      	cmp	r2, r3
 800deba:	d235      	bcs.n	800df28 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d020      	beq.n	800df0a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	889b      	ldrh	r3, [r3, #4]
 800decc:	b29a      	uxth	r2, r3
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	88db      	ldrh	r3, [r3, #6]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d307      	bcc.n	800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ded8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deda:	88db      	ldrh	r3, [r3, #6]
 800dedc:	b29a      	uxth	r2, r3
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	889b      	ldrh	r3, [r3, #4]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d902      	bls.n	800deee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	e0de      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	88db      	ldrh	r3, [r3, #6]
 800def8:	b29a      	uxth	r2, r3
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	889b      	ldrh	r3, [r3, #4]
 800defe:	b29b      	uxth	r3, r3
 800df00:	429a      	cmp	r2, r3
 800df02:	d03d      	beq.n	800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800df08:	e03a      	b.n	800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800df0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0c:	88db      	ldrh	r3, [r3, #6]
 800df0e:	b29a      	uxth	r2, r3
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	889b      	ldrh	r3, [r3, #4]
 800df14:	b29b      	uxth	r3, r3
 800df16:	429a      	cmp	r2, r3
 800df18:	d902      	bls.n	800df20 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df1a:	f04f 33ff 	mov.w	r3, #4294967295
 800df1e:	e0c5      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	605a      	str	r2, [r3, #4]
      break;
 800df26:	e02b      	b.n	800df80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	889b      	ldrh	r3, [r3, #4]
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	889b      	ldrh	r3, [r3, #4]
 800df32:	b29b      	uxth	r3, r3
 800df34:	429a      	cmp	r2, r3
 800df36:	d102      	bne.n	800df3e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df38:	f04f 33ff 	mov.w	r3, #4294967295
 800df3c:	e0b6      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	889b      	ldrh	r3, [r3, #4]
 800df42:	b29a      	uxth	r2, r3
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	88db      	ldrh	r3, [r3, #6]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d202      	bcs.n	800df54 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df4e:	f04f 33ff 	mov.w	r3, #4294967295
 800df52:	e0ab      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	88db      	ldrh	r3, [r3, #6]
 800df5e:	b29a      	uxth	r2, r3
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	889b      	ldrh	r3, [r3, #4]
 800df64:	b29b      	uxth	r3, r3
 800df66:	429a      	cmp	r2, r3
 800df68:	d001      	beq.n	800df6e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d193      	bne.n	800dea6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800df7e:	e000      	b.n	800df82 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800df80:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d12d      	bne.n	800dfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d01c      	beq.n	800dfc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	88db      	ldrh	r3, [r3, #6]
 800df92:	b29a      	uxth	r2, r3
 800df94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df96:	889b      	ldrh	r3, [r3, #4]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d906      	bls.n	800dfac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df9e:	4b45      	ldr	r3, [pc, #276]	; (800e0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfa0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dfa4:	4944      	ldr	r1, [pc, #272]	; (800e0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dfa6:	4845      	ldr	r0, [pc, #276]	; (800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfa8:	f000 fd04 	bl	800e9b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	88db      	ldrh	r3, [r3, #6]
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfba:	889b      	ldrh	r3, [r3, #4]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d010      	beq.n	800dfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	623b      	str	r3, [r7, #32]
 800dfc6:	e00d      	b.n	800dfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d006      	beq.n	800dfde <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dfd0:	4b38      	ldr	r3, [pc, #224]	; (800e0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfd2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dfd6:	493a      	ldr	r1, [pc, #232]	; (800e0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dfd8:	4838      	ldr	r0, [pc, #224]	; (800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfda:	f000 fceb 	bl	800e9b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d105      	bne.n	800dff6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	7f9b      	ldrb	r3, [r3, #30]
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d059      	beq.n	800e0aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d04f      	beq.n	800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d006      	beq.n	800e012 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	889b      	ldrh	r3, [r3, #4]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	623b      	str	r3, [r7, #32]
 800e016:	e041      	b.n	800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e022:	e012      	b.n	800e04a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	88db      	ldrh	r3, [r3, #6]
 800e02e:	b29a      	uxth	r2, r3
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	889b      	ldrh	r3, [r3, #4]
 800e034:	b29b      	uxth	r3, r3
 800e036:	429a      	cmp	r2, r3
 800e038:	d002      	beq.n	800e040 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	623b      	str	r3, [r7, #32]
            break;
 800e03e:	e007      	b.n	800e050 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1e9      	bne.n	800e024 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d022      	beq.n	800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e05e:	4b15      	ldr	r3, [pc, #84]	; (800e0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e060:	f240 12df 	movw	r2, #479	; 0x1df
 800e064:	4917      	ldr	r1, [pc, #92]	; (800e0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e066:	4815      	ldr	r0, [pc, #84]	; (800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e068:	f000 fca4 	bl	800e9b4 <iprintf>
          LWIP_ASSERT("sanity check",
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e074:	429a      	cmp	r2, r3
 800e076:	d106      	bne.n	800e086 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e078:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e07a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e07e:	4911      	ldr	r1, [pc, #68]	; (800e0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e080:	480e      	ldr	r0, [pc, #56]	; (800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e082:	f000 fc97 	bl	800e9b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d006      	beq.n	800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e090:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e094:	490c      	ldr	r1, [pc, #48]	; (800e0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e096:	4809      	ldr	r0, [pc, #36]	; (800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e098:	f000 fc8c 	bl	800e9b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bf14      	ite	ne
 800e0a2:	2301      	movne	r3, #1
 800e0a4:	2300      	moveq	r3, #0
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	e000      	b.n	800e0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3730      	adds	r7, #48	; 0x30
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	080127c0 	.word	0x080127c0
 800e0b8:	080128a4 	.word	0x080128a4
 800e0bc:	08012808 	.word	0x08012808
 800e0c0:	080128c4 	.word	0x080128c4
 800e0c4:	080128fc 	.word	0x080128fc
 800e0c8:	0801290c 	.word	0x0801290c

0800e0cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b08e      	sub	sp, #56	; 0x38
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	f003 030f 	and.w	r3, r3, #15
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	2b14      	cmp	r3, #20
 800e0ea:	f040 8171 	bne.w	800e3d0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	88db      	ldrh	r3, [r3, #6]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f5 fef5 	bl	8003ee4 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e100:	b29b      	uxth	r3, r3
 800e102:	00db      	lsls	r3, r3, #3
 800e104:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e108:	885b      	ldrh	r3, [r3, #2]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f5 fee9 	bl	8003ee4 <lwip_htons>
 800e112:	4603      	mov	r3, r0
 800e114:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	f003 030f 	and.w	r3, r3, #15
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e12e:	429a      	cmp	r2, r3
 800e130:	f0c0 8150 	bcc.w	800e3d4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e138:	b29b      	uxth	r3, r3
 800e13a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7f7 fa6f 	bl	8005624 <pbuf_clen>
 800e146:	4603      	mov	r3, r0
 800e148:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e14a:	4b8c      	ldr	r3, [pc, #560]	; (800e37c <ip4_reass+0x2b0>)
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	8c3b      	ldrh	r3, [r7, #32]
 800e152:	4413      	add	r3, r2
 800e154:	2b0a      	cmp	r3, #10
 800e156:	dd10      	ble.n	800e17a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e158:	8c3b      	ldrh	r3, [r7, #32]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e15e:	f7ff fd81 	bl	800dc64 <ip_reass_remove_oldest_datagram>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	f000 8137 	beq.w	800e3d8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e16a:	4b84      	ldr	r3, [pc, #528]	; (800e37c <ip4_reass+0x2b0>)
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	8c3b      	ldrh	r3, [r7, #32]
 800e172:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e174:	2b0a      	cmp	r3, #10
 800e176:	f300 812f 	bgt.w	800e3d8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e17a:	4b81      	ldr	r3, [pc, #516]	; (800e380 <ip4_reass+0x2b4>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	633b      	str	r3, [r7, #48]	; 0x30
 800e180:	e015      	b.n	800e1ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e184:	695a      	ldr	r2, [r3, #20]
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d10c      	bne.n	800e1a8 <ip4_reass+0xdc>
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	699a      	ldr	r2, [r3, #24]
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	429a      	cmp	r2, r3
 800e198:	d106      	bne.n	800e1a8 <ip4_reass+0xdc>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	899a      	ldrh	r2, [r3, #12]
 800e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a0:	889b      	ldrh	r3, [r3, #4]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d006      	beq.n	800e1b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1e6      	bne.n	800e182 <ip4_reass+0xb6>
 800e1b4:	e000      	b.n	800e1b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e1b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d109      	bne.n	800e1d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e1be:	8c3b      	ldrh	r3, [r7, #32]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1c4:	f7ff fdb0 	bl	800dd28 <ip_reass_enqueue_new_datagram>
 800e1c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d11c      	bne.n	800e20a <ip4_reass+0x13e>
      goto nullreturn;
 800e1d0:	e105      	b.n	800e3de <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	88db      	ldrh	r3, [r3, #6]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f5 fe83 	bl	8003ee4 <lwip_htons>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d110      	bne.n	800e20a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	89db      	ldrh	r3, [r3, #14]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7f5 fe79 	bl	8003ee4 <lwip_htons>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	3308      	adds	r3, #8
 800e200:	2214      	movs	r2, #20
 800e202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e204:	4618      	mov	r0, r3
 800e206:	f000 fba5 	bl	800e954 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	88db      	ldrh	r3, [r3, #6]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	f003 0320 	and.w	r3, r3, #32
 800e214:	2b00      	cmp	r3, #0
 800e216:	bf0c      	ite	eq
 800e218:	2301      	moveq	r3, #1
 800e21a:	2300      	movne	r3, #0
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00e      	beq.n	800e244 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e226:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e22a:	4413      	add	r3, r2
 800e22c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e22e:	8b7a      	ldrh	r2, [r7, #26]
 800e230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e232:	429a      	cmp	r2, r3
 800e234:	f0c0 80a0 	bcc.w	800e378 <ip4_reass+0x2ac>
 800e238:	8b7b      	ldrh	r3, [r7, #26]
 800e23a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e23e:	4293      	cmp	r3, r2
 800e240:	f200 809a 	bhi.w	800e378 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e244:	69fa      	ldr	r2, [r7, #28]
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e24a:	f7ff fdd5 	bl	800ddf8 <ip_reass_chain_frag_into_datagram_and_validate>
 800e24e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e256:	f000 809b 	beq.w	800e390 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e25a:	4b48      	ldr	r3, [pc, #288]	; (800e37c <ip4_reass+0x2b0>)
 800e25c:	881a      	ldrh	r2, [r3, #0]
 800e25e:	8c3b      	ldrh	r3, [r7, #32]
 800e260:	4413      	add	r3, r2
 800e262:	b29a      	uxth	r2, r3
 800e264:	4b45      	ldr	r3, [pc, #276]	; (800e37c <ip4_reass+0x2b0>)
 800e266:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00d      	beq.n	800e28a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e26e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e272:	4413      	add	r3, r2
 800e274:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	8a7a      	ldrh	r2, [r7, #18]
 800e27a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	7f9b      	ldrb	r3, [r3, #30]
 800e280:	f043 0301 	orr.w	r3, r3, #1
 800e284:	b2da      	uxtb	r2, r3
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d171      	bne.n	800e374 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	8b9b      	ldrh	r3, [r3, #28]
 800e294:	3314      	adds	r3, #20
 800e296:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	3308      	adds	r3, #8
 800e2ae:	2214      	movs	r2, #20
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2b4:	f000 fb4e 	bl	800e954 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e2b8:	8a3b      	ldrh	r3, [r7, #16]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7f5 fe12 	bl	8003ee4 <lwip_htons>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	719a      	strb	r2, [r3, #6]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	729a      	strb	r2, [r3, #10]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e2e2:	e00d      	b.n	800e300 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e2ea:	2114      	movs	r1, #20
 800e2ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2ee:	f7f7 f88b 	bl	8005408 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7f7 f9cf 	bl	8005698 <pbuf_cat>
      r = iprh->next_pbuf;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1ee      	bne.n	800e2e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e306:	4b1e      	ldr	r3, [pc, #120]	; (800e380 <ip4_reass+0x2b4>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d102      	bne.n	800e316 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e310:	2300      	movs	r3, #0
 800e312:	637b      	str	r3, [r7, #52]	; 0x34
 800e314:	e010      	b.n	800e338 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e316:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <ip4_reass+0x2b4>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	637b      	str	r3, [r7, #52]	; 0x34
 800e31c:	e007      	b.n	800e32e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e324:	429a      	cmp	r2, r3
 800e326:	d006      	beq.n	800e336 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	637b      	str	r3, [r7, #52]	; 0x34
 800e32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1f4      	bne.n	800e31e <ip4_reass+0x252>
 800e334:	e000      	b.n	800e338 <ip4_reass+0x26c>
          break;
 800e336:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e338:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e33c:	f7ff fd2e 	bl	800dd9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7f7 f96f 	bl	8005624 <pbuf_clen>
 800e346:	4603      	mov	r3, r0
 800e348:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e34a:	4b0c      	ldr	r3, [pc, #48]	; (800e37c <ip4_reass+0x2b0>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	8c3a      	ldrh	r2, [r7, #32]
 800e350:	429a      	cmp	r2, r3
 800e352:	d906      	bls.n	800e362 <ip4_reass+0x296>
 800e354:	4b0b      	ldr	r3, [pc, #44]	; (800e384 <ip4_reass+0x2b8>)
 800e356:	f240 229b 	movw	r2, #667	; 0x29b
 800e35a:	490b      	ldr	r1, [pc, #44]	; (800e388 <ip4_reass+0x2bc>)
 800e35c:	480b      	ldr	r0, [pc, #44]	; (800e38c <ip4_reass+0x2c0>)
 800e35e:	f000 fb29 	bl	800e9b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e362:	4b06      	ldr	r3, [pc, #24]	; (800e37c <ip4_reass+0x2b0>)
 800e364:	881a      	ldrh	r2, [r3, #0]
 800e366:	8c3b      	ldrh	r3, [r7, #32]
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	4b03      	ldr	r3, [pc, #12]	; (800e37c <ip4_reass+0x2b0>)
 800e36e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	e038      	b.n	800e3e6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e374:	2300      	movs	r3, #0
 800e376:	e036      	b.n	800e3e6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e378:	bf00      	nop
 800e37a:	e00a      	b.n	800e392 <ip4_reass+0x2c6>
 800e37c:	20008ab4 	.word	0x20008ab4
 800e380:	20008ab0 	.word	0x20008ab0
 800e384:	080127c0 	.word	0x080127c0
 800e388:	08012930 	.word	0x08012930
 800e38c:	08012808 	.word	0x08012808
    goto nullreturn_ipr;
 800e390:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	2b00      	cmp	r3, #0
 800e396:	d106      	bne.n	800e3a6 <ip4_reass+0x2da>
 800e398:	4b15      	ldr	r3, [pc, #84]	; (800e3f0 <ip4_reass+0x324>)
 800e39a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e39e:	4915      	ldr	r1, [pc, #84]	; (800e3f4 <ip4_reass+0x328>)
 800e3a0:	4815      	ldr	r0, [pc, #84]	; (800e3f8 <ip4_reass+0x32c>)
 800e3a2:	f000 fb07 	bl	800e9b4 <iprintf>
  if (ipr->p == NULL) {
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d116      	bne.n	800e3dc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e3ae:	4b13      	ldr	r3, [pc, #76]	; (800e3fc <ip4_reass+0x330>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d006      	beq.n	800e3c6 <ip4_reass+0x2fa>
 800e3b8:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <ip4_reass+0x324>)
 800e3ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e3be:	4910      	ldr	r1, [pc, #64]	; (800e400 <ip4_reass+0x334>)
 800e3c0:	480d      	ldr	r0, [pc, #52]	; (800e3f8 <ip4_reass+0x32c>)
 800e3c2:	f000 faf7 	bl	800e9b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3ca:	f7ff fce7 	bl	800dd9c <ip_reass_dequeue_datagram>
 800e3ce:	e006      	b.n	800e3de <ip4_reass+0x312>
    goto nullreturn;
 800e3d0:	bf00      	nop
 800e3d2:	e004      	b.n	800e3de <ip4_reass+0x312>
    goto nullreturn;
 800e3d4:	bf00      	nop
 800e3d6:	e002      	b.n	800e3de <ip4_reass+0x312>
      goto nullreturn;
 800e3d8:	bf00      	nop
 800e3da:	e000      	b.n	800e3de <ip4_reass+0x312>
  }

nullreturn:
 800e3dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7f7 f898 	bl	8005514 <pbuf_free>
  return NULL;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3738      	adds	r7, #56	; 0x38
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	080127c0 	.word	0x080127c0
 800e3f4:	0801294c 	.word	0x0801294c
 800e3f8:	08012808 	.word	0x08012808
 800e3fc:	20008ab0 	.word	0x20008ab0
 800e400:	08012958 	.word	0x08012958

0800e404 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e408:	2005      	movs	r0, #5
 800e40a:	f7f6 f9c1 	bl	8004790 <memp_malloc>
 800e40e:	4603      	mov	r3, r0
}
 800e410:	4618      	mov	r0, r3
 800e412:	bd80      	pop	{r7, pc}

0800e414 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e422:	4b07      	ldr	r3, [pc, #28]	; (800e440 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e424:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e428:	4906      	ldr	r1, [pc, #24]	; (800e444 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e42a:	4807      	ldr	r0, [pc, #28]	; (800e448 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e42c:	f000 fac2 	bl	800e9b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	2005      	movs	r0, #5
 800e434:	f7f6 f9f8 	bl	8004828 <memp_free>
}
 800e438:	bf00      	nop
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	080127c0 	.word	0x080127c0
 800e444:	08012978 	.word	0x08012978
 800e448:	08012808 	.word	0x08012808

0800e44c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d106      	bne.n	800e46c <ipfrag_free_pbuf_custom+0x20>
 800e45e:	4b11      	ldr	r3, [pc, #68]	; (800e4a4 <ipfrag_free_pbuf_custom+0x58>)
 800e460:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e464:	4910      	ldr	r1, [pc, #64]	; (800e4a8 <ipfrag_free_pbuf_custom+0x5c>)
 800e466:	4811      	ldr	r0, [pc, #68]	; (800e4ac <ipfrag_free_pbuf_custom+0x60>)
 800e468:	f000 faa4 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d006      	beq.n	800e482 <ipfrag_free_pbuf_custom+0x36>
 800e474:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <ipfrag_free_pbuf_custom+0x58>)
 800e476:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e47a:	490d      	ldr	r1, [pc, #52]	; (800e4b0 <ipfrag_free_pbuf_custom+0x64>)
 800e47c:	480b      	ldr	r0, [pc, #44]	; (800e4ac <ipfrag_free_pbuf_custom+0x60>)
 800e47e:	f000 fa99 	bl	800e9b4 <iprintf>
  if (pcr->original != NULL) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d004      	beq.n	800e494 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f7 f840 	bl	8005514 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff ffbd 	bl	800e414 <ip_frag_free_pbuf_custom_ref>
}
 800e49a:	bf00      	nop
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	080127c0 	.word	0x080127c0
 800e4a8:	08012984 	.word	0x08012984
 800e4ac:	08012808 	.word	0x08012808
 800e4b0:	08012990 	.word	0x08012990

0800e4b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b094      	sub	sp, #80	; 0x50
 800e4b8:	af02      	add	r7, sp, #8
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e4ca:	3b14      	subs	r3, #20
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	da00      	bge.n	800e4d2 <ip4_frag+0x1e>
 800e4d0:	3307      	adds	r3, #7
 800e4d2:	10db      	asrs	r3, r3, #3
 800e4d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e4d6:	2314      	movs	r3, #20
 800e4d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	f003 030f 	and.w	r3, r3, #15
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2b14      	cmp	r3, #20
 800e4f4:	d002      	beq.n	800e4fc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e4f6:	f06f 0305 	mvn.w	r3, #5
 800e4fa:	e110      	b.n	800e71e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	895b      	ldrh	r3, [r3, #10]
 800e500:	2b13      	cmp	r3, #19
 800e502:	d809      	bhi.n	800e518 <ip4_frag+0x64>
 800e504:	4b88      	ldr	r3, [pc, #544]	; (800e728 <ip4_frag+0x274>)
 800e506:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e50a:	4988      	ldr	r1, [pc, #544]	; (800e72c <ip4_frag+0x278>)
 800e50c:	4888      	ldr	r0, [pc, #544]	; (800e730 <ip4_frag+0x27c>)
 800e50e:	f000 fa51 	bl	800e9b4 <iprintf>
 800e512:	f06f 0305 	mvn.w	r3, #5
 800e516:	e102      	b.n	800e71e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	88db      	ldrh	r3, [r3, #6]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f5 fce0 	bl	8003ee4 <lwip_htons>
 800e524:	4603      	mov	r3, r0
 800e526:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e528:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e52a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e52e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e532:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e538:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	891b      	ldrh	r3, [r3, #8]
 800e53e:	3b14      	subs	r3, #20
 800e540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e544:	e0e1      	b.n	800e70a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e546:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e548:	00db      	lsls	r3, r3, #3
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e550:	4293      	cmp	r3, r2
 800e552:	bf28      	it	cs
 800e554:	4613      	movcs	r3, r2
 800e556:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e558:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e55c:	2114      	movs	r1, #20
 800e55e:	200e      	movs	r0, #14
 800e560:	f7f6 fcf4 	bl	8004f4c <pbuf_alloc>
 800e564:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 80d5 	beq.w	800e718 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	895b      	ldrh	r3, [r3, #10]
 800e572:	2b13      	cmp	r3, #19
 800e574:	d806      	bhi.n	800e584 <ip4_frag+0xd0>
 800e576:	4b6c      	ldr	r3, [pc, #432]	; (800e728 <ip4_frag+0x274>)
 800e578:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e57c:	496d      	ldr	r1, [pc, #436]	; (800e734 <ip4_frag+0x280>)
 800e57e:	486c      	ldr	r0, [pc, #432]	; (800e730 <ip4_frag+0x27c>)
 800e580:	f000 fa18 	bl	800e9b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	2214      	movs	r2, #20
 800e58a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e58c:	4618      	mov	r0, r3
 800e58e:	f000 f9e1 	bl	800e954 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e598:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e59a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e59e:	e064      	b.n	800e66a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	895a      	ldrh	r2, [r3, #10]
 800e5a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	895b      	ldrh	r3, [r3, #10]
 800e5ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d906      	bls.n	800e5c2 <ip4_frag+0x10e>
 800e5b4:	4b5c      	ldr	r3, [pc, #368]	; (800e728 <ip4_frag+0x274>)
 800e5b6:	f240 322d 	movw	r2, #813	; 0x32d
 800e5ba:	495f      	ldr	r1, [pc, #380]	; (800e738 <ip4_frag+0x284>)
 800e5bc:	485c      	ldr	r0, [pc, #368]	; (800e730 <ip4_frag+0x27c>)
 800e5be:	f000 f9f9 	bl	800e9b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e5c2:	8bfa      	ldrh	r2, [r7, #30]
 800e5c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	bf28      	it	cs
 800e5cc:	4613      	movcs	r3, r2
 800e5ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e5d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <ip4_frag+0x132>
        poff = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60fb      	str	r3, [r7, #12]
        continue;
 800e5e4:	e041      	b.n	800e66a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e5e6:	f7ff ff0d 	bl	800e404 <ip_frag_alloc_pbuf_custom_ref>
 800e5ea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d103      	bne.n	800e5fa <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f4:	f7f6 ff8e 	bl	8005514 <pbuf_free>
        goto memerr;
 800e5f8:	e08f      	b.n	800e71a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e5fa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e600:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e602:	4413      	add	r3, r2
 800e604:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e608:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e60c:	9201      	str	r2, [sp, #4]
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4603      	mov	r3, r0
 800e612:	2241      	movs	r2, #65	; 0x41
 800e614:	2000      	movs	r0, #0
 800e616:	f7f6 fdc3 	bl	80051a0 <pbuf_alloced_custom>
 800e61a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e622:	69b8      	ldr	r0, [r7, #24]
 800e624:	f7ff fef6 	bl	800e414 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e62a:	f7f6 ff73 	bl	8005514 <pbuf_free>
        goto memerr;
 800e62e:	e074      	b.n	800e71a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7f7 f80f 	bl	8005654 <pbuf_ref>
      pcr->original = p;
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	4a3f      	ldr	r2, [pc, #252]	; (800e73c <ip4_frag+0x288>)
 800e640:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e642:	6979      	ldr	r1, [r7, #20]
 800e644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e646:	f7f7 f827 	bl	8005698 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e64a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e64e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e658:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d004      	beq.n	800e66a <ip4_frag+0x1b6>
        poff = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e66a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d196      	bne.n	800e5a0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e672:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e674:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e678:	4413      	add	r3, r2
 800e67a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e680:	f1a3 0213 	sub.w	r2, r3, #19
 800e684:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e688:	429a      	cmp	r2, r3
 800e68a:	bfcc      	ite	gt
 800e68c:	2301      	movgt	r3, #1
 800e68e:	2300      	movle	r3, #0
 800e690:	b2db      	uxtb	r3, r3
 800e692:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e694:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e69c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <ip4_frag+0x1f6>
 800e6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e6aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e6b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f5 fc15 	bl	8003ee4 <lwip_htons>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	461a      	mov	r2, r3
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e6c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6c4:	3314      	adds	r3, #20
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7f5 fc0b 	bl	8003ee4 <lwip_htons>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d8:	2200      	movs	r2, #0
 800e6da:	729a      	strb	r2, [r3, #10]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6e8:	68b8      	ldr	r0, [r7, #8]
 800e6ea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e6ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6ee:	f7f6 ff11 	bl	8005514 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e6f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e6fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e702:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e704:	4413      	add	r3, r2
 800e706:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e70a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f47f af19 	bne.w	800e546 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	e002      	b.n	800e71e <ip4_frag+0x26a>
      goto memerr;
 800e718:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e71a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3748      	adds	r7, #72	; 0x48
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	080127c0 	.word	0x080127c0
 800e72c:	0801299c 	.word	0x0801299c
 800e730:	08012808 	.word	0x08012808
 800e734:	080129b8 	.word	0x080129b8
 800e738:	080129d8 	.word	0x080129d8
 800e73c:	0800e44d 	.word	0x0800e44d

0800e740 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e74a:	230e      	movs	r3, #14
 800e74c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	895b      	ldrh	r3, [r3, #10]
 800e752:	2b0e      	cmp	r3, #14
 800e754:	d96e      	bls.n	800e834 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	7bdb      	ldrb	r3, [r3, #15]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e764:	3301      	adds	r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	7b1a      	ldrb	r2, [r3, #12]
 800e776:	7b5b      	ldrb	r3, [r3, #13]
 800e778:	021b      	lsls	r3, r3, #8
 800e77a:	4313      	orrs	r3, r2
 800e77c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	2b00      	cmp	r3, #0
 800e788:	d023      	beq.n	800e7d2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d10f      	bne.n	800e7b2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	785b      	ldrb	r3, [r3, #1]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d11b      	bne.n	800e7d2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e79e:	2b5e      	cmp	r3, #94	; 0x5e
 800e7a0:	d117      	bne.n	800e7d2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7b5b      	ldrb	r3, [r3, #13]
 800e7a6:	f043 0310 	orr.w	r3, r3, #16
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	735a      	strb	r2, [r3, #13]
 800e7b0:	e00f      	b.n	800e7d2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	2206      	movs	r2, #6
 800e7b6:	4928      	ldr	r1, [pc, #160]	; (800e858 <ethernet_input+0x118>)
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 f8bb 	bl	800e934 <memcmp>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7b5b      	ldrb	r3, [r3, #13]
 800e7c8:	f043 0308 	orr.w	r3, r3, #8
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e7d2:	89fb      	ldrh	r3, [r7, #14]
 800e7d4:	2b08      	cmp	r3, #8
 800e7d6:	d003      	beq.n	800e7e0 <ethernet_input+0xa0>
 800e7d8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e7dc:	d014      	beq.n	800e808 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e7de:	e032      	b.n	800e846 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7e6:	f003 0308 	and.w	r3, r3, #8
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d024      	beq.n	800e838 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7ee:	8afb      	ldrh	r3, [r7, #22]
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7f6 fe08 	bl	8005408 <pbuf_remove_header>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d11e      	bne.n	800e83c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7fe fe91 	bl	800d528 <ip4_input>
      break;
 800e806:	e013      	b.n	800e830 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e80e:	f003 0308 	and.w	r3, r3, #8
 800e812:	2b00      	cmp	r3, #0
 800e814:	d014      	beq.n	800e840 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e816:	8afb      	ldrh	r3, [r7, #22]
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7f6 fdf4 	bl	8005408 <pbuf_remove_header>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10e      	bne.n	800e844 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7fe f82b 	bl	800c884 <etharp_input>
      break;
 800e82e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	e00c      	b.n	800e84e <ethernet_input+0x10e>
    goto free_and_return;
 800e834:	bf00      	nop
 800e836:	e006      	b.n	800e846 <ethernet_input+0x106>
        goto free_and_return;
 800e838:	bf00      	nop
 800e83a:	e004      	b.n	800e846 <ethernet_input+0x106>
        goto free_and_return;
 800e83c:	bf00      	nop
 800e83e:	e002      	b.n	800e846 <ethernet_input+0x106>
        goto free_and_return;
 800e840:	bf00      	nop
 800e842:	e000      	b.n	800e846 <ethernet_input+0x106>
        goto free_and_return;
 800e844:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7f6 fe64 	bl	8005514 <pbuf_free>
  return ERR_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	08012b84 	.word	0x08012b84

0800e85c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e86a:	8c3b      	ldrh	r3, [r7, #32]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f5 fb39 	bl	8003ee4 <lwip_htons>
 800e872:	4603      	mov	r3, r0
 800e874:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e876:	210e      	movs	r1, #14
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f7f6 fdb5 	bl	80053e8 <pbuf_add_header>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d125      	bne.n	800e8d0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	8afa      	ldrh	r2, [r7, #22]
 800e88e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2206      	movs	r2, #6
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f85c 	bl	800e954 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	3306      	adds	r3, #6
 800e8a0:	2206      	movs	r2, #6
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 f855 	bl	800e954 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8b0:	2b06      	cmp	r3, #6
 800e8b2:	d006      	beq.n	800e8c2 <ethernet_output+0x66>
 800e8b4:	4b0a      	ldr	r3, [pc, #40]	; (800e8e0 <ethernet_output+0x84>)
 800e8b6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e8ba:	490a      	ldr	r1, [pc, #40]	; (800e8e4 <ethernet_output+0x88>)
 800e8bc:	480a      	ldr	r0, [pc, #40]	; (800e8e8 <ethernet_output+0x8c>)
 800e8be:	f000 f879 	bl	800e9b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	4798      	blx	r3
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	e002      	b.n	800e8d6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e8d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e8d2:	f06f 0301 	mvn.w	r3, #1
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	080129e8 	.word	0x080129e8
 800e8e4:	08012a20 	.word	0x08012a20
 800e8e8:	08012a54 	.word	0x08012a54

0800e8ec <__libc_init_array>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	4d0d      	ldr	r5, [pc, #52]	; (800e924 <__libc_init_array+0x38>)
 800e8f0:	4c0d      	ldr	r4, [pc, #52]	; (800e928 <__libc_init_array+0x3c>)
 800e8f2:	1b64      	subs	r4, r4, r5
 800e8f4:	10a4      	asrs	r4, r4, #2
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	42a6      	cmp	r6, r4
 800e8fa:	d109      	bne.n	800e910 <__libc_init_array+0x24>
 800e8fc:	4d0b      	ldr	r5, [pc, #44]	; (800e92c <__libc_init_array+0x40>)
 800e8fe:	4c0c      	ldr	r4, [pc, #48]	; (800e930 <__libc_init_array+0x44>)
 800e900:	f001 faee 	bl	800fee0 <_init>
 800e904:	1b64      	subs	r4, r4, r5
 800e906:	10a4      	asrs	r4, r4, #2
 800e908:	2600      	movs	r6, #0
 800e90a:	42a6      	cmp	r6, r4
 800e90c:	d105      	bne.n	800e91a <__libc_init_array+0x2e>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f855 3b04 	ldr.w	r3, [r5], #4
 800e914:	4798      	blx	r3
 800e916:	3601      	adds	r6, #1
 800e918:	e7ee      	b.n	800e8f8 <__libc_init_array+0xc>
 800e91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91e:	4798      	blx	r3
 800e920:	3601      	adds	r6, #1
 800e922:	e7f2      	b.n	800e90a <__libc_init_array+0x1e>
 800e924:	08012ce4 	.word	0x08012ce4
 800e928:	08012ce4 	.word	0x08012ce4
 800e92c:	08012ce4 	.word	0x08012ce4
 800e930:	08012ce8 	.word	0x08012ce8

0800e934 <memcmp>:
 800e934:	b510      	push	{r4, lr}
 800e936:	3901      	subs	r1, #1
 800e938:	4402      	add	r2, r0
 800e93a:	4290      	cmp	r0, r2
 800e93c:	d101      	bne.n	800e942 <memcmp+0xe>
 800e93e:	2000      	movs	r0, #0
 800e940:	e005      	b.n	800e94e <memcmp+0x1a>
 800e942:	7803      	ldrb	r3, [r0, #0]
 800e944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e948:	42a3      	cmp	r3, r4
 800e94a:	d001      	beq.n	800e950 <memcmp+0x1c>
 800e94c:	1b18      	subs	r0, r3, r4
 800e94e:	bd10      	pop	{r4, pc}
 800e950:	3001      	adds	r0, #1
 800e952:	e7f2      	b.n	800e93a <memcmp+0x6>

0800e954 <memcpy>:
 800e954:	440a      	add	r2, r1
 800e956:	4291      	cmp	r1, r2
 800e958:	f100 33ff 	add.w	r3, r0, #4294967295
 800e95c:	d100      	bne.n	800e960 <memcpy+0xc>
 800e95e:	4770      	bx	lr
 800e960:	b510      	push	{r4, lr}
 800e962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e96a:	4291      	cmp	r1, r2
 800e96c:	d1f9      	bne.n	800e962 <memcpy+0xe>
 800e96e:	bd10      	pop	{r4, pc}

0800e970 <memmove>:
 800e970:	4288      	cmp	r0, r1
 800e972:	b510      	push	{r4, lr}
 800e974:	eb01 0402 	add.w	r4, r1, r2
 800e978:	d902      	bls.n	800e980 <memmove+0x10>
 800e97a:	4284      	cmp	r4, r0
 800e97c:	4623      	mov	r3, r4
 800e97e:	d807      	bhi.n	800e990 <memmove+0x20>
 800e980:	1e43      	subs	r3, r0, #1
 800e982:	42a1      	cmp	r1, r4
 800e984:	d008      	beq.n	800e998 <memmove+0x28>
 800e986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e98a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e98e:	e7f8      	b.n	800e982 <memmove+0x12>
 800e990:	4402      	add	r2, r0
 800e992:	4601      	mov	r1, r0
 800e994:	428a      	cmp	r2, r1
 800e996:	d100      	bne.n	800e99a <memmove+0x2a>
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e99e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9a2:	e7f7      	b.n	800e994 <memmove+0x24>

0800e9a4 <memset>:
 800e9a4:	4402      	add	r2, r0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d100      	bne.n	800e9ae <memset+0xa>
 800e9ac:	4770      	bx	lr
 800e9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800e9b2:	e7f9      	b.n	800e9a8 <memset+0x4>

0800e9b4 <iprintf>:
 800e9b4:	b40f      	push	{r0, r1, r2, r3}
 800e9b6:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <iprintf+0x2c>)
 800e9b8:	b513      	push	{r0, r1, r4, lr}
 800e9ba:	681c      	ldr	r4, [r3, #0]
 800e9bc:	b124      	cbz	r4, 800e9c8 <iprintf+0x14>
 800e9be:	69a3      	ldr	r3, [r4, #24]
 800e9c0:	b913      	cbnz	r3, 800e9c8 <iprintf+0x14>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 faf6 	bl	800efb4 <__sinit>
 800e9c8:	ab05      	add	r3, sp, #20
 800e9ca:	9a04      	ldr	r2, [sp, #16]
 800e9cc:	68a1      	ldr	r1, [r4, #8]
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fe75 	bl	800f6c0 <_vfiprintf_r>
 800e9d6:	b002      	add	sp, #8
 800e9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9dc:	b004      	add	sp, #16
 800e9de:	4770      	bx	lr
 800e9e0:	20000014 	.word	0x20000014

0800e9e4 <_puts_r>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	460e      	mov	r6, r1
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	b118      	cbz	r0, 800e9f4 <_puts_r+0x10>
 800e9ec:	6983      	ldr	r3, [r0, #24]
 800e9ee:	b90b      	cbnz	r3, 800e9f4 <_puts_r+0x10>
 800e9f0:	f000 fae0 	bl	800efb4 <__sinit>
 800e9f4:	69ab      	ldr	r3, [r5, #24]
 800e9f6:	68ac      	ldr	r4, [r5, #8]
 800e9f8:	b913      	cbnz	r3, 800ea00 <_puts_r+0x1c>
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	f000 fada 	bl	800efb4 <__sinit>
 800ea00:	4b2c      	ldr	r3, [pc, #176]	; (800eab4 <_puts_r+0xd0>)
 800ea02:	429c      	cmp	r4, r3
 800ea04:	d120      	bne.n	800ea48 <_puts_r+0x64>
 800ea06:	686c      	ldr	r4, [r5, #4]
 800ea08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea0a:	07db      	lsls	r3, r3, #31
 800ea0c:	d405      	bmi.n	800ea1a <_puts_r+0x36>
 800ea0e:	89a3      	ldrh	r3, [r4, #12]
 800ea10:	0598      	lsls	r0, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_puts_r+0x36>
 800ea14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea16:	f000 fb7d 	bl	800f114 <__retarget_lock_acquire_recursive>
 800ea1a:	89a3      	ldrh	r3, [r4, #12]
 800ea1c:	0719      	lsls	r1, r3, #28
 800ea1e:	d51d      	bpl.n	800ea5c <_puts_r+0x78>
 800ea20:	6923      	ldr	r3, [r4, #16]
 800ea22:	b1db      	cbz	r3, 800ea5c <_puts_r+0x78>
 800ea24:	3e01      	subs	r6, #1
 800ea26:	68a3      	ldr	r3, [r4, #8]
 800ea28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	60a3      	str	r3, [r4, #8]
 800ea30:	bb39      	cbnz	r1, 800ea82 <_puts_r+0x9e>
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	da38      	bge.n	800eaa8 <_puts_r+0xc4>
 800ea36:	4622      	mov	r2, r4
 800ea38:	210a      	movs	r1, #10
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f000 f8c2 	bl	800ebc4 <__swbuf_r>
 800ea40:	3001      	adds	r0, #1
 800ea42:	d011      	beq.n	800ea68 <_puts_r+0x84>
 800ea44:	250a      	movs	r5, #10
 800ea46:	e011      	b.n	800ea6c <_puts_r+0x88>
 800ea48:	4b1b      	ldr	r3, [pc, #108]	; (800eab8 <_puts_r+0xd4>)
 800ea4a:	429c      	cmp	r4, r3
 800ea4c:	d101      	bne.n	800ea52 <_puts_r+0x6e>
 800ea4e:	68ac      	ldr	r4, [r5, #8]
 800ea50:	e7da      	b.n	800ea08 <_puts_r+0x24>
 800ea52:	4b1a      	ldr	r3, [pc, #104]	; (800eabc <_puts_r+0xd8>)
 800ea54:	429c      	cmp	r4, r3
 800ea56:	bf08      	it	eq
 800ea58:	68ec      	ldreq	r4, [r5, #12]
 800ea5a:	e7d5      	b.n	800ea08 <_puts_r+0x24>
 800ea5c:	4621      	mov	r1, r4
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f000 f902 	bl	800ec68 <__swsetup_r>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d0dd      	beq.n	800ea24 <_puts_r+0x40>
 800ea68:	f04f 35ff 	mov.w	r5, #4294967295
 800ea6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea6e:	07da      	lsls	r2, r3, #31
 800ea70:	d405      	bmi.n	800ea7e <_puts_r+0x9a>
 800ea72:	89a3      	ldrh	r3, [r4, #12]
 800ea74:	059b      	lsls	r3, r3, #22
 800ea76:	d402      	bmi.n	800ea7e <_puts_r+0x9a>
 800ea78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea7a:	f000 fb4c 	bl	800f116 <__retarget_lock_release_recursive>
 800ea7e:	4628      	mov	r0, r5
 800ea80:	bd70      	pop	{r4, r5, r6, pc}
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	da04      	bge.n	800ea90 <_puts_r+0xac>
 800ea86:	69a2      	ldr	r2, [r4, #24]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	dc06      	bgt.n	800ea9a <_puts_r+0xb6>
 800ea8c:	290a      	cmp	r1, #10
 800ea8e:	d004      	beq.n	800ea9a <_puts_r+0xb6>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	6022      	str	r2, [r4, #0]
 800ea96:	7019      	strb	r1, [r3, #0]
 800ea98:	e7c5      	b.n	800ea26 <_puts_r+0x42>
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f000 f891 	bl	800ebc4 <__swbuf_r>
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	d1bf      	bne.n	800ea26 <_puts_r+0x42>
 800eaa6:	e7df      	b.n	800ea68 <_puts_r+0x84>
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	250a      	movs	r5, #10
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	6022      	str	r2, [r4, #0]
 800eab0:	701d      	strb	r5, [r3, #0]
 800eab2:	e7db      	b.n	800ea6c <_puts_r+0x88>
 800eab4:	08012c68 	.word	0x08012c68
 800eab8:	08012c88 	.word	0x08012c88
 800eabc:	08012c48 	.word	0x08012c48

0800eac0 <puts>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <puts+0xc>)
 800eac2:	4601      	mov	r1, r0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f7ff bf8d 	b.w	800e9e4 <_puts_r>
 800eaca:	bf00      	nop
 800eacc:	20000014 	.word	0x20000014

0800ead0 <rand>:
 800ead0:	4b16      	ldr	r3, [pc, #88]	; (800eb2c <rand+0x5c>)
 800ead2:	b510      	push	{r4, lr}
 800ead4:	681c      	ldr	r4, [r3, #0]
 800ead6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ead8:	b9b3      	cbnz	r3, 800eb08 <rand+0x38>
 800eada:	2018      	movs	r0, #24
 800eadc:	f000 fb82 	bl	800f1e4 <malloc>
 800eae0:	63a0      	str	r0, [r4, #56]	; 0x38
 800eae2:	b928      	cbnz	r0, 800eaf0 <rand+0x20>
 800eae4:	4602      	mov	r2, r0
 800eae6:	4b12      	ldr	r3, [pc, #72]	; (800eb30 <rand+0x60>)
 800eae8:	4812      	ldr	r0, [pc, #72]	; (800eb34 <rand+0x64>)
 800eaea:	214e      	movs	r1, #78	; 0x4e
 800eaec:	f000 f92a 	bl	800ed44 <__assert_func>
 800eaf0:	4a11      	ldr	r2, [pc, #68]	; (800eb38 <rand+0x68>)
 800eaf2:	4b12      	ldr	r3, [pc, #72]	; (800eb3c <rand+0x6c>)
 800eaf4:	e9c0 2300 	strd	r2, r3, [r0]
 800eaf8:	4b11      	ldr	r3, [pc, #68]	; (800eb40 <rand+0x70>)
 800eafa:	6083      	str	r3, [r0, #8]
 800eafc:	230b      	movs	r3, #11
 800eafe:	8183      	strh	r3, [r0, #12]
 800eb00:	2201      	movs	r2, #1
 800eb02:	2300      	movs	r3, #0
 800eb04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eb08:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800eb0a:	4a0e      	ldr	r2, [pc, #56]	; (800eb44 <rand+0x74>)
 800eb0c:	6920      	ldr	r0, [r4, #16]
 800eb0e:	6963      	ldr	r3, [r4, #20]
 800eb10:	490d      	ldr	r1, [pc, #52]	; (800eb48 <rand+0x78>)
 800eb12:	4342      	muls	r2, r0
 800eb14:	fb01 2203 	mla	r2, r1, r3, r2
 800eb18:	fba0 0101 	umull	r0, r1, r0, r1
 800eb1c:	1c43      	adds	r3, r0, #1
 800eb1e:	eb42 0001 	adc.w	r0, r2, r1
 800eb22:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800eb26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb2a:	bd10      	pop	{r4, pc}
 800eb2c:	20000014 	.word	0x20000014
 800eb30:	08012b98 	.word	0x08012b98
 800eb34:	08012baf 	.word	0x08012baf
 800eb38:	abcd330e 	.word	0xabcd330e
 800eb3c:	e66d1234 	.word	0xe66d1234
 800eb40:	0005deec 	.word	0x0005deec
 800eb44:	5851f42d 	.word	0x5851f42d
 800eb48:	4c957f2d 	.word	0x4c957f2d

0800eb4c <sniprintf>:
 800eb4c:	b40c      	push	{r2, r3}
 800eb4e:	b530      	push	{r4, r5, lr}
 800eb50:	4b17      	ldr	r3, [pc, #92]	; (800ebb0 <sniprintf+0x64>)
 800eb52:	1e0c      	subs	r4, r1, #0
 800eb54:	681d      	ldr	r5, [r3, #0]
 800eb56:	b09d      	sub	sp, #116	; 0x74
 800eb58:	da08      	bge.n	800eb6c <sniprintf+0x20>
 800eb5a:	238b      	movs	r3, #139	; 0x8b
 800eb5c:	602b      	str	r3, [r5, #0]
 800eb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb62:	b01d      	add	sp, #116	; 0x74
 800eb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb68:	b002      	add	sp, #8
 800eb6a:	4770      	bx	lr
 800eb6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb74:	bf14      	ite	ne
 800eb76:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eb7a:	4623      	moveq	r3, r4
 800eb7c:	9304      	str	r3, [sp, #16]
 800eb7e:	9307      	str	r3, [sp, #28]
 800eb80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	9006      	str	r0, [sp, #24]
 800eb88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb8e:	ab21      	add	r3, sp, #132	; 0x84
 800eb90:	a902      	add	r1, sp, #8
 800eb92:	4628      	mov	r0, r5
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	f000 fc69 	bl	800f46c <_svfiprintf_r>
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	bfbc      	itt	lt
 800eb9e:	238b      	movlt	r3, #139	; 0x8b
 800eba0:	602b      	strlt	r3, [r5, #0]
 800eba2:	2c00      	cmp	r4, #0
 800eba4:	d0dd      	beq.n	800eb62 <sniprintf+0x16>
 800eba6:	9b02      	ldr	r3, [sp, #8]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	e7d9      	b.n	800eb62 <sniprintf+0x16>
 800ebae:	bf00      	nop
 800ebb0:	20000014 	.word	0x20000014

0800ebb4 <strcpy>:
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebba:	f803 2b01 	strb.w	r2, [r3], #1
 800ebbe:	2a00      	cmp	r2, #0
 800ebc0:	d1f9      	bne.n	800ebb6 <strcpy+0x2>
 800ebc2:	4770      	bx	lr

0800ebc4 <__swbuf_r>:
 800ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc6:	460e      	mov	r6, r1
 800ebc8:	4614      	mov	r4, r2
 800ebca:	4605      	mov	r5, r0
 800ebcc:	b118      	cbz	r0, 800ebd6 <__swbuf_r+0x12>
 800ebce:	6983      	ldr	r3, [r0, #24]
 800ebd0:	b90b      	cbnz	r3, 800ebd6 <__swbuf_r+0x12>
 800ebd2:	f000 f9ef 	bl	800efb4 <__sinit>
 800ebd6:	4b21      	ldr	r3, [pc, #132]	; (800ec5c <__swbuf_r+0x98>)
 800ebd8:	429c      	cmp	r4, r3
 800ebda:	d12b      	bne.n	800ec34 <__swbuf_r+0x70>
 800ebdc:	686c      	ldr	r4, [r5, #4]
 800ebde:	69a3      	ldr	r3, [r4, #24]
 800ebe0:	60a3      	str	r3, [r4, #8]
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	071a      	lsls	r2, r3, #28
 800ebe6:	d52f      	bpl.n	800ec48 <__swbuf_r+0x84>
 800ebe8:	6923      	ldr	r3, [r4, #16]
 800ebea:	b36b      	cbz	r3, 800ec48 <__swbuf_r+0x84>
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	1ac0      	subs	r0, r0, r3
 800ebf2:	6963      	ldr	r3, [r4, #20]
 800ebf4:	b2f6      	uxtb	r6, r6
 800ebf6:	4283      	cmp	r3, r0
 800ebf8:	4637      	mov	r7, r6
 800ebfa:	dc04      	bgt.n	800ec06 <__swbuf_r+0x42>
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f000 f944 	bl	800ee8c <_fflush_r>
 800ec04:	bb30      	cbnz	r0, 800ec54 <__swbuf_r+0x90>
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	60a3      	str	r3, [r4, #8]
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	6022      	str	r2, [r4, #0]
 800ec12:	701e      	strb	r6, [r3, #0]
 800ec14:	6963      	ldr	r3, [r4, #20]
 800ec16:	3001      	adds	r0, #1
 800ec18:	4283      	cmp	r3, r0
 800ec1a:	d004      	beq.n	800ec26 <__swbuf_r+0x62>
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	07db      	lsls	r3, r3, #31
 800ec20:	d506      	bpl.n	800ec30 <__swbuf_r+0x6c>
 800ec22:	2e0a      	cmp	r6, #10
 800ec24:	d104      	bne.n	800ec30 <__swbuf_r+0x6c>
 800ec26:	4621      	mov	r1, r4
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f000 f92f 	bl	800ee8c <_fflush_r>
 800ec2e:	b988      	cbnz	r0, 800ec54 <__swbuf_r+0x90>
 800ec30:	4638      	mov	r0, r7
 800ec32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <__swbuf_r+0x9c>)
 800ec36:	429c      	cmp	r4, r3
 800ec38:	d101      	bne.n	800ec3e <__swbuf_r+0x7a>
 800ec3a:	68ac      	ldr	r4, [r5, #8]
 800ec3c:	e7cf      	b.n	800ebde <__swbuf_r+0x1a>
 800ec3e:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <__swbuf_r+0xa0>)
 800ec40:	429c      	cmp	r4, r3
 800ec42:	bf08      	it	eq
 800ec44:	68ec      	ldreq	r4, [r5, #12]
 800ec46:	e7ca      	b.n	800ebde <__swbuf_r+0x1a>
 800ec48:	4621      	mov	r1, r4
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 f80c 	bl	800ec68 <__swsetup_r>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d0cb      	beq.n	800ebec <__swbuf_r+0x28>
 800ec54:	f04f 37ff 	mov.w	r7, #4294967295
 800ec58:	e7ea      	b.n	800ec30 <__swbuf_r+0x6c>
 800ec5a:	bf00      	nop
 800ec5c:	08012c68 	.word	0x08012c68
 800ec60:	08012c88 	.word	0x08012c88
 800ec64:	08012c48 	.word	0x08012c48

0800ec68 <__swsetup_r>:
 800ec68:	4b32      	ldr	r3, [pc, #200]	; (800ed34 <__swsetup_r+0xcc>)
 800ec6a:	b570      	push	{r4, r5, r6, lr}
 800ec6c:	681d      	ldr	r5, [r3, #0]
 800ec6e:	4606      	mov	r6, r0
 800ec70:	460c      	mov	r4, r1
 800ec72:	b125      	cbz	r5, 800ec7e <__swsetup_r+0x16>
 800ec74:	69ab      	ldr	r3, [r5, #24]
 800ec76:	b913      	cbnz	r3, 800ec7e <__swsetup_r+0x16>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f000 f99b 	bl	800efb4 <__sinit>
 800ec7e:	4b2e      	ldr	r3, [pc, #184]	; (800ed38 <__swsetup_r+0xd0>)
 800ec80:	429c      	cmp	r4, r3
 800ec82:	d10f      	bne.n	800eca4 <__swsetup_r+0x3c>
 800ec84:	686c      	ldr	r4, [r5, #4]
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec8c:	0719      	lsls	r1, r3, #28
 800ec8e:	d42c      	bmi.n	800ecea <__swsetup_r+0x82>
 800ec90:	06dd      	lsls	r5, r3, #27
 800ec92:	d411      	bmi.n	800ecb8 <__swsetup_r+0x50>
 800ec94:	2309      	movs	r3, #9
 800ec96:	6033      	str	r3, [r6, #0]
 800ec98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eca2:	e03e      	b.n	800ed22 <__swsetup_r+0xba>
 800eca4:	4b25      	ldr	r3, [pc, #148]	; (800ed3c <__swsetup_r+0xd4>)
 800eca6:	429c      	cmp	r4, r3
 800eca8:	d101      	bne.n	800ecae <__swsetup_r+0x46>
 800ecaa:	68ac      	ldr	r4, [r5, #8]
 800ecac:	e7eb      	b.n	800ec86 <__swsetup_r+0x1e>
 800ecae:	4b24      	ldr	r3, [pc, #144]	; (800ed40 <__swsetup_r+0xd8>)
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	bf08      	it	eq
 800ecb4:	68ec      	ldreq	r4, [r5, #12]
 800ecb6:	e7e6      	b.n	800ec86 <__swsetup_r+0x1e>
 800ecb8:	0758      	lsls	r0, r3, #29
 800ecba:	d512      	bpl.n	800ece2 <__swsetup_r+0x7a>
 800ecbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecbe:	b141      	cbz	r1, 800ecd2 <__swsetup_r+0x6a>
 800ecc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc4:	4299      	cmp	r1, r3
 800ecc6:	d002      	beq.n	800ecce <__swsetup_r+0x66>
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f000 fa93 	bl	800f1f4 <_free_r>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6363      	str	r3, [r4, #52]	; 0x34
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecd8:	81a3      	strh	r3, [r4, #12]
 800ecda:	2300      	movs	r3, #0
 800ecdc:	6063      	str	r3, [r4, #4]
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	f043 0308 	orr.w	r3, r3, #8
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	6923      	ldr	r3, [r4, #16]
 800ecec:	b94b      	cbnz	r3, 800ed02 <__swsetup_r+0x9a>
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf8:	d003      	beq.n	800ed02 <__swsetup_r+0x9a>
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	f000 fa31 	bl	800f164 <__smakebuf_r>
 800ed02:	89a0      	ldrh	r0, [r4, #12]
 800ed04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed08:	f010 0301 	ands.w	r3, r0, #1
 800ed0c:	d00a      	beq.n	800ed24 <__swsetup_r+0xbc>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60a3      	str	r3, [r4, #8]
 800ed12:	6963      	ldr	r3, [r4, #20]
 800ed14:	425b      	negs	r3, r3
 800ed16:	61a3      	str	r3, [r4, #24]
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	b943      	cbnz	r3, 800ed2e <__swsetup_r+0xc6>
 800ed1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed20:	d1ba      	bne.n	800ec98 <__swsetup_r+0x30>
 800ed22:	bd70      	pop	{r4, r5, r6, pc}
 800ed24:	0781      	lsls	r1, r0, #30
 800ed26:	bf58      	it	pl
 800ed28:	6963      	ldrpl	r3, [r4, #20]
 800ed2a:	60a3      	str	r3, [r4, #8]
 800ed2c:	e7f4      	b.n	800ed18 <__swsetup_r+0xb0>
 800ed2e:	2000      	movs	r0, #0
 800ed30:	e7f7      	b.n	800ed22 <__swsetup_r+0xba>
 800ed32:	bf00      	nop
 800ed34:	20000014 	.word	0x20000014
 800ed38:	08012c68 	.word	0x08012c68
 800ed3c:	08012c88 	.word	0x08012c88
 800ed40:	08012c48 	.word	0x08012c48

0800ed44 <__assert_func>:
 800ed44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed46:	4614      	mov	r4, r2
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4b09      	ldr	r3, [pc, #36]	; (800ed70 <__assert_func+0x2c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4605      	mov	r5, r0
 800ed50:	68d8      	ldr	r0, [r3, #12]
 800ed52:	b14c      	cbz	r4, 800ed68 <__assert_func+0x24>
 800ed54:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <__assert_func+0x30>)
 800ed56:	9100      	str	r1, [sp, #0]
 800ed58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed5c:	4906      	ldr	r1, [pc, #24]	; (800ed78 <__assert_func+0x34>)
 800ed5e:	462b      	mov	r3, r5
 800ed60:	f000 f9a6 	bl	800f0b0 <fiprintf>
 800ed64:	f000 ffd6 	bl	800fd14 <abort>
 800ed68:	4b04      	ldr	r3, [pc, #16]	; (800ed7c <__assert_func+0x38>)
 800ed6a:	461c      	mov	r4, r3
 800ed6c:	e7f3      	b.n	800ed56 <__assert_func+0x12>
 800ed6e:	bf00      	nop
 800ed70:	20000014 	.word	0x20000014
 800ed74:	08012c0a 	.word	0x08012c0a
 800ed78:	08012c17 	.word	0x08012c17
 800ed7c:	08012c45 	.word	0x08012c45

0800ed80 <__sflush_r>:
 800ed80:	898a      	ldrh	r2, [r1, #12]
 800ed82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed86:	4605      	mov	r5, r0
 800ed88:	0710      	lsls	r0, r2, #28
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	d458      	bmi.n	800ee40 <__sflush_r+0xc0>
 800ed8e:	684b      	ldr	r3, [r1, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	dc05      	bgt.n	800eda0 <__sflush_r+0x20>
 800ed94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	dc02      	bgt.n	800eda0 <__sflush_r+0x20>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eda2:	2e00      	cmp	r6, #0
 800eda4:	d0f9      	beq.n	800ed9a <__sflush_r+0x1a>
 800eda6:	2300      	movs	r3, #0
 800eda8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800edac:	682f      	ldr	r7, [r5, #0]
 800edae:	602b      	str	r3, [r5, #0]
 800edb0:	d032      	beq.n	800ee18 <__sflush_r+0x98>
 800edb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	075a      	lsls	r2, r3, #29
 800edb8:	d505      	bpl.n	800edc6 <__sflush_r+0x46>
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	1ac0      	subs	r0, r0, r3
 800edbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edc0:	b10b      	cbz	r3, 800edc6 <__sflush_r+0x46>
 800edc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edc4:	1ac0      	subs	r0, r0, r3
 800edc6:	2300      	movs	r3, #0
 800edc8:	4602      	mov	r2, r0
 800edca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edcc:	6a21      	ldr	r1, [r4, #32]
 800edce:	4628      	mov	r0, r5
 800edd0:	47b0      	blx	r6
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	89a3      	ldrh	r3, [r4, #12]
 800edd6:	d106      	bne.n	800ede6 <__sflush_r+0x66>
 800edd8:	6829      	ldr	r1, [r5, #0]
 800edda:	291d      	cmp	r1, #29
 800eddc:	d82c      	bhi.n	800ee38 <__sflush_r+0xb8>
 800edde:	4a2a      	ldr	r2, [pc, #168]	; (800ee88 <__sflush_r+0x108>)
 800ede0:	40ca      	lsrs	r2, r1
 800ede2:	07d6      	lsls	r6, r2, #31
 800ede4:	d528      	bpl.n	800ee38 <__sflush_r+0xb8>
 800ede6:	2200      	movs	r2, #0
 800ede8:	6062      	str	r2, [r4, #4]
 800edea:	04d9      	lsls	r1, r3, #19
 800edec:	6922      	ldr	r2, [r4, #16]
 800edee:	6022      	str	r2, [r4, #0]
 800edf0:	d504      	bpl.n	800edfc <__sflush_r+0x7c>
 800edf2:	1c42      	adds	r2, r0, #1
 800edf4:	d101      	bne.n	800edfa <__sflush_r+0x7a>
 800edf6:	682b      	ldr	r3, [r5, #0]
 800edf8:	b903      	cbnz	r3, 800edfc <__sflush_r+0x7c>
 800edfa:	6560      	str	r0, [r4, #84]	; 0x54
 800edfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edfe:	602f      	str	r7, [r5, #0]
 800ee00:	2900      	cmp	r1, #0
 800ee02:	d0ca      	beq.n	800ed9a <__sflush_r+0x1a>
 800ee04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee08:	4299      	cmp	r1, r3
 800ee0a:	d002      	beq.n	800ee12 <__sflush_r+0x92>
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f000 f9f1 	bl	800f1f4 <_free_r>
 800ee12:	2000      	movs	r0, #0
 800ee14:	6360      	str	r0, [r4, #52]	; 0x34
 800ee16:	e7c1      	b.n	800ed9c <__sflush_r+0x1c>
 800ee18:	6a21      	ldr	r1, [r4, #32]
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	47b0      	blx	r6
 800ee20:	1c41      	adds	r1, r0, #1
 800ee22:	d1c7      	bne.n	800edb4 <__sflush_r+0x34>
 800ee24:	682b      	ldr	r3, [r5, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0c4      	beq.n	800edb4 <__sflush_r+0x34>
 800ee2a:	2b1d      	cmp	r3, #29
 800ee2c:	d001      	beq.n	800ee32 <__sflush_r+0xb2>
 800ee2e:	2b16      	cmp	r3, #22
 800ee30:	d101      	bne.n	800ee36 <__sflush_r+0xb6>
 800ee32:	602f      	str	r7, [r5, #0]
 800ee34:	e7b1      	b.n	800ed9a <__sflush_r+0x1a>
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3c:	81a3      	strh	r3, [r4, #12]
 800ee3e:	e7ad      	b.n	800ed9c <__sflush_r+0x1c>
 800ee40:	690f      	ldr	r7, [r1, #16]
 800ee42:	2f00      	cmp	r7, #0
 800ee44:	d0a9      	beq.n	800ed9a <__sflush_r+0x1a>
 800ee46:	0793      	lsls	r3, r2, #30
 800ee48:	680e      	ldr	r6, [r1, #0]
 800ee4a:	bf08      	it	eq
 800ee4c:	694b      	ldreq	r3, [r1, #20]
 800ee4e:	600f      	str	r7, [r1, #0]
 800ee50:	bf18      	it	ne
 800ee52:	2300      	movne	r3, #0
 800ee54:	eba6 0807 	sub.w	r8, r6, r7
 800ee58:	608b      	str	r3, [r1, #8]
 800ee5a:	f1b8 0f00 	cmp.w	r8, #0
 800ee5e:	dd9c      	ble.n	800ed9a <__sflush_r+0x1a>
 800ee60:	6a21      	ldr	r1, [r4, #32]
 800ee62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee64:	4643      	mov	r3, r8
 800ee66:	463a      	mov	r2, r7
 800ee68:	4628      	mov	r0, r5
 800ee6a:	47b0      	blx	r6
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	dc06      	bgt.n	800ee7e <__sflush_r+0xfe>
 800ee70:	89a3      	ldrh	r3, [r4, #12]
 800ee72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee76:	81a3      	strh	r3, [r4, #12]
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7c:	e78e      	b.n	800ed9c <__sflush_r+0x1c>
 800ee7e:	4407      	add	r7, r0
 800ee80:	eba8 0800 	sub.w	r8, r8, r0
 800ee84:	e7e9      	b.n	800ee5a <__sflush_r+0xda>
 800ee86:	bf00      	nop
 800ee88:	20400001 	.word	0x20400001

0800ee8c <_fflush_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	690b      	ldr	r3, [r1, #16]
 800ee90:	4605      	mov	r5, r0
 800ee92:	460c      	mov	r4, r1
 800ee94:	b913      	cbnz	r3, 800ee9c <_fflush_r+0x10>
 800ee96:	2500      	movs	r5, #0
 800ee98:	4628      	mov	r0, r5
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	b118      	cbz	r0, 800eea6 <_fflush_r+0x1a>
 800ee9e:	6983      	ldr	r3, [r0, #24]
 800eea0:	b90b      	cbnz	r3, 800eea6 <_fflush_r+0x1a>
 800eea2:	f000 f887 	bl	800efb4 <__sinit>
 800eea6:	4b14      	ldr	r3, [pc, #80]	; (800eef8 <_fflush_r+0x6c>)
 800eea8:	429c      	cmp	r4, r3
 800eeaa:	d11b      	bne.n	800eee4 <_fflush_r+0x58>
 800eeac:	686c      	ldr	r4, [r5, #4]
 800eeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d0ef      	beq.n	800ee96 <_fflush_r+0xa>
 800eeb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eeb8:	07d0      	lsls	r0, r2, #31
 800eeba:	d404      	bmi.n	800eec6 <_fflush_r+0x3a>
 800eebc:	0599      	lsls	r1, r3, #22
 800eebe:	d402      	bmi.n	800eec6 <_fflush_r+0x3a>
 800eec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eec2:	f000 f927 	bl	800f114 <__retarget_lock_acquire_recursive>
 800eec6:	4628      	mov	r0, r5
 800eec8:	4621      	mov	r1, r4
 800eeca:	f7ff ff59 	bl	800ed80 <__sflush_r>
 800eece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eed0:	07da      	lsls	r2, r3, #31
 800eed2:	4605      	mov	r5, r0
 800eed4:	d4e0      	bmi.n	800ee98 <_fflush_r+0xc>
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	059b      	lsls	r3, r3, #22
 800eeda:	d4dd      	bmi.n	800ee98 <_fflush_r+0xc>
 800eedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eede:	f000 f91a 	bl	800f116 <__retarget_lock_release_recursive>
 800eee2:	e7d9      	b.n	800ee98 <_fflush_r+0xc>
 800eee4:	4b05      	ldr	r3, [pc, #20]	; (800eefc <_fflush_r+0x70>)
 800eee6:	429c      	cmp	r4, r3
 800eee8:	d101      	bne.n	800eeee <_fflush_r+0x62>
 800eeea:	68ac      	ldr	r4, [r5, #8]
 800eeec:	e7df      	b.n	800eeae <_fflush_r+0x22>
 800eeee:	4b04      	ldr	r3, [pc, #16]	; (800ef00 <_fflush_r+0x74>)
 800eef0:	429c      	cmp	r4, r3
 800eef2:	bf08      	it	eq
 800eef4:	68ec      	ldreq	r4, [r5, #12]
 800eef6:	e7da      	b.n	800eeae <_fflush_r+0x22>
 800eef8:	08012c68 	.word	0x08012c68
 800eefc:	08012c88 	.word	0x08012c88
 800ef00:	08012c48 	.word	0x08012c48

0800ef04 <std>:
 800ef04:	2300      	movs	r3, #0
 800ef06:	b510      	push	{r4, lr}
 800ef08:	4604      	mov	r4, r0
 800ef0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ef0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef12:	6083      	str	r3, [r0, #8]
 800ef14:	8181      	strh	r1, [r0, #12]
 800ef16:	6643      	str	r3, [r0, #100]	; 0x64
 800ef18:	81c2      	strh	r2, [r0, #14]
 800ef1a:	6183      	str	r3, [r0, #24]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	2208      	movs	r2, #8
 800ef20:	305c      	adds	r0, #92	; 0x5c
 800ef22:	f7ff fd3f 	bl	800e9a4 <memset>
 800ef26:	4b05      	ldr	r3, [pc, #20]	; (800ef3c <std+0x38>)
 800ef28:	6263      	str	r3, [r4, #36]	; 0x24
 800ef2a:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <std+0x3c>)
 800ef2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef2e:	4b05      	ldr	r3, [pc, #20]	; (800ef44 <std+0x40>)
 800ef30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef32:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <std+0x44>)
 800ef34:	6224      	str	r4, [r4, #32]
 800ef36:	6323      	str	r3, [r4, #48]	; 0x30
 800ef38:	bd10      	pop	{r4, pc}
 800ef3a:	bf00      	nop
 800ef3c:	0800fc69 	.word	0x0800fc69
 800ef40:	0800fc8b 	.word	0x0800fc8b
 800ef44:	0800fcc3 	.word	0x0800fcc3
 800ef48:	0800fce7 	.word	0x0800fce7

0800ef4c <_cleanup_r>:
 800ef4c:	4901      	ldr	r1, [pc, #4]	; (800ef54 <_cleanup_r+0x8>)
 800ef4e:	f000 b8c1 	b.w	800f0d4 <_fwalk_reent>
 800ef52:	bf00      	nop
 800ef54:	0800ee8d 	.word	0x0800ee8d

0800ef58 <__sfmoreglue>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	2268      	movs	r2, #104	; 0x68
 800ef5c:	1e4d      	subs	r5, r1, #1
 800ef5e:	4355      	muls	r5, r2
 800ef60:	460e      	mov	r6, r1
 800ef62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef66:	f000 f9b1 	bl	800f2cc <_malloc_r>
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	b140      	cbz	r0, 800ef80 <__sfmoreglue+0x28>
 800ef6e:	2100      	movs	r1, #0
 800ef70:	e9c0 1600 	strd	r1, r6, [r0]
 800ef74:	300c      	adds	r0, #12
 800ef76:	60a0      	str	r0, [r4, #8]
 800ef78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef7c:	f7ff fd12 	bl	800e9a4 <memset>
 800ef80:	4620      	mov	r0, r4
 800ef82:	bd70      	pop	{r4, r5, r6, pc}

0800ef84 <__sfp_lock_acquire>:
 800ef84:	4801      	ldr	r0, [pc, #4]	; (800ef8c <__sfp_lock_acquire+0x8>)
 800ef86:	f000 b8c5 	b.w	800f114 <__retarget_lock_acquire_recursive>
 800ef8a:	bf00      	nop
 800ef8c:	20008abd 	.word	0x20008abd

0800ef90 <__sfp_lock_release>:
 800ef90:	4801      	ldr	r0, [pc, #4]	; (800ef98 <__sfp_lock_release+0x8>)
 800ef92:	f000 b8c0 	b.w	800f116 <__retarget_lock_release_recursive>
 800ef96:	bf00      	nop
 800ef98:	20008abd 	.word	0x20008abd

0800ef9c <__sinit_lock_acquire>:
 800ef9c:	4801      	ldr	r0, [pc, #4]	; (800efa4 <__sinit_lock_acquire+0x8>)
 800ef9e:	f000 b8b9 	b.w	800f114 <__retarget_lock_acquire_recursive>
 800efa2:	bf00      	nop
 800efa4:	20008abe 	.word	0x20008abe

0800efa8 <__sinit_lock_release>:
 800efa8:	4801      	ldr	r0, [pc, #4]	; (800efb0 <__sinit_lock_release+0x8>)
 800efaa:	f000 b8b4 	b.w	800f116 <__retarget_lock_release_recursive>
 800efae:	bf00      	nop
 800efb0:	20008abe 	.word	0x20008abe

0800efb4 <__sinit>:
 800efb4:	b510      	push	{r4, lr}
 800efb6:	4604      	mov	r4, r0
 800efb8:	f7ff fff0 	bl	800ef9c <__sinit_lock_acquire>
 800efbc:	69a3      	ldr	r3, [r4, #24]
 800efbe:	b11b      	cbz	r3, 800efc8 <__sinit+0x14>
 800efc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efc4:	f7ff bff0 	b.w	800efa8 <__sinit_lock_release>
 800efc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efcc:	6523      	str	r3, [r4, #80]	; 0x50
 800efce:	4b13      	ldr	r3, [pc, #76]	; (800f01c <__sinit+0x68>)
 800efd0:	4a13      	ldr	r2, [pc, #76]	; (800f020 <__sinit+0x6c>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800efd6:	42a3      	cmp	r3, r4
 800efd8:	bf04      	itt	eq
 800efda:	2301      	moveq	r3, #1
 800efdc:	61a3      	streq	r3, [r4, #24]
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 f820 	bl	800f024 <__sfp>
 800efe4:	6060      	str	r0, [r4, #4]
 800efe6:	4620      	mov	r0, r4
 800efe8:	f000 f81c 	bl	800f024 <__sfp>
 800efec:	60a0      	str	r0, [r4, #8]
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 f818 	bl	800f024 <__sfp>
 800eff4:	2200      	movs	r2, #0
 800eff6:	60e0      	str	r0, [r4, #12]
 800eff8:	2104      	movs	r1, #4
 800effa:	6860      	ldr	r0, [r4, #4]
 800effc:	f7ff ff82 	bl	800ef04 <std>
 800f000:	68a0      	ldr	r0, [r4, #8]
 800f002:	2201      	movs	r2, #1
 800f004:	2109      	movs	r1, #9
 800f006:	f7ff ff7d 	bl	800ef04 <std>
 800f00a:	68e0      	ldr	r0, [r4, #12]
 800f00c:	2202      	movs	r2, #2
 800f00e:	2112      	movs	r1, #18
 800f010:	f7ff ff78 	bl	800ef04 <std>
 800f014:	2301      	movs	r3, #1
 800f016:	61a3      	str	r3, [r4, #24]
 800f018:	e7d2      	b.n	800efc0 <__sinit+0xc>
 800f01a:	bf00      	nop
 800f01c:	08012b94 	.word	0x08012b94
 800f020:	0800ef4d 	.word	0x0800ef4d

0800f024 <__sfp>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	4607      	mov	r7, r0
 800f028:	f7ff ffac 	bl	800ef84 <__sfp_lock_acquire>
 800f02c:	4b1e      	ldr	r3, [pc, #120]	; (800f0a8 <__sfp+0x84>)
 800f02e:	681e      	ldr	r6, [r3, #0]
 800f030:	69b3      	ldr	r3, [r6, #24]
 800f032:	b913      	cbnz	r3, 800f03a <__sfp+0x16>
 800f034:	4630      	mov	r0, r6
 800f036:	f7ff ffbd 	bl	800efb4 <__sinit>
 800f03a:	3648      	adds	r6, #72	; 0x48
 800f03c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f040:	3b01      	subs	r3, #1
 800f042:	d503      	bpl.n	800f04c <__sfp+0x28>
 800f044:	6833      	ldr	r3, [r6, #0]
 800f046:	b30b      	cbz	r3, 800f08c <__sfp+0x68>
 800f048:	6836      	ldr	r6, [r6, #0]
 800f04a:	e7f7      	b.n	800f03c <__sfp+0x18>
 800f04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f050:	b9d5      	cbnz	r5, 800f088 <__sfp+0x64>
 800f052:	4b16      	ldr	r3, [pc, #88]	; (800f0ac <__sfp+0x88>)
 800f054:	60e3      	str	r3, [r4, #12]
 800f056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f05a:	6665      	str	r5, [r4, #100]	; 0x64
 800f05c:	f000 f859 	bl	800f112 <__retarget_lock_init_recursive>
 800f060:	f7ff ff96 	bl	800ef90 <__sfp_lock_release>
 800f064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f06c:	6025      	str	r5, [r4, #0]
 800f06e:	61a5      	str	r5, [r4, #24]
 800f070:	2208      	movs	r2, #8
 800f072:	4629      	mov	r1, r5
 800f074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f078:	f7ff fc94 	bl	800e9a4 <memset>
 800f07c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f084:	4620      	mov	r0, r4
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f088:	3468      	adds	r4, #104	; 0x68
 800f08a:	e7d9      	b.n	800f040 <__sfp+0x1c>
 800f08c:	2104      	movs	r1, #4
 800f08e:	4638      	mov	r0, r7
 800f090:	f7ff ff62 	bl	800ef58 <__sfmoreglue>
 800f094:	4604      	mov	r4, r0
 800f096:	6030      	str	r0, [r6, #0]
 800f098:	2800      	cmp	r0, #0
 800f09a:	d1d5      	bne.n	800f048 <__sfp+0x24>
 800f09c:	f7ff ff78 	bl	800ef90 <__sfp_lock_release>
 800f0a0:	230c      	movs	r3, #12
 800f0a2:	603b      	str	r3, [r7, #0]
 800f0a4:	e7ee      	b.n	800f084 <__sfp+0x60>
 800f0a6:	bf00      	nop
 800f0a8:	08012b94 	.word	0x08012b94
 800f0ac:	ffff0001 	.word	0xffff0001

0800f0b0 <fiprintf>:
 800f0b0:	b40e      	push	{r1, r2, r3}
 800f0b2:	b503      	push	{r0, r1, lr}
 800f0b4:	4601      	mov	r1, r0
 800f0b6:	ab03      	add	r3, sp, #12
 800f0b8:	4805      	ldr	r0, [pc, #20]	; (800f0d0 <fiprintf+0x20>)
 800f0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0be:	6800      	ldr	r0, [r0, #0]
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	f000 fafd 	bl	800f6c0 <_vfiprintf_r>
 800f0c6:	b002      	add	sp, #8
 800f0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0cc:	b003      	add	sp, #12
 800f0ce:	4770      	bx	lr
 800f0d0:	20000014 	.word	0x20000014

0800f0d4 <_fwalk_reent>:
 800f0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d8:	4606      	mov	r6, r0
 800f0da:	4688      	mov	r8, r1
 800f0dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0e0:	2700      	movs	r7, #0
 800f0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800f0ea:	d505      	bpl.n	800f0f8 <_fwalk_reent+0x24>
 800f0ec:	6824      	ldr	r4, [r4, #0]
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	d1f7      	bne.n	800f0e2 <_fwalk_reent+0xe>
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f8:	89ab      	ldrh	r3, [r5, #12]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d907      	bls.n	800f10e <_fwalk_reent+0x3a>
 800f0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f102:	3301      	adds	r3, #1
 800f104:	d003      	beq.n	800f10e <_fwalk_reent+0x3a>
 800f106:	4629      	mov	r1, r5
 800f108:	4630      	mov	r0, r6
 800f10a:	47c0      	blx	r8
 800f10c:	4307      	orrs	r7, r0
 800f10e:	3568      	adds	r5, #104	; 0x68
 800f110:	e7e9      	b.n	800f0e6 <_fwalk_reent+0x12>

0800f112 <__retarget_lock_init_recursive>:
 800f112:	4770      	bx	lr

0800f114 <__retarget_lock_acquire_recursive>:
 800f114:	4770      	bx	lr

0800f116 <__retarget_lock_release_recursive>:
 800f116:	4770      	bx	lr

0800f118 <__swhatbuf_r>:
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	460e      	mov	r6, r1
 800f11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f120:	2900      	cmp	r1, #0
 800f122:	b096      	sub	sp, #88	; 0x58
 800f124:	4614      	mov	r4, r2
 800f126:	461d      	mov	r5, r3
 800f128:	da08      	bge.n	800f13c <__swhatbuf_r+0x24>
 800f12a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	602a      	str	r2, [r5, #0]
 800f132:	061a      	lsls	r2, r3, #24
 800f134:	d410      	bmi.n	800f158 <__swhatbuf_r+0x40>
 800f136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13a:	e00e      	b.n	800f15a <__swhatbuf_r+0x42>
 800f13c:	466a      	mov	r2, sp
 800f13e:	f000 fe01 	bl	800fd44 <_fstat_r>
 800f142:	2800      	cmp	r0, #0
 800f144:	dbf1      	blt.n	800f12a <__swhatbuf_r+0x12>
 800f146:	9a01      	ldr	r2, [sp, #4]
 800f148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f14c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f150:	425a      	negs	r2, r3
 800f152:	415a      	adcs	r2, r3
 800f154:	602a      	str	r2, [r5, #0]
 800f156:	e7ee      	b.n	800f136 <__swhatbuf_r+0x1e>
 800f158:	2340      	movs	r3, #64	; 0x40
 800f15a:	2000      	movs	r0, #0
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	b016      	add	sp, #88	; 0x58
 800f160:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f164 <__smakebuf_r>:
 800f164:	898b      	ldrh	r3, [r1, #12]
 800f166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f168:	079d      	lsls	r5, r3, #30
 800f16a:	4606      	mov	r6, r0
 800f16c:	460c      	mov	r4, r1
 800f16e:	d507      	bpl.n	800f180 <__smakebuf_r+0x1c>
 800f170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	2301      	movs	r3, #1
 800f17a:	6163      	str	r3, [r4, #20]
 800f17c:	b002      	add	sp, #8
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
 800f180:	ab01      	add	r3, sp, #4
 800f182:	466a      	mov	r2, sp
 800f184:	f7ff ffc8 	bl	800f118 <__swhatbuf_r>
 800f188:	9900      	ldr	r1, [sp, #0]
 800f18a:	4605      	mov	r5, r0
 800f18c:	4630      	mov	r0, r6
 800f18e:	f000 f89d 	bl	800f2cc <_malloc_r>
 800f192:	b948      	cbnz	r0, 800f1a8 <__smakebuf_r+0x44>
 800f194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f198:	059a      	lsls	r2, r3, #22
 800f19a:	d4ef      	bmi.n	800f17c <__smakebuf_r+0x18>
 800f19c:	f023 0303 	bic.w	r3, r3, #3
 800f1a0:	f043 0302 	orr.w	r3, r3, #2
 800f1a4:	81a3      	strh	r3, [r4, #12]
 800f1a6:	e7e3      	b.n	800f170 <__smakebuf_r+0xc>
 800f1a8:	4b0d      	ldr	r3, [pc, #52]	; (800f1e0 <__smakebuf_r+0x7c>)
 800f1aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1ac:	89a3      	ldrh	r3, [r4, #12]
 800f1ae:	6020      	str	r0, [r4, #0]
 800f1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1b4:	81a3      	strh	r3, [r4, #12]
 800f1b6:	9b00      	ldr	r3, [sp, #0]
 800f1b8:	6163      	str	r3, [r4, #20]
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	6120      	str	r0, [r4, #16]
 800f1be:	b15b      	cbz	r3, 800f1d8 <__smakebuf_r+0x74>
 800f1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f000 fdcf 	bl	800fd68 <_isatty_r>
 800f1ca:	b128      	cbz	r0, 800f1d8 <__smakebuf_r+0x74>
 800f1cc:	89a3      	ldrh	r3, [r4, #12]
 800f1ce:	f023 0303 	bic.w	r3, r3, #3
 800f1d2:	f043 0301 	orr.w	r3, r3, #1
 800f1d6:	81a3      	strh	r3, [r4, #12]
 800f1d8:	89a0      	ldrh	r0, [r4, #12]
 800f1da:	4305      	orrs	r5, r0
 800f1dc:	81a5      	strh	r5, [r4, #12]
 800f1de:	e7cd      	b.n	800f17c <__smakebuf_r+0x18>
 800f1e0:	0800ef4d 	.word	0x0800ef4d

0800f1e4 <malloc>:
 800f1e4:	4b02      	ldr	r3, [pc, #8]	; (800f1f0 <malloc+0xc>)
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	f000 b86f 	b.w	800f2cc <_malloc_r>
 800f1ee:	bf00      	nop
 800f1f0:	20000014 	.word	0x20000014

0800f1f4 <_free_r>:
 800f1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	d044      	beq.n	800f284 <_free_r+0x90>
 800f1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1fe:	9001      	str	r0, [sp, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	f1a1 0404 	sub.w	r4, r1, #4
 800f206:	bfb8      	it	lt
 800f208:	18e4      	addlt	r4, r4, r3
 800f20a:	f000 fdcf 	bl	800fdac <__malloc_lock>
 800f20e:	4a1e      	ldr	r2, [pc, #120]	; (800f288 <_free_r+0x94>)
 800f210:	9801      	ldr	r0, [sp, #4]
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	b933      	cbnz	r3, 800f224 <_free_r+0x30>
 800f216:	6063      	str	r3, [r4, #4]
 800f218:	6014      	str	r4, [r2, #0]
 800f21a:	b003      	add	sp, #12
 800f21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f220:	f000 bdca 	b.w	800fdb8 <__malloc_unlock>
 800f224:	42a3      	cmp	r3, r4
 800f226:	d908      	bls.n	800f23a <_free_r+0x46>
 800f228:	6825      	ldr	r5, [r4, #0]
 800f22a:	1961      	adds	r1, r4, r5
 800f22c:	428b      	cmp	r3, r1
 800f22e:	bf01      	itttt	eq
 800f230:	6819      	ldreq	r1, [r3, #0]
 800f232:	685b      	ldreq	r3, [r3, #4]
 800f234:	1949      	addeq	r1, r1, r5
 800f236:	6021      	streq	r1, [r4, #0]
 800f238:	e7ed      	b.n	800f216 <_free_r+0x22>
 800f23a:	461a      	mov	r2, r3
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	b10b      	cbz	r3, 800f244 <_free_r+0x50>
 800f240:	42a3      	cmp	r3, r4
 800f242:	d9fa      	bls.n	800f23a <_free_r+0x46>
 800f244:	6811      	ldr	r1, [r2, #0]
 800f246:	1855      	adds	r5, r2, r1
 800f248:	42a5      	cmp	r5, r4
 800f24a:	d10b      	bne.n	800f264 <_free_r+0x70>
 800f24c:	6824      	ldr	r4, [r4, #0]
 800f24e:	4421      	add	r1, r4
 800f250:	1854      	adds	r4, r2, r1
 800f252:	42a3      	cmp	r3, r4
 800f254:	6011      	str	r1, [r2, #0]
 800f256:	d1e0      	bne.n	800f21a <_free_r+0x26>
 800f258:	681c      	ldr	r4, [r3, #0]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	6053      	str	r3, [r2, #4]
 800f25e:	4421      	add	r1, r4
 800f260:	6011      	str	r1, [r2, #0]
 800f262:	e7da      	b.n	800f21a <_free_r+0x26>
 800f264:	d902      	bls.n	800f26c <_free_r+0x78>
 800f266:	230c      	movs	r3, #12
 800f268:	6003      	str	r3, [r0, #0]
 800f26a:	e7d6      	b.n	800f21a <_free_r+0x26>
 800f26c:	6825      	ldr	r5, [r4, #0]
 800f26e:	1961      	adds	r1, r4, r5
 800f270:	428b      	cmp	r3, r1
 800f272:	bf04      	itt	eq
 800f274:	6819      	ldreq	r1, [r3, #0]
 800f276:	685b      	ldreq	r3, [r3, #4]
 800f278:	6063      	str	r3, [r4, #4]
 800f27a:	bf04      	itt	eq
 800f27c:	1949      	addeq	r1, r1, r5
 800f27e:	6021      	streq	r1, [r4, #0]
 800f280:	6054      	str	r4, [r2, #4]
 800f282:	e7ca      	b.n	800f21a <_free_r+0x26>
 800f284:	b003      	add	sp, #12
 800f286:	bd30      	pop	{r4, r5, pc}
 800f288:	20008ac0 	.word	0x20008ac0

0800f28c <sbrk_aligned>:
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	4e0e      	ldr	r6, [pc, #56]	; (800f2c8 <sbrk_aligned+0x3c>)
 800f290:	460c      	mov	r4, r1
 800f292:	6831      	ldr	r1, [r6, #0]
 800f294:	4605      	mov	r5, r0
 800f296:	b911      	cbnz	r1, 800f29e <sbrk_aligned+0x12>
 800f298:	f000 fcd6 	bl	800fc48 <_sbrk_r>
 800f29c:	6030      	str	r0, [r6, #0]
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 fcd1 	bl	800fc48 <_sbrk_r>
 800f2a6:	1c43      	adds	r3, r0, #1
 800f2a8:	d00a      	beq.n	800f2c0 <sbrk_aligned+0x34>
 800f2aa:	1cc4      	adds	r4, r0, #3
 800f2ac:	f024 0403 	bic.w	r4, r4, #3
 800f2b0:	42a0      	cmp	r0, r4
 800f2b2:	d007      	beq.n	800f2c4 <sbrk_aligned+0x38>
 800f2b4:	1a21      	subs	r1, r4, r0
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f000 fcc6 	bl	800fc48 <_sbrk_r>
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d101      	bne.n	800f2c4 <sbrk_aligned+0x38>
 800f2c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	bd70      	pop	{r4, r5, r6, pc}
 800f2c8:	20008ac4 	.word	0x20008ac4

0800f2cc <_malloc_r>:
 800f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d0:	1ccd      	adds	r5, r1, #3
 800f2d2:	f025 0503 	bic.w	r5, r5, #3
 800f2d6:	3508      	adds	r5, #8
 800f2d8:	2d0c      	cmp	r5, #12
 800f2da:	bf38      	it	cc
 800f2dc:	250c      	movcc	r5, #12
 800f2de:	2d00      	cmp	r5, #0
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	db01      	blt.n	800f2e8 <_malloc_r+0x1c>
 800f2e4:	42a9      	cmp	r1, r5
 800f2e6:	d905      	bls.n	800f2f4 <_malloc_r+0x28>
 800f2e8:	230c      	movs	r3, #12
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f4:	4e2e      	ldr	r6, [pc, #184]	; (800f3b0 <_malloc_r+0xe4>)
 800f2f6:	f000 fd59 	bl	800fdac <__malloc_lock>
 800f2fa:	6833      	ldr	r3, [r6, #0]
 800f2fc:	461c      	mov	r4, r3
 800f2fe:	bb34      	cbnz	r4, 800f34e <_malloc_r+0x82>
 800f300:	4629      	mov	r1, r5
 800f302:	4638      	mov	r0, r7
 800f304:	f7ff ffc2 	bl	800f28c <sbrk_aligned>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	4604      	mov	r4, r0
 800f30c:	d14d      	bne.n	800f3aa <_malloc_r+0xde>
 800f30e:	6834      	ldr	r4, [r6, #0]
 800f310:	4626      	mov	r6, r4
 800f312:	2e00      	cmp	r6, #0
 800f314:	d140      	bne.n	800f398 <_malloc_r+0xcc>
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	4631      	mov	r1, r6
 800f31a:	4638      	mov	r0, r7
 800f31c:	eb04 0803 	add.w	r8, r4, r3
 800f320:	f000 fc92 	bl	800fc48 <_sbrk_r>
 800f324:	4580      	cmp	r8, r0
 800f326:	d13a      	bne.n	800f39e <_malloc_r+0xd2>
 800f328:	6821      	ldr	r1, [r4, #0]
 800f32a:	3503      	adds	r5, #3
 800f32c:	1a6d      	subs	r5, r5, r1
 800f32e:	f025 0503 	bic.w	r5, r5, #3
 800f332:	3508      	adds	r5, #8
 800f334:	2d0c      	cmp	r5, #12
 800f336:	bf38      	it	cc
 800f338:	250c      	movcc	r5, #12
 800f33a:	4629      	mov	r1, r5
 800f33c:	4638      	mov	r0, r7
 800f33e:	f7ff ffa5 	bl	800f28c <sbrk_aligned>
 800f342:	3001      	adds	r0, #1
 800f344:	d02b      	beq.n	800f39e <_malloc_r+0xd2>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	442b      	add	r3, r5
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	e00e      	b.n	800f36c <_malloc_r+0xa0>
 800f34e:	6822      	ldr	r2, [r4, #0]
 800f350:	1b52      	subs	r2, r2, r5
 800f352:	d41e      	bmi.n	800f392 <_malloc_r+0xc6>
 800f354:	2a0b      	cmp	r2, #11
 800f356:	d916      	bls.n	800f386 <_malloc_r+0xba>
 800f358:	1961      	adds	r1, r4, r5
 800f35a:	42a3      	cmp	r3, r4
 800f35c:	6025      	str	r5, [r4, #0]
 800f35e:	bf18      	it	ne
 800f360:	6059      	strne	r1, [r3, #4]
 800f362:	6863      	ldr	r3, [r4, #4]
 800f364:	bf08      	it	eq
 800f366:	6031      	streq	r1, [r6, #0]
 800f368:	5162      	str	r2, [r4, r5]
 800f36a:	604b      	str	r3, [r1, #4]
 800f36c:	4638      	mov	r0, r7
 800f36e:	f104 060b 	add.w	r6, r4, #11
 800f372:	f000 fd21 	bl	800fdb8 <__malloc_unlock>
 800f376:	f026 0607 	bic.w	r6, r6, #7
 800f37a:	1d23      	adds	r3, r4, #4
 800f37c:	1af2      	subs	r2, r6, r3
 800f37e:	d0b6      	beq.n	800f2ee <_malloc_r+0x22>
 800f380:	1b9b      	subs	r3, r3, r6
 800f382:	50a3      	str	r3, [r4, r2]
 800f384:	e7b3      	b.n	800f2ee <_malloc_r+0x22>
 800f386:	6862      	ldr	r2, [r4, #4]
 800f388:	42a3      	cmp	r3, r4
 800f38a:	bf0c      	ite	eq
 800f38c:	6032      	streq	r2, [r6, #0]
 800f38e:	605a      	strne	r2, [r3, #4]
 800f390:	e7ec      	b.n	800f36c <_malloc_r+0xa0>
 800f392:	4623      	mov	r3, r4
 800f394:	6864      	ldr	r4, [r4, #4]
 800f396:	e7b2      	b.n	800f2fe <_malloc_r+0x32>
 800f398:	4634      	mov	r4, r6
 800f39a:	6876      	ldr	r6, [r6, #4]
 800f39c:	e7b9      	b.n	800f312 <_malloc_r+0x46>
 800f39e:	230c      	movs	r3, #12
 800f3a0:	603b      	str	r3, [r7, #0]
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f000 fd08 	bl	800fdb8 <__malloc_unlock>
 800f3a8:	e7a1      	b.n	800f2ee <_malloc_r+0x22>
 800f3aa:	6025      	str	r5, [r4, #0]
 800f3ac:	e7de      	b.n	800f36c <_malloc_r+0xa0>
 800f3ae:	bf00      	nop
 800f3b0:	20008ac0 	.word	0x20008ac0

0800f3b4 <__ssputs_r>:
 800f3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b8:	688e      	ldr	r6, [r1, #8]
 800f3ba:	429e      	cmp	r6, r3
 800f3bc:	4682      	mov	sl, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	4690      	mov	r8, r2
 800f3c2:	461f      	mov	r7, r3
 800f3c4:	d838      	bhi.n	800f438 <__ssputs_r+0x84>
 800f3c6:	898a      	ldrh	r2, [r1, #12]
 800f3c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3cc:	d032      	beq.n	800f434 <__ssputs_r+0x80>
 800f3ce:	6825      	ldr	r5, [r4, #0]
 800f3d0:	6909      	ldr	r1, [r1, #16]
 800f3d2:	eba5 0901 	sub.w	r9, r5, r1
 800f3d6:	6965      	ldr	r5, [r4, #20]
 800f3d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	444b      	add	r3, r9
 800f3e4:	106d      	asrs	r5, r5, #1
 800f3e6:	429d      	cmp	r5, r3
 800f3e8:	bf38      	it	cc
 800f3ea:	461d      	movcc	r5, r3
 800f3ec:	0553      	lsls	r3, r2, #21
 800f3ee:	d531      	bpl.n	800f454 <__ssputs_r+0xa0>
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	f7ff ff6b 	bl	800f2cc <_malloc_r>
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	b950      	cbnz	r0, 800f410 <__ssputs_r+0x5c>
 800f3fa:	230c      	movs	r3, #12
 800f3fc:	f8ca 3000 	str.w	r3, [sl]
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f406:	81a3      	strh	r3, [r4, #12]
 800f408:	f04f 30ff 	mov.w	r0, #4294967295
 800f40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f410:	6921      	ldr	r1, [r4, #16]
 800f412:	464a      	mov	r2, r9
 800f414:	f7ff fa9e 	bl	800e954 <memcpy>
 800f418:	89a3      	ldrh	r3, [r4, #12]
 800f41a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f422:	81a3      	strh	r3, [r4, #12]
 800f424:	6126      	str	r6, [r4, #16]
 800f426:	6165      	str	r5, [r4, #20]
 800f428:	444e      	add	r6, r9
 800f42a:	eba5 0509 	sub.w	r5, r5, r9
 800f42e:	6026      	str	r6, [r4, #0]
 800f430:	60a5      	str	r5, [r4, #8]
 800f432:	463e      	mov	r6, r7
 800f434:	42be      	cmp	r6, r7
 800f436:	d900      	bls.n	800f43a <__ssputs_r+0x86>
 800f438:	463e      	mov	r6, r7
 800f43a:	6820      	ldr	r0, [r4, #0]
 800f43c:	4632      	mov	r2, r6
 800f43e:	4641      	mov	r1, r8
 800f440:	f7ff fa96 	bl	800e970 <memmove>
 800f444:	68a3      	ldr	r3, [r4, #8]
 800f446:	1b9b      	subs	r3, r3, r6
 800f448:	60a3      	str	r3, [r4, #8]
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	4433      	add	r3, r6
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	2000      	movs	r0, #0
 800f452:	e7db      	b.n	800f40c <__ssputs_r+0x58>
 800f454:	462a      	mov	r2, r5
 800f456:	f000 fcb5 	bl	800fdc4 <_realloc_r>
 800f45a:	4606      	mov	r6, r0
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d1e1      	bne.n	800f424 <__ssputs_r+0x70>
 800f460:	6921      	ldr	r1, [r4, #16]
 800f462:	4650      	mov	r0, sl
 800f464:	f7ff fec6 	bl	800f1f4 <_free_r>
 800f468:	e7c7      	b.n	800f3fa <__ssputs_r+0x46>
	...

0800f46c <_svfiprintf_r>:
 800f46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f470:	4698      	mov	r8, r3
 800f472:	898b      	ldrh	r3, [r1, #12]
 800f474:	061b      	lsls	r3, r3, #24
 800f476:	b09d      	sub	sp, #116	; 0x74
 800f478:	4607      	mov	r7, r0
 800f47a:	460d      	mov	r5, r1
 800f47c:	4614      	mov	r4, r2
 800f47e:	d50e      	bpl.n	800f49e <_svfiprintf_r+0x32>
 800f480:	690b      	ldr	r3, [r1, #16]
 800f482:	b963      	cbnz	r3, 800f49e <_svfiprintf_r+0x32>
 800f484:	2140      	movs	r1, #64	; 0x40
 800f486:	f7ff ff21 	bl	800f2cc <_malloc_r>
 800f48a:	6028      	str	r0, [r5, #0]
 800f48c:	6128      	str	r0, [r5, #16]
 800f48e:	b920      	cbnz	r0, 800f49a <_svfiprintf_r+0x2e>
 800f490:	230c      	movs	r3, #12
 800f492:	603b      	str	r3, [r7, #0]
 800f494:	f04f 30ff 	mov.w	r0, #4294967295
 800f498:	e0d1      	b.n	800f63e <_svfiprintf_r+0x1d2>
 800f49a:	2340      	movs	r3, #64	; 0x40
 800f49c:	616b      	str	r3, [r5, #20]
 800f49e:	2300      	movs	r3, #0
 800f4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a2:	2320      	movs	r3, #32
 800f4a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4ac:	2330      	movs	r3, #48	; 0x30
 800f4ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f658 <_svfiprintf_r+0x1ec>
 800f4b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4b6:	f04f 0901 	mov.w	r9, #1
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	469a      	mov	sl, r3
 800f4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4c2:	b10a      	cbz	r2, 800f4c8 <_svfiprintf_r+0x5c>
 800f4c4:	2a25      	cmp	r2, #37	; 0x25
 800f4c6:	d1f9      	bne.n	800f4bc <_svfiprintf_r+0x50>
 800f4c8:	ebba 0b04 	subs.w	fp, sl, r4
 800f4cc:	d00b      	beq.n	800f4e6 <_svfiprintf_r+0x7a>
 800f4ce:	465b      	mov	r3, fp
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	f7ff ff6d 	bl	800f3b4 <__ssputs_r>
 800f4da:	3001      	adds	r0, #1
 800f4dc:	f000 80aa 	beq.w	800f634 <_svfiprintf_r+0x1c8>
 800f4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4e2:	445a      	add	r2, fp
 800f4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800f4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f000 80a2 	beq.w	800f634 <_svfiprintf_r+0x1c8>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4fa:	f10a 0a01 	add.w	sl, sl, #1
 800f4fe:	9304      	str	r3, [sp, #16]
 800f500:	9307      	str	r3, [sp, #28]
 800f502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f506:	931a      	str	r3, [sp, #104]	; 0x68
 800f508:	4654      	mov	r4, sl
 800f50a:	2205      	movs	r2, #5
 800f50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f510:	4851      	ldr	r0, [pc, #324]	; (800f658 <_svfiprintf_r+0x1ec>)
 800f512:	f7f0 fe85 	bl	8000220 <memchr>
 800f516:	9a04      	ldr	r2, [sp, #16]
 800f518:	b9d8      	cbnz	r0, 800f552 <_svfiprintf_r+0xe6>
 800f51a:	06d0      	lsls	r0, r2, #27
 800f51c:	bf44      	itt	mi
 800f51e:	2320      	movmi	r3, #32
 800f520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f524:	0711      	lsls	r1, r2, #28
 800f526:	bf44      	itt	mi
 800f528:	232b      	movmi	r3, #43	; 0x2b
 800f52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f52e:	f89a 3000 	ldrb.w	r3, [sl]
 800f532:	2b2a      	cmp	r3, #42	; 0x2a
 800f534:	d015      	beq.n	800f562 <_svfiprintf_r+0xf6>
 800f536:	9a07      	ldr	r2, [sp, #28]
 800f538:	4654      	mov	r4, sl
 800f53a:	2000      	movs	r0, #0
 800f53c:	f04f 0c0a 	mov.w	ip, #10
 800f540:	4621      	mov	r1, r4
 800f542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f546:	3b30      	subs	r3, #48	; 0x30
 800f548:	2b09      	cmp	r3, #9
 800f54a:	d94e      	bls.n	800f5ea <_svfiprintf_r+0x17e>
 800f54c:	b1b0      	cbz	r0, 800f57c <_svfiprintf_r+0x110>
 800f54e:	9207      	str	r2, [sp, #28]
 800f550:	e014      	b.n	800f57c <_svfiprintf_r+0x110>
 800f552:	eba0 0308 	sub.w	r3, r0, r8
 800f556:	fa09 f303 	lsl.w	r3, r9, r3
 800f55a:	4313      	orrs	r3, r2
 800f55c:	9304      	str	r3, [sp, #16]
 800f55e:	46a2      	mov	sl, r4
 800f560:	e7d2      	b.n	800f508 <_svfiprintf_r+0x9c>
 800f562:	9b03      	ldr	r3, [sp, #12]
 800f564:	1d19      	adds	r1, r3, #4
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	9103      	str	r1, [sp, #12]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	bfbb      	ittet	lt
 800f56e:	425b      	neglt	r3, r3
 800f570:	f042 0202 	orrlt.w	r2, r2, #2
 800f574:	9307      	strge	r3, [sp, #28]
 800f576:	9307      	strlt	r3, [sp, #28]
 800f578:	bfb8      	it	lt
 800f57a:	9204      	strlt	r2, [sp, #16]
 800f57c:	7823      	ldrb	r3, [r4, #0]
 800f57e:	2b2e      	cmp	r3, #46	; 0x2e
 800f580:	d10c      	bne.n	800f59c <_svfiprintf_r+0x130>
 800f582:	7863      	ldrb	r3, [r4, #1]
 800f584:	2b2a      	cmp	r3, #42	; 0x2a
 800f586:	d135      	bne.n	800f5f4 <_svfiprintf_r+0x188>
 800f588:	9b03      	ldr	r3, [sp, #12]
 800f58a:	1d1a      	adds	r2, r3, #4
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	9203      	str	r2, [sp, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfb8      	it	lt
 800f594:	f04f 33ff 	movlt.w	r3, #4294967295
 800f598:	3402      	adds	r4, #2
 800f59a:	9305      	str	r3, [sp, #20]
 800f59c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f668 <_svfiprintf_r+0x1fc>
 800f5a0:	7821      	ldrb	r1, [r4, #0]
 800f5a2:	2203      	movs	r2, #3
 800f5a4:	4650      	mov	r0, sl
 800f5a6:	f7f0 fe3b 	bl	8000220 <memchr>
 800f5aa:	b140      	cbz	r0, 800f5be <_svfiprintf_r+0x152>
 800f5ac:	2340      	movs	r3, #64	; 0x40
 800f5ae:	eba0 000a 	sub.w	r0, r0, sl
 800f5b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f5b6:	9b04      	ldr	r3, [sp, #16]
 800f5b8:	4303      	orrs	r3, r0
 800f5ba:	3401      	adds	r4, #1
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c2:	4826      	ldr	r0, [pc, #152]	; (800f65c <_svfiprintf_r+0x1f0>)
 800f5c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5c8:	2206      	movs	r2, #6
 800f5ca:	f7f0 fe29 	bl	8000220 <memchr>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d038      	beq.n	800f644 <_svfiprintf_r+0x1d8>
 800f5d2:	4b23      	ldr	r3, [pc, #140]	; (800f660 <_svfiprintf_r+0x1f4>)
 800f5d4:	bb1b      	cbnz	r3, 800f61e <_svfiprintf_r+0x1b2>
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	3307      	adds	r3, #7
 800f5da:	f023 0307 	bic.w	r3, r3, #7
 800f5de:	3308      	adds	r3, #8
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e4:	4433      	add	r3, r6
 800f5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e8:	e767      	b.n	800f4ba <_svfiprintf_r+0x4e>
 800f5ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	2001      	movs	r0, #1
 800f5f2:	e7a5      	b.n	800f540 <_svfiprintf_r+0xd4>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	3401      	adds	r4, #1
 800f5f8:	9305      	str	r3, [sp, #20]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	f04f 0c0a 	mov.w	ip, #10
 800f600:	4620      	mov	r0, r4
 800f602:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f606:	3a30      	subs	r2, #48	; 0x30
 800f608:	2a09      	cmp	r2, #9
 800f60a:	d903      	bls.n	800f614 <_svfiprintf_r+0x1a8>
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0c5      	beq.n	800f59c <_svfiprintf_r+0x130>
 800f610:	9105      	str	r1, [sp, #20]
 800f612:	e7c3      	b.n	800f59c <_svfiprintf_r+0x130>
 800f614:	fb0c 2101 	mla	r1, ip, r1, r2
 800f618:	4604      	mov	r4, r0
 800f61a:	2301      	movs	r3, #1
 800f61c:	e7f0      	b.n	800f600 <_svfiprintf_r+0x194>
 800f61e:	ab03      	add	r3, sp, #12
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	462a      	mov	r2, r5
 800f624:	4b0f      	ldr	r3, [pc, #60]	; (800f664 <_svfiprintf_r+0x1f8>)
 800f626:	a904      	add	r1, sp, #16
 800f628:	4638      	mov	r0, r7
 800f62a:	f3af 8000 	nop.w
 800f62e:	1c42      	adds	r2, r0, #1
 800f630:	4606      	mov	r6, r0
 800f632:	d1d6      	bne.n	800f5e2 <_svfiprintf_r+0x176>
 800f634:	89ab      	ldrh	r3, [r5, #12]
 800f636:	065b      	lsls	r3, r3, #25
 800f638:	f53f af2c 	bmi.w	800f494 <_svfiprintf_r+0x28>
 800f63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f63e:	b01d      	add	sp, #116	; 0x74
 800f640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f644:	ab03      	add	r3, sp, #12
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	462a      	mov	r2, r5
 800f64a:	4b06      	ldr	r3, [pc, #24]	; (800f664 <_svfiprintf_r+0x1f8>)
 800f64c:	a904      	add	r1, sp, #16
 800f64e:	4638      	mov	r0, r7
 800f650:	f000 f9d4 	bl	800f9fc <_printf_i>
 800f654:	e7eb      	b.n	800f62e <_svfiprintf_r+0x1c2>
 800f656:	bf00      	nop
 800f658:	08012ca8 	.word	0x08012ca8
 800f65c:	08012cb2 	.word	0x08012cb2
 800f660:	00000000 	.word	0x00000000
 800f664:	0800f3b5 	.word	0x0800f3b5
 800f668:	08012cae 	.word	0x08012cae

0800f66c <__sfputc_r>:
 800f66c:	6893      	ldr	r3, [r2, #8]
 800f66e:	3b01      	subs	r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	b410      	push	{r4}
 800f674:	6093      	str	r3, [r2, #8]
 800f676:	da08      	bge.n	800f68a <__sfputc_r+0x1e>
 800f678:	6994      	ldr	r4, [r2, #24]
 800f67a:	42a3      	cmp	r3, r4
 800f67c:	db01      	blt.n	800f682 <__sfputc_r+0x16>
 800f67e:	290a      	cmp	r1, #10
 800f680:	d103      	bne.n	800f68a <__sfputc_r+0x1e>
 800f682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f686:	f7ff ba9d 	b.w	800ebc4 <__swbuf_r>
 800f68a:	6813      	ldr	r3, [r2, #0]
 800f68c:	1c58      	adds	r0, r3, #1
 800f68e:	6010      	str	r0, [r2, #0]
 800f690:	7019      	strb	r1, [r3, #0]
 800f692:	4608      	mov	r0, r1
 800f694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f698:	4770      	bx	lr

0800f69a <__sfputs_r>:
 800f69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	4614      	mov	r4, r2
 800f6a2:	18d5      	adds	r5, r2, r3
 800f6a4:	42ac      	cmp	r4, r5
 800f6a6:	d101      	bne.n	800f6ac <__sfputs_r+0x12>
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	e007      	b.n	800f6bc <__sfputs_r+0x22>
 800f6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b0:	463a      	mov	r2, r7
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f7ff ffda 	bl	800f66c <__sfputc_r>
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	d1f3      	bne.n	800f6a4 <__sfputs_r+0xa>
 800f6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6c0 <_vfiprintf_r>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	b09d      	sub	sp, #116	; 0x74
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	4698      	mov	r8, r3
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	b118      	cbz	r0, 800f6d8 <_vfiprintf_r+0x18>
 800f6d0:	6983      	ldr	r3, [r0, #24]
 800f6d2:	b90b      	cbnz	r3, 800f6d8 <_vfiprintf_r+0x18>
 800f6d4:	f7ff fc6e 	bl	800efb4 <__sinit>
 800f6d8:	4b89      	ldr	r3, [pc, #548]	; (800f900 <_vfiprintf_r+0x240>)
 800f6da:	429d      	cmp	r5, r3
 800f6dc:	d11b      	bne.n	800f716 <_vfiprintf_r+0x56>
 800f6de:	6875      	ldr	r5, [r6, #4]
 800f6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6e2:	07d9      	lsls	r1, r3, #31
 800f6e4:	d405      	bmi.n	800f6f2 <_vfiprintf_r+0x32>
 800f6e6:	89ab      	ldrh	r3, [r5, #12]
 800f6e8:	059a      	lsls	r2, r3, #22
 800f6ea:	d402      	bmi.n	800f6f2 <_vfiprintf_r+0x32>
 800f6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ee:	f7ff fd11 	bl	800f114 <__retarget_lock_acquire_recursive>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	071b      	lsls	r3, r3, #28
 800f6f6:	d501      	bpl.n	800f6fc <_vfiprintf_r+0x3c>
 800f6f8:	692b      	ldr	r3, [r5, #16]
 800f6fa:	b9eb      	cbnz	r3, 800f738 <_vfiprintf_r+0x78>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	4630      	mov	r0, r6
 800f700:	f7ff fab2 	bl	800ec68 <__swsetup_r>
 800f704:	b1c0      	cbz	r0, 800f738 <_vfiprintf_r+0x78>
 800f706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f708:	07dc      	lsls	r4, r3, #31
 800f70a:	d50e      	bpl.n	800f72a <_vfiprintf_r+0x6a>
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295
 800f710:	b01d      	add	sp, #116	; 0x74
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	4b7b      	ldr	r3, [pc, #492]	; (800f904 <_vfiprintf_r+0x244>)
 800f718:	429d      	cmp	r5, r3
 800f71a:	d101      	bne.n	800f720 <_vfiprintf_r+0x60>
 800f71c:	68b5      	ldr	r5, [r6, #8]
 800f71e:	e7df      	b.n	800f6e0 <_vfiprintf_r+0x20>
 800f720:	4b79      	ldr	r3, [pc, #484]	; (800f908 <_vfiprintf_r+0x248>)
 800f722:	429d      	cmp	r5, r3
 800f724:	bf08      	it	eq
 800f726:	68f5      	ldreq	r5, [r6, #12]
 800f728:	e7da      	b.n	800f6e0 <_vfiprintf_r+0x20>
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	0598      	lsls	r0, r3, #22
 800f72e:	d4ed      	bmi.n	800f70c <_vfiprintf_r+0x4c>
 800f730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f732:	f7ff fcf0 	bl	800f116 <__retarget_lock_release_recursive>
 800f736:	e7e9      	b.n	800f70c <_vfiprintf_r+0x4c>
 800f738:	2300      	movs	r3, #0
 800f73a:	9309      	str	r3, [sp, #36]	; 0x24
 800f73c:	2320      	movs	r3, #32
 800f73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f742:	f8cd 800c 	str.w	r8, [sp, #12]
 800f746:	2330      	movs	r3, #48	; 0x30
 800f748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f90c <_vfiprintf_r+0x24c>
 800f74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f750:	f04f 0901 	mov.w	r9, #1
 800f754:	4623      	mov	r3, r4
 800f756:	469a      	mov	sl, r3
 800f758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f75c:	b10a      	cbz	r2, 800f762 <_vfiprintf_r+0xa2>
 800f75e:	2a25      	cmp	r2, #37	; 0x25
 800f760:	d1f9      	bne.n	800f756 <_vfiprintf_r+0x96>
 800f762:	ebba 0b04 	subs.w	fp, sl, r4
 800f766:	d00b      	beq.n	800f780 <_vfiprintf_r+0xc0>
 800f768:	465b      	mov	r3, fp
 800f76a:	4622      	mov	r2, r4
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f7ff ff93 	bl	800f69a <__sfputs_r>
 800f774:	3001      	adds	r0, #1
 800f776:	f000 80aa 	beq.w	800f8ce <_vfiprintf_r+0x20e>
 800f77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f77c:	445a      	add	r2, fp
 800f77e:	9209      	str	r2, [sp, #36]	; 0x24
 800f780:	f89a 3000 	ldrb.w	r3, [sl]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 80a2 	beq.w	800f8ce <_vfiprintf_r+0x20e>
 800f78a:	2300      	movs	r3, #0
 800f78c:	f04f 32ff 	mov.w	r2, #4294967295
 800f790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f794:	f10a 0a01 	add.w	sl, sl, #1
 800f798:	9304      	str	r3, [sp, #16]
 800f79a:	9307      	str	r3, [sp, #28]
 800f79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f7a2:	4654      	mov	r4, sl
 800f7a4:	2205      	movs	r2, #5
 800f7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7aa:	4858      	ldr	r0, [pc, #352]	; (800f90c <_vfiprintf_r+0x24c>)
 800f7ac:	f7f0 fd38 	bl	8000220 <memchr>
 800f7b0:	9a04      	ldr	r2, [sp, #16]
 800f7b2:	b9d8      	cbnz	r0, 800f7ec <_vfiprintf_r+0x12c>
 800f7b4:	06d1      	lsls	r1, r2, #27
 800f7b6:	bf44      	itt	mi
 800f7b8:	2320      	movmi	r3, #32
 800f7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7be:	0713      	lsls	r3, r2, #28
 800f7c0:	bf44      	itt	mi
 800f7c2:	232b      	movmi	r3, #43	; 0x2b
 800f7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ce:	d015      	beq.n	800f7fc <_vfiprintf_r+0x13c>
 800f7d0:	9a07      	ldr	r2, [sp, #28]
 800f7d2:	4654      	mov	r4, sl
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f04f 0c0a 	mov.w	ip, #10
 800f7da:	4621      	mov	r1, r4
 800f7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7e0:	3b30      	subs	r3, #48	; 0x30
 800f7e2:	2b09      	cmp	r3, #9
 800f7e4:	d94e      	bls.n	800f884 <_vfiprintf_r+0x1c4>
 800f7e6:	b1b0      	cbz	r0, 800f816 <_vfiprintf_r+0x156>
 800f7e8:	9207      	str	r2, [sp, #28]
 800f7ea:	e014      	b.n	800f816 <_vfiprintf_r+0x156>
 800f7ec:	eba0 0308 	sub.w	r3, r0, r8
 800f7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	46a2      	mov	sl, r4
 800f7fa:	e7d2      	b.n	800f7a2 <_vfiprintf_r+0xe2>
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	1d19      	adds	r1, r3, #4
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	9103      	str	r1, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfbb      	ittet	lt
 800f808:	425b      	neglt	r3, r3
 800f80a:	f042 0202 	orrlt.w	r2, r2, #2
 800f80e:	9307      	strge	r3, [sp, #28]
 800f810:	9307      	strlt	r3, [sp, #28]
 800f812:	bfb8      	it	lt
 800f814:	9204      	strlt	r2, [sp, #16]
 800f816:	7823      	ldrb	r3, [r4, #0]
 800f818:	2b2e      	cmp	r3, #46	; 0x2e
 800f81a:	d10c      	bne.n	800f836 <_vfiprintf_r+0x176>
 800f81c:	7863      	ldrb	r3, [r4, #1]
 800f81e:	2b2a      	cmp	r3, #42	; 0x2a
 800f820:	d135      	bne.n	800f88e <_vfiprintf_r+0x1ce>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	1d1a      	adds	r2, r3, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	9203      	str	r2, [sp, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bfb8      	it	lt
 800f82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f832:	3402      	adds	r4, #2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f91c <_vfiprintf_r+0x25c>
 800f83a:	7821      	ldrb	r1, [r4, #0]
 800f83c:	2203      	movs	r2, #3
 800f83e:	4650      	mov	r0, sl
 800f840:	f7f0 fcee 	bl	8000220 <memchr>
 800f844:	b140      	cbz	r0, 800f858 <_vfiprintf_r+0x198>
 800f846:	2340      	movs	r3, #64	; 0x40
 800f848:	eba0 000a 	sub.w	r0, r0, sl
 800f84c:	fa03 f000 	lsl.w	r0, r3, r0
 800f850:	9b04      	ldr	r3, [sp, #16]
 800f852:	4303      	orrs	r3, r0
 800f854:	3401      	adds	r4, #1
 800f856:	9304      	str	r3, [sp, #16]
 800f858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f85c:	482c      	ldr	r0, [pc, #176]	; (800f910 <_vfiprintf_r+0x250>)
 800f85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f862:	2206      	movs	r2, #6
 800f864:	f7f0 fcdc 	bl	8000220 <memchr>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d03f      	beq.n	800f8ec <_vfiprintf_r+0x22c>
 800f86c:	4b29      	ldr	r3, [pc, #164]	; (800f914 <_vfiprintf_r+0x254>)
 800f86e:	bb1b      	cbnz	r3, 800f8b8 <_vfiprintf_r+0x1f8>
 800f870:	9b03      	ldr	r3, [sp, #12]
 800f872:	3307      	adds	r3, #7
 800f874:	f023 0307 	bic.w	r3, r3, #7
 800f878:	3308      	adds	r3, #8
 800f87a:	9303      	str	r3, [sp, #12]
 800f87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f87e:	443b      	add	r3, r7
 800f880:	9309      	str	r3, [sp, #36]	; 0x24
 800f882:	e767      	b.n	800f754 <_vfiprintf_r+0x94>
 800f884:	fb0c 3202 	mla	r2, ip, r2, r3
 800f888:	460c      	mov	r4, r1
 800f88a:	2001      	movs	r0, #1
 800f88c:	e7a5      	b.n	800f7da <_vfiprintf_r+0x11a>
 800f88e:	2300      	movs	r3, #0
 800f890:	3401      	adds	r4, #1
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	4619      	mov	r1, r3
 800f896:	f04f 0c0a 	mov.w	ip, #10
 800f89a:	4620      	mov	r0, r4
 800f89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8a0:	3a30      	subs	r2, #48	; 0x30
 800f8a2:	2a09      	cmp	r2, #9
 800f8a4:	d903      	bls.n	800f8ae <_vfiprintf_r+0x1ee>
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0c5      	beq.n	800f836 <_vfiprintf_r+0x176>
 800f8aa:	9105      	str	r1, [sp, #20]
 800f8ac:	e7c3      	b.n	800f836 <_vfiprintf_r+0x176>
 800f8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e7f0      	b.n	800f89a <_vfiprintf_r+0x1da>
 800f8b8:	ab03      	add	r3, sp, #12
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	462a      	mov	r2, r5
 800f8be:	4b16      	ldr	r3, [pc, #88]	; (800f918 <_vfiprintf_r+0x258>)
 800f8c0:	a904      	add	r1, sp, #16
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	4607      	mov	r7, r0
 800f8ca:	1c78      	adds	r0, r7, #1
 800f8cc:	d1d6      	bne.n	800f87c <_vfiprintf_r+0x1bc>
 800f8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8d0:	07d9      	lsls	r1, r3, #31
 800f8d2:	d405      	bmi.n	800f8e0 <_vfiprintf_r+0x220>
 800f8d4:	89ab      	ldrh	r3, [r5, #12]
 800f8d6:	059a      	lsls	r2, r3, #22
 800f8d8:	d402      	bmi.n	800f8e0 <_vfiprintf_r+0x220>
 800f8da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8dc:	f7ff fc1b 	bl	800f116 <__retarget_lock_release_recursive>
 800f8e0:	89ab      	ldrh	r3, [r5, #12]
 800f8e2:	065b      	lsls	r3, r3, #25
 800f8e4:	f53f af12 	bmi.w	800f70c <_vfiprintf_r+0x4c>
 800f8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8ea:	e711      	b.n	800f710 <_vfiprintf_r+0x50>
 800f8ec:	ab03      	add	r3, sp, #12
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	462a      	mov	r2, r5
 800f8f2:	4b09      	ldr	r3, [pc, #36]	; (800f918 <_vfiprintf_r+0x258>)
 800f8f4:	a904      	add	r1, sp, #16
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f000 f880 	bl	800f9fc <_printf_i>
 800f8fc:	e7e4      	b.n	800f8c8 <_vfiprintf_r+0x208>
 800f8fe:	bf00      	nop
 800f900:	08012c68 	.word	0x08012c68
 800f904:	08012c88 	.word	0x08012c88
 800f908:	08012c48 	.word	0x08012c48
 800f90c:	08012ca8 	.word	0x08012ca8
 800f910:	08012cb2 	.word	0x08012cb2
 800f914:	00000000 	.word	0x00000000
 800f918:	0800f69b 	.word	0x0800f69b
 800f91c:	08012cae 	.word	0x08012cae

0800f920 <_printf_common>:
 800f920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f924:	4616      	mov	r6, r2
 800f926:	4699      	mov	r9, r3
 800f928:	688a      	ldr	r2, [r1, #8]
 800f92a:	690b      	ldr	r3, [r1, #16]
 800f92c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f930:	4293      	cmp	r3, r2
 800f932:	bfb8      	it	lt
 800f934:	4613      	movlt	r3, r2
 800f936:	6033      	str	r3, [r6, #0]
 800f938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f93c:	4607      	mov	r7, r0
 800f93e:	460c      	mov	r4, r1
 800f940:	b10a      	cbz	r2, 800f946 <_printf_common+0x26>
 800f942:	3301      	adds	r3, #1
 800f944:	6033      	str	r3, [r6, #0]
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	0699      	lsls	r1, r3, #26
 800f94a:	bf42      	ittt	mi
 800f94c:	6833      	ldrmi	r3, [r6, #0]
 800f94e:	3302      	addmi	r3, #2
 800f950:	6033      	strmi	r3, [r6, #0]
 800f952:	6825      	ldr	r5, [r4, #0]
 800f954:	f015 0506 	ands.w	r5, r5, #6
 800f958:	d106      	bne.n	800f968 <_printf_common+0x48>
 800f95a:	f104 0a19 	add.w	sl, r4, #25
 800f95e:	68e3      	ldr	r3, [r4, #12]
 800f960:	6832      	ldr	r2, [r6, #0]
 800f962:	1a9b      	subs	r3, r3, r2
 800f964:	42ab      	cmp	r3, r5
 800f966:	dc26      	bgt.n	800f9b6 <_printf_common+0x96>
 800f968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f96c:	1e13      	subs	r3, r2, #0
 800f96e:	6822      	ldr	r2, [r4, #0]
 800f970:	bf18      	it	ne
 800f972:	2301      	movne	r3, #1
 800f974:	0692      	lsls	r2, r2, #26
 800f976:	d42b      	bmi.n	800f9d0 <_printf_common+0xb0>
 800f978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f97c:	4649      	mov	r1, r9
 800f97e:	4638      	mov	r0, r7
 800f980:	47c0      	blx	r8
 800f982:	3001      	adds	r0, #1
 800f984:	d01e      	beq.n	800f9c4 <_printf_common+0xa4>
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	68e5      	ldr	r5, [r4, #12]
 800f98a:	6832      	ldr	r2, [r6, #0]
 800f98c:	f003 0306 	and.w	r3, r3, #6
 800f990:	2b04      	cmp	r3, #4
 800f992:	bf08      	it	eq
 800f994:	1aad      	subeq	r5, r5, r2
 800f996:	68a3      	ldr	r3, [r4, #8]
 800f998:	6922      	ldr	r2, [r4, #16]
 800f99a:	bf0c      	ite	eq
 800f99c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9a0:	2500      	movne	r5, #0
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	bfc4      	itt	gt
 800f9a6:	1a9b      	subgt	r3, r3, r2
 800f9a8:	18ed      	addgt	r5, r5, r3
 800f9aa:	2600      	movs	r6, #0
 800f9ac:	341a      	adds	r4, #26
 800f9ae:	42b5      	cmp	r5, r6
 800f9b0:	d11a      	bne.n	800f9e8 <_printf_common+0xc8>
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	e008      	b.n	800f9c8 <_printf_common+0xa8>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	4652      	mov	r2, sl
 800f9ba:	4649      	mov	r1, r9
 800f9bc:	4638      	mov	r0, r7
 800f9be:	47c0      	blx	r8
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d103      	bne.n	800f9cc <_printf_common+0xac>
 800f9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9cc:	3501      	adds	r5, #1
 800f9ce:	e7c6      	b.n	800f95e <_printf_common+0x3e>
 800f9d0:	18e1      	adds	r1, r4, r3
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	2030      	movs	r0, #48	; 0x30
 800f9d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9da:	4422      	add	r2, r4
 800f9dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9e4:	3302      	adds	r3, #2
 800f9e6:	e7c7      	b.n	800f978 <_printf_common+0x58>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	47c0      	blx	r8
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	d0e6      	beq.n	800f9c4 <_printf_common+0xa4>
 800f9f6:	3601      	adds	r6, #1
 800f9f8:	e7d9      	b.n	800f9ae <_printf_common+0x8e>
	...

0800f9fc <_printf_i>:
 800f9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa00:	7e0f      	ldrb	r7, [r1, #24]
 800fa02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa04:	2f78      	cmp	r7, #120	; 0x78
 800fa06:	4691      	mov	r9, r2
 800fa08:	4680      	mov	r8, r0
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	469a      	mov	sl, r3
 800fa0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa12:	d807      	bhi.n	800fa24 <_printf_i+0x28>
 800fa14:	2f62      	cmp	r7, #98	; 0x62
 800fa16:	d80a      	bhi.n	800fa2e <_printf_i+0x32>
 800fa18:	2f00      	cmp	r7, #0
 800fa1a:	f000 80d8 	beq.w	800fbce <_printf_i+0x1d2>
 800fa1e:	2f58      	cmp	r7, #88	; 0x58
 800fa20:	f000 80a3 	beq.w	800fb6a <_printf_i+0x16e>
 800fa24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa2c:	e03a      	b.n	800faa4 <_printf_i+0xa8>
 800fa2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa32:	2b15      	cmp	r3, #21
 800fa34:	d8f6      	bhi.n	800fa24 <_printf_i+0x28>
 800fa36:	a101      	add	r1, pc, #4	; (adr r1, 800fa3c <_printf_i+0x40>)
 800fa38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa3c:	0800fa95 	.word	0x0800fa95
 800fa40:	0800faa9 	.word	0x0800faa9
 800fa44:	0800fa25 	.word	0x0800fa25
 800fa48:	0800fa25 	.word	0x0800fa25
 800fa4c:	0800fa25 	.word	0x0800fa25
 800fa50:	0800fa25 	.word	0x0800fa25
 800fa54:	0800faa9 	.word	0x0800faa9
 800fa58:	0800fa25 	.word	0x0800fa25
 800fa5c:	0800fa25 	.word	0x0800fa25
 800fa60:	0800fa25 	.word	0x0800fa25
 800fa64:	0800fa25 	.word	0x0800fa25
 800fa68:	0800fbb5 	.word	0x0800fbb5
 800fa6c:	0800fad9 	.word	0x0800fad9
 800fa70:	0800fb97 	.word	0x0800fb97
 800fa74:	0800fa25 	.word	0x0800fa25
 800fa78:	0800fa25 	.word	0x0800fa25
 800fa7c:	0800fbd7 	.word	0x0800fbd7
 800fa80:	0800fa25 	.word	0x0800fa25
 800fa84:	0800fad9 	.word	0x0800fad9
 800fa88:	0800fa25 	.word	0x0800fa25
 800fa8c:	0800fa25 	.word	0x0800fa25
 800fa90:	0800fb9f 	.word	0x0800fb9f
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	1d1a      	adds	r2, r3, #4
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	602a      	str	r2, [r5, #0]
 800fa9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800faa4:	2301      	movs	r3, #1
 800faa6:	e0a3      	b.n	800fbf0 <_printf_i+0x1f4>
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	6829      	ldr	r1, [r5, #0]
 800faac:	0606      	lsls	r6, r0, #24
 800faae:	f101 0304 	add.w	r3, r1, #4
 800fab2:	d50a      	bpl.n	800faca <_printf_i+0xce>
 800fab4:	680e      	ldr	r6, [r1, #0]
 800fab6:	602b      	str	r3, [r5, #0]
 800fab8:	2e00      	cmp	r6, #0
 800faba:	da03      	bge.n	800fac4 <_printf_i+0xc8>
 800fabc:	232d      	movs	r3, #45	; 0x2d
 800fabe:	4276      	negs	r6, r6
 800fac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fac4:	485e      	ldr	r0, [pc, #376]	; (800fc40 <_printf_i+0x244>)
 800fac6:	230a      	movs	r3, #10
 800fac8:	e019      	b.n	800fafe <_printf_i+0x102>
 800faca:	680e      	ldr	r6, [r1, #0]
 800facc:	602b      	str	r3, [r5, #0]
 800face:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fad2:	bf18      	it	ne
 800fad4:	b236      	sxthne	r6, r6
 800fad6:	e7ef      	b.n	800fab8 <_printf_i+0xbc>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	6820      	ldr	r0, [r4, #0]
 800fadc:	1d19      	adds	r1, r3, #4
 800fade:	6029      	str	r1, [r5, #0]
 800fae0:	0601      	lsls	r1, r0, #24
 800fae2:	d501      	bpl.n	800fae8 <_printf_i+0xec>
 800fae4:	681e      	ldr	r6, [r3, #0]
 800fae6:	e002      	b.n	800faee <_printf_i+0xf2>
 800fae8:	0646      	lsls	r6, r0, #25
 800faea:	d5fb      	bpl.n	800fae4 <_printf_i+0xe8>
 800faec:	881e      	ldrh	r6, [r3, #0]
 800faee:	4854      	ldr	r0, [pc, #336]	; (800fc40 <_printf_i+0x244>)
 800faf0:	2f6f      	cmp	r7, #111	; 0x6f
 800faf2:	bf0c      	ite	eq
 800faf4:	2308      	moveq	r3, #8
 800faf6:	230a      	movne	r3, #10
 800faf8:	2100      	movs	r1, #0
 800fafa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fafe:	6865      	ldr	r5, [r4, #4]
 800fb00:	60a5      	str	r5, [r4, #8]
 800fb02:	2d00      	cmp	r5, #0
 800fb04:	bfa2      	ittt	ge
 800fb06:	6821      	ldrge	r1, [r4, #0]
 800fb08:	f021 0104 	bicge.w	r1, r1, #4
 800fb0c:	6021      	strge	r1, [r4, #0]
 800fb0e:	b90e      	cbnz	r6, 800fb14 <_printf_i+0x118>
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	d04d      	beq.n	800fbb0 <_printf_i+0x1b4>
 800fb14:	4615      	mov	r5, r2
 800fb16:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb1a:	fb03 6711 	mls	r7, r3, r1, r6
 800fb1e:	5dc7      	ldrb	r7, [r0, r7]
 800fb20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb24:	4637      	mov	r7, r6
 800fb26:	42bb      	cmp	r3, r7
 800fb28:	460e      	mov	r6, r1
 800fb2a:	d9f4      	bls.n	800fb16 <_printf_i+0x11a>
 800fb2c:	2b08      	cmp	r3, #8
 800fb2e:	d10b      	bne.n	800fb48 <_printf_i+0x14c>
 800fb30:	6823      	ldr	r3, [r4, #0]
 800fb32:	07de      	lsls	r6, r3, #31
 800fb34:	d508      	bpl.n	800fb48 <_printf_i+0x14c>
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	6861      	ldr	r1, [r4, #4]
 800fb3a:	4299      	cmp	r1, r3
 800fb3c:	bfde      	ittt	le
 800fb3e:	2330      	movle	r3, #48	; 0x30
 800fb40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb48:	1b52      	subs	r2, r2, r5
 800fb4a:	6122      	str	r2, [r4, #16]
 800fb4c:	f8cd a000 	str.w	sl, [sp]
 800fb50:	464b      	mov	r3, r9
 800fb52:	aa03      	add	r2, sp, #12
 800fb54:	4621      	mov	r1, r4
 800fb56:	4640      	mov	r0, r8
 800fb58:	f7ff fee2 	bl	800f920 <_printf_common>
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d14c      	bne.n	800fbfa <_printf_i+0x1fe>
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	b004      	add	sp, #16
 800fb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb6a:	4835      	ldr	r0, [pc, #212]	; (800fc40 <_printf_i+0x244>)
 800fb6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb70:	6829      	ldr	r1, [r5, #0]
 800fb72:	6823      	ldr	r3, [r4, #0]
 800fb74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb78:	6029      	str	r1, [r5, #0]
 800fb7a:	061d      	lsls	r5, r3, #24
 800fb7c:	d514      	bpl.n	800fba8 <_printf_i+0x1ac>
 800fb7e:	07df      	lsls	r7, r3, #31
 800fb80:	bf44      	itt	mi
 800fb82:	f043 0320 	orrmi.w	r3, r3, #32
 800fb86:	6023      	strmi	r3, [r4, #0]
 800fb88:	b91e      	cbnz	r6, 800fb92 <_printf_i+0x196>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	f023 0320 	bic.w	r3, r3, #32
 800fb90:	6023      	str	r3, [r4, #0]
 800fb92:	2310      	movs	r3, #16
 800fb94:	e7b0      	b.n	800faf8 <_printf_i+0xfc>
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	f043 0320 	orr.w	r3, r3, #32
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	2378      	movs	r3, #120	; 0x78
 800fba0:	4828      	ldr	r0, [pc, #160]	; (800fc44 <_printf_i+0x248>)
 800fba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fba6:	e7e3      	b.n	800fb70 <_printf_i+0x174>
 800fba8:	0659      	lsls	r1, r3, #25
 800fbaa:	bf48      	it	mi
 800fbac:	b2b6      	uxthmi	r6, r6
 800fbae:	e7e6      	b.n	800fb7e <_printf_i+0x182>
 800fbb0:	4615      	mov	r5, r2
 800fbb2:	e7bb      	b.n	800fb2c <_printf_i+0x130>
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	6826      	ldr	r6, [r4, #0]
 800fbb8:	6961      	ldr	r1, [r4, #20]
 800fbba:	1d18      	adds	r0, r3, #4
 800fbbc:	6028      	str	r0, [r5, #0]
 800fbbe:	0635      	lsls	r5, r6, #24
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	d501      	bpl.n	800fbc8 <_printf_i+0x1cc>
 800fbc4:	6019      	str	r1, [r3, #0]
 800fbc6:	e002      	b.n	800fbce <_printf_i+0x1d2>
 800fbc8:	0670      	lsls	r0, r6, #25
 800fbca:	d5fb      	bpl.n	800fbc4 <_printf_i+0x1c8>
 800fbcc:	8019      	strh	r1, [r3, #0]
 800fbce:	2300      	movs	r3, #0
 800fbd0:	6123      	str	r3, [r4, #16]
 800fbd2:	4615      	mov	r5, r2
 800fbd4:	e7ba      	b.n	800fb4c <_printf_i+0x150>
 800fbd6:	682b      	ldr	r3, [r5, #0]
 800fbd8:	1d1a      	adds	r2, r3, #4
 800fbda:	602a      	str	r2, [r5, #0]
 800fbdc:	681d      	ldr	r5, [r3, #0]
 800fbde:	6862      	ldr	r2, [r4, #4]
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f7f0 fb1c 	bl	8000220 <memchr>
 800fbe8:	b108      	cbz	r0, 800fbee <_printf_i+0x1f2>
 800fbea:	1b40      	subs	r0, r0, r5
 800fbec:	6060      	str	r0, [r4, #4]
 800fbee:	6863      	ldr	r3, [r4, #4]
 800fbf0:	6123      	str	r3, [r4, #16]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbf8:	e7a8      	b.n	800fb4c <_printf_i+0x150>
 800fbfa:	6923      	ldr	r3, [r4, #16]
 800fbfc:	462a      	mov	r2, r5
 800fbfe:	4649      	mov	r1, r9
 800fc00:	4640      	mov	r0, r8
 800fc02:	47d0      	blx	sl
 800fc04:	3001      	adds	r0, #1
 800fc06:	d0ab      	beq.n	800fb60 <_printf_i+0x164>
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	079b      	lsls	r3, r3, #30
 800fc0c:	d413      	bmi.n	800fc36 <_printf_i+0x23a>
 800fc0e:	68e0      	ldr	r0, [r4, #12]
 800fc10:	9b03      	ldr	r3, [sp, #12]
 800fc12:	4298      	cmp	r0, r3
 800fc14:	bfb8      	it	lt
 800fc16:	4618      	movlt	r0, r3
 800fc18:	e7a4      	b.n	800fb64 <_printf_i+0x168>
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	4632      	mov	r2, r6
 800fc1e:	4649      	mov	r1, r9
 800fc20:	4640      	mov	r0, r8
 800fc22:	47d0      	blx	sl
 800fc24:	3001      	adds	r0, #1
 800fc26:	d09b      	beq.n	800fb60 <_printf_i+0x164>
 800fc28:	3501      	adds	r5, #1
 800fc2a:	68e3      	ldr	r3, [r4, #12]
 800fc2c:	9903      	ldr	r1, [sp, #12]
 800fc2e:	1a5b      	subs	r3, r3, r1
 800fc30:	42ab      	cmp	r3, r5
 800fc32:	dcf2      	bgt.n	800fc1a <_printf_i+0x21e>
 800fc34:	e7eb      	b.n	800fc0e <_printf_i+0x212>
 800fc36:	2500      	movs	r5, #0
 800fc38:	f104 0619 	add.w	r6, r4, #25
 800fc3c:	e7f5      	b.n	800fc2a <_printf_i+0x22e>
 800fc3e:	bf00      	nop
 800fc40:	08012cb9 	.word	0x08012cb9
 800fc44:	08012cca 	.word	0x08012cca

0800fc48 <_sbrk_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d06      	ldr	r5, [pc, #24]	; (800fc64 <_sbrk_r+0x1c>)
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4608      	mov	r0, r1
 800fc52:	602b      	str	r3, [r5, #0]
 800fc54:	f7f0 ff46 	bl	8000ae4 <_sbrk>
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	d102      	bne.n	800fc62 <_sbrk_r+0x1a>
 800fc5c:	682b      	ldr	r3, [r5, #0]
 800fc5e:	b103      	cbz	r3, 800fc62 <_sbrk_r+0x1a>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	20008ab8 	.word	0x20008ab8

0800fc68 <__sread>:
 800fc68:	b510      	push	{r4, lr}
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc70:	f000 f8d8 	bl	800fe24 <_read_r>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	bfab      	itete	ge
 800fc78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc7c:	181b      	addge	r3, r3, r0
 800fc7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc82:	bfac      	ite	ge
 800fc84:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc86:	81a3      	strhlt	r3, [r4, #12]
 800fc88:	bd10      	pop	{r4, pc}

0800fc8a <__swrite>:
 800fc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8e:	461f      	mov	r7, r3
 800fc90:	898b      	ldrh	r3, [r1, #12]
 800fc92:	05db      	lsls	r3, r3, #23
 800fc94:	4605      	mov	r5, r0
 800fc96:	460c      	mov	r4, r1
 800fc98:	4616      	mov	r6, r2
 800fc9a:	d505      	bpl.n	800fca8 <__swrite+0x1e>
 800fc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca0:	2302      	movs	r3, #2
 800fca2:	2200      	movs	r2, #0
 800fca4:	f000 f870 	bl	800fd88 <_lseek_r>
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	4632      	mov	r2, r6
 800fcb6:	463b      	mov	r3, r7
 800fcb8:	4628      	mov	r0, r5
 800fcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcbe:	f000 b817 	b.w	800fcf0 <_write_r>

0800fcc2 <__sseek>:
 800fcc2:	b510      	push	{r4, lr}
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcca:	f000 f85d 	bl	800fd88 <_lseek_r>
 800fcce:	1c43      	adds	r3, r0, #1
 800fcd0:	89a3      	ldrh	r3, [r4, #12]
 800fcd2:	bf15      	itete	ne
 800fcd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcde:	81a3      	strheq	r3, [r4, #12]
 800fce0:	bf18      	it	ne
 800fce2:	81a3      	strhne	r3, [r4, #12]
 800fce4:	bd10      	pop	{r4, pc}

0800fce6 <__sclose>:
 800fce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcea:	f000 b81b 	b.w	800fd24 <_close_r>
	...

0800fcf0 <_write_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d07      	ldr	r5, [pc, #28]	; (800fd10 <_write_r+0x20>)
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	602a      	str	r2, [r5, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f7f0 fe9f 	bl	8000a42 <_write>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_write_r+0x1e>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_write_r+0x1e>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20008ab8 	.word	0x20008ab8

0800fd14 <abort>:
 800fd14:	b508      	push	{r3, lr}
 800fd16:	2006      	movs	r0, #6
 800fd18:	f000 f8be 	bl	800fe98 <raise>
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	f7f0 fe69 	bl	80009f4 <_exit>
	...

0800fd24 <_close_r>:
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4d06      	ldr	r5, [pc, #24]	; (800fd40 <_close_r+0x1c>)
 800fd28:	2300      	movs	r3, #0
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	4608      	mov	r0, r1
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	f7f0 fea3 	bl	8000a7a <_close>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d102      	bne.n	800fd3e <_close_r+0x1a>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	b103      	cbz	r3, 800fd3e <_close_r+0x1a>
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	20008ab8 	.word	0x20008ab8

0800fd44 <_fstat_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4d07      	ldr	r5, [pc, #28]	; (800fd64 <_fstat_r+0x20>)
 800fd48:	2300      	movs	r3, #0
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	4608      	mov	r0, r1
 800fd4e:	4611      	mov	r1, r2
 800fd50:	602b      	str	r3, [r5, #0]
 800fd52:	f7f0 fe9e 	bl	8000a92 <_fstat>
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	d102      	bne.n	800fd60 <_fstat_r+0x1c>
 800fd5a:	682b      	ldr	r3, [r5, #0]
 800fd5c:	b103      	cbz	r3, 800fd60 <_fstat_r+0x1c>
 800fd5e:	6023      	str	r3, [r4, #0]
 800fd60:	bd38      	pop	{r3, r4, r5, pc}
 800fd62:	bf00      	nop
 800fd64:	20008ab8 	.word	0x20008ab8

0800fd68 <_isatty_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d06      	ldr	r5, [pc, #24]	; (800fd84 <_isatty_r+0x1c>)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	4604      	mov	r4, r0
 800fd70:	4608      	mov	r0, r1
 800fd72:	602b      	str	r3, [r5, #0]
 800fd74:	f7f0 fe9d 	bl	8000ab2 <_isatty>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d102      	bne.n	800fd82 <_isatty_r+0x1a>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b103      	cbz	r3, 800fd82 <_isatty_r+0x1a>
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd38      	pop	{r3, r4, r5, pc}
 800fd84:	20008ab8 	.word	0x20008ab8

0800fd88 <_lseek_r>:
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	4d07      	ldr	r5, [pc, #28]	; (800fda8 <_lseek_r+0x20>)
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	4608      	mov	r0, r1
 800fd90:	4611      	mov	r1, r2
 800fd92:	2200      	movs	r2, #0
 800fd94:	602a      	str	r2, [r5, #0]
 800fd96:	461a      	mov	r2, r3
 800fd98:	f7f0 fe96 	bl	8000ac8 <_lseek>
 800fd9c:	1c43      	adds	r3, r0, #1
 800fd9e:	d102      	bne.n	800fda6 <_lseek_r+0x1e>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	b103      	cbz	r3, 800fda6 <_lseek_r+0x1e>
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	20008ab8 	.word	0x20008ab8

0800fdac <__malloc_lock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	; (800fdb4 <__malloc_lock+0x8>)
 800fdae:	f7ff b9b1 	b.w	800f114 <__retarget_lock_acquire_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	20008abc 	.word	0x20008abc

0800fdb8 <__malloc_unlock>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__malloc_unlock+0x8>)
 800fdba:	f7ff b9ac 	b.w	800f116 <__retarget_lock_release_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	20008abc 	.word	0x20008abc

0800fdc4 <_realloc_r>:
 800fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4614      	mov	r4, r2
 800fdcc:	460e      	mov	r6, r1
 800fdce:	b921      	cbnz	r1, 800fdda <_realloc_r+0x16>
 800fdd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	f7ff ba79 	b.w	800f2cc <_malloc_r>
 800fdda:	b92a      	cbnz	r2, 800fde8 <_realloc_r+0x24>
 800fddc:	f7ff fa0a 	bl	800f1f4 <_free_r>
 800fde0:	4625      	mov	r5, r4
 800fde2:	4628      	mov	r0, r5
 800fde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde8:	f000 f872 	bl	800fed0 <_malloc_usable_size_r>
 800fdec:	4284      	cmp	r4, r0
 800fdee:	4607      	mov	r7, r0
 800fdf0:	d802      	bhi.n	800fdf8 <_realloc_r+0x34>
 800fdf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdf6:	d812      	bhi.n	800fe1e <_realloc_r+0x5a>
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	f7ff fa66 	bl	800f2cc <_malloc_r>
 800fe00:	4605      	mov	r5, r0
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d0ed      	beq.n	800fde2 <_realloc_r+0x1e>
 800fe06:	42bc      	cmp	r4, r7
 800fe08:	4622      	mov	r2, r4
 800fe0a:	4631      	mov	r1, r6
 800fe0c:	bf28      	it	cs
 800fe0e:	463a      	movcs	r2, r7
 800fe10:	f7fe fda0 	bl	800e954 <memcpy>
 800fe14:	4631      	mov	r1, r6
 800fe16:	4640      	mov	r0, r8
 800fe18:	f7ff f9ec 	bl	800f1f4 <_free_r>
 800fe1c:	e7e1      	b.n	800fde2 <_realloc_r+0x1e>
 800fe1e:	4635      	mov	r5, r6
 800fe20:	e7df      	b.n	800fde2 <_realloc_r+0x1e>
	...

0800fe24 <_read_r>:
 800fe24:	b538      	push	{r3, r4, r5, lr}
 800fe26:	4d07      	ldr	r5, [pc, #28]	; (800fe44 <_read_r+0x20>)
 800fe28:	4604      	mov	r4, r0
 800fe2a:	4608      	mov	r0, r1
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	2200      	movs	r2, #0
 800fe30:	602a      	str	r2, [r5, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	f7f0 fde8 	bl	8000a08 <_read>
 800fe38:	1c43      	adds	r3, r0, #1
 800fe3a:	d102      	bne.n	800fe42 <_read_r+0x1e>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	b103      	cbz	r3, 800fe42 <_read_r+0x1e>
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	20008ab8 	.word	0x20008ab8

0800fe48 <_raise_r>:
 800fe48:	291f      	cmp	r1, #31
 800fe4a:	b538      	push	{r3, r4, r5, lr}
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	460d      	mov	r5, r1
 800fe50:	d904      	bls.n	800fe5c <_raise_r+0x14>
 800fe52:	2316      	movs	r3, #22
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe5e:	b112      	cbz	r2, 800fe66 <_raise_r+0x1e>
 800fe60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe64:	b94b      	cbnz	r3, 800fe7a <_raise_r+0x32>
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 f830 	bl	800fecc <_getpid_r>
 800fe6c:	462a      	mov	r2, r5
 800fe6e:	4601      	mov	r1, r0
 800fe70:	4620      	mov	r0, r4
 800fe72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe76:	f000 b817 	b.w	800fea8 <_kill_r>
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d00a      	beq.n	800fe94 <_raise_r+0x4c>
 800fe7e:	1c59      	adds	r1, r3, #1
 800fe80:	d103      	bne.n	800fe8a <_raise_r+0x42>
 800fe82:	2316      	movs	r3, #22
 800fe84:	6003      	str	r3, [r0, #0]
 800fe86:	2001      	movs	r0, #1
 800fe88:	e7e7      	b.n	800fe5a <_raise_r+0x12>
 800fe8a:	2400      	movs	r4, #0
 800fe8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe90:	4628      	mov	r0, r5
 800fe92:	4798      	blx	r3
 800fe94:	2000      	movs	r0, #0
 800fe96:	e7e0      	b.n	800fe5a <_raise_r+0x12>

0800fe98 <raise>:
 800fe98:	4b02      	ldr	r3, [pc, #8]	; (800fea4 <raise+0xc>)
 800fe9a:	4601      	mov	r1, r0
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	f7ff bfd3 	b.w	800fe48 <_raise_r>
 800fea2:	bf00      	nop
 800fea4:	20000014 	.word	0x20000014

0800fea8 <_kill_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d07      	ldr	r5, [pc, #28]	; (800fec8 <_kill_r+0x20>)
 800feac:	2300      	movs	r3, #0
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	4611      	mov	r1, r2
 800feb4:	602b      	str	r3, [r5, #0]
 800feb6:	f7f0 fd8b 	bl	80009d0 <_kill>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	d102      	bne.n	800fec4 <_kill_r+0x1c>
 800febe:	682b      	ldr	r3, [r5, #0]
 800fec0:	b103      	cbz	r3, 800fec4 <_kill_r+0x1c>
 800fec2:	6023      	str	r3, [r4, #0]
 800fec4:	bd38      	pop	{r3, r4, r5, pc}
 800fec6:	bf00      	nop
 800fec8:	20008ab8 	.word	0x20008ab8

0800fecc <_getpid_r>:
 800fecc:	f7f0 bd77 	b.w	80009be <_getpid>

0800fed0 <_malloc_usable_size_r>:
 800fed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fed4:	1f18      	subs	r0, r3, #4
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	bfbc      	itt	lt
 800feda:	580b      	ldrlt	r3, [r1, r0]
 800fedc:	18c0      	addlt	r0, r0, r3
 800fede:	4770      	bx	lr

0800fee0 <_init>:
 800fee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee2:	bf00      	nop
 800fee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fee6:	bc08      	pop	{r3}
 800fee8:	469e      	mov	lr, r3
 800feea:	4770      	bx	lr

0800feec <_fini>:
 800feec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feee:	bf00      	nop
 800fef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fef2:	bc08      	pop	{r3}
 800fef4:	469e      	mov	lr, r3
 800fef6:	4770      	bx	lr
